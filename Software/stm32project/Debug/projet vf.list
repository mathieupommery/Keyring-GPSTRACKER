
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ac78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002560  0801ae08  0801ae08  0002ae08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d368  0801d368  00030308  2**0
                  CONTENTS
  4 .ARM          00000008  0801d368  0801d368  0002d368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d370  0801d370  00030308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d370  0801d370  0002d370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d374  0801d374  0002d374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  0801d378  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022a4  20000308  0801d680  00030308  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200025ac  0801d680  000325ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002cb25  00000000  00000000  0003037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006269  00000000  00000000  0005cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002300  00000000  00000000  00063110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ae7  00000000  00000000  00065410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008f66  00000000  00000000  00066ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030396  00000000  00000000  0006fe5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8f02  00000000  00000000  000a01f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000adf8  00000000  00000000  001890f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00193ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000308 	.word	0x20000308
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801adf0 	.word	0x0801adf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000030c 	.word	0x2000030c
 80001cc:	0801adf0 	.word	0x0801adf0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001006:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001008:	4a38      	ldr	r2, [pc, #224]	; (80010ec <MX_ADC1_Init+0xfc>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001012:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800101e:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001020:	2201      	movs	r2, #1
 8001022:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001024:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001026:	2204      	movs	r2, #4
 8001028:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800102c:	2200      	movs	r2, #0
 800102e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001032:	2201      	movs	r2, #1
 8001034:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001036:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001038:	2203      	movs	r2, #3
 800103a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001046:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800104e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800105e:	2200      	movs	r2, #0
 8001060:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106a:	481f      	ldr	r0, [pc, #124]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800106c:	f005 fbe6 	bl	800683c <HAL_ADC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001076:	f000 fd0c 	bl	8001a92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_ADC1_Init+0x100>)
 800107c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800107e:	2306      	movs	r3, #6
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001082:	2307      	movs	r3, #7
 8001084:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001086:	237f      	movs	r3, #127	; 0x7f
 8001088:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800108a:	2304      	movs	r3, #4
 800108c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001098:	f005 ff68 	bl	8006f6c <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010a2:	f000 fcf6 	bl	8001a92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_ADC1_Init+0x104>)
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010aa:	230c      	movs	r3, #12
 80010ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_ADC1_Init+0xf8>)
 80010b4:	f005 ff5a 	bl	8006f6c <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80010be:	f000 fce8 	bl	8001a92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <MX_ADC1_Init+0x108>)
 80010c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010c6:	2312      	movs	r3, #18
 80010c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_ADC1_Init+0xf8>)
 80010d0:	f005 ff4c 	bl	8006f6c <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80010da:	f000 fcda 	bl	8001a92 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000324 	.word	0x20000324
 80010ec:	50040000 	.word	0x50040000
 80010f0:	80000001 	.word	0x80000001
 80010f4:	c7520000 	.word	0xc7520000
 80010f8:	25b00200 	.word	0x25b00200

080010fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <HAL_ADC_MspInit+0xdc>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d157      	bne.n	80011ce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800111e:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a2e      	ldr	r2, [pc, #184]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001124:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b29      	ldr	r3, [pc, #164]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a28      	ldr	r2, [pc, #160]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800114e:	2310      	movs	r3, #16
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001152:	230b      	movs	r3, #11
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f006 ffc4 	bl	80080f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 800116c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800118c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001194:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001198:	2200      	movs	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011a2:	480f      	ldr	r0, [pc, #60]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011a4:	f006 fd22 	bl	8007bec <HAL_DMA_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80011ae:	f000 fc70 	bl	8001a92 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2012      	movs	r0, #18
 80011c4:	f006 fcdb 	bl	8007b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80011c8:	2012      	movs	r0, #18
 80011ca:	f006 fcf4 	bl	8007bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	50040000 	.word	0x50040000
 80011dc:	40021000 	.word	0x40021000
 80011e0:	20000388 	.word	0x20000388
 80011e4:	40020008 	.word	0x40020008

080011e8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80011e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a54      	ldr	r2, [pc, #336]	; (8001348 <HAL_ADC_ConvCpltCallback+0x160>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	f040 8091 	bne.w	8001320 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 80011fe:	4b53      	ldr	r3, [pc, #332]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f98e 	bl	8000524 <__aeabi_i2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	a14a      	add	r1, pc, #296	; (adr r1, 8001338 <HAL_ADC_ConvCpltCallback+0x150>)
 800120e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001212:	f7ff fb1b 	bl	800084c <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fce3 	bl	8000be8 <__aeabi_d2f>
 8001222:	4603      	mov	r3, r0
 8001224:	4a4a      	ldr	r2, [pc, #296]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 8001226:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001228:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <HAL_ADC_ConvCpltCallback+0x16c>)
 800122a:	ed93 7a00 	vldr	s14, [r3]
 800122e:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <HAL_ADC_ConvCpltCallback+0x170>)
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001238:	ee17 0a90 	vmov	r0, s15
 800123c:	f7ff f984 	bl	8000548 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	f04f 0000 	mov.w	r0, #0
 8001248:	4944      	ldr	r1, [pc, #272]	; (800135c <HAL_ADC_ConvCpltCallback+0x174>)
 800124a:	f7ff faff 	bl	800084c <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4690      	mov	r8, r2
 8001254:	4699      	mov	r9, r3
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001258:	885b      	ldrh	r3, [r3, #2]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f962 	bl	8000524 <__aeabi_i2d>
 8001260:	4604      	mov	r4, r0
 8001262:	460d      	mov	r5, r1
 8001264:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f96d 	bl	8000548 <__aeabi_f2d>
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <HAL_ADC_ConvCpltCallback+0x178>)
 8001274:	f7ff faea 	bl	800084c <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff f9ba 	bl	80005f8 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4614      	mov	r4, r2
 800128a:	461d      	mov	r5, r3
 800128c:	4b32      	ldr	r3, [pc, #200]	; (8001358 <HAL_ADC_ConvCpltCallback+0x170>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f959 	bl	8000548 <__aeabi_f2d>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4620      	mov	r0, r4
 800129c:	4629      	mov	r1, r5
 800129e:	f7fe fff3 	bl	8000288 <__aeabi_dsub>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4640      	mov	r0, r8
 80012a8:	4649      	mov	r1, r9
 80012aa:	f7ff f9a5 	bl	80005f8 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc97 	bl	8000be8 <__aeabi_d2f>
 80012ba:	ee07 0a10 	vmov	s14, r0
 80012be:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80012c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <HAL_ADC_ConvCpltCallback+0x17c>)
 80012c8:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 80012ce:	889b      	ldrh	r3, [r3, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f927 	bl	8000524 <__aeabi_i2d>
 80012d6:	a31a      	add	r3, pc, #104	; (adr r3, 8001340 <HAL_ADC_ConvCpltCallback+0x158>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff fab6 	bl	800084c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	f7fe ffce 	bl	800028c <__adddf3>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	461d      	mov	r5, r3
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f923 	bl	8000548 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4620      	mov	r0, r4
 8001308:	4629      	mov	r1, r5
 800130a:	f7ff f975 	bl	80005f8 <__aeabi_dmul>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fc67 	bl	8000be8 <__aeabi_d2f>
 800131a:	4603      	mov	r3, r0
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <HAL_ADC_ConvCpltCallback+0x180>)
 800131e:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001320:	2203      	movs	r2, #3
 8001322:	490a      	ldr	r1, [pc, #40]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001324:	4811      	ldr	r0, [pc, #68]	; (800136c <HAL_ADC_ConvCpltCallback+0x184>)
 8001326:	f005 fbcb 	bl	8006ac0 <HAL_ADC_Start_DMA>



}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001334:	f3af 8000 	nop.w
 8001338:	d70a3d70 	.word	0xd70a3d70
 800133c:	40b36323 	.word	0x40b36323
 8001340:	00000000 	.word	0x00000000
 8001344:	40affe00 	.word	0x40affe00
 8001348:	50040000 	.word	0x50040000
 800134c:	20000730 	.word	0x20000730
 8001350:	2000073c 	.word	0x2000073c
 8001354:	20000000 	.word	0x20000000
 8001358:	20000004 	.word	0x20000004
 800135c:	40590000 	.word	0x40590000
 8001360:	40080000 	.word	0x40080000
 8001364:	20000738 	.word	0x20000738
 8001368:	20000740 	.word	0x20000740
 800136c:	20000324 	.word	0x20000324

08001370 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001376:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <MX_DMA_Init+0x80>)
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <MX_DMA_Init+0x80>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6493      	str	r3, [r2, #72]	; 0x48
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <MX_DMA_Init+0x80>)
 8001384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <MX_DMA_Init+0x80>)
 8001390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <MX_DMA_Init+0x80>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6493      	str	r3, [r2, #72]	; 0x48
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_DMA_Init+0x80>)
 800139c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	200b      	movs	r0, #11
 80013ac:	f006 fbe7 	bl	8007b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013b0:	200b      	movs	r0, #11
 80013b2:	f006 fc00 	bl	8007bb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	200c      	movs	r0, #12
 80013bc:	f006 fbdf 	bl	8007b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80013c0:	200c      	movs	r0, #12
 80013c2:	f006 fbf8 	bl	8007bb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	200d      	movs	r0, #13
 80013cc:	f006 fbd7 	bl	8007b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80013d0:	200d      	movs	r0, #13
 80013d2:	f006 fbf0 	bl	8007bb6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	2045      	movs	r0, #69	; 0x45
 80013dc:	f006 fbcf 	bl	8007b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80013e0:	2045      	movs	r0, #69	; 0x45
 80013e2:	f006 fbe8 	bl	8007bb6 <HAL_NVIC_EnableIRQ>

}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000

080013f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b38      	ldr	r3, [pc, #224]	; (80014ec <MX_GPIO_Init+0xf8>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	4a37      	ldr	r2, [pc, #220]	; (80014ec <MX_GPIO_Init+0xf8>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001416:	4b35      	ldr	r3, [pc, #212]	; (80014ec <MX_GPIO_Init+0xf8>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4b32      	ldr	r3, [pc, #200]	; (80014ec <MX_GPIO_Init+0xf8>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4a31      	ldr	r2, [pc, #196]	; (80014ec <MX_GPIO_Init+0xf8>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <MX_GPIO_Init+0xf8>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2102      	movs	r1, #2
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f006 ffd7 	bl	80083f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2101      	movs	r1, #1
 800144a:	4829      	ldr	r0, [pc, #164]	; (80014f0 <MX_GPIO_Init+0xfc>)
 800144c:	f006 ffd2 	bl	80083f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001450:	2302      	movs	r3, #2
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146a:	f006 fe41 	bl	80080f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 800146e:	2301      	movs	r3, #1
 8001470:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	4619      	mov	r1, r3
 8001484:	481a      	ldr	r0, [pc, #104]	; (80014f0 <MX_GPIO_Init+0xfc>)
 8001486:	f006 fe33 	bl	80080f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800148a:	2302      	movs	r3, #2
 800148c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800148e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	4619      	mov	r1, r3
 800149e:	4814      	ldr	r0, [pc, #80]	; (80014f0 <MX_GPIO_Init+0xfc>)
 80014a0:	f006 fe26 	bl	80080f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014aa:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80014ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	4619      	mov	r1, r3
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014be:	f006 fe17 	bl	80080f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2101      	movs	r1, #1
 80014c6:	2007      	movs	r0, #7
 80014c8:	f006 fb59 	bl	8007b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014cc:	2007      	movs	r0, #7
 80014ce:	f006 fb72 	bl	8007bb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2102      	movs	r1, #2
 80014d6:	2017      	movs	r0, #23
 80014d8:	f006 fb51 	bl	8007b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014dc:	2017      	movs	r0, #23
 80014de:	f006 fb6a 	bl	8007bb6 <HAL_NVIC_EnableIRQ>

}
 80014e2:	bf00      	nop
 80014e4:	3720      	adds	r7, #32
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	48000400 	.word	0x48000400

080014f4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <MX_I2C1_Init+0x74>)
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <MX_I2C1_Init+0x78>)
 80014fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_I2C1_Init+0x74>)
 8001500:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <MX_I2C1_Init+0x7c>)
 8001502:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <MX_I2C1_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_I2C1_Init+0x74>)
 800150c:	2201      	movs	r2, #1
 800150e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_I2C1_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_I2C1_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_I2C1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_I2C1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_I2C1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800152e:	480e      	ldr	r0, [pc, #56]	; (8001568 <MX_I2C1_Init+0x74>)
 8001530:	f006 ff90 	bl	8008454 <HAL_I2C_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800153a:	f000 faaa 	bl	8001a92 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800153e:	2100      	movs	r1, #0
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <MX_I2C1_Init+0x74>)
 8001542:	f007 fb9b 	bl	8008c7c <HAL_I2CEx_ConfigAnalogFilter>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800154c:	f000 faa1 	bl	8001a92 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001550:	2100      	movs	r1, #0
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_I2C1_Init+0x74>)
 8001554:	f007 fbdd 	bl	8008d12 <HAL_I2CEx_ConfigDigitalFilter>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800155e:	f000 fa98 	bl	8001a92 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200003d0 	.word	0x200003d0
 800156c:	40005400 	.word	0x40005400
 8001570:	00202538 	.word	0x00202538

08001574 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_I2C3_Init+0x7c>)
 800157a:	4a1e      	ldr	r2, [pc, #120]	; (80015f4 <MX_I2C3_Init+0x80>)
 800157c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100618;
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <MX_I2C3_Init+0x7c>)
 8001580:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <MX_I2C3_Init+0x84>)
 8001582:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_I2C3_Init+0x7c>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <MX_I2C3_Init+0x7c>)
 800158c:	2201      	movs	r2, #1
 800158e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_I2C3_Init+0x7c>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <MX_I2C3_Init+0x7c>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_I2C3_Init+0x7c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_I2C3_Init+0x7c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_I2C3_Init+0x7c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015ae:	4810      	ldr	r0, [pc, #64]	; (80015f0 <MX_I2C3_Init+0x7c>)
 80015b0:	f006 ff50 	bl	8008454 <HAL_I2C_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80015ba:	f000 fa6a 	bl	8001a92 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015be:	2100      	movs	r1, #0
 80015c0:	480b      	ldr	r0, [pc, #44]	; (80015f0 <MX_I2C3_Init+0x7c>)
 80015c2:	f007 fb5b 	bl	8008c7c <HAL_I2CEx_ConfigAnalogFilter>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80015cc:	f000 fa61 	bl	8001a92 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015d0:	2100      	movs	r1, #0
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_I2C3_Init+0x7c>)
 80015d4:	f007 fb9d 	bl	8008d12 <HAL_I2CEx_ConfigDigitalFilter>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80015de:	f000 fa58 	bl	8001a92 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80015e2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80015e6:	f007 fbe1 	bl	8008dac <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000424 	.word	0x20000424
 80015f4:	40005c00 	.word	0x40005c00
 80015f8:	00100618 	.word	0x00100618

080015fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b0a2      	sub	sp, #136	; 0x88
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001614:	f107 0320 	add.w	r3, r7, #32
 8001618:	2254      	movs	r2, #84	; 0x54
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f015 f8ec 	bl	80167fa <memset>
  if(i2cHandle->Instance==I2C1)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a50      	ldr	r2, [pc, #320]	; (8001768 <HAL_I2C_MspInit+0x16c>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d13a      	bne.n	80016a2 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800162c:	2340      	movs	r3, #64	; 0x40
 800162e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001630:	2300      	movs	r3, #0
 8001632:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001634:	f107 0320 	add.w	r3, r7, #32
 8001638:	4618      	mov	r0, r3
 800163a:	f00a f801 	bl	800b640 <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001644:	f000 fa25 	bl	8001a92 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b48      	ldr	r3, [pc, #288]	; (800176c <HAL_I2C_MspInit+0x170>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	4a47      	ldr	r2, [pc, #284]	; (800176c <HAL_I2C_MspInit+0x170>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001654:	4b45      	ldr	r3, [pc, #276]	; (800176c <HAL_I2C_MspInit+0x170>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001660:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001664:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001666:	2312      	movs	r3, #18
 8001668:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001674:	2304      	movs	r3, #4
 8001676:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800167e:	4619      	mov	r1, r3
 8001680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001684:	f006 fd34 	bl	80080f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001688:	4b38      	ldr	r3, [pc, #224]	; (800176c <HAL_I2C_MspInit+0x170>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	4a37      	ldr	r2, [pc, #220]	; (800176c <HAL_I2C_MspInit+0x170>)
 800168e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001692:	6593      	str	r3, [r2, #88]	; 0x58
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <HAL_I2C_MspInit+0x170>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80016a0:	e05d      	b.n	800175e <HAL_I2C_MspInit+0x162>
  else if(i2cHandle->Instance==I2C3)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a32      	ldr	r2, [pc, #200]	; (8001770 <HAL_I2C_MspInit+0x174>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d158      	bne.n	800175e <HAL_I2C_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80016ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 80016b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b8:	f107 0320 	add.w	r3, r7, #32
 80016bc:	4618      	mov	r0, r3
 80016be:	f009 ffbf 	bl	800b640 <HAL_RCCEx_PeriphCLKConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80016c8:	f000 f9e3 	bl	8001a92 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	4a26      	ldr	r2, [pc, #152]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e8:	4a20      	ldr	r2, [pc, #128]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001700:	2312      	movs	r3, #18
 8001702:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800170e:	2304      	movs	r3, #4
 8001710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001718:	4619      	mov	r1, r3
 800171a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171e:	f006 fce7 	bl	80080f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001722:	2310      	movs	r3, #16
 8001724:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001726:	2312      	movs	r3, #18
 8001728:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001734:	2304      	movs	r3, #4
 8001736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800173e:	4619      	mov	r1, r3
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <HAL_I2C_MspInit+0x178>)
 8001742:	f006 fcd5 	bl	80080f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_I2C_MspInit+0x170>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	4a08      	ldr	r2, [pc, #32]	; (800176c <HAL_I2C_MspInit+0x170>)
 800174c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001750:	6593      	str	r3, [r2, #88]	; 0x58
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_I2C_MspInit+0x170>)
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
}
 800175e:	bf00      	nop
 8001760:	3788      	adds	r7, #136	; 0x88
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40005400 	.word	0x40005400
 800176c:	40021000 	.word	0x40021000
 8001770:	40005c00 	.word	0x40005c00
 8001774:	48000400 	.word	0x48000400

08001778 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_8){
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001788:	d130      	bne.n	80017ec <HAL_GPIO_EXTI_Callback+0x74>

		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8)== GPIO_PIN_RESET){
 800178a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800178e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001792:	f006 fe17 	bl	80083c4 <HAL_GPIO_ReadPin>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d109      	bne.n	80017b0 <HAL_GPIO_EXTI_Callback+0x38>

					boutonAtime=0;
 800179c:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <HAL_GPIO_EXTI_Callback+0xe0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
					tbtn1=HAL_GetTick();
 80017a2:	f004 fe41 	bl	8006428 <HAL_GetTick>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b2c      	ldr	r3, [pc, #176]	; (800185c <HAL_GPIO_EXTI_Callback+0xe4>)
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	e010      	b.n	80017d2 <HAL_GPIO_EXTI_Callback+0x5a>


				}
				else{
					BTN_A++;
 80017b0:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_GPIO_EXTI_Callback+0xe8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	4a2a      	ldr	r2, [pc, #168]	; (8001860 <HAL_GPIO_EXTI_Callback+0xe8>)
 80017b8:	6013      	str	r3, [r2, #0]

					boutonAtime=HAL_GetTick()-tbtn1;
 80017ba:	f004 fe35 	bl	8006428 <HAL_GetTick>
 80017be:	4603      	mov	r3, r0
 80017c0:	4a26      	ldr	r2, [pc, #152]	; (800185c <HAL_GPIO_EXTI_Callback+0xe4>)
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_GPIO_EXTI_Callback+0xe0>)
 80017ca:	601a      	str	r2, [r3, #0]
					tbtn1=0;
 80017cc:	4b23      	ldr	r3, [pc, #140]	; (800185c <HAL_GPIO_EXTI_Callback+0xe4>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]


				}

				if(boutonAtime>=400){
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_GPIO_EXTI_Callback+0xe0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80017da:	db07      	blt.n	80017ec <HAL_GPIO_EXTI_Callback+0x74>
					BTN_A_LONG++;
 80017dc:	4b21      	ldr	r3, [pc, #132]	; (8001864 <HAL_GPIO_EXTI_Callback+0xec>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	4a20      	ldr	r2, [pc, #128]	; (8001864 <HAL_GPIO_EXTI_Callback+0xec>)
 80017e4:	6013      	str	r3, [r2, #0]
					BTN_A=0;
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <HAL_GPIO_EXTI_Callback+0xe8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
				}

	}
	if(GPIO_Pin==GPIO_PIN_1){
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d12e      	bne.n	8001850 <HAL_GPIO_EXTI_Callback+0xd8>

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)== GPIO_PIN_RESET){
 80017f2:	2102      	movs	r1, #2
 80017f4:	481c      	ldr	r0, [pc, #112]	; (8001868 <HAL_GPIO_EXTI_Callback+0xf0>)
 80017f6:	f006 fde5 	bl	80083c4 <HAL_GPIO_ReadPin>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d109      	bne.n	8001814 <HAL_GPIO_EXTI_Callback+0x9c>

			boutonBtime=0;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_GPIO_EXTI_Callback+0xf4>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
			tbtn2=HAL_GetTick();
 8001806:	f004 fe0f 	bl	8006428 <HAL_GetTick>
 800180a:	4603      	mov	r3, r0
 800180c:	461a      	mov	r2, r3
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	e010      	b.n	8001836 <HAL_GPIO_EXTI_Callback+0xbe>


		}
		else{
			BTN_B++;
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	4a16      	ldr	r2, [pc, #88]	; (8001874 <HAL_GPIO_EXTI_Callback+0xfc>)
 800181c:	6013      	str	r3, [r2, #0]

			boutonBtime=HAL_GetTick()-tbtn2;
 800181e:	f004 fe03 	bl	8006428 <HAL_GetTick>
 8001822:	4603      	mov	r3, r0
 8001824:	4a12      	ldr	r2, [pc, #72]	; (8001870 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	461a      	mov	r2, r3
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_GPIO_EXTI_Callback+0xf4>)
 800182e:	601a      	str	r2, [r3, #0]
			tbtn2=0;
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]


		}

		if(boutonBtime>=400){
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_GPIO_EXTI_Callback+0xf4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800183e:	db07      	blt.n	8001850 <HAL_GPIO_EXTI_Callback+0xd8>
			BTN_B_LONG++;
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_GPIO_EXTI_Callback+0x100>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	4a0c      	ldr	r2, [pc, #48]	; (8001878 <HAL_GPIO_EXTI_Callback+0x100>)
 8001848:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_GPIO_EXTI_Callback+0xfc>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
		}



	}
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000a4c 	.word	0x20000a4c
 800185c:	20000a54 	.word	0x20000a54
 8001860:	20000708 	.word	0x20000708
 8001864:	20000a60 	.word	0x20000a60
 8001868:	48000400 	.word	0x48000400
 800186c:	20000a50 	.word	0x20000a50
 8001870:	20000a58 	.word	0x20000a58
 8001874:	2000070c 	.word	0x2000070c
 8001878:	20000a5c 	.word	0x20000a5c

0800187c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001882:	f004 fd68 	bl	8006356 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001886:	f000 f883 	bl	8001990 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800188a:	f000 f8d4 	bl	8001a36 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800188e:	f7ff fdb1 	bl	80013f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001892:	f7ff fd6d 	bl	8001370 <MX_DMA_Init>
  MX_I2C3_Init();
 8001896:	f7ff fe6d 	bl	8001574 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 800189a:	f004 fb99 	bl	8005fd0 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800189e:	f7ff fba7 	bl	8000ff0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80018a2:	f004 f897 	bl	80059d4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80018a6:	f012 fa7b 	bl	8013da0 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80018aa:	f7ff fe23 	bl	80014f4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80018ae:	f004 fbbb 	bl	8006028 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80018b2:	f000 fd89 	bl	80023c8 <MX_SPI1_Init>
  MX_TIM7_Init();
 80018b6:	f004 f911 	bl	8005adc <MX_TIM7_Init>
  MX_TIM6_Init();
 80018ba:	f004 f8d9 	bl	8005a70 <MX_TIM6_Init>
  MX_TIM15_Init();
 80018be:	f004 f945 	bl	8005b4c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */



	ssd1306_Init();
 80018c2:	f001 f881 	bl	80029c8 <ssd1306_Init>

	HAL_Delay(100);
 80018c6:	2064      	movs	r0, #100	; 0x64
 80018c8:	f004 fdba 	bl	8006440 <HAL_Delay>
	ssd1306_Fill(Black);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f001 f8e5 	bl	8002a9c <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);
 80018d2:	2301      	movs	r3, #1
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	2340      	movs	r3, #64	; 0x40
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2340      	movs	r3, #64	; 0x40
 80018dc:	4a1f      	ldr	r2, [pc, #124]	; (800195c <main+0xe0>)
 80018de:	2120      	movs	r1, #32
 80018e0:	2020      	movs	r0, #32
 80018e2:	f001 fbad 	bl	8003040 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80018e6:	f001 f8f1 	bl	8002acc <ssd1306_UpdateScreen>


	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 80018ea:	2203      	movs	r2, #3
 80018ec:	491c      	ldr	r1, [pc, #112]	; (8001960 <main+0xe4>)
 80018ee:	481d      	ldr	r0, [pc, #116]	; (8001964 <main+0xe8>)
 80018f0:	f005 f8e6 	bl	8006ac0 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 80018f4:	481c      	ldr	r0, [pc, #112]	; (8001968 <main+0xec>)
 80018f6:	f00b faad 	bl	800ce54 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim15);
 80018fa:	481c      	ldr	r0, [pc, #112]	; (800196c <main+0xf0>)
 80018fc:	f00b faf6 	bl	800ceec <HAL_TIM_Base_Start_IT>

	HAL_UART_Abort(&hlpuart1);
 8001900:	481b      	ldr	r0, [pc, #108]	; (8001970 <main+0xf4>)
 8001902:	f00b ff8f 	bl	800d824 <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8001906:	2240      	movs	r2, #64	; 0x40
 8001908:	491a      	ldr	r1, [pc, #104]	; (8001974 <main+0xf8>)
 800190a:	4819      	ldr	r0, [pc, #100]	; (8001970 <main+0xf4>)
 800190c:	f00b ff3e 	bl	800d78c <HAL_UART_Receive_DMA>

	memset(flashread,'1',256);
 8001910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001914:	2131      	movs	r1, #49	; 0x31
 8001916:	4818      	ldr	r0, [pc, #96]	; (8001978 <main+0xfc>)
 8001918:	f014 ff6f 	bl	80167fa <memset>
	memset(flashwrite,'\0',256);
 800191c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001920:	2100      	movs	r1, #0
 8001922:	4816      	ldr	r0, [pc, #88]	; (800197c <main+0x100>)
 8001924:	f014 ff69 	bl	80167fa <memset>
	memset((uint8_t *)bufferscreen ,'\0',50);
 8001928:	2232      	movs	r2, #50	; 0x32
 800192a:	2100      	movs	r1, #0
 800192c:	4814      	ldr	r0, [pc, #80]	; (8001980 <main+0x104>)
 800192e:	f014 ff64 	bl	80167fa <memset>

	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_0);
 8001932:	2301      	movs	r3, #1
 8001934:	4a13      	ldr	r2, [pc, #76]	; (8001984 <main+0x108>)
 8001936:	4914      	ldr	r1, [pc, #80]	; (8001988 <main+0x10c>)
 8001938:	4814      	ldr	r0, [pc, #80]	; (800198c <main+0x110>)
 800193a:	f012 f918 	bl	8013b6e <SPIF_Init>



	getindex();
 800193e:	f000 ff0f 	bl	8002760 <getindex>

	ssd1306_Fill(Black);
 8001942:	2000      	movs	r0, #0
 8001944:	f001 f8aa 	bl	8002a9c <ssd1306_Fill>

	HAL_Delay(700);
 8001948:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800194c:	f004 fd78 	bl	8006440 <HAL_Delay>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		statemachine();
 8001950:	f001 fdde 	bl	8003510 <statemachine>
		ssd1306_UpdateScreen();
 8001954:	f001 f8ba 	bl	8002acc <ssd1306_UpdateScreen>
		statemachine();
 8001958:	e7fa      	b.n	8001950 <main+0xd4>
 800195a:	bf00      	nop
 800195c:	0801b0f4 	.word	0x0801b0f4
 8001960:	20000730 	.word	0x20000730
 8001964:	20000324 	.word	0x20000324
 8001968:	20000fdc 	.word	0x20000fdc
 800196c:	200010c0 	.word	0x200010c0
 8001970:	2000110c 	.word	0x2000110c
 8001974:	20000484 	.word	0x20000484
 8001978:	20000858 	.word	0x20000858
 800197c:	20000758 	.word	0x20000758
 8001980:	2000097c 	.word	0x2000097c
 8001984:	48000400 	.word	0x48000400
 8001988:	20000ad4 	.word	0x20000ad4
 800198c:	20000710 	.word	0x20000710

08001990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b096      	sub	sp, #88	; 0x58
 8001994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	2244      	movs	r2, #68	; 0x44
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f014 ff2b 	bl	80167fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a4:	463b      	mov	r3, r7
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
 80019b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019b6:	f008 ffa5 	bl	800a904 <HAL_PWREx_ControlVoltageScaling>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019c0:	f000 f867 	bl	8001a92 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80019c4:	2310      	movs	r3, #16
 80019c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019c8:	2301      	movs	r3, #1
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019d0:	2360      	movs	r3, #96	; 0x60
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d4:	2302      	movs	r3, #2
 80019d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019d8:	2301      	movs	r3, #1
 80019da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019dc:	2301      	movs	r3, #1
 80019de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80019e0:	2314      	movs	r3, #20
 80019e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019e4:	2307      	movs	r3, #7
 80019e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019ec:	2302      	movs	r3, #2
 80019ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4618      	mov	r0, r3
 80019f6:	f008 ffeb 	bl	800a9d0 <HAL_RCC_OscConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001a00:	f000 f847 	bl	8001a92 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a04:	230f      	movs	r3, #15
 8001a06:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a10:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f009 fbea 	bl	800b1f8 <HAL_RCC_ClockConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a2a:	f000 f832 	bl	8001a92 <Error_Handler>
  }
}
 8001a2e:	bf00      	nop
 8001a30:	3758      	adds	r7, #88	; 0x58
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b096      	sub	sp, #88	; 0x58
 8001a3a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	2254      	movs	r2, #84	; 0x54
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f014 fed9 	bl	80167fa <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001a48:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a4c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001a4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a52:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001a54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a58:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001a62:	2318      	movs	r3, #24
 8001a64:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001a66:	2307      	movs	r3, #7
 8001a68:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001a72:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001a76:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f009 fde0 	bl	800b640 <HAL_RCCEx_PeriphCLKConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001a86:	f000 f804 	bl	8001a92 <Error_Handler>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3758      	adds	r7, #88	; 0x58
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a96:	b672      	cpsid	i
}
 8001a98:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a9a:	e7fe      	b.n	8001a9a <Error_Handler+0x8>

08001a9c <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7fe fbe3 	bl	8000270 <strlen>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d801      	bhi.n	8001ab4 <gps_checksum+0x18>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	e038      	b.n	8001b26 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7fe fbdb 	bl	8000270 <strlen>
 8001aba:	4603      	mov	r3, r0
 8001abc:	3b04      	subs	r3, #4
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7fe fbd2 	bl	8000270 <strlen>
 8001acc:	4603      	mov	r3, r0
 8001ace:	3b03      	subs	r3, #3
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	e00a      	b.n	8001af8 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	4053      	eors	r3, r2
 8001af0:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	3301      	adds	r3, #1
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7fe fbb9 	bl	8000270 <strlen>
 8001afe:	4603      	mov	r3, r0
 8001b00:	1f5a      	subs	r2, r3, #5
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d8ec      	bhi.n	8001ae2 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8001b08:	f107 0308 	add.w	r3, r7, #8
 8001b0c:	2210      	movs	r2, #16
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f013 fe99 	bl	8015848 <strtol>
 8001b16:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d101      	bne.n	8001b24 <gps_checksum+0x88>
        return 1;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8001b24:	2300      	movs	r3, #0
    }
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b0b7      	sub	sp, #220	; 0xdc
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8001b40:	f107 0320 	add.w	r3, r7, #32
 8001b44:	2264      	movs	r2, #100	; 0x64
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f014 fe56 	bl	80167fa <memset>
    char *marker = strtok(inputString, ",");
 8001b4e:	49c2      	ldr	r1, [pc, #776]	; (8001e58 <nmea_GPGGA+0x328>)
 8001b50:	6838      	ldr	r0, [r7, #0]
 8001b52:	f014 fe6d 	bl	8016830 <strtok>
 8001b56:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001b5a:	e027      	b.n	8001bac <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001b5c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001b60:	f7fe fb86 	bl	8000270 <strlen>
 8001b64:	4603      	mov	r3, r0
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001b6c:	1c63      	adds	r3, r4, #1
 8001b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001b72:	4610      	mov	r0, r2
 8001b74:	f012 feb0 	bl	80148d8 <malloc>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	00a3      	lsls	r3, r4, #2
 8001b7e:	33d8      	adds	r3, #216	; 0xd8
 8001b80:	443b      	add	r3, r7
 8001b82:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	33d8      	adds	r3, #216	; 0xd8
 8001b90:	443b      	add	r3, r7
 8001b92:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001b96:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f014 ff41 	bl	8016a22 <strcpy>
        marker = strtok(NULL, ",");
 8001ba0:	49ad      	ldr	r1, [pc, #692]	; (8001e58 <nmea_GPGGA+0x328>)
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f014 fe44 	bl	8016830 <strtok>
 8001ba8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001bac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1d3      	bne.n	8001b5c <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8001bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8001bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	332c      	adds	r3, #44	; 0x2c
 8001bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f014 ff28 	bl	8016a22 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8001bd2:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001bd6:	2b53      	cmp	r3, #83	; 0x53
 8001bd8:	d004      	beq.n	8001be4 <nmea_GPGGA+0xb4>
 8001bda:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001bde:	2b4e      	cmp	r3, #78	; 0x4e
 8001be0:	f040 8159 	bne.w	8001e96 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8001be4:	2300      	movs	r3, #0
 8001be6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001bea:	e010      	b.n	8001c0e <nmea_GPGGA+0xde>
 8001bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bf2:	4413      	add	r3, r2
 8001bf4:	7819      	ldrb	r1, [r3, #0]
 8001bf6:	f107 021c 	add.w	r2, r7, #28
 8001bfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bfe:	4413      	add	r3, r2
 8001c00:	460a      	mov	r2, r1
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	ddea      	ble.n	8001bec <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001c1c:	e011      	b.n	8001c42 <nmea_GPGGA+0x112>
 8001c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c24:	3302      	adds	r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	7819      	ldrb	r1, [r3, #0]
 8001c2a:	f107 0214 	add.w	r2, r7, #20
 8001c2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c32:	4413      	add	r3, r2
 8001c34:	460a      	mov	r2, r1
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001c42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c46:	2b05      	cmp	r3, #5
 8001c48:	dde9      	ble.n	8001c1e <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	220a      	movs	r2, #10
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f013 fdf8 	bl	8015848 <strtol>
 8001c58:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f013 fd06 	bl	8015674 <strtof>
 8001c68:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001c6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c70:	ee07 3a90 	vmov	s15, r3
 8001c74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c78:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001c7c:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8001e5c <nmea_GPGGA+0x32c>
 8001c80:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c88:	ee17 0a90 	vmov	r0, s15
 8001c8c:	f7fe fc5c 	bl	8000548 <__aeabi_f2d>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c9e:	e010      	b.n	8001cc2 <nmea_GPGGA+0x192>
 8001ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ca2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ca6:	4413      	add	r3, r2
 8001ca8:	7819      	ldrb	r1, [r3, #0]
 8001caa:	f107 0210 	add.w	r2, r7, #16
 8001cae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cb2:	4413      	add	r3, r2
 8001cb4:	460a      	mov	r2, r1
 8001cb6:	701a      	strb	r2, [r3, #0]
 8001cb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001cc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	ddea      	ble.n	8001ca0 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001cd0:	e011      	b.n	8001cf6 <nmea_GPGGA+0x1c6>
 8001cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cd8:	3303      	adds	r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	7819      	ldrb	r1, [r3, #0]
 8001cde:	f107 0208 	add.w	r2, r7, #8
 8001ce2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ce6:	4413      	add	r3, r2
 8001ce8:	460a      	mov	r2, r1
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001cf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cfa:	2b05      	cmp	r3, #5
 8001cfc:	dde9      	ble.n	8001cd2 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8001cfe:	f107 0310 	add.w	r3, r7, #16
 8001d02:	220a      	movs	r2, #10
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f013 fd9e 	bl	8015848 <strtol>
 8001d0c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8001d10:	f107 0308 	add.w	r3, r7, #8
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f013 fcac 	bl	8015674 <strtof>
 8001d1c:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8001d20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d24:	ee07 3a90 	vmov	s15, r3
 8001d28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d2c:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001d30:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001e5c <nmea_GPGGA+0x32c>
 8001d34:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3c:	ee17 0a90 	vmov	r0, s15
 8001d40:	f7fe fc02 	bl	8000548 <__aeabi_f2d>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001d58:	f7fe feb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d176      	bne.n	8001e50 <nmea_GPGGA+0x320>
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001d6e:	f7fe feab 	bl	8000ac8 <__aeabi_dcmpeq>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d16b      	bne.n	8001e50 <nmea_GPGGA+0x320>
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <nmea_GPGGA+0x330>)
 8001d7e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001d82:	f7fe feab 	bl	8000adc <__aeabi_dcmplt>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d061      	beq.n	8001e50 <nmea_GPGGA+0x320>
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <nmea_GPGGA+0x334>)
 8001d92:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001d96:	f7fe fea1 	bl	8000adc <__aeabi_dcmplt>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d057      	beq.n	8001e50 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001da6:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8001db0:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001db8:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001dc2:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8001dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f013 fc53 	bl	8015674 <strtof>
 8001dce:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8001dd2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001dd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dde:	d102      	bne.n	8001de6 <nmea_GPGGA+0x2b6>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	e001      	b.n	8001dea <nmea_GPGGA+0x2ba>
 8001de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8001dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001df0:	220a      	movs	r2, #10
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f013 fd27 	bl	8015848 <strtol>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8001e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e02:	220a      	movs	r2, #10
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f013 fd1e 	bl	8015848 <strtol>
 8001e0c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8001e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	bfcc      	ite	gt
 8001e18:	2301      	movgt	r3, #1
 8001e1a:	2300      	movle	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f013 fc23 	bl	8015674 <strtof>
 8001e2e:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8001e32:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001e36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3e:	d102      	bne.n	8001e46 <nmea_GPGGA+0x316>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	e001      	b.n	8001e4a <nmea_GPGGA+0x31a>
 8001e46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001e4e:	e022      	b.n	8001e96 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001e56:	e016      	b.n	8001e86 <nmea_GPGGA+0x356>
 8001e58:	0801ae08 	.word	0x0801ae08
 8001e5c:	42700000 	.word	0x42700000
 8001e60:	40568000 	.word	0x40568000
 8001e64:	40668000 	.word	0x40668000
 8001e68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	33d8      	adds	r3, #216	; 0xd8
 8001e70:	443b      	add	r3, r7
 8001e72:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f012 fd36 	bl	80148e8 <free>
 8001e7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e80:	3301      	adds	r3, #1
 8001e82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001e86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	dbea      	blt.n	8001e68 <nmea_GPGGA+0x338>
            return 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e019      	b.n	8001eca <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e9c:	e00e      	b.n	8001ebc <nmea_GPGGA+0x38c>
 8001e9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	33d8      	adds	r3, #216	; 0xd8
 8001ea6:	443b      	add	r3, r7
 8001ea8:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f012 fd1b 	bl	80148e8 <free>
 8001eb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ebc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001ec0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dbea      	blt.n	8001e9e <nmea_GPGGA+0x36e>
    return 1;
 8001ec8:	2301      	movs	r3, #1
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	37dc      	adds	r7, #220	; 0xdc
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd90      	pop	{r4, r7, pc}
 8001ed2:	bf00      	nop

08001ed4 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	b0a3      	sub	sp, #140	; 0x8c
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	2264      	movs	r2, #100	; 0x64
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f014 fc84 	bl	80167fa <memset>
    char *marker = strtok(inputString, ",");
 8001ef2:	493b      	ldr	r1, [pc, #236]	; (8001fe0 <nmea_GPGSA+0x10c>)
 8001ef4:	6838      	ldr	r0, [r7, #0]
 8001ef6:	f014 fc9b 	bl	8016830 <strtok>
 8001efa:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001efe:	e027      	b.n	8001f50 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001f00:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001f04:	f7fe f9b4 	bl	8000270 <strlen>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8001f10:	1c63      	adds	r3, r4, #1
 8001f12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f16:	4610      	mov	r0, r2
 8001f18:	f012 fcde 	bl	80148d8 <malloc>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	00a3      	lsls	r3, r4, #2
 8001f22:	3388      	adds	r3, #136	; 0x88
 8001f24:	443b      	add	r3, r7
 8001f26:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8001f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	3388      	adds	r3, #136	; 0x88
 8001f34:	443b      	add	r3, r7
 8001f36:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001f3a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f014 fd6f 	bl	8016a22 <strcpy>
        marker = strtok(NULL, ",");
 8001f44:	4926      	ldr	r1, [pc, #152]	; (8001fe0 <nmea_GPGSA+0x10c>)
 8001f46:	2000      	movs	r0, #0
 8001f48:	f014 fc72 	bl	8016830 <strtok>
 8001f4c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001f50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1d3      	bne.n	8001f00 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	220a      	movs	r2, #10
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f013 fc72 	bl	8015848 <strtol>
 8001f64:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8001f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	bfcc      	ite	gt
 8001f6c:	2301      	movgt	r3, #1
 8001f6e:	2300      	movle	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f80:	e00e      	b.n	8001fa0 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	3388      	adds	r3, #136	; 0x88
 8001f88:	443b      	add	r3, r7
 8001f8a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001f94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f96:	3301      	adds	r3, #1
 8001f98:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001f9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fa2:	2b0e      	cmp	r3, #14
 8001fa4:	dded      	ble.n	8001f82 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8001fac:	2300      	movs	r3, #0
 8001fae:	677b      	str	r3, [r7, #116]	; 0x74
 8001fb0:	e00b      	b.n	8001fca <nmea_GPGSA+0xf6>
 8001fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	3388      	adds	r3, #136	; 0x88
 8001fb8:	443b      	add	r3, r7
 8001fba:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f012 fc92 	bl	80148e8 <free>
 8001fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	677b      	str	r3, [r7, #116]	; 0x74
 8001fca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	dbee      	blt.n	8001fb2 <nmea_GPGSA+0xde>
    return 1;
 8001fd4:	2301      	movs	r3, #1
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	378c      	adds	r7, #140	; 0x8c
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd90      	pop	{r4, r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	0801ae08 	.word	0x0801ae08
 8001fe4:	00000000 	.word	0x00000000

08001fe8 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b0a1      	sub	sp, #132	; 0x84
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8001ff6:	f107 030c 	add.w	r3, r7, #12
 8001ffa:	2264      	movs	r2, #100	; 0x64
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f014 fbfb 	bl	80167fa <memset>
    char *marker = strtok(inputString, ",");
 8002004:	4930      	ldr	r1, [pc, #192]	; (80020c8 <nmea_GNRMC+0xe0>)
 8002006:	6838      	ldr	r0, [r7, #0]
 8002008:	f014 fc12 	bl	8016830 <strtok>
 800200c:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 800200e:	e021      	b.n	8002054 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002010:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002012:	f7fe f92d 	bl	8000270 <strlen>
 8002016:	4603      	mov	r3, r0
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 800201c:	1c63      	adds	r3, r4, #1
 800201e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002020:	4610      	mov	r0, r2
 8002022:	f012 fc59 	bl	80148d8 <malloc>
 8002026:	4603      	mov	r3, r0
 8002028:	461a      	mov	r2, r3
 800202a:	00a3      	lsls	r3, r4, #2
 800202c:	3380      	adds	r3, #128	; 0x80
 800202e:	443b      	add	r3, r7
 8002030:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8002034:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002036:	3b01      	subs	r3, #1
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	3380      	adds	r3, #128	; 0x80
 800203c:	443b      	add	r3, r7
 800203e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002042:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002044:	4618      	mov	r0, r3
 8002046:	f014 fcec 	bl	8016a22 <strcpy>
        marker = strtok(NULL, ",");
 800204a:	491f      	ldr	r1, [pc, #124]	; (80020c8 <nmea_GNRMC+0xe0>)
 800204c:	2000      	movs	r0, #0
 800204e:	f014 fbef 	bl	8016830 <strtok>
 8002052:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8002054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1da      	bne.n	8002010 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 800205a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f013 fb08 	bl	8015674 <strtof>
 8002064:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8002068:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800206a:	f7fe fa6d 	bl	8000548 <__aeabi_f2d>
 800206e:	a314      	add	r3, pc, #80	; (adr r3, 80020c0 <nmea_GNRMC+0xd8>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f7fe fbea 	bl	800084c <__aeabi_ddiv>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f7fe fdb2 	bl	8000be8 <__aeabi_d2f>
 8002084:	4602      	mov	r2, r0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 800208a:	2300      	movs	r3, #0
 800208c:	677b      	str	r3, [r7, #116]	; 0x74
 800208e:	e00b      	b.n	80020a8 <nmea_GNRMC+0xc0>
 8002090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	3380      	adds	r3, #128	; 0x80
 8002096:	443b      	add	r3, r7
 8002098:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800209c:	4618      	mov	r0, r3
 800209e:	f012 fc23 	bl	80148e8 <free>
 80020a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020a4:	3301      	adds	r3, #1
 80020a6:	677b      	str	r3, [r7, #116]	; 0x74
 80020a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020ac:	429a      	cmp	r2, r3
 80020ae:	dbef      	blt.n	8002090 <nmea_GNRMC+0xa8>
    return 1;
 80020b0:	2301      	movs	r3, #1
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3784      	adds	r7, #132	; 0x84
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd90      	pop	{r4, r7, pc}
 80020ba:	bf00      	nop
 80020bc:	f3af 8000 	nop.w
 80020c0:	be76c8b4 	.word	0xbe76c8b4
 80020c4:	3fff1a9f 	.word	0x3fff1a9f
 80020c8:	0801ae08 	.word	0x0801ae08

080020cc <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 80020d6:	223c      	movs	r2, #60	; 0x3c
 80020d8:	2100      	movs	r1, #0
 80020da:	484e      	ldr	r0, [pc, #312]	; (8002214 <nmea_parse+0x148>)
 80020dc:	f014 fb8d 	bl	80167fa <memset>
    char * token = strtok(buffer, "$");
 80020e0:	494d      	ldr	r1, [pc, #308]	; (8002218 <nmea_parse+0x14c>)
 80020e2:	6838      	ldr	r0, [r7, #0]
 80020e4:	f014 fba4 	bl	8016830 <strtok>
 80020e8:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 80020ee:	e01d      	b.n	800212c <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 80020f0:	6978      	ldr	r0, [r7, #20]
 80020f2:	f7fe f8bd 	bl	8000270 <strlen>
 80020f6:	4603      	mov	r3, r0
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	693c      	ldr	r4, [r7, #16]
 80020fc:	1c63      	adds	r3, r4, #1
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	4610      	mov	r0, r2
 8002102:	f012 fbe9 	bl	80148d8 <malloc>
 8002106:	4603      	mov	r3, r0
 8002108:	461a      	mov	r2, r3
 800210a:	4b42      	ldr	r3, [pc, #264]	; (8002214 <nmea_parse+0x148>)
 800210c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	3b01      	subs	r3, #1
 8002114:	4a3f      	ldr	r2, [pc, #252]	; (8002214 <nmea_parse+0x148>)
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	6979      	ldr	r1, [r7, #20]
 800211c:	4618      	mov	r0, r3
 800211e:	f014 fc80 	bl	8016a22 <strcpy>
        token = strtok(NULL, "$");
 8002122:	493d      	ldr	r1, [pc, #244]	; (8002218 <nmea_parse+0x14c>)
 8002124:	2000      	movs	r0, #0
 8002126:	f014 fb83 	bl	8016830 <strtok>
 800212a:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1de      	bne.n	80020f0 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e052      	b.n	80021de <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8002138:	4a36      	ldr	r2, [pc, #216]	; (8002214 <nmea_parse+0x148>)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002140:	4936      	ldr	r1, [pc, #216]	; (800221c <nmea_parse+0x150>)
 8002142:	4618      	mov	r0, r3
 8002144:	f014 fbd0 	bl	80168e8 <strstr>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d044      	beq.n	80021d8 <nmea_parse+0x10c>
 800214e:	4a31      	ldr	r2, [pc, #196]	; (8002214 <nmea_parse+0x148>)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fca0 	bl	8001a9c <gps_checksum>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d03a      	beq.n	80021d8 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 8002162:	4a2c      	ldr	r2, [pc, #176]	; (8002214 <nmea_parse+0x148>)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216a:	492d      	ldr	r1, [pc, #180]	; (8002220 <nmea_parse+0x154>)
 800216c:	4618      	mov	r0, r3
 800216e:	f014 fbbb 	bl	80168e8 <strstr>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8002178:	4a26      	ldr	r2, [pc, #152]	; (8002214 <nmea_parse+0x148>)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002180:	4619      	mov	r1, r3
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ff30 	bl	8001fe8 <nmea_GNRMC>
 8002188:	e026      	b.n	80021d8 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 800218a:	4a22      	ldr	r2, [pc, #136]	; (8002214 <nmea_parse+0x148>)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002192:	4924      	ldr	r1, [pc, #144]	; (8002224 <nmea_parse+0x158>)
 8002194:	4618      	mov	r0, r3
 8002196:	f014 fba7 	bl	80168e8 <strstr>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 80021a0:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <nmea_parse+0x148>)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a8:	4619      	mov	r1, r3
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fe92 	bl	8001ed4 <nmea_GPGSA>
 80021b0:	e012      	b.n	80021d8 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 80021b2:	4a18      	ldr	r2, [pc, #96]	; (8002214 <nmea_parse+0x148>)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ba:	491b      	ldr	r1, [pc, #108]	; (8002228 <nmea_parse+0x15c>)
 80021bc:	4618      	mov	r0, r3
 80021be:	f014 fb93 	bl	80168e8 <strstr>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 80021c8:	4a12      	ldr	r2, [pc, #72]	; (8002214 <nmea_parse+0x148>)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d0:	4619      	mov	r1, r3
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff fcac 	bl	8001b30 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3301      	adds	r3, #1
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	dba8      	blt.n	8002138 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	e009      	b.n	8002200 <nmea_parse+0x134>
 80021ec:	4a09      	ldr	r2, [pc, #36]	; (8002214 <nmea_parse+0x148>)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f012 fb77 	bl	80148e8 <free>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3301      	adds	r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	429a      	cmp	r2, r3
 8002206:	dbf1      	blt.n	80021ec <nmea_parse+0x120>


}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd90      	pop	{r4, r7, pc}
 8002212:	bf00      	nop
 8002214:	20000a64 	.word	0x20000a64
 8002218:	0801ae0c 	.word	0x0801ae0c
 800221c:	0801ae10 	.word	0x0801ae10
 8002220:	0801ae14 	.word	0x0801ae14
 8002224:	0801ae1c 	.word	0x0801ae1c
 8002228:	0801ae24 	.word	0x0801ae24
 800222c:	00000000 	.word	0x00000000

08002230 <distancecalc>:

}



double distancecalc(double lat1, double lat2, double long1, double long2){
 8002230:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002234:	b08a      	sub	sp, #40	; 0x28
 8002236:	af00      	add	r7, sp, #0
 8002238:	ed87 0b06 	vstr	d0, [r7, #24]
 800223c:	ed87 1b04 	vstr	d1, [r7, #16]
 8002240:	ed87 2b02 	vstr	d2, [r7, #8]
 8002244:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 8002254:	a358      	add	r3, pc, #352	; (adr r3, 80023b8 <distancecalc+0x188>)
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800225e:	f7fe f9cb 	bl	80005f8 <__aeabi_dmul>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	ec43 2b17 	vmov	d7, r2, r3
 800226a:	eeb0 0a47 	vmov.f32	s0, s14
 800226e:	eef0 0a67 	vmov.f32	s1, s15
 8002272:	f017 f970 	bl	8019556 <sinl>
 8002276:	ec55 4b10 	vmov	r4, r5, d0
 800227a:	a34f      	add	r3, pc, #316	; (adr r3, 80023b8 <distancecalc+0x188>)
 800227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002280:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002284:	f7fe f9b8 	bl	80005f8 <__aeabi_dmul>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	ec43 2b17 	vmov	d7, r2, r3
 8002290:	eeb0 0a47 	vmov.f32	s0, s14
 8002294:	eef0 0a67 	vmov.f32	s1, s15
 8002298:	f017 f95d 	bl	8019556 <sinl>
 800229c:	ec53 2b10 	vmov	r2, r3, d0
 80022a0:	4620      	mov	r0, r4
 80022a2:	4629      	mov	r1, r5
 80022a4:	f7fe f9a8 	bl	80005f8 <__aeabi_dmul>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4614      	mov	r4, r2
 80022ae:	461d      	mov	r5, r3
 80022b0:	a341      	add	r3, pc, #260	; (adr r3, 80023b8 <distancecalc+0x188>)
 80022b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022ba:	f7fe f99d 	bl	80005f8 <__aeabi_dmul>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	ec43 2b17 	vmov	d7, r2, r3
 80022c6:	eeb0 0a47 	vmov.f32	s0, s14
 80022ca:	eef0 0a67 	vmov.f32	s1, s15
 80022ce:	f017 f940 	bl	8019552 <cosl>
 80022d2:	ec59 8b10 	vmov	r8, r9, d0
 80022d6:	a338      	add	r3, pc, #224	; (adr r3, 80023b8 <distancecalc+0x188>)
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022e0:	f7fe f98a 	bl	80005f8 <__aeabi_dmul>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	ec43 2b17 	vmov	d7, r2, r3
 80022ec:	eeb0 0a47 	vmov.f32	s0, s14
 80022f0:	eef0 0a67 	vmov.f32	s1, s15
 80022f4:	f017 f92d 	bl	8019552 <cosl>
 80022f8:	ec53 2b10 	vmov	r2, r3, d0
 80022fc:	4640      	mov	r0, r8
 80022fe:	4649      	mov	r1, r9
 8002300:	f7fe f97a 	bl	80005f8 <__aeabi_dmul>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4690      	mov	r8, r2
 800230a:	4699      	mov	r9, r3
 800230c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002310:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002314:	f7fd ffb8 	bl	8000288 <__aeabi_dsub>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	a325      	add	r3, pc, #148	; (adr r3, 80023b8 <distancecalc+0x188>)
 8002322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002326:	f7fe f967 	bl	80005f8 <__aeabi_dmul>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	ec43 2b17 	vmov	d7, r2, r3
 8002332:	eeb0 0a47 	vmov.f32	s0, s14
 8002336:	eef0 0a67 	vmov.f32	s1, s15
 800233a:	f017 f90a 	bl	8019552 <cosl>
 800233e:	ec53 2b10 	vmov	r2, r3, d0
 8002342:	4640      	mov	r0, r8
 8002344:	4649      	mov	r1, r9
 8002346:	f7fe f957 	bl	80005f8 <__aeabi_dmul>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4620      	mov	r0, r4
 8002350:	4629      	mov	r1, r5
 8002352:	f7fd ff9b 	bl	800028c <__adddf3>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	ec43 2b17 	vmov	d7, r2, r3
 800235e:	eeb0 1a47 	vmov.f32	s2, s14
 8002362:	eef0 1a67 	vmov.f32	s3, s15
 8002366:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80023b0 <distancecalc+0x180>
 800236a:	f017 f893 	bl	8019494 <fmin>
 800236e:	eeb0 7a40 	vmov.f32	s14, s0
 8002372:	eef0 7a60 	vmov.f32	s15, s1
 8002376:	eeb0 0a47 	vmov.f32	s0, s14
 800237a:	eef0 0a67 	vmov.f32	s1, s15
 800237e:	f017 f8ec 	bl	801955a <acosl>
 8002382:	ec51 0b10 	vmov	r0, r1, d0
 8002386:	a30e      	add	r3, pc, #56	; (adr r3, 80023c0 <distancecalc+0x190>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f7fe f934 	bl	80005f8 <__aeabi_dmul>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 8002398:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800239c:	ec43 2b17 	vmov	d7, r2, r3
}
 80023a0:	eeb0 0a47 	vmov.f32	s0, s14
 80023a4:	eef0 0a67 	vmov.f32	s1, s15
 80023a8:	3728      	adds	r7, #40	; 0x28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023b0:	00000000 	.word	0x00000000
 80023b4:	3ff00000 	.word	0x3ff00000
 80023b8:	a2529d39 	.word	0xa2529d39
 80023bc:	3f91df46 	.word	0x3f91df46
 80023c0:	00000000 	.word	0x00000000
 80023c4:	41584dae 	.word	0x41584dae

080023c8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	; (800243c <MX_SPI1_Init+0x74>)
 80023ce:	4a1c      	ldr	r2, [pc, #112]	; (8002440 <MX_SPI1_Init+0x78>)
 80023d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <MX_SPI1_Init+0x74>)
 80023d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023da:	4b18      	ldr	r3, [pc, #96]	; (800243c <MX_SPI1_Init+0x74>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023e0:	4b16      	ldr	r3, [pc, #88]	; (800243c <MX_SPI1_Init+0x74>)
 80023e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e8:	4b14      	ldr	r3, [pc, #80]	; (800243c <MX_SPI1_Init+0x74>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023ee:	4b13      	ldr	r3, [pc, #76]	; (800243c <MX_SPI1_Init+0x74>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <MX_SPI1_Init+0x74>)
 80023f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <MX_SPI1_Init+0x74>)
 80023fe:	2210      	movs	r2, #16
 8002400:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MX_SPI1_Init+0x74>)
 8002404:	2200      	movs	r2, #0
 8002406:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <MX_SPI1_Init+0x74>)
 800240a:	2200      	movs	r2, #0
 800240c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <MX_SPI1_Init+0x74>)
 8002410:	2200      	movs	r2, #0
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <MX_SPI1_Init+0x74>)
 8002416:	2207      	movs	r2, #7
 8002418:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <MX_SPI1_Init+0x74>)
 800241c:	2200      	movs	r2, #0
 800241e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <MX_SPI1_Init+0x74>)
 8002422:	2208      	movs	r2, #8
 8002424:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002426:	4805      	ldr	r0, [pc, #20]	; (800243c <MX_SPI1_Init+0x74>)
 8002428:	f009 fbf2 	bl	800bc10 <HAL_SPI_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002432:	f7ff fb2e 	bl	8001a92 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000ad4 	.word	0x20000ad4
 8002440:	40013000 	.word	0x40013000

08002444 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a53      	ldr	r2, [pc, #332]	; (80025b0 <HAL_SPI_MspInit+0x16c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	f040 809f 	bne.w	80025a6 <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002468:	4b52      	ldr	r3, [pc, #328]	; (80025b4 <HAL_SPI_MspInit+0x170>)
 800246a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246c:	4a51      	ldr	r2, [pc, #324]	; (80025b4 <HAL_SPI_MspInit+0x170>)
 800246e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002472:	6613      	str	r3, [r2, #96]	; 0x60
 8002474:	4b4f      	ldr	r3, [pc, #316]	; (80025b4 <HAL_SPI_MspInit+0x170>)
 8002476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002480:	4b4c      	ldr	r3, [pc, #304]	; (80025b4 <HAL_SPI_MspInit+0x170>)
 8002482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002484:	4a4b      	ldr	r2, [pc, #300]	; (80025b4 <HAL_SPI_MspInit+0x170>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800248c:	4b49      	ldr	r3, [pc, #292]	; (80025b4 <HAL_SPI_MspInit+0x170>)
 800248e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002498:	4b46      	ldr	r3, [pc, #280]	; (80025b4 <HAL_SPI_MspInit+0x170>)
 800249a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249c:	4a45      	ldr	r2, [pc, #276]	; (80025b4 <HAL_SPI_MspInit+0x170>)
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024a4:	4b43      	ldr	r3, [pc, #268]	; (80025b4 <HAL_SPI_MspInit+0x170>)
 80024a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80024b0:	2360      	movs	r3, #96	; 0x60
 80024b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024bc:	2303      	movs	r3, #3
 80024be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024c0:	2305      	movs	r3, #5
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ce:	f005 fe0f 	bl	80080f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024d2:	2320      	movs	r3, #32
 80024d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d6:	2302      	movs	r3, #2
 80024d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024de:	2303      	movs	r3, #3
 80024e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024e2:	2305      	movs	r3, #5
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	4619      	mov	r1, r3
 80024ec:	4832      	ldr	r0, [pc, #200]	; (80025b8 <HAL_SPI_MspInit+0x174>)
 80024ee:	f005 fdff 	bl	80080f0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80024f2:	4b32      	ldr	r3, [pc, #200]	; (80025bc <HAL_SPI_MspInit+0x178>)
 80024f4:	4a32      	ldr	r2, [pc, #200]	; (80025c0 <HAL_SPI_MspInit+0x17c>)
 80024f6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 80024f8:	4b30      	ldr	r3, [pc, #192]	; (80025bc <HAL_SPI_MspInit+0x178>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024fe:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <HAL_SPI_MspInit+0x178>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002504:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <HAL_SPI_MspInit+0x178>)
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800250a:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <HAL_SPI_MspInit+0x178>)
 800250c:	2280      	movs	r2, #128	; 0x80
 800250e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002510:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <HAL_SPI_MspInit+0x178>)
 8002512:	2200      	movs	r2, #0
 8002514:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002516:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_SPI_MspInit+0x178>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <HAL_SPI_MspInit+0x178>)
 800251e:	2200      	movs	r2, #0
 8002520:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <HAL_SPI_MspInit+0x178>)
 8002524:	2200      	movs	r2, #0
 8002526:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002528:	4824      	ldr	r0, [pc, #144]	; (80025bc <HAL_SPI_MspInit+0x178>)
 800252a:	f005 fb5f 	bl	8007bec <HAL_DMA_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 8002534:	f7ff faad 	bl	8001a92 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a20      	ldr	r2, [pc, #128]	; (80025bc <HAL_SPI_MspInit+0x178>)
 800253c:	659a      	str	r2, [r3, #88]	; 0x58
 800253e:	4a1f      	ldr	r2, [pc, #124]	; (80025bc <HAL_SPI_MspInit+0x178>)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002544:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <HAL_SPI_MspInit+0x180>)
 8002546:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <HAL_SPI_MspInit+0x184>)
 8002548:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <HAL_SPI_MspInit+0x180>)
 800254c:	2201      	movs	r2, #1
 800254e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002550:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <HAL_SPI_MspInit+0x180>)
 8002552:	2210      	movs	r2, #16
 8002554:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002556:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_SPI_MspInit+0x180>)
 8002558:	2200      	movs	r2, #0
 800255a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <HAL_SPI_MspInit+0x180>)
 800255e:	2280      	movs	r2, #128	; 0x80
 8002560:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_SPI_MspInit+0x180>)
 8002564:	2200      	movs	r2, #0
 8002566:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002568:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <HAL_SPI_MspInit+0x180>)
 800256a:	2200      	movs	r2, #0
 800256c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_SPI_MspInit+0x180>)
 8002570:	2200      	movs	r2, #0
 8002572:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_SPI_MspInit+0x180>)
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800257a:	4812      	ldr	r0, [pc, #72]	; (80025c4 <HAL_SPI_MspInit+0x180>)
 800257c:	f005 fb36 	bl	8007bec <HAL_DMA_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_SPI_MspInit+0x146>
    {
      Error_Handler();
 8002586:	f7ff fa84 	bl	8001a92 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <HAL_SPI_MspInit+0x180>)
 800258e:	655a      	str	r2, [r3, #84]	; 0x54
 8002590:	4a0c      	ldr	r2, [pc, #48]	; (80025c4 <HAL_SPI_MspInit+0x180>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	2023      	movs	r0, #35	; 0x23
 800259c:	f005 faef 	bl	8007b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80025a0:	2023      	movs	r0, #35	; 0x23
 80025a2:	f005 fb08 	bl	8007bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80025a6:	bf00      	nop
 80025a8:	3728      	adds	r7, #40	; 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40013000 	.word	0x40013000
 80025b4:	40021000 	.word	0x40021000
 80025b8:	48000400 	.word	0x48000400
 80025bc:	20000b38 	.word	0x20000b38
 80025c0:	4002001c 	.word	0x4002001c
 80025c4:	20000b80 	.word	0x20000b80
 80025c8:	40020030 	.word	0x40020030
 80025cc:	00000000 	.word	0x00000000

080025d0 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 80025d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025d4:	ed2d 8b02 	vpush	{d8}
 80025d8:	b0a7      	sub	sp, #156	; 0x9c
 80025da:	af16      	add	r7, sp, #88	; 0x58
 80025dc:	6378      	str	r0, [r7, #52]	; 0x34
 80025de:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
 80025e2:	edc7 0a0b 	vstr	s1, [r7, #44]	; 0x2c
 80025e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80025e8:	627a      	str	r2, [r7, #36]	; 0x24
 80025ea:	ed87 1a08 	vstr	s2, [r7, #32]
	int framesize=0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	framesize=snprintf((uint8_t*)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 80025f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025f4:	f7fd ffa8 	bl	8000548 <__aeabi_f2d>
 80025f8:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80025fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025fe:	f7fd ffa3 	bl	8000548 <__aeabi_f2d>
 8002602:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	4618      	mov	r0, r3
 800260c:	f7fd ff9c 	bl	8000548 <__aeabi_f2d>
 8002610:	a332      	add	r3, pc, #200	; (adr r3, 80026dc <csvframe+0x10c>)
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f7fd ffef 	bl	80005f8 <__aeabi_dmul>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	ec43 2b18 	vmov	d8, r2, r3
 8002622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002624:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd ff88 	bl	8000548 <__aeabi_f2d>
 8002638:	4682      	mov	sl, r0
 800263a:	468b      	mov	fp, r1
 800263c:	6a38      	ldr	r0, [r7, #32]
 800263e:	f7fd ff83 	bl	8000548 <__aeabi_f2d>
 8002642:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <csvframe+0xf0>)
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <csvframe+0xf4>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <csvframe+0xf8>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <csvframe+0xfc>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	461e      	mov	r6, r3
 800265a:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <csvframe+0x100>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <csvframe+0x104>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	9315      	str	r3, [sp, #84]	; 0x54
 8002666:	9214      	str	r2, [sp, #80]	; 0x50
 8002668:	9613      	str	r6, [sp, #76]	; 0x4c
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	9212      	str	r2, [sp, #72]	; 0x48
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	9211      	str	r2, [sp, #68]	; 0x44
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	9310      	str	r3, [sp, #64]	; 0x40
 8002676:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	930c      	str	r3, [sp, #48]	; 0x30
 800267e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002682:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002686:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800268a:	ed8d 8b04 	vstr	d8, [sp, #16]
 800268e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002692:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002696:	ed97 7b06 	vldr	d7, [r7, #24]
 800269a:	ed8d 7b00 	vstr	d7, [sp]
 800269e:	4a0e      	ldr	r2, [pc, #56]	; (80026d8 <csvframe+0x108>)
 80026a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026a6:	f014 f811 	bl	80166cc <sniprintf>
 80026aa:	63f8      	str	r0, [r7, #60]	; 0x3c
	return framesize;
 80026ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3744      	adds	r7, #68	; 0x44
 80026b2:	46bd      	mov	sp, r7
 80026b4:	ecbd 8b02 	vpop	{d8}
 80026b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026bc:	f3af 8000 	nop.w
 80026c0:	2000000a 	.word	0x2000000a
 80026c4:	20000009 	.word	0x20000009
 80026c8:	20000008 	.word	0x20000008
 80026cc:	20000a49 	.word	0x20000a49
 80026d0:	20000a4a 	.word	0x20000a4a
 80026d4:	20000a48 	.word	0x20000a48
 80026d8:	0801ae2c 	.word	0x0801ae2c
 80026dc:	cccccccd 	.word	0xcccccccd
 80026e0:	400ccccc 	.word	0x400ccccc

080026e4 <storeindex>:


void storeindex(void){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b09c      	sub	sp, #112	; 0x70
 80026e8:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 80026ea:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80026ee:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 80026f0:	463b      	mov	r3, r7
 80026f2:	2264      	movs	r2, #100	; 0x64
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f014 f87f 	bl	80167fa <memset>
	snprintf((uint8_t*)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <storeindex+0x6c>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <storeindex+0x70>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4638      	mov	r0, r7
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	4a13      	ldr	r2, [pc, #76]	; (8002758 <storeindex+0x74>)
 800270c:	2164      	movs	r1, #100	; 0x64
 800270e:	f013 ffdd 	bl	80166cc <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8002712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002714:	2b00      	cmp	r3, #0
 8002716:	da00      	bge.n	800271a <storeindex+0x36>
 8002718:	330f      	adds	r3, #15
 800271a:	111b      	asrs	r3, r3, #4
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd ff01 	bl	8000524 <__aeabi_i2d>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	f7fe fa15 	bl	8000b58 <__aeabi_d2iz>
 800272e:	4603      	mov	r3, r0
 8002730:	4619      	mov	r1, r3
 8002732:	480a      	ldr	r0, [pc, #40]	; (800275c <storeindex+0x78>)
 8002734:	f011 fa67 	bl	8013c06 <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8002738:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800273a:	463a      	mov	r2, r7
 800273c:	2300      	movs	r3, #0
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	2364      	movs	r3, #100	; 0x64
 8002742:	4806      	ldr	r0, [pc, #24]	; (800275c <storeindex+0x78>)
 8002744:	f011 fae2 	bl	8013d0c <SPIF_WritePage>

}
 8002748:	bf00      	nop
 800274a:	3768      	adds	r7, #104	; 0x68
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000958 	.word	0x20000958
 8002754:	2000095c 	.word	0x2000095c
 8002758:	0801ae80 	.word	0x0801ae80
 800275c:	20000710 	.word	0x20000710

08002760 <getindex>:

void getindex(void){
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8002766:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800276a:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	2300      	movs	r3, #0
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2332      	movs	r3, #50	; 0x32
 8002774:	4a2b      	ldr	r2, [pc, #172]	; (8002824 <getindex+0xc4>)
 8002776:	482c      	ldr	r0, [pc, #176]	; (8002828 <getindex+0xc8>)
 8002778:	f011 fae6 	bl	8013d48 <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 800277c:	220a      	movs	r2, #10
 800277e:	2124      	movs	r1, #36	; 0x24
 8002780:	482a      	ldr	r0, [pc, #168]	; (800282c <getindex+0xcc>)
 8002782:	f014 f83a 	bl	80167fa <memset>
	memset(numbuf2,'$',10);
 8002786:	220a      	movs	r2, #10
 8002788:	2124      	movs	r1, #36	; 0x24
 800278a:	4829      	ldr	r0, [pc, #164]	; (8002830 <getindex+0xd0>)
 800278c:	f014 f835 	bl	80167fa <memset>
	int cnt=0;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8002794:	4b23      	ldr	r3, [pc, #140]	; (8002824 <getindex+0xc4>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	2b09      	cmp	r3, #9
 800279e:	dc3a      	bgt.n	8002816 <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 80027a0:	e00b      	b.n	80027ba <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 80027a2:	4a20      	ldr	r2, [pc, #128]	; (8002824 <getindex+0xc4>)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4413      	add	r3, r2
 80027a8:	7819      	ldrb	r1, [r3, #0]
 80027aa:	4a20      	ldr	r2, [pc, #128]	; (800282c <getindex+0xcc>)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4413      	add	r3, r2
 80027b0:	460a      	mov	r2, r1
 80027b2:	701a      	strb	r2, [r3, #0]
			  cnt++;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	3301      	adds	r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 80027ba:	4a1a      	ldr	r2, [pc, #104]	; (8002824 <getindex+0xc4>)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b24      	cmp	r3, #36	; 0x24
 80027c4:	d1ed      	bne.n	80027a2 <getindex+0x42>
		  }
		  cnt++;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	3301      	adds	r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 80027d0:	e00e      	b.n	80027f0 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 80027d2:	4a14      	ldr	r2, [pc, #80]	; (8002824 <getindex+0xc4>)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	7819      	ldrb	r1, [r3, #0]
 80027da:	4a15      	ldr	r2, [pc, #84]	; (8002830 <getindex+0xd0>)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	4413      	add	r3, r2
 80027e0:	460a      	mov	r2, r1
 80027e2:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	3301      	adds	r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3301      	adds	r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 80027f0:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <getindex+0xc4>)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4413      	add	r3, r2
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b24      	cmp	r3, #36	; 0x24
 80027fa:	d1ea      	bne.n	80027d2 <getindex+0x72>
		  	  }

		 pageoffset=atoi((uint8_t*)numbuf1);
 80027fc:	480b      	ldr	r0, [pc, #44]	; (800282c <getindex+0xcc>)
 80027fe:	f012 f867 	bl	80148d0 <atoi>
 8002802:	4603      	mov	r3, r0
 8002804:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <getindex+0xd4>)
 8002806:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((uint8_t*)numbuf2);
 8002808:	4809      	ldr	r0, [pc, #36]	; (8002830 <getindex+0xd0>)
 800280a:	f012 f861 	bl	80148d0 <atoi>
 800280e:	4603      	mov	r3, r0
 8002810:	4a09      	ldr	r2, [pc, #36]	; (8002838 <getindex+0xd8>)
 8002812:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8002814:	e001      	b.n	800281a <getindex+0xba>
		storeindex();
 8002816:	f7ff ff65 	bl	80026e4 <storeindex>
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000aa0 	.word	0x20000aa0
 8002828:	20000710 	.word	0x20000710
 800282c:	20000964 	.word	0x20000964
 8002830:	20000970 	.word	0x20000970
 8002834:	20000958 	.word	0x20000958
 8002838:	2000095c 	.word	0x2000095c

0800283c <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af02      	add	r7, sp, #8
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 8002846:	4b3f      	ldr	r3, [pc, #252]	; (8002944 <writebuffertoflash+0x108>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	3301      	adds	r3, #1
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	2b00      	cmp	r3, #0
 8002852:	d11b      	bne.n	800288c <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8002854:	4b3c      	ldr	r3, [pc, #240]	; (8002948 <writebuffertoflash+0x10c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d117      	bne.n	800288c <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 800285c:	4b39      	ldr	r3, [pc, #228]	; (8002944 <writebuffertoflash+0x108>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3301      	adds	r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	da00      	bge.n	8002868 <writebuffertoflash+0x2c>
 8002866:	330f      	adds	r3, #15
 8002868:	111b      	asrs	r3, r3, #4
 800286a:	4618      	mov	r0, r3
 800286c:	f7fd fe5a 	bl	8000524 <__aeabi_i2d>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	f7fe f96e 	bl	8000b58 <__aeabi_d2iz>
 800287c:	4603      	mov	r3, r0
 800287e:	4619      	mov	r1, r3
 8002880:	4832      	ldr	r0, [pc, #200]	; (800294c <writebuffertoflash+0x110>)
 8002882:	f011 f9c0 	bl	8013c06 <SPIF_EraseSector>
		sectoreraseen=1;
 8002886:	4b30      	ldr	r3, [pc, #192]	; (8002948 <writebuffertoflash+0x10c>)
 8002888:	2201      	movs	r2, #1
 800288a:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 800288c:	4b30      	ldr	r3, [pc, #192]	; (8002950 <writebuffertoflash+0x114>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	4413      	add	r3, r2
 8002894:	2bff      	cmp	r3, #255	; 0xff
 8002896:	dc11      	bgt.n	80028bc <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8002898:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <writebuffertoflash+0x108>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4619      	mov	r1, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	4a2b      	ldr	r2, [pc, #172]	; (8002950 <writebuffertoflash+0x114>)
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	9200      	str	r2, [sp, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4828      	ldr	r0, [pc, #160]	; (800294c <writebuffertoflash+0x110>)
 80028aa:	f011 fa2f 	bl	8013d0c <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 80028ae:	4b28      	ldr	r3, [pc, #160]	; (8002950 <writebuffertoflash+0x114>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	4413      	add	r3, r2
 80028b6:	4a26      	ldr	r2, [pc, #152]	; (8002950 <writebuffertoflash+0x114>)
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e03c      	b.n	8002936 <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 80028bc:	4b21      	ldr	r3, [pc, #132]	; (8002944 <writebuffertoflash+0x108>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4619      	mov	r1, r3
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <writebuffertoflash+0x114>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80028ca:	461a      	mov	r2, r3
 80028cc:	4b20      	ldr	r3, [pc, #128]	; (8002950 <writebuffertoflash+0x114>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	4613      	mov	r3, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	481d      	ldr	r0, [pc, #116]	; (800294c <writebuffertoflash+0x110>)
 80028d8:	f011 fa18 	bl	8013d0c <SPIF_WritePage>
		HAL_Delay(100);
 80028dc:	2064      	movs	r0, #100	; 0x64
 80028de:	f003 fdaf 	bl	8006440 <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <writebuffertoflash+0x108>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	3301      	adds	r3, #1
 80028e8:	4618      	mov	r0, r3
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <writebuffertoflash+0x114>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80028f2:	461a      	mov	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	1899      	adds	r1, r3, r2
 80028f8:	4b15      	ldr	r3, [pc, #84]	; (8002950 <writebuffertoflash+0x114>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	461a      	mov	r2, r3
 8002906:	2300      	movs	r3, #0
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	4613      	mov	r3, r2
 800290c:	460a      	mov	r2, r1
 800290e:	4601      	mov	r1, r0
 8002910:	480e      	ldr	r0, [pc, #56]	; (800294c <writebuffertoflash+0x110>)
 8002912:	f011 f9fb 	bl	8013d0c <SPIF_WritePage>
		pagenumber=pagenumber+1;
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <writebuffertoflash+0x108>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3301      	adds	r3, #1
 800291c:	4a09      	ldr	r2, [pc, #36]	; (8002944 <writebuffertoflash+0x108>)
 800291e:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <writebuffertoflash+0x10c>)
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <writebuffertoflash+0x114>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	4a07      	ldr	r2, [pc, #28]	; (8002950 <writebuffertoflash+0x114>)
 8002934:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 8002936:	f7ff fed5 	bl	80026e4 <storeindex>

}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	2000095c 	.word	0x2000095c
 8002948:	20000960 	.word	0x20000960
 800294c:	20000710 	.word	0x20000710
 8002950:	20000958 	.word	0x20000958

08002954 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern char str[20];

void ssd1306_Reset(void) {
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af04      	add	r7, sp, #16
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800296e:	f04f 33ff 	mov.w	r3, #4294967295
 8002972:	9302      	str	r3, [sp, #8]
 8002974:	2301      	movs	r3, #1
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	1dfb      	adds	r3, r7, #7
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	2301      	movs	r3, #1
 800297e:	2200      	movs	r2, #0
 8002980:	2178      	movs	r1, #120	; 0x78
 8002982:	4803      	ldr	r0, [pc, #12]	; (8002990 <ssd1306_WriteCommand+0x2c>)
 8002984:	f005 fe02 	bl	800858c <HAL_I2C_Mem_Write>
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000424 	.word	0x20000424

08002994 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af04      	add	r7, sp, #16
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	f04f 32ff 	mov.w	r2, #4294967295
 80029a6:	9202      	str	r2, [sp, #8]
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2301      	movs	r3, #1
 80029b0:	2240      	movs	r2, #64	; 0x40
 80029b2:	2178      	movs	r1, #120	; 0x78
 80029b4:	4803      	ldr	r0, [pc, #12]	; (80029c4 <ssd1306_WriteData+0x30>)
 80029b6:	f005 fde9 	bl	800858c <HAL_I2C_Mem_Write>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000424 	.word	0x20000424

080029c8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80029cc:	f7ff ffc2 	bl	8002954 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80029d0:	2064      	movs	r0, #100	; 0x64
 80029d2:	f003 fd35 	bl	8006440 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80029d6:	2000      	movs	r0, #0
 80029d8:	f000 fba0 	bl	800311c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80029dc:	2020      	movs	r0, #32
 80029de:	f7ff ffc1 	bl	8002964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80029e2:	2000      	movs	r0, #0
 80029e4:	f7ff ffbe 	bl	8002964 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80029e8:	20b0      	movs	r0, #176	; 0xb0
 80029ea:	f7ff ffbb 	bl	8002964 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80029ee:	20c8      	movs	r0, #200	; 0xc8
 80029f0:	f7ff ffb8 	bl	8002964 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7ff ffb5 	bl	8002964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80029fa:	2010      	movs	r0, #16
 80029fc:	f7ff ffb2 	bl	8002964 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002a00:	2040      	movs	r0, #64	; 0x40
 8002a02:	f7ff ffaf 	bl	8002964 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002a06:	20ff      	movs	r0, #255	; 0xff
 8002a08:	f000 fb75 	bl	80030f6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002a0c:	20a1      	movs	r0, #161	; 0xa1
 8002a0e:	f7ff ffa9 	bl	8002964 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002a12:	20a6      	movs	r0, #166	; 0xa6
 8002a14:	f7ff ffa6 	bl	8002964 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002a18:	20a8      	movs	r0, #168	; 0xa8
 8002a1a:	f7ff ffa3 	bl	8002964 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002a1e:	203f      	movs	r0, #63	; 0x3f
 8002a20:	f7ff ffa0 	bl	8002964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002a24:	20a4      	movs	r0, #164	; 0xa4
 8002a26:	f7ff ff9d 	bl	8002964 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002a2a:	20d3      	movs	r0, #211	; 0xd3
 8002a2c:	f7ff ff9a 	bl	8002964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7ff ff97 	bl	8002964 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002a36:	20d5      	movs	r0, #213	; 0xd5
 8002a38:	f7ff ff94 	bl	8002964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002a3c:	20f0      	movs	r0, #240	; 0xf0
 8002a3e:	f7ff ff91 	bl	8002964 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002a42:	20d9      	movs	r0, #217	; 0xd9
 8002a44:	f7ff ff8e 	bl	8002964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002a48:	2022      	movs	r0, #34	; 0x22
 8002a4a:	f7ff ff8b 	bl	8002964 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002a4e:	20da      	movs	r0, #218	; 0xda
 8002a50:	f7ff ff88 	bl	8002964 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002a54:	2012      	movs	r0, #18
 8002a56:	f7ff ff85 	bl	8002964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002a5a:	20db      	movs	r0, #219	; 0xdb
 8002a5c:	f7ff ff82 	bl	8002964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002a60:	2020      	movs	r0, #32
 8002a62:	f7ff ff7f 	bl	8002964 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002a66:	208d      	movs	r0, #141	; 0x8d
 8002a68:	f7ff ff7c 	bl	8002964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002a6c:	2014      	movs	r0, #20
 8002a6e:	f7ff ff79 	bl	8002964 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002a72:	2001      	movs	r0, #1
 8002a74:	f000 fb52 	bl	800311c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f000 f80f 	bl	8002a9c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002a7e:	f000 f825 	bl	8002acc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <ssd1306_Init+0xd0>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <ssd1306_Init+0xd0>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002a8e:	4b02      	ldr	r3, [pc, #8]	; (8002a98 <ssd1306_Init+0xd0>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	711a      	strb	r2, [r3, #4]
}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000fc8 	.word	0x20000fc8

08002a9c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <ssd1306_Fill+0x14>
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <ssd1306_Fill+0x16>
 8002ab0:	23ff      	movs	r3, #255	; 0xff
 8002ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4803      	ldr	r0, [pc, #12]	; (8002ac8 <ssd1306_Fill+0x2c>)
 8002aba:	f013 fe9e 	bl	80167fa <memset>
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000bc8 	.word	0x20000bc8

08002acc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	71fb      	strb	r3, [r7, #7]
 8002ad6:	e016      	b.n	8002b06 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	3b50      	subs	r3, #80	; 0x50
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ff40 	bl	8002964 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7ff ff3d 	bl	8002964 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002aea:	2010      	movs	r0, #16
 8002aec:	f7ff ff3a 	bl	8002964 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	01db      	lsls	r3, r3, #7
 8002af4:	4a08      	ldr	r2, [pc, #32]	; (8002b18 <ssd1306_UpdateScreen+0x4c>)
 8002af6:	4413      	add	r3, r2
 8002af8:	2180      	movs	r1, #128	; 0x80
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff ff4a 	bl	8002994 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	3301      	adds	r3, #1
 8002b04:	71fb      	strb	r3, [r7, #7]
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	2b07      	cmp	r3, #7
 8002b0a:	d9e5      	bls.n	8002ad8 <ssd1306_UpdateScreen+0xc>
    }
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000bc8 	.word	0x20000bc8

08002b1c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
 8002b26:	460b      	mov	r3, r1
 8002b28:	71bb      	strb	r3, [r7, #6]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	db3d      	blt.n	8002bb2 <ssd1306_DrawPixel+0x96>
 8002b36:	79bb      	ldrb	r3, [r7, #6]
 8002b38:	2b3f      	cmp	r3, #63	; 0x3f
 8002b3a:	d83a      	bhi.n	8002bb2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002b3c:	797b      	ldrb	r3, [r7, #5]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d11a      	bne.n	8002b78 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002b42:	79fa      	ldrb	r2, [r7, #7]
 8002b44:	79bb      	ldrb	r3, [r7, #6]
 8002b46:	08db      	lsrs	r3, r3, #3
 8002b48:	b2d8      	uxtb	r0, r3
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	01db      	lsls	r3, r3, #7
 8002b4e:	4413      	add	r3, r2
 8002b50:	4a1b      	ldr	r2, [pc, #108]	; (8002bc0 <ssd1306_DrawPixel+0xa4>)
 8002b52:	5cd3      	ldrb	r3, [r2, r3]
 8002b54:	b25a      	sxtb	r2, r3
 8002b56:	79bb      	ldrb	r3, [r7, #6]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b62:	b25b      	sxtb	r3, r3
 8002b64:	4313      	orrs	r3, r2
 8002b66:	b259      	sxtb	r1, r3
 8002b68:	79fa      	ldrb	r2, [r7, #7]
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	01db      	lsls	r3, r3, #7
 8002b6e:	4413      	add	r3, r2
 8002b70:	b2c9      	uxtb	r1, r1
 8002b72:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <ssd1306_DrawPixel+0xa4>)
 8002b74:	54d1      	strb	r1, [r2, r3]
 8002b76:	e01d      	b.n	8002bb4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002b78:	79fa      	ldrb	r2, [r7, #7]
 8002b7a:	79bb      	ldrb	r3, [r7, #6]
 8002b7c:	08db      	lsrs	r3, r3, #3
 8002b7e:	b2d8      	uxtb	r0, r3
 8002b80:	4603      	mov	r3, r0
 8002b82:	01db      	lsls	r3, r3, #7
 8002b84:	4413      	add	r3, r2
 8002b86:	4a0e      	ldr	r2, [pc, #56]	; (8002bc0 <ssd1306_DrawPixel+0xa4>)
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	b25a      	sxtb	r2, r3
 8002b8c:	79bb      	ldrb	r3, [r7, #6]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	2101      	movs	r1, #1
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	b25b      	sxtb	r3, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	b25b      	sxtb	r3, r3
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	b259      	sxtb	r1, r3
 8002ba2:	79fa      	ldrb	r2, [r7, #7]
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	01db      	lsls	r3, r3, #7
 8002ba8:	4413      	add	r3, r2
 8002baa:	b2c9      	uxtb	r1, r1
 8002bac:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <ssd1306_DrawPixel+0xa4>)
 8002bae:	54d1      	strb	r1, [r2, r3]
 8002bb0:	e000      	b.n	8002bb4 <ssd1306_DrawPixel+0x98>
        return;
 8002bb2:	bf00      	nop
    }
}
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000bc8 	.word	0x20000bc8

08002bc4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b089      	sub	sp, #36	; 0x24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4604      	mov	r4, r0
 8002bcc:	1d38      	adds	r0, r7, #4
 8002bce:	e880 0006 	stmia.w	r0, {r1, r2}
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4623      	mov	r3, r4
 8002bd6:	73fb      	strb	r3, [r7, #15]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	2b1f      	cmp	r3, #31
 8002be0:	d902      	bls.n	8002be8 <ssd1306_WriteChar+0x24>
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b7e      	cmp	r3, #126	; 0x7e
 8002be6:	d901      	bls.n	8002bec <ssd1306_WriteChar+0x28>
        return 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e06d      	b.n	8002cc8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002bec:	4b38      	ldr	r3, [pc, #224]	; (8002cd0 <ssd1306_WriteChar+0x10c>)
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	793b      	ldrb	r3, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	2b80      	cmp	r3, #128	; 0x80
 8002bf8:	dc06      	bgt.n	8002c08 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002bfa:	4b35      	ldr	r3, [pc, #212]	; (8002cd0 <ssd1306_WriteChar+0x10c>)
 8002bfc:	885b      	ldrh	r3, [r3, #2]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	797b      	ldrb	r3, [r7, #5]
 8002c02:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002c04:	2b40      	cmp	r3, #64	; 0x40
 8002c06:	dd01      	ble.n	8002c0c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e05d      	b.n	8002cc8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	e04c      	b.n	8002cac <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	3b20      	subs	r3, #32
 8002c18:	7979      	ldrb	r1, [r7, #5]
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4619      	mov	r1, r3
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	440b      	add	r3, r1
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4413      	add	r3, r2
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61bb      	str	r3, [r7, #24]
 8002c30:	e034      	b.n	8002c9c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d012      	beq.n	8002c68 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <ssd1306_WriteChar+0x10c>)
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	b2d8      	uxtb	r0, r3
 8002c50:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <ssd1306_WriteChar+0x10c>)
 8002c52:	885b      	ldrh	r3, [r3, #2]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	7bba      	ldrb	r2, [r7, #14]
 8002c60:	4619      	mov	r1, r3
 8002c62:	f7ff ff5b 	bl	8002b1c <ssd1306_DrawPixel>
 8002c66:	e016      	b.n	8002c96 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002c68:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <ssd1306_WriteChar+0x10c>)
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	b2d8      	uxtb	r0, r3
 8002c76:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <ssd1306_WriteChar+0x10c>)
 8002c78:	885b      	ldrh	r3, [r3, #2]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	b2d9      	uxtb	r1, r3
 8002c84:	7bbb      	ldrb	r3, [r7, #14]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bf0c      	ite	eq
 8002c8a:	2301      	moveq	r3, #1
 8002c8c:	2300      	movne	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	f7ff ff43 	bl	8002b1c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	793b      	ldrb	r3, [r7, #4]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d3c5      	bcc.n	8002c32 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	61fb      	str	r3, [r7, #28]
 8002cac:	797b      	ldrb	r3, [r7, #5]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d3ad      	bcc.n	8002c12 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002cb6:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <ssd1306_WriteChar+0x10c>)
 8002cb8:	881a      	ldrh	r2, [r3, #0]
 8002cba:	793b      	ldrb	r3, [r7, #4]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <ssd1306_WriteChar+0x10c>)
 8002cc4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3724      	adds	r7, #36	; 0x24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd90      	pop	{r4, r7, pc}
 8002cd0:	20000fc8 	.word	0x20000fc8

08002cd4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	1d38      	adds	r0, r7, #4
 8002cde:	e880 0006 	stmia.w	r0, {r1, r2}
 8002ce2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002ce4:	e012      	b.n	8002d0c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	7818      	ldrb	r0, [r3, #0]
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	1d3a      	adds	r2, r7, #4
 8002cee:	ca06      	ldmia	r2, {r1, r2}
 8002cf0:	f7ff ff68 	bl	8002bc4 <ssd1306_WriteChar>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d002      	beq.n	8002d06 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	e008      	b.n	8002d18 <ssd1306_WriteString+0x44>
        }
        str++;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1e8      	bne.n	8002ce6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	781b      	ldrb	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	460a      	mov	r2, r1
 8002d2a:	71fb      	strb	r3, [r7, #7]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <ssd1306_SetCursor+0x2c>)
 8002d36:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002d38:	79bb      	ldrb	r3, [r7, #6]
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	4b03      	ldr	r3, [pc, #12]	; (8002d4c <ssd1306_SetCursor+0x2c>)
 8002d3e:	805a      	strh	r2, [r3, #2]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	20000fc8 	.word	0x20000fc8

08002d50 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4604      	mov	r4, r0
 8002d58:	4608      	mov	r0, r1
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4623      	mov	r3, r4
 8002d60:	71fb      	strb	r3, [r7, #7]
 8002d62:	4603      	mov	r3, r0
 8002d64:	71bb      	strb	r3, [r7, #6]
 8002d66:	460b      	mov	r3, r1
 8002d68:	717b      	strb	r3, [r7, #5]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8002d6e:	797a      	ldrb	r2, [r7, #5]
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bfb8      	it	lt
 8002d78:	425b      	neglt	r3, r3
 8002d7a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002d7c:	793a      	ldrb	r2, [r7, #4]
 8002d7e:	79bb      	ldrb	r3, [r7, #6]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bfb8      	it	lt
 8002d86:	425b      	neglt	r3, r3
 8002d88:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002d8a:	79fa      	ldrb	r2, [r7, #7]
 8002d8c:	797b      	ldrb	r3, [r7, #5]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d201      	bcs.n	8002d96 <ssd1306_Line+0x46>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e001      	b.n	8002d9a <ssd1306_Line+0x4a>
 8002d96:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002d9c:	79ba      	ldrb	r2, [r7, #6]
 8002d9e:	793b      	ldrb	r3, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d201      	bcs.n	8002da8 <ssd1306_Line+0x58>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e001      	b.n	8002dac <ssd1306_Line+0x5c>
 8002da8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dac:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8002db6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002dba:	7939      	ldrb	r1, [r7, #4]
 8002dbc:	797b      	ldrb	r3, [r7, #5]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff feac 	bl	8002b1c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002dc4:	e024      	b.n	8002e10 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002dc6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002dca:	79b9      	ldrb	r1, [r7, #6]
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fea4 	bl	8002b1c <ssd1306_DrawPixel>
        error2 = error * 2;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	425b      	negs	r3, r3
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	dd08      	ble.n	8002df6 <ssd1306_Line+0xa6>
            error -= deltaY;
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	4413      	add	r3, r2
 8002df4:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	da08      	bge.n	8002e10 <ssd1306_Line+0xc0>
            error += deltaX;
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	4413      	add	r3, r2
 8002e04:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	79bb      	ldrb	r3, [r7, #6]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002e10:	79fa      	ldrb	r2, [r7, #7]
 8002e12:	797b      	ldrb	r3, [r7, #5]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d1d6      	bne.n	8002dc6 <ssd1306_Line+0x76>
 8002e18:	79ba      	ldrb	r2, [r7, #6]
 8002e1a:	793b      	ldrb	r3, [r7, #4]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d1d2      	bne.n	8002dc6 <ssd1306_Line+0x76>
        }
    }
    return;
 8002e20:	bf00      	nop
}
 8002e22:	3724      	adds	r7, #36	; 0x24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd90      	pop	{r4, r7, pc}

08002e28 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4604      	mov	r4, r0
 8002e30:	4608      	mov	r0, r1
 8002e32:	4611      	mov	r1, r2
 8002e34:	461a      	mov	r2, r3
 8002e36:	4623      	mov	r3, r4
 8002e38:	71fb      	strb	r3, [r7, #7]
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71bb      	strb	r3, [r7, #6]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	717b      	strb	r3, [r7, #5]
 8002e42:	4613      	mov	r3, r2
 8002e44:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8002e46:	797b      	ldrb	r3, [r7, #5]
 8002e48:	425b      	negs	r3, r3
 8002e4a:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002e50:	797b      	ldrb	r3, [r7, #5]
 8002e52:	f1c3 0301 	rsb	r3, r3, #1
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	db65      	blt.n	8002f2e <ssd1306_DrawCircle+0x106>
 8002e62:	79bb      	ldrb	r3, [r7, #6]
 8002e64:	2b3f      	cmp	r3, #63	; 0x3f
 8002e66:	d862      	bhi.n	8002f2e <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	79fa      	ldrb	r2, [r7, #7]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	b2d8      	uxtb	r0, r3
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	79bb      	ldrb	r3, [r7, #6]
 8002e78:	4413      	add	r3, r2
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	793a      	ldrb	r2, [r7, #4]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f7ff fe4c 	bl	8002b1c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	b2d8      	uxtb	r0, r3
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	79bb      	ldrb	r3, [r7, #6]
 8002e94:	4413      	add	r3, r2
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	793a      	ldrb	r2, [r7, #4]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f7ff fe3e 	bl	8002b1c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	b2d8      	uxtb	r0, r3
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	79ba      	ldrb	r2, [r7, #6]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	793a      	ldrb	r2, [r7, #4]
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f7ff fe30 	bl	8002b1c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	79fa      	ldrb	r2, [r7, #7]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	b2d8      	uxtb	r0, r3
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	79ba      	ldrb	r2, [r7, #6]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	793a      	ldrb	r2, [r7, #4]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f7ff fe22 	bl	8002b1c <ssd1306_DrawPixel>
        e2 = err;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	dc13      	bgt.n	8002f0c <ssd1306_DrawCircle+0xe4>
            y++;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	3301      	adds	r3, #1
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	425b      	negs	r3, r3
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d105      	bne.n	8002f0c <ssd1306_DrawCircle+0xe4>
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	dc01      	bgt.n	8002f0c <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	dd08      	ble.n	8002f26 <ssd1306_DrawCircle+0xfe>
            x++;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	3301      	adds	r3, #1
 8002f18:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	3301      	adds	r3, #1
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4413      	add	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	dd9d      	ble.n	8002e68 <ssd1306_DrawCircle+0x40>

    return;
 8002f2c:	e000      	b.n	8002f30 <ssd1306_DrawCircle+0x108>
        return;
 8002f2e:	bf00      	nop
}
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd90      	pop	{r4, r7, pc}

08002f36 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002f36:	b590      	push	{r4, r7, lr}
 8002f38:	b085      	sub	sp, #20
 8002f3a:	af02      	add	r7, sp, #8
 8002f3c:	4604      	mov	r4, r0
 8002f3e:	4608      	mov	r0, r1
 8002f40:	4611      	mov	r1, r2
 8002f42:	461a      	mov	r2, r3
 8002f44:	4623      	mov	r3, r4
 8002f46:	71fb      	strb	r3, [r7, #7]
 8002f48:	4603      	mov	r3, r0
 8002f4a:	71bb      	strb	r3, [r7, #6]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	717b      	strb	r3, [r7, #5]
 8002f50:	4613      	mov	r3, r2
 8002f52:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8002f54:	79bc      	ldrb	r4, [r7, #6]
 8002f56:	797a      	ldrb	r2, [r7, #5]
 8002f58:	79b9      	ldrb	r1, [r7, #6]
 8002f5a:	79f8      	ldrb	r0, [r7, #7]
 8002f5c:	7e3b      	ldrb	r3, [r7, #24]
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	4623      	mov	r3, r4
 8002f62:	f7ff fef5 	bl	8002d50 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002f66:	793c      	ldrb	r4, [r7, #4]
 8002f68:	797a      	ldrb	r2, [r7, #5]
 8002f6a:	79b9      	ldrb	r1, [r7, #6]
 8002f6c:	7978      	ldrb	r0, [r7, #5]
 8002f6e:	7e3b      	ldrb	r3, [r7, #24]
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	4623      	mov	r3, r4
 8002f74:	f7ff feec 	bl	8002d50 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8002f78:	793c      	ldrb	r4, [r7, #4]
 8002f7a:	79fa      	ldrb	r2, [r7, #7]
 8002f7c:	7939      	ldrb	r1, [r7, #4]
 8002f7e:	7978      	ldrb	r0, [r7, #5]
 8002f80:	7e3b      	ldrb	r3, [r7, #24]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	4623      	mov	r3, r4
 8002f86:	f7ff fee3 	bl	8002d50 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8002f8a:	79bc      	ldrb	r4, [r7, #6]
 8002f8c:	79fa      	ldrb	r2, [r7, #7]
 8002f8e:	7939      	ldrb	r1, [r7, #4]
 8002f90:	79f8      	ldrb	r0, [r7, #7]
 8002f92:	7e3b      	ldrb	r3, [r7, #24]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	4623      	mov	r3, r4
 8002f98:	f7ff feda 	bl	8002d50 <ssd1306_Line>

    return;
 8002f9c:	bf00      	nop
}
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd90      	pop	{r4, r7, pc}

08002fa4 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002fa4:	b590      	push	{r4, r7, lr}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4604      	mov	r4, r0
 8002fac:	4608      	mov	r0, r1
 8002fae:	4611      	mov	r1, r2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4623      	mov	r3, r4
 8002fb4:	71fb      	strb	r3, [r7, #7]
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71bb      	strb	r3, [r7, #6]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	717b      	strb	r3, [r7, #5]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002fc2:	79fa      	ldrb	r2, [r7, #7]
 8002fc4:	797b      	ldrb	r3, [r7, #5]
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	bf28      	it	cs
 8002fca:	4613      	movcs	r3, r2
 8002fcc:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002fce:	797a      	ldrb	r2, [r7, #5]
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	bf38      	it	cc
 8002fd6:	4613      	movcc	r3, r2
 8002fd8:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002fda:	79ba      	ldrb	r2, [r7, #6]
 8002fdc:	793b      	ldrb	r3, [r7, #4]
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	bf28      	it	cs
 8002fe2:	4613      	movcs	r3, r2
 8002fe4:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002fe6:	793a      	ldrb	r2, [r7, #4]
 8002fe8:	79bb      	ldrb	r3, [r7, #6]
 8002fea:	4293      	cmp	r3, r2
 8002fec:	bf38      	it	cc
 8002fee:	4613      	movcc	r3, r2
 8002ff0:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
 8002ff4:	73fb      	strb	r3, [r7, #15]
 8002ff6:	e017      	b.n	8003028 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002ff8:	7b7b      	ldrb	r3, [r7, #13]
 8002ffa:	73bb      	strb	r3, [r7, #14]
 8002ffc:	e009      	b.n	8003012 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002ffe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003002:	7bf9      	ldrb	r1, [r7, #15]
 8003004:	7bbb      	ldrb	r3, [r7, #14]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fd88 	bl	8002b1c <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800300c:	7bbb      	ldrb	r3, [r7, #14]
 800300e:	3301      	adds	r3, #1
 8003010:	73bb      	strb	r3, [r7, #14]
 8003012:	7bba      	ldrb	r2, [r7, #14]
 8003014:	7b3b      	ldrb	r3, [r7, #12]
 8003016:	429a      	cmp	r2, r3
 8003018:	d803      	bhi.n	8003022 <ssd1306_FillRectangle+0x7e>
 800301a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800301e:	2b00      	cmp	r3, #0
 8003020:	daed      	bge.n	8002ffe <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	3301      	adds	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
 8003028:	7bfa      	ldrb	r2, [r7, #15]
 800302a:	7abb      	ldrb	r3, [r7, #10]
 800302c:	429a      	cmp	r2, r3
 800302e:	d803      	bhi.n	8003038 <ssd1306_FillRectangle+0x94>
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b3f      	cmp	r3, #63	; 0x3f
 8003034:	d9e0      	bls.n	8002ff8 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8003036:	bf00      	nop
 8003038:	bf00      	nop
}
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	bd90      	pop	{r4, r7, pc}

08003040 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	603a      	str	r2, [r7, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	4603      	mov	r3, r0
 800304c:	71fb      	strb	r3, [r7, #7]
 800304e:	460b      	mov	r3, r1
 8003050:	71bb      	strb	r3, [r7, #6]
 8003052:	4613      	mov	r3, r2
 8003054:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8003056:	797b      	ldrb	r3, [r7, #5]
 8003058:	3307      	adds	r3, #7
 800305a:	2b00      	cmp	r3, #0
 800305c:	da00      	bge.n	8003060 <ssd1306_DrawBitmap+0x20>
 800305e:	3307      	adds	r3, #7
 8003060:	10db      	asrs	r3, r3, #3
 8003062:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306c:	2b00      	cmp	r3, #0
 800306e:	db3e      	blt.n	80030ee <ssd1306_DrawBitmap+0xae>
 8003070:	79bb      	ldrb	r3, [r7, #6]
 8003072:	2b3f      	cmp	r3, #63	; 0x3f
 8003074:	d83b      	bhi.n	80030ee <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8003076:	2300      	movs	r3, #0
 8003078:	73bb      	strb	r3, [r7, #14]
 800307a:	e033      	b.n	80030e4 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 800307c:	2300      	movs	r3, #0
 800307e:	737b      	strb	r3, [r7, #13]
 8003080:	e026      	b.n	80030d0 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8003082:	7b7b      	ldrb	r3, [r7, #13]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	73fb      	strb	r3, [r7, #15]
 8003092:	e00d      	b.n	80030b0 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8003094:	7bbb      	ldrb	r3, [r7, #14]
 8003096:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	7b7a      	ldrb	r2, [r7, #13]
 80030a0:	08d2      	lsrs	r2, r2, #3
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	4413      	add	r3, r2
 80030a6:	461a      	mov	r2, r3
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	4413      	add	r3, r2
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80030b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	da08      	bge.n	80030ca <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80030b8:	79fa      	ldrb	r2, [r7, #7]
 80030ba:	7b7b      	ldrb	r3, [r7, #13]
 80030bc:	4413      	add	r3, r2
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	7f3a      	ldrb	r2, [r7, #28]
 80030c2:	79b9      	ldrb	r1, [r7, #6]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fd29 	bl	8002b1c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80030ca:	7b7b      	ldrb	r3, [r7, #13]
 80030cc:	3301      	adds	r3, #1
 80030ce:	737b      	strb	r3, [r7, #13]
 80030d0:	7b7a      	ldrb	r2, [r7, #13]
 80030d2:	797b      	ldrb	r3, [r7, #5]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d3d4      	bcc.n	8003082 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80030d8:	7bbb      	ldrb	r3, [r7, #14]
 80030da:	3301      	adds	r3, #1
 80030dc:	73bb      	strb	r3, [r7, #14]
 80030de:	79bb      	ldrb	r3, [r7, #6]
 80030e0:	3301      	adds	r3, #1
 80030e2:	71bb      	strb	r3, [r7, #6]
 80030e4:	7bba      	ldrb	r2, [r7, #14]
 80030e6:	7e3b      	ldrb	r3, [r7, #24]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d3c7      	bcc.n	800307c <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80030ec:	e000      	b.n	80030f0 <ssd1306_DrawBitmap+0xb0>
        return;
 80030ee:	bf00      	nop
}
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4603      	mov	r3, r0
 80030fe:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003100:	2381      	movs	r3, #129	; 0x81
 8003102:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fc2c 	bl	8002964 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fc28 	bl	8002964 <ssd1306_WriteCommand>
}
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800312c:	23af      	movs	r3, #175	; 0xaf
 800312e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <ssd1306_SetDisplayOn+0x38>)
 8003132:	2201      	movs	r2, #1
 8003134:	715a      	strb	r2, [r3, #5]
 8003136:	e004      	b.n	8003142 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003138:	23ae      	movs	r3, #174	; 0xae
 800313a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <ssd1306_SetDisplayOn+0x38>)
 800313e:	2200      	movs	r2, #0
 8003140:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fc0d 	bl	8002964 <ssd1306_WriteCommand>
}
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000fc8 	.word	0x20000fc8

08003158 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 8003158:	b590      	push	{r4, r7, lr}
 800315a:	b087      	sub	sp, #28
 800315c:	af02      	add	r7, sp, #8
 800315e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003162:	60b8      	str	r0, [r7, #8]
 8003164:	6079      	str	r1, [r7, #4]
 8003166:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	330f      	adds	r3, #15
 800316e:	b2d8      	uxtb	r0, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	3301      	adds	r3, #1
 8003176:	b2d9      	uxtb	r1, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	330f      	adds	r3, #15
 800317e:	b2da      	uxtb	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	3305      	adds	r3, #5
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2401      	movs	r4, #1
 800318a:	9400      	str	r4, [sp, #0]
 800318c:	f7ff fde0 	bl	8002d50 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	3310      	adds	r3, #16
 8003196:	b2d8      	uxtb	r0, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	3301      	adds	r3, #1
 800319e:	b2d9      	uxtb	r1, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	3310      	adds	r3, #16
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	3305      	adds	r3, #5
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2401      	movs	r4, #1
 80031b2:	9400      	str	r4, [sp, #0]
 80031b4:	f7ff fdcc 	bl	8002d50 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	b2d8      	uxtb	r0, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	b2d9      	uxtb	r1, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	330e      	adds	r3, #14
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	3306      	adds	r3, #6
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2401      	movs	r4, #1
 80031d2:	9400      	str	r4, [sp, #0]
 80031d4:	f7ff feaf 	bl	8002f36 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f7fd f9b5 	bl	8000548 <__aeabi_f2d>
 80031de:	a396      	add	r3, pc, #600	; (adr r3, 8003438 <batterygauge+0x2e0>)
 80031e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e4:	f7fd fc84 	bl	8000af0 <__aeabi_dcmple>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d02a      	beq.n	8003244 <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	3302      	adds	r3, #2
 80031f4:	b2d8      	uxtb	r0, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	3302      	adds	r3, #2
 80031fc:	b2d9      	uxtb	r1, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	3303      	adds	r3, #3
 8003204:	b2da      	uxtb	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	3304      	adds	r3, #4
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2401      	movs	r4, #1
 8003210:	9400      	str	r4, [sp, #0]
 8003212:	f7ff fe90 	bl	8002f36 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d113      	bne.n	8003244 <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	3302      	adds	r3, #2
 8003222:	b2d8      	uxtb	r0, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	3302      	adds	r3, #2
 800322a:	b2d9      	uxtb	r1, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	3303      	adds	r3, #3
 8003232:	b2da      	uxtb	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	3304      	adds	r3, #4
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2401      	movs	r4, #1
 800323e:	9400      	str	r4, [sp, #0]
 8003240:	f7ff fe79 	bl	8002f36 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7fd f97f 	bl	8000548 <__aeabi_f2d>
 800324a:	a37b      	add	r3, pc, #492	; (adr r3, 8003438 <batterygauge+0x2e0>)
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	f7fd fc62 	bl	8000b18 <__aeabi_dcmpgt>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d035      	beq.n	80032c6 <batterygauge+0x16e>
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f7fd f974 	bl	8000548 <__aeabi_f2d>
 8003260:	a377      	add	r3, pc, #476	; (adr r3, 8003440 <batterygauge+0x2e8>)
 8003262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003266:	f7fd fc43 	bl	8000af0 <__aeabi_dcmple>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d02a      	beq.n	80032c6 <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	3302      	adds	r3, #2
 8003276:	b2d8      	uxtb	r0, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	3302      	adds	r3, #2
 800327e:	b2d9      	uxtb	r1, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	3303      	adds	r3, #3
 8003286:	b2da      	uxtb	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	3304      	adds	r3, #4
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2401      	movs	r4, #1
 8003292:	9400      	str	r4, [sp, #0]
 8003294:	f7ff fe4f 	bl	8002f36 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d113      	bne.n	80032c6 <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	3305      	adds	r3, #5
 80032a4:	b2d8      	uxtb	r0, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	3302      	adds	r3, #2
 80032ac:	b2d9      	uxtb	r1, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	3306      	adds	r3, #6
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	3304      	adds	r3, #4
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2401      	movs	r4, #1
 80032c0:	9400      	str	r4, [sp, #0]
 80032c2:	f7ff fe38 	bl	8002f36 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f7fd f93e 	bl	8000548 <__aeabi_f2d>
 80032cc:	a35c      	add	r3, pc, #368	; (adr r3, 8003440 <batterygauge+0x2e8>)
 80032ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d2:	f7fd fc21 	bl	8000b18 <__aeabi_dcmpgt>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d049      	beq.n	8003370 <batterygauge+0x218>
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f7fd f933 	bl	8000548 <__aeabi_f2d>
 80032e2:	a359      	add	r3, pc, #356	; (adr r3, 8003448 <batterygauge+0x2f0>)
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f7fd fc02 	bl	8000af0 <__aeabi_dcmple>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d03e      	beq.n	8003370 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	3302      	adds	r3, #2
 80032f8:	b2d8      	uxtb	r0, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	3302      	adds	r3, #2
 8003300:	b2d9      	uxtb	r1, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	3303      	adds	r3, #3
 8003308:	b2da      	uxtb	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	3304      	adds	r3, #4
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2401      	movs	r4, #1
 8003314:	9400      	str	r4, [sp, #0]
 8003316:	f7ff fe0e 	bl	8002f36 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	3305      	adds	r3, #5
 8003320:	b2d8      	uxtb	r0, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	3302      	adds	r3, #2
 8003328:	b2d9      	uxtb	r1, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	3306      	adds	r3, #6
 8003330:	b2da      	uxtb	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	3304      	adds	r3, #4
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2401      	movs	r4, #1
 800333c:	9400      	str	r4, [sp, #0]
 800333e:	f7ff fdfa 	bl	8002f36 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d113      	bne.n	8003370 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	3308      	adds	r3, #8
 800334e:	b2d8      	uxtb	r0, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	3302      	adds	r3, #2
 8003356:	b2d9      	uxtb	r1, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	3309      	adds	r3, #9
 800335e:	b2da      	uxtb	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	3304      	adds	r3, #4
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2401      	movs	r4, #1
 800336a:	9400      	str	r4, [sp, #0]
 800336c:	f7ff fde3 	bl	8002f36 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f7fd f8e9 	bl	8000548 <__aeabi_f2d>
 8003376:	a334      	add	r3, pc, #208	; (adr r3, 8003448 <batterygauge+0x2f0>)
 8003378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337c:	f7fd fbcc 	bl	8000b18 <__aeabi_dcmpgt>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d100      	bne.n	8003388 <batterygauge+0x230>
	}




}
 8003386:	e052      	b.n	800342e <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	3302      	adds	r3, #2
 800338e:	b2d8      	uxtb	r0, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	3302      	adds	r3, #2
 8003396:	b2d9      	uxtb	r1, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	3303      	adds	r3, #3
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	3304      	adds	r3, #4
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2401      	movs	r4, #1
 80033aa:	9400      	str	r4, [sp, #0]
 80033ac:	f7ff fdc3 	bl	8002f36 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	3305      	adds	r3, #5
 80033b6:	b2d8      	uxtb	r0, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3302      	adds	r3, #2
 80033be:	b2d9      	uxtb	r1, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	3306      	adds	r3, #6
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	3304      	adds	r3, #4
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2401      	movs	r4, #1
 80033d2:	9400      	str	r4, [sp, #0]
 80033d4:	f7ff fdaf 	bl	8002f36 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	3308      	adds	r3, #8
 80033de:	b2d8      	uxtb	r0, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	3302      	adds	r3, #2
 80033e6:	b2d9      	uxtb	r1, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	3309      	adds	r3, #9
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	3304      	adds	r3, #4
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2401      	movs	r4, #1
 80033fa:	9400      	str	r4, [sp, #0]
 80033fc:	f7ff fd9b 	bl	8002f36 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d113      	bne.n	800342e <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	330b      	adds	r3, #11
 800340c:	b2d8      	uxtb	r0, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	3302      	adds	r3, #2
 8003414:	b2d9      	uxtb	r1, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	330c      	adds	r3, #12
 800341c:	b2da      	uxtb	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	3304      	adds	r3, #4
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2401      	movs	r4, #1
 8003428:	9400      	str	r4, [sp, #0]
 800342a:	f7ff fd84 	bl	8002f36 <ssd1306_DrawRectangle>
}
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	bd90      	pop	{r4, r7, pc}
 8003436:	bf00      	nop
 8003438:	9999999a 	.word	0x9999999a
 800343c:	400d9999 	.word	0x400d9999
 8003440:	33333333 	.word	0x33333333
 8003444:	400f3333 	.word	0x400f3333
 8003448:	66666666 	.word	0x66666666
 800344c:	40106666 	.word	0x40106666

08003450 <percentage>:

void percentage(float percent){
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af02      	add	r7, sp, #8
 8003456:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 40, floor(0.64*percent+32), 56, White);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fd f874 	bl	8000548 <__aeabi_f2d>
 8003460:	a329      	add	r3, pc, #164	; (adr r3, 8003508 <percentage+0xb8>)
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	f7fd f8c7 	bl	80005f8 <__aeabi_dmul>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <percentage+0xa8>)
 8003478:	f7fc ff08 	bl	800028c <__adddf3>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	ec43 2b17 	vmov	d7, r2, r3
 8003484:	eeb0 0a47 	vmov.f32	s0, s14
 8003488:	eef0 0a67 	vmov.f32	s1, s15
 800348c:	f016 f868 	bl	8019560 <floor>
 8003490:	ec53 2b10 	vmov	r2, r3, d0
 8003494:	4610      	mov	r0, r2
 8003496:	4619      	mov	r1, r3
 8003498:	f7fd fb86 	bl	8000ba8 <__aeabi_d2uiz>
 800349c:	4603      	mov	r3, r0
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	2301      	movs	r3, #1
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2338      	movs	r3, #56	; 0x38
 80034a6:	2128      	movs	r1, #40	; 0x28
 80034a8:	2020      	movs	r0, #32
 80034aa:	f7ff fd7b 	bl	8002fa4 <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 40, 95, 56, White);
 80034ae:	2301      	movs	r3, #1
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	2338      	movs	r3, #56	; 0x38
 80034b4:	225f      	movs	r2, #95	; 0x5f
 80034b6:	2128      	movs	r1, #40	; 0x28
 80034b8:	2020      	movs	r0, #32
 80034ba:	f7ff fd3c 	bl	8002f36 <ssd1306_DrawRectangle>
	snprintf((uint8_t *)str,20,"%0.2f %%",(float) percent);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fd f842 	bl	8000548 <__aeabi_f2d>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	e9cd 2300 	strd	r2, r3, [sp]
 80034cc:	4a0b      	ldr	r2, [pc, #44]	; (80034fc <percentage+0xac>)
 80034ce:	2114      	movs	r1, #20
 80034d0:	480b      	ldr	r0, [pc, #44]	; (8003500 <percentage+0xb0>)
 80034d2:	f013 f8fb 	bl	80166cc <sniprintf>
	ssd1306_SetCursor(45,44);
 80034d6:	212c      	movs	r1, #44	; 0x2c
 80034d8:	202d      	movs	r0, #45	; 0x2d
 80034da:	f7ff fc21 	bl	8002d20 <ssd1306_SetCursor>
	ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 80034de:	4a09      	ldr	r2, [pc, #36]	; (8003504 <percentage+0xb4>)
 80034e0:	2301      	movs	r3, #1
 80034e2:	ca06      	ldmia	r2, {r1, r2}
 80034e4:	4806      	ldr	r0, [pc, #24]	; (8003500 <percentage+0xb0>)
 80034e6:	f7ff fbf5 	bl	8002cd4 <ssd1306_WriteString>


}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	f3af 8000 	nop.w
 80034f8:	40400000 	.word	0x40400000
 80034fc:	0801ae88 	.word	0x0801ae88
 8003500:	20000744 	.word	0x20000744
 8003504:	2000000c 	.word	0x2000000c
 8003508:	47ae147b 	.word	0x47ae147b
 800350c:	3fe47ae1 	.word	0x3fe47ae1

08003510 <statemachine>:





void statemachine(void){
 8003510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003512:	ed2d 8b02 	vpush	{d8}
 8003516:	b09d      	sub	sp, #116	; 0x74
 8003518:	af04      	add	r7, sp, #16
	switch(state){
 800351a:	4b9f      	ldr	r3, [pc, #636]	; (8003798 <statemachine+0x288>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b07      	cmp	r3, #7
 8003520:	f202 8092 	bhi.w	8005648 <statemachine+0x2138>
 8003524:	a201      	add	r2, pc, #4	; (adr r2, 800352c <statemachine+0x1c>)
 8003526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352a:	bf00      	nop
 800352c:	0800354d 	.word	0x0800354d
 8003530:	080039fd 	.word	0x080039fd
 8003534:	0800400b 	.word	0x0800400b
 8003538:	08004675 	.word	0x08004675
 800353c:	08004855 	.word	0x08004855
 8003540:	08004a83 	.word	0x08004a83
 8003544:	0800501f 	.word	0x0800501f
 8003548:	08005543 	.word	0x08005543
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 800354c:	2000      	movs	r0, #0
 800354e:	f7ff faa5 	bl	8002a9c <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 8003552:	2120      	movs	r1, #32
 8003554:	2020      	movs	r0, #32
 8003556:	f7ff fbe3 	bl	8002d20 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 800355a:	4990      	ldr	r1, [pc, #576]	; (800379c <statemachine+0x28c>)
 800355c:	4890      	ldr	r0, [pc, #576]	; (80037a0 <statemachine+0x290>)
 800355e:	f7fe fdb5 	bl	80020cc <nmea_parse>
				 if(myData.speed>=vitmax){
 8003562:	4b8f      	ldr	r3, [pc, #572]	; (80037a0 <statemachine+0x290>)
 8003564:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003568:	4b8e      	ldr	r3, [pc, #568]	; (80037a4 <statemachine+0x294>)
 800356a:	edd3 7a00 	vldr	s15, [r3]
 800356e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003576:	db03      	blt.n	8003580 <statemachine+0x70>
									 vitmax=myData.speed;
 8003578:	4b89      	ldr	r3, [pc, #548]	; (80037a0 <statemachine+0x290>)
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	4a89      	ldr	r2, [pc, #548]	; (80037a4 <statemachine+0x294>)
 800357e:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	65fb      	str	r3, [r7, #92]	; 0x5c
								 float sec=0;
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	65bb      	str	r3, [r7, #88]	; 0x58
								 if (myData.speed!=0){
 800358c:	4b84      	ldr	r3, [pc, #528]	; (80037a0 <statemachine+0x290>)
 800358e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003592:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359a:	d032      	beq.n	8003602 <statemachine+0xf2>
									 pace=1000/(60*myData.speed);
 800359c:	4b80      	ldr	r3, [pc, #512]	; (80037a0 <statemachine+0x290>)
 800359e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80035a2:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80037a8 <statemachine+0x298>
 80035a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035aa:	eddf 6a80 	vldr	s13, [pc, #512]	; 80037ac <statemachine+0x29c>
 80035ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035b2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
									 sec=(pace-floor(pace))*60;
 80035b6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80035b8:	f7fc ffc6 	bl	8000548 <__aeabi_f2d>
 80035bc:	4604      	mov	r4, r0
 80035be:	460d      	mov	r5, r1
 80035c0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80035c2:	f7fc ffc1 	bl	8000548 <__aeabi_f2d>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	ec43 2b10 	vmov	d0, r2, r3
 80035ce:	f015 ffc7 	bl	8019560 <floor>
 80035d2:	ec53 2b10 	vmov	r2, r3, d0
 80035d6:	4620      	mov	r0, r4
 80035d8:	4629      	mov	r1, r5
 80035da:	f7fc fe55 	bl	8000288 <__aeabi_dsub>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4610      	mov	r0, r2
 80035e4:	4619      	mov	r1, r3
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	4b71      	ldr	r3, [pc, #452]	; (80037b0 <statemachine+0x2a0>)
 80035ec:	f7fd f804 	bl	80005f8 <__aeabi_dmul>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4610      	mov	r0, r2
 80035f6:	4619      	mov	r1, r3
 80035f8:	f7fd faf6 	bl	8000be8 <__aeabi_d2f>
 80035fc:	4603      	mov	r3, r0
 80035fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003600:	e001      	b.n	8003606 <statemachine+0xf6>
								 }
								 else {
									 pace=9999;
 8003602:	4b6c      	ldr	r3, [pc, #432]	; (80037b4 <statemachine+0x2a4>)
 8003604:	65fb      	str	r3, [r7, #92]	; 0x5c
								 }


				  switch(spdstate){
 8003606:	4b6c      	ldr	r3, [pc, #432]	; (80037b8 <statemachine+0x2a8>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b02      	cmp	r3, #2
 800360c:	f000 8170 	beq.w	80038f0 <statemachine+0x3e0>
 8003610:	2b02      	cmp	r3, #2
 8003612:	f300 81e0 	bgt.w	80039d6 <statemachine+0x4c6>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <statemachine+0x112>
 800361a:	2b01      	cmp	r3, #1
 800361c:	f000 80e0 	beq.w	80037e0 <statemachine+0x2d0>
 8003620:	e1d9      	b.n	80039d6 <statemachine+0x4c6>


				 case STATE_SUMMARY:
					 if(myData.fix == 1){
 8003622:	4b5f      	ldr	r3, [pc, #380]	; (80037a0 <statemachine+0x290>)
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	2b01      	cmp	r3, #1
 8003628:	d16f      	bne.n	800370a <statemachine+0x1fa>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 800362a:	2014      	movs	r0, #20
 800362c:	f011 f954 	bl	80148d8 <malloc>
 8003630:	4603      	mov	r3, r0
 8003632:	603b      	str	r3, [r7, #0]
					 				 						snprintf(str,15, "MaxV=%.1f",vitmax*3.6);
 8003634:	4b5b      	ldr	r3, [pc, #364]	; (80037a4 <statemachine+0x294>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f7fc ff85 	bl	8000548 <__aeabi_f2d>
 800363e:	a354      	add	r3, pc, #336	; (adr r3, 8003790 <statemachine+0x280>)
 8003640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003644:	f7fc ffd8 	bl	80005f8 <__aeabi_dmul>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	e9cd 2300 	strd	r2, r3, [sp]
 8003650:	4a5a      	ldr	r2, [pc, #360]	; (80037bc <statemachine+0x2ac>)
 8003652:	210f      	movs	r1, #15
 8003654:	6838      	ldr	r0, [r7, #0]
 8003656:	f013 f839 	bl	80166cc <sniprintf>
					 				 						ssd1306_SetCursor(32, 32);
 800365a:	2120      	movs	r1, #32
 800365c:	2020      	movs	r0, #32
 800365e:	f7ff fb5f 	bl	8002d20 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8003662:	4a57      	ldr	r2, [pc, #348]	; (80037c0 <statemachine+0x2b0>)
 8003664:	2301      	movs	r3, #1
 8003666:	ca06      	ldmia	r2, {r1, r2}
 8003668:	6838      	ldr	r0, [r7, #0]
 800366a:	f7ff fb33 	bl	8002cd4 <ssd1306_WriteString>
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 800366e:	4b4c      	ldr	r3, [pc, #304]	; (80037a0 <statemachine+0x290>)
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	4618      	mov	r0, r3
 8003674:	f7fc ff68 	bl	8000548 <__aeabi_f2d>
 8003678:	a345      	add	r3, pc, #276	; (adr r3, 8003790 <statemachine+0x280>)
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	f7fc ffbb 	bl	80005f8 <__aeabi_dmul>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	e9cd 2300 	strd	r2, r3, [sp]
 800368a:	4a4e      	ldr	r2, [pc, #312]	; (80037c4 <statemachine+0x2b4>)
 800368c:	210f      	movs	r1, #15
 800368e:	6838      	ldr	r0, [r7, #0]
 8003690:	f013 f81c 	bl	80166cc <sniprintf>
					 				 						ssd1306_SetCursor(32, 42);
 8003694:	212a      	movs	r1, #42	; 0x2a
 8003696:	2020      	movs	r0, #32
 8003698:	f7ff fb42 	bl	8002d20 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 800369c:	4a48      	ldr	r2, [pc, #288]	; (80037c0 <statemachine+0x2b0>)
 800369e:	2301      	movs	r3, #1
 80036a0:	ca06      	ldmia	r2, {r1, r2}
 80036a2:	6838      	ldr	r0, [r7, #0]
 80036a4:	f7ff fb16 	bl	8002cd4 <ssd1306_WriteString>
					 				 						snprintf(str,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));
 80036a8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80036aa:	f7fc ff4d 	bl	8000548 <__aeabi_f2d>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	ec43 2b10 	vmov	d0, r2, r3
 80036b6:	f015 ff53 	bl	8019560 <floor>
 80036ba:	eeb0 8a40 	vmov.f32	s16, s0
 80036be:	eef0 8a60 	vmov.f32	s17, s1
 80036c2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80036c4:	f7fc ff40 	bl	8000548 <__aeabi_f2d>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	ec43 2b10 	vmov	d0, r2, r3
 80036d0:	f015 ff46 	bl	8019560 <floor>
 80036d4:	eeb0 7a40 	vmov.f32	s14, s0
 80036d8:	eef0 7a60 	vmov.f32	s15, s1
 80036dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80036e0:	ed8d 8b00 	vstr	d8, [sp]
 80036e4:	4a38      	ldr	r2, [pc, #224]	; (80037c8 <statemachine+0x2b8>)
 80036e6:	210f      	movs	r1, #15
 80036e8:	6838      	ldr	r0, [r7, #0]
 80036ea:	f012 ffef 	bl	80166cc <sniprintf>
					 				 						ssd1306_SetCursor(32, 52);
 80036ee:	2134      	movs	r1, #52	; 0x34
 80036f0:	2020      	movs	r0, #32
 80036f2:	f7ff fb15 	bl	8002d20 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 80036f6:	4a32      	ldr	r2, [pc, #200]	; (80037c0 <statemachine+0x2b0>)
 80036f8:	2301      	movs	r3, #1
 80036fa:	ca06      	ldmia	r2, {r1, r2}
 80036fc:	6838      	ldr	r0, [r7, #0]
 80036fe:	f7ff fae9 	bl	8002cd4 <ssd1306_WriteString>
					 				 						free(str);
 8003702:	6838      	ldr	r0, [r7, #0]
 8003704:	f011 f8f0 	bl	80148e8 <free>
 8003708:	e025      	b.n	8003756 <statemachine+0x246>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);
 800370a:	2014      	movs	r0, #20
 800370c:	f011 f8e4 	bl	80148d8 <malloc>
 8003710:	4603      	mov	r3, r0
 8003712:	607b      	str	r3, [r7, #4]
					 				 						ssd1306_SetCursor(32, 32);
 8003714:	2120      	movs	r1, #32
 8003716:	2020      	movs	r0, #32
 8003718:	f7ff fb02 	bl	8002d20 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 1", Font_6x8, White);
 800371c:	4a28      	ldr	r2, [pc, #160]	; (80037c0 <statemachine+0x2b0>)
 800371e:	2301      	movs	r3, #1
 8003720:	ca06      	ldmia	r2, {r1, r2}
 8003722:	482a      	ldr	r0, [pc, #168]	; (80037cc <statemachine+0x2bc>)
 8003724:	f7ff fad6 	bl	8002cd4 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8003728:	212c      	movs	r1, #44	; 0x2c
 800372a:	2020      	movs	r0, #32
 800372c:	f7ff faf8 	bl	8002d20 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003730:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <statemachine+0x2b0>)
 8003732:	2301      	movs	r3, #1
 8003734:	ca06      	ldmia	r2, {r1, r2}
 8003736:	4826      	ldr	r0, [pc, #152]	; (80037d0 <statemachine+0x2c0>)
 8003738:	f7ff facc 	bl	8002cd4 <ssd1306_WriteString>
					 				 						batterygauge(vbat,35, 54,1);
 800373c:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <statemachine+0x2c4>)
 800373e:	edd3 7a00 	vldr	s15, [r3]
 8003742:	2201      	movs	r2, #1
 8003744:	2136      	movs	r1, #54	; 0x36
 8003746:	2023      	movs	r0, #35	; 0x23
 8003748:	eeb0 0a67 	vmov.f32	s0, s15
 800374c:	f7ff fd04 	bl	8003158 <batterygauge>
					 				 						free(str);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f011 f8c9 	bl	80148e8 <free>
					 				 					}
					 if(BTN_B>=1){
 8003756:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <statemachine+0x2c8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	dd08      	ble.n	8003770 <statemachine+0x260>
					 					 				 					spdstate++;
 800375e:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <statemachine+0x2a8>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	3301      	adds	r3, #1
 8003764:	b2da      	uxtb	r2, r3
 8003766:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <statemachine+0x2a8>)
 8003768:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 800376a:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <statemachine+0x2c8>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
					 					 				  	}
					 if(BTN_B_LONG>=1){
 8003770:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <statemachine+0x2cc>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	f340 8129 	ble.w	80039cc <statemachine+0x4bc>
					 					  vitmax=0;
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <statemachine+0x294>)
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
					 					BTN_B_LONG=0;
 8003782:	4b16      	ldr	r3, [pc, #88]	; (80037dc <statemachine+0x2cc>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
					 				}



					 break;
 8003788:	e120      	b.n	80039cc <statemachine+0x4bc>
 800378a:	bf00      	nop
 800378c:	f3af 8000 	nop.w
 8003790:	cccccccd 	.word	0xcccccccd
 8003794:	400ccccc 	.word	0x400ccccc
 8003798:	20000478 	.word	0x20000478
 800379c:	200004c4 	.word	0x200004c4
 80037a0:	200006c8 	.word	0x200006c8
 80037a4:	200009f0 	.word	0x200009f0
 80037a8:	42700000 	.word	0x42700000
 80037ac:	447a0000 	.word	0x447a0000
 80037b0:	404e0000 	.word	0x404e0000
 80037b4:	461c3c00 	.word	0x461c3c00
 80037b8:	2000047a 	.word	0x2000047a
 80037bc:	0801ae94 	.word	0x0801ae94
 80037c0:	2000000c 	.word	0x2000000c
 80037c4:	0801aea0 	.word	0x0801aea0
 80037c8:	0801aea8 	.word	0x0801aea8
 80037cc:	0801aebc 	.word	0x0801aebc
 80037d0:	0801aec4 	.word	0x0801aec4
 80037d4:	20000740 	.word	0x20000740
 80037d8:	2000070c 	.word	0x2000070c
 80037dc:	20000a5c 	.word	0x20000a5c
				 case STATE_COMPTEUR:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 80037e0:	4b97      	ldr	r3, [pc, #604]	; (8003a40 <statemachine+0x530>)
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d159      	bne.n	800389c <statemachine+0x38c>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 80037e8:	2014      	movs	r0, #20
 80037ea:	f011 f875 	bl	80148d8 <malloc>
 80037ee:	4603      	mov	r3, r0
 80037f0:	60bb      	str	r3, [r7, #8]
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 80037f2:	4b93      	ldr	r3, [pc, #588]	; (8003a40 <statemachine+0x530>)
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fc fea6 	bl	8000548 <__aeabi_f2d>
 80037fc:	a38c      	add	r3, pc, #560	; (adr r3, 8003a30 <statemachine+0x520>)
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f7fc fef9 	bl	80005f8 <__aeabi_dmul>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	e9cd 2300 	strd	r2, r3, [sp]
 800380e:	4a8d      	ldr	r2, [pc, #564]	; (8003a44 <statemachine+0x534>)
 8003810:	210f      	movs	r1, #15
 8003812:	68b8      	ldr	r0, [r7, #8]
 8003814:	f012 ff5a 	bl	80166cc <sniprintf>
					 				 						ssd1306_SetCursor(32, 54);
 8003818:	2136      	movs	r1, #54	; 0x36
 800381a:	2020      	movs	r0, #32
 800381c:	f7ff fa80 	bl	8002d20 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8003820:	4a89      	ldr	r2, [pc, #548]	; (8003a48 <statemachine+0x538>)
 8003822:	2301      	movs	r3, #1
 8003824:	ca06      	ldmia	r2, {r1, r2}
 8003826:	68b8      	ldr	r0, [r7, #8]
 8003828:	f7ff fa54 	bl	8002cd4 <ssd1306_WriteString>
					 				 						ssd1306_DrawRectangle(32, 38, 95, 53, White);
 800382c:	2301      	movs	r3, #1
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	2335      	movs	r3, #53	; 0x35
 8003832:	225f      	movs	r2, #95	; 0x5f
 8003834:	2126      	movs	r1, #38	; 0x26
 8003836:	2020      	movs	r0, #32
 8003838:	f7ff fb7d 	bl	8002f36 <ssd1306_DrawRectangle>
					 				 						ssd1306_FillRectangle(32, 38,(int) floor(32+(myData.speed*0.63)), 53, White);
 800383c:	4b80      	ldr	r3, [pc, #512]	; (8003a40 <statemachine+0x530>)
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	4618      	mov	r0, r3
 8003842:	f7fc fe81 	bl	8000548 <__aeabi_f2d>
 8003846:	a37c      	add	r3, pc, #496	; (adr r3, 8003a38 <statemachine+0x528>)
 8003848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384c:	f7fc fed4 	bl	80005f8 <__aeabi_dmul>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4610      	mov	r0, r2
 8003856:	4619      	mov	r1, r3
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	4b7b      	ldr	r3, [pc, #492]	; (8003a4c <statemachine+0x53c>)
 800385e:	f7fc fd15 	bl	800028c <__adddf3>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	ec43 2b17 	vmov	d7, r2, r3
 800386a:	eeb0 0a47 	vmov.f32	s0, s14
 800386e:	eef0 0a67 	vmov.f32	s1, s15
 8003872:	f015 fe75 	bl	8019560 <floor>
 8003876:	ec53 2b10 	vmov	r2, r3, d0
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	f7fd f96b 	bl	8000b58 <__aeabi_d2iz>
 8003882:	4603      	mov	r3, r0
 8003884:	b2da      	uxtb	r2, r3
 8003886:	2301      	movs	r3, #1
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	2335      	movs	r3, #53	; 0x35
 800388c:	2126      	movs	r1, #38	; 0x26
 800388e:	2020      	movs	r0, #32
 8003890:	f7ff fb88 	bl	8002fa4 <ssd1306_FillRectangle>

					 				 						free(str);
 8003894:	68b8      	ldr	r0, [r7, #8]
 8003896:	f011 f827 	bl	80148e8 <free>
 800389a:	e01b      	b.n	80038d4 <statemachine+0x3c4>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 800389c:	2014      	movs	r0, #20
 800389e:	f011 f81b 	bl	80148d8 <malloc>
 80038a2:	4603      	mov	r3, r0
 80038a4:	60fb      	str	r3, [r7, #12]
					 				 						ssd1306_SetCursor(32, 32);
 80038a6:	2120      	movs	r1, #32
 80038a8:	2020      	movs	r0, #32
 80038aa:	f7ff fa39 	bl	8002d20 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 2", Font_6x8, White);
 80038ae:	4a66      	ldr	r2, [pc, #408]	; (8003a48 <statemachine+0x538>)
 80038b0:	2301      	movs	r3, #1
 80038b2:	ca06      	ldmia	r2, {r1, r2}
 80038b4:	4866      	ldr	r0, [pc, #408]	; (8003a50 <statemachine+0x540>)
 80038b6:	f7ff fa0d 	bl	8002cd4 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 80038ba:	212c      	movs	r1, #44	; 0x2c
 80038bc:	2020      	movs	r0, #32
 80038be:	f7ff fa2f 	bl	8002d20 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80038c2:	4a61      	ldr	r2, [pc, #388]	; (8003a48 <statemachine+0x538>)
 80038c4:	2301      	movs	r3, #1
 80038c6:	ca06      	ldmia	r2, {r1, r2}
 80038c8:	4862      	ldr	r0, [pc, #392]	; (8003a54 <statemachine+0x544>)
 80038ca:	f7ff fa03 	bl	8002cd4 <ssd1306_WriteString>
					 				 						free(str);
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f011 f80a 	bl	80148e8 <free>
					 				 					}
					 if(BTN_B>=1){
 80038d4:	4b60      	ldr	r3, [pc, #384]	; (8003a58 <statemachine+0x548>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	dd79      	ble.n	80039d0 <statemachine+0x4c0>
					 				 					spdstate++;
 80038dc:	4b5f      	ldr	r3, [pc, #380]	; (8003a5c <statemachine+0x54c>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	3301      	adds	r3, #1
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	4b5d      	ldr	r3, [pc, #372]	; (8003a5c <statemachine+0x54c>)
 80038e6:	701a      	strb	r2, [r3, #0]
					 				 					BTN_B=0;
 80038e8:	4b5b      	ldr	r3, [pc, #364]	; (8003a58 <statemachine+0x548>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 80038ee:	e06f      	b.n	80039d0 <statemachine+0x4c0>
				 case STATE_GRAPH:
					 if(myData.fix == 1){
 80038f0:	4b53      	ldr	r3, [pc, #332]	; (8003a40 <statemachine+0x530>)
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d12f      	bne.n	8003958 <statemachine+0x448>
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 80038f8:	2014      	movs	r0, #20
 80038fa:	f010 ffed 	bl	80148d8 <malloc>
 80038fe:	4603      	mov	r3, r0
 8003900:	613b      	str	r3, [r7, #16]

					 				 						ssd1306_SetCursor(32, 32);
 8003902:	2120      	movs	r1, #32
 8003904:	2020      	movs	r0, #32
 8003906:	f7ff fa0b 	bl	8002d20 <ssd1306_SetCursor>
					 				 						snprintf(str,15, "%0.1f",(myData.speed)*3.6);
 800390a:	4b4d      	ldr	r3, [pc, #308]	; (8003a40 <statemachine+0x530>)
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	4618      	mov	r0, r3
 8003910:	f7fc fe1a 	bl	8000548 <__aeabi_f2d>
 8003914:	a346      	add	r3, pc, #280	; (adr r3, 8003a30 <statemachine+0x520>)
 8003916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391a:	f7fc fe6d 	bl	80005f8 <__aeabi_dmul>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	e9cd 2300 	strd	r2, r3, [sp]
 8003926:	4a4e      	ldr	r2, [pc, #312]	; (8003a60 <statemachine+0x550>)
 8003928:	210f      	movs	r1, #15
 800392a:	6938      	ldr	r0, [r7, #16]
 800392c:	f012 fece 	bl	80166cc <sniprintf>
					 				 						ssd1306_WriteString(str, Font_11x18, White);
 8003930:	4a4c      	ldr	r2, [pc, #304]	; (8003a64 <statemachine+0x554>)
 8003932:	2301      	movs	r3, #1
 8003934:	ca06      	ldmia	r2, {r1, r2}
 8003936:	6938      	ldr	r0, [r7, #16]
 8003938:	f7ff f9cc 	bl	8002cd4 <ssd1306_WriteString>
					 				 						batterygauge(vbat,35, 54,1);
 800393c:	4b4a      	ldr	r3, [pc, #296]	; (8003a68 <statemachine+0x558>)
 800393e:	edd3 7a00 	vldr	s15, [r3]
 8003942:	2201      	movs	r2, #1
 8003944:	2136      	movs	r1, #54	; 0x36
 8003946:	2023      	movs	r0, #35	; 0x23
 8003948:	eeb0 0a67 	vmov.f32	s0, s15
 800394c:	f7ff fc04 	bl	8003158 <batterygauge>

					 				 						free(str);
 8003950:	6938      	ldr	r0, [r7, #16]
 8003952:	f010 ffc9 	bl	80148e8 <free>
 8003956:	e025      	b.n	80039a4 <statemachine+0x494>
					 }
					 else{
						 char *str = (char*)malloc(sizeof(char)*20);
 8003958:	2014      	movs	r0, #20
 800395a:	f010 ffbd 	bl	80148d8 <malloc>
 800395e:	4603      	mov	r3, r0
 8003960:	617b      	str	r3, [r7, #20]
						 ssd1306_SetCursor(32, 32);
 8003962:	2120      	movs	r1, #32
 8003964:	2020      	movs	r0, #32
 8003966:	f7ff f9db 	bl	8002d20 <ssd1306_SetCursor>
						 ssd1306_WriteString("Speed 3", Font_6x8, White);
 800396a:	4a37      	ldr	r2, [pc, #220]	; (8003a48 <statemachine+0x538>)
 800396c:	2301      	movs	r3, #1
 800396e:	ca06      	ldmia	r2, {r1, r2}
 8003970:	483e      	ldr	r0, [pc, #248]	; (8003a6c <statemachine+0x55c>)
 8003972:	f7ff f9af 	bl	8002cd4 <ssd1306_WriteString>
						 ssd1306_SetCursor(32, 44);
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	2020      	movs	r0, #32
 800397a:	f7ff f9d1 	bl	8002d20 <ssd1306_SetCursor>
						 ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800397e:	4a32      	ldr	r2, [pc, #200]	; (8003a48 <statemachine+0x538>)
 8003980:	2301      	movs	r3, #1
 8003982:	ca06      	ldmia	r2, {r1, r2}
 8003984:	4833      	ldr	r0, [pc, #204]	; (8003a54 <statemachine+0x544>)
 8003986:	f7ff f9a5 	bl	8002cd4 <ssd1306_WriteString>
						 batterygauge(vbat,35, 54,1);
 800398a:	4b37      	ldr	r3, [pc, #220]	; (8003a68 <statemachine+0x558>)
 800398c:	edd3 7a00 	vldr	s15, [r3]
 8003990:	2201      	movs	r2, #1
 8003992:	2136      	movs	r1, #54	; 0x36
 8003994:	2023      	movs	r0, #35	; 0x23
 8003996:	eeb0 0a67 	vmov.f32	s0, s15
 800399a:	f7ff fbdd 	bl	8003158 <batterygauge>
						 free(str);
 800399e:	6978      	ldr	r0, [r7, #20]
 80039a0:	f010 ffa2 	bl	80148e8 <free>
					 }

					 if(BTN_B>=1){
 80039a4:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <statemachine+0x548>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	dd13      	ble.n	80039d4 <statemachine+0x4c4>
					 					 				 					spdstate--;
 80039ac:	4b2b      	ldr	r3, [pc, #172]	; (8003a5c <statemachine+0x54c>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <statemachine+0x54c>)
 80039b6:	701a      	strb	r2, [r3, #0]
					 					 				 					spdstate--;
 80039b8:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <statemachine+0x54c>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	3b01      	subs	r3, #1
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <statemachine+0x54c>)
 80039c2:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 80039c4:	4b24      	ldr	r3, [pc, #144]	; (8003a58 <statemachine+0x548>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 80039ca:	e003      	b.n	80039d4 <statemachine+0x4c4>
					 break;
 80039cc:	bf00      	nop
 80039ce:	e002      	b.n	80039d6 <statemachine+0x4c6>
					 break;
 80039d0:	bf00      	nop
 80039d2:	e000      	b.n	80039d6 <statemachine+0x4c6>
					 break;
 80039d4:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 80039d6:	4b26      	ldr	r3, [pc, #152]	; (8003a70 <statemachine+0x560>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f341 8624 	ble.w	8005628 <statemachine+0x2118>
				 					state++;
 80039e0:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <statemachine+0x564>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	3301      	adds	r3, #1
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <statemachine+0x564>)
 80039ea:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 80039ec:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <statemachine+0x560>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
				 					BTN_B=0;
 80039f2:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <statemachine+0x548>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
				  	}
				  break;
 80039f8:	f001 be16 	b.w	8005628 <statemachine+0x2118>


	case STATE_POS:
			  ssd1306_Fill(Black);
 80039fc:	2000      	movs	r0, #0
 80039fe:	f7ff f84d 	bl	8002a9c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8003a02:	491d      	ldr	r1, [pc, #116]	; (8003a78 <statemachine+0x568>)
 8003a04:	480e      	ldr	r0, [pc, #56]	; (8003a40 <statemachine+0x530>)
 8003a06:	f7fe fb61 	bl	80020cc <nmea_parse>
			  switch(posstate){
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <statemachine+0x56c>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	f200 82d5 	bhi.w	8003fbe <statemachine+0xaae>
 8003a14:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <statemachine+0x50c>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a81 	.word	0x08003a81
 8003a20:	08003b99 	.word	0x08003b99
 8003a24:	08003ce1 	.word	0x08003ce1
 8003a28:	08003df1 	.word	0x08003df1
 8003a2c:	f3af 8000 	nop.w
 8003a30:	cccccccd 	.word	0xcccccccd
 8003a34:	400ccccc 	.word	0x400ccccc
 8003a38:	c28f5c29 	.word	0xc28f5c29
 8003a3c:	3fe428f5 	.word	0x3fe428f5
 8003a40:	200006c8 	.word	0x200006c8
 8003a44:	0801aea0 	.word	0x0801aea0
 8003a48:	2000000c 	.word	0x2000000c
 8003a4c:	40400000 	.word	0x40400000
 8003a50:	0801aed0 	.word	0x0801aed0
 8003a54:	0801aec4 	.word	0x0801aec4
 8003a58:	2000070c 	.word	0x2000070c
 8003a5c:	2000047a 	.word	0x2000047a
 8003a60:	0801aed8 	.word	0x0801aed8
 8003a64:	2000001c 	.word	0x2000001c
 8003a68:	20000740 	.word	0x20000740
 8003a6c:	0801aee0 	.word	0x0801aee0
 8003a70:	20000708 	.word	0x20000708
 8003a74:	20000478 	.word	0x20000478
 8003a78:	200004c4 	.word	0x200004c4
 8003a7c:	2000047b 	.word	0x2000047b

			  case STATE_SUMMARY1:
				  if(myData.fix == 1){
 8003a80:	4b89      	ldr	r3, [pc, #548]	; (8003ca8 <statemachine+0x798>)
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d14e      	bne.n	8003b26 <statemachine+0x616>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003a88:	2014      	movs	r0, #20
 8003a8a:	f010 ff25 	bl	80148d8 <malloc>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	61bb      	str	r3, [r7, #24]
				  						ssd1306_SetCursor(32, 32);
 8003a92:	2120      	movs	r1, #32
 8003a94:	2020      	movs	r0, #32
 8003a96:	f7ff f943 	bl	8002d20 <ssd1306_SetCursor>
				  						snprintf(str,15, "Latitude:");
 8003a9a:	4a84      	ldr	r2, [pc, #528]	; (8003cac <statemachine+0x79c>)
 8003a9c:	210f      	movs	r1, #15
 8003a9e:	69b8      	ldr	r0, [r7, #24]
 8003aa0:	f012 fe14 	bl	80166cc <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003aa4:	4a82      	ldr	r2, [pc, #520]	; (8003cb0 <statemachine+0x7a0>)
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	ca06      	ldmia	r2, {r1, r2}
 8003aaa:	69b8      	ldr	r0, [r7, #24]
 8003aac:	f7ff f912 	bl	8002cd4 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003ab0:	4b7d      	ldr	r3, [pc, #500]	; (8003ca8 <statemachine+0x798>)
 8003ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab6:	e9cd 2300 	strd	r2, r3, [sp]
 8003aba:	4a7e      	ldr	r2, [pc, #504]	; (8003cb4 <statemachine+0x7a4>)
 8003abc:	210f      	movs	r1, #15
 8003abe:	69b8      	ldr	r0, [r7, #24]
 8003ac0:	f012 fe04 	bl	80166cc <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003ac4:	2128      	movs	r1, #40	; 0x28
 8003ac6:	2020      	movs	r0, #32
 8003ac8:	f7ff f92a 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003acc:	4a78      	ldr	r2, [pc, #480]	; (8003cb0 <statemachine+0x7a0>)
 8003ace:	2301      	movs	r3, #1
 8003ad0:	ca06      	ldmia	r2, {r1, r2}
 8003ad2:	69b8      	ldr	r0, [r7, #24]
 8003ad4:	f7ff f8fe 	bl	8002cd4 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8003ad8:	4a77      	ldr	r2, [pc, #476]	; (8003cb8 <statemachine+0x7a8>)
 8003ada:	210f      	movs	r1, #15
 8003adc:	69b8      	ldr	r0, [r7, #24]
 8003ade:	f012 fdf5 	bl	80166cc <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003ae2:	2130      	movs	r1, #48	; 0x30
 8003ae4:	2020      	movs	r0, #32
 8003ae6:	f7ff f91b 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003aea:	4a71      	ldr	r2, [pc, #452]	; (8003cb0 <statemachine+0x7a0>)
 8003aec:	2301      	movs	r3, #1
 8003aee:	ca06      	ldmia	r2, {r1, r2}
 8003af0:	69b8      	ldr	r0, [r7, #24]
 8003af2:	f7ff f8ef 	bl	8002cd4 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8003af6:	4b6c      	ldr	r3, [pc, #432]	; (8003ca8 <statemachine+0x798>)
 8003af8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003afc:	e9cd 2300 	strd	r2, r3, [sp]
 8003b00:	4a6c      	ldr	r2, [pc, #432]	; (8003cb4 <statemachine+0x7a4>)
 8003b02:	210f      	movs	r1, #15
 8003b04:	69b8      	ldr	r0, [r7, #24]
 8003b06:	f012 fde1 	bl	80166cc <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003b0a:	2138      	movs	r1, #56	; 0x38
 8003b0c:	2020      	movs	r0, #32
 8003b0e:	f7ff f907 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003b12:	4a67      	ldr	r2, [pc, #412]	; (8003cb0 <statemachine+0x7a0>)
 8003b14:	2301      	movs	r3, #1
 8003b16:	ca06      	ldmia	r2, {r1, r2}
 8003b18:	69b8      	ldr	r0, [r7, #24]
 8003b1a:	f7ff f8db 	bl	8002cd4 <ssd1306_WriteString>
				  						free(str);
 8003b1e:	69b8      	ldr	r0, [r7, #24]
 8003b20:	f010 fee2 	bl	80148e8 <free>
 8003b24:	e029      	b.n	8003b7a <statemachine+0x66a>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003b26:	2014      	movs	r0, #20
 8003b28:	f010 fed6 	bl	80148d8 <malloc>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	61fb      	str	r3, [r7, #28]
				  						ssd1306_SetCursor(32, 32);
 8003b30:	2120      	movs	r1, #32
 8003b32:	2020      	movs	r0, #32
 8003b34:	f7ff f8f4 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos1", Font_6x8, White);
 8003b38:	4a5d      	ldr	r2, [pc, #372]	; (8003cb0 <statemachine+0x7a0>)
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	ca06      	ldmia	r2, {r1, r2}
 8003b3e:	485f      	ldr	r0, [pc, #380]	; (8003cbc <statemachine+0x7ac>)
 8003b40:	f7ff f8c8 	bl	8002cd4 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003b44:	212c      	movs	r1, #44	; 0x2c
 8003b46:	2020      	movs	r0, #32
 8003b48:	f7ff f8ea 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003b4c:	4a58      	ldr	r2, [pc, #352]	; (8003cb0 <statemachine+0x7a0>)
 8003b4e:	2301      	movs	r3, #1
 8003b50:	ca06      	ldmia	r2, {r1, r2}
 8003b52:	485b      	ldr	r0, [pc, #364]	; (8003cc0 <statemachine+0x7b0>)
 8003b54:	f7ff f8be 	bl	8002cd4 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 54);
 8003b58:	2136      	movs	r1, #54	; 0x36
 8003b5a:	2020      	movs	r0, #32
 8003b5c:	f7ff f8e0 	bl	8002d20 <ssd1306_SetCursor>
				  						batterygauge(vbat,35, 54,1);
 8003b60:	4b58      	ldr	r3, [pc, #352]	; (8003cc4 <statemachine+0x7b4>)
 8003b62:	edd3 7a00 	vldr	s15, [r3]
 8003b66:	2201      	movs	r2, #1
 8003b68:	2136      	movs	r1, #54	; 0x36
 8003b6a:	2023      	movs	r0, #35	; 0x23
 8003b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b70:	f7ff faf2 	bl	8003158 <batterygauge>
				  						free(str);
 8003b74:	69f8      	ldr	r0, [r7, #28]
 8003b76:	f010 feb7 	bl	80148e8 <free>
				  					}
				  if(BTN_B>=1){
 8003b7a:	4b53      	ldr	r3, [pc, #332]	; (8003cc8 <statemachine+0x7b8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f340 81ee 	ble.w	8003f60 <statemachine+0xa50>
					  posstate++;
 8003b84:	4b51      	ldr	r3, [pc, #324]	; (8003ccc <statemachine+0x7bc>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <statemachine+0x7bc>)
 8003b8e:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8003b90:	4b4d      	ldr	r3, [pc, #308]	; (8003cc8 <statemachine+0x7b8>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]





				  break;
 8003b96:	e1e3      	b.n	8003f60 <statemachine+0xa50>
			  case STATE_LAT:
				  if(myData.fix == 1){
 8003b98:	4b43      	ldr	r3, [pc, #268]	; (8003ca8 <statemachine+0x798>)
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d14b      	bne.n	8003c38 <statemachine+0x728>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003ba0:	2014      	movs	r0, #20
 8003ba2:	f010 fe99 	bl	80148d8 <malloc>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	623b      	str	r3, [r7, #32]
				  						ssd1306_SetCursor(32, 32);
 8003baa:	2120      	movs	r1, #32
 8003bac:	2020      	movs	r0, #32
 8003bae:	f7ff f8b7 	bl	8002d20 <ssd1306_SetCursor>
				  						snprintf(str,15, "LatSide:");
 8003bb2:	4a47      	ldr	r2, [pc, #284]	; (8003cd0 <statemachine+0x7c0>)
 8003bb4:	210f      	movs	r1, #15
 8003bb6:	6a38      	ldr	r0, [r7, #32]
 8003bb8:	f012 fd88 	bl	80166cc <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003bbc:	4a3c      	ldr	r2, [pc, #240]	; (8003cb0 <statemachine+0x7a0>)
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	ca06      	ldmia	r2, {r1, r2}
 8003bc2:	6a38      	ldr	r0, [r7, #32]
 8003bc4:	f7ff f886 	bl	8002cd4 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003bc8:	4b37      	ldr	r3, [pc, #220]	; (8003ca8 <statemachine+0x798>)
 8003bca:	7a1b      	ldrb	r3, [r3, #8]
 8003bcc:	4a41      	ldr	r2, [pc, #260]	; (8003cd4 <statemachine+0x7c4>)
 8003bce:	210f      	movs	r1, #15
 8003bd0:	6a38      	ldr	r0, [r7, #32]
 8003bd2:	f012 fd7b 	bl	80166cc <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003bd6:	2128      	movs	r1, #40	; 0x28
 8003bd8:	2020      	movs	r0, #32
 8003bda:	f7ff f8a1 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003bde:	4a34      	ldr	r2, [pc, #208]	; (8003cb0 <statemachine+0x7a0>)
 8003be0:	2301      	movs	r3, #1
 8003be2:	ca06      	ldmia	r2, {r1, r2}
 8003be4:	6a38      	ldr	r0, [r7, #32]
 8003be6:	f7ff f875 	bl	8002cd4 <ssd1306_WriteString>
				  						snprintf(str,15, "Latitude:");
 8003bea:	4a30      	ldr	r2, [pc, #192]	; (8003cac <statemachine+0x79c>)
 8003bec:	210f      	movs	r1, #15
 8003bee:	6a38      	ldr	r0, [r7, #32]
 8003bf0:	f012 fd6c 	bl	80166cc <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003bf4:	2130      	movs	r1, #48	; 0x30
 8003bf6:	2020      	movs	r0, #32
 8003bf8:	f7ff f892 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003bfc:	4a2c      	ldr	r2, [pc, #176]	; (8003cb0 <statemachine+0x7a0>)
 8003bfe:	2301      	movs	r3, #1
 8003c00:	ca06      	ldmia	r2, {r1, r2}
 8003c02:	6a38      	ldr	r0, [r7, #32]
 8003c04:	f7ff f866 	bl	8002cd4 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);
 8003c08:	4b27      	ldr	r3, [pc, #156]	; (8003ca8 <statemachine+0x798>)
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	e9cd 2300 	strd	r2, r3, [sp]
 8003c12:	4a28      	ldr	r2, [pc, #160]	; (8003cb4 <statemachine+0x7a4>)
 8003c14:	210f      	movs	r1, #15
 8003c16:	6a38      	ldr	r0, [r7, #32]
 8003c18:	f012 fd58 	bl	80166cc <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003c1c:	2138      	movs	r1, #56	; 0x38
 8003c1e:	2020      	movs	r0, #32
 8003c20:	f7ff f87e 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003c24:	4a22      	ldr	r2, [pc, #136]	; (8003cb0 <statemachine+0x7a0>)
 8003c26:	2301      	movs	r3, #1
 8003c28:	ca06      	ldmia	r2, {r1, r2}
 8003c2a:	6a38      	ldr	r0, [r7, #32]
 8003c2c:	f7ff f852 	bl	8002cd4 <ssd1306_WriteString>
				  						free(str);
 8003c30:	6a38      	ldr	r0, [r7, #32]
 8003c32:	f010 fe59 	bl	80148e8 <free>
 8003c36:	e01b      	b.n	8003c70 <statemachine+0x760>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003c38:	2014      	movs	r0, #20
 8003c3a:	f010 fe4d 	bl	80148d8 <malloc>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
				  						ssd1306_SetCursor(32, 32);
 8003c42:	2120      	movs	r1, #32
 8003c44:	2020      	movs	r0, #32
 8003c46:	f7ff f86b 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos2", Font_6x8, White);
 8003c4a:	4a19      	ldr	r2, [pc, #100]	; (8003cb0 <statemachine+0x7a0>)
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	ca06      	ldmia	r2, {r1, r2}
 8003c50:	4821      	ldr	r0, [pc, #132]	; (8003cd8 <statemachine+0x7c8>)
 8003c52:	f7ff f83f 	bl	8002cd4 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003c56:	212c      	movs	r1, #44	; 0x2c
 8003c58:	2020      	movs	r0, #32
 8003c5a:	f7ff f861 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003c5e:	4a14      	ldr	r2, [pc, #80]	; (8003cb0 <statemachine+0x7a0>)
 8003c60:	2301      	movs	r3, #1
 8003c62:	ca06      	ldmia	r2, {r1, r2}
 8003c64:	4816      	ldr	r0, [pc, #88]	; (8003cc0 <statemachine+0x7b0>)
 8003c66:	f7ff f835 	bl	8002cd4 <ssd1306_WriteString>
				  						free(str);
 8003c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c6c:	f010 fe3c 	bl	80148e8 <free>
				  					}
				  if(BTN_B>=1){
 8003c70:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <statemachine+0x7b8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	dd08      	ble.n	8003c8a <statemachine+0x77a>
				  					  posstate++;
 8003c78:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <statemachine+0x7bc>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <statemachine+0x7bc>)
 8003c82:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8003c84:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <statemachine+0x7b8>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8003c8a:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <statemachine+0x7cc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f340 8168 	ble.w	8003f64 <statemachine+0xa54>
									  posstate--;
 8003c94:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <statemachine+0x7bc>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <statemachine+0x7bc>)
 8003c9e:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8003ca0:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <statemachine+0x7cc>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
								}



				  break;
 8003ca6:	e15d      	b.n	8003f64 <statemachine+0xa54>
 8003ca8:	200006c8 	.word	0x200006c8
 8003cac:	0801aee8 	.word	0x0801aee8
 8003cb0:	2000000c 	.word	0x2000000c
 8003cb4:	0801aef4 	.word	0x0801aef4
 8003cb8:	0801aefc 	.word	0x0801aefc
 8003cbc:	0801af08 	.word	0x0801af08
 8003cc0:	0801aec4 	.word	0x0801aec4
 8003cc4:	20000740 	.word	0x20000740
 8003cc8:	2000070c 	.word	0x2000070c
 8003ccc:	2000047b 	.word	0x2000047b
 8003cd0:	0801af10 	.word	0x0801af10
 8003cd4:	0801af1c 	.word	0x0801af1c
 8003cd8:	0801af20 	.word	0x0801af20
 8003cdc:	20000a5c 	.word	0x20000a5c
			  case STATE_LONG:
				  if(myData.fix == 1){
 8003ce0:	4ba5      	ldr	r3, [pc, #660]	; (8003f78 <statemachine+0xa68>)
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d14b      	bne.n	8003d80 <statemachine+0x870>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003ce8:	2014      	movs	r0, #20
 8003cea:	f010 fdf5 	bl	80148d8 <malloc>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28
				  						ssd1306_SetCursor(32, 32);
 8003cf2:	2120      	movs	r1, #32
 8003cf4:	2020      	movs	r0, #32
 8003cf6:	f7ff f813 	bl	8002d20 <ssd1306_SetCursor>
				  						snprintf(str,15, "LonSide:");
 8003cfa:	4aa0      	ldr	r2, [pc, #640]	; (8003f7c <statemachine+0xa6c>)
 8003cfc:	210f      	movs	r1, #15
 8003cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d00:	f012 fce4 	bl	80166cc <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003d04:	4a9e      	ldr	r2, [pc, #632]	; (8003f80 <statemachine+0xa70>)
 8003d06:	2301      	movs	r3, #1
 8003d08:	ca06      	ldmia	r2, {r1, r2}
 8003d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d0c:	f7fe ffe2 	bl	8002cd4 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003d10:	4b99      	ldr	r3, [pc, #612]	; (8003f78 <statemachine+0xa68>)
 8003d12:	7e1b      	ldrb	r3, [r3, #24]
 8003d14:	4a9b      	ldr	r2, [pc, #620]	; (8003f84 <statemachine+0xa74>)
 8003d16:	210f      	movs	r1, #15
 8003d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d1a:	f012 fcd7 	bl	80166cc <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003d1e:	2128      	movs	r1, #40	; 0x28
 8003d20:	2020      	movs	r0, #32
 8003d22:	f7fe fffd 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003d26:	4a96      	ldr	r2, [pc, #600]	; (8003f80 <statemachine+0xa70>)
 8003d28:	2301      	movs	r3, #1
 8003d2a:	ca06      	ldmia	r2, {r1, r2}
 8003d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d2e:	f7fe ffd1 	bl	8002cd4 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8003d32:	4a95      	ldr	r2, [pc, #596]	; (8003f88 <statemachine+0xa78>)
 8003d34:	210f      	movs	r1, #15
 8003d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d38:	f012 fcc8 	bl	80166cc <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003d3c:	2130      	movs	r1, #48	; 0x30
 8003d3e:	2020      	movs	r0, #32
 8003d40:	f7fe ffee 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003d44:	4a8e      	ldr	r2, [pc, #568]	; (8003f80 <statemachine+0xa70>)
 8003d46:	2301      	movs	r3, #1
 8003d48:	ca06      	ldmia	r2, {r1, r2}
 8003d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d4c:	f7fe ffc2 	bl	8002cd4 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8003d50:	4b89      	ldr	r3, [pc, #548]	; (8003f78 <statemachine+0xa68>)
 8003d52:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d56:	e9cd 2300 	strd	r2, r3, [sp]
 8003d5a:	4a8c      	ldr	r2, [pc, #560]	; (8003f8c <statemachine+0xa7c>)
 8003d5c:	210f      	movs	r1, #15
 8003d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d60:	f012 fcb4 	bl	80166cc <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003d64:	2138      	movs	r1, #56	; 0x38
 8003d66:	2020      	movs	r0, #32
 8003d68:	f7fe ffda 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003d6c:	4a84      	ldr	r2, [pc, #528]	; (8003f80 <statemachine+0xa70>)
 8003d6e:	2301      	movs	r3, #1
 8003d70:	ca06      	ldmia	r2, {r1, r2}
 8003d72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d74:	f7fe ffae 	bl	8002cd4 <ssd1306_WriteString>
				  						free(str);
 8003d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d7a:	f010 fdb5 	bl	80148e8 <free>
 8003d7e:	e01b      	b.n	8003db8 <statemachine+0x8a8>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003d80:	2014      	movs	r0, #20
 8003d82:	f010 fda9 	bl	80148d8 <malloc>
 8003d86:	4603      	mov	r3, r0
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
				  						ssd1306_SetCursor(32, 32);
 8003d8a:	2120      	movs	r1, #32
 8003d8c:	2020      	movs	r0, #32
 8003d8e:	f7fe ffc7 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos3", Font_6x8, White);
 8003d92:	4a7b      	ldr	r2, [pc, #492]	; (8003f80 <statemachine+0xa70>)
 8003d94:	2301      	movs	r3, #1
 8003d96:	ca06      	ldmia	r2, {r1, r2}
 8003d98:	487d      	ldr	r0, [pc, #500]	; (8003f90 <statemachine+0xa80>)
 8003d9a:	f7fe ff9b 	bl	8002cd4 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003d9e:	212c      	movs	r1, #44	; 0x2c
 8003da0:	2020      	movs	r0, #32
 8003da2:	f7fe ffbd 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003da6:	4a76      	ldr	r2, [pc, #472]	; (8003f80 <statemachine+0xa70>)
 8003da8:	2301      	movs	r3, #1
 8003daa:	ca06      	ldmia	r2, {r1, r2}
 8003dac:	4879      	ldr	r0, [pc, #484]	; (8003f94 <statemachine+0xa84>)
 8003dae:	f7fe ff91 	bl	8002cd4 <ssd1306_WriteString>
				  						free(str);
 8003db2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003db4:	f010 fd98 	bl	80148e8 <free>
				  					}
				  if(BTN_B>=1){
 8003db8:	4b77      	ldr	r3, [pc, #476]	; (8003f98 <statemachine+0xa88>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	dd08      	ble.n	8003dd2 <statemachine+0x8c2>
				  					  posstate++;
 8003dc0:	4b76      	ldr	r3, [pc, #472]	; (8003f9c <statemachine+0xa8c>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	4b74      	ldr	r3, [pc, #464]	; (8003f9c <statemachine+0xa8c>)
 8003dca:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8003dcc:	4b72      	ldr	r3, [pc, #456]	; (8003f98 <statemachine+0xa88>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8003dd2:	4b73      	ldr	r3, [pc, #460]	; (8003fa0 <statemachine+0xa90>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f340 80c6 	ble.w	8003f68 <statemachine+0xa58>
									  posstate--;
 8003ddc:	4b6f      	ldr	r3, [pc, #444]	; (8003f9c <statemachine+0xa8c>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	4b6d      	ldr	r3, [pc, #436]	; (8003f9c <statemachine+0xa8c>)
 8003de6:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8003de8:	4b6d      	ldr	r3, [pc, #436]	; (8003fa0 <statemachine+0xa90>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
								}

				  break;
 8003dee:	e0bb      	b.n	8003f68 <statemachine+0xa58>
			  case STATE_ALT:
				  if(myData.fix == 1){
 8003df0:	4b61      	ldr	r3, [pc, #388]	; (8003f78 <statemachine+0xa68>)
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d170      	bne.n	8003eda <statemachine+0x9ca>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003df8:	2014      	movs	r0, #20
 8003dfa:	f010 fd6d 	bl	80148d8 <malloc>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	633b      	str	r3, [r7, #48]	; 0x30
				  						ssd1306_SetCursor(32, 32);
 8003e02:	2120      	movs	r1, #32
 8003e04:	2020      	movs	r0, #32
 8003e06:	f7fe ff8b 	bl	8002d20 <ssd1306_SetCursor>
				  						snprintf(str,15, "altitude:");
 8003e0a:	4a66      	ldr	r2, [pc, #408]	; (8003fa4 <statemachine+0xa94>)
 8003e0c:	210f      	movs	r1, #15
 8003e0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e10:	f012 fc5c 	bl	80166cc <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003e14:	4a5a      	ldr	r2, [pc, #360]	; (8003f80 <statemachine+0xa70>)
 8003e16:	2301      	movs	r3, #1
 8003e18:	ca06      	ldmia	r2, {r1, r2}
 8003e1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e1c:	f7fe ff5a 	bl	8002cd4 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003e20:	4b55      	ldr	r3, [pc, #340]	; (8003f78 <statemachine+0xa68>)
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fc fb8f 	bl	8000548 <__aeabi_f2d>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	e9cd 2300 	strd	r2, r3, [sp]
 8003e32:	4a5d      	ldr	r2, [pc, #372]	; (8003fa8 <statemachine+0xa98>)
 8003e34:	210f      	movs	r1, #15
 8003e36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e38:	f012 fc48 	bl	80166cc <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003e3c:	2128      	movs	r1, #40	; 0x28
 8003e3e:	2020      	movs	r0, #32
 8003e40:	f7fe ff6e 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003e44:	4a4e      	ldr	r2, [pc, #312]	; (8003f80 <statemachine+0xa70>)
 8003e46:	2301      	movs	r3, #1
 8003e48:	ca06      	ldmia	r2, {r1, r2}
 8003e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e4c:	f7fe ff42 	bl	8002cd4 <ssd1306_WriteString>
				  						snprintf(str,15, "Pressure:");
 8003e50:	4a56      	ldr	r2, [pc, #344]	; (8003fac <statemachine+0xa9c>)
 8003e52:	210f      	movs	r1, #15
 8003e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e56:	f012 fc39 	bl	80166cc <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003e5a:	2130      	movs	r1, #48	; 0x30
 8003e5c:	2020      	movs	r0, #32
 8003e5e:	f7fe ff5f 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003e62:	4a47      	ldr	r2, [pc, #284]	; (8003f80 <statemachine+0xa70>)
 8003e64:	2301      	movs	r3, #1
 8003e66:	ca06      	ldmia	r2, {r1, r2}
 8003e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e6a:	f7fe ff33 	bl	8002cd4 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 8003e6e:	4b42      	ldr	r3, [pc, #264]	; (8003f78 <statemachine+0xa68>)
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fc fb68 	bl	8000548 <__aeabi_f2d>
 8003e78:	a33d      	add	r3, pc, #244	; (adr r3, 8003f70 <statemachine+0xa60>)
 8003e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7e:	f7fc fbbb 	bl	80005f8 <__aeabi_dmul>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4610      	mov	r0, r2
 8003e88:	4619      	mov	r1, r3
 8003e8a:	f7fc fead 	bl	8000be8 <__aeabi_d2f>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	ee00 3a10 	vmov	s0, r3
 8003e94:	f015 fac8 	bl	8019428 <expf>
 8003e98:	eef0 7a40 	vmov.f32	s15, s0
 8003e9c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003fb0 <statemachine+0xaa0>
 8003ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ea4:	ee17 0a90 	vmov	r0, s15
 8003ea8:	f7fc fb4e 	bl	8000548 <__aeabi_f2d>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	e9cd 2300 	strd	r2, r3, [sp]
 8003eb4:	4a3f      	ldr	r2, [pc, #252]	; (8003fb4 <statemachine+0xaa4>)
 8003eb6:	210f      	movs	r1, #15
 8003eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eba:	f012 fc07 	bl	80166cc <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003ebe:	2138      	movs	r1, #56	; 0x38
 8003ec0:	2020      	movs	r0, #32
 8003ec2:	f7fe ff2d 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003ec6:	4a2e      	ldr	r2, [pc, #184]	; (8003f80 <statemachine+0xa70>)
 8003ec8:	2301      	movs	r3, #1
 8003eca:	ca06      	ldmia	r2, {r1, r2}
 8003ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ece:	f7fe ff01 	bl	8002cd4 <ssd1306_WriteString>
				  						free(str);
 8003ed2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ed4:	f010 fd08 	bl	80148e8 <free>
 8003ed8:	e01b      	b.n	8003f12 <statemachine+0xa02>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003eda:	2014      	movs	r0, #20
 8003edc:	f010 fcfc 	bl	80148d8 <malloc>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	637b      	str	r3, [r7, #52]	; 0x34
				  						ssd1306_SetCursor(32, 32);
 8003ee4:	2120      	movs	r1, #32
 8003ee6:	2020      	movs	r0, #32
 8003ee8:	f7fe ff1a 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos4", Font_6x8, White);
 8003eec:	4a24      	ldr	r2, [pc, #144]	; (8003f80 <statemachine+0xa70>)
 8003eee:	2301      	movs	r3, #1
 8003ef0:	ca06      	ldmia	r2, {r1, r2}
 8003ef2:	4831      	ldr	r0, [pc, #196]	; (8003fb8 <statemachine+0xaa8>)
 8003ef4:	f7fe feee 	bl	8002cd4 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003ef8:	212c      	movs	r1, #44	; 0x2c
 8003efa:	2020      	movs	r0, #32
 8003efc:	f7fe ff10 	bl	8002d20 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003f00:	4a1f      	ldr	r2, [pc, #124]	; (8003f80 <statemachine+0xa70>)
 8003f02:	2301      	movs	r3, #1
 8003f04:	ca06      	ldmia	r2, {r1, r2}
 8003f06:	4823      	ldr	r0, [pc, #140]	; (8003f94 <statemachine+0xa84>)
 8003f08:	f7fe fee4 	bl	8002cd4 <ssd1306_WriteString>
				  						free(str);
 8003f0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f0e:	f010 fceb 	bl	80148e8 <free>
				  					}
				  if(BTN_B>=1){
 8003f12:	4b21      	ldr	r3, [pc, #132]	; (8003f98 <statemachine+0xa88>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	dd14      	ble.n	8003f44 <statemachine+0xa34>
				  					posstate--;
 8003f1a:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <statemachine+0xa8c>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	4b1e      	ldr	r3, [pc, #120]	; (8003f9c <statemachine+0xa8c>)
 8003f24:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003f26:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <statemachine+0xa8c>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <statemachine+0xa8c>)
 8003f30:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003f32:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <statemachine+0xa8c>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <statemachine+0xa8c>)
 8003f3c:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 8003f3e:	4b16      	ldr	r3, [pc, #88]	; (8003f98 <statemachine+0xa88>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8003f44:	4b16      	ldr	r3, [pc, #88]	; (8003fa0 <statemachine+0xa90>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	dd37      	ble.n	8003fbc <statemachine+0xaac>
					  posstate--;
 8003f4c:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <statemachine+0xa8c>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <statemachine+0xa8c>)
 8003f56:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 8003f58:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <statemachine+0xa90>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
				}
				  break;
 8003f5e:	e02d      	b.n	8003fbc <statemachine+0xaac>
				  break;
 8003f60:	bf00      	nop
 8003f62:	e02c      	b.n	8003fbe <statemachine+0xaae>
				  break;
 8003f64:	bf00      	nop
 8003f66:	e02a      	b.n	8003fbe <statemachine+0xaae>
				  break;
 8003f68:	bf00      	nop
 8003f6a:	e028      	b.n	8003fbe <statemachine+0xaae>
 8003f6c:	f3af 8000 	nop.w
 8003f70:	fb798882 	.word	0xfb798882
 8003f74:	bf1e1818 	.word	0xbf1e1818
 8003f78:	200006c8 	.word	0x200006c8
 8003f7c:	0801af28 	.word	0x0801af28
 8003f80:	2000000c 	.word	0x2000000c
 8003f84:	0801af1c 	.word	0x0801af1c
 8003f88:	0801aefc 	.word	0x0801aefc
 8003f8c:	0801aef4 	.word	0x0801aef4
 8003f90:	0801af34 	.word	0x0801af34
 8003f94:	0801aec4 	.word	0x0801aec4
 8003f98:	2000070c 	.word	0x2000070c
 8003f9c:	2000047b 	.word	0x2000047b
 8003fa0:	20000a5c 	.word	0x20000a5c
 8003fa4:	0801af3c 	.word	0x0801af3c
 8003fa8:	0801af48 	.word	0x0801af48
 8003fac:	0801af50 	.word	0x0801af50
 8003fb0:	447a0000 	.word	0x447a0000
 8003fb4:	0801af5c 	.word	0x0801af5c
 8003fb8:	0801af68 	.word	0x0801af68
				  break;
 8003fbc:	bf00      	nop
			  }

					if(BTN_A>=1){
 8003fbe:	4b6a      	ldr	r3, [pc, #424]	; (8004168 <statemachine+0xc58>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	dd0b      	ble.n	8003fde <statemachine+0xace>
							state++;
 8003fc6:	4b69      	ldr	r3, [pc, #420]	; (800416c <statemachine+0xc5c>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	4b67      	ldr	r3, [pc, #412]	; (800416c <statemachine+0xc5c>)
 8003fd0:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8003fd2:	4b65      	ldr	r3, [pc, #404]	; (8004168 <statemachine+0xc58>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8003fd8:	4b65      	ldr	r3, [pc, #404]	; (8004170 <statemachine+0xc60>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]


						}
					if(BTN_A_LONG>=1){
 8003fde:	4b65      	ldr	r3, [pc, #404]	; (8004174 <statemachine+0xc64>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f341 8322 	ble.w	800562c <statemachine+0x211c>
									 									 									  			 	state--;
 8003fe8:	4b60      	ldr	r3, [pc, #384]	; (800416c <statemachine+0xc5c>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	4b5e      	ldr	r3, [pc, #376]	; (800416c <statemachine+0xc5c>)
 8003ff2:	701a      	strb	r2, [r3, #0]
									 									 									  			 	BTN_A=0;
 8003ff4:	4b5c      	ldr	r3, [pc, #368]	; (8004168 <statemachine+0xc58>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_B=0;
 8003ffa:	4b5d      	ldr	r3, [pc, #372]	; (8004170 <statemachine+0xc60>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_A_LONG=0;
 8004000:	4b5c      	ldr	r3, [pc, #368]	; (8004174 <statemachine+0xc64>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
									 									 									  	}
			  break;
 8004006:	f001 bb11 	b.w	800562c <statemachine+0x211c>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 800400a:	2000      	movs	r0, #0
 800400c:	f7fe fd46 	bl	8002a9c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8004010:	4959      	ldr	r1, [pc, #356]	; (8004178 <statemachine+0xc68>)
 8004012:	485a      	ldr	r0, [pc, #360]	; (800417c <statemachine+0xc6c>)
 8004014:	f7fe f85a 	bl	80020cc <nmea_parse>
			  if(settimeen==0){
 8004018:	4b59      	ldr	r3, [pc, #356]	; (8004180 <statemachine+0xc70>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d145      	bne.n	80040ac <statemachine+0xb9c>

						  if(myData.fix==1){
 8004020:	4b56      	ldr	r3, [pc, #344]	; (800417c <statemachine+0xc6c>)
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	2b01      	cmp	r3, #1
 8004026:	d141      	bne.n	80040ac <statemachine+0xb9c>
							settimeen=1;
 8004028:	4b55      	ldr	r3, [pc, #340]	; (8004180 <statemachine+0xc70>)
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 800402e:	4b53      	ldr	r3, [pc, #332]	; (800417c <statemachine+0xc6c>)
 8004030:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	b2db      	uxtb	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	0092      	lsls	r2, r2, #2
 800403e:	4413      	add	r3, r2
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	b2da      	uxtb	r2, r3
 8004044:	4b4d      	ldr	r3, [pc, #308]	; (800417c <statemachine+0xc6c>)
 8004046:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	b2db      	uxtb	r3, r3
 8004050:	4413      	add	r3, r2
 8004052:	b2da      	uxtb	r2, r3
 8004054:	4b4b      	ldr	r3, [pc, #300]	; (8004184 <statemachine+0xc74>)
 8004056:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8004058:	4b48      	ldr	r3, [pc, #288]	; (800417c <statemachine+0xc6c>)
 800405a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	b2db      	uxtb	r3, r3
 8004064:	461a      	mov	r2, r3
 8004066:	0092      	lsls	r2, r2, #2
 8004068:	4413      	add	r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	b2da      	uxtb	r2, r3
 800406e:	4b43      	ldr	r3, [pc, #268]	; (800417c <statemachine+0xc6c>)
 8004070:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	b2db      	uxtb	r3, r3
 800407a:	4413      	add	r3, r2
 800407c:	b2da      	uxtb	r2, r3
 800407e:	4b42      	ldr	r3, [pc, #264]	; (8004188 <statemachine+0xc78>)
 8004080:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004082:	4b3e      	ldr	r3, [pc, #248]	; (800417c <statemachine+0xc6c>)
 8004084:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004088:	f003 030f 	and.w	r3, r3, #15
 800408c:	b2db      	uxtb	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	0092      	lsls	r2, r2, #2
 8004092:	4413      	add	r3, r2
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	b2da      	uxtb	r2, r3
 8004098:	4b38      	ldr	r3, [pc, #224]	; (800417c <statemachine+0xc6c>)
 800409a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	4413      	add	r3, r2
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	4b38      	ldr	r3, [pc, #224]	; (800418c <statemachine+0xc7c>)
 80040aa:	701a      	strb	r2, [r3, #0]

					  }



			  if(myData.fix == 0){
 80040ac:	4b33      	ldr	r3, [pc, #204]	; (800417c <statemachine+0xc6c>)
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <statemachine+0xbba>
				  ssd1306_SetCursor(32, 32);
 80040b4:	2120      	movs	r1, #32
 80040b6:	2020      	movs	r0, #32
 80040b8:	f7fe fe32 	bl	8002d20 <ssd1306_SetCursor>
				  ssd1306_WriteString("no fix", Font_6x8, White);
 80040bc:	4a34      	ldr	r2, [pc, #208]	; (8004190 <statemachine+0xc80>)
 80040be:	2301      	movs	r3, #1
 80040c0:	ca06      	ldmia	r2, {r1, r2}
 80040c2:	4834      	ldr	r0, [pc, #208]	; (8004194 <statemachine+0xc84>)
 80040c4:	f7fe fe06 	bl	8002cd4 <ssd1306_WriteString>
 80040c8:	e009      	b.n	80040de <statemachine+0xbce>

			  }
			  else{

				  ssd1306_SetCursor(32, 32);
 80040ca:	2120      	movs	r1, #32
 80040cc:	2020      	movs	r0, #32
 80040ce:	f7fe fe27 	bl	8002d20 <ssd1306_SetCursor>
				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 80040d2:	4a2f      	ldr	r2, [pc, #188]	; (8004190 <statemachine+0xc80>)
 80040d4:	2301      	movs	r3, #1
 80040d6:	ca06      	ldmia	r2, {r1, r2}
 80040d8:	482f      	ldr	r0, [pc, #188]	; (8004198 <statemachine+0xc88>)
 80040da:	f7fe fdfb 	bl	8002cd4 <ssd1306_WriteString>

			  }



				  switch(hrstate){
 80040de:	4b2f      	ldr	r3, [pc, #188]	; (800419c <statemachine+0xc8c>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <statemachine+0xbdc>
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d060      	beq.n	80041ac <statemachine+0xc9c>
 80040ea:	e29a      	b.n	8004622 <statemachine+0x1112>
				  case STATE_DIGIT:
					  char * str = (char*)malloc(sizeof(char)*20);
 80040ec:	2014      	movs	r0, #20
 80040ee:	f010 fbf3 	bl	80148d8 <malloc>
 80040f2:	4603      	mov	r3, r0
 80040f4:	63bb      	str	r3, [r7, #56]	; 0x38


					 ssd1306_SetCursor(32, 42);
 80040f6:	212a      	movs	r1, #42	; 0x2a
 80040f8:	2020      	movs	r0, #32
 80040fa:	f7fe fe11 	bl	8002d20 <ssd1306_SetCursor>
					 snprintf(str,15, "%02d:%02d",HR,MINUTE);
 80040fe:	4b21      	ldr	r3, [pc, #132]	; (8004184 <statemachine+0xc74>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	4b20      	ldr	r3, [pc, #128]	; (8004188 <statemachine+0xc78>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	4613      	mov	r3, r2
 800410c:	4a24      	ldr	r2, [pc, #144]	; (80041a0 <statemachine+0xc90>)
 800410e:	210f      	movs	r1, #15
 8004110:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004112:	f012 fadb 	bl	80166cc <sniprintf>
					ssd1306_WriteString(str, Font_7x10, White);
 8004116:	4a23      	ldr	r2, [pc, #140]	; (80041a4 <statemachine+0xc94>)
 8004118:	2301      	movs	r3, #1
 800411a:	ca06      	ldmia	r2, {r1, r2}
 800411c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800411e:	f7fe fdd9 	bl	8002cd4 <ssd1306_WriteString>
					ssd1306_SetCursor(32, 50);
 8004122:	2132      	movs	r1, #50	; 0x32
 8004124:	2020      	movs	r0, #32
 8004126:	f7fe fdfb 	bl	8002d20 <ssd1306_SetCursor>
					snprintf(str,15, "%02d sec",SEC);
 800412a:	4b18      	ldr	r3, [pc, #96]	; (800418c <statemachine+0xc7c>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	4a1e      	ldr	r2, [pc, #120]	; (80041a8 <statemachine+0xc98>)
 8004130:	210f      	movs	r1, #15
 8004132:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004134:	f012 faca 	bl	80166cc <sniprintf>
					ssd1306_WriteString(str, Font_6x8, White);
 8004138:	4a15      	ldr	r2, [pc, #84]	; (8004190 <statemachine+0xc80>)
 800413a:	2301      	movs	r3, #1
 800413c:	ca06      	ldmia	r2, {r1, r2}
 800413e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004140:	f7fe fdc8 	bl	8002cd4 <ssd1306_WriteString>
					free(str);
 8004144:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004146:	f010 fbcf 	bl	80148e8 <free>
					if(BTN_B>=1){
 800414a:	4b09      	ldr	r3, [pc, #36]	; (8004170 <statemachine+0xc60>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	f340 8264 	ble.w	800461c <statemachine+0x110c>
												hrstate++;
 8004154:	4b11      	ldr	r3, [pc, #68]	; (800419c <statemachine+0xc8c>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	3301      	adds	r3, #1
 800415a:	b2da      	uxtb	r2, r3
 800415c:	4b0f      	ldr	r3, [pc, #60]	; (800419c <statemachine+0xc8c>)
 800415e:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 8004160:	4b03      	ldr	r3, [pc, #12]	; (8004170 <statemachine+0xc60>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
											}




					  break;
 8004166:	e259      	b.n	800461c <statemachine+0x110c>
 8004168:	20000708 	.word	0x20000708
 800416c:	20000478 	.word	0x20000478
 8004170:	2000070c 	.word	0x2000070c
 8004174:	20000a60 	.word	0x20000a60
 8004178:	200004c4 	.word	0x200004c4
 800417c:	200006c8 	.word	0x200006c8
 8004180:	20000fd4 	.word	0x20000fd4
 8004184:	20000a49 	.word	0x20000a49
 8004188:	20000a4a 	.word	0x20000a4a
 800418c:	20000a48 	.word	0x20000a48
 8004190:	2000000c 	.word	0x2000000c
 8004194:	0801af70 	.word	0x0801af70
 8004198:	0801af78 	.word	0x0801af78
 800419c:	20000479 	.word	0x20000479
 80041a0:	0801af80 	.word	0x0801af80
 80041a4:	20000014 	.word	0x20000014
 80041a8:	0801af8c 	.word	0x0801af8c
				  case STATE_OLD:
					  if(HR>12){
 80041ac:	4b90      	ldr	r3, [pc, #576]	; (80043f0 <statemachine+0xee0>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b0c      	cmp	r3, #12
 80041b2:	d905      	bls.n	80041c0 <statemachine+0xcb0>
						  HR=HR-12;
 80041b4:	4b8e      	ldr	r3, [pc, #568]	; (80043f0 <statemachine+0xee0>)
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	3b0c      	subs	r3, #12
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	4b8c      	ldr	r3, [pc, #560]	; (80043f0 <statemachine+0xee0>)
 80041be:	701a      	strb	r2, [r3, #0]
					  }
					  ssd1306_DrawCircle(64, 48, 12, White);
 80041c0:	2301      	movs	r3, #1
 80041c2:	220c      	movs	r2, #12
 80041c4:	2130      	movs	r1, #48	; 0x30
 80041c6:	2040      	movs	r0, #64	; 0x40
 80041c8:	f7fe fe2e 	bl	8002e28 <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-HR)*M_PI/6)),48-floor(6*sin((3-HR)*M_PI/6)),White);
 80041cc:	4b88      	ldr	r3, [pc, #544]	; (80043f0 <statemachine+0xee0>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	f1c3 0303 	rsb	r3, r3, #3
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fc f9a5 	bl	8000524 <__aeabi_i2d>
 80041da:	a383      	add	r3, pc, #524	; (adr r3, 80043e8 <statemachine+0xed8>)
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f7fc fa0a 	bl	80005f8 <__aeabi_dmul>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	4b80      	ldr	r3, [pc, #512]	; (80043f4 <statemachine+0xee4>)
 80041f2:	f7fc fb2b 	bl	800084c <__aeabi_ddiv>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	ec43 2b17 	vmov	d7, r2, r3
 80041fe:	eeb0 0a47 	vmov.f32	s0, s14
 8004202:	eef0 0a67 	vmov.f32	s1, s15
 8004206:	f015 f863 	bl	80192d0 <cos>
 800420a:	ec51 0b10 	vmov	r0, r1, d0
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	4b78      	ldr	r3, [pc, #480]	; (80043f4 <statemachine+0xee4>)
 8004214:	f7fc f9f0 	bl	80005f8 <__aeabi_dmul>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	ec43 2b17 	vmov	d7, r2, r3
 8004220:	eeb0 0a47 	vmov.f32	s0, s14
 8004224:	eef0 0a67 	vmov.f32	s1, s15
 8004228:	f015 f99a 	bl	8019560 <floor>
 800422c:	ec51 0b10 	vmov	r0, r1, d0
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	4b70      	ldr	r3, [pc, #448]	; (80043f8 <statemachine+0xee8>)
 8004236:	f7fc f829 	bl	800028c <__adddf3>
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	f7fc fcb1 	bl	8000ba8 <__aeabi_d2uiz>
 8004246:	4603      	mov	r3, r0
 8004248:	b2dc      	uxtb	r4, r3
 800424a:	4b69      	ldr	r3, [pc, #420]	; (80043f0 <statemachine+0xee0>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	f1c3 0303 	rsb	r3, r3, #3
 8004252:	4618      	mov	r0, r3
 8004254:	f7fc f966 	bl	8000524 <__aeabi_i2d>
 8004258:	a363      	add	r3, pc, #396	; (adr r3, 80043e8 <statemachine+0xed8>)
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	f7fc f9cb 	bl	80005f8 <__aeabi_dmul>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4610      	mov	r0, r2
 8004268:	4619      	mov	r1, r3
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	4b61      	ldr	r3, [pc, #388]	; (80043f4 <statemachine+0xee4>)
 8004270:	f7fc faec 	bl	800084c <__aeabi_ddiv>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	ec43 2b17 	vmov	d7, r2, r3
 800427c:	eeb0 0a47 	vmov.f32	s0, s14
 8004280:	eef0 0a67 	vmov.f32	s1, s15
 8004284:	f015 f878 	bl	8019378 <sin>
 8004288:	ec51 0b10 	vmov	r0, r1, d0
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	4b58      	ldr	r3, [pc, #352]	; (80043f4 <statemachine+0xee4>)
 8004292:	f7fc f9b1 	bl	80005f8 <__aeabi_dmul>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	ec43 2b17 	vmov	d7, r2, r3
 800429e:	eeb0 0a47 	vmov.f32	s0, s14
 80042a2:	eef0 0a67 	vmov.f32	s1, s15
 80042a6:	f015 f95b 	bl	8019560 <floor>
 80042aa:	ec53 2b10 	vmov	r2, r3, d0
 80042ae:	f04f 0000 	mov.w	r0, #0
 80042b2:	4952      	ldr	r1, [pc, #328]	; (80043fc <statemachine+0xeec>)
 80042b4:	f7fb ffe8 	bl	8000288 <__aeabi_dsub>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4610      	mov	r0, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	f7fc fc72 	bl	8000ba8 <__aeabi_d2uiz>
 80042c4:	4603      	mov	r3, r0
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2201      	movs	r2, #1
 80042ca:	9200      	str	r2, [sp, #0]
 80042cc:	4622      	mov	r2, r4
 80042ce:	2130      	movs	r1, #48	; 0x30
 80042d0:	2040      	movs	r0, #64	; 0x40
 80042d2:	f7fe fd3d 	bl	8002d50 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-MINUTE)*M_PI/30)),48-floor(12*sin((15-MINUTE)*M_PI/30)),White);
 80042d6:	4b4a      	ldr	r3, [pc, #296]	; (8004400 <statemachine+0xef0>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	f1c3 030f 	rsb	r3, r3, #15
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fc f920 	bl	8000524 <__aeabi_i2d>
 80042e4:	a340      	add	r3, pc, #256	; (adr r3, 80043e8 <statemachine+0xed8>)
 80042e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ea:	f7fc f985 	bl	80005f8 <__aeabi_dmul>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4610      	mov	r0, r2
 80042f4:	4619      	mov	r1, r3
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	4b42      	ldr	r3, [pc, #264]	; (8004404 <statemachine+0xef4>)
 80042fc:	f7fc faa6 	bl	800084c <__aeabi_ddiv>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	ec43 2b17 	vmov	d7, r2, r3
 8004308:	eeb0 0a47 	vmov.f32	s0, s14
 800430c:	eef0 0a67 	vmov.f32	s1, s15
 8004310:	f014 ffde 	bl	80192d0 <cos>
 8004314:	ec51 0b10 	vmov	r0, r1, d0
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	4b3a      	ldr	r3, [pc, #232]	; (8004408 <statemachine+0xef8>)
 800431e:	f7fc f96b 	bl	80005f8 <__aeabi_dmul>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	ec43 2b17 	vmov	d7, r2, r3
 800432a:	eeb0 0a47 	vmov.f32	s0, s14
 800432e:	eef0 0a67 	vmov.f32	s1, s15
 8004332:	f015 f915 	bl	8019560 <floor>
 8004336:	ec51 0b10 	vmov	r0, r1, d0
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <statemachine+0xee8>)
 8004340:	f7fb ffa4 	bl	800028c <__adddf3>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4610      	mov	r0, r2
 800434a:	4619      	mov	r1, r3
 800434c:	f7fc fc2c 	bl	8000ba8 <__aeabi_d2uiz>
 8004350:	4603      	mov	r3, r0
 8004352:	b2dc      	uxtb	r4, r3
 8004354:	4b2a      	ldr	r3, [pc, #168]	; (8004400 <statemachine+0xef0>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	f1c3 030f 	rsb	r3, r3, #15
 800435c:	4618      	mov	r0, r3
 800435e:	f7fc f8e1 	bl	8000524 <__aeabi_i2d>
 8004362:	a321      	add	r3, pc, #132	; (adr r3, 80043e8 <statemachine+0xed8>)
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	f7fc f946 	bl	80005f8 <__aeabi_dmul>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4610      	mov	r0, r2
 8004372:	4619      	mov	r1, r3
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	4b22      	ldr	r3, [pc, #136]	; (8004404 <statemachine+0xef4>)
 800437a:	f7fc fa67 	bl	800084c <__aeabi_ddiv>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	ec43 2b17 	vmov	d7, r2, r3
 8004386:	eeb0 0a47 	vmov.f32	s0, s14
 800438a:	eef0 0a67 	vmov.f32	s1, s15
 800438e:	f014 fff3 	bl	8019378 <sin>
 8004392:	ec51 0b10 	vmov	r0, r1, d0
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <statemachine+0xef8>)
 800439c:	f7fc f92c 	bl	80005f8 <__aeabi_dmul>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	ec43 2b17 	vmov	d7, r2, r3
 80043a8:	eeb0 0a47 	vmov.f32	s0, s14
 80043ac:	eef0 0a67 	vmov.f32	s1, s15
 80043b0:	f015 f8d6 	bl	8019560 <floor>
 80043b4:	ec53 2b10 	vmov	r2, r3, d0
 80043b8:	f04f 0000 	mov.w	r0, #0
 80043bc:	490f      	ldr	r1, [pc, #60]	; (80043fc <statemachine+0xeec>)
 80043be:	f7fb ff63 	bl	8000288 <__aeabi_dsub>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4610      	mov	r0, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	f7fc fbed 	bl	8000ba8 <__aeabi_d2uiz>
 80043ce:	4603      	mov	r3, r0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2201      	movs	r2, #1
 80043d4:	9200      	str	r2, [sp, #0]
 80043d6:	4622      	mov	r2, r4
 80043d8:	2130      	movs	r1, #48	; 0x30
 80043da:	2040      	movs	r0, #64	; 0x40
 80043dc:	f7fe fcb8 	bl	8002d50 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 80043e0:	2300      	movs	r3, #0
 80043e2:	657b      	str	r3, [r7, #84]	; 0x54
 80043e4:	e108      	b.n	80045f8 <statemachine+0x10e8>
 80043e6:	bf00      	nop
 80043e8:	54442d18 	.word	0x54442d18
 80043ec:	400921fb 	.word	0x400921fb
 80043f0:	20000a49 	.word	0x20000a49
 80043f4:	40180000 	.word	0x40180000
 80043f8:	40500000 	.word	0x40500000
 80043fc:	40480000 	.word	0x40480000
 8004400:	20000a4a 	.word	0x20000a4a
 8004404:	403e0000 	.word	0x403e0000
 8004408:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 800440c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800440e:	f7fc f889 	bl	8000524 <__aeabi_i2d>
 8004412:	a3c7      	add	r3, pc, #796	; (adr r3, 8004730 <statemachine+0x1220>)
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f7fc f8ee 	bl	80005f8 <__aeabi_dmul>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4610      	mov	r0, r2
 8004422:	4619      	mov	r1, r3
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	4bc3      	ldr	r3, [pc, #780]	; (8004738 <statemachine+0x1228>)
 800442a:	f7fc fa0f 	bl	800084c <__aeabi_ddiv>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	ec43 2b17 	vmov	d7, r2, r3
 8004436:	eeb0 0a47 	vmov.f32	s0, s14
 800443a:	eef0 0a67 	vmov.f32	s1, s15
 800443e:	f014 ff47 	bl	80192d0 <cos>
 8004442:	ec51 0b10 	vmov	r0, r1, d0
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	4bbc      	ldr	r3, [pc, #752]	; (800473c <statemachine+0x122c>)
 800444c:	f7fc f8d4 	bl	80005f8 <__aeabi_dmul>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	ec43 2b17 	vmov	d7, r2, r3
 8004458:	eeb0 0a47 	vmov.f32	s0, s14
 800445c:	eef0 0a67 	vmov.f32	s1, s15
 8004460:	f015 f87e 	bl	8019560 <floor>
 8004464:	ec51 0b10 	vmov	r0, r1, d0
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	4bb4      	ldr	r3, [pc, #720]	; (8004740 <statemachine+0x1230>)
 800446e:	f7fb ff0d 	bl	800028c <__adddf3>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4610      	mov	r0, r2
 8004478:	4619      	mov	r1, r3
 800447a:	f7fc fb95 	bl	8000ba8 <__aeabi_d2uiz>
 800447e:	4603      	mov	r3, r0
 8004480:	b2dc      	uxtb	r4, r3
 8004482:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004484:	f7fc f84e 	bl	8000524 <__aeabi_i2d>
 8004488:	a3a9      	add	r3, pc, #676	; (adr r3, 8004730 <statemachine+0x1220>)
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	f7fc f8b3 	bl	80005f8 <__aeabi_dmul>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	4610      	mov	r0, r2
 8004498:	4619      	mov	r1, r3
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	4ba6      	ldr	r3, [pc, #664]	; (8004738 <statemachine+0x1228>)
 80044a0:	f7fc f9d4 	bl	800084c <__aeabi_ddiv>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	ec43 2b17 	vmov	d7, r2, r3
 80044ac:	eeb0 0a47 	vmov.f32	s0, s14
 80044b0:	eef0 0a67 	vmov.f32	s1, s15
 80044b4:	f014 ff60 	bl	8019378 <sin>
 80044b8:	ec51 0b10 	vmov	r0, r1, d0
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	4b9e      	ldr	r3, [pc, #632]	; (800473c <statemachine+0x122c>)
 80044c2:	f7fc f899 	bl	80005f8 <__aeabi_dmul>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	ec43 2b17 	vmov	d7, r2, r3
 80044ce:	eeb0 0a47 	vmov.f32	s0, s14
 80044d2:	eef0 0a67 	vmov.f32	s1, s15
 80044d6:	f015 f843 	bl	8019560 <floor>
 80044da:	ec51 0b10 	vmov	r0, r1, d0
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	4b98      	ldr	r3, [pc, #608]	; (8004744 <statemachine+0x1234>)
 80044e4:	f7fb fed2 	bl	800028c <__adddf3>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4610      	mov	r0, r2
 80044ee:	4619      	mov	r1, r3
 80044f0:	f7fc fb5a 	bl	8000ba8 <__aeabi_d2uiz>
 80044f4:	4603      	mov	r3, r0
 80044f6:	b2dd      	uxtb	r5, r3
 80044f8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80044fa:	f7fc f813 	bl	8000524 <__aeabi_i2d>
 80044fe:	a38c      	add	r3, pc, #560	; (adr r3, 8004730 <statemachine+0x1220>)
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f7fc f878 	bl	80005f8 <__aeabi_dmul>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4610      	mov	r0, r2
 800450e:	4619      	mov	r1, r3
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	4b88      	ldr	r3, [pc, #544]	; (8004738 <statemachine+0x1228>)
 8004516:	f7fc f999 	bl	800084c <__aeabi_ddiv>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	ec43 2b17 	vmov	d7, r2, r3
 8004522:	eeb0 0a47 	vmov.f32	s0, s14
 8004526:	eef0 0a67 	vmov.f32	s1, s15
 800452a:	f014 fed1 	bl	80192d0 <cos>
 800452e:	ec51 0b10 	vmov	r0, r1, d0
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	4b84      	ldr	r3, [pc, #528]	; (8004748 <statemachine+0x1238>)
 8004538:	f7fc f85e 	bl	80005f8 <__aeabi_dmul>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	ec43 2b17 	vmov	d7, r2, r3
 8004544:	eeb0 0a47 	vmov.f32	s0, s14
 8004548:	eef0 0a67 	vmov.f32	s1, s15
 800454c:	f015 f808 	bl	8019560 <floor>
 8004550:	ec51 0b10 	vmov	r0, r1, d0
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	4b79      	ldr	r3, [pc, #484]	; (8004740 <statemachine+0x1230>)
 800455a:	f7fb fe97 	bl	800028c <__adddf3>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4610      	mov	r0, r2
 8004564:	4619      	mov	r1, r3
 8004566:	f7fc fb1f 	bl	8000ba8 <__aeabi_d2uiz>
 800456a:	4603      	mov	r3, r0
 800456c:	b2de      	uxtb	r6, r3
 800456e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004570:	f7fb ffd8 	bl	8000524 <__aeabi_i2d>
 8004574:	a36e      	add	r3, pc, #440	; (adr r3, 8004730 <statemachine+0x1220>)
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f7fc f83d 	bl	80005f8 <__aeabi_dmul>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4610      	mov	r0, r2
 8004584:	4619      	mov	r1, r3
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	4b6b      	ldr	r3, [pc, #428]	; (8004738 <statemachine+0x1228>)
 800458c:	f7fc f95e 	bl	800084c <__aeabi_ddiv>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	ec43 2b17 	vmov	d7, r2, r3
 8004598:	eeb0 0a47 	vmov.f32	s0, s14
 800459c:	eef0 0a67 	vmov.f32	s1, s15
 80045a0:	f014 feea 	bl	8019378 <sin>
 80045a4:	ec51 0b10 	vmov	r0, r1, d0
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	4b66      	ldr	r3, [pc, #408]	; (8004748 <statemachine+0x1238>)
 80045ae:	f7fc f823 	bl	80005f8 <__aeabi_dmul>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	ec43 2b17 	vmov	d7, r2, r3
 80045ba:	eeb0 0a47 	vmov.f32	s0, s14
 80045be:	eef0 0a67 	vmov.f32	s1, s15
 80045c2:	f014 ffcd 	bl	8019560 <floor>
 80045c6:	ec51 0b10 	vmov	r0, r1, d0
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	4b5d      	ldr	r3, [pc, #372]	; (8004744 <statemachine+0x1234>)
 80045d0:	f7fb fe5c 	bl	800028c <__adddf3>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4610      	mov	r0, r2
 80045da:	4619      	mov	r1, r3
 80045dc:	f7fc fae4 	bl	8000ba8 <__aeabi_d2uiz>
 80045e0:	4603      	mov	r3, r0
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2201      	movs	r2, #1
 80045e6:	9200      	str	r2, [sp, #0]
 80045e8:	4632      	mov	r2, r6
 80045ea:	4629      	mov	r1, r5
 80045ec:	4620      	mov	r0, r4
 80045ee:	f7fe fbaf 	bl	8002d50 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 80045f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f4:	3301      	adds	r3, #1
 80045f6:	657b      	str	r3, [r7, #84]	; 0x54
 80045f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045fa:	2b0c      	cmp	r3, #12
 80045fc:	f77f af06 	ble.w	800440c <statemachine+0xefc>
					  }
					  if(BTN_B>=1){
 8004600:	4b52      	ldr	r3, [pc, #328]	; (800474c <statemachine+0x123c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	dd0b      	ble.n	8004620 <statemachine+0x1110>
					  	hrstate--;
 8004608:	4b51      	ldr	r3, [pc, #324]	; (8004750 <statemachine+0x1240>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	3b01      	subs	r3, #1
 800460e:	b2da      	uxtb	r2, r3
 8004610:	4b4f      	ldr	r3, [pc, #316]	; (8004750 <statemachine+0x1240>)
 8004612:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 8004614:	4b4d      	ldr	r3, [pc, #308]	; (800474c <statemachine+0x123c>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
					  }


					  break;
 800461a:	e001      	b.n	8004620 <statemachine+0x1110>
					  break;
 800461c:	bf00      	nop
 800461e:	e000      	b.n	8004622 <statemachine+0x1112>
					  break;
 8004620:	bf00      	nop

				  }

				  if(BTN_A>=1){
 8004622:	4b4c      	ldr	r3, [pc, #304]	; (8004754 <statemachine+0x1244>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	dd0e      	ble.n	8004648 <statemachine+0x1138>
			  		state++;
 800462a:	4b4b      	ldr	r3, [pc, #300]	; (8004758 <statemachine+0x1248>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	3301      	adds	r3, #1
 8004630:	b2da      	uxtb	r2, r3
 8004632:	4b49      	ldr	r3, [pc, #292]	; (8004758 <statemachine+0x1248>)
 8004634:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8004636:	4b47      	ldr	r3, [pc, #284]	; (8004754 <statemachine+0x1244>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 800463c:	4b43      	ldr	r3, [pc, #268]	; (800474c <statemachine+0x123c>)
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]
			  		settimeen=0;
 8004642:	4b46      	ldr	r3, [pc, #280]	; (800475c <statemachine+0x124c>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
			  		}
				  if(BTN_A_LONG>=1){
 8004648:	4b45      	ldr	r3, [pc, #276]	; (8004760 <statemachine+0x1250>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	f340 87ef 	ble.w	8005630 <statemachine+0x2120>
				  									 									 									  			 	state--;
 8004652:	4b41      	ldr	r3, [pc, #260]	; (8004758 <statemachine+0x1248>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	3b01      	subs	r3, #1
 8004658:	b2da      	uxtb	r2, r3
 800465a:	4b3f      	ldr	r3, [pc, #252]	; (8004758 <statemachine+0x1248>)
 800465c:	701a      	strb	r2, [r3, #0]
				  									 									 									  			 	BTN_A=0;
 800465e:	4b3d      	ldr	r3, [pc, #244]	; (8004754 <statemachine+0x1244>)
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
				  									 									 									  			 	BTN_B=0;
 8004664:	4b39      	ldr	r3, [pc, #228]	; (800474c <statemachine+0x123c>)
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
				  									 									 									  			 	BTN_A_LONG=0;
 800466a:	4b3d      	ldr	r3, [pc, #244]	; (8004760 <statemachine+0x1250>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]





			  break;
 8004670:	f000 bfde 	b.w	8005630 <statemachine+0x2120>
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 8004674:	2000      	movs	r0, #0
 8004676:	f7fe fa11 	bl	8002a9c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 800467a:	493a      	ldr	r1, [pc, #232]	; (8004764 <statemachine+0x1254>)
 800467c:	483a      	ldr	r0, [pc, #232]	; (8004768 <statemachine+0x1258>)
 800467e:	f7fd fd25 	bl	80020cc <nmea_parse>
			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8004682:	4b39      	ldr	r3, [pc, #228]	; (8004768 <statemachine+0x1258>)
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	2b01      	cmp	r3, #1
 8004688:	d17c      	bne.n	8004784 <statemachine+0x1274>
			 			 						char * str = (char*)malloc(sizeof(char)*20);
 800468a:	2014      	movs	r0, #20
 800468c:	f010 f924 	bl	80148d8 <malloc>
 8004690:	4603      	mov	r3, r0
 8004692:	63fb      	str	r3, [r7, #60]	; 0x3c
			 			 						snprintf(str,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8004694:	4b34      	ldr	r3, [pc, #208]	; (8004768 <statemachine+0x1258>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	4618      	mov	r0, r3
 800469a:	f7fb ff55 	bl	8000548 <__aeabi_f2d>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	e9cd 2300 	strd	r2, r3, [sp]
 80046a6:	4a31      	ldr	r2, [pc, #196]	; (800476c <statemachine+0x125c>)
 80046a8:	210f      	movs	r1, #15
 80046aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80046ac:	f012 f80e 	bl	80166cc <sniprintf>
			 			 						ssd1306_SetCursor(32, 32);
 80046b0:	2120      	movs	r1, #32
 80046b2:	2020      	movs	r0, #32
 80046b4:	f7fe fb34 	bl	8002d20 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80046b8:	4a2d      	ldr	r2, [pc, #180]	; (8004770 <statemachine+0x1260>)
 80046ba:	2301      	movs	r3, #1
 80046bc:	ca06      	ldmia	r2, {r1, r2}
 80046be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80046c0:	f7fe fb08 	bl	8002cd4 <ssd1306_WriteString>
			 			 						snprintf(str,20, "v=%0.2fV",vbat);
 80046c4:	4b2b      	ldr	r3, [pc, #172]	; (8004774 <statemachine+0x1264>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fb ff3d 	bl	8000548 <__aeabi_f2d>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	e9cd 2300 	strd	r2, r3, [sp]
 80046d6:	4a28      	ldr	r2, [pc, #160]	; (8004778 <statemachine+0x1268>)
 80046d8:	2114      	movs	r1, #20
 80046da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80046dc:	f011 fff6 	bl	80166cc <sniprintf>
			 			 						ssd1306_SetCursor(32, 42);
 80046e0:	212a      	movs	r1, #42	; 0x2a
 80046e2:	2020      	movs	r0, #32
 80046e4:	f7fe fb1c 	bl	8002d20 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80046e8:	4a21      	ldr	r2, [pc, #132]	; (8004770 <statemachine+0x1260>)
 80046ea:	2301      	movs	r3, #1
 80046ec:	ca06      	ldmia	r2, {r1, r2}
 80046ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80046f0:	f7fe faf0 	bl	8002cd4 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 80046f4:	2132      	movs	r1, #50	; 0x32
 80046f6:	2020      	movs	r0, #32
 80046f8:	f7fe fb12 	bl	8002d20 <ssd1306_SetCursor>
			 			 						snprintf(str,15,  "T=%0.2fC",temp);
 80046fc:	4b1f      	ldr	r3, [pc, #124]	; (800477c <statemachine+0x126c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f7fb ff21 	bl	8000548 <__aeabi_f2d>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	e9cd 2300 	strd	r2, r3, [sp]
 800470e:	4a1c      	ldr	r2, [pc, #112]	; (8004780 <statemachine+0x1270>)
 8004710:	210f      	movs	r1, #15
 8004712:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004714:	f011 ffda 	bl	80166cc <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004718:	4a15      	ldr	r2, [pc, #84]	; (8004770 <statemachine+0x1260>)
 800471a:	2301      	movs	r3, #1
 800471c:	ca06      	ldmia	r2, {r1, r2}
 800471e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004720:	f7fe fad8 	bl	8002cd4 <ssd1306_WriteString>
			 			 						free(str);
 8004724:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004726:	f010 f8df 	bl	80148e8 <free>
 800472a:	e06d      	b.n	8004808 <statemachine+0x12f8>
 800472c:	f3af 8000 	nop.w
 8004730:	54442d18 	.word	0x54442d18
 8004734:	400921fb 	.word	0x400921fb
 8004738:	40180000 	.word	0x40180000
 800473c:	40240000 	.word	0x40240000
 8004740:	40500000 	.word	0x40500000
 8004744:	40480000 	.word	0x40480000
 8004748:	40280000 	.word	0x40280000
 800474c:	2000070c 	.word	0x2000070c
 8004750:	20000479 	.word	0x20000479
 8004754:	20000708 	.word	0x20000708
 8004758:	20000478 	.word	0x20000478
 800475c:	20000fd4 	.word	0x20000fd4
 8004760:	20000a60 	.word	0x20000a60
 8004764:	200004c4 	.word	0x200004c4
 8004768:	200006c8 	.word	0x200006c8
 800476c:	0801af98 	.word	0x0801af98
 8004770:	2000000c 	.word	0x2000000c
 8004774:	20000740 	.word	0x20000740
 8004778:	0801afa4 	.word	0x0801afa4
 800477c:	20000738 	.word	0x20000738
 8004780:	0801afb0 	.word	0x0801afb0
			 			 					}
			 			 	else{ //if the GPS doesn't have a fix, print a message
			 			 						char *str = (char*)malloc(sizeof(char)*20);
 8004784:	2014      	movs	r0, #20
 8004786:	f010 f8a7 	bl	80148d8 <malloc>
 800478a:	4603      	mov	r3, r0
 800478c:	643b      	str	r3, [r7, #64]	; 0x40
			 			 						ssd1306_SetCursor(32, 32);
 800478e:	2120      	movs	r1, #32
 8004790:	2020      	movs	r0, #32
 8004792:	f7fe fac5 	bl	8002d20 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("INFO", Font_6x8, White);
 8004796:	4a65      	ldr	r2, [pc, #404]	; (800492c <statemachine+0x141c>)
 8004798:	2301      	movs	r3, #1
 800479a:	ca06      	ldmia	r2, {r1, r2}
 800479c:	4864      	ldr	r0, [pc, #400]	; (8004930 <statemachine+0x1420>)
 800479e:	f7fe fa99 	bl	8002cd4 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 41);
 80047a2:	2129      	movs	r1, #41	; 0x29
 80047a4:	2020      	movs	r0, #32
 80047a6:	f7fe fabb 	bl	8002d20 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "vbat=%0.2fV",vbat);
 80047aa:	4b62      	ldr	r3, [pc, #392]	; (8004934 <statemachine+0x1424>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fb feca 	bl	8000548 <__aeabi_f2d>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	e9cd 2300 	strd	r2, r3, [sp]
 80047bc:	4a5e      	ldr	r2, [pc, #376]	; (8004938 <statemachine+0x1428>)
 80047be:	210f      	movs	r1, #15
 80047c0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80047c2:	f011 ff83 	bl	80166cc <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80047c6:	4a59      	ldr	r2, [pc, #356]	; (800492c <statemachine+0x141c>)
 80047c8:	2301      	movs	r3, #1
 80047ca:	ca06      	ldmia	r2, {r1, r2}
 80047cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80047ce:	f7fe fa81 	bl	8002cd4 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 80047d2:	2132      	movs	r1, #50	; 0x32
 80047d4:	2020      	movs	r0, #32
 80047d6:	f7fe faa3 	bl	8002d20 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "T=%0.2fC",temp);
 80047da:	4b58      	ldr	r3, [pc, #352]	; (800493c <statemachine+0x142c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fb feb2 	bl	8000548 <__aeabi_f2d>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	e9cd 2300 	strd	r2, r3, [sp]
 80047ec:	4a54      	ldr	r2, [pc, #336]	; (8004940 <statemachine+0x1430>)
 80047ee:	210f      	movs	r1, #15
 80047f0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80047f2:	f011 ff6b 	bl	80166cc <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80047f6:	4a4d      	ldr	r2, [pc, #308]	; (800492c <statemachine+0x141c>)
 80047f8:	2301      	movs	r3, #1
 80047fa:	ca06      	ldmia	r2, {r1, r2}
 80047fc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80047fe:	f7fe fa69 	bl	8002cd4 <ssd1306_WriteString>
			 			 						free(str);
 8004802:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004804:	f010 f870 	bl	80148e8 <free>
			 			 					}
			  if(BTN_A>=1){
 8004808:	4b4e      	ldr	r3, [pc, #312]	; (8004944 <statemachine+0x1434>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	dd0b      	ble.n	8004828 <statemachine+0x1318>
			  		state++;
 8004810:	4b4d      	ldr	r3, [pc, #308]	; (8004948 <statemachine+0x1438>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	3301      	adds	r3, #1
 8004816:	b2da      	uxtb	r2, r3
 8004818:	4b4b      	ldr	r3, [pc, #300]	; (8004948 <statemachine+0x1438>)
 800481a:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 800481c:	4b49      	ldr	r3, [pc, #292]	; (8004944 <statemachine+0x1434>)
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8004822:	4b4a      	ldr	r3, [pc, #296]	; (800494c <statemachine+0x143c>)
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
			  		}
			  if(BTN_A_LONG>=1){
 8004828:	4b49      	ldr	r3, [pc, #292]	; (8004950 <statemachine+0x1440>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f340 8701 	ble.w	8005634 <statemachine+0x2124>
			  				 									 									  			 	state--;
 8004832:	4b45      	ldr	r3, [pc, #276]	; (8004948 <statemachine+0x1438>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	3b01      	subs	r3, #1
 8004838:	b2da      	uxtb	r2, r3
 800483a:	4b43      	ldr	r3, [pc, #268]	; (8004948 <statemachine+0x1438>)
 800483c:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 800483e:	4b41      	ldr	r3, [pc, #260]	; (8004944 <statemachine+0x1434>)
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8004844:	4b41      	ldr	r3, [pc, #260]	; (800494c <statemachine+0x143c>)
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 800484a:	4b41      	ldr	r3, [pc, #260]	; (8004950 <statemachine+0x1440>)
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8004850:	f000 bef0 	b.w	8005634 <statemachine+0x2124>

		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8004854:	2000      	movs	r0, #0
 8004856:	f7fe f921 	bl	8002a9c <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 800485a:	2120      	movs	r1, #32
 800485c:	2020      	movs	r0, #32
 800485e:	f7fe fa5f 	bl	8002d20 <ssd1306_SetCursor>
			  char *str = (char*)malloc(sizeof(char)*20);
 8004862:	2014      	movs	r0, #20
 8004864:	f010 f838 	bl	80148d8 <malloc>
 8004868:	4603      	mov	r3, r0
 800486a:	647b      	str	r3, [r7, #68]	; 0x44
			  ssd1306_WriteString("chrono", Font_6x8, White);
 800486c:	4a2f      	ldr	r2, [pc, #188]	; (800492c <statemachine+0x141c>)
 800486e:	2301      	movs	r3, #1
 8004870:	ca06      	ldmia	r2, {r1, r2}
 8004872:	4838      	ldr	r0, [pc, #224]	; (8004954 <statemachine+0x1444>)
 8004874:	f7fe fa2e 	bl	8002cd4 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 40);
 8004878:	2128      	movs	r1, #40	; 0x28
 800487a:	2020      	movs	r0, #32
 800487c:	f7fe fa50 	bl	8002d20 <ssd1306_SetCursor>

			  switch(chronostate){
 8004880:	4b35      	ldr	r3, [pc, #212]	; (8004958 <statemachine+0x1448>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d038      	beq.n	80048fa <statemachine+0x13ea>
 8004888:	2b02      	cmp	r3, #2
 800488a:	dc72      	bgt.n	8004972 <statemachine+0x1462>
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <statemachine+0x1386>
 8004890:	2b01      	cmp	r3, #1
 8004892:	d01d      	beq.n	80048d0 <statemachine+0x13c0>
 8004894:	e06d      	b.n	8004972 <statemachine+0x1462>
			  case STATE_RESET:
				  min=0;
 8004896:	4b31      	ldr	r3, [pc, #196]	; (800495c <statemachine+0x144c>)
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
				  seconde=0;
 800489e:	4b30      	ldr	r3, [pc, #192]	; (8004960 <statemachine+0x1450>)
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
				  calctime=0;
 80048a6:	4b2f      	ldr	r3, [pc, #188]	; (8004964 <statemachine+0x1454>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
				  	 if(BTN_B>=1){
 80048ac:	4b27      	ldr	r3, [pc, #156]	; (800494c <statemachine+0x143c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	dd36      	ble.n	8004922 <statemachine+0x1412>
				  		chronostate++;
 80048b4:	4b28      	ldr	r3, [pc, #160]	; (8004958 <statemachine+0x1448>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	3301      	adds	r3, #1
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	4b26      	ldr	r3, [pc, #152]	; (8004958 <statemachine+0x1448>)
 80048be:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 80048c0:	4b22      	ldr	r3, [pc, #136]	; (800494c <statemachine+0x143c>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 80048c6:	4b28      	ldr	r3, [pc, #160]	; (8004968 <statemachine+0x1458>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a28      	ldr	r2, [pc, #160]	; (800496c <statemachine+0x145c>)
 80048cc:	6013      	str	r3, [r2, #0]

				  }


				  break;
 80048ce:	e028      	b.n	8004922 <statemachine+0x1412>
			  case STATE_RUN:
				  calctime=uwTick-starttime;
 80048d0:	4b25      	ldr	r3, [pc, #148]	; (8004968 <statemachine+0x1458>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	4b25      	ldr	r3, [pc, #148]	; (800496c <statemachine+0x145c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	4a22      	ldr	r2, [pc, #136]	; (8004964 <statemachine+0x1454>)
 80048dc:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 80048de:	4b1b      	ldr	r3, [pc, #108]	; (800494c <statemachine+0x143c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	dd1f      	ble.n	8004926 <statemachine+0x1416>
				  		chronostate++;
 80048e6:	4b1c      	ldr	r3, [pc, #112]	; (8004958 <statemachine+0x1448>)
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	3301      	adds	r3, #1
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <statemachine+0x1448>)
 80048f0:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 80048f2:	4b16      	ldr	r3, [pc, #88]	; (800494c <statemachine+0x143c>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
			  }


				  break;
 80048f8:	e015      	b.n	8004926 <statemachine+0x1416>
			  case STATE_PAUSE:
				  if(BTN_B>=1){
 80048fa:	4b14      	ldr	r3, [pc, #80]	; (800494c <statemachine+0x143c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	dd36      	ble.n	8004970 <statemachine+0x1460>
				  			chronostate--;
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <statemachine+0x1448>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	3b01      	subs	r3, #1
 8004908:	b2da      	uxtb	r2, r3
 800490a:	4b13      	ldr	r3, [pc, #76]	; (8004958 <statemachine+0x1448>)
 800490c:	701a      	strb	r2, [r3, #0]
				  			chronostate--;
 800490e:	4b12      	ldr	r3, [pc, #72]	; (8004958 <statemachine+0x1448>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	3b01      	subs	r3, #1
 8004914:	b2da      	uxtb	r2, r3
 8004916:	4b10      	ldr	r3, [pc, #64]	; (8004958 <statemachine+0x1448>)
 8004918:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 800491a:	4b0c      	ldr	r3, [pc, #48]	; (800494c <statemachine+0x143c>)
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
			 }

				  break;
 8004920:	e026      	b.n	8004970 <statemachine+0x1460>
				  break;
 8004922:	bf00      	nop
 8004924:	e025      	b.n	8004972 <statemachine+0x1462>
				  break;
 8004926:	bf00      	nop
 8004928:	e023      	b.n	8004972 <statemachine+0x1462>
 800492a:	bf00      	nop
 800492c:	2000000c 	.word	0x2000000c
 8004930:	0801afbc 	.word	0x0801afbc
 8004934:	20000740 	.word	0x20000740
 8004938:	0801afc4 	.word	0x0801afc4
 800493c:	20000738 	.word	0x20000738
 8004940:	0801afb0 	.word	0x0801afb0
 8004944:	20000708 	.word	0x20000708
 8004948:	20000478 	.word	0x20000478
 800494c:	2000070c 	.word	0x2000070c
 8004950:	20000a60 	.word	0x20000a60
 8004954:	0801afd0 	.word	0x0801afd0
 8004958:	2000047c 	.word	0x2000047c
 800495c:	200009f8 	.word	0x200009f8
 8004960:	200009f4 	.word	0x200009f4
 8004964:	20000a00 	.word	0x20000a00
 8004968:	20001264 	.word	0x20001264
 800496c:	200009fc 	.word	0x200009fc
				  break;
 8004970:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8004972:	4ba5      	ldr	r3, [pc, #660]	; (8004c08 <statemachine+0x16f8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497e:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8004c0c <statemachine+0x16fc>
 8004982:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004986:	ee16 0a90 	vmov	r0, s13
 800498a:	f7fb fddd 	bl	8000548 <__aeabi_f2d>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	ec43 2b10 	vmov	d0, r2, r3
 8004996:	f014 fde3 	bl	8019560 <floor>
 800499a:	ec53 2b10 	vmov	r2, r3, d0
 800499e:	4610      	mov	r0, r2
 80049a0:	4619      	mov	r1, r3
 80049a2:	f7fc f921 	bl	8000be8 <__aeabi_d2f>
 80049a6:	4603      	mov	r3, r0
 80049a8:	4a99      	ldr	r2, [pc, #612]	; (8004c10 <statemachine+0x1700>)
 80049aa:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 80049ac:	4b96      	ldr	r3, [pc, #600]	; (8004c08 <statemachine+0x16f8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049b8:	4b95      	ldr	r3, [pc, #596]	; (8004c10 <statemachine+0x1700>)
 80049ba:	edd3 7a00 	vldr	s15, [r3]
 80049be:	eddf 6a93 	vldr	s13, [pc, #588]	; 8004c0c <statemachine+0x16fc>
 80049c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80049c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80049ca:	eddf 6a92 	vldr	s13, [pc, #584]	; 8004c14 <statemachine+0x1704>
 80049ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049d2:	4b91      	ldr	r3, [pc, #580]	; (8004c18 <statemachine+0x1708>)
 80049d4:	edc3 7a00 	vstr	s15, [r3]
			  snprintf(str,15, "%0.0fmin",min);
 80049d8:	4b8d      	ldr	r3, [pc, #564]	; (8004c10 <statemachine+0x1700>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fb fdb3 	bl	8000548 <__aeabi_f2d>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	e9cd 2300 	strd	r2, r3, [sp]
 80049ea:	4a8c      	ldr	r2, [pc, #560]	; (8004c1c <statemachine+0x170c>)
 80049ec:	210f      	movs	r1, #15
 80049ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80049f0:	f011 fe6c 	bl	80166cc <sniprintf>
			  ssd1306_WriteString(str, Font_7x10, White);
 80049f4:	4a8a      	ldr	r2, [pc, #552]	; (8004c20 <statemachine+0x1710>)
 80049f6:	2301      	movs	r3, #1
 80049f8:	ca06      	ldmia	r2, {r1, r2}
 80049fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80049fc:	f7fe f96a 	bl	8002cd4 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8004a00:	2132      	movs	r1, #50	; 0x32
 8004a02:	2020      	movs	r0, #32
 8004a04:	f7fe f98c 	bl	8002d20 <ssd1306_SetCursor>
			  snprintf(str,15, "%0.3fsec",seconde);
 8004a08:	4b83      	ldr	r3, [pc, #524]	; (8004c18 <statemachine+0x1708>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fb fd9b 	bl	8000548 <__aeabi_f2d>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	e9cd 2300 	strd	r2, r3, [sp]
 8004a1a:	4a82      	ldr	r2, [pc, #520]	; (8004c24 <statemachine+0x1714>)
 8004a1c:	210f      	movs	r1, #15
 8004a1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004a20:	f011 fe54 	bl	80166cc <sniprintf>
			  ssd1306_WriteString(str, Font_6x8, White);
 8004a24:	4a80      	ldr	r2, [pc, #512]	; (8004c28 <statemachine+0x1718>)
 8004a26:	2301      	movs	r3, #1
 8004a28:	ca06      	ldmia	r2, {r1, r2}
 8004a2a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004a2c:	f7fe f952 	bl	8002cd4 <ssd1306_WriteString>
			  free(str);
 8004a30:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004a32:	f00f ff59 	bl	80148e8 <free>


			  if(BTN_A>=1){
 8004a36:	4b7d      	ldr	r3, [pc, #500]	; (8004c2c <statemachine+0x171c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	dd0b      	ble.n	8004a56 <statemachine+0x1546>
			 	state++;
 8004a3e:	4b7c      	ldr	r3, [pc, #496]	; (8004c30 <statemachine+0x1720>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	3301      	adds	r3, #1
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	4b7a      	ldr	r3, [pc, #488]	; (8004c30 <statemachine+0x1720>)
 8004a48:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8004a4a:	4b78      	ldr	r3, [pc, #480]	; (8004c2c <statemachine+0x171c>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8004a50:	4b78      	ldr	r3, [pc, #480]	; (8004c34 <statemachine+0x1724>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]


	}
			  if(BTN_A_LONG>=1){
 8004a56:	4b78      	ldr	r3, [pc, #480]	; (8004c38 <statemachine+0x1728>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f340 85ec 	ble.w	8005638 <statemachine+0x2128>
			  				 									 									  			 	state--;
 8004a60:	4b73      	ldr	r3, [pc, #460]	; (8004c30 <statemachine+0x1720>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	4b71      	ldr	r3, [pc, #452]	; (8004c30 <statemachine+0x1720>)
 8004a6a:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8004a6c:	4b6f      	ldr	r3, [pc, #444]	; (8004c2c <statemachine+0x171c>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8004a72:	4b70      	ldr	r3, [pc, #448]	; (8004c34 <statemachine+0x1724>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8004a78:	4b6f      	ldr	r3, [pc, #444]	; (8004c38 <statemachine+0x1728>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8004a7e:	f000 bddb 	b.w	8005638 <statemachine+0x2128>


			  case STATE_BALISE:
				  ssd1306_Fill(Black);
 8004a82:	2000      	movs	r0, #0
 8004a84:	f7fe f80a 	bl	8002a9c <ssd1306_Fill>

				  if(settimeen==0){
 8004a88:	4b6c      	ldr	r3, [pc, #432]	; (8004c3c <statemachine+0x172c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d145      	bne.n	8004b1c <statemachine+0x160c>

					  if(myData.fix==1){
 8004a90:	4b6b      	ldr	r3, [pc, #428]	; (8004c40 <statemachine+0x1730>)
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d141      	bne.n	8004b1c <statemachine+0x160c>
						settimeen=1;
 8004a98:	4b68      	ldr	r3, [pc, #416]	; (8004c3c <statemachine+0x172c>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
						HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8004a9e:	4b68      	ldr	r3, [pc, #416]	; (8004c40 <statemachine+0x1730>)
 8004aa0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	461a      	mov	r2, r3
 8004aac:	0092      	lsls	r2, r2, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	4b62      	ldr	r3, [pc, #392]	; (8004c40 <statemachine+0x1730>)
 8004ab6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	4b5f      	ldr	r3, [pc, #380]	; (8004c44 <statemachine+0x1734>)
 8004ac6:	701a      	strb	r2, [r3, #0]
						MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8004ac8:	4b5d      	ldr	r3, [pc, #372]	; (8004c40 <statemachine+0x1730>)
 8004aca:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	0092      	lsls	r2, r2, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	4b58      	ldr	r3, [pc, #352]	; (8004c40 <statemachine+0x1730>)
 8004ae0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	4b56      	ldr	r3, [pc, #344]	; (8004c48 <statemachine+0x1738>)
 8004af0:	701a      	strb	r2, [r3, #0]
						SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004af2:	4b53      	ldr	r3, [pc, #332]	; (8004c40 <statemachine+0x1730>)
 8004af4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	461a      	mov	r2, r3
 8004b00:	0092      	lsls	r2, r2, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	4b4d      	ldr	r3, [pc, #308]	; (8004c40 <statemachine+0x1730>)
 8004b0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	4413      	add	r3, r2
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	4b4c      	ldr	r3, [pc, #304]	; (8004c4c <statemachine+0x173c>)
 8004b1a:	701a      	strb	r2, [r3, #0]





				  switch(balisestate){
 8004b1c:	4b4c      	ldr	r3, [pc, #304]	; (8004c50 <statemachine+0x1740>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	f000 8227 	beq.w	8004f74 <statemachine+0x1a64>
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	f300 8588 	bgt.w	800563c <statemachine+0x212c>
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d004      	beq.n	8004b3a <statemachine+0x162a>
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	f000 809d 	beq.w	8004c70 <statemachine+0x1760>
					  				 									 									  	}

				  }


				  break;
 8004b36:	f000 bd81 	b.w	800563c <statemachine+0x212c>
					  ssd1306_SetCursor(32,32);
 8004b3a:	2120      	movs	r1, #32
 8004b3c:	2020      	movs	r0, #32
 8004b3e:	f7fe f8ef 	bl	8002d20 <ssd1306_SetCursor>
					  ssd1306_WriteString("Tracker",Font_6x8,White);
 8004b42:	4a39      	ldr	r2, [pc, #228]	; (8004c28 <statemachine+0x1718>)
 8004b44:	2301      	movs	r3, #1
 8004b46:	ca06      	ldmia	r2, {r1, r2}
 8004b48:	4842      	ldr	r0, [pc, #264]	; (8004c54 <statemachine+0x1744>)
 8004b4a:	f7fe f8c3 	bl	8002cd4 <ssd1306_WriteString>
					  snprintf((char *)bufferscreen,50, "off=%d",pageoffset);
 8004b4e:	4b42      	ldr	r3, [pc, #264]	; (8004c58 <statemachine+0x1748>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a42      	ldr	r2, [pc, #264]	; (8004c5c <statemachine+0x174c>)
 8004b54:	2132      	movs	r1, #50	; 0x32
 8004b56:	4842      	ldr	r0, [pc, #264]	; (8004c60 <statemachine+0x1750>)
 8004b58:	f011 fdb8 	bl	80166cc <sniprintf>
					  ssd1306_SetCursor(32,40);
 8004b5c:	2128      	movs	r1, #40	; 0x28
 8004b5e:	2020      	movs	r0, #32
 8004b60:	f7fe f8de 	bl	8002d20 <ssd1306_SetCursor>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004b64:	4a30      	ldr	r2, [pc, #192]	; (8004c28 <statemachine+0x1718>)
 8004b66:	2301      	movs	r3, #1
 8004b68:	ca06      	ldmia	r2, {r1, r2}
 8004b6a:	483d      	ldr	r0, [pc, #244]	; (8004c60 <statemachine+0x1750>)
 8004b6c:	f7fe f8b2 	bl	8002cd4 <ssd1306_WriteString>
					  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 8004b70:	4b3c      	ldr	r3, [pc, #240]	; (8004c64 <statemachine+0x1754>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a3c      	ldr	r2, [pc, #240]	; (8004c68 <statemachine+0x1758>)
 8004b76:	2132      	movs	r1, #50	; 0x32
 8004b78:	4839      	ldr	r0, [pc, #228]	; (8004c60 <statemachine+0x1750>)
 8004b7a:	f011 fda7 	bl	80166cc <sniprintf>
					  ssd1306_SetCursor(32,48);
 8004b7e:	2130      	movs	r1, #48	; 0x30
 8004b80:	2020      	movs	r0, #32
 8004b82:	f7fe f8cd 	bl	8002d20 <ssd1306_SetCursor>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004b86:	4a28      	ldr	r2, [pc, #160]	; (8004c28 <statemachine+0x1718>)
 8004b88:	2301      	movs	r3, #1
 8004b8a:	ca06      	ldmia	r2, {r1, r2}
 8004b8c:	4834      	ldr	r0, [pc, #208]	; (8004c60 <statemachine+0x1750>)
 8004b8e:	f7fe f8a1 	bl	8002cd4 <ssd1306_WriteString>
					  if(BTN_B>=1){
 8004b92:	4b28      	ldr	r3, [pc, #160]	; (8004c34 <statemachine+0x1724>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	dd0e      	ble.n	8004bb8 <statemachine+0x16a8>
						balisestate++;
 8004b9a:	4b2d      	ldr	r3, [pc, #180]	; (8004c50 <statemachine+0x1740>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	4b2b      	ldr	r3, [pc, #172]	; (8004c50 <statemachine+0x1740>)
 8004ba4:	701a      	strb	r2, [r3, #0]
						BTN_B=0;
 8004ba6:	4b23      	ldr	r3, [pc, #140]	; (8004c34 <statemachine+0x1724>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
						BTN_A=0;
 8004bac:	4b1f      	ldr	r3, [pc, #124]	; (8004c2c <statemachine+0x171c>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim7);
 8004bb2:	482e      	ldr	r0, [pc, #184]	; (8004c6c <statemachine+0x175c>)
 8004bb4:	f008 f99a 	bl	800ceec <HAL_TIM_Base_Start_IT>
					  if(BTN_A>=1){
 8004bb8:	4b1c      	ldr	r3, [pc, #112]	; (8004c2c <statemachine+0x171c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	dd0e      	ble.n	8004bde <statemachine+0x16ce>
					  				  			 	state++;
 8004bc0:	4b1b      	ldr	r3, [pc, #108]	; (8004c30 <statemachine+0x1720>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <statemachine+0x1720>)
 8004bca:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 8004bcc:	4b17      	ldr	r3, [pc, #92]	; (8004c2c <statemachine+0x171c>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 8004bd2:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <statemachine+0x1724>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]
					  				  			 	settimeen=0;
 8004bd8:	4b18      	ldr	r3, [pc, #96]	; (8004c3c <statemachine+0x172c>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
					  if(BTN_A_LONG>=1){
 8004bde:	4b16      	ldr	r3, [pc, #88]	; (8004c38 <statemachine+0x1728>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f340 8217 	ble.w	8005016 <statemachine+0x1b06>
					  				 									 									  			 	state--;
 8004be8:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <statemachine+0x1720>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	4b0f      	ldr	r3, [pc, #60]	; (8004c30 <statemachine+0x1720>)
 8004bf2:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 8004bf4:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <statemachine+0x171c>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 8004bfa:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <statemachine+0x1724>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 8004c00:	4b0d      	ldr	r3, [pc, #52]	; (8004c38 <statemachine+0x1728>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
					  break;
 8004c06:	e206      	b.n	8005016 <statemachine+0x1b06>
 8004c08:	20000a00 	.word	0x20000a00
 8004c0c:	476a6000 	.word	0x476a6000
 8004c10:	200009f8 	.word	0x200009f8
 8004c14:	447a0000 	.word	0x447a0000
 8004c18:	200009f4 	.word	0x200009f4
 8004c1c:	0801afd8 	.word	0x0801afd8
 8004c20:	20000014 	.word	0x20000014
 8004c24:	0801afe4 	.word	0x0801afe4
 8004c28:	2000000c 	.word	0x2000000c
 8004c2c:	20000708 	.word	0x20000708
 8004c30:	20000478 	.word	0x20000478
 8004c34:	2000070c 	.word	0x2000070c
 8004c38:	20000a60 	.word	0x20000a60
 8004c3c:	20000fd4 	.word	0x20000fd4
 8004c40:	200006c8 	.word	0x200006c8
 8004c44:	20000a49 	.word	0x20000a49
 8004c48:	20000a4a 	.word	0x20000a4a
 8004c4c:	20000a48 	.word	0x20000a48
 8004c50:	2000047e 	.word	0x2000047e
 8004c54:	0801aff0 	.word	0x0801aff0
 8004c58:	20000958 	.word	0x20000958
 8004c5c:	0801aff8 	.word	0x0801aff8
 8004c60:	2000097c 	.word	0x2000097c
 8004c64:	2000095c 	.word	0x2000095c
 8004c68:	0801b000 	.word	0x0801b000
 8004c6c:	20001074 	.word	0x20001074
					  erasetime=HAL_GetTick();
 8004c70:	f001 fbda 	bl	8006428 <HAL_GetTick>
 8004c74:	4603      	mov	r3, r0
 8004c76:	461a      	mov	r2, r3
 8004c78:	4b63      	ldr	r3, [pc, #396]	; (8004e08 <statemachine+0x18f8>)
 8004c7a:	601a      	str	r2, [r3, #0]
					  if(pagenumber+1>=MAX_WRITE_PAGE){
 8004c7c:	4b63      	ldr	r3, [pc, #396]	; (8004e0c <statemachine+0x18fc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f246 32fd 	movw	r2, #25597	; 0x63fd
 8004c84:	4293      	cmp	r3, r2
 8004c86:	dd05      	ble.n	8004c94 <statemachine+0x1784>
						  HAL_TIM_Base_Stop_IT(&htim7);
 8004c88:	4861      	ldr	r0, [pc, #388]	; (8004e10 <statemachine+0x1900>)
 8004c8a:	f008 f983 	bl	800cf94 <HAL_TIM_Base_Stop_IT>
						  balisestate=2;
 8004c8e:	4b61      	ldr	r3, [pc, #388]	; (8004e14 <statemachine+0x1904>)
 8004c90:	2202      	movs	r2, #2
 8004c92:	701a      	strb	r2, [r3, #0]
					  if(enablewrite==1){
 8004c94:	4b60      	ldr	r3, [pc, #384]	; (8004e18 <statemachine+0x1908>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	f040 809b 	bne.w	8004dd4 <statemachine+0x18c4>
						  oldlat=myData.latitude;
 8004c9e:	4b5f      	ldr	r3, [pc, #380]	; (8004e1c <statemachine+0x190c>)
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	495e      	ldr	r1, [pc, #376]	; (8004e20 <statemachine+0x1910>)
 8004ca6:	e9c1 2300 	strd	r2, r3, [r1]
						  oldlong=myData.longitude;
 8004caa:	4b5c      	ldr	r3, [pc, #368]	; (8004e1c <statemachine+0x190c>)
 8004cac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004cb0:	495c      	ldr	r1, [pc, #368]	; (8004e24 <statemachine+0x1914>)
 8004cb2:	e9c1 2300 	strd	r2, r3, [r1]
						  nmea_parse(&myData, DataBuffer);
 8004cb6:	495c      	ldr	r1, [pc, #368]	; (8004e28 <statemachine+0x1918>)
 8004cb8:	4858      	ldr	r0, [pc, #352]	; (8004e1c <statemachine+0x190c>)
 8004cba:	f7fd fa07 	bl	80020cc <nmea_parse>
						  distance1sec=distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 8004cbe:	4b58      	ldr	r3, [pc, #352]	; (8004e20 <statemachine+0x1910>)
 8004cc0:	ed93 7b00 	vldr	d7, [r3]
 8004cc4:	4b55      	ldr	r3, [pc, #340]	; (8004e1c <statemachine+0x190c>)
 8004cc6:	ed93 6b00 	vldr	d6, [r3]
 8004cca:	4b56      	ldr	r3, [pc, #344]	; (8004e24 <statemachine+0x1914>)
 8004ccc:	ed93 5b00 	vldr	d5, [r3]
 8004cd0:	4b52      	ldr	r3, [pc, #328]	; (8004e1c <statemachine+0x190c>)
 8004cd2:	ed93 4b04 	vldr	d4, [r3, #16]
 8004cd6:	eeb0 3a44 	vmov.f32	s6, s8
 8004cda:	eef0 3a64 	vmov.f32	s7, s9
 8004cde:	eeb0 2a45 	vmov.f32	s4, s10
 8004ce2:	eef0 2a65 	vmov.f32	s5, s11
 8004ce6:	eeb0 1a46 	vmov.f32	s2, s12
 8004cea:	eef0 1a66 	vmov.f32	s3, s13
 8004cee:	eeb0 0a47 	vmov.f32	s0, s14
 8004cf2:	eef0 0a67 	vmov.f32	s1, s15
 8004cf6:	f7fd fa9b 	bl	8002230 <distancecalc>
 8004cfa:	eeb0 7a40 	vmov.f32	s14, s0
 8004cfe:	eef0 7a60 	vmov.f32	s15, s1
 8004d02:	4b4a      	ldr	r3, [pc, #296]	; (8004e2c <statemachine+0x191c>)
 8004d04:	ed83 7b00 	vstr	d7, [r3]
						  if(distance1sec>=139){//correspond à 500kmh pendant 1sec
 8004d08:	4b48      	ldr	r3, [pc, #288]	; (8004e2c <statemachine+0x191c>)
 8004d0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d0e:	a33c      	add	r3, pc, #240	; (adr r3, 8004e00 <statemachine+0x18f0>)
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	f7fb fef6 	bl	8000b04 <__aeabi_dcmpge>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d02b      	beq.n	8004d76 <statemachine+0x1866>
							  myData.latitude=oldlat;
 8004d1e:	4b40      	ldr	r3, [pc, #256]	; (8004e20 <statemachine+0x1910>)
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	493d      	ldr	r1, [pc, #244]	; (8004e1c <statemachine+0x190c>)
 8004d26:	e9c1 2300 	strd	r2, r3, [r1]
							  myData.longitude=oldlong;
 8004d2a:	4b3e      	ldr	r3, [pc, #248]	; (8004e24 <statemachine+0x1914>)
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	493a      	ldr	r1, [pc, #232]	; (8004e1c <statemachine+0x190c>)
 8004d32:	e9c1 2304 	strd	r2, r3, [r1, #16]
							  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004d36:	4b3e      	ldr	r3, [pc, #248]	; (8004e30 <statemachine+0x1920>)
 8004d38:	edd3 7a00 	vldr	s15, [r3]
 8004d3c:	4b3d      	ldr	r3, [pc, #244]	; (8004e34 <statemachine+0x1924>)
 8004d3e:	ed93 7a00 	vldr	s14, [r3]
 8004d42:	4b36      	ldr	r3, [pc, #216]	; (8004e1c <statemachine+0x190c>)
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	4a35      	ldr	r2, [pc, #212]	; (8004e1c <statemachine+0x190c>)
 8004d48:	edd2 6a08 	vldr	s13, [r2, #32]
 8004d4c:	eeb0 1a66 	vmov.f32	s2, s13
 8004d50:	461a      	mov	r2, r3
 8004d52:	4932      	ldr	r1, [pc, #200]	; (8004e1c <statemachine+0x190c>)
 8004d54:	eef0 0a47 	vmov.f32	s1, s14
 8004d58:	eeb0 0a67 	vmov.f32	s0, s15
 8004d5c:	4836      	ldr	r0, [pc, #216]	; (8004e38 <statemachine+0x1928>)
 8004d5e:	f7fd fc37 	bl	80025d0 <csvframe>
 8004d62:	4603      	mov	r3, r0
 8004d64:	4a35      	ldr	r2, [pc, #212]	; (8004e3c <statemachine+0x192c>)
 8004d66:	6013      	str	r3, [r2, #0]
							  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004d68:	4b34      	ldr	r3, [pc, #208]	; (8004e3c <statemachine+0x192c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4832      	ldr	r0, [pc, #200]	; (8004e38 <statemachine+0x1928>)
 8004d70:	f7fd fd64 	bl	800283c <writebuffertoflash>
 8004d74:	e02b      	b.n	8004dce <statemachine+0x18be>
							  distanceparcouru=distanceparcouru + distance1sec;
 8004d76:	4b32      	ldr	r3, [pc, #200]	; (8004e40 <statemachine+0x1930>)
 8004d78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d7c:	4b2b      	ldr	r3, [pc, #172]	; (8004e2c <statemachine+0x191c>)
 8004d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d82:	f7fb fa83 	bl	800028c <__adddf3>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	492d      	ldr	r1, [pc, #180]	; (8004e40 <statemachine+0x1930>)
 8004d8c:	e9c1 2300 	strd	r2, r3, [r1]
							  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004d90:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <statemachine+0x1920>)
 8004d92:	edd3 7a00 	vldr	s15, [r3]
 8004d96:	4b27      	ldr	r3, [pc, #156]	; (8004e34 <statemachine+0x1924>)
 8004d98:	ed93 7a00 	vldr	s14, [r3]
 8004d9c:	4b1f      	ldr	r3, [pc, #124]	; (8004e1c <statemachine+0x190c>)
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	4a1e      	ldr	r2, [pc, #120]	; (8004e1c <statemachine+0x190c>)
 8004da2:	edd2 6a08 	vldr	s13, [r2, #32]
 8004da6:	eeb0 1a66 	vmov.f32	s2, s13
 8004daa:	461a      	mov	r2, r3
 8004dac:	491b      	ldr	r1, [pc, #108]	; (8004e1c <statemachine+0x190c>)
 8004dae:	eef0 0a47 	vmov.f32	s1, s14
 8004db2:	eeb0 0a67 	vmov.f32	s0, s15
 8004db6:	4820      	ldr	r0, [pc, #128]	; (8004e38 <statemachine+0x1928>)
 8004db8:	f7fd fc0a 	bl	80025d0 <csvframe>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	4a1f      	ldr	r2, [pc, #124]	; (8004e3c <statemachine+0x192c>)
 8004dc0:	6013      	str	r3, [r2, #0]
							  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004dc2:	4b1e      	ldr	r3, [pc, #120]	; (8004e3c <statemachine+0x192c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	481b      	ldr	r0, [pc, #108]	; (8004e38 <statemachine+0x1928>)
 8004dca:	f7fd fd37 	bl	800283c <writebuffertoflash>
						  enablewrite=0;
 8004dce:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <statemachine+0x1908>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
					  if(doubledonnee==0){
 8004dd4:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <statemachine+0x1934>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d13b      	bne.n	8004e54 <statemachine+0x1944>
					 	ssd1306_SetCursor(32,32);
 8004ddc:	2120      	movs	r1, #32
 8004dde:	2020      	movs	r0, #32
 8004de0:	f7fd ff9e 	bl	8002d20 <ssd1306_SetCursor>
					 	snprintf((char *)bufferscreen,50,"p=%d",pagenumber);
 8004de4:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <statemachine+0x18fc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a17      	ldr	r2, [pc, #92]	; (8004e48 <statemachine+0x1938>)
 8004dea:	2132      	movs	r1, #50	; 0x32
 8004dec:	4817      	ldr	r0, [pc, #92]	; (8004e4c <statemachine+0x193c>)
 8004dee:	f011 fc6d 	bl	80166cc <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004df2:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <statemachine+0x1940>)
 8004df4:	2301      	movs	r3, #1
 8004df6:	ca06      	ldmia	r2, {r1, r2}
 8004df8:	4814      	ldr	r0, [pc, #80]	; (8004e4c <statemachine+0x193c>)
 8004dfa:	f7fd ff6b 	bl	8002cd4 <ssd1306_WriteString>
 8004dfe:	e03d      	b.n	8004e7c <statemachine+0x196c>
 8004e00:	00000000 	.word	0x00000000
 8004e04:	40616000 	.word	0x40616000
 8004e08:	20000a08 	.word	0x20000a08
 8004e0c:	2000095c 	.word	0x2000095c
 8004e10:	20001074 	.word	0x20001074
 8004e14:	2000047e 	.word	0x2000047e
 8004e18:	20000a38 	.word	0x20000a38
 8004e1c:	200006c8 	.word	0x200006c8
 8004e20:	20000a28 	.word	0x20000a28
 8004e24:	20000a30 	.word	0x20000a30
 8004e28:	200004c4 	.word	0x200004c4
 8004e2c:	20000a40 	.word	0x20000a40
 8004e30:	20000738 	.word	0x20000738
 8004e34:	20000740 	.word	0x20000740
 8004e38:	20000758 	.word	0x20000758
 8004e3c:	20000a04 	.word	0x20000a04
 8004e40:	20000a20 	.word	0x20000a20
 8004e44:	20000a18 	.word	0x20000a18
 8004e48:	0801b008 	.word	0x0801b008
 8004e4c:	2000097c 	.word	0x2000097c
 8004e50:	20000014 	.word	0x20000014
					 	ssd1306_SetCursor(32,32);
 8004e54:	2120      	movs	r1, #32
 8004e56:	2020      	movs	r0, #32
 8004e58:	f7fd ff62 	bl	8002d20 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50,"d=%0.1lfm",distanceparcouru);
 8004e5c:	4b9e      	ldr	r3, [pc, #632]	; (80050d8 <statemachine+0x1bc8>)
 8004e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e62:	e9cd 2300 	strd	r2, r3, [sp]
 8004e66:	4a9d      	ldr	r2, [pc, #628]	; (80050dc <statemachine+0x1bcc>)
 8004e68:	2132      	movs	r1, #50	; 0x32
 8004e6a:	489d      	ldr	r0, [pc, #628]	; (80050e0 <statemachine+0x1bd0>)
 8004e6c:	f011 fc2e 	bl	80166cc <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004e70:	4a9c      	ldr	r2, [pc, #624]	; (80050e4 <statemachine+0x1bd4>)
 8004e72:	2301      	movs	r3, #1
 8004e74:	ca06      	ldmia	r2, {r1, r2}
 8004e76:	489a      	ldr	r0, [pc, #616]	; (80050e0 <statemachine+0x1bd0>)
 8004e78:	f7fd ff2c 	bl	8002cd4 <ssd1306_WriteString>
					 	ssd1306_SetCursor(32,42);
 8004e7c:	212a      	movs	r1, #42	; 0x2a
 8004e7e:	2020      	movs	r0, #32
 8004e80:	f7fd ff4e 	bl	8002d20 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 8004e84:	4b98      	ldr	r3, [pc, #608]	; (80050e8 <statemachine+0x1bd8>)
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	4a98      	ldr	r2, [pc, #608]	; (80050ec <statemachine+0x1bdc>)
 8004e8a:	2132      	movs	r1, #50	; 0x32
 8004e8c:	4894      	ldr	r0, [pc, #592]	; (80050e0 <statemachine+0x1bd0>)
 8004e8e:	f011 fc1d 	bl	80166cc <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004e92:	4a97      	ldr	r2, [pc, #604]	; (80050f0 <statemachine+0x1be0>)
 8004e94:	2301      	movs	r3, #1
 8004e96:	ca06      	ldmia	r2, {r1, r2}
 8004e98:	4891      	ldr	r0, [pc, #580]	; (80050e0 <statemachine+0x1bd0>)
 8004e9a:	f7fd ff1b 	bl	8002cd4 <ssd1306_WriteString>
					 	batterygauge(vbat,34, 50,1);
 8004e9e:	4b95      	ldr	r3, [pc, #596]	; (80050f4 <statemachine+0x1be4>)
 8004ea0:	edd3 7a00 	vldr	s15, [r3]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	2132      	movs	r1, #50	; 0x32
 8004ea8:	2022      	movs	r0, #34	; 0x22
 8004eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8004eae:	f7fe f953 	bl	8003158 <batterygauge>
					 	ssd1306_SetCursor(60,50);
 8004eb2:	2132      	movs	r1, #50	; 0x32
 8004eb4:	203c      	movs	r0, #60	; 0x3c
 8004eb6:	f7fd ff33 	bl	8002d20 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 8004eba:	4b8e      	ldr	r3, [pc, #568]	; (80050f4 <statemachine+0x1be4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fb fb42 	bl	8000548 <__aeabi_f2d>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	e9cd 2300 	strd	r2, r3, [sp]
 8004ecc:	4a8a      	ldr	r2, [pc, #552]	; (80050f8 <statemachine+0x1be8>)
 8004ece:	2132      	movs	r1, #50	; 0x32
 8004ed0:	4883      	ldr	r0, [pc, #524]	; (80050e0 <statemachine+0x1bd0>)
 8004ed2:	f011 fbfb 	bl	80166cc <sniprintf>
					 	if(cptdoubledonnee==3){
 8004ed6:	4b89      	ldr	r3, [pc, #548]	; (80050fc <statemachine+0x1bec>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	d108      	bne.n	8004ef0 <statemachine+0x19e0>
					 	  		doubledonnee=1-doubledonnee;
 8004ede:	4b88      	ldr	r3, [pc, #544]	; (8005100 <statemachine+0x1bf0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f1c3 0301 	rsb	r3, r3, #1
 8004ee6:	4a86      	ldr	r2, [pc, #536]	; (8005100 <statemachine+0x1bf0>)
 8004ee8:	6013      	str	r3, [r2, #0]
					 	  		cptdoubledonnee=0;
 8004eea:	4b84      	ldr	r3, [pc, #528]	; (80050fc <statemachine+0x1bec>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
					 	erasetime=HAL_GetTick()-erasetime;
 8004ef0:	f001 fa9a 	bl	8006428 <HAL_GetTick>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	4a83      	ldr	r2, [pc, #524]	; (8005104 <statemachine+0x1bf4>)
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	461a      	mov	r2, r3
 8004efe:	4b81      	ldr	r3, [pc, #516]	; (8005104 <statemachine+0x1bf4>)
 8004f00:	601a      	str	r2, [r3, #0]
					 	if(maxtesttime<=erasetime){
 8004f02:	4b81      	ldr	r3, [pc, #516]	; (8005108 <statemachine+0x1bf8>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4b7f      	ldr	r3, [pc, #508]	; (8005104 <statemachine+0x1bf4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	dc03      	bgt.n	8004f16 <statemachine+0x1a06>
					 		maxtesttime=erasetime;
 8004f0e:	4b7d      	ldr	r3, [pc, #500]	; (8005104 <statemachine+0x1bf4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a7d      	ldr	r2, [pc, #500]	; (8005108 <statemachine+0x1bf8>)
 8004f14:	6013      	str	r3, [r2, #0]
					 	snprintf((char  *)bufferscreen,50,"%d",maxtesttime);
 8004f16:	4b7c      	ldr	r3, [pc, #496]	; (8005108 <statemachine+0x1bf8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a7c      	ldr	r2, [pc, #496]	; (800510c <statemachine+0x1bfc>)
 8004f1c:	2132      	movs	r1, #50	; 0x32
 8004f1e:	4870      	ldr	r0, [pc, #448]	; (80050e0 <statemachine+0x1bd0>)
 8004f20:	f011 fbd4 	bl	80166cc <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004f24:	4a72      	ldr	r2, [pc, #456]	; (80050f0 <statemachine+0x1be0>)
 8004f26:	2301      	movs	r3, #1
 8004f28:	ca06      	ldmia	r2, {r1, r2}
 8004f2a:	486d      	ldr	r0, [pc, #436]	; (80050e0 <statemachine+0x1bd0>)
 8004f2c:	f7fd fed2 	bl	8002cd4 <ssd1306_WriteString>
					  if(BTN_B>=1){
 8004f30:	4b77      	ldr	r3, [pc, #476]	; (8005110 <statemachine+0x1c00>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	dd0e      	ble.n	8004f56 <statemachine+0x1a46>
					  						  balisestate--;
 8004f38:	4b76      	ldr	r3, [pc, #472]	; (8005114 <statemachine+0x1c04>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	4b74      	ldr	r3, [pc, #464]	; (8005114 <statemachine+0x1c04>)
 8004f42:	701a      	strb	r2, [r3, #0]
					  						  BTN_B=0;
 8004f44:	4b72      	ldr	r3, [pc, #456]	; (8005110 <statemachine+0x1c00>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
					  						  BTN_A=0;
 8004f4a:	4b73      	ldr	r3, [pc, #460]	; (8005118 <statemachine+0x1c08>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
					  						  HAL_TIM_Base_Stop_IT(&htim7);
 8004f50:	4872      	ldr	r0, [pc, #456]	; (800511c <statemachine+0x1c0c>)
 8004f52:	f008 f81f 	bl	800cf94 <HAL_TIM_Base_Stop_IT>
					  if(BTN_B_LONG>=1){
 8004f56:	4b72      	ldr	r3, [pc, #456]	; (8005120 <statemachine+0x1c10>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	dd5d      	ble.n	800501a <statemachine+0x1b0a>
						distanceparcouru=0;
 8004f5e:	495e      	ldr	r1, [pc, #376]	; (80050d8 <statemachine+0x1bc8>)
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	e9c1 2300 	strd	r2, r3, [r1]
					  	BTN_B_LONG=0;
 8004f6c:	4b6c      	ldr	r3, [pc, #432]	; (8005120 <statemachine+0x1c10>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
					  break;
 8004f72:	e052      	b.n	800501a <statemachine+0x1b0a>
					  ssd1306_SetCursor(32,32);
 8004f74:	2120      	movs	r1, #32
 8004f76:	2020      	movs	r0, #32
 8004f78:	f7fd fed2 	bl	8002d20 <ssd1306_SetCursor>
					  ssd1306_WriteString("fin de",Font_6x8,White);
 8004f7c:	4a5c      	ldr	r2, [pc, #368]	; (80050f0 <statemachine+0x1be0>)
 8004f7e:	2301      	movs	r3, #1
 8004f80:	ca06      	ldmia	r2, {r1, r2}
 8004f82:	4868      	ldr	r0, [pc, #416]	; (8005124 <statemachine+0x1c14>)
 8004f84:	f7fd fea6 	bl	8002cd4 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 8004f88:	2128      	movs	r1, #40	; 0x28
 8004f8a:	2020      	movs	r0, #32
 8004f8c:	f7fd fec8 	bl	8002d20 <ssd1306_SetCursor>
					  ssd1306_WriteString("memoire",Font_6x8,White);
 8004f90:	4a57      	ldr	r2, [pc, #348]	; (80050f0 <statemachine+0x1be0>)
 8004f92:	2301      	movs	r3, #1
 8004f94:	ca06      	ldmia	r2, {r1, r2}
 8004f96:	4864      	ldr	r0, [pc, #400]	; (8005128 <statemachine+0x1c18>)
 8004f98:	f7fd fe9c 	bl	8002cd4 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,48);
 8004f9c:	2130      	movs	r1, #48	; 0x30
 8004f9e:	2020      	movs	r0, #32
 8004fa0:	f7fd febe 	bl	8002d20 <ssd1306_SetCursor>
					  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 8004fa4:	4b61      	ldr	r3, [pc, #388]	; (800512c <statemachine+0x1c1c>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4b61      	ldr	r3, [pc, #388]	; (8005130 <statemachine+0x1c20>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	4a60      	ldr	r2, [pc, #384]	; (8005134 <statemachine+0x1c24>)
 8004fb2:	2132      	movs	r1, #50	; 0x32
 8004fb4:	484a      	ldr	r0, [pc, #296]	; (80050e0 <statemachine+0x1bd0>)
 8004fb6:	f011 fb89 	bl	80166cc <sniprintf>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004fba:	4a4d      	ldr	r2, [pc, #308]	; (80050f0 <statemachine+0x1be0>)
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	ca06      	ldmia	r2, {r1, r2}
 8004fc0:	4847      	ldr	r0, [pc, #284]	; (80050e0 <statemachine+0x1bd0>)
 8004fc2:	f7fd fe87 	bl	8002cd4 <ssd1306_WriteString>
					  if(BTN_A>=1){
 8004fc6:	4b54      	ldr	r3, [pc, #336]	; (8005118 <statemachine+0x1c08>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	dd0e      	ble.n	8004fec <statemachine+0x1adc>
					  				  			 	state++;
 8004fce:	4b5a      	ldr	r3, [pc, #360]	; (8005138 <statemachine+0x1c28>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	4b58      	ldr	r3, [pc, #352]	; (8005138 <statemachine+0x1c28>)
 8004fd8:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 8004fda:	4b4f      	ldr	r3, [pc, #316]	; (8005118 <statemachine+0x1c08>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 8004fe0:	4b4b      	ldr	r3, [pc, #300]	; (8005110 <statemachine+0x1c00>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
					  				  			settimeen=0;
 8004fe6:	4b55      	ldr	r3, [pc, #340]	; (800513c <statemachine+0x1c2c>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
					  if(BTN_A_LONG>=1){
 8004fec:	4b54      	ldr	r3, [pc, #336]	; (8005140 <statemachine+0x1c30>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f340 8323 	ble.w	800563c <statemachine+0x212c>
					  				 									 									  			 	state--;
 8004ff6:	4b50      	ldr	r3, [pc, #320]	; (8005138 <statemachine+0x1c28>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	4b4e      	ldr	r3, [pc, #312]	; (8005138 <statemachine+0x1c28>)
 8005000:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 8005002:	4b45      	ldr	r3, [pc, #276]	; (8005118 <statemachine+0x1c08>)
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 8005008:	4b41      	ldr	r3, [pc, #260]	; (8005110 <statemachine+0x1c00>)
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 800500e:	4b4c      	ldr	r3, [pc, #304]	; (8005140 <statemachine+0x1c30>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
				  break;
 8005014:	e312      	b.n	800563c <statemachine+0x212c>
					  break;
 8005016:	bf00      	nop
 8005018:	e310      	b.n	800563c <statemachine+0x212c>
					  break;
 800501a:	bf00      	nop
				  break;
 800501c:	e30e      	b.n	800563c <statemachine+0x212c>


			  case STATE_USB:
				  ssd1306_Fill(Black);
 800501e:	2000      	movs	r0, #0
 8005020:	f7fd fd3c 	bl	8002a9c <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 8005024:	2120      	movs	r1, #32
 8005026:	2020      	movs	r0, #32
 8005028:	f7fd fe7a 	bl	8002d20 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 800502c:	4a30      	ldr	r2, [pc, #192]	; (80050f0 <statemachine+0x1be0>)
 800502e:	2301      	movs	r3, #1
 8005030:	ca06      	ldmia	r2, {r1, r2}
 8005032:	4844      	ldr	r0, [pc, #272]	; (8005144 <statemachine+0x1c34>)
 8005034:	f7fd fe4e 	bl	8002cd4 <ssd1306_WriteString>
				  switch(usbstate){
 8005038:	4b43      	ldr	r3, [pc, #268]	; (8005148 <statemachine+0x1c38>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b02      	cmp	r3, #2
 800503e:	f000 816a 	beq.w	8005316 <statemachine+0x1e06>
 8005042:	2b02      	cmp	r3, #2
 8005044:	f300 82fc 	bgt.w	8005640 <statemachine+0x2130>
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <statemachine+0x1b44>
 800504c:	2b01      	cmp	r3, #1
 800504e:	f000 8081 	beq.w	8005154 <statemachine+0x1c44>
				 									 									  			 	BTN_B=0;
				 									 									  			 	BTN_A_LONG=0;
				 									 									  	}
				 					 break;
				 				  }
				  break;
 8005052:	e2f5      	b.n	8005640 <statemachine+0x2130>
				 					  ssd1306_SetCursor(32,40);
 8005054:	2128      	movs	r1, #40	; 0x28
 8005056:	2020      	movs	r0, #32
 8005058:	f7fd fe62 	bl	8002d20 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 800505c:	4a24      	ldr	r2, [pc, #144]	; (80050f0 <statemachine+0x1be0>)
 800505e:	2301      	movs	r3, #1
 8005060:	ca06      	ldmia	r2, {r1, r2}
 8005062:	483a      	ldr	r0, [pc, #232]	; (800514c <statemachine+0x1c3c>)
 8005064:	f7fd fe36 	bl	8002cd4 <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8005068:	4b39      	ldr	r3, [pc, #228]	; (8005150 <statemachine+0x1c40>)
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 800506e:	4b28      	ldr	r3, [pc, #160]	; (8005110 <statemachine+0x1c00>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	dd0b      	ble.n	800508e <statemachine+0x1b7e>
				 						  usbstate++;
 8005076:	4b34      	ldr	r3, [pc, #208]	; (8005148 <statemachine+0x1c38>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	3301      	adds	r3, #1
 800507c:	b2da      	uxtb	r2, r3
 800507e:	4b32      	ldr	r3, [pc, #200]	; (8005148 <statemachine+0x1c38>)
 8005080:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 8005082:	4b23      	ldr	r3, [pc, #140]	; (8005110 <statemachine+0x1c00>)
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 8005088:	4b23      	ldr	r3, [pc, #140]	; (8005118 <statemachine+0x1c08>)
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 800508e:	4b22      	ldr	r3, [pc, #136]	; (8005118 <statemachine+0x1c08>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	dd0b      	ble.n	80050ae <statemachine+0x1b9e>
				 						 state++;
 8005096:	4b28      	ldr	r3, [pc, #160]	; (8005138 <statemachine+0x1c28>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	3301      	adds	r3, #1
 800509c:	b2da      	uxtb	r2, r3
 800509e:	4b26      	ldr	r3, [pc, #152]	; (8005138 <statemachine+0x1c28>)
 80050a0:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 80050a2:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <statemachine+0x1c08>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 80050a8:	4b19      	ldr	r3, [pc, #100]	; (8005110 <statemachine+0x1c00>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 80050ae:	4b24      	ldr	r3, [pc, #144]	; (8005140 <statemachine+0x1c30>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f340 823f 	ble.w	8005536 <statemachine+0x2026>
				 									 									 									  			 	state--;
 80050b8:	4b1f      	ldr	r3, [pc, #124]	; (8005138 <statemachine+0x1c28>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	3b01      	subs	r3, #1
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	4b1d      	ldr	r3, [pc, #116]	; (8005138 <statemachine+0x1c28>)
 80050c2:	701a      	strb	r2, [r3, #0]
				 									 									 									  			 	BTN_A=0;
 80050c4:	4b14      	ldr	r3, [pc, #80]	; (8005118 <statemachine+0x1c08>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_B=0;
 80050ca:	4b11      	ldr	r3, [pc, #68]	; (8005110 <statemachine+0x1c00>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_A_LONG=0;
 80050d0:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <statemachine+0x1c30>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
				 					  break;
 80050d6:	e22e      	b.n	8005536 <statemachine+0x2026>
 80050d8:	20000a20 	.word	0x20000a20
 80050dc:	0801b010 	.word	0x0801b010
 80050e0:	2000097c 	.word	0x2000097c
 80050e4:	20000014 	.word	0x20000014
 80050e8:	200006c8 	.word	0x200006c8
 80050ec:	0801b01c 	.word	0x0801b01c
 80050f0:	2000000c 	.word	0x2000000c
 80050f4:	20000740 	.word	0x20000740
 80050f8:	0801b024 	.word	0x0801b024
 80050fc:	20000a1c 	.word	0x20000a1c
 8005100:	20000a18 	.word	0x20000a18
 8005104:	20000a08 	.word	0x20000a08
 8005108:	20000fd0 	.word	0x20000fd0
 800510c:	0801b02c 	.word	0x0801b02c
 8005110:	2000070c 	.word	0x2000070c
 8005114:	2000047e 	.word	0x2000047e
 8005118:	20000708 	.word	0x20000708
 800511c:	20001074 	.word	0x20001074
 8005120:	20000a5c 	.word	0x20000a5c
 8005124:	0801b030 	.word	0x0801b030
 8005128:	0801b038 	.word	0x0801b038
 800512c:	20000958 	.word	0x20000958
 8005130:	2000095c 	.word	0x2000095c
 8005134:	0801b040 	.word	0x0801b040
 8005138:	20000478 	.word	0x20000478
 800513c:	20000fd4 	.word	0x20000fd4
 8005140:	20000a60 	.word	0x20000a60
 8005144:	0801b048 	.word	0x0801b048
 8005148:	2000047d 	.word	0x2000047d
 800514c:	0801b04c 	.word	0x0801b04c
 8005150:	20000a10 	.word	0x20000a10
				 					 ssd1306_SetCursor(32,40);
 8005154:	2128      	movs	r1, #40	; 0x28
 8005156:	2020      	movs	r0, #32
 8005158:	f7fd fde2 	bl	8002d20 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 800515c:	4ab4      	ldr	r2, [pc, #720]	; (8005430 <statemachine+0x1f20>)
 800515e:	2301      	movs	r3, #1
 8005160:	ca06      	ldmia	r2, {r1, r2}
 8005162:	48b4      	ldr	r0, [pc, #720]	; (8005434 <statemachine+0x1f24>)
 8005164:	f7fd fdb6 	bl	8002cd4 <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,48);
 8005168:	2130      	movs	r1, #48	; 0x30
 800516a:	2020      	movs	r0, #32
 800516c:	f7fd fdd8 	bl	8002d20 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8005170:	4aaf      	ldr	r2, [pc, #700]	; (8005430 <statemachine+0x1f20>)
 8005172:	2301      	movs	r3, #1
 8005174:	ca06      	ldmia	r2, {r1, r2}
 8005176:	48b0      	ldr	r0, [pc, #704]	; (8005438 <statemachine+0x1f28>)
 8005178:	f7fd fdac 	bl	8002cd4 <ssd1306_WriteString>
				 					if(erasedisplay==1){
 800517c:	4baf      	ldr	r3, [pc, #700]	; (800543c <statemachine+0x1f2c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d137      	bne.n	80051f4 <statemachine+0x1ce4>
					 					 ssd1306_Fill(Black);
 8005184:	2000      	movs	r0, #0
 8005186:	f7fd fc89 	bl	8002a9c <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,32);
 800518a:	2120      	movs	r1, #32
 800518c:	2020      	movs	r0, #32
 800518e:	f7fd fdc7 	bl	8002d20 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 8005192:	4aa7      	ldr	r2, [pc, #668]	; (8005430 <statemachine+0x1f20>)
 8005194:	2301      	movs	r3, #1
 8005196:	ca06      	ldmia	r2, {r1, r2}
 8005198:	48a9      	ldr	r0, [pc, #676]	; (8005440 <statemachine+0x1f30>)
 800519a:	f7fd fd9b 	bl	8002cd4 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,40);
 800519e:	2128      	movs	r1, #40	; 0x28
 80051a0:	2020      	movs	r0, #32
 80051a2:	f7fd fdbd 	bl	8002d20 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 80051a6:	4aa7      	ldr	r2, [pc, #668]	; (8005444 <statemachine+0x1f34>)
 80051a8:	2301      	movs	r3, #1
 80051aa:	ca06      	ldmia	r2, {r1, r2}
 80051ac:	48a6      	ldr	r0, [pc, #664]	; (8005448 <statemachine+0x1f38>)
 80051ae:	f7fd fd91 	bl	8002cd4 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,56);
 80051b2:	2138      	movs	r1, #56	; 0x38
 80051b4:	2020      	movs	r0, #32
 80051b6:	f7fd fdb3 	bl	8002d20 <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 80051ba:	4ba4      	ldr	r3, [pc, #656]	; (800544c <statemachine+0x1f3c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051c6:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8005450 <statemachine+0x1f40>
 80051ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80051ce:	ee16 0a90 	vmov	r0, s13
 80051d2:	f7fb f9b9 	bl	8000548 <__aeabi_f2d>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	e9cd 2300 	strd	r2, r3, [sp]
 80051de:	4a9d      	ldr	r2, [pc, #628]	; (8005454 <statemachine+0x1f44>)
 80051e0:	2132      	movs	r1, #50	; 0x32
 80051e2:	489d      	ldr	r0, [pc, #628]	; (8005458 <statemachine+0x1f48>)
 80051e4:	f011 fa72 	bl	80166cc <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80051e8:	4a91      	ldr	r2, [pc, #580]	; (8005430 <statemachine+0x1f20>)
 80051ea:	2301      	movs	r3, #1
 80051ec:	ca06      	ldmia	r2, {r1, r2}
 80051ee:	489a      	ldr	r0, [pc, #616]	; (8005458 <statemachine+0x1f48>)
 80051f0:	f7fd fd70 	bl	8002cd4 <ssd1306_WriteString>
				 					if(BTN_A>=1){
 80051f4:	4b99      	ldr	r3, [pc, #612]	; (800545c <statemachine+0x1f4c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	dd7a      	ble.n	80052f2 <statemachine+0x1de2>
				 						erasetime=HAL_GetTick();
 80051fc:	f001 f914 	bl	8006428 <HAL_GetTick>
 8005200:	4603      	mov	r3, r0
 8005202:	461a      	mov	r2, r3
 8005204:	4b91      	ldr	r3, [pc, #580]	; (800544c <statemachine+0x1f3c>)
 8005206:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8005208:	2300      	movs	r3, #0
 800520a:	653b      	str	r3, [r7, #80]	; 0x50
 800520c:	e03f      	b.n	800528e <statemachine+0x1d7e>
				 							ssd1306_Fill(Black);
 800520e:	2000      	movs	r0, #0
 8005210:	f7fd fc44 	bl	8002a9c <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8005214:	2120      	movs	r1, #32
 8005216:	2020      	movs	r0, #32
 8005218:	f7fd fd82 	bl	8002d20 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 800521c:	4a84      	ldr	r2, [pc, #528]	; (8005430 <statemachine+0x1f20>)
 800521e:	2301      	movs	r3, #1
 8005220:	ca06      	ldmia	r2, {r1, r2}
 8005222:	4887      	ldr	r0, [pc, #540]	; (8005440 <statemachine+0x1f30>)
 8005224:	f7fd fd56 	bl	8002cd4 <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 8005228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800522a:	4619      	mov	r1, r3
 800522c:	488c      	ldr	r0, [pc, #560]	; (8005460 <statemachine+0x1f50>)
 800522e:	f00e fcea 	bl	8013c06 <SPIF_EraseSector>
				 							if(i>=1){
 8005232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005234:	2b00      	cmp	r3, #0
 8005236:	dd21      	ble.n	800527c <statemachine+0x1d6c>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 8005238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800523a:	2264      	movs	r2, #100	; 0x64
 800523c:	fb02 f303 	mul.w	r3, r2, r3
 8005240:	ee07 3a90 	vmov	s15, r3
 8005244:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005248:	4b86      	ldr	r3, [pc, #536]	; (8005464 <statemachine+0x1f54>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	da00      	bge.n	8005252 <statemachine+0x1d42>
 8005250:	330f      	adds	r3, #15
 8005252:	111b      	asrs	r3, r3, #4
 8005254:	4618      	mov	r0, r3
 8005256:	f7fb f965 	bl	8000524 <__aeabi_i2d>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	4610      	mov	r0, r2
 8005260:	4619      	mov	r1, r3
 8005262:	f7fb fc79 	bl	8000b58 <__aeabi_d2iz>
 8005266:	ee07 0a90 	vmov	s15, r0
 800526a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800526e:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8005272:	eeb0 0a47 	vmov.f32	s0, s14
 8005276:	f7fe f8eb 	bl	8003450 <percentage>
 800527a:	e003      	b.n	8005284 <statemachine+0x1d74>
				 								percentage((float) 0);
 800527c:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8005468 <statemachine+0x1f58>
 8005280:	f7fe f8e6 	bl	8003450 <percentage>
				 							ssd1306_UpdateScreen();
 8005284:	f7fd fc22 	bl	8002acc <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8005288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800528a:	3301      	adds	r3, #1
 800528c:	653b      	str	r3, [r7, #80]	; 0x50
 800528e:	4b75      	ldr	r3, [pc, #468]	; (8005464 <statemachine+0x1f54>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	da00      	bge.n	8005298 <statemachine+0x1d88>
 8005296:	330f      	adds	r3, #15
 8005298:	111b      	asrs	r3, r3, #4
 800529a:	4618      	mov	r0, r3
 800529c:	f7fb f942 	bl	8000524 <__aeabi_i2d>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4610      	mov	r0, r2
 80052a6:	4619      	mov	r1, r3
 80052a8:	f7fb fc56 	bl	8000b58 <__aeabi_d2iz>
 80052ac:	4602      	mov	r2, r0
 80052ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052b0:	4293      	cmp	r3, r2
 80052b2:	ddac      	ble.n	800520e <statemachine+0x1cfe>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 80052b4:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80052b8:	4869      	ldr	r0, [pc, #420]	; (8005460 <statemachine+0x1f50>)
 80052ba:	f00e fca4 	bl	8013c06 <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 80052be:	f001 f8b3 	bl	8006428 <HAL_GetTick>
 80052c2:	4603      	mov	r3, r0
 80052c4:	4a61      	ldr	r2, [pc, #388]	; (800544c <statemachine+0x1f3c>)
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	1a9b      	subs	r3, r3, r2
 80052ca:	461a      	mov	r2, r3
 80052cc:	4b5f      	ldr	r3, [pc, #380]	; (800544c <statemachine+0x1f3c>)
 80052ce:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 80052d0:	4b5a      	ldr	r3, [pc, #360]	; (800543c <statemachine+0x1f2c>)
 80052d2:	2201      	movs	r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 80052d6:	4b65      	ldr	r3, [pc, #404]	; (800546c <statemachine+0x1f5c>)
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 80052dc:	4b61      	ldr	r3, [pc, #388]	; (8005464 <statemachine+0x1f54>)
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]
				 						storeindex();
 80052e2:	f7fd f9ff 	bl	80026e4 <storeindex>
				 						BTN_A=0;
 80052e6:	4b5d      	ldr	r3, [pc, #372]	; (800545c <statemachine+0x1f4c>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 80052ec:	4b60      	ldr	r3, [pc, #384]	; (8005470 <statemachine+0x1f60>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 80052f2:	4b5f      	ldr	r3, [pc, #380]	; (8005470 <statemachine+0x1f60>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f340 811f 	ble.w	800553a <statemachine+0x202a>
					 						usbstate++;
 80052fc:	4b5d      	ldr	r3, [pc, #372]	; (8005474 <statemachine+0x1f64>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	3301      	adds	r3, #1
 8005302:	b2da      	uxtb	r2, r3
 8005304:	4b5b      	ldr	r3, [pc, #364]	; (8005474 <statemachine+0x1f64>)
 8005306:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 8005308:	4b59      	ldr	r3, [pc, #356]	; (8005470 <statemachine+0x1f60>)
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 800530e:	4b53      	ldr	r3, [pc, #332]	; (800545c <statemachine+0x1f4c>)
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
				 			  break;
 8005314:	e111      	b.n	800553a <statemachine+0x202a>
				 					ssd1306_Fill(Black);
 8005316:	2000      	movs	r0, #0
 8005318:	f7fd fbc0 	bl	8002a9c <ssd1306_Fill>
				 					ssd1306_SetCursor(32,40);
 800531c:	2128      	movs	r1, #40	; 0x28
 800531e:	2020      	movs	r0, #32
 8005320:	f7fd fcfe 	bl	8002d20 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8005324:	4a42      	ldr	r2, [pc, #264]	; (8005430 <statemachine+0x1f20>)
 8005326:	2301      	movs	r3, #1
 8005328:	ca06      	ldmia	r2, {r1, r2}
 800532a:	4853      	ldr	r0, [pc, #332]	; (8005478 <statemachine+0x1f68>)
 800532c:	f7fd fcd2 	bl	8002cd4 <ssd1306_WriteString>
				 					if(pagenumber>0){
 8005330:	4b4c      	ldr	r3, [pc, #304]	; (8005464 <statemachine+0x1f54>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f340 80ad 	ble.w	8005494 <statemachine+0x1f84>
				 					int i=0;
 800533a:	2300      	movs	r3, #0
 800533c:	64fb      	str	r3, [r7, #76]	; 0x4c
				 					if(usbtransmiten==0){
 800533e:	4b4f      	ldr	r3, [pc, #316]	; (800547c <statemachine+0x1f6c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d162      	bne.n	800540c <statemachine+0x1efc>
				 						while(i<pagenumber){
 8005346:	e036      	b.n	80053b6 <statemachine+0x1ea6>
				 							ssd1306_Fill(Black);
 8005348:	2000      	movs	r0, #0
 800534a:	f7fd fba7 	bl	8002a9c <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 800534e:	2120      	movs	r1, #32
 8005350:	2020      	movs	r0, #32
 8005352:	f7fd fce5 	bl	8002d20 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8005356:	4a36      	ldr	r2, [pc, #216]	; (8005430 <statemachine+0x1f20>)
 8005358:	2301      	movs	r3, #1
 800535a:	ca06      	ldmia	r2, {r1, r2}
 800535c:	4846      	ldr	r0, [pc, #280]	; (8005478 <statemachine+0x1f68>)
 800535e:	f7fd fcb9 	bl	8002cd4 <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t  *)flashread, 256, 0);
 8005362:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005364:	2300      	movs	r3, #0
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800536c:	4a44      	ldr	r2, [pc, #272]	; (8005480 <statemachine+0x1f70>)
 800536e:	483c      	ldr	r0, [pc, #240]	; (8005460 <statemachine+0x1f50>)
 8005370:	f00e fcea 	bl	8013d48 <SPIF_ReadPage>
				 							CDC_Transmit_FS((char  * )flashread,256);
 8005374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005378:	4841      	ldr	r0, [pc, #260]	; (8005480 <statemachine+0x1f70>)
 800537a:	f00e fdcf 	bl	8013f1c <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 800537e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005380:	2264      	movs	r2, #100	; 0x64
 8005382:	fb02 f303 	mul.w	r3, r2, r3
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800538e:	4b35      	ldr	r3, [pc, #212]	; (8005464 <statemachine+0x1f54>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800539a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800539e:	eeb0 0a66 	vmov.f32	s0, s13
 80053a2:	f7fe f855 	bl	8003450 <percentage>
				 							ssd1306_UpdateScreen();
 80053a6:	f7fd fb91 	bl	8002acc <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 80053aa:	207d      	movs	r0, #125	; 0x7d
 80053ac:	f001 f848 	bl	8006440 <HAL_Delay>
				 							i++;
 80053b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b2:	3301      	adds	r3, #1
 80053b4:	64fb      	str	r3, [r7, #76]	; 0x4c
				 						while(i<pagenumber){
 80053b6:	4b2b      	ldr	r3, [pc, #172]	; (8005464 <statemachine+0x1f54>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053bc:	429a      	cmp	r2, r3
 80053be:	dbc3      	blt.n	8005348 <statemachine+0x1e38>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 80053c0:	4b28      	ldr	r3, [pc, #160]	; (8005464 <statemachine+0x1f54>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4619      	mov	r1, r3
 80053c6:	4b29      	ldr	r3, [pc, #164]	; (800546c <statemachine+0x1f5c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	2300      	movs	r3, #0
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	4613      	mov	r3, r2
 80053d2:	4a2b      	ldr	r2, [pc, #172]	; (8005480 <statemachine+0x1f70>)
 80053d4:	4822      	ldr	r0, [pc, #136]	; (8005460 <statemachine+0x1f50>)
 80053d6:	f00e fcb7 	bl	8013d48 <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 80053da:	4b24      	ldr	r3, [pc, #144]	; (800546c <statemachine+0x1f5c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4619      	mov	r1, r3
 80053e0:	4827      	ldr	r0, [pc, #156]	; (8005480 <statemachine+0x1f70>)
 80053e2:	f00e fd9b 	bl	8013f1c <CDC_Transmit_FS>
				 						HAL_Delay(125);
 80053e6:	207d      	movs	r0, #125	; 0x7d
 80053e8:	f001 f82a 	bl	8006440 <HAL_Delay>
				 						int taillefin=0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	64bb      	str	r3, [r7, #72]	; 0x48
										taillefin = snprintf((char  *)usbbuffer,64,"kawakobeme\n\r");
 80053f0:	4a24      	ldr	r2, [pc, #144]	; (8005484 <statemachine+0x1f74>)
 80053f2:	2140      	movs	r1, #64	; 0x40
 80053f4:	4824      	ldr	r0, [pc, #144]	; (8005488 <statemachine+0x1f78>)
 80053f6:	f011 f969 	bl	80166cc <sniprintf>
 80053fa:	64b8      	str	r0, [r7, #72]	; 0x48
				 						CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 80053fc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80053fe:	4822      	ldr	r0, [pc, #136]	; (8005488 <statemachine+0x1f78>)
 8005400:	f00e fd8c 	bl	8013f1c <CDC_Transmit_FS>
				 						usbtransmiten=1;
 8005404:	4b1d      	ldr	r3, [pc, #116]	; (800547c <statemachine+0x1f6c>)
 8005406:	2201      	movs	r2, #1
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	e003      	b.n	8005414 <statemachine+0x1f04>
				 						usbpercent=1;
 800540c:	4b1f      	ldr	r3, [pc, #124]	; (800548c <statemachine+0x1f7c>)
 800540e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005412:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 8005414:	2000      	movs	r0, #0
 8005416:	f7fd fb41 	bl	8002a9c <ssd1306_Fill>
				 					ssd1306_SetCursor(32,45);
 800541a:	212d      	movs	r1, #45	; 0x2d
 800541c:	2020      	movs	r0, #32
 800541e:	f7fd fc7f 	bl	8002d20 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 8005422:	4a08      	ldr	r2, [pc, #32]	; (8005444 <statemachine+0x1f34>)
 8005424:	2301      	movs	r3, #1
 8005426:	ca06      	ldmia	r2, {r1, r2}
 8005428:	4819      	ldr	r0, [pc, #100]	; (8005490 <statemachine+0x1f80>)
 800542a:	f7fd fc53 	bl	8002cd4 <ssd1306_WriteString>
 800542e:	e048      	b.n	80054c2 <statemachine+0x1fb2>
 8005430:	2000000c 	.word	0x2000000c
 8005434:	0801b058 	.word	0x0801b058
 8005438:	0801b060 	.word	0x0801b060
 800543c:	20000a0c 	.word	0x20000a0c
 8005440:	0801b048 	.word	0x0801b048
 8005444:	20000014 	.word	0x20000014
 8005448:	0801b06c 	.word	0x0801b06c
 800544c:	20000a08 	.word	0x20000a08
 8005450:	447a0000 	.word	0x447a0000
 8005454:	0801b070 	.word	0x0801b070
 8005458:	2000097c 	.word	0x2000097c
 800545c:	20000708 	.word	0x20000708
 8005460:	20000710 	.word	0x20000710
 8005464:	2000095c 	.word	0x2000095c
 8005468:	00000000 	.word	0x00000000
 800546c:	20000958 	.word	0x20000958
 8005470:	2000070c 	.word	0x2000070c
 8005474:	2000047d 	.word	0x2000047d
 8005478:	0801b078 	.word	0x0801b078
 800547c:	20000a10 	.word	0x20000a10
 8005480:	20000858 	.word	0x20000858
 8005484:	0801b080 	.word	0x0801b080
 8005488:	200009b0 	.word	0x200009b0
 800548c:	20000a14 	.word	0x20000a14
 8005490:	0801b090 	.word	0x0801b090
				 							ssd1306_Fill(Black);
 8005494:	2000      	movs	r0, #0
 8005496:	f7fd fb01 	bl	8002a9c <ssd1306_Fill>
				 							ssd1306_SetCursor(32,40);
 800549a:	2128      	movs	r1, #40	; 0x28
 800549c:	2020      	movs	r0, #32
 800549e:	f7fd fc3f 	bl	8002d20 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 80054a2:	4a6c      	ldr	r2, [pc, #432]	; (8005654 <statemachine+0x2144>)
 80054a4:	2301      	movs	r3, #1
 80054a6:	ca06      	ldmia	r2, {r1, r2}
 80054a8:	486b      	ldr	r0, [pc, #428]	; (8005658 <statemachine+0x2148>)
 80054aa:	f7fd fc13 	bl	8002cd4 <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,48);
 80054ae:	2130      	movs	r1, #48	; 0x30
 80054b0:	2020      	movs	r0, #32
 80054b2:	f7fd fc35 	bl	8002d20 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_6x8,White);
 80054b6:	4a67      	ldr	r2, [pc, #412]	; (8005654 <statemachine+0x2144>)
 80054b8:	2301      	movs	r3, #1
 80054ba:	ca06      	ldmia	r2, {r1, r2}
 80054bc:	4867      	ldr	r0, [pc, #412]	; (800565c <statemachine+0x214c>)
 80054be:	f7fd fc09 	bl	8002cd4 <ssd1306_WriteString>
				 					if(BTN_B>=1){
 80054c2:	4b67      	ldr	r3, [pc, #412]	; (8005660 <statemachine+0x2150>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	dd11      	ble.n	80054ee <statemachine+0x1fde>
				 									 						usbstate--;
 80054ca:	4b66      	ldr	r3, [pc, #408]	; (8005664 <statemachine+0x2154>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	4b64      	ldr	r3, [pc, #400]	; (8005664 <statemachine+0x2154>)
 80054d4:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 80054d6:	4b63      	ldr	r3, [pc, #396]	; (8005664 <statemachine+0x2154>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	3b01      	subs	r3, #1
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	4b61      	ldr	r3, [pc, #388]	; (8005664 <statemachine+0x2154>)
 80054e0:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 80054e2:	4b5f      	ldr	r3, [pc, #380]	; (8005660 <statemachine+0x2150>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 80054e8:	4b5f      	ldr	r3, [pc, #380]	; (8005668 <statemachine+0x2158>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 80054ee:	4b5e      	ldr	r3, [pc, #376]	; (8005668 <statemachine+0x2158>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	dd0b      	ble.n	800550e <statemachine+0x1ffe>
				 									  			 	state++;
 80054f6:	4b5d      	ldr	r3, [pc, #372]	; (800566c <statemachine+0x215c>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	3301      	adds	r3, #1
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	4b5b      	ldr	r3, [pc, #364]	; (800566c <statemachine+0x215c>)
 8005500:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005502:	4b59      	ldr	r3, [pc, #356]	; (8005668 <statemachine+0x2158>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005508:	4b55      	ldr	r3, [pc, #340]	; (8005660 <statemachine+0x2150>)
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 800550e:	4b58      	ldr	r3, [pc, #352]	; (8005670 <statemachine+0x2160>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	dd13      	ble.n	800553e <statemachine+0x202e>
				 									 									  			 	state--;
 8005516:	4b55      	ldr	r3, [pc, #340]	; (800566c <statemachine+0x215c>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	3b01      	subs	r3, #1
 800551c:	b2da      	uxtb	r2, r3
 800551e:	4b53      	ldr	r3, [pc, #332]	; (800566c <statemachine+0x215c>)
 8005520:	701a      	strb	r2, [r3, #0]
				 									 									  			 	BTN_A=0;
 8005522:	4b51      	ldr	r3, [pc, #324]	; (8005668 <statemachine+0x2158>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_B=0;
 8005528:	4b4d      	ldr	r3, [pc, #308]	; (8005660 <statemachine+0x2150>)
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_A_LONG=0;
 800552e:	4b50      	ldr	r3, [pc, #320]	; (8005670 <statemachine+0x2160>)
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
				 					 break;
 8005534:	e003      	b.n	800553e <statemachine+0x202e>
				 					  break;
 8005536:	bf00      	nop
 8005538:	e082      	b.n	8005640 <statemachine+0x2130>
				 			  break;
 800553a:	bf00      	nop
 800553c:	e080      	b.n	8005640 <statemachine+0x2130>
				 					 break;
 800553e:	bf00      	nop
				  break;
 8005540:	e07e      	b.n	8005640 <statemachine+0x2130>

				  case STATE_TEST:
					  ssd1306_Fill(Black);
 8005542:	2000      	movs	r0, #0
 8005544:	f7fd faaa 	bl	8002a9c <ssd1306_Fill>
					  ssd1306_SetCursor(32,32);
 8005548:	2120      	movs	r1, #32
 800554a:	2020      	movs	r0, #32
 800554c:	f7fd fbe8 	bl	8002d20 <ssd1306_SetCursor>
					  ssd1306_WriteString("test",Font_6x8,White);
 8005550:	4a40      	ldr	r2, [pc, #256]	; (8005654 <statemachine+0x2144>)
 8005552:	2301      	movs	r3, #1
 8005554:	ca06      	ldmia	r2, {r1, r2}
 8005556:	4847      	ldr	r0, [pc, #284]	; (8005674 <statemachine+0x2164>)
 8005558:	f7fd fbbc 	bl	8002cd4 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 800555c:	2128      	movs	r1, #40	; 0x28
 800555e:	2020      	movs	r0, #32
 8005560:	f7fd fbde 	bl	8002d20 <ssd1306_SetCursor>

					  if(BTN_B>=1){
 8005564:	4b3e      	ldr	r3, [pc, #248]	; (8005660 <statemachine+0x2150>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	dd08      	ble.n	800557e <statemachine+0x206e>
						  ssd1306_WriteString("cours",Font_6x8,White);
 800556c:	4a39      	ldr	r2, [pc, #228]	; (8005654 <statemachine+0x2144>)
 800556e:	2301      	movs	r3, #1
 8005570:	ca06      	ldmia	r2, {r1, r2}
 8005572:	4841      	ldr	r0, [pc, #260]	; (8005678 <statemachine+0x2168>)
 8005574:	f7fd fbae 	bl	8002cd4 <ssd1306_WriteString>
						  BTN_B=0;
 8005578:	4b39      	ldr	r3, [pc, #228]	; (8005660 <statemachine+0x2150>)
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]
					  }
					  if(BTN_B_LONG>=1){
 800557e:	4b3f      	ldr	r3, [pc, #252]	; (800567c <statemachine+0x216c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	dd08      	ble.n	8005598 <statemachine+0x2088>
						  ssd1306_WriteString("long",Font_6x8,White);
 8005586:	4a33      	ldr	r2, [pc, #204]	; (8005654 <statemachine+0x2144>)
 8005588:	2301      	movs	r3, #1
 800558a:	ca06      	ldmia	r2, {r1, r2}
 800558c:	483c      	ldr	r0, [pc, #240]	; (8005680 <statemachine+0x2170>)
 800558e:	f7fd fba1 	bl	8002cd4 <ssd1306_WriteString>
						  BTN_B_LONG=0;
 8005592:	4b3a      	ldr	r3, [pc, #232]	; (800567c <statemachine+0x216c>)
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]





					  if(BTN_A>=1){
 8005598:	4b33      	ldr	r3, [pc, #204]	; (8005668 <statemachine+0x2158>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	dd2f      	ble.n	8005600 <statemachine+0x20f0>
					 				 									state--;
 80055a0:	4b32      	ldr	r3, [pc, #200]	; (800566c <statemachine+0x215c>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	4b30      	ldr	r3, [pc, #192]	; (800566c <statemachine+0x215c>)
 80055aa:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80055ac:	4b2f      	ldr	r3, [pc, #188]	; (800566c <statemachine+0x215c>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	4b2d      	ldr	r3, [pc, #180]	; (800566c <statemachine+0x215c>)
 80055b6:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80055b8:	4b2c      	ldr	r3, [pc, #176]	; (800566c <statemachine+0x215c>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	3b01      	subs	r3, #1
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	4b2a      	ldr	r3, [pc, #168]	; (800566c <statemachine+0x215c>)
 80055c2:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80055c4:	4b29      	ldr	r3, [pc, #164]	; (800566c <statemachine+0x215c>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	4b27      	ldr	r3, [pc, #156]	; (800566c <statemachine+0x215c>)
 80055ce:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80055d0:	4b26      	ldr	r3, [pc, #152]	; (800566c <statemachine+0x215c>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	4b24      	ldr	r3, [pc, #144]	; (800566c <statemachine+0x215c>)
 80055da:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80055dc:	4b23      	ldr	r3, [pc, #140]	; (800566c <statemachine+0x215c>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	4b21      	ldr	r3, [pc, #132]	; (800566c <statemachine+0x215c>)
 80055e6:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80055e8:	4b20      	ldr	r3, [pc, #128]	; (800566c <statemachine+0x215c>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	4b1e      	ldr	r3, [pc, #120]	; (800566c <statemachine+0x215c>)
 80055f2:	701a      	strb	r2, [r3, #0]
					 				 									  			 	BTN_A=0;
 80055f4:	4b1c      	ldr	r3, [pc, #112]	; (8005668 <statemachine+0x2158>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
					 				 									  			 	BTN_B=0;
 80055fa:	4b19      	ldr	r3, [pc, #100]	; (8005660 <statemachine+0x2150>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
					 				 									  	}
					  if(BTN_A_LONG>=1){
 8005600:	4b1b      	ldr	r3, [pc, #108]	; (8005670 <statemachine+0x2160>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	dd1d      	ble.n	8005644 <statemachine+0x2134>
					  				 									 									  			 	state--;
 8005608:	4b18      	ldr	r3, [pc, #96]	; (800566c <statemachine+0x215c>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	3b01      	subs	r3, #1
 800560e:	b2da      	uxtb	r2, r3
 8005610:	4b16      	ldr	r3, [pc, #88]	; (800566c <statemachine+0x215c>)
 8005612:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 8005614:	4b14      	ldr	r3, [pc, #80]	; (8005668 <statemachine+0x2158>)
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 800561a:	4b11      	ldr	r3, [pc, #68]	; (8005660 <statemachine+0x2150>)
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 8005620:	4b13      	ldr	r3, [pc, #76]	; (8005670 <statemachine+0x2160>)
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
					  				 									 									  	}



					  break;
 8005626:	e00d      	b.n	8005644 <statemachine+0x2134>
				  break;
 8005628:	bf00      	nop
 800562a:	e00c      	b.n	8005646 <statemachine+0x2136>
			  break;
 800562c:	bf00      	nop
 800562e:	e00a      	b.n	8005646 <statemachine+0x2136>
			  break;
 8005630:	bf00      	nop
 8005632:	e008      	b.n	8005646 <statemachine+0x2136>
			  break;
 8005634:	bf00      	nop
 8005636:	e006      	b.n	8005646 <statemachine+0x2136>
			  break;
 8005638:	bf00      	nop
 800563a:	e004      	b.n	8005646 <statemachine+0x2136>
				  break;
 800563c:	bf00      	nop
 800563e:	e002      	b.n	8005646 <statemachine+0x2136>
				  break;
 8005640:	bf00      	nop
 8005642:	e000      	b.n	8005646 <statemachine+0x2136>
					  break;
 8005644:	bf00      	nop
	}
return ;
 8005646:	bf00      	nop
 8005648:	bf00      	nop
}
 800564a:	3764      	adds	r7, #100	; 0x64
 800564c:	46bd      	mov	sp, r7
 800564e:	ecbd 8b02 	vpop	{d8}
 8005652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005654:	2000000c 	.word	0x2000000c
 8005658:	0801b078 	.word	0x0801b078
 800565c:	0801b098 	.word	0x0801b098
 8005660:	2000070c 	.word	0x2000070c
 8005664:	2000047d 	.word	0x2000047d
 8005668:	20000708 	.word	0x20000708
 800566c:	20000478 	.word	0x20000478
 8005670:	20000a60 	.word	0x20000a60
 8005674:	0801b0a0 	.word	0x0801b0a0
 8005678:	0801b0a8 	.word	0x0801b0a8
 800567c:	20000a5c 	.word	0x20000a5c
 8005680:	0801b0b0 	.word	0x0801b0b0

08005684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800568a:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <HAL_MspInit+0x44>)
 800568c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568e:	4a0e      	ldr	r2, [pc, #56]	; (80056c8 <HAL_MspInit+0x44>)
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	6613      	str	r3, [r2, #96]	; 0x60
 8005696:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <HAL_MspInit+0x44>)
 8005698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	607b      	str	r3, [r7, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80056a2:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <HAL_MspInit+0x44>)
 80056a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a6:	4a08      	ldr	r2, [pc, #32]	; (80056c8 <HAL_MspInit+0x44>)
 80056a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ac:	6593      	str	r3, [r2, #88]	; 0x58
 80056ae:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <HAL_MspInit+0x44>)
 80056b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40021000 	.word	0x40021000

080056cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80056d0:	e7fe      	b.n	80056d0 <NMI_Handler+0x4>

080056d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056d2:	b480      	push	{r7}
 80056d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056d6:	e7fe      	b.n	80056d6 <HardFault_Handler+0x4>

080056d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056dc:	e7fe      	b.n	80056dc <MemManage_Handler+0x4>

080056de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056de:	b480      	push	{r7}
 80056e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056e2:	e7fe      	b.n	80056e2 <BusFault_Handler+0x4>

080056e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056e8:	e7fe      	b.n	80056e8 <UsageFault_Handler+0x4>

080056ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056ea:	b480      	push	{r7}
 80056ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056ee:	bf00      	nop
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056fc:	bf00      	nop
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005706:	b480      	push	{r7}
 8005708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800570a:	bf00      	nop
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005718:	f000 fe72 	bl	8006400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800571c:	bf00      	nop
 800571e:	bd80      	pop	{r7, pc}

08005720 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005724:	2002      	movs	r0, #2
 8005726:	f002 fe7d 	bl	8008424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800572a:	bf00      	nop
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005734:	4802      	ldr	r0, [pc, #8]	; (8005740 <DMA1_Channel1_IRQHandler+0x10>)
 8005736:	f002 fbf0 	bl	8007f1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800573a:	bf00      	nop
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20000388 	.word	0x20000388

08005744 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005748:	4802      	ldr	r0, [pc, #8]	; (8005754 <DMA1_Channel2_IRQHandler+0x10>)
 800574a:	f002 fbe6 	bl	8007f1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800574e:	bf00      	nop
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000b38 	.word	0x20000b38

08005758 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800575c:	4802      	ldr	r0, [pc, #8]	; (8005768 <DMA1_Channel3_IRQHandler+0x10>)
 800575e:	f002 fbdc 	bl	8007f1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005762:	bf00      	nop
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000b80 	.word	0x20000b80

0800576c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005770:	4802      	ldr	r0, [pc, #8]	; (800577c <ADC1_IRQHandler+0x10>)
 8005772:	f001 fa29 	bl	8006bc8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005776:	bf00      	nop
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000324 	.word	0x20000324

08005780 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005784:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005788:	f002 fe4c 	bl	8008424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800578c:	bf00      	nop
 800578e:	bd80      	pop	{r7, pc}

08005790 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8005794:	4803      	ldr	r0, [pc, #12]	; (80057a4 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8005796:	f007 fc2c 	bl	800cff2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  updatedate();
 800579a:	f000 fa91 	bl	8005cc0 <updatedate>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800579e:	bf00      	nop
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	200010c0 	.word	0x200010c0

080057a8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80057ac:	4802      	ldr	r0, [pc, #8]	; (80057b8 <SPI1_IRQHandler+0x10>)
 80057ae:	f006 fea7 	bl	800c500 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80057b2:	bf00      	nop
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000ad4 	.word	0x20000ad4

080057bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  	cptdoubledonnee+=1;
 80057c0:	4b06      	ldr	r3, [pc, #24]	; (80057dc <TIM7_IRQHandler+0x20>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3301      	adds	r3, #1
 80057c6:	4a05      	ldr	r2, [pc, #20]	; (80057dc <TIM7_IRQHandler+0x20>)
 80057c8:	6013      	str	r3, [r2, #0]
  	enablewrite=1;
 80057ca:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <TIM7_IRQHandler+0x24>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	601a      	str	r2, [r3, #0]



  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80057d0:	4804      	ldr	r0, [pc, #16]	; (80057e4 <TIM7_IRQHandler+0x28>)
 80057d2:	f007 fc0e 	bl	800cff2 <HAL_TIM_IRQHandler>




  /* USER CODE END TIM7_IRQn 1 */
}
 80057d6:	bf00      	nop
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	20000a1c 	.word	0x20000a1c
 80057e0:	20000a38 	.word	0x20000a38
 80057e4:	20001074 	.word	0x20001074

080057e8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80057ec:	4802      	ldr	r0, [pc, #8]	; (80057f8 <USB_IRQHandler+0x10>)
 80057ee:	f003 fc25 	bl	800903c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80057f2:	bf00      	nop
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20001f48 	.word	0x20001f48

080057fc <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 8005800:	4802      	ldr	r0, [pc, #8]	; (800580c <DMA2_Channel7_IRQHandler+0x10>)
 8005802:	f002 fb8a 	bl	8007f1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8005806:	bf00      	nop
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	2000121c 	.word	0x2000121c

08005810 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8005814:	4802      	ldr	r0, [pc, #8]	; (8005820 <LPUART1_IRQHandler+0x10>)
 8005816:	f008 f901 	bl	800da1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800581a:	bf00      	nop
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	2000110c 	.word	0x2000110c

08005824 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  return 1;
 8005828:	2301      	movs	r3, #1
}
 800582a:	4618      	mov	r0, r3
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <_kill>:

int _kill(int pid, int sig)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800583e:	f011 f8c3 	bl	80169c8 <__errno>
 8005842:	4603      	mov	r3, r0
 8005844:	2216      	movs	r2, #22
 8005846:	601a      	str	r2, [r3, #0]
  return -1;
 8005848:	f04f 33ff 	mov.w	r3, #4294967295
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <_exit>:

void _exit (int status)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800585c:	f04f 31ff 	mov.w	r1, #4294967295
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff ffe7 	bl	8005834 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005866:	e7fe      	b.n	8005866 <_exit+0x12>

08005868 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	e00a      	b.n	8005890 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800587a:	f3af 8000 	nop.w
 800587e:	4601      	mov	r1, r0
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	60ba      	str	r2, [r7, #8]
 8005886:	b2ca      	uxtb	r2, r1
 8005888:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	3301      	adds	r3, #1
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	429a      	cmp	r2, r3
 8005896:	dbf0      	blt.n	800587a <_read+0x12>
  }

  return len;
 8005898:	687b      	ldr	r3, [r7, #4]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b086      	sub	sp, #24
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	e009      	b.n	80058c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	60ba      	str	r2, [r7, #8]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	3301      	adds	r3, #1
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	dbf1      	blt.n	80058b4 <_write+0x12>
  }
  return len;
 80058d0:	687b      	ldr	r3, [r7, #4]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <_close>:

int _close(int file)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80058e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005902:	605a      	str	r2, [r3, #4]
  return 0;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <_isatty>:

int _isatty(int file)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800591a:	2301      	movs	r3, #1
}
 800591c:	4618      	mov	r0, r3
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
	...

08005944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800594c:	4a14      	ldr	r2, [pc, #80]	; (80059a0 <_sbrk+0x5c>)
 800594e:	4b15      	ldr	r3, [pc, #84]	; (80059a4 <_sbrk+0x60>)
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005958:	4b13      	ldr	r3, [pc, #76]	; (80059a8 <_sbrk+0x64>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d102      	bne.n	8005966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005960:	4b11      	ldr	r3, [pc, #68]	; (80059a8 <_sbrk+0x64>)
 8005962:	4a12      	ldr	r2, [pc, #72]	; (80059ac <_sbrk+0x68>)
 8005964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005966:	4b10      	ldr	r3, [pc, #64]	; (80059a8 <_sbrk+0x64>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4413      	add	r3, r2
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	429a      	cmp	r2, r3
 8005972:	d207      	bcs.n	8005984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005974:	f011 f828 	bl	80169c8 <__errno>
 8005978:	4603      	mov	r3, r0
 800597a:	220c      	movs	r2, #12
 800597c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800597e:	f04f 33ff 	mov.w	r3, #4294967295
 8005982:	e009      	b.n	8005998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005984:	4b08      	ldr	r3, [pc, #32]	; (80059a8 <_sbrk+0x64>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800598a:	4b07      	ldr	r3, [pc, #28]	; (80059a8 <_sbrk+0x64>)
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4413      	add	r3, r2
 8005992:	4a05      	ldr	r2, [pc, #20]	; (80059a8 <_sbrk+0x64>)
 8005994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005996:	68fb      	ldr	r3, [r7, #12]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20010000 	.word	0x20010000
 80059a4:	00000400 	.word	0x00000400
 80059a8:	20000fd8 	.word	0x20000fd8
 80059ac:	200025b0 	.word	0x200025b0

080059b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80059b4:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <SystemInit+0x20>)
 80059b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ba:	4a05      	ldr	r2, [pc, #20]	; (80059d0 <SystemInit+0x20>)
 80059bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80059c4:	bf00      	nop
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	e000ed00 	.word	0xe000ed00

080059d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059da:	f107 0310 	add.w	r3, r7, #16
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	605a      	str	r2, [r3, #4]
 80059e4:	609a      	str	r2, [r3, #8]
 80059e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059e8:	1d3b      	adds	r3, r7, #4
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	605a      	str	r2, [r3, #4]
 80059f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80059f2:	4b1e      	ldr	r3, [pc, #120]	; (8005a6c <MX_TIM2_Init+0x98>)
 80059f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80059f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 80059fa:	4b1c      	ldr	r3, [pc, #112]	; (8005a6c <MX_TIM2_Init+0x98>)
 80059fc:	f240 128f 	movw	r2, #399	; 0x18f
 8005a00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a02:	4b1a      	ldr	r3, [pc, #104]	; (8005a6c <MX_TIM2_Init+0x98>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8005a08:	4b18      	ldr	r3, [pc, #96]	; (8005a6c <MX_TIM2_Init+0x98>)
 8005a0a:	f242 720f 	movw	r2, #9999	; 0x270f
 8005a0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a10:	4b16      	ldr	r3, [pc, #88]	; (8005a6c <MX_TIM2_Init+0x98>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a16:	4b15      	ldr	r3, [pc, #84]	; (8005a6c <MX_TIM2_Init+0x98>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005a1c:	4813      	ldr	r0, [pc, #76]	; (8005a6c <MX_TIM2_Init+0x98>)
 8005a1e:	f007 f9c1 	bl	800cda4 <HAL_TIM_Base_Init>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8005a28:	f7fc f833 	bl	8001a92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005a32:	f107 0310 	add.w	r3, r7, #16
 8005a36:	4619      	mov	r1, r3
 8005a38:	480c      	ldr	r0, [pc, #48]	; (8005a6c <MX_TIM2_Init+0x98>)
 8005a3a:	f007 fbdc 	bl	800d1f6 <HAL_TIM_ConfigClockSource>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8005a44:	f7fc f825 	bl	8001a92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005a48:	2320      	movs	r3, #32
 8005a4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005a50:	1d3b      	adds	r3, r7, #4
 8005a52:	4619      	mov	r1, r3
 8005a54:	4805      	ldr	r0, [pc, #20]	; (8005a6c <MX_TIM2_Init+0x98>)
 8005a56:	f007 fdc7 	bl	800d5e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8005a60:	f7fc f817 	bl	8001a92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005a64:	bf00      	nop
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	20000fdc 	.word	0x20000fdc

08005a70 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a76:	1d3b      	adds	r3, r7, #4
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	605a      	str	r2, [r3, #4]
 8005a7e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005a80:	4b14      	ldr	r3, [pc, #80]	; (8005ad4 <MX_TIM6_Init+0x64>)
 8005a82:	4a15      	ldr	r2, [pc, #84]	; (8005ad8 <MX_TIM6_Init+0x68>)
 8005a84:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8005a86:	4b13      	ldr	r3, [pc, #76]	; (8005ad4 <MX_TIM6_Init+0x64>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a8c:	4b11      	ldr	r3, [pc, #68]	; (8005ad4 <MX_TIM6_Init+0x64>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8005a92:	4b10      	ldr	r3, [pc, #64]	; (8005ad4 <MX_TIM6_Init+0x64>)
 8005a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a98:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a9a:	4b0e      	ldr	r3, [pc, #56]	; (8005ad4 <MX_TIM6_Init+0x64>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005aa0:	480c      	ldr	r0, [pc, #48]	; (8005ad4 <MX_TIM6_Init+0x64>)
 8005aa2:	f007 f97f 	bl	800cda4 <HAL_TIM_Base_Init>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005aac:	f7fb fff1 	bl	8001a92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005ab8:	1d3b      	adds	r3, r7, #4
 8005aba:	4619      	mov	r1, r3
 8005abc:	4805      	ldr	r0, [pc, #20]	; (8005ad4 <MX_TIM6_Init+0x64>)
 8005abe:	f007 fd93 	bl	800d5e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005ac8:	f7fb ffe3 	bl	8001a92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005acc:	bf00      	nop
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20001028 	.word	0x20001028
 8005ad8:	40001000 	.word	0x40001000

08005adc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ae2:	1d3b      	adds	r3, r7, #4
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	605a      	str	r2, [r3, #4]
 8005aea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005aec:	4b15      	ldr	r3, [pc, #84]	; (8005b44 <MX_TIM7_Init+0x68>)
 8005aee:	4a16      	ldr	r2, [pc, #88]	; (8005b48 <MX_TIM7_Init+0x6c>)
 8005af0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 20000-1;
 8005af2:	4b14      	ldr	r3, [pc, #80]	; (8005b44 <MX_TIM7_Init+0x68>)
 8005af4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005af8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005afa:	4b12      	ldr	r3, [pc, #72]	; (8005b44 <MX_TIM7_Init+0x68>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8005b00:	4b10      	ldr	r3, [pc, #64]	; (8005b44 <MX_TIM7_Init+0x68>)
 8005b02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005b06:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b08:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <MX_TIM7_Init+0x68>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005b0e:	480d      	ldr	r0, [pc, #52]	; (8005b44 <MX_TIM7_Init+0x68>)
 8005b10:	f007 f948 	bl	800cda4 <HAL_TIM_Base_Init>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8005b1a:	f7fb ffba 	bl	8001a92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005b26:	1d3b      	adds	r3, r7, #4
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4806      	ldr	r0, [pc, #24]	; (8005b44 <MX_TIM7_Init+0x68>)
 8005b2c:	f007 fd5c 	bl	800d5e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8005b36:	f7fb ffac 	bl	8001a92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005b3a:	bf00      	nop
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20001074 	.word	0x20001074
 8005b48:	40001400 	.word	0x40001400

08005b4c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b52:	f107 0310 	add.w	r3, r7, #16
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	605a      	str	r2, [r3, #4]
 8005b5c:	609a      	str	r2, [r3, #8]
 8005b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b60:	1d3b      	adds	r3, r7, #4
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	605a      	str	r2, [r3, #4]
 8005b68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005b6a:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005b6c:	4a1f      	ldr	r2, [pc, #124]	; (8005bec <MX_TIM15_Init+0xa0>)
 8005b6e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 39999;
 8005b70:	4b1d      	ldr	r3, [pc, #116]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005b72:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8005b76:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b78:	4b1b      	ldr	r3, [pc, #108]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8005b7e:	4b1a      	ldr	r3, [pc, #104]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005b80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005b84:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b86:	4b18      	ldr	r3, [pc, #96]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005b8c:	4b16      	ldr	r3, [pc, #88]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b92:	4b15      	ldr	r3, [pc, #84]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005b98:	4813      	ldr	r0, [pc, #76]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005b9a:	f007 f903 	bl	800cda4 <HAL_TIM_Base_Init>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8005ba4:	f7fb ff75 	bl	8001a92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005bae:	f107 0310 	add.w	r3, r7, #16
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	480c      	ldr	r0, [pc, #48]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005bb6:	f007 fb1e 	bl	800d1f6 <HAL_TIM_ConfigClockSource>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8005bc0:	f7fb ff67 	bl	8001a92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005bcc:	1d3b      	adds	r3, r7, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4805      	ldr	r0, [pc, #20]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005bd2:	f007 fd09 	bl	800d5e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8005bdc:	f7fb ff59 	bl	8001a92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8005be0:	bf00      	nop
 8005be2:	3720      	adds	r7, #32
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	200010c0 	.word	0x200010c0
 8005bec:	40014000 	.word	0x40014000

08005bf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c00:	d10c      	bne.n	8005c1c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c02:	4b2b      	ldr	r3, [pc, #172]	; (8005cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8005c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c06:	4a2a      	ldr	r2, [pc, #168]	; (8005cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8005c0e:	4b28      	ldr	r3, [pc, #160]	; (8005cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8005c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8005c1a:	e044      	b.n	8005ca6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM6)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a24      	ldr	r2, [pc, #144]	; (8005cb4 <HAL_TIM_Base_MspInit+0xc4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d10c      	bne.n	8005c40 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005c26:	4b22      	ldr	r3, [pc, #136]	; (8005cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8005c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2a:	4a21      	ldr	r2, [pc, #132]	; (8005cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8005c2c:	f043 0310 	orr.w	r3, r3, #16
 8005c30:	6593      	str	r3, [r2, #88]	; 0x58
 8005c32:	4b1f      	ldr	r3, [pc, #124]	; (8005cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8005c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c36:	f003 0310 	and.w	r3, r3, #16
 8005c3a:	613b      	str	r3, [r7, #16]
 8005c3c:	693b      	ldr	r3, [r7, #16]
}
 8005c3e:	e032      	b.n	8005ca6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM7)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a1c      	ldr	r2, [pc, #112]	; (8005cb8 <HAL_TIM_Base_MspInit+0xc8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d114      	bne.n	8005c74 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005c4a:	4b19      	ldr	r3, [pc, #100]	; (8005cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8005c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4e:	4a18      	ldr	r2, [pc, #96]	; (8005cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8005c50:	f043 0320 	orr.w	r3, r3, #32
 8005c54:	6593      	str	r3, [r2, #88]	; 0x58
 8005c56:	4b16      	ldr	r3, [pc, #88]	; (8005cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8005c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005c62:	2200      	movs	r2, #0
 8005c64:	2100      	movs	r1, #0
 8005c66:	2037      	movs	r0, #55	; 0x37
 8005c68:	f001 ff89 	bl	8007b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005c6c:	2037      	movs	r0, #55	; 0x37
 8005c6e:	f001 ffa2 	bl	8007bb6 <HAL_NVIC_EnableIRQ>
}
 8005c72:	e018      	b.n	8005ca6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM15)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a10      	ldr	r2, [pc, #64]	; (8005cbc <HAL_TIM_Base_MspInit+0xcc>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d113      	bne.n	8005ca6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005c7e:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8005c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c82:	4a0b      	ldr	r2, [pc, #44]	; (8005cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8005c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c88:	6613      	str	r3, [r2, #96]	; 0x60
 8005c8a:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8005c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c92:	60bb      	str	r3, [r7, #8]
 8005c94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005c96:	2200      	movs	r2, #0
 8005c98:	2100      	movs	r1, #0
 8005c9a:	2018      	movs	r0, #24
 8005c9c:	f001 ff6f 	bl	8007b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005ca0:	2018      	movs	r0, #24
 8005ca2:	f001 ff88 	bl	8007bb6 <HAL_NVIC_EnableIRQ>
}
 8005ca6:	bf00      	nop
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	40001000 	.word	0x40001000
 8005cb8:	40001400 	.word	0x40001400
 8005cbc:	40014000 	.word	0x40014000

08005cc0 <updatedate>:
  /* USER CODE END TIM15_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0

	SEC+=1;
 8005cc4:	4b98      	ldr	r3, [pc, #608]	; (8005f28 <updatedate+0x268>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	4b96      	ldr	r3, [pc, #600]	; (8005f28 <updatedate+0x268>)
 8005cce:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 8005cd0:	4b95      	ldr	r3, [pc, #596]	; (8005f28 <updatedate+0x268>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b3b      	cmp	r3, #59	; 0x3b
 8005cd6:	d908      	bls.n	8005cea <updatedate+0x2a>
		SEC=0;
 8005cd8:	4b93      	ldr	r3, [pc, #588]	; (8005f28 <updatedate+0x268>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 8005cde:	4b93      	ldr	r3, [pc, #588]	; (8005f2c <updatedate+0x26c>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	4b91      	ldr	r3, [pc, #580]	; (8005f2c <updatedate+0x26c>)
 8005ce8:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 8005cea:	4b90      	ldr	r3, [pc, #576]	; (8005f2c <updatedate+0x26c>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b3b      	cmp	r3, #59	; 0x3b
 8005cf0:	d908      	bls.n	8005d04 <updatedate+0x44>

		MINUTE=0;
 8005cf2:	4b8e      	ldr	r3, [pc, #568]	; (8005f2c <updatedate+0x26c>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	701a      	strb	r2, [r3, #0]
		HR+=1;
 8005cf8:	4b8d      	ldr	r3, [pc, #564]	; (8005f30 <updatedate+0x270>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	4b8b      	ldr	r3, [pc, #556]	; (8005f30 <updatedate+0x270>)
 8005d02:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 8005d04:	4b8a      	ldr	r3, [pc, #552]	; (8005f30 <updatedate+0x270>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b17      	cmp	r3, #23
 8005d0a:	d908      	bls.n	8005d1e <updatedate+0x5e>
		HR=0;
 8005d0c:	4b88      	ldr	r3, [pc, #544]	; (8005f30 <updatedate+0x270>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 8005d12:	4b88      	ldr	r3, [pc, #544]	; (8005f34 <updatedate+0x274>)
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	3301      	adds	r3, #1
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	4b86      	ldr	r3, [pc, #536]	; (8005f34 <updatedate+0x274>)
 8005d1c:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 8005d1e:	4b86      	ldr	r3, [pc, #536]	; (8005f38 <updatedate+0x278>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b0b      	cmp	r3, #11
 8005d24:	f200 8137 	bhi.w	8005f96 <updatedate+0x2d6>
 8005d28:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <updatedate+0x70>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005d61 	.word	0x08005d61
 8005d34:	08005d8b 	.word	0x08005d8b
 8005d38:	08005db5 	.word	0x08005db5
 8005d3c:	08005ddf 	.word	0x08005ddf
 8005d40:	08005e09 	.word	0x08005e09
 8005d44:	08005e33 	.word	0x08005e33
 8005d48:	08005e5d 	.word	0x08005e5d
 8005d4c:	08005e87 	.word	0x08005e87
 8005d50:	08005eaf 	.word	0x08005eaf
 8005d54:	08005ed7 	.word	0x08005ed7
 8005d58:	08005eff 	.word	0x08005eff
 8005d5c:	08005f41 	.word	0x08005f41

	case JANVIER:
		if(JOURS>31){
 8005d60:	4b74      	ldr	r3, [pc, #464]	; (8005f34 <updatedate+0x274>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b1f      	cmp	r3, #31
 8005d66:	f240 80ff 	bls.w	8005f68 <updatedate+0x2a8>
			JOURS=1;
 8005d6a:	4b72      	ldr	r3, [pc, #456]	; (8005f34 <updatedate+0x274>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	701a      	strb	r2, [r3, #0]
			mois++;
 8005d70:	4b71      	ldr	r3, [pc, #452]	; (8005f38 <updatedate+0x278>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	3301      	adds	r3, #1
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	4b6f      	ldr	r3, [pc, #444]	; (8005f38 <updatedate+0x278>)
 8005d7a:	701a      	strb	r2, [r3, #0]
			MOIS++;
 8005d7c:	4b6f      	ldr	r3, [pc, #444]	; (8005f3c <updatedate+0x27c>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	3301      	adds	r3, #1
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	4b6d      	ldr	r3, [pc, #436]	; (8005f3c <updatedate+0x27c>)
 8005d86:	701a      	strb	r2, [r3, #0]
		}

		break;
 8005d88:	e0ee      	b.n	8005f68 <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 8005d8a:	4b6a      	ldr	r3, [pc, #424]	; (8005f34 <updatedate+0x274>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b1d      	cmp	r3, #29
 8005d90:	f240 80ec 	bls.w	8005f6c <updatedate+0x2ac>
					JOURS=1;
 8005d94:	4b67      	ldr	r3, [pc, #412]	; (8005f34 <updatedate+0x274>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	701a      	strb	r2, [r3, #0]
					mois++;
 8005d9a:	4b67      	ldr	r3, [pc, #412]	; (8005f38 <updatedate+0x278>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	4b65      	ldr	r3, [pc, #404]	; (8005f38 <updatedate+0x278>)
 8005da4:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005da6:	4b65      	ldr	r3, [pc, #404]	; (8005f3c <updatedate+0x27c>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	3301      	adds	r3, #1
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	4b63      	ldr	r3, [pc, #396]	; (8005f3c <updatedate+0x27c>)
 8005db0:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005db2:	e0db      	b.n	8005f6c <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 8005db4:	4b5f      	ldr	r3, [pc, #380]	; (8005f34 <updatedate+0x274>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b1f      	cmp	r3, #31
 8005dba:	f240 80d9 	bls.w	8005f70 <updatedate+0x2b0>
					JOURS=1;
 8005dbe:	4b5d      	ldr	r3, [pc, #372]	; (8005f34 <updatedate+0x274>)
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	701a      	strb	r2, [r3, #0]
					mois++;
 8005dc4:	4b5c      	ldr	r3, [pc, #368]	; (8005f38 <updatedate+0x278>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	4b5a      	ldr	r3, [pc, #360]	; (8005f38 <updatedate+0x278>)
 8005dce:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005dd0:	4b5a      	ldr	r3, [pc, #360]	; (8005f3c <updatedate+0x27c>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	4b58      	ldr	r3, [pc, #352]	; (8005f3c <updatedate+0x27c>)
 8005dda:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005ddc:	e0c8      	b.n	8005f70 <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 8005dde:	4b55      	ldr	r3, [pc, #340]	; (8005f34 <updatedate+0x274>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b1e      	cmp	r3, #30
 8005de4:	f240 80c6 	bls.w	8005f74 <updatedate+0x2b4>
					JOURS=1;
 8005de8:	4b52      	ldr	r3, [pc, #328]	; (8005f34 <updatedate+0x274>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	701a      	strb	r2, [r3, #0]
					mois++;
 8005dee:	4b52      	ldr	r3, [pc, #328]	; (8005f38 <updatedate+0x278>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	3301      	adds	r3, #1
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	4b50      	ldr	r3, [pc, #320]	; (8005f38 <updatedate+0x278>)
 8005df8:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005dfa:	4b50      	ldr	r3, [pc, #320]	; (8005f3c <updatedate+0x27c>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	4b4e      	ldr	r3, [pc, #312]	; (8005f3c <updatedate+0x27c>)
 8005e04:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005e06:	e0b5      	b.n	8005f74 <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 8005e08:	4b4a      	ldr	r3, [pc, #296]	; (8005f34 <updatedate+0x274>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b1f      	cmp	r3, #31
 8005e0e:	f240 80b3 	bls.w	8005f78 <updatedate+0x2b8>
					JOURS=1;
 8005e12:	4b48      	ldr	r3, [pc, #288]	; (8005f34 <updatedate+0x274>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	701a      	strb	r2, [r3, #0]
					mois++;
 8005e18:	4b47      	ldr	r3, [pc, #284]	; (8005f38 <updatedate+0x278>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	4b45      	ldr	r3, [pc, #276]	; (8005f38 <updatedate+0x278>)
 8005e22:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005e24:	4b45      	ldr	r3, [pc, #276]	; (8005f3c <updatedate+0x27c>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	4b43      	ldr	r3, [pc, #268]	; (8005f3c <updatedate+0x27c>)
 8005e2e:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005e30:	e0a2      	b.n	8005f78 <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 8005e32:	4b40      	ldr	r3, [pc, #256]	; (8005f34 <updatedate+0x274>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b1e      	cmp	r3, #30
 8005e38:	f240 80a0 	bls.w	8005f7c <updatedate+0x2bc>
					JOURS=1;
 8005e3c:	4b3d      	ldr	r3, [pc, #244]	; (8005f34 <updatedate+0x274>)
 8005e3e:	2201      	movs	r2, #1
 8005e40:	701a      	strb	r2, [r3, #0]
					mois++;
 8005e42:	4b3d      	ldr	r3, [pc, #244]	; (8005f38 <updatedate+0x278>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	3301      	adds	r3, #1
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	4b3b      	ldr	r3, [pc, #236]	; (8005f38 <updatedate+0x278>)
 8005e4c:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005e4e:	4b3b      	ldr	r3, [pc, #236]	; (8005f3c <updatedate+0x27c>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	3301      	adds	r3, #1
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	4b39      	ldr	r3, [pc, #228]	; (8005f3c <updatedate+0x27c>)
 8005e58:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005e5a:	e08f      	b.n	8005f7c <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 8005e5c:	4b35      	ldr	r3, [pc, #212]	; (8005f34 <updatedate+0x274>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2b1f      	cmp	r3, #31
 8005e62:	f240 808d 	bls.w	8005f80 <updatedate+0x2c0>
					JOURS=1;
 8005e66:	4b33      	ldr	r3, [pc, #204]	; (8005f34 <updatedate+0x274>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	701a      	strb	r2, [r3, #0]
					mois++;
 8005e6c:	4b32      	ldr	r3, [pc, #200]	; (8005f38 <updatedate+0x278>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	3301      	adds	r3, #1
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	4b30      	ldr	r3, [pc, #192]	; (8005f38 <updatedate+0x278>)
 8005e76:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005e78:	4b30      	ldr	r3, [pc, #192]	; (8005f3c <updatedate+0x27c>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	4b2e      	ldr	r3, [pc, #184]	; (8005f3c <updatedate+0x27c>)
 8005e82:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005e84:	e07c      	b.n	8005f80 <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 8005e86:	4b2b      	ldr	r3, [pc, #172]	; (8005f34 <updatedate+0x274>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b1f      	cmp	r3, #31
 8005e8c:	d97a      	bls.n	8005f84 <updatedate+0x2c4>
					JOURS=1;
 8005e8e:	4b29      	ldr	r3, [pc, #164]	; (8005f34 <updatedate+0x274>)
 8005e90:	2201      	movs	r2, #1
 8005e92:	701a      	strb	r2, [r3, #0]
					mois++;
 8005e94:	4b28      	ldr	r3, [pc, #160]	; (8005f38 <updatedate+0x278>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	4b26      	ldr	r3, [pc, #152]	; (8005f38 <updatedate+0x278>)
 8005e9e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005ea0:	4b26      	ldr	r3, [pc, #152]	; (8005f3c <updatedate+0x27c>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	4b24      	ldr	r3, [pc, #144]	; (8005f3c <updatedate+0x27c>)
 8005eaa:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005eac:	e06a      	b.n	8005f84 <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 8005eae:	4b21      	ldr	r3, [pc, #132]	; (8005f34 <updatedate+0x274>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b1e      	cmp	r3, #30
 8005eb4:	d968      	bls.n	8005f88 <updatedate+0x2c8>
					JOURS=1;
 8005eb6:	4b1f      	ldr	r3, [pc, #124]	; (8005f34 <updatedate+0x274>)
 8005eb8:	2201      	movs	r2, #1
 8005eba:	701a      	strb	r2, [r3, #0]
					mois++;
 8005ebc:	4b1e      	ldr	r3, [pc, #120]	; (8005f38 <updatedate+0x278>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	4b1c      	ldr	r3, [pc, #112]	; (8005f38 <updatedate+0x278>)
 8005ec6:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005ec8:	4b1c      	ldr	r3, [pc, #112]	; (8005f3c <updatedate+0x27c>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	4b1a      	ldr	r3, [pc, #104]	; (8005f3c <updatedate+0x27c>)
 8005ed2:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005ed4:	e058      	b.n	8005f88 <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 8005ed6:	4b17      	ldr	r3, [pc, #92]	; (8005f34 <updatedate+0x274>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b1f      	cmp	r3, #31
 8005edc:	d956      	bls.n	8005f8c <updatedate+0x2cc>
					JOURS=1;
 8005ede:	4b15      	ldr	r3, [pc, #84]	; (8005f34 <updatedate+0x274>)
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	701a      	strb	r2, [r3, #0]
					mois++;
 8005ee4:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <updatedate+0x278>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	4b12      	ldr	r3, [pc, #72]	; (8005f38 <updatedate+0x278>)
 8005eee:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005ef0:	4b12      	ldr	r3, [pc, #72]	; (8005f3c <updatedate+0x27c>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	4b10      	ldr	r3, [pc, #64]	; (8005f3c <updatedate+0x27c>)
 8005efa:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005efc:	e046      	b.n	8005f8c <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 8005efe:	4b0d      	ldr	r3, [pc, #52]	; (8005f34 <updatedate+0x274>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b1e      	cmp	r3, #30
 8005f04:	d944      	bls.n	8005f90 <updatedate+0x2d0>
					JOURS=1;
 8005f06:	4b0b      	ldr	r3, [pc, #44]	; (8005f34 <updatedate+0x274>)
 8005f08:	2201      	movs	r2, #1
 8005f0a:	701a      	strb	r2, [r3, #0]
					mois++;
 8005f0c:	4b0a      	ldr	r3, [pc, #40]	; (8005f38 <updatedate+0x278>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	3301      	adds	r3, #1
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	4b08      	ldr	r3, [pc, #32]	; (8005f38 <updatedate+0x278>)
 8005f16:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005f18:	4b08      	ldr	r3, [pc, #32]	; (8005f3c <updatedate+0x27c>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <updatedate+0x27c>)
 8005f22:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005f24:	e034      	b.n	8005f90 <updatedate+0x2d0>
 8005f26:	bf00      	nop
 8005f28:	20000a48 	.word	0x20000a48
 8005f2c:	20000a4a 	.word	0x20000a4a
 8005f30:	20000a49 	.word	0x20000a49
 8005f34:	20000008 	.word	0x20000008
 8005f38:	20000a4b 	.word	0x20000a4b
 8005f3c:	20000009 	.word	0x20000009
	case DECEMBRE:
		if(JOURS>31){
 8005f40:	4b1f      	ldr	r3, [pc, #124]	; (8005fc0 <updatedate+0x300>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b1f      	cmp	r3, #31
 8005f46:	d925      	bls.n	8005f94 <updatedate+0x2d4>
					JOURS=1;
 8005f48:	4b1d      	ldr	r3, [pc, #116]	; (8005fc0 <updatedate+0x300>)
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	701a      	strb	r2, [r3, #0]
					mois++;
 8005f4e:	4b1d      	ldr	r3, [pc, #116]	; (8005fc4 <updatedate+0x304>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	3301      	adds	r3, #1
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	4b1b      	ldr	r3, [pc, #108]	; (8005fc4 <updatedate+0x304>)
 8005f58:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005f5a:	4b1b      	ldr	r3, [pc, #108]	; (8005fc8 <updatedate+0x308>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	4b19      	ldr	r3, [pc, #100]	; (8005fc8 <updatedate+0x308>)
 8005f64:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005f66:	e015      	b.n	8005f94 <updatedate+0x2d4>
		break;
 8005f68:	bf00      	nop
 8005f6a:	e014      	b.n	8005f96 <updatedate+0x2d6>
		break;
 8005f6c:	bf00      	nop
 8005f6e:	e012      	b.n	8005f96 <updatedate+0x2d6>
		break;
 8005f70:	bf00      	nop
 8005f72:	e010      	b.n	8005f96 <updatedate+0x2d6>
		break;
 8005f74:	bf00      	nop
 8005f76:	e00e      	b.n	8005f96 <updatedate+0x2d6>
		break;
 8005f78:	bf00      	nop
 8005f7a:	e00c      	b.n	8005f96 <updatedate+0x2d6>
		break;
 8005f7c:	bf00      	nop
 8005f7e:	e00a      	b.n	8005f96 <updatedate+0x2d6>
		break;
 8005f80:	bf00      	nop
 8005f82:	e008      	b.n	8005f96 <updatedate+0x2d6>
		break;
 8005f84:	bf00      	nop
 8005f86:	e006      	b.n	8005f96 <updatedate+0x2d6>
		break;
 8005f88:	bf00      	nop
 8005f8a:	e004      	b.n	8005f96 <updatedate+0x2d6>
		break;
 8005f8c:	bf00      	nop
 8005f8e:	e002      	b.n	8005f96 <updatedate+0x2d6>
		break;
 8005f90:	bf00      	nop
 8005f92:	e000      	b.n	8005f96 <updatedate+0x2d6>
		break;
 8005f94:	bf00      	nop

	}

	if(MOIS>12){
 8005f96:	4b0c      	ldr	r3, [pc, #48]	; (8005fc8 <updatedate+0x308>)
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b0c      	cmp	r3, #12
 8005f9c:	d90b      	bls.n	8005fb6 <updatedate+0x2f6>
		mois=JANVIER;
 8005f9e:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <updatedate+0x304>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 8005fa4:	4b08      	ldr	r3, [pc, #32]	; (8005fc8 <updatedate+0x308>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 8005faa:	4b08      	ldr	r3, [pc, #32]	; (8005fcc <updatedate+0x30c>)
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	4b06      	ldr	r3, [pc, #24]	; (8005fcc <updatedate+0x30c>)
 8005fb4:	801a      	strh	r2, [r3, #0]
	}
}
 8005fb6:	bf00      	nop
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	20000008 	.word	0x20000008
 8005fc4:	20000a4b 	.word	0x20000a4b
 8005fc8:	20000009 	.word	0x20000009
 8005fcc:	2000000a 	.word	0x2000000a

08005fd0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005fd4:	4b12      	ldr	r3, [pc, #72]	; (8006020 <MX_LPUART1_UART_Init+0x50>)
 8005fd6:	4a13      	ldr	r2, [pc, #76]	; (8006024 <MX_LPUART1_UART_Init+0x54>)
 8005fd8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8005fda:	4b11      	ldr	r3, [pc, #68]	; (8006020 <MX_LPUART1_UART_Init+0x50>)
 8005fdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005fe0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005fe2:	4b0f      	ldr	r3, [pc, #60]	; (8006020 <MX_LPUART1_UART_Init+0x50>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005fe8:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <MX_LPUART1_UART_Init+0x50>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005fee:	4b0c      	ldr	r3, [pc, #48]	; (8006020 <MX_LPUART1_UART_Init+0x50>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005ff4:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <MX_LPUART1_UART_Init+0x50>)
 8005ff6:	220c      	movs	r2, #12
 8005ff8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ffa:	4b09      	ldr	r3, [pc, #36]	; (8006020 <MX_LPUART1_UART_Init+0x50>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006000:	4b07      	ldr	r3, [pc, #28]	; (8006020 <MX_LPUART1_UART_Init+0x50>)
 8006002:	2200      	movs	r2, #0
 8006004:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006006:	4b06      	ldr	r3, [pc, #24]	; (8006020 <MX_LPUART1_UART_Init+0x50>)
 8006008:	2200      	movs	r2, #0
 800600a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800600c:	4804      	ldr	r0, [pc, #16]	; (8006020 <MX_LPUART1_UART_Init+0x50>)
 800600e:	f007 fb6f 	bl	800d6f0 <HAL_UART_Init>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8006018:	f7fb fd3b 	bl	8001a92 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800601c:	bf00      	nop
 800601e:	bd80      	pop	{r7, pc}
 8006020:	2000110c 	.word	0x2000110c
 8006024:	40008000 	.word	0x40008000

08006028 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800602c:	4b14      	ldr	r3, [pc, #80]	; (8006080 <MX_USART1_UART_Init+0x58>)
 800602e:	4a15      	ldr	r2, [pc, #84]	; (8006084 <MX_USART1_UART_Init+0x5c>)
 8006030:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006032:	4b13      	ldr	r3, [pc, #76]	; (8006080 <MX_USART1_UART_Init+0x58>)
 8006034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006038:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800603a:	4b11      	ldr	r3, [pc, #68]	; (8006080 <MX_USART1_UART_Init+0x58>)
 800603c:	2200      	movs	r2, #0
 800603e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006040:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <MX_USART1_UART_Init+0x58>)
 8006042:	2200      	movs	r2, #0
 8006044:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006046:	4b0e      	ldr	r3, [pc, #56]	; (8006080 <MX_USART1_UART_Init+0x58>)
 8006048:	2200      	movs	r2, #0
 800604a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800604c:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <MX_USART1_UART_Init+0x58>)
 800604e:	220c      	movs	r2, #12
 8006050:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006052:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <MX_USART1_UART_Init+0x58>)
 8006054:	2200      	movs	r2, #0
 8006056:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006058:	4b09      	ldr	r3, [pc, #36]	; (8006080 <MX_USART1_UART_Init+0x58>)
 800605a:	2200      	movs	r2, #0
 800605c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800605e:	4b08      	ldr	r3, [pc, #32]	; (8006080 <MX_USART1_UART_Init+0x58>)
 8006060:	2200      	movs	r2, #0
 8006062:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <MX_USART1_UART_Init+0x58>)
 8006066:	2200      	movs	r2, #0
 8006068:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800606a:	4805      	ldr	r0, [pc, #20]	; (8006080 <MX_USART1_UART_Init+0x58>)
 800606c:	f007 fb40 	bl	800d6f0 <HAL_UART_Init>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006076:	f7fb fd0c 	bl	8001a92 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800607a:	bf00      	nop
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20001194 	.word	0x20001194
 8006084:	40013800 	.word	0x40013800

08006088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b0a0      	sub	sp, #128	; 0x80
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006090:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	605a      	str	r2, [r3, #4]
 800609a:	609a      	str	r2, [r3, #8]
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80060a0:	f107 0318 	add.w	r3, r7, #24
 80060a4:	2254      	movs	r2, #84	; 0x54
 80060a6:	2100      	movs	r1, #0
 80060a8:	4618      	mov	r0, r3
 80060aa:	f010 fba6 	bl	80167fa <memset>
  if(uartHandle->Instance==LPUART1)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a55      	ldr	r2, [pc, #340]	; (8006208 <HAL_UART_MspInit+0x180>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d168      	bne.n	800618a <HAL_UART_MspInit+0x102>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80060b8:	2320      	movs	r3, #32
 80060ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80060bc:	2300      	movs	r3, #0
 80060be:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80060c0:	f107 0318 	add.w	r3, r7, #24
 80060c4:	4618      	mov	r0, r3
 80060c6:	f005 fabb 	bl	800b640 <HAL_RCCEx_PeriphCLKConfig>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80060d0:	f7fb fcdf 	bl	8001a92 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80060d4:	4b4d      	ldr	r3, [pc, #308]	; (800620c <HAL_UART_MspInit+0x184>)
 80060d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d8:	4a4c      	ldr	r2, [pc, #304]	; (800620c <HAL_UART_MspInit+0x184>)
 80060da:	f043 0301 	orr.w	r3, r3, #1
 80060de:	65d3      	str	r3, [r2, #92]	; 0x5c
 80060e0:	4b4a      	ldr	r3, [pc, #296]	; (800620c <HAL_UART_MspInit+0x184>)
 80060e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060ec:	4b47      	ldr	r3, [pc, #284]	; (800620c <HAL_UART_MspInit+0x184>)
 80060ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f0:	4a46      	ldr	r2, [pc, #280]	; (800620c <HAL_UART_MspInit+0x184>)
 80060f2:	f043 0301 	orr.w	r3, r3, #1
 80060f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060f8:	4b44      	ldr	r3, [pc, #272]	; (800620c <HAL_UART_MspInit+0x184>)
 80060fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006104:	230c      	movs	r3, #12
 8006106:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006108:	2302      	movs	r3, #2
 800610a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800610c:	2300      	movs	r3, #0
 800610e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006110:	2303      	movs	r3, #3
 8006112:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8006114:	2308      	movs	r3, #8
 8006116:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006118:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800611c:	4619      	mov	r1, r3
 800611e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006122:	f001 ffe5 	bl	80080f0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 8006126:	4b3a      	ldr	r3, [pc, #232]	; (8006210 <HAL_UART_MspInit+0x188>)
 8006128:	4a3a      	ldr	r2, [pc, #232]	; (8006214 <HAL_UART_MspInit+0x18c>)
 800612a:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 800612c:	4b38      	ldr	r3, [pc, #224]	; (8006210 <HAL_UART_MspInit+0x188>)
 800612e:	2204      	movs	r2, #4
 8006130:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006132:	4b37      	ldr	r3, [pc, #220]	; (8006210 <HAL_UART_MspInit+0x188>)
 8006134:	2200      	movs	r2, #0
 8006136:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006138:	4b35      	ldr	r3, [pc, #212]	; (8006210 <HAL_UART_MspInit+0x188>)
 800613a:	2200      	movs	r2, #0
 800613c:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 800613e:	4b34      	ldr	r3, [pc, #208]	; (8006210 <HAL_UART_MspInit+0x188>)
 8006140:	2280      	movs	r2, #128	; 0x80
 8006142:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006144:	4b32      	ldr	r3, [pc, #200]	; (8006210 <HAL_UART_MspInit+0x188>)
 8006146:	2200      	movs	r2, #0
 8006148:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800614a:	4b31      	ldr	r3, [pc, #196]	; (8006210 <HAL_UART_MspInit+0x188>)
 800614c:	2200      	movs	r2, #0
 800614e:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_NORMAL;
 8006150:	4b2f      	ldr	r3, [pc, #188]	; (8006210 <HAL_UART_MspInit+0x188>)
 8006152:	2200      	movs	r2, #0
 8006154:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006156:	4b2e      	ldr	r3, [pc, #184]	; (8006210 <HAL_UART_MspInit+0x188>)
 8006158:	2200      	movs	r2, #0
 800615a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 800615c:	482c      	ldr	r0, [pc, #176]	; (8006210 <HAL_UART_MspInit+0x188>)
 800615e:	f001 fd45 	bl	8007bec <HAL_DMA_Init>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8006168:	f7fb fc93 	bl	8001a92 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart_rx);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a28      	ldr	r2, [pc, #160]	; (8006210 <HAL_UART_MspInit+0x188>)
 8006170:	675a      	str	r2, [r3, #116]	; 0x74
 8006172:	4a27      	ldr	r2, [pc, #156]	; (8006210 <HAL_UART_MspInit+0x188>)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8006178:	2200      	movs	r2, #0
 800617a:	2100      	movs	r1, #0
 800617c:	2046      	movs	r0, #70	; 0x46
 800617e:	f001 fcfe 	bl	8007b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8006182:	2046      	movs	r0, #70	; 0x46
 8006184:	f001 fd17 	bl	8007bb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006188:	e03a      	b.n	8006200 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART1)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a22      	ldr	r2, [pc, #136]	; (8006218 <HAL_UART_MspInit+0x190>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d135      	bne.n	8006200 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006194:	2301      	movs	r3, #1
 8006196:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006198:	2300      	movs	r3, #0
 800619a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800619c:	f107 0318 	add.w	r3, r7, #24
 80061a0:	4618      	mov	r0, r3
 80061a2:	f005 fa4d 	bl	800b640 <HAL_RCCEx_PeriphCLKConfig>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <HAL_UART_MspInit+0x128>
      Error_Handler();
 80061ac:	f7fb fc71 	bl	8001a92 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80061b0:	4b16      	ldr	r3, [pc, #88]	; (800620c <HAL_UART_MspInit+0x184>)
 80061b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b4:	4a15      	ldr	r2, [pc, #84]	; (800620c <HAL_UART_MspInit+0x184>)
 80061b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061ba:	6613      	str	r3, [r2, #96]	; 0x60
 80061bc:	4b13      	ldr	r3, [pc, #76]	; (800620c <HAL_UART_MspInit+0x184>)
 80061be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061c8:	4b10      	ldr	r3, [pc, #64]	; (800620c <HAL_UART_MspInit+0x184>)
 80061ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061cc:	4a0f      	ldr	r2, [pc, #60]	; (800620c <HAL_UART_MspInit+0x184>)
 80061ce:	f043 0302 	orr.w	r3, r3, #2
 80061d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061d4:	4b0d      	ldr	r3, [pc, #52]	; (800620c <HAL_UART_MspInit+0x184>)
 80061d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	60bb      	str	r3, [r7, #8]
 80061de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80061e0:	23c0      	movs	r3, #192	; 0xc0
 80061e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e4:	2302      	movs	r3, #2
 80061e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061ec:	2303      	movs	r3, #3
 80061ee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80061f0:	2307      	movs	r3, #7
 80061f2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80061f8:	4619      	mov	r1, r3
 80061fa:	4808      	ldr	r0, [pc, #32]	; (800621c <HAL_UART_MspInit+0x194>)
 80061fc:	f001 ff78 	bl	80080f0 <HAL_GPIO_Init>
}
 8006200:	bf00      	nop
 8006202:	3780      	adds	r7, #128	; 0x80
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40008000 	.word	0x40008000
 800620c:	40021000 	.word	0x40021000
 8006210:	2000121c 	.word	0x2000121c
 8006214:	40020480 	.word	0x40020480
 8006218:	40013800 	.word	0x40013800
 800621c:	48000400 	.word	0x48000400

08006220 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8006228:	4b30      	ldr	r3, [pc, #192]	; (80062ec <HAL_UART_RxCpltCallback+0xcc>)
 800622a:	881a      	ldrh	r2, [r3, #0]
 800622c:	4b30      	ldr	r3, [pc, #192]	; (80062f0 <HAL_UART_RxCpltCallback+0xd0>)
 800622e:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8006230:	4b2f      	ldr	r3, [pc, #188]	; (80062f0 <HAL_UART_RxCpltCallback+0xd0>)
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8006238:	d922      	bls.n	8006280 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 800623a:	4b2d      	ldr	r3, [pc, #180]	; (80062f0 <HAL_UART_RxCpltCallback+0xd0>)
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006242:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8006244:	4b2a      	ldr	r3, [pc, #168]	; (80062f0 <HAL_UART_RxCpltCallback+0xd0>)
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	4b2a      	ldr	r3, [pc, #168]	; (80062f4 <HAL_UART_RxCpltCallback+0xd4>)
 800624c:	4413      	add	r3, r2
 800624e:	89fa      	ldrh	r2, [r7, #14]
 8006250:	4929      	ldr	r1, [pc, #164]	; (80062f8 <HAL_UART_RxCpltCallback+0xd8>)
 8006252:	4618      	mov	r0, r3
 8006254:	f010 fbed 	bl	8016a32 <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8006258:	4b25      	ldr	r3, [pc, #148]	; (80062f0 <HAL_UART_RxCpltCallback+0xd0>)
 800625a:	2200      	movs	r2, #0
 800625c:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 800625e:	89fb      	ldrh	r3, [r7, #14]
 8006260:	4a25      	ldr	r2, [pc, #148]	; (80062f8 <HAL_UART_RxCpltCallback+0xd8>)
 8006262:	1899      	adds	r1, r3, r2
 8006264:	89fb      	ldrh	r3, [r7, #14]
 8006266:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800626a:	461a      	mov	r2, r3
 800626c:	4821      	ldr	r0, [pc, #132]	; (80062f4 <HAL_UART_RxCpltCallback+0xd4>)
 800626e:	f010 fbe0 	bl	8016a32 <memcpy>
				newPos = (64-datatocopy);  // update the position
 8006272:	89fb      	ldrh	r3, [r7, #14]
 8006274:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006278:	b29a      	uxth	r2, r3
 800627a:	4b1c      	ldr	r3, [pc, #112]	; (80062ec <HAL_UART_RxCpltCallback+0xcc>)
 800627c:	801a      	strh	r2, [r3, #0]
 800627e:	e01e      	b.n	80062be <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8006280:	4b1b      	ldr	r3, [pc, #108]	; (80062f0 <HAL_UART_RxCpltCallback+0xd0>)
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	4b1b      	ldr	r3, [pc, #108]	; (80062f4 <HAL_UART_RxCpltCallback+0xd4>)
 8006288:	441a      	add	r2, r3
 800628a:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <HAL_UART_RxCpltCallback+0xd8>)
 800628c:	4610      	mov	r0, r2
 800628e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8006292:	4602      	mov	r2, r0
 8006294:	4619      	mov	r1, r3
 8006296:	f8d1 c000 	ldr.w	ip, [r1]
 800629a:	684e      	ldr	r6, [r1, #4]
 800629c:	688d      	ldr	r5, [r1, #8]
 800629e:	68c9      	ldr	r1, [r1, #12]
 80062a0:	f8c2 c000 	str.w	ip, [r2]
 80062a4:	6056      	str	r6, [r2, #4]
 80062a6:	6095      	str	r5, [r2, #8]
 80062a8:	60d1      	str	r1, [r2, #12]
 80062aa:	3310      	adds	r3, #16
 80062ac:	3010      	adds	r0, #16
 80062ae:	42a3      	cmp	r3, r4
 80062b0:	d1ef      	bne.n	8006292 <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 80062b2:	4b0f      	ldr	r3, [pc, #60]	; (80062f0 <HAL_UART_RxCpltCallback+0xd0>)
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	3340      	adds	r3, #64	; 0x40
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	4b0c      	ldr	r3, [pc, #48]	; (80062ec <HAL_UART_RxCpltCallback+0xcc>)
 80062bc:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 80062be:	2240      	movs	r2, #64	; 0x40
 80062c0:	490d      	ldr	r1, [pc, #52]	; (80062f8 <HAL_UART_RxCpltCallback+0xd8>)
 80062c2:	480e      	ldr	r0, [pc, #56]	; (80062fc <HAL_UART_RxCpltCallback+0xdc>)
 80062c4:	f007 fa62 	bl	800d78c <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 80062c8:	4b0d      	ldr	r3, [pc, #52]	; (8006300 <HAL_UART_RxCpltCallback+0xe0>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <HAL_UART_RxCpltCallback+0xe0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0204 	bic.w	r2, r2, #4
 80062d6:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 80062d8:	2240      	movs	r2, #64	; 0x40
 80062da:	4907      	ldr	r1, [pc, #28]	; (80062f8 <HAL_UART_RxCpltCallback+0xd8>)
 80062dc:	4807      	ldr	r0, [pc, #28]	; (80062fc <HAL_UART_RxCpltCallback+0xdc>)
 80062de:	f007 fa55 	bl	800d78c <HAL_UART_Receive_DMA>
}
 80062e2:	bf00      	nop
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20000482 	.word	0x20000482
 80062f0:	20000480 	.word	0x20000480
 80062f4:	200004c4 	.word	0x200004c4
 80062f8:	20000484 	.word	0x20000484
 80062fc:	2000110c 	.word	0x2000110c
 8006300:	2000121c 	.word	0x2000121c

08006304 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800633c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006308:	f7ff fb52 	bl	80059b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800630c:	480c      	ldr	r0, [pc, #48]	; (8006340 <LoopForever+0x6>)
  ldr r1, =_edata
 800630e:	490d      	ldr	r1, [pc, #52]	; (8006344 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006310:	4a0d      	ldr	r2, [pc, #52]	; (8006348 <LoopForever+0xe>)
  movs r3, #0
 8006312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006314:	e002      	b.n	800631c <LoopCopyDataInit>

08006316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800631a:	3304      	adds	r3, #4

0800631c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800631c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800631e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006320:	d3f9      	bcc.n	8006316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006322:	4a0a      	ldr	r2, [pc, #40]	; (800634c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006324:	4c0a      	ldr	r4, [pc, #40]	; (8006350 <LoopForever+0x16>)
  movs r3, #0
 8006326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006328:	e001      	b.n	800632e <LoopFillZerobss>

0800632a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800632a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800632c:	3204      	adds	r2, #4

0800632e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800632e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006330:	d3fb      	bcc.n	800632a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006332:	f010 fb4f 	bl	80169d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006336:	f7fb faa1 	bl	800187c <main>

0800633a <LoopForever>:

LoopForever:
    b LoopForever
 800633a:	e7fe      	b.n	800633a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800633c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8006340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006344:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8006348:	0801d378 	.word	0x0801d378
  ldr r2, =_sbss
 800634c:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8006350:	200025ac 	.word	0x200025ac

08006354 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006354:	e7fe      	b.n	8006354 <CAN1_RX0_IRQHandler>

08006356 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006360:	2003      	movs	r0, #3
 8006362:	f001 fc01 	bl	8007b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006366:	200f      	movs	r0, #15
 8006368:	f000 f80e 	bl	8006388 <HAL_InitTick>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	71fb      	strb	r3, [r7, #7]
 8006376:	e001      	b.n	800637c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006378:	f7ff f984 	bl	8005684 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800637c:	79fb      	ldrb	r3, [r7, #7]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
	...

08006388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006394:	4b17      	ldr	r3, [pc, #92]	; (80063f4 <HAL_InitTick+0x6c>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d023      	beq.n	80063e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800639c:	4b16      	ldr	r3, [pc, #88]	; (80063f8 <HAL_InitTick+0x70>)
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	4b14      	ldr	r3, [pc, #80]	; (80063f4 <HAL_InitTick+0x6c>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	4619      	mov	r1, r3
 80063a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80063ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b2:	4618      	mov	r0, r3
 80063b4:	f001 fc0d 	bl	8007bd2 <HAL_SYSTICK_Config>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10f      	bne.n	80063de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b0f      	cmp	r3, #15
 80063c2:	d809      	bhi.n	80063d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80063c4:	2200      	movs	r2, #0
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	f04f 30ff 	mov.w	r0, #4294967295
 80063cc:	f001 fbd7 	bl	8007b7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80063d0:	4a0a      	ldr	r2, [pc, #40]	; (80063fc <HAL_InitTick+0x74>)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	e007      	b.n	80063e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	73fb      	strb	r3, [r7, #15]
 80063dc:	e004      	b.n	80063e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	73fb      	strb	r3, [r7, #15]
 80063e2:	e001      	b.n	80063e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	2000002c 	.word	0x2000002c
 80063f8:	20000024 	.word	0x20000024
 80063fc:	20000028 	.word	0x20000028

08006400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006404:	4b06      	ldr	r3, [pc, #24]	; (8006420 <HAL_IncTick+0x20>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	461a      	mov	r2, r3
 800640a:	4b06      	ldr	r3, [pc, #24]	; (8006424 <HAL_IncTick+0x24>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4413      	add	r3, r2
 8006410:	4a04      	ldr	r2, [pc, #16]	; (8006424 <HAL_IncTick+0x24>)
 8006412:	6013      	str	r3, [r2, #0]
}
 8006414:	bf00      	nop
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	2000002c 	.word	0x2000002c
 8006424:	20001264 	.word	0x20001264

08006428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
  return uwTick;
 800642c:	4b03      	ldr	r3, [pc, #12]	; (800643c <HAL_GetTick+0x14>)
 800642e:	681b      	ldr	r3, [r3, #0]
}
 8006430:	4618      	mov	r0, r3
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	20001264 	.word	0x20001264

08006440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006448:	f7ff ffee 	bl	8006428 <HAL_GetTick>
 800644c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006458:	d005      	beq.n	8006466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800645a:	4b0a      	ldr	r3, [pc, #40]	; (8006484 <HAL_Delay+0x44>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4413      	add	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006466:	bf00      	nop
 8006468:	f7ff ffde 	bl	8006428 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	429a      	cmp	r2, r3
 8006476:	d8f7      	bhi.n	8006468 <HAL_Delay+0x28>
  {
  }
}
 8006478:	bf00      	nop
 800647a:	bf00      	nop
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	2000002c 	.word	0x2000002c

08006488 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	431a      	orrs	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	609a      	str	r2, [r3, #8]
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	609a      	str	r2, [r3, #8]
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
 80064fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3360      	adds	r3, #96	; 0x60
 8006502:	461a      	mov	r2, r3
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	4b08      	ldr	r3, [pc, #32]	; (8006534 <LL_ADC_SetOffset+0x44>)
 8006512:	4013      	ands	r3, r2
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	4313      	orrs	r3, r2
 8006520:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006528:	bf00      	nop
 800652a:	371c      	adds	r7, #28
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	03fff000 	.word	0x03fff000

08006538 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3360      	adds	r3, #96	; 0x60
 8006546:	461a      	mov	r2, r3
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3360      	adds	r3, #96	; 0x60
 8006574:	461a      	mov	r2, r3
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	431a      	orrs	r2, r3
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800658e:	bf00      	nop
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e000      	b.n	80065b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3330      	adds	r3, #48	; 0x30
 80065d0:	461a      	mov	r2, r3
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	0a1b      	lsrs	r3, r3, #8
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	f003 030c 	and.w	r3, r3, #12
 80065dc:	4413      	add	r3, r2
 80065de:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f003 031f 	and.w	r3, r3, #31
 80065ea:	211f      	movs	r1, #31
 80065ec:	fa01 f303 	lsl.w	r3, r1, r3
 80065f0:	43db      	mvns	r3, r3
 80065f2:	401a      	ands	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	0e9b      	lsrs	r3, r3, #26
 80065f8:	f003 011f 	and.w	r1, r3, #31
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f003 031f 	and.w	r3, r3, #31
 8006602:	fa01 f303 	lsl.w	r3, r1, r3
 8006606:	431a      	orrs	r2, r3
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800660c:	bf00      	nop
 800660e:	371c      	adds	r7, #28
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006624:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800662c:	2301      	movs	r3, #1
 800662e:	e000      	b.n	8006632 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800663e:	b480      	push	{r7}
 8006640:	b087      	sub	sp, #28
 8006642:	af00      	add	r7, sp, #0
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	3314      	adds	r3, #20
 800664e:	461a      	mov	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	0e5b      	lsrs	r3, r3, #25
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	f003 0304 	and.w	r3, r3, #4
 800665a:	4413      	add	r3, r2
 800665c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	0d1b      	lsrs	r3, r3, #20
 8006666:	f003 031f 	and.w	r3, r3, #31
 800666a:	2107      	movs	r1, #7
 800666c:	fa01 f303 	lsl.w	r3, r1, r3
 8006670:	43db      	mvns	r3, r3
 8006672:	401a      	ands	r2, r3
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	0d1b      	lsrs	r3, r3, #20
 8006678:	f003 031f 	and.w	r3, r3, #31
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	fa01 f303 	lsl.w	r3, r1, r3
 8006682:	431a      	orrs	r2, r3
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006688:	bf00      	nop
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066ac:	43db      	mvns	r3, r3
 80066ae:	401a      	ands	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f003 0318 	and.w	r3, r3, #24
 80066b6:	4908      	ldr	r1, [pc, #32]	; (80066d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80066b8:	40d9      	lsrs	r1, r3
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	400b      	ands	r3, r1
 80066be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066c2:	431a      	orrs	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80066ca:	bf00      	nop
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	0007ffff 	.word	0x0007ffff

080066dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80066ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6093      	str	r3, [r2, #8]
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006714:	d101      	bne.n	800671a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006716:	2301      	movs	r3, #1
 8006718:	e000      	b.n	800671c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800673c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006764:	d101      	bne.n	800676a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006788:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800678c:	f043 0201 	orr.w	r2, r3, #1
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d101      	bne.n	80067b8 <LL_ADC_IsEnabled+0x18>
 80067b4:	2301      	movs	r3, #1
 80067b6:	e000      	b.n	80067ba <LL_ADC_IsEnabled+0x1a>
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80067da:	f043 0204 	orr.w	r2, r3, #4
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 0304 	and.w	r3, r3, #4
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d101      	bne.n	8006806 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006802:	2301      	movs	r3, #1
 8006804:	e000      	b.n	8006808 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f003 0308 	and.w	r3, r3, #8
 8006824:	2b08      	cmp	r3, #8
 8006826:	d101      	bne.n	800682c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006828:	2301      	movs	r3, #1
 800682a:	e000      	b.n	800682e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
	...

0800683c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b088      	sub	sp, #32
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006848:	2300      	movs	r3, #0
 800684a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e126      	b.n	8006aa4 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006860:	2b00      	cmp	r3, #0
 8006862:	d109      	bne.n	8006878 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7fa fc49 	bl	80010fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4618      	mov	r0, r3
 800687e:	f7ff ff3f 	bl	8006700 <LL_ADC_IsDeepPowerDownEnabled>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d004      	beq.n	8006892 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4618      	mov	r0, r3
 800688e:	f7ff ff25 	bl	80066dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff ff5a 	bl	8006750 <LL_ADC_IsInternalRegulatorEnabled>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d115      	bne.n	80068ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff ff3e 	bl	8006728 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80068ac:	4b7f      	ldr	r3, [pc, #508]	; (8006aac <HAL_ADC_Init+0x270>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	099b      	lsrs	r3, r3, #6
 80068b2:	4a7f      	ldr	r2, [pc, #508]	; (8006ab0 <HAL_ADC_Init+0x274>)
 80068b4:	fba2 2303 	umull	r2, r3, r2, r3
 80068b8:	099b      	lsrs	r3, r3, #6
 80068ba:	3301      	adds	r3, #1
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80068c0:	e002      	b.n	80068c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f9      	bne.n	80068c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff ff3c 	bl	8006750 <LL_ADC_IsInternalRegulatorEnabled>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10d      	bne.n	80068fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e2:	f043 0210 	orr.w	r2, r3, #16
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ee:	f043 0201 	orr.w	r2, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f7ff ff75 	bl	80067ee <LL_ADC_REG_IsConversionOngoing>
 8006904:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690a:	f003 0310 	and.w	r3, r3, #16
 800690e:	2b00      	cmp	r3, #0
 8006910:	f040 80bf 	bne.w	8006a92 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2b00      	cmp	r3, #0
 8006918:	f040 80bb 	bne.w	8006a92 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006920:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006924:	f043 0202 	orr.w	r2, r3, #2
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff ff35 	bl	80067a0 <LL_ADC_IsEnabled>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10b      	bne.n	8006954 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800693c:	485d      	ldr	r0, [pc, #372]	; (8006ab4 <HAL_ADC_Init+0x278>)
 800693e:	f7ff ff2f 	bl	80067a0 <LL_ADC_IsEnabled>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d105      	bne.n	8006954 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	4619      	mov	r1, r3
 800694e:	485a      	ldr	r0, [pc, #360]	; (8006ab8 <HAL_ADC_Init+0x27c>)
 8006950:	f7ff fd9a 	bl	8006488 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	7e5b      	ldrb	r3, [r3, #25]
 8006958:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800695e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006964:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800696a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006972:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006974:	4313      	orrs	r3, r2
 8006976:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d106      	bne.n	8006990 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	3b01      	subs	r3, #1
 8006988:	045b      	lsls	r3, r3, #17
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	4313      	orrs	r3, r2
 800698e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006994:	2b00      	cmp	r3, #0
 8006996:	d009      	beq.n	80069ac <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	4b42      	ldr	r3, [pc, #264]	; (8006abc <HAL_ADC_Init+0x280>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	6812      	ldr	r2, [r2, #0]
 80069ba:	69b9      	ldr	r1, [r7, #24]
 80069bc:	430b      	orrs	r3, r1
 80069be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff ff25 	bl	8006814 <LL_ADC_INJ_IsConversionOngoing>
 80069ca:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d13d      	bne.n	8006a4e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d13a      	bne.n	8006a4e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80069dc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069e4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80069e6:	4313      	orrs	r3, r2
 80069e8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069f4:	f023 0302 	bic.w	r3, r3, #2
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6812      	ldr	r2, [r2, #0]
 80069fc:	69b9      	ldr	r1, [r7, #24]
 80069fe:	430b      	orrs	r3, r1
 8006a00:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d118      	bne.n	8006a3e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a16:	f023 0304 	bic.w	r3, r3, #4
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006a22:	4311      	orrs	r1, r2
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a28:	4311      	orrs	r1, r2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0201 	orr.w	r2, r2, #1
 8006a3a:	611a      	str	r2, [r3, #16]
 8006a3c:	e007      	b.n	8006a4e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 0201 	bic.w	r2, r2, #1
 8006a4c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d10c      	bne.n	8006a70 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5c:	f023 010f 	bic.w	r1, r3, #15
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	1e5a      	subs	r2, r3, #1
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8006a6e:	e007      	b.n	8006a80 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 020f 	bic.w	r2, r2, #15
 8006a7e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a84:	f023 0303 	bic.w	r3, r3, #3
 8006a88:	f043 0201 	orr.w	r2, r3, #1
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	655a      	str	r2, [r3, #84]	; 0x54
 8006a90:	e007      	b.n	8006aa2 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a96:	f043 0210 	orr.w	r2, r3, #16
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006aa2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3720      	adds	r7, #32
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	20000024 	.word	0x20000024
 8006ab0:	053e2d63 	.word	0x053e2d63
 8006ab4:	50040000 	.word	0x50040000
 8006ab8:	50040300 	.word	0x50040300
 8006abc:	fff0c007 	.word	0xfff0c007

08006ac0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7ff fe8c 	bl	80067ee <LL_ADC_REG_IsConversionOngoing>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d167      	bne.n	8006bac <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d101      	bne.n	8006aea <HAL_ADC_Start_DMA+0x2a>
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	e063      	b.n	8006bb2 <HAL_ADC_Start_DMA+0xf2>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 fe1c 	bl	8007730 <ADC_Enable>
 8006af8:	4603      	mov	r3, r0
 8006afa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006afc:	7dfb      	ldrb	r3, [r7, #23]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d14f      	bne.n	8006ba2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b0a:	f023 0301 	bic.w	r3, r3, #1
 8006b0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d006      	beq.n	8006b30 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b26:	f023 0206 	bic.w	r2, r3, #6
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	659a      	str	r2, [r3, #88]	; 0x58
 8006b2e:	e002      	b.n	8006b36 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b3a:	4a20      	ldr	r2, [pc, #128]	; (8006bbc <HAL_ADC_Start_DMA+0xfc>)
 8006b3c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b42:	4a1f      	ldr	r2, [pc, #124]	; (8006bc0 <HAL_ADC_Start_DMA+0x100>)
 8006b44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4a:	4a1e      	ldr	r2, [pc, #120]	; (8006bc4 <HAL_ADC_Start_DMA+0x104>)
 8006b4c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	221c      	movs	r2, #28
 8006b54:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f042 0210 	orr.w	r2, r2, #16
 8006b6c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f042 0201 	orr.w	r2, r2, #1
 8006b7c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3340      	adds	r3, #64	; 0x40
 8006b88:	4619      	mov	r1, r3
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f001 f8e5 	bl	8007d5c <HAL_DMA_Start_IT>
 8006b92:	4603      	mov	r3, r0
 8006b94:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7ff fe13 	bl	80067c6 <LL_ADC_REG_StartConversion>
 8006ba0:	e006      	b.n	8006bb0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006baa:	e001      	b.n	8006bb0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006bac:	2302      	movs	r3, #2
 8006bae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	0800783d 	.word	0x0800783d
 8006bc0:	08007915 	.word	0x08007915
 8006bc4:	08007931 	.word	0x08007931

08006bc8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d017      	beq.n	8006c1e <HAL_ADC_IRQHandler+0x56>
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d012      	beq.n	8006c1e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfc:	f003 0310 	and.w	r3, r3, #16
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d105      	bne.n	8006c10 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c08:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fecf 	bl	80079b4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	f003 0304 	and.w	r3, r3, #4
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d004      	beq.n	8006c32 <HAL_ADC_IRQHandler+0x6a>
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d05e      	beq.n	8006cfa <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f003 0308 	and.w	r3, r3, #8
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d059      	beq.n	8006cfa <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4a:	f003 0310 	and.w	r3, r3, #16
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d105      	bne.n	8006c5e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7ff fc99 	bl	800659a <LL_ADC_REG_IsTriggerSourceSWStart>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d03e      	beq.n	8006cec <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d135      	bne.n	8006cec <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b08      	cmp	r3, #8
 8006c8c:	d12e      	bne.n	8006cec <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff fdab 	bl	80067ee <LL_ADC_REG_IsConversionOngoing>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d11a      	bne.n	8006cd4 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 020c 	bic.w	r2, r2, #12
 8006cac:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d112      	bne.n	8006cec <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cca:	f043 0201 	orr.w	r2, r3, #1
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	655a      	str	r2, [r3, #84]	; 0x54
 8006cd2:	e00b      	b.n	8006cec <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd8:	f043 0210 	orr.w	r2, r3, #16
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce4:	f043 0201 	orr.w	r2, r3, #1
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7fa fa7b 	bl	80011e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	220c      	movs	r2, #12
 8006cf8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	f003 0320 	and.w	r3, r3, #32
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d004      	beq.n	8006d0e <HAL_ADC_IRQHandler+0x146>
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f003 0320 	and.w	r3, r3, #32
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d109      	bne.n	8006d22 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d072      	beq.n	8006dfe <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d06d      	beq.n	8006dfe <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d26:	f003 0310 	and.w	r3, r3, #16
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d105      	bne.n	8006d3a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d32:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff fc6a 	bl	8006618 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006d44:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7ff fc25 	bl	800659a <LL_ADC_REG_IsTriggerSourceSWStart>
 8006d50:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d047      	beq.n	8006df0 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d007      	beq.n	8006d7a <HAL_ADC_IRQHandler+0x1b2>
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d03f      	beq.n	8006df0 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d13a      	bne.n	8006df0 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d84:	2b40      	cmp	r3, #64	; 0x40
 8006d86:	d133      	bne.n	8006df0 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d12e      	bne.n	8006df0 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff fd3c 	bl	8006814 <LL_ADC_INJ_IsConversionOngoing>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d11a      	bne.n	8006dd8 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006db0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d112      	bne.n	8006df0 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dce:	f043 0201 	orr.w	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	655a      	str	r2, [r3, #84]	; 0x54
 8006dd6:	e00b      	b.n	8006df0 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ddc:	f043 0210 	orr.w	r2, r3, #16
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de8:	f043 0201 	orr.w	r2, r3, #1
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fdb7 	bl	8007964 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2260      	movs	r2, #96	; 0x60
 8006dfc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d011      	beq.n	8006e2c <HAL_ADC_IRQHandler+0x264>
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00c      	beq.n	8006e2c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f890 	bl	8006f44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2280      	movs	r2, #128	; 0x80
 8006e2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d012      	beq.n	8006e5c <HAL_ADC_IRQHandler+0x294>
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00d      	beq.n	8006e5c <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e44:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fd9d 	bl	800798c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e5a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d012      	beq.n	8006e8c <HAL_ADC_IRQHandler+0x2c4>
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00d      	beq.n	8006e8c <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fd8f 	bl	80079a0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	f003 0310 	and.w	r3, r3, #16
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d02a      	beq.n	8006eec <HAL_ADC_IRQHandler+0x324>
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d025      	beq.n	8006eec <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	61fb      	str	r3, [r7, #28]
 8006eac:	e008      	b.n	8006ec0 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d10e      	bne.n	8006ee4 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eca:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed6:	f043 0202 	orr.w	r2, r3, #2
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f83a 	bl	8006f58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2210      	movs	r2, #16
 8006eea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d018      	beq.n	8006f28 <HAL_ADC_IRQHandler+0x360>
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d013      	beq.n	8006f28 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f04:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f10:	f043 0208 	orr.w	r2, r3, #8
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f20:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fd28 	bl	8007978 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006f28:	bf00      	nop
 8006f2a:	3720      	adds	r7, #32
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b0b6      	sub	sp, #216	; 0xd8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d101      	bne.n	8006f8e <HAL_ADC_ConfigChannel+0x22>
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	e3bb      	b.n	8007706 <HAL_ADC_ConfigChannel+0x79a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff fc27 	bl	80067ee <LL_ADC_REG_IsConversionOngoing>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f040 83a0 	bne.w	80076e8 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2b05      	cmp	r3, #5
 8006fb6:	d824      	bhi.n	8007002 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	3b02      	subs	r3, #2
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d81b      	bhi.n	8006ffa <HAL_ADC_ConfigChannel+0x8e>
 8006fc2:	a201      	add	r2, pc, #4	; (adr r2, 8006fc8 <HAL_ADC_ConfigChannel+0x5c>)
 8006fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc8:	08006fd9 	.word	0x08006fd9
 8006fcc:	08006fe1 	.word	0x08006fe1
 8006fd0:	08006fe9 	.word	0x08006fe9
 8006fd4:	08006ff1 	.word	0x08006ff1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8006fd8:	230c      	movs	r3, #12
 8006fda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006fde:	e010      	b.n	8007002 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8006fe0:	2312      	movs	r3, #18
 8006fe2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006fe6:	e00c      	b.n	8007002 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8006fe8:	2318      	movs	r3, #24
 8006fea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006fee:	e008      	b.n	8007002 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8006ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006ff8:	e003      	b.n	8007002 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8006ffa:	2306      	movs	r3, #6
 8006ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8007000:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007010:	f7ff fad6 	bl	80065c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff fbe8 	bl	80067ee <LL_ADC_REG_IsConversionOngoing>
 800701e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff fbf4 	bl	8006814 <LL_ADC_INJ_IsConversionOngoing>
 800702c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007030:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007034:	2b00      	cmp	r3, #0
 8007036:	f040 81a4 	bne.w	8007382 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800703a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800703e:	2b00      	cmp	r3, #0
 8007040:	f040 819f 	bne.w	8007382 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6818      	ldr	r0, [r3, #0]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	6819      	ldr	r1, [r3, #0]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	461a      	mov	r2, r3
 8007052:	f7ff faf4 	bl	800663e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	695a      	ldr	r2, [r3, #20]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	08db      	lsrs	r3, r3, #3
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	fa02 f303 	lsl.w	r3, r2, r3
 800706c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b04      	cmp	r3, #4
 8007076:	d00a      	beq.n	800708e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6818      	ldr	r0, [r3, #0]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	6919      	ldr	r1, [r3, #16]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007088:	f7ff fa32 	bl	80064f0 <LL_ADC_SetOffset>
 800708c:	e179      	b.n	8007382 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f7ff fa4f 	bl	8006538 <LL_ADC_GetOffsetChannel>
 800709a:	4603      	mov	r3, r0
 800709c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10a      	bne.n	80070ba <HAL_ADC_ConfigChannel+0x14e>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2100      	movs	r1, #0
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7ff fa44 	bl	8006538 <LL_ADC_GetOffsetChannel>
 80070b0:	4603      	mov	r3, r0
 80070b2:	0e9b      	lsrs	r3, r3, #26
 80070b4:	f003 021f 	and.w	r2, r3, #31
 80070b8:	e01e      	b.n	80070f8 <HAL_ADC_ConfigChannel+0x18c>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2100      	movs	r1, #0
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff fa39 	bl	8006538 <LL_ADC_GetOffsetChannel>
 80070c6:	4603      	mov	r3, r0
 80070c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070d0:	fa93 f3a3 	rbit	r3, r3
 80070d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80070d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80070e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80070e8:	2320      	movs	r3, #32
 80070ea:	e004      	b.n	80070f6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80070ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80070f0:	fab3 f383 	clz	r3, r3
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007100:	2b00      	cmp	r3, #0
 8007102:	d105      	bne.n	8007110 <HAL_ADC_ConfigChannel+0x1a4>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	0e9b      	lsrs	r3, r3, #26
 800710a:	f003 031f 	and.w	r3, r3, #31
 800710e:	e018      	b.n	8007142 <HAL_ADC_ConfigChannel+0x1d6>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007118:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800711c:	fa93 f3a3 	rbit	r3, r3
 8007120:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8007124:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800712c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8007134:	2320      	movs	r3, #32
 8007136:	e004      	b.n	8007142 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8007138:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800713c:	fab3 f383 	clz	r3, r3
 8007140:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007142:	429a      	cmp	r2, r3
 8007144:	d106      	bne.n	8007154 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2200      	movs	r2, #0
 800714c:	2100      	movs	r1, #0
 800714e:	4618      	mov	r0, r3
 8007150:	f7ff fa08 	bl	8006564 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2101      	movs	r1, #1
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff f9ec 	bl	8006538 <LL_ADC_GetOffsetChannel>
 8007160:	4603      	mov	r3, r0
 8007162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10a      	bne.n	8007180 <HAL_ADC_ConfigChannel+0x214>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2101      	movs	r1, #1
 8007170:	4618      	mov	r0, r3
 8007172:	f7ff f9e1 	bl	8006538 <LL_ADC_GetOffsetChannel>
 8007176:	4603      	mov	r3, r0
 8007178:	0e9b      	lsrs	r3, r3, #26
 800717a:	f003 021f 	and.w	r2, r3, #31
 800717e:	e01e      	b.n	80071be <HAL_ADC_ConfigChannel+0x252>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2101      	movs	r1, #1
 8007186:	4618      	mov	r0, r3
 8007188:	f7ff f9d6 	bl	8006538 <LL_ADC_GetOffsetChannel>
 800718c:	4603      	mov	r3, r0
 800718e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007196:	fa93 f3a3 	rbit	r3, r3
 800719a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800719e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80071a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80071ae:	2320      	movs	r3, #32
 80071b0:	e004      	b.n	80071bc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80071b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071b6:	fab3 f383 	clz	r3, r3
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d105      	bne.n	80071d6 <HAL_ADC_ConfigChannel+0x26a>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	0e9b      	lsrs	r3, r3, #26
 80071d0:	f003 031f 	and.w	r3, r3, #31
 80071d4:	e018      	b.n	8007208 <HAL_ADC_ConfigChannel+0x29c>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071e2:	fa93 f3a3 	rbit	r3, r3
 80071e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80071ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80071f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80071fa:	2320      	movs	r3, #32
 80071fc:	e004      	b.n	8007208 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80071fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007202:	fab3 f383 	clz	r3, r3
 8007206:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007208:	429a      	cmp	r2, r3
 800720a:	d106      	bne.n	800721a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2200      	movs	r2, #0
 8007212:	2101      	movs	r1, #1
 8007214:	4618      	mov	r0, r3
 8007216:	f7ff f9a5 	bl	8006564 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2102      	movs	r1, #2
 8007220:	4618      	mov	r0, r3
 8007222:	f7ff f989 	bl	8006538 <LL_ADC_GetOffsetChannel>
 8007226:	4603      	mov	r3, r0
 8007228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10a      	bne.n	8007246 <HAL_ADC_ConfigChannel+0x2da>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2102      	movs	r1, #2
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff f97e 	bl	8006538 <LL_ADC_GetOffsetChannel>
 800723c:	4603      	mov	r3, r0
 800723e:	0e9b      	lsrs	r3, r3, #26
 8007240:	f003 021f 	and.w	r2, r3, #31
 8007244:	e01e      	b.n	8007284 <HAL_ADC_ConfigChannel+0x318>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2102      	movs	r1, #2
 800724c:	4618      	mov	r0, r3
 800724e:	f7ff f973 	bl	8006538 <LL_ADC_GetOffsetChannel>
 8007252:	4603      	mov	r3, r0
 8007254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007258:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800725c:	fa93 f3a3 	rbit	r3, r3
 8007260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8007264:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007268:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800726c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8007274:	2320      	movs	r3, #32
 8007276:	e004      	b.n	8007282 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8007278:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800727c:	fab3 f383 	clz	r3, r3
 8007280:	b2db      	uxtb	r3, r3
 8007282:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800728c:	2b00      	cmp	r3, #0
 800728e:	d105      	bne.n	800729c <HAL_ADC_ConfigChannel+0x330>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	0e9b      	lsrs	r3, r3, #26
 8007296:	f003 031f 	and.w	r3, r3, #31
 800729a:	e014      	b.n	80072c6 <HAL_ADC_ConfigChannel+0x35a>
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072a4:	fa93 f3a3 	rbit	r3, r3
 80072a8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80072aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80072b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80072b8:	2320      	movs	r3, #32
 80072ba:	e004      	b.n	80072c6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80072bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072c0:	fab3 f383 	clz	r3, r3
 80072c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d106      	bne.n	80072d8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2200      	movs	r2, #0
 80072d0:	2102      	movs	r1, #2
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7ff f946 	bl	8006564 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2103      	movs	r1, #3
 80072de:	4618      	mov	r0, r3
 80072e0:	f7ff f92a 	bl	8006538 <LL_ADC_GetOffsetChannel>
 80072e4:	4603      	mov	r3, r0
 80072e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10a      	bne.n	8007304 <HAL_ADC_ConfigChannel+0x398>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2103      	movs	r1, #3
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff f91f 	bl	8006538 <LL_ADC_GetOffsetChannel>
 80072fa:	4603      	mov	r3, r0
 80072fc:	0e9b      	lsrs	r3, r3, #26
 80072fe:	f003 021f 	and.w	r2, r3, #31
 8007302:	e017      	b.n	8007334 <HAL_ADC_ConfigChannel+0x3c8>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2103      	movs	r1, #3
 800730a:	4618      	mov	r0, r3
 800730c:	f7ff f914 	bl	8006538 <LL_ADC_GetOffsetChannel>
 8007310:	4603      	mov	r3, r0
 8007312:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007314:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007316:	fa93 f3a3 	rbit	r3, r3
 800731a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800731c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8007320:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8007326:	2320      	movs	r3, #32
 8007328:	e003      	b.n	8007332 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800732a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800732c:	fab3 f383 	clz	r3, r3
 8007330:	b2db      	uxtb	r3, r3
 8007332:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800733c:	2b00      	cmp	r3, #0
 800733e:	d105      	bne.n	800734c <HAL_ADC_ConfigChannel+0x3e0>
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	0e9b      	lsrs	r3, r3, #26
 8007346:	f003 031f 	and.w	r3, r3, #31
 800734a:	e011      	b.n	8007370 <HAL_ADC_ConfigChannel+0x404>
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007352:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007354:	fa93 f3a3 	rbit	r3, r3
 8007358:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800735a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800735c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800735e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8007364:	2320      	movs	r3, #32
 8007366:	e003      	b.n	8007370 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8007368:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800736a:	fab3 f383 	clz	r3, r3
 800736e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007370:	429a      	cmp	r2, r3
 8007372:	d106      	bne.n	8007382 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2200      	movs	r2, #0
 800737a:	2103      	movs	r1, #3
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff f8f1 	bl	8006564 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff fa0a 	bl	80067a0 <LL_ADC_IsEnabled>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	f040 8140 	bne.w	8007614 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	6819      	ldr	r1, [r3, #0]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	461a      	mov	r2, r3
 80073a2:	f7ff f977 	bl	8006694 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	4a8f      	ldr	r2, [pc, #572]	; (80075e8 <HAL_ADC_ConfigChannel+0x67c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	f040 8131 	bne.w	8007614 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10b      	bne.n	80073da <HAL_ADC_ConfigChannel+0x46e>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	0e9b      	lsrs	r3, r3, #26
 80073c8:	3301      	adds	r3, #1
 80073ca:	f003 031f 	and.w	r3, r3, #31
 80073ce:	2b09      	cmp	r3, #9
 80073d0:	bf94      	ite	ls
 80073d2:	2301      	movls	r3, #1
 80073d4:	2300      	movhi	r3, #0
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	e019      	b.n	800740e <HAL_ADC_ConfigChannel+0x4a2>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073e2:	fa93 f3a3 	rbit	r3, r3
 80073e6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80073e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80073ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80073f2:	2320      	movs	r3, #32
 80073f4:	e003      	b.n	80073fe <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80073f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073f8:	fab3 f383 	clz	r3, r3
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	3301      	adds	r3, #1
 8007400:	f003 031f 	and.w	r3, r3, #31
 8007404:	2b09      	cmp	r3, #9
 8007406:	bf94      	ite	ls
 8007408:	2301      	movls	r3, #1
 800740a:	2300      	movhi	r3, #0
 800740c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800740e:	2b00      	cmp	r3, #0
 8007410:	d079      	beq.n	8007506 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800741a:	2b00      	cmp	r3, #0
 800741c:	d107      	bne.n	800742e <HAL_ADC_ConfigChannel+0x4c2>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	0e9b      	lsrs	r3, r3, #26
 8007424:	3301      	adds	r3, #1
 8007426:	069b      	lsls	r3, r3, #26
 8007428:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800742c:	e015      	b.n	800745a <HAL_ADC_ConfigChannel+0x4ee>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007436:	fa93 f3a3 	rbit	r3, r3
 800743a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800743c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800743e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8007440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8007446:	2320      	movs	r3, #32
 8007448:	e003      	b.n	8007452 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800744a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800744c:	fab3 f383 	clz	r3, r3
 8007450:	b2db      	uxtb	r3, r3
 8007452:	3301      	adds	r3, #1
 8007454:	069b      	lsls	r3, r3, #26
 8007456:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007462:	2b00      	cmp	r3, #0
 8007464:	d109      	bne.n	800747a <HAL_ADC_ConfigChannel+0x50e>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	0e9b      	lsrs	r3, r3, #26
 800746c:	3301      	adds	r3, #1
 800746e:	f003 031f 	and.w	r3, r3, #31
 8007472:	2101      	movs	r1, #1
 8007474:	fa01 f303 	lsl.w	r3, r1, r3
 8007478:	e017      	b.n	80074aa <HAL_ADC_ConfigChannel+0x53e>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007482:	fa93 f3a3 	rbit	r3, r3
 8007486:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8007488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800748a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800748c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8007492:	2320      	movs	r3, #32
 8007494:	e003      	b.n	800749e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8007496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007498:	fab3 f383 	clz	r3, r3
 800749c:	b2db      	uxtb	r3, r3
 800749e:	3301      	adds	r3, #1
 80074a0:	f003 031f 	and.w	r3, r3, #31
 80074a4:	2101      	movs	r1, #1
 80074a6:	fa01 f303 	lsl.w	r3, r1, r3
 80074aa:	ea42 0103 	orr.w	r1, r2, r3
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10a      	bne.n	80074d0 <HAL_ADC_ConfigChannel+0x564>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	0e9b      	lsrs	r3, r3, #26
 80074c0:	3301      	adds	r3, #1
 80074c2:	f003 021f 	and.w	r2, r3, #31
 80074c6:	4613      	mov	r3, r2
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	4413      	add	r3, r2
 80074cc:	051b      	lsls	r3, r3, #20
 80074ce:	e018      	b.n	8007502 <HAL_ADC_ConfigChannel+0x596>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d8:	fa93 f3a3 	rbit	r3, r3
 80074dc:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80074e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80074e8:	2320      	movs	r3, #32
 80074ea:	e003      	b.n	80074f4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80074ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ee:	fab3 f383 	clz	r3, r3
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	3301      	adds	r3, #1
 80074f6:	f003 021f 	and.w	r2, r3, #31
 80074fa:	4613      	mov	r3, r2
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	4413      	add	r3, r2
 8007500:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007502:	430b      	orrs	r3, r1
 8007504:	e081      	b.n	800760a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800750e:	2b00      	cmp	r3, #0
 8007510:	d107      	bne.n	8007522 <HAL_ADC_ConfigChannel+0x5b6>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	0e9b      	lsrs	r3, r3, #26
 8007518:	3301      	adds	r3, #1
 800751a:	069b      	lsls	r3, r3, #26
 800751c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007520:	e015      	b.n	800754e <HAL_ADC_ConfigChannel+0x5e2>
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	fa93 f3a3 	rbit	r3, r3
 800752e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800753a:	2320      	movs	r3, #32
 800753c:	e003      	b.n	8007546 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800753e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007540:	fab3 f383 	clz	r3, r3
 8007544:	b2db      	uxtb	r3, r3
 8007546:	3301      	adds	r3, #1
 8007548:	069b      	lsls	r3, r3, #26
 800754a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007556:	2b00      	cmp	r3, #0
 8007558:	d109      	bne.n	800756e <HAL_ADC_ConfigChannel+0x602>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	0e9b      	lsrs	r3, r3, #26
 8007560:	3301      	adds	r3, #1
 8007562:	f003 031f 	and.w	r3, r3, #31
 8007566:	2101      	movs	r1, #1
 8007568:	fa01 f303 	lsl.w	r3, r1, r3
 800756c:	e017      	b.n	800759e <HAL_ADC_ConfigChannel+0x632>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	fa93 f3a3 	rbit	r3, r3
 800757a:	61bb      	str	r3, [r7, #24]
  return result;
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8007586:	2320      	movs	r3, #32
 8007588:	e003      	b.n	8007592 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	fab3 f383 	clz	r3, r3
 8007590:	b2db      	uxtb	r3, r3
 8007592:	3301      	adds	r3, #1
 8007594:	f003 031f 	and.w	r3, r3, #31
 8007598:	2101      	movs	r1, #1
 800759a:	fa01 f303 	lsl.w	r3, r1, r3
 800759e:	ea42 0103 	orr.w	r1, r2, r3
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10d      	bne.n	80075ca <HAL_ADC_ConfigChannel+0x65e>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	0e9b      	lsrs	r3, r3, #26
 80075b4:	3301      	adds	r3, #1
 80075b6:	f003 021f 	and.w	r2, r3, #31
 80075ba:	4613      	mov	r3, r2
 80075bc:	005b      	lsls	r3, r3, #1
 80075be:	4413      	add	r3, r2
 80075c0:	3b1e      	subs	r3, #30
 80075c2:	051b      	lsls	r3, r3, #20
 80075c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80075c8:	e01e      	b.n	8007608 <HAL_ADC_ConfigChannel+0x69c>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	fa93 f3a3 	rbit	r3, r3
 80075d6:	60fb      	str	r3, [r7, #12]
  return result;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d104      	bne.n	80075ec <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80075e2:	2320      	movs	r3, #32
 80075e4:	e006      	b.n	80075f4 <HAL_ADC_ConfigChannel+0x688>
 80075e6:	bf00      	nop
 80075e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	fab3 f383 	clz	r3, r3
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	3301      	adds	r3, #1
 80075f6:	f003 021f 	and.w	r2, r3, #31
 80075fa:	4613      	mov	r3, r2
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	4413      	add	r3, r2
 8007600:	3b1e      	subs	r3, #30
 8007602:	051b      	lsls	r3, r3, #20
 8007604:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007608:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800760e:	4619      	mov	r1, r3
 8007610:	f7ff f815 	bl	800663e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	4b3d      	ldr	r3, [pc, #244]	; (8007710 <HAL_ADC_ConfigChannel+0x7a4>)
 800761a:	4013      	ands	r3, r2
 800761c:	2b00      	cmp	r3, #0
 800761e:	d06c      	beq.n	80076fa <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007620:	483c      	ldr	r0, [pc, #240]	; (8007714 <HAL_ADC_ConfigChannel+0x7a8>)
 8007622:	f7fe ff57 	bl	80064d4 <LL_ADC_GetCommonPathInternalCh>
 8007626:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a3a      	ldr	r2, [pc, #232]	; (8007718 <HAL_ADC_ConfigChannel+0x7ac>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d127      	bne.n	8007684 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d121      	bne.n	8007684 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a35      	ldr	r2, [pc, #212]	; (800771c <HAL_ADC_ConfigChannel+0x7b0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d157      	bne.n	80076fa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800764a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800764e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007652:	4619      	mov	r1, r3
 8007654:	482f      	ldr	r0, [pc, #188]	; (8007714 <HAL_ADC_ConfigChannel+0x7a8>)
 8007656:	f7fe ff2a 	bl	80064ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800765a:	4b31      	ldr	r3, [pc, #196]	; (8007720 <HAL_ADC_ConfigChannel+0x7b4>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	099b      	lsrs	r3, r3, #6
 8007660:	4a30      	ldr	r2, [pc, #192]	; (8007724 <HAL_ADC_ConfigChannel+0x7b8>)
 8007662:	fba2 2303 	umull	r2, r3, r2, r3
 8007666:	099b      	lsrs	r3, r3, #6
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	4613      	mov	r3, r2
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	4413      	add	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007674:	e002      	b.n	800767c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	3b01      	subs	r3, #1
 800767a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1f9      	bne.n	8007676 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007682:	e03a      	b.n	80076fa <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a27      	ldr	r2, [pc, #156]	; (8007728 <HAL_ADC_ConfigChannel+0x7bc>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d113      	bne.n	80076b6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800768e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10d      	bne.n	80076b6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a1f      	ldr	r2, [pc, #124]	; (800771c <HAL_ADC_ConfigChannel+0x7b0>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d12a      	bne.n	80076fa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80076a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ac:	4619      	mov	r1, r3
 80076ae:	4819      	ldr	r0, [pc, #100]	; (8007714 <HAL_ADC_ConfigChannel+0x7a8>)
 80076b0:	f7fe fefd 	bl	80064ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80076b4:	e021      	b.n	80076fa <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a1c      	ldr	r2, [pc, #112]	; (800772c <HAL_ADC_ConfigChannel+0x7c0>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d11c      	bne.n	80076fa <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80076c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d116      	bne.n	80076fa <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a12      	ldr	r2, [pc, #72]	; (800771c <HAL_ADC_ConfigChannel+0x7b0>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d111      	bne.n	80076fa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80076d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076de:	4619      	mov	r1, r3
 80076e0:	480c      	ldr	r0, [pc, #48]	; (8007714 <HAL_ADC_ConfigChannel+0x7a8>)
 80076e2:	f7fe fee4 	bl	80064ae <LL_ADC_SetCommonPathInternalCh>
 80076e6:	e008      	b.n	80076fa <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ec:	f043 0220 	orr.w	r2, r3, #32
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007702:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007706:	4618      	mov	r0, r3
 8007708:	37d8      	adds	r7, #216	; 0xd8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	80080000 	.word	0x80080000
 8007714:	50040300 	.word	0x50040300
 8007718:	c7520000 	.word	0xc7520000
 800771c:	50040000 	.word	0x50040000
 8007720:	20000024 	.word	0x20000024
 8007724:	053e2d63 	.word	0x053e2d63
 8007728:	cb840000 	.word	0xcb840000
 800772c:	80000001 	.word	0x80000001

08007730 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007738:	2300      	movs	r3, #0
 800773a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff f82d 	bl	80067a0 <LL_ADC_IsEnabled>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d169      	bne.n	8007820 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	4b36      	ldr	r3, [pc, #216]	; (800782c <ADC_Enable+0xfc>)
 8007754:	4013      	ands	r3, r2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00d      	beq.n	8007776 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775e:	f043 0210 	orr.w	r2, r3, #16
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800776a:	f043 0201 	orr.w	r2, r3, #1
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e055      	b.n	8007822 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe fffc 	bl	8006778 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007780:	482b      	ldr	r0, [pc, #172]	; (8007830 <ADC_Enable+0x100>)
 8007782:	f7fe fea7 	bl	80064d4 <LL_ADC_GetCommonPathInternalCh>
 8007786:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007788:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800778c:	2b00      	cmp	r3, #0
 800778e:	d013      	beq.n	80077b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007790:	4b28      	ldr	r3, [pc, #160]	; (8007834 <ADC_Enable+0x104>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	099b      	lsrs	r3, r3, #6
 8007796:	4a28      	ldr	r2, [pc, #160]	; (8007838 <ADC_Enable+0x108>)
 8007798:	fba2 2303 	umull	r2, r3, r2, r3
 800779c:	099b      	lsrs	r3, r3, #6
 800779e:	1c5a      	adds	r2, r3, #1
 80077a0:	4613      	mov	r3, r2
 80077a2:	005b      	lsls	r3, r3, #1
 80077a4:	4413      	add	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80077aa:	e002      	b.n	80077b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1f9      	bne.n	80077ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80077b8:	f7fe fe36 	bl	8006428 <HAL_GetTick>
 80077bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80077be:	e028      	b.n	8007812 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fe ffeb 	bl	80067a0 <LL_ADC_IsEnabled>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d104      	bne.n	80077da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fe ffcf 	bl	8006778 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80077da:	f7fe fe25 	bl	8006428 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d914      	bls.n	8007812 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d00d      	beq.n	8007812 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fa:	f043 0210 	orr.w	r2, r3, #16
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007806:	f043 0201 	orr.w	r2, r3, #1
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e007      	b.n	8007822 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b01      	cmp	r3, #1
 800781e:	d1cf      	bne.n	80077c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	8000003f 	.word	0x8000003f
 8007830:	50040300 	.word	0x50040300
 8007834:	20000024 	.word	0x20000024
 8007838:	053e2d63 	.word	0x053e2d63

0800783c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007848:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007852:	2b00      	cmp	r3, #0
 8007854:	d14b      	bne.n	80078ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0308 	and.w	r3, r3, #8
 800786c:	2b00      	cmp	r3, #0
 800786e:	d021      	beq.n	80078b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4618      	mov	r0, r3
 8007876:	f7fe fe90 	bl	800659a <LL_ADC_REG_IsTriggerSourceSWStart>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d032      	beq.n	80078e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d12b      	bne.n	80078e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007892:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d11f      	bne.n	80078e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078aa:	f043 0201 	orr.w	r2, r3, #1
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	655a      	str	r2, [r3, #84]	; 0x54
 80078b2:	e018      	b.n	80078e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d111      	bne.n	80078e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d105      	bne.n	80078e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078de:	f043 0201 	orr.w	r2, r3, #1
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7f9 fc7e 	bl	80011e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80078ec:	e00e      	b.n	800790c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f2:	f003 0310 	and.w	r3, r3, #16
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f7ff fb2c 	bl	8006f58 <HAL_ADC_ErrorCallback>
}
 8007900:	e004      	b.n	800790c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	4798      	blx	r3
}
 800790c:	bf00      	nop
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007920:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f7ff fb04 	bl	8006f30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007928:	bf00      	nop
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007942:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800794e:	f043 0204 	orr.w	r2, r3, #4
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7ff fafe 	bl	8006f58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800795c:	bf00      	nop
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079d8:	4b0c      	ldr	r3, [pc, #48]	; (8007a0c <__NVIC_SetPriorityGrouping+0x44>)
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80079e4:	4013      	ands	r3, r2
 80079e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80079f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80079f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80079fa:	4a04      	ldr	r2, [pc, #16]	; (8007a0c <__NVIC_SetPriorityGrouping+0x44>)
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	60d3      	str	r3, [r2, #12]
}
 8007a00:	bf00      	nop
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	e000ed00 	.word	0xe000ed00

08007a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007a10:	b480      	push	{r7}
 8007a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a14:	4b04      	ldr	r3, [pc, #16]	; (8007a28 <__NVIC_GetPriorityGrouping+0x18>)
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	0a1b      	lsrs	r3, r3, #8
 8007a1a:	f003 0307 	and.w	r3, r3, #7
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	e000ed00 	.word	0xe000ed00

08007a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4603      	mov	r3, r0
 8007a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	db0b      	blt.n	8007a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a3e:	79fb      	ldrb	r3, [r7, #7]
 8007a40:	f003 021f 	and.w	r2, r3, #31
 8007a44:	4907      	ldr	r1, [pc, #28]	; (8007a64 <__NVIC_EnableIRQ+0x38>)
 8007a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a4a:	095b      	lsrs	r3, r3, #5
 8007a4c:	2001      	movs	r0, #1
 8007a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8007a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007a56:	bf00      	nop
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	e000e100 	.word	0xe000e100

08007a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	6039      	str	r1, [r7, #0]
 8007a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	db0a      	blt.n	8007a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	490c      	ldr	r1, [pc, #48]	; (8007ab4 <__NVIC_SetPriority+0x4c>)
 8007a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a86:	0112      	lsls	r2, r2, #4
 8007a88:	b2d2      	uxtb	r2, r2
 8007a8a:	440b      	add	r3, r1
 8007a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a90:	e00a      	b.n	8007aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	4908      	ldr	r1, [pc, #32]	; (8007ab8 <__NVIC_SetPriority+0x50>)
 8007a98:	79fb      	ldrb	r3, [r7, #7]
 8007a9a:	f003 030f 	and.w	r3, r3, #15
 8007a9e:	3b04      	subs	r3, #4
 8007aa0:	0112      	lsls	r2, r2, #4
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	440b      	add	r3, r1
 8007aa6:	761a      	strb	r2, [r3, #24]
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	e000e100 	.word	0xe000e100
 8007ab8:	e000ed00 	.word	0xe000ed00

08007abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b089      	sub	sp, #36	; 0x24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	f1c3 0307 	rsb	r3, r3, #7
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	bf28      	it	cs
 8007ada:	2304      	movcs	r3, #4
 8007adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	3304      	adds	r3, #4
 8007ae2:	2b06      	cmp	r3, #6
 8007ae4:	d902      	bls.n	8007aec <NVIC_EncodePriority+0x30>
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	3b03      	subs	r3, #3
 8007aea:	e000      	b.n	8007aee <NVIC_EncodePriority+0x32>
 8007aec:	2300      	movs	r3, #0
 8007aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007af0:	f04f 32ff 	mov.w	r2, #4294967295
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	fa02 f303 	lsl.w	r3, r2, r3
 8007afa:	43da      	mvns	r2, r3
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	401a      	ands	r2, r3
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b04:	f04f 31ff 	mov.w	r1, #4294967295
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b0e:	43d9      	mvns	r1, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b14:	4313      	orrs	r3, r2
         );
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3724      	adds	r7, #36	; 0x24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
	...

08007b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b34:	d301      	bcc.n	8007b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007b36:	2301      	movs	r3, #1
 8007b38:	e00f      	b.n	8007b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007b3a:	4a0a      	ldr	r2, [pc, #40]	; (8007b64 <SysTick_Config+0x40>)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007b42:	210f      	movs	r1, #15
 8007b44:	f04f 30ff 	mov.w	r0, #4294967295
 8007b48:	f7ff ff8e 	bl	8007a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b4c:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <SysTick_Config+0x40>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007b52:	4b04      	ldr	r3, [pc, #16]	; (8007b64 <SysTick_Config+0x40>)
 8007b54:	2207      	movs	r2, #7
 8007b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	e000e010 	.word	0xe000e010

08007b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7ff ff29 	bl	80079c8 <__NVIC_SetPriorityGrouping>
}
 8007b76:	bf00      	nop
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b086      	sub	sp, #24
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	4603      	mov	r3, r0
 8007b86:	60b9      	str	r1, [r7, #8]
 8007b88:	607a      	str	r2, [r7, #4]
 8007b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007b90:	f7ff ff3e 	bl	8007a10 <__NVIC_GetPriorityGrouping>
 8007b94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	68b9      	ldr	r1, [r7, #8]
 8007b9a:	6978      	ldr	r0, [r7, #20]
 8007b9c:	f7ff ff8e 	bl	8007abc <NVIC_EncodePriority>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7ff ff5d 	bl	8007a68 <__NVIC_SetPriority>
}
 8007bae:	bf00      	nop
 8007bb0:	3718      	adds	r7, #24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b082      	sub	sp, #8
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7ff ff31 	bl	8007a2c <__NVIC_EnableIRQ>
}
 8007bca:	bf00      	nop
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b082      	sub	sp, #8
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7ff ffa2 	bl	8007b24 <SysTick_Config>
 8007be0:	4603      	mov	r3, r0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
	...

08007bec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e098      	b.n	8007d30 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	4b4d      	ldr	r3, [pc, #308]	; (8007d3c <HAL_DMA_Init+0x150>)
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d80f      	bhi.n	8007c2a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	4b4b      	ldr	r3, [pc, #300]	; (8007d40 <HAL_DMA_Init+0x154>)
 8007c12:	4413      	add	r3, r2
 8007c14:	4a4b      	ldr	r2, [pc, #300]	; (8007d44 <HAL_DMA_Init+0x158>)
 8007c16:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1a:	091b      	lsrs	r3, r3, #4
 8007c1c:	009a      	lsls	r2, r3, #2
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a48      	ldr	r2, [pc, #288]	; (8007d48 <HAL_DMA_Init+0x15c>)
 8007c26:	641a      	str	r2, [r3, #64]	; 0x40
 8007c28:	e00e      	b.n	8007c48 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	4b46      	ldr	r3, [pc, #280]	; (8007d4c <HAL_DMA_Init+0x160>)
 8007c32:	4413      	add	r3, r2
 8007c34:	4a43      	ldr	r2, [pc, #268]	; (8007d44 <HAL_DMA_Init+0x158>)
 8007c36:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3a:	091b      	lsrs	r3, r3, #4
 8007c3c:	009a      	lsls	r2, r3, #2
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a42      	ldr	r2, [pc, #264]	; (8007d50 <HAL_DMA_Init+0x164>)
 8007c46:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ca2:	d039      	beq.n	8007d18 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca8:	4a27      	ldr	r2, [pc, #156]	; (8007d48 <HAL_DMA_Init+0x15c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d11a      	bne.n	8007ce4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007cae:	4b29      	ldr	r3, [pc, #164]	; (8007d54 <HAL_DMA_Init+0x168>)
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb6:	f003 031c 	and.w	r3, r3, #28
 8007cba:	210f      	movs	r1, #15
 8007cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc0:	43db      	mvns	r3, r3
 8007cc2:	4924      	ldr	r1, [pc, #144]	; (8007d54 <HAL_DMA_Init+0x168>)
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007cc8:	4b22      	ldr	r3, [pc, #136]	; (8007d54 <HAL_DMA_Init+0x168>)
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6859      	ldr	r1, [r3, #4]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd4:	f003 031c 	and.w	r3, r3, #28
 8007cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cdc:	491d      	ldr	r1, [pc, #116]	; (8007d54 <HAL_DMA_Init+0x168>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	600b      	str	r3, [r1, #0]
 8007ce2:	e019      	b.n	8007d18 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007ce4:	4b1c      	ldr	r3, [pc, #112]	; (8007d58 <HAL_DMA_Init+0x16c>)
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cec:	f003 031c 	and.w	r3, r3, #28
 8007cf0:	210f      	movs	r1, #15
 8007cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf6:	43db      	mvns	r3, r3
 8007cf8:	4917      	ldr	r1, [pc, #92]	; (8007d58 <HAL_DMA_Init+0x16c>)
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007cfe:	4b16      	ldr	r3, [pc, #88]	; (8007d58 <HAL_DMA_Init+0x16c>)
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6859      	ldr	r1, [r3, #4]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0a:	f003 031c 	and.w	r3, r3, #28
 8007d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d12:	4911      	ldr	r1, [pc, #68]	; (8007d58 <HAL_DMA_Init+0x16c>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	40020407 	.word	0x40020407
 8007d40:	bffdfff8 	.word	0xbffdfff8
 8007d44:	cccccccd 	.word	0xcccccccd
 8007d48:	40020000 	.word	0x40020000
 8007d4c:	bffdfbf8 	.word	0xbffdfbf8
 8007d50:	40020400 	.word	0x40020400
 8007d54:	400200a8 	.word	0x400200a8
 8007d58:	400204a8 	.word	0x400204a8

08007d5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
 8007d68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d101      	bne.n	8007d7c <HAL_DMA_Start_IT+0x20>
 8007d78:	2302      	movs	r3, #2
 8007d7a:	e04b      	b.n	8007e14 <HAL_DMA_Start_IT+0xb8>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d13a      	bne.n	8007e06 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 0201 	bic.w	r2, r2, #1
 8007dac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 f96b 	bl	8008090 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d008      	beq.n	8007dd4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f042 020e 	orr.w	r2, r2, #14
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	e00f      	b.n	8007df4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f022 0204 	bic.w	r2, r2, #4
 8007de2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f042 020a 	orr.w	r2, r2, #10
 8007df2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f042 0201 	orr.w	r2, r2, #1
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	e005      	b.n	8007e12 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007e0e:	2302      	movs	r3, #2
 8007e10:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d008      	beq.n	8007e46 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2204      	movs	r2, #4
 8007e38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e022      	b.n	8007e8c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f022 020e 	bic.w	r2, r2, #14
 8007e54:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0201 	bic.w	r2, r2, #1
 8007e64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6a:	f003 021c 	and.w	r2, r3, #28
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	2101      	movs	r1, #1
 8007e74:	fa01 f202 	lsl.w	r2, r1, r2
 8007e78:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d005      	beq.n	8007ebc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2204      	movs	r2, #4
 8007eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	73fb      	strb	r3, [r7, #15]
 8007eba:	e029      	b.n	8007f10 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 020e 	bic.w	r2, r2, #14
 8007eca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f022 0201 	bic.w	r2, r2, #1
 8007eda:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee0:	f003 021c 	and.w	r2, r3, #28
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee8:	2101      	movs	r1, #1
 8007eea:	fa01 f202 	lsl.w	r2, r1, r2
 8007eee:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	4798      	blx	r3
    }
  }
  return status;
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f36:	f003 031c 	and.w	r3, r3, #28
 8007f3a:	2204      	movs	r2, #4
 8007f3c:	409a      	lsls	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	4013      	ands	r3, r2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d026      	beq.n	8007f94 <HAL_DMA_IRQHandler+0x7a>
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d021      	beq.n	8007f94 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d107      	bne.n	8007f6e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 0204 	bic.w	r2, r2, #4
 8007f6c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f72:	f003 021c 	and.w	r2, r3, #28
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7a:	2104      	movs	r1, #4
 8007f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8007f80:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d071      	beq.n	800806e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007f92:	e06c      	b.n	800806e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f98:	f003 031c 	and.w	r3, r3, #28
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	409a      	lsls	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d02e      	beq.n	8008006 <HAL_DMA_IRQHandler+0xec>
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d029      	beq.n	8008006 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0320 	and.w	r3, r3, #32
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10b      	bne.n	8007fd8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 020a 	bic.w	r2, r2, #10
 8007fce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fdc:	f003 021c 	and.w	r2, r3, #28
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe4:	2102      	movs	r1, #2
 8007fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8007fea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d038      	beq.n	800806e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008004:	e033      	b.n	800806e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800800a:	f003 031c 	and.w	r3, r3, #28
 800800e:	2208      	movs	r2, #8
 8008010:	409a      	lsls	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4013      	ands	r3, r2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d02a      	beq.n	8008070 <HAL_DMA_IRQHandler+0x156>
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f003 0308 	and.w	r3, r3, #8
 8008020:	2b00      	cmp	r3, #0
 8008022:	d025      	beq.n	8008070 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 020e 	bic.w	r2, r2, #14
 8008032:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008038:	f003 021c 	and.w	r2, r3, #28
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008040:	2101      	movs	r1, #1
 8008042:	fa01 f202 	lsl.w	r2, r1, r2
 8008046:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008062:	2b00      	cmp	r3, #0
 8008064:	d004      	beq.n	8008070 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800806e:	bf00      	nop
 8008070:	bf00      	nop
}
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8008084:	4618      	mov	r0, r3
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
 800809c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a2:	f003 021c 	and.w	r2, r3, #28
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080aa:	2101      	movs	r1, #1
 80080ac:	fa01 f202 	lsl.w	r2, r1, r2
 80080b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	2b10      	cmp	r3, #16
 80080c0:	d108      	bne.n	80080d4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80080d2:	e007      	b.n	80080e4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	60da      	str	r2, [r3, #12]
}
 80080e4:	bf00      	nop
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80080fa:	2300      	movs	r3, #0
 80080fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80080fe:	e148      	b.n	8008392 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	2101      	movs	r1, #1
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	fa01 f303 	lsl.w	r3, r1, r3
 800810c:	4013      	ands	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 813a 	beq.w	800838c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f003 0303 	and.w	r3, r3, #3
 8008120:	2b01      	cmp	r3, #1
 8008122:	d005      	beq.n	8008130 <HAL_GPIO_Init+0x40>
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f003 0303 	and.w	r3, r3, #3
 800812c:	2b02      	cmp	r3, #2
 800812e:	d130      	bne.n	8008192 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	2203      	movs	r2, #3
 800813c:	fa02 f303 	lsl.w	r3, r2, r3
 8008140:	43db      	mvns	r3, r3
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	4013      	ands	r3, r2
 8008146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	005b      	lsls	r3, r3, #1
 8008150:	fa02 f303 	lsl.w	r3, r2, r3
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	4313      	orrs	r3, r2
 8008158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008166:	2201      	movs	r2, #1
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	fa02 f303 	lsl.w	r3, r2, r3
 800816e:	43db      	mvns	r3, r3
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	4013      	ands	r3, r2
 8008174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	091b      	lsrs	r3, r3, #4
 800817c:	f003 0201 	and.w	r2, r3, #1
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	fa02 f303 	lsl.w	r3, r2, r3
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	4313      	orrs	r3, r2
 800818a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f003 0303 	and.w	r3, r3, #3
 800819a:	2b03      	cmp	r3, #3
 800819c:	d017      	beq.n	80081ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	005b      	lsls	r3, r3, #1
 80081a8:	2203      	movs	r2, #3
 80081aa:	fa02 f303 	lsl.w	r3, r2, r3
 80081ae:	43db      	mvns	r3, r3
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	4013      	ands	r3, r2
 80081b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	689a      	ldr	r2, [r3, #8]
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	fa02 f303 	lsl.w	r3, r2, r3
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f003 0303 	and.w	r3, r3, #3
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d123      	bne.n	8008222 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	08da      	lsrs	r2, r3, #3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	3208      	adds	r2, #8
 80081e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f003 0307 	and.w	r3, r3, #7
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	220f      	movs	r2, #15
 80081f2:	fa02 f303 	lsl.w	r3, r2, r3
 80081f6:	43db      	mvns	r3, r3
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	4013      	ands	r3, r2
 80081fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	691a      	ldr	r2, [r3, #16]
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f003 0307 	and.w	r3, r3, #7
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	fa02 f303 	lsl.w	r3, r2, r3
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	08da      	lsrs	r2, r3, #3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3208      	adds	r2, #8
 800821c:	6939      	ldr	r1, [r7, #16]
 800821e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	005b      	lsls	r3, r3, #1
 800822c:	2203      	movs	r2, #3
 800822e:	fa02 f303 	lsl.w	r3, r2, r3
 8008232:	43db      	mvns	r3, r3
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	4013      	ands	r3, r2
 8008238:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f003 0203 	and.w	r2, r3, #3
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	fa02 f303 	lsl.w	r3, r2, r3
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	4313      	orrs	r3, r2
 800824e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 8094 	beq.w	800838c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008264:	4b52      	ldr	r3, [pc, #328]	; (80083b0 <HAL_GPIO_Init+0x2c0>)
 8008266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008268:	4a51      	ldr	r2, [pc, #324]	; (80083b0 <HAL_GPIO_Init+0x2c0>)
 800826a:	f043 0301 	orr.w	r3, r3, #1
 800826e:	6613      	str	r3, [r2, #96]	; 0x60
 8008270:	4b4f      	ldr	r3, [pc, #316]	; (80083b0 <HAL_GPIO_Init+0x2c0>)
 8008272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	60bb      	str	r3, [r7, #8]
 800827a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800827c:	4a4d      	ldr	r2, [pc, #308]	; (80083b4 <HAL_GPIO_Init+0x2c4>)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	089b      	lsrs	r3, r3, #2
 8008282:	3302      	adds	r3, #2
 8008284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008288:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f003 0303 	and.w	r3, r3, #3
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	220f      	movs	r2, #15
 8008294:	fa02 f303 	lsl.w	r3, r2, r3
 8008298:	43db      	mvns	r3, r3
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	4013      	ands	r3, r2
 800829e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80082a6:	d00d      	beq.n	80082c4 <HAL_GPIO_Init+0x1d4>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a43      	ldr	r2, [pc, #268]	; (80083b8 <HAL_GPIO_Init+0x2c8>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d007      	beq.n	80082c0 <HAL_GPIO_Init+0x1d0>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a42      	ldr	r2, [pc, #264]	; (80083bc <HAL_GPIO_Init+0x2cc>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d101      	bne.n	80082bc <HAL_GPIO_Init+0x1cc>
 80082b8:	2302      	movs	r3, #2
 80082ba:	e004      	b.n	80082c6 <HAL_GPIO_Init+0x1d6>
 80082bc:	2307      	movs	r3, #7
 80082be:	e002      	b.n	80082c6 <HAL_GPIO_Init+0x1d6>
 80082c0:	2301      	movs	r3, #1
 80082c2:	e000      	b.n	80082c6 <HAL_GPIO_Init+0x1d6>
 80082c4:	2300      	movs	r3, #0
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	f002 0203 	and.w	r2, r2, #3
 80082cc:	0092      	lsls	r2, r2, #2
 80082ce:	4093      	lsls	r3, r2
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80082d6:	4937      	ldr	r1, [pc, #220]	; (80083b4 <HAL_GPIO_Init+0x2c4>)
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	089b      	lsrs	r3, r3, #2
 80082dc:	3302      	adds	r3, #2
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80082e4:	4b36      	ldr	r3, [pc, #216]	; (80083c0 <HAL_GPIO_Init+0x2d0>)
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	43db      	mvns	r3, r3
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	4013      	ands	r3, r2
 80082f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d003      	beq.n	8008308 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	4313      	orrs	r3, r2
 8008306:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008308:	4a2d      	ldr	r2, [pc, #180]	; (80083c0 <HAL_GPIO_Init+0x2d0>)
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800830e:	4b2c      	ldr	r3, [pc, #176]	; (80083c0 <HAL_GPIO_Init+0x2d0>)
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	43db      	mvns	r3, r3
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4013      	ands	r3, r2
 800831c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4313      	orrs	r3, r2
 8008330:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008332:	4a23      	ldr	r2, [pc, #140]	; (80083c0 <HAL_GPIO_Init+0x2d0>)
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008338:	4b21      	ldr	r3, [pc, #132]	; (80083c0 <HAL_GPIO_Init+0x2d0>)
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	43db      	mvns	r3, r3
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	4013      	ands	r3, r2
 8008346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d003      	beq.n	800835c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4313      	orrs	r3, r2
 800835a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800835c:	4a18      	ldr	r2, [pc, #96]	; (80083c0 <HAL_GPIO_Init+0x2d0>)
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008362:	4b17      	ldr	r3, [pc, #92]	; (80083c0 <HAL_GPIO_Init+0x2d0>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	43db      	mvns	r3, r3
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4013      	ands	r3, r2
 8008370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4313      	orrs	r3, r2
 8008384:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008386:	4a0e      	ldr	r2, [pc, #56]	; (80083c0 <HAL_GPIO_Init+0x2d0>)
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	3301      	adds	r3, #1
 8008390:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	fa22 f303 	lsr.w	r3, r2, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	f47f aeaf 	bne.w	8008100 <HAL_GPIO_Init+0x10>
  }
}
 80083a2:	bf00      	nop
 80083a4:	bf00      	nop
 80083a6:	371c      	adds	r7, #28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	40021000 	.word	0x40021000
 80083b4:	40010000 	.word	0x40010000
 80083b8:	48000400 	.word	0x48000400
 80083bc:	48000800 	.word	0x48000800
 80083c0:	40010400 	.word	0x40010400

080083c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	460b      	mov	r3, r1
 80083ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	691a      	ldr	r2, [r3, #16]
 80083d4:	887b      	ldrh	r3, [r7, #2]
 80083d6:	4013      	ands	r3, r2
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80083dc:	2301      	movs	r3, #1
 80083de:	73fb      	strb	r3, [r7, #15]
 80083e0:	e001      	b.n	80083e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80083e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	807b      	strh	r3, [r7, #2]
 8008400:	4613      	mov	r3, r2
 8008402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008404:	787b      	ldrb	r3, [r7, #1]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800840a:	887a      	ldrh	r2, [r7, #2]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008410:	e002      	b.n	8008418 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008412:	887a      	ldrh	r2, [r7, #2]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	4603      	mov	r3, r0
 800842c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800842e:	4b08      	ldr	r3, [pc, #32]	; (8008450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008430:	695a      	ldr	r2, [r3, #20]
 8008432:	88fb      	ldrh	r3, [r7, #6]
 8008434:	4013      	ands	r3, r2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d006      	beq.n	8008448 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800843a:	4a05      	ldr	r2, [pc, #20]	; (8008450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800843c:	88fb      	ldrh	r3, [r7, #6]
 800843e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008440:	88fb      	ldrh	r3, [r7, #6]
 8008442:	4618      	mov	r0, r3
 8008444:	f7f9 f998 	bl	8001778 <HAL_GPIO_EXTI_Callback>
  }
}
 8008448:	bf00      	nop
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	40010400 	.word	0x40010400

08008454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e08d      	b.n	8008582 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d106      	bne.n	8008480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f7f9 f8be 	bl	80015fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2224      	movs	r2, #36	; 0x24
 8008484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 0201 	bic.w	r2, r2, #1
 8008496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80084a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d107      	bne.n	80084ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	689a      	ldr	r2, [r3, #8]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084ca:	609a      	str	r2, [r3, #8]
 80084cc:	e006      	b.n	80084dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	689a      	ldr	r2, [r3, #8]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80084da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d108      	bne.n	80084f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084f2:	605a      	str	r2, [r3, #4]
 80084f4:	e007      	b.n	8008506 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008504:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	6812      	ldr	r2, [r2, #0]
 8008510:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008518:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68da      	ldr	r2, [r3, #12]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008528:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	691a      	ldr	r2, [r3, #16]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	69d9      	ldr	r1, [r3, #28]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a1a      	ldr	r2, [r3, #32]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	430a      	orrs	r2, r1
 8008552:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2220      	movs	r2, #32
 800856e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
	...

0800858c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b088      	sub	sp, #32
 8008590:	af02      	add	r7, sp, #8
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	4608      	mov	r0, r1
 8008596:	4611      	mov	r1, r2
 8008598:	461a      	mov	r2, r3
 800859a:	4603      	mov	r3, r0
 800859c:	817b      	strh	r3, [r7, #10]
 800859e:	460b      	mov	r3, r1
 80085a0:	813b      	strh	r3, [r7, #8]
 80085a2:	4613      	mov	r3, r2
 80085a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b20      	cmp	r3, #32
 80085b0:	f040 80f9 	bne.w	80087a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <HAL_I2C_Mem_Write+0x34>
 80085ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d105      	bne.n	80085cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e0ed      	b.n	80087a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d101      	bne.n	80085da <HAL_I2C_Mem_Write+0x4e>
 80085d6:	2302      	movs	r3, #2
 80085d8:	e0e6      	b.n	80087a8 <HAL_I2C_Mem_Write+0x21c>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80085e2:	f7fd ff21 	bl	8006428 <HAL_GetTick>
 80085e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	2319      	movs	r3, #25
 80085ee:	2201      	movs	r2, #1
 80085f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 f955 	bl	80088a4 <I2C_WaitOnFlagUntilTimeout>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e0d1      	b.n	80087a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2221      	movs	r2, #33	; 0x21
 8008608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2240      	movs	r2, #64	; 0x40
 8008610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6a3a      	ldr	r2, [r7, #32]
 800861e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008624:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800862c:	88f8      	ldrh	r0, [r7, #6]
 800862e:	893a      	ldrh	r2, [r7, #8]
 8008630:	8979      	ldrh	r1, [r7, #10]
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	4603      	mov	r3, r0
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 f8b9 	bl	80087b4 <I2C_RequestMemoryWrite>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d005      	beq.n	8008654 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e0a9      	b.n	80087a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008658:	b29b      	uxth	r3, r3
 800865a:	2bff      	cmp	r3, #255	; 0xff
 800865c:	d90e      	bls.n	800867c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	22ff      	movs	r2, #255	; 0xff
 8008662:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008668:	b2da      	uxtb	r2, r3
 800866a:	8979      	ldrh	r1, [r7, #10]
 800866c:	2300      	movs	r3, #0
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 facf 	bl	8008c18 <I2C_TransferConfig>
 800867a:	e00f      	b.n	800869c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008680:	b29a      	uxth	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800868a:	b2da      	uxtb	r2, r3
 800868c:	8979      	ldrh	r1, [r7, #10]
 800868e:	2300      	movs	r3, #0
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f000 fabe 	bl	8008c18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 f94e 	bl	8008942 <I2C_WaitOnTXISFlagUntilTimeout>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e07b      	b.n	80087a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	781a      	ldrb	r2, [r3, #0]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c0:	1c5a      	adds	r2, r3, #1
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	3b01      	subs	r3, #1
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086d8:	3b01      	subs	r3, #1
 80086da:	b29a      	uxth	r2, r3
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d034      	beq.n	8008754 <HAL_I2C_Mem_Write+0x1c8>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d130      	bne.n	8008754 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f8:	2200      	movs	r2, #0
 80086fa:	2180      	movs	r1, #128	; 0x80
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 f8d1 	bl	80088a4 <I2C_WaitOnFlagUntilTimeout>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e04d      	b.n	80087a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008710:	b29b      	uxth	r3, r3
 8008712:	2bff      	cmp	r3, #255	; 0xff
 8008714:	d90e      	bls.n	8008734 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	22ff      	movs	r2, #255	; 0xff
 800871a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008720:	b2da      	uxtb	r2, r3
 8008722:	8979      	ldrh	r1, [r7, #10]
 8008724:	2300      	movs	r3, #0
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 fa73 	bl	8008c18 <I2C_TransferConfig>
 8008732:	e00f      	b.n	8008754 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008738:	b29a      	uxth	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008742:	b2da      	uxtb	r2, r3
 8008744:	8979      	ldrh	r1, [r7, #10]
 8008746:	2300      	movs	r3, #0
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 fa62 	bl	8008c18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008758:	b29b      	uxth	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d19e      	bne.n	800869c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f000 f934 	bl	80089d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e01a      	b.n	80087a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2220      	movs	r2, #32
 8008778:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6859      	ldr	r1, [r3, #4]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	4b0a      	ldr	r3, [pc, #40]	; (80087b0 <HAL_I2C_Mem_Write+0x224>)
 8008786:	400b      	ands	r3, r1
 8008788:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2220      	movs	r2, #32
 800878e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	e000      	b.n	80087a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80087a6:	2302      	movs	r3, #2
  }
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	fe00e800 	.word	0xfe00e800

080087b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af02      	add	r7, sp, #8
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	4608      	mov	r0, r1
 80087be:	4611      	mov	r1, r2
 80087c0:	461a      	mov	r2, r3
 80087c2:	4603      	mov	r3, r0
 80087c4:	817b      	strh	r3, [r7, #10]
 80087c6:	460b      	mov	r3, r1
 80087c8:	813b      	strh	r3, [r7, #8]
 80087ca:	4613      	mov	r3, r2
 80087cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80087ce:	88fb      	ldrh	r3, [r7, #6]
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	8979      	ldrh	r1, [r7, #10]
 80087d4:	4b20      	ldr	r3, [pc, #128]	; (8008858 <I2C_RequestMemoryWrite+0xa4>)
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f000 fa1b 	bl	8008c18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	69b9      	ldr	r1, [r7, #24]
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f000 f8ab 	bl	8008942 <I2C_WaitOnTXISFlagUntilTimeout>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e02c      	b.n	8008850 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087f6:	88fb      	ldrh	r3, [r7, #6]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d105      	bne.n	8008808 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80087fc:	893b      	ldrh	r3, [r7, #8]
 80087fe:	b2da      	uxtb	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	629a      	str	r2, [r3, #40]	; 0x28
 8008806:	e015      	b.n	8008834 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008808:	893b      	ldrh	r3, [r7, #8]
 800880a:	0a1b      	lsrs	r3, r3, #8
 800880c:	b29b      	uxth	r3, r3
 800880e:	b2da      	uxtb	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008816:	69fa      	ldr	r2, [r7, #28]
 8008818:	69b9      	ldr	r1, [r7, #24]
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 f891 	bl	8008942 <I2C_WaitOnTXISFlagUntilTimeout>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e012      	b.n	8008850 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800882a:	893b      	ldrh	r3, [r7, #8]
 800882c:	b2da      	uxtb	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	2200      	movs	r2, #0
 800883c:	2180      	movs	r1, #128	; 0x80
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f000 f830 	bl	80088a4 <I2C_WaitOnFlagUntilTimeout>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e000      	b.n	8008850 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	80002000 	.word	0x80002000

0800885c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	2b02      	cmp	r3, #2
 8008870:	d103      	bne.n	800887a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2200      	movs	r2, #0
 8008878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b01      	cmp	r3, #1
 8008886:	d007      	beq.n	8008898 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	699a      	ldr	r2, [r3, #24]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f042 0201 	orr.w	r2, r2, #1
 8008896:	619a      	str	r2, [r3, #24]
  }
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	603b      	str	r3, [r7, #0]
 80088b0:	4613      	mov	r3, r2
 80088b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088b4:	e031      	b.n	800891a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088bc:	d02d      	beq.n	800891a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088be:	f7fd fdb3 	bl	8006428 <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	683a      	ldr	r2, [r7, #0]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d302      	bcc.n	80088d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d122      	bne.n	800891a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	699a      	ldr	r2, [r3, #24]
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	4013      	ands	r3, r2
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	bf0c      	ite	eq
 80088e4:	2301      	moveq	r3, #1
 80088e6:	2300      	movne	r3, #0
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	461a      	mov	r2, r3
 80088ec:	79fb      	ldrb	r3, [r7, #7]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d113      	bne.n	800891a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f6:	f043 0220 	orr.w	r2, r3, #32
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2220      	movs	r2, #32
 8008902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e00f      	b.n	800893a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	699a      	ldr	r2, [r3, #24]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	4013      	ands	r3, r2
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	429a      	cmp	r2, r3
 8008928:	bf0c      	ite	eq
 800892a:	2301      	moveq	r3, #1
 800892c:	2300      	movne	r3, #0
 800892e:	b2db      	uxtb	r3, r3
 8008930:	461a      	mov	r2, r3
 8008932:	79fb      	ldrb	r3, [r7, #7]
 8008934:	429a      	cmp	r2, r3
 8008936:	d0be      	beq.n	80088b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	60b9      	str	r1, [r7, #8]
 800894c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800894e:	e033      	b.n	80089b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	68b9      	ldr	r1, [r7, #8]
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 f87f 	bl	8008a58 <I2C_IsErrorOccurred>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e031      	b.n	80089c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800896a:	d025      	beq.n	80089b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800896c:	f7fd fd5c 	bl	8006428 <HAL_GetTick>
 8008970:	4602      	mov	r2, r0
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	429a      	cmp	r2, r3
 800897a:	d302      	bcc.n	8008982 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d11a      	bne.n	80089b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	f003 0302 	and.w	r3, r3, #2
 800898c:	2b02      	cmp	r3, #2
 800898e:	d013      	beq.n	80089b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008994:	f043 0220 	orr.w	r2, r3, #32
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2220      	movs	r2, #32
 80089a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e007      	b.n	80089c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	f003 0302 	and.w	r3, r3, #2
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d1c4      	bne.n	8008950 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089dc:	e02f      	b.n	8008a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	68b9      	ldr	r1, [r7, #8]
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f000 f838 	bl	8008a58 <I2C_IsErrorOccurred>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e02d      	b.n	8008a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089f2:	f7fd fd19 	bl	8006428 <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d302      	bcc.n	8008a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d11a      	bne.n	8008a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	f003 0320 	and.w	r3, r3, #32
 8008a12:	2b20      	cmp	r3, #32
 8008a14:	d013      	beq.n	8008a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a1a:	f043 0220 	orr.w	r2, r3, #32
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e007      	b.n	8008a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	f003 0320 	and.w	r3, r3, #32
 8008a48:	2b20      	cmp	r3, #32
 8008a4a:	d1c8      	bne.n	80089de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b08a      	sub	sp, #40	; 0x28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	f003 0310 	and.w	r3, r3, #16
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d068      	beq.n	8008b56 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2210      	movs	r2, #16
 8008a8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008a8c:	e049      	b.n	8008b22 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a94:	d045      	beq.n	8008b22 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008a96:	f7fd fcc7 	bl	8006428 <HAL_GetTick>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d302      	bcc.n	8008aac <I2C_IsErrorOccurred+0x54>
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d13a      	bne.n	8008b22 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ab6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008abe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ace:	d121      	bne.n	8008b14 <I2C_IsErrorOccurred+0xbc>
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ad6:	d01d      	beq.n	8008b14 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008ad8:	7cfb      	ldrb	r3, [r7, #19]
 8008ada:	2b20      	cmp	r3, #32
 8008adc:	d01a      	beq.n	8008b14 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	685a      	ldr	r2, [r3, #4]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008aec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008aee:	f7fd fc9b 	bl	8006428 <HAL_GetTick>
 8008af2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008af4:	e00e      	b.n	8008b14 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008af6:	f7fd fc97 	bl	8006428 <HAL_GetTick>
 8008afa:	4602      	mov	r2, r0
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	2b19      	cmp	r3, #25
 8008b02:	d907      	bls.n	8008b14 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	f043 0320 	orr.w	r3, r3, #32
 8008b0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008b12:	e006      	b.n	8008b22 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	f003 0320 	and.w	r3, r3, #32
 8008b1e:	2b20      	cmp	r3, #32
 8008b20:	d1e9      	bne.n	8008af6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	f003 0320 	and.w	r3, r3, #32
 8008b2c:	2b20      	cmp	r3, #32
 8008b2e:	d003      	beq.n	8008b38 <I2C_IsErrorOccurred+0xe0>
 8008b30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d0aa      	beq.n	8008a8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d103      	bne.n	8008b48 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2220      	movs	r2, #32
 8008b46:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	f043 0304 	orr.w	r3, r3, #4
 8008b4e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00b      	beq.n	8008b80 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	f043 0301 	orr.w	r3, r3, #1
 8008b6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00b      	beq.n	8008ba2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	f043 0308 	orr.w	r3, r3, #8
 8008b90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00b      	beq.n	8008bc4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	f043 0302 	orr.w	r3, r3, #2
 8008bb2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d01c      	beq.n	8008c06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f7ff fe45 	bl	800885c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6859      	ldr	r1, [r3, #4]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	4b0d      	ldr	r3, [pc, #52]	; (8008c14 <I2C_IsErrorOccurred+0x1bc>)
 8008bde:	400b      	ands	r3, r1
 8008be0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	431a      	orrs	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3728      	adds	r7, #40	; 0x28
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	fe00e800 	.word	0xfe00e800

08008c18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	607b      	str	r3, [r7, #4]
 8008c22:	460b      	mov	r3, r1
 8008c24:	817b      	strh	r3, [r7, #10]
 8008c26:	4613      	mov	r3, r2
 8008c28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c2a:	897b      	ldrh	r3, [r7, #10]
 8008c2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c30:	7a7b      	ldrb	r3, [r7, #9]
 8008c32:	041b      	lsls	r3, r3, #16
 8008c34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	6a3b      	ldr	r3, [r7, #32]
 8008c50:	0d5b      	lsrs	r3, r3, #21
 8008c52:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008c56:	4b08      	ldr	r3, [pc, #32]	; (8008c78 <I2C_TransferConfig+0x60>)
 8008c58:	430b      	orrs	r3, r1
 8008c5a:	43db      	mvns	r3, r3
 8008c5c:	ea02 0103 	and.w	r1, r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008c6a:	bf00      	nop
 8008c6c:	371c      	adds	r7, #28
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	03ff63ff 	.word	0x03ff63ff

08008c7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b20      	cmp	r3, #32
 8008c90:	d138      	bne.n	8008d04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d101      	bne.n	8008ca0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	e032      	b.n	8008d06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2224      	movs	r2, #36	; 0x24
 8008cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f022 0201 	bic.w	r2, r2, #1
 8008cbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008cce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6819      	ldr	r1, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f042 0201 	orr.w	r2, r2, #1
 8008cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	e000      	b.n	8008d06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008d04:	2302      	movs	r3, #2
  }
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b085      	sub	sp, #20
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b20      	cmp	r3, #32
 8008d26:	d139      	bne.n	8008d9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d101      	bne.n	8008d36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008d32:	2302      	movs	r3, #2
 8008d34:	e033      	b.n	8008d9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2224      	movs	r2, #36	; 0x24
 8008d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f022 0201 	bic.w	r2, r2, #1
 8008d54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008d64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	021b      	lsls	r3, r3, #8
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f042 0201 	orr.w	r2, r2, #1
 8008d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	e000      	b.n	8008d9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008d9c:	2302      	movs	r3, #2
  }
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
	...

08008dac <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008db4:	4b0b      	ldr	r3, [pc, #44]	; (8008de4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008db8:	4a0a      	ldr	r2, [pc, #40]	; (8008de4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008dba:	f043 0301 	orr.w	r3, r3, #1
 8008dbe:	6613      	str	r3, [r2, #96]	; 0x60
 8008dc0:	4b08      	ldr	r3, [pc, #32]	; (8008de4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	60fb      	str	r3, [r7, #12]
 8008dca:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8008dcc:	4b06      	ldr	r3, [pc, #24]	; (8008de8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008dce:	685a      	ldr	r2, [r3, #4]
 8008dd0:	4905      	ldr	r1, [pc, #20]	; (8008de8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	604b      	str	r3, [r1, #4]
}
 8008dd8:	bf00      	nop
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	40021000 	.word	0x40021000
 8008de8:	40010000 	.word	0x40010000

08008dec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dee:	b08b      	sub	sp, #44	; 0x2c
 8008df0:	af06      	add	r7, sp, #24
 8008df2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e0f8      	b.n	8008ff0 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d106      	bne.n	8008e18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f00b f9dc 	bl	80141d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2203      	movs	r2, #3
 8008e1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f005 ff7b 	bl	800ed20 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	603b      	str	r3, [r7, #0]
 8008e30:	687e      	ldr	r6, [r7, #4]
 8008e32:	466d      	mov	r5, sp
 8008e34:	f106 0410 	add.w	r4, r6, #16
 8008e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	602b      	str	r3, [r5, #0]
 8008e40:	1d33      	adds	r3, r6, #4
 8008e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e44:	6838      	ldr	r0, [r7, #0]
 8008e46:	f005 ff43 	bl	800ecd0 <USB_CoreInit>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d005      	beq.n	8008e5c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2202      	movs	r2, #2
 8008e54:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e0c9      	b.n	8008ff0 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2100      	movs	r1, #0
 8008e62:	4618      	mov	r0, r3
 8008e64:	f005 ff77 	bl	800ed56 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e68:	2300      	movs	r3, #0
 8008e6a:	73fb      	strb	r3, [r7, #15]
 8008e6c:	e040      	b.n	8008ef0 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	6879      	ldr	r1, [r7, #4]
 8008e72:	1c5a      	adds	r2, r3, #1
 8008e74:	4613      	mov	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4413      	add	r3, r2
 8008e7a:	00db      	lsls	r3, r3, #3
 8008e7c:	440b      	add	r3, r1
 8008e7e:	3301      	adds	r3, #1
 8008e80:	2201      	movs	r2, #1
 8008e82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
 8008e86:	6879      	ldr	r1, [r7, #4]
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	00db      	lsls	r3, r3, #3
 8008e92:	440b      	add	r3, r1
 8008e94:	7bfa      	ldrb	r2, [r7, #15]
 8008e96:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
 8008e9a:	6879      	ldr	r1, [r7, #4]
 8008e9c:	1c5a      	adds	r2, r3, #1
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4413      	add	r3, r2
 8008ea4:	00db      	lsls	r3, r3, #3
 8008ea6:	440b      	add	r3, r1
 8008ea8:	3303      	adds	r3, #3
 8008eaa:	2200      	movs	r2, #0
 8008eac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008eae:	7bfa      	ldrb	r2, [r7, #15]
 8008eb0:	6879      	ldr	r1, [r7, #4]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	00db      	lsls	r3, r3, #3
 8008eba:	440b      	add	r3, r1
 8008ebc:	3338      	adds	r3, #56	; 0x38
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008ec2:	7bfa      	ldrb	r2, [r7, #15]
 8008ec4:	6879      	ldr	r1, [r7, #4]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4413      	add	r3, r2
 8008ecc:	00db      	lsls	r3, r3, #3
 8008ece:	440b      	add	r3, r1
 8008ed0:	333c      	adds	r3, #60	; 0x3c
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008ed6:	7bfa      	ldrb	r2, [r7, #15]
 8008ed8:	6879      	ldr	r1, [r7, #4]
 8008eda:	4613      	mov	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	00db      	lsls	r3, r3, #3
 8008ee2:	440b      	add	r3, r1
 8008ee4:	3340      	adds	r3, #64	; 0x40
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	3301      	adds	r3, #1
 8008eee:	73fb      	strb	r3, [r7, #15]
 8008ef0:	7bfa      	ldrb	r2, [r7, #15]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d3b9      	bcc.n	8008e6e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008efa:	2300      	movs	r3, #0
 8008efc:	73fb      	strb	r3, [r7, #15]
 8008efe:	e044      	b.n	8008f8a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008f00:	7bfa      	ldrb	r2, [r7, #15]
 8008f02:	6879      	ldr	r1, [r7, #4]
 8008f04:	4613      	mov	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4413      	add	r3, r2
 8008f0a:	00db      	lsls	r3, r3, #3
 8008f0c:	440b      	add	r3, r1
 8008f0e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8008f12:	2200      	movs	r2, #0
 8008f14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008f16:	7bfa      	ldrb	r2, [r7, #15]
 8008f18:	6879      	ldr	r1, [r7, #4]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4413      	add	r3, r2
 8008f20:	00db      	lsls	r3, r3, #3
 8008f22:	440b      	add	r3, r1
 8008f24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008f28:	7bfa      	ldrb	r2, [r7, #15]
 8008f2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008f2c:	7bfa      	ldrb	r2, [r7, #15]
 8008f2e:	6879      	ldr	r1, [r7, #4]
 8008f30:	4613      	mov	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	440b      	add	r3, r1
 8008f3a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8008f3e:	2200      	movs	r2, #0
 8008f40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008f42:	7bfa      	ldrb	r2, [r7, #15]
 8008f44:	6879      	ldr	r1, [r7, #4]
 8008f46:	4613      	mov	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	00db      	lsls	r3, r3, #3
 8008f4e:	440b      	add	r3, r1
 8008f50:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8008f54:	2200      	movs	r2, #0
 8008f56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008f58:	7bfa      	ldrb	r2, [r7, #15]
 8008f5a:	6879      	ldr	r1, [r7, #4]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4413      	add	r3, r2
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	440b      	add	r3, r1
 8008f66:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008f6e:	7bfa      	ldrb	r2, [r7, #15]
 8008f70:	6879      	ldr	r1, [r7, #4]
 8008f72:	4613      	mov	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	440b      	add	r3, r1
 8008f7c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008f80:	2200      	movs	r2, #0
 8008f82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	3301      	adds	r3, #1
 8008f88:	73fb      	strb	r3, [r7, #15]
 8008f8a:	7bfa      	ldrb	r2, [r7, #15]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d3b5      	bcc.n	8008f00 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	603b      	str	r3, [r7, #0]
 8008f9a:	687e      	ldr	r6, [r7, #4]
 8008f9c:	466d      	mov	r5, sp
 8008f9e:	f106 0410 	add.w	r4, r6, #16
 8008fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	602b      	str	r3, [r5, #0]
 8008faa:	1d33      	adds	r3, r6, #4
 8008fac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008fae:	6838      	ldr	r0, [r7, #0]
 8008fb0:	f005 fede 	bl	800ed70 <USB_DevInit>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d005      	beq.n	8008fc6 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e014      	b.n	8008ff0 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d102      	bne.n	8008fe4 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f001 fc58 	bl	800a894 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f008 f96f 	bl	80112cc <USB_DevDisconnect>

  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ff8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009006:	2b01      	cmp	r3, #1
 8009008:	d101      	bne.n	800900e <HAL_PCD_Start+0x16>
 800900a:	2302      	movs	r3, #2
 800900c:	e012      	b.n	8009034 <HAL_PCD_Start+0x3c>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4618      	mov	r0, r3
 800901c:	f005 fe69 	bl	800ecf2 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4618      	mov	r0, r3
 8009026:	f008 f93a 	bl	801129e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4618      	mov	r0, r3
 800904a:	f008 f954 	bl	80112f6 <USB_ReadInterrupts>
 800904e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fb13 	bl	8009686 <PCD_EP_ISR_Handler>

    return;
 8009060:	e110      	b.n	8009284 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009068:	2b00      	cmp	r3, #0
 800906a:	d013      	beq.n	8009094 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009074:	b29a      	uxth	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800907e:	b292      	uxth	r2, r2
 8009080:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f00b f91e 	bl	80142c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800908a:	2100      	movs	r1, #0
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f8fc 	bl	800928a <HAL_PCD_SetAddress>

    return;
 8009092:	e0f7      	b.n	8009284 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00c      	beq.n	80090b8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80090b0:	b292      	uxth	r2, r2
 80090b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80090b6:	e0e5      	b.n	8009284 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00c      	beq.n	80090dc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090d4:	b292      	uxth	r2, r2
 80090d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80090da:	e0d3      	b.n	8009284 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d034      	beq.n	8009150 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f022 0204 	bic.w	r2, r2, #4
 80090f8:	b292      	uxth	r2, r2
 80090fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009106:	b29a      	uxth	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0208 	bic.w	r2, r2, #8
 8009110:	b292      	uxth	r2, r2
 8009112:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800911c:	2b01      	cmp	r3, #1
 800911e:	d107      	bne.n	8009130 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009128:	2100      	movs	r1, #0
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f00b fb7c 	bl	8014828 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f00b f901 	bl	8014338 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800913e:	b29a      	uxth	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009148:	b292      	uxth	r2, r2
 800914a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800914e:	e099      	b.n	8009284 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009156:	2b00      	cmp	r3, #0
 8009158:	d027      	beq.n	80091aa <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009162:	b29a      	uxth	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f042 0208 	orr.w	r2, r2, #8
 800916c:	b292      	uxth	r2, r2
 800916e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800917a:	b29a      	uxth	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009184:	b292      	uxth	r2, r2
 8009186:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009192:	b29a      	uxth	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f042 0204 	orr.w	r2, r2, #4
 800919c:	b292      	uxth	r2, r2
 800919e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f00b f8ae 	bl	8014304 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80091a8:	e06c      	b.n	8009284 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d040      	beq.n	8009236 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80091bc:	b29a      	uxth	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091c6:	b292      	uxth	r2, r2
 80091c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d12b      	bne.n	800922e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80091de:	b29a      	uxth	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f042 0204 	orr.w	r2, r2, #4
 80091e8:	b292      	uxth	r2, r2
 80091ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f042 0208 	orr.w	r2, r2, #8
 8009200:	b292      	uxth	r2, r2
 8009202:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009216:	b29b      	uxth	r3, r3
 8009218:	089b      	lsrs	r3, r3, #2
 800921a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009224:	2101      	movs	r1, #1
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f00b fafe 	bl	8014828 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800922c:	e02a      	b.n	8009284 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f00b f868 	bl	8014304 <HAL_PCD_SuspendCallback>
    return;
 8009234:	e026      	b.n	8009284 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00f      	beq.n	8009260 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009248:	b29a      	uxth	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009252:	b292      	uxth	r2, r2
 8009254:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f00b f826 	bl	80142aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800925e:	e011      	b.n	8009284 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00c      	beq.n	8009284 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009272:	b29a      	uxth	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800927c:	b292      	uxth	r2, r2
 800927e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009282:	bf00      	nop
  }
}
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b082      	sub	sp, #8
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	460b      	mov	r3, r1
 8009294:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800929c:	2b01      	cmp	r3, #1
 800929e:	d101      	bne.n	80092a4 <HAL_PCD_SetAddress+0x1a>
 80092a0:	2302      	movs	r3, #2
 80092a2:	e013      	b.n	80092cc <HAL_PCD_SetAddress+0x42>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	78fa      	ldrb	r2, [r7, #3]
 80092b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	78fa      	ldrb	r2, [r7, #3]
 80092ba:	4611      	mov	r1, r2
 80092bc:	4618      	mov	r0, r3
 80092be:	f007 ffda 	bl	8011276 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	4608      	mov	r0, r1
 80092de:	4611      	mov	r1, r2
 80092e0:	461a      	mov	r2, r3
 80092e2:	4603      	mov	r3, r0
 80092e4:	70fb      	strb	r3, [r7, #3]
 80092e6:	460b      	mov	r3, r1
 80092e8:	803b      	strh	r3, [r7, #0]
 80092ea:	4613      	mov	r3, r2
 80092ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80092f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	da0e      	bge.n	8009318 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	f003 0307 	and.w	r3, r3, #7
 8009300:	1c5a      	adds	r2, r3, #1
 8009302:	4613      	mov	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	00db      	lsls	r3, r3, #3
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	4413      	add	r3, r2
 800930e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2201      	movs	r2, #1
 8009314:	705a      	strb	r2, [r3, #1]
 8009316:	e00e      	b.n	8009336 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009318:	78fb      	ldrb	r3, [r7, #3]
 800931a:	f003 0207 	and.w	r2, r3, #7
 800931e:	4613      	mov	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	00db      	lsls	r3, r3, #3
 8009326:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	4413      	add	r3, r2
 800932e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009336:	78fb      	ldrb	r3, [r7, #3]
 8009338:	f003 0307 	and.w	r3, r3, #7
 800933c:	b2da      	uxtb	r2, r3
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009342:	883a      	ldrh	r2, [r7, #0]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	78ba      	ldrb	r2, [r7, #2]
 800934c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800934e:	78bb      	ldrb	r3, [r7, #2]
 8009350:	2b02      	cmp	r3, #2
 8009352:	d102      	bne.n	800935a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009360:	2b01      	cmp	r3, #1
 8009362:	d101      	bne.n	8009368 <HAL_PCD_EP_Open+0x94>
 8009364:	2302      	movs	r3, #2
 8009366:	e00e      	b.n	8009386 <HAL_PCD_EP_Open+0xb2>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68f9      	ldr	r1, [r7, #12]
 8009376:	4618      	mov	r0, r3
 8009378:	f005 fd1c 	bl	800edb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8009384:	7afb      	ldrb	r3, [r7, #11]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	460b      	mov	r3, r1
 8009398:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800939a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	da0e      	bge.n	80093c0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093a2:	78fb      	ldrb	r3, [r7, #3]
 80093a4:	f003 0307 	and.w	r3, r3, #7
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	4613      	mov	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	00db      	lsls	r3, r3, #3
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	4413      	add	r3, r2
 80093b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2201      	movs	r2, #1
 80093bc:	705a      	strb	r2, [r3, #1]
 80093be:	e00e      	b.n	80093de <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093c0:	78fb      	ldrb	r3, [r7, #3]
 80093c2:	f003 0207 	and.w	r2, r3, #7
 80093c6:	4613      	mov	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	00db      	lsls	r3, r3, #3
 80093ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	4413      	add	r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80093de:	78fb      	ldrb	r3, [r7, #3]
 80093e0:	f003 0307 	and.w	r3, r3, #7
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d101      	bne.n	80093f8 <HAL_PCD_EP_Close+0x6a>
 80093f4:	2302      	movs	r3, #2
 80093f6:	e00e      	b.n	8009416 <HAL_PCD_EP_Close+0x88>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68f9      	ldr	r1, [r7, #12]
 8009406:	4618      	mov	r0, r3
 8009408:	f006 f898 	bl	800f53c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b086      	sub	sp, #24
 8009422:	af00      	add	r7, sp, #0
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	607a      	str	r2, [r7, #4]
 8009428:	603b      	str	r3, [r7, #0]
 800942a:	460b      	mov	r3, r1
 800942c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	f003 0207 	and.w	r2, r3, #7
 8009434:	4613      	mov	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4413      	add	r3, r2
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	4413      	add	r3, r2
 8009444:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	2200      	movs	r2, #0
 8009456:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	2200      	movs	r2, #0
 800945c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800945e:	7afb      	ldrb	r3, [r7, #11]
 8009460:	f003 0307 	and.w	r3, r3, #7
 8009464:	b2da      	uxtb	r2, r3
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	6979      	ldr	r1, [r7, #20]
 8009470:	4618      	mov	r0, r3
 8009472:	f006 fa50 	bl	800f916 <USB_EPStartXfer>

  return HAL_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3718      	adds	r7, #24
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800948c:	78fb      	ldrb	r3, [r7, #3]
 800948e:	f003 0207 	and.w	r2, r3, #7
 8009492:	6879      	ldr	r1, [r7, #4]
 8009494:	4613      	mov	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4413      	add	r3, r2
 800949a:	00db      	lsls	r3, r3, #3
 800949c:	440b      	add	r3, r1
 800949e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80094a2:	681b      	ldr	r3, [r3, #0]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	607a      	str	r2, [r7, #4]
 80094ba:	603b      	str	r3, [r7, #0]
 80094bc:	460b      	mov	r3, r1
 80094be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094c0:	7afb      	ldrb	r3, [r7, #11]
 80094c2:	f003 0307 	and.w	r3, r3, #7
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	4613      	mov	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	00db      	lsls	r3, r3, #3
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	4413      	add	r3, r2
 80094d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	2200      	movs	r2, #0
 80094f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	2201      	movs	r2, #1
 80094fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094fc:	7afb      	ldrb	r3, [r7, #11]
 80094fe:	f003 0307 	and.w	r3, r3, #7
 8009502:	b2da      	uxtb	r2, r3
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6979      	ldr	r1, [r7, #20]
 800950e:	4618      	mov	r0, r3
 8009510:	f006 fa01 	bl	800f916 <USB_EPStartXfer>

  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3718      	adds	r7, #24
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	460b      	mov	r3, r1
 8009528:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800952a:	78fb      	ldrb	r3, [r7, #3]
 800952c:	f003 0207 	and.w	r2, r3, #7
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	429a      	cmp	r2, r3
 8009536:	d901      	bls.n	800953c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e04c      	b.n	80095d6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800953c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009540:	2b00      	cmp	r3, #0
 8009542:	da0e      	bge.n	8009562 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	f003 0307 	and.w	r3, r3, #7
 800954a:	1c5a      	adds	r2, r3, #1
 800954c:	4613      	mov	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	00db      	lsls	r3, r3, #3
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	4413      	add	r3, r2
 8009558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2201      	movs	r2, #1
 800955e:	705a      	strb	r2, [r3, #1]
 8009560:	e00c      	b.n	800957c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	4613      	mov	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4413      	add	r3, r2
 800956a:	00db      	lsls	r3, r3, #3
 800956c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	4413      	add	r3, r2
 8009574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2200      	movs	r2, #0
 800957a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2201      	movs	r2, #1
 8009580:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009582:	78fb      	ldrb	r3, [r7, #3]
 8009584:	f003 0307 	and.w	r3, r3, #7
 8009588:	b2da      	uxtb	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009594:	2b01      	cmp	r3, #1
 8009596:	d101      	bne.n	800959c <HAL_PCD_EP_SetStall+0x7e>
 8009598:	2302      	movs	r3, #2
 800959a:	e01c      	b.n	80095d6 <HAL_PCD_EP_SetStall+0xb8>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68f9      	ldr	r1, [r7, #12]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f007 fd64 	bl	8011078 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80095b0:	78fb      	ldrb	r3, [r7, #3]
 80095b2:	f003 0307 	and.w	r3, r3, #7
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d108      	bne.n	80095cc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80095c4:	4619      	mov	r1, r3
 80095c6:	4610      	mov	r0, r2
 80095c8:	f007 fea5 	bl	8011316 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b084      	sub	sp, #16
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	460b      	mov	r3, r1
 80095e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80095ea:	78fb      	ldrb	r3, [r7, #3]
 80095ec:	f003 020f 	and.w	r2, r3, #15
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d901      	bls.n	80095fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e040      	b.n	800967e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80095fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009600:	2b00      	cmp	r3, #0
 8009602:	da0e      	bge.n	8009622 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009604:	78fb      	ldrb	r3, [r7, #3]
 8009606:	f003 0307 	and.w	r3, r3, #7
 800960a:	1c5a      	adds	r2, r3, #1
 800960c:	4613      	mov	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	00db      	lsls	r3, r3, #3
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	4413      	add	r3, r2
 8009618:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2201      	movs	r2, #1
 800961e:	705a      	strb	r2, [r3, #1]
 8009620:	e00e      	b.n	8009640 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009622:	78fb      	ldrb	r3, [r7, #3]
 8009624:	f003 0207 	and.w	r2, r3, #7
 8009628:	4613      	mov	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	00db      	lsls	r3, r3, #3
 8009630:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	4413      	add	r3, r2
 8009638:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009646:	78fb      	ldrb	r3, [r7, #3]
 8009648:	f003 0307 	and.w	r3, r3, #7
 800964c:	b2da      	uxtb	r2, r3
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009658:	2b01      	cmp	r3, #1
 800965a:	d101      	bne.n	8009660 <HAL_PCD_EP_ClrStall+0x82>
 800965c:	2302      	movs	r3, #2
 800965e:	e00e      	b.n	800967e <HAL_PCD_EP_ClrStall+0xa0>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68f9      	ldr	r1, [r7, #12]
 800966e:	4618      	mov	r0, r3
 8009670:	f007 fd53 	bl	801111a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b096      	sub	sp, #88	; 0x58
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800968e:	e3b1      	b.n	8009df4 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009698:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800969c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	f003 030f 	and.w	r3, r3, #15
 80096a6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80096aa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f040 8173 	bne.w	800999a <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80096b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80096b8:	f003 0310 	and.w	r3, r3, #16
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d150      	bne.n	8009762 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	881b      	ldrh	r3, [r3, #0]
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80096cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096d0:	81fb      	strh	r3, [r7, #14]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	89fb      	ldrh	r3, [r7, #14]
 80096d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	3328      	adds	r3, #40	; 0x28
 80096e8:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	461a      	mov	r2, r3
 80096f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	4413      	add	r3, r2
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	6812      	ldr	r2, [r2, #0]
 8009702:	4413      	add	r3, r2
 8009704:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800970e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009710:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8009712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009714:	695a      	ldr	r2, [r3, #20]
 8009716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	441a      	add	r2, r3
 800971c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800971e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009720:	2100      	movs	r1, #0
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f00a fda7 	bl	8014276 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 835f 	beq.w	8009df4 <PCD_EP_ISR_Handler+0x76e>
 8009736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	2b00      	cmp	r3, #0
 800973c:	f040 835a 	bne.w	8009df4 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009746:	b2db      	uxtb	r3, r3
 8009748:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800974c:	b2da      	uxtb	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	b292      	uxth	r2, r2
 8009754:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009760:	e348      	b.n	8009df4 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009768:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	881b      	ldrh	r3, [r3, #0]
 8009770:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009774:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800977c:	2b00      	cmp	r3, #0
 800977e:	d032      	beq.n	80097e6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009788:	b29b      	uxth	r3, r3
 800978a:	461a      	mov	r2, r3
 800978c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	00db      	lsls	r3, r3, #3
 8009792:	4413      	add	r3, r2
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	6812      	ldr	r2, [r2, #0]
 8009798:	4413      	add	r3, r2
 800979a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80097a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097a6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6818      	ldr	r0, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80097b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097b4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80097b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097b8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	f007 fdf9 	bl	80113b2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	881b      	ldrh	r3, [r3, #0]
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80097cc:	4013      	ands	r3, r2
 80097ce:	823b      	strh	r3, [r7, #16]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	8a3a      	ldrh	r2, [r7, #16]
 80097d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80097da:	b292      	uxth	r2, r2
 80097dc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f00a fd1c 	bl	801421c <HAL_PCD_SetupStageCallback>
 80097e4:	e306      	b.n	8009df4 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80097e6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f280 8302 	bge.w	8009df4 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	881b      	ldrh	r3, [r3, #0]
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80097fc:	4013      	ands	r3, r2
 80097fe:	83fb      	strh	r3, [r7, #30]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	8bfa      	ldrh	r2, [r7, #30]
 8009806:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800980a:	b292      	uxth	r2, r2
 800980c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009816:	b29b      	uxth	r3, r3
 8009818:	461a      	mov	r2, r3
 800981a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	4413      	add	r3, r2
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	6812      	ldr	r2, [r2, #0]
 8009826:	4413      	add	r3, r2
 8009828:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009834:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d019      	beq.n	8009872 <PCD_EP_ISR_Handler+0x1ec>
 800983e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d015      	beq.n	8009872 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6818      	ldr	r0, [r3, #0]
 800984a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800984c:	6959      	ldr	r1, [r3, #20]
 800984e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009850:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009854:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009856:	b29b      	uxth	r3, r3
 8009858:	f007 fdab 	bl	80113b2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800985c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800985e:	695a      	ldr	r2, [r3, #20]
 8009860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009862:	69db      	ldr	r3, [r3, #28]
 8009864:	441a      	add	r2, r3
 8009866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009868:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800986a:	2100      	movs	r1, #0
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f00a fce7 	bl	8014240 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800987c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009884:	2b00      	cmp	r3, #0
 8009886:	f040 82b5 	bne.w	8009df4 <PCD_EP_ISR_Handler+0x76e>
 800988a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800988e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009892:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009896:	f000 82ad 	beq.w	8009df4 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	61bb      	str	r3, [r7, #24]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	461a      	mov	r2, r3
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	4413      	add	r3, r2
 80098b0:	61bb      	str	r3, [r7, #24]
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098b8:	617b      	str	r3, [r7, #20]
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	b29b      	uxth	r3, r3
 80098c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	801a      	strh	r2, [r3, #0]
 80098ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	2b3e      	cmp	r3, #62	; 0x3e
 80098d0:	d91d      	bls.n	800990e <PCD_EP_ISR_Handler+0x288>
 80098d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	095b      	lsrs	r3, r3, #5
 80098d8:	647b      	str	r3, [r7, #68]	; 0x44
 80098da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	f003 031f 	and.w	r3, r3, #31
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d102      	bne.n	80098ec <PCD_EP_ISR_Handler+0x266>
 80098e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098e8:	3b01      	subs	r3, #1
 80098ea:	647b      	str	r3, [r7, #68]	; 0x44
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	881b      	ldrh	r3, [r3, #0]
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	029b      	lsls	r3, r3, #10
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	4313      	orrs	r3, r2
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009906:	b29a      	uxth	r2, r3
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	801a      	strh	r2, [r3, #0]
 800990c:	e026      	b.n	800995c <PCD_EP_ISR_Handler+0x2d6>
 800990e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10a      	bne.n	800992c <PCD_EP_ISR_Handler+0x2a6>
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	881b      	ldrh	r3, [r3, #0]
 800991a:	b29b      	uxth	r3, r3
 800991c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009924:	b29a      	uxth	r2, r3
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	801a      	strh	r2, [r3, #0]
 800992a:	e017      	b.n	800995c <PCD_EP_ISR_Handler+0x2d6>
 800992c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	085b      	lsrs	r3, r3, #1
 8009932:	647b      	str	r3, [r7, #68]	; 0x44
 8009934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	2b00      	cmp	r3, #0
 800993e:	d002      	beq.n	8009946 <PCD_EP_ISR_Handler+0x2c0>
 8009940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009942:	3301      	adds	r3, #1
 8009944:	647b      	str	r3, [r7, #68]	; 0x44
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	881b      	ldrh	r3, [r3, #0]
 800994a:	b29a      	uxth	r2, r3
 800994c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800994e:	b29b      	uxth	r3, r3
 8009950:	029b      	lsls	r3, r3, #10
 8009952:	b29b      	uxth	r3, r3
 8009954:	4313      	orrs	r3, r2
 8009956:	b29a      	uxth	r2, r3
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	881b      	ldrh	r3, [r3, #0]
 8009962:	b29b      	uxth	r3, r3
 8009964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800996c:	827b      	strh	r3, [r7, #18]
 800996e:	8a7b      	ldrh	r3, [r7, #18]
 8009970:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009974:	827b      	strh	r3, [r7, #18]
 8009976:	8a7b      	ldrh	r3, [r7, #18]
 8009978:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800997c:	827b      	strh	r3, [r7, #18]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	8a7b      	ldrh	r3, [r7, #18]
 8009984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800998c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009994:	b29b      	uxth	r3, r3
 8009996:	8013      	strh	r3, [r2, #0]
 8009998:	e22c      	b.n	8009df4 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	881b      	ldrh	r3, [r3, #0]
 80099aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80099ae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f280 80f6 	bge.w	8009ba4 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	461a      	mov	r2, r3
 80099be:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	4413      	add	r3, r2
 80099c6:	881b      	ldrh	r3, [r3, #0]
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	f640 738f 	movw	r3, #3983	; 0xf8f
 80099ce:	4013      	ands	r3, r2
 80099d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	461a      	mov	r2, r3
 80099da:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80099e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80099ea:	b292      	uxth	r2, r2
 80099ec:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80099ee:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80099f2:	4613      	mov	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4413      	add	r3, r2
 80099f8:	00db      	lsls	r3, r3, #3
 80099fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	4413      	add	r3, r2
 8009a02:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8009a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a06:	7b1b      	ldrb	r3, [r3, #12]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d123      	bne.n	8009a54 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	461a      	mov	r2, r3
 8009a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	00db      	lsls	r3, r3, #3
 8009a1e:	4413      	add	r3, r2
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	6812      	ldr	r2, [r2, #0]
 8009a24:	4413      	add	r3, r2
 8009a26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a2a:	881b      	ldrh	r3, [r3, #0]
 8009a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a30:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8009a34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f000 808e 	beq.w	8009b5a <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6818      	ldr	r0, [r3, #0]
 8009a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a44:	6959      	ldr	r1, [r3, #20]
 8009a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a48:	88da      	ldrh	r2, [r3, #6]
 8009a4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009a4e:	f007 fcb0 	bl	80113b2 <USB_ReadPMA>
 8009a52:	e082      	b.n	8009b5a <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8009a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a56:	78db      	ldrb	r3, [r3, #3]
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d10a      	bne.n	8009a72 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009a5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009a60:	461a      	mov	r2, r3
 8009a62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f9d3 	bl	8009e10 <HAL_PCD_EP_DB_Receive>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8009a70:	e073      	b.n	8009b5a <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	4413      	add	r3, r2
 8009a80:	881b      	ldrh	r3, [r3, #0]
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a8c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	461a      	mov	r2, r3
 8009a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	441a      	add	r2, r3
 8009a9e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d022      	beq.n	8009b16 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	461a      	mov	r2, r3
 8009adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	00db      	lsls	r3, r3, #3
 8009ae2:	4413      	add	r3, r2
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	6812      	ldr	r2, [r2, #0]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009aee:	881b      	ldrh	r3, [r3, #0]
 8009af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009af4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8009af8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d02c      	beq.n	8009b5a <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6818      	ldr	r0, [r3, #0]
 8009b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b06:	6959      	ldr	r1, [r3, #20]
 8009b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b0a:	891a      	ldrh	r2, [r3, #8]
 8009b0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009b10:	f007 fc4f 	bl	80113b2 <USB_ReadPMA>
 8009b14:	e021      	b.n	8009b5a <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	461a      	mov	r2, r3
 8009b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	00db      	lsls	r3, r3, #3
 8009b28:	4413      	add	r3, r2
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	6812      	ldr	r2, [r2, #0]
 8009b2e:	4413      	add	r3, r2
 8009b30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b34:	881b      	ldrh	r3, [r3, #0]
 8009b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b3a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8009b3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d009      	beq.n	8009b5a <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6818      	ldr	r0, [r3, #0]
 8009b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b4c:	6959      	ldr	r1, [r3, #20]
 8009b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b50:	895a      	ldrh	r2, [r3, #10]
 8009b52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009b56:	f007 fc2c 	bl	80113b2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8009b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b5c:	69da      	ldr	r2, [r3, #28]
 8009b5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009b62:	441a      	add	r2, r3
 8009b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b6a:	695a      	ldr	r2, [r3, #20]
 8009b6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009b70:	441a      	add	r2, r3
 8009b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b74:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d005      	beq.n	8009b8a <PCD_EP_ISR_Handler+0x504>
 8009b7e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8009b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d206      	bcs.n	8009b98 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f00a fb55 	bl	8014240 <HAL_PCD_DataOutStageCallback>
 8009b96:	e005      	b.n	8009ba4 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f005 feb9 	bl	800f916 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009ba4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f000 8121 	beq.w	8009df4 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8009bb2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	4613      	mov	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4413      	add	r3, r2
 8009bbe:	00db      	lsls	r3, r3, #3
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	881b      	ldrh	r3, [r3, #0]
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009be0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	461a      	mov	r2, r3
 8009bea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	441a      	add	r2, r3
 8009bf2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8009c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c04:	78db      	ldrb	r3, [r3, #3]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	f040 80a2 	bne.w	8009d50 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8009c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c0e:	2200      	movs	r2, #0
 8009c10:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8009c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c14:	7b1b      	ldrb	r3, [r3, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 8093 	beq.w	8009d42 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009c1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d046      	beq.n	8009cb6 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c2a:	785b      	ldrb	r3, [r3, #1]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d126      	bne.n	8009c7e <PCD_EP_ISR_Handler+0x5f8>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	627b      	str	r3, [r7, #36]	; 0x24
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	461a      	mov	r2, r3
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	4413      	add	r3, r2
 8009c46:	627b      	str	r3, [r7, #36]	; 0x24
 8009c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	00da      	lsls	r2, r3, #3
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	4413      	add	r3, r2
 8009c52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c56:	623b      	str	r3, [r7, #32]
 8009c58:	6a3b      	ldr	r3, [r7, #32]
 8009c5a:	881b      	ldrh	r3, [r3, #0]
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	6a3b      	ldr	r3, [r7, #32]
 8009c66:	801a      	strh	r2, [r3, #0]
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	881b      	ldrh	r3, [r3, #0]
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	6a3b      	ldr	r3, [r7, #32]
 8009c7a:	801a      	strh	r2, [r3, #0]
 8009c7c:	e061      	b.n	8009d42 <PCD_EP_ISR_Handler+0x6bc>
 8009c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c80:	785b      	ldrb	r3, [r3, #1]
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d15d      	bne.n	8009d42 <PCD_EP_ISR_Handler+0x6bc>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	461a      	mov	r2, r3
 8009c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9a:	4413      	add	r3, r2
 8009c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	00da      	lsls	r2, r3, #3
 8009ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	801a      	strh	r2, [r3, #0]
 8009cb4:	e045      	b.n	8009d42 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cbe:	785b      	ldrb	r3, [r3, #1]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d126      	bne.n	8009d12 <PCD_EP_ISR_Handler+0x68c>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd8:	4413      	add	r3, r2
 8009cda:	637b      	str	r3, [r7, #52]	; 0x34
 8009cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	00da      	lsls	r2, r3, #3
 8009ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce4:	4413      	add	r3, r2
 8009ce6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009cea:	633b      	str	r3, [r7, #48]	; 0x30
 8009cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cee:	881b      	ldrh	r3, [r3, #0]
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cf6:	b29a      	uxth	r2, r3
 8009cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfa:	801a      	strh	r2, [r3, #0]
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0e:	801a      	strh	r2, [r3, #0]
 8009d10:	e017      	b.n	8009d42 <PCD_EP_ISR_Handler+0x6bc>
 8009d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d14:	785b      	ldrb	r3, [r3, #1]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d113      	bne.n	8009d42 <PCD_EP_ISR_Handler+0x6bc>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	461a      	mov	r2, r3
 8009d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d28:	4413      	add	r3, r2
 8009d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	00da      	lsls	r2, r3, #3
 8009d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d34:	4413      	add	r3, r2
 8009d36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3e:	2200      	movs	r2, #0
 8009d40:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	4619      	mov	r1, r3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f00a fa94 	bl	8014276 <HAL_PCD_DataInStageCallback>
 8009d4e:	e051      	b.n	8009df4 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8009d50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d144      	bne.n	8009de6 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	461a      	mov	r2, r3
 8009d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	00db      	lsls	r3, r3, #3
 8009d6e:	4413      	add	r3, r2
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	6812      	ldr	r2, [r2, #0]
 8009d74:	4413      	add	r3, r2
 8009d76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d7a:	881b      	ldrh	r3, [r3, #0]
 8009d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d80:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8009d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d86:	699a      	ldr	r2, [r3, #24]
 8009d88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d907      	bls.n	8009da0 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8009d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d92:	699a      	ldr	r2, [r3, #24]
 8009d94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d98:	1ad2      	subs	r2, r2, r3
 8009d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d9c:	619a      	str	r2, [r3, #24]
 8009d9e:	e002      	b.n	8009da6 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8009da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009da2:	2200      	movs	r2, #0
 8009da4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8009da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d106      	bne.n	8009dbc <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	4619      	mov	r1, r3
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f00a fa5e 	bl	8014276 <HAL_PCD_DataInStageCallback>
 8009dba:	e01b      	b.n	8009df4 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dbe:	695a      	ldr	r2, [r3, #20]
 8009dc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009dc4:	441a      	add	r2, r3
 8009dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dc8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dcc:	69da      	ldr	r2, [r3, #28]
 8009dce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009dd2:	441a      	add	r2, r3
 8009dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dd6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009dde:	4618      	mov	r0, r3
 8009de0:	f005 fd99 	bl	800f916 <USB_EPStartXfer>
 8009de4:	e006      	b.n	8009df4 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009de6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009dea:	461a      	mov	r2, r3
 8009dec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f917 	bl	800a022 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	b21b      	sxth	r3, r3
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f6ff ac45 	blt.w	8009690 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3758      	adds	r7, #88	; 0x58
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b088      	sub	sp, #32
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009e1e:	88fb      	ldrh	r3, [r7, #6]
 8009e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d07c      	beq.n	8009f22 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	461a      	mov	r2, r3
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	00db      	lsls	r3, r3, #3
 8009e3a:	4413      	add	r3, r2
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	6812      	ldr	r2, [r2, #0]
 8009e40:	4413      	add	r3, r2
 8009e42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e46:	881b      	ldrh	r3, [r3, #0]
 8009e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e4c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	699a      	ldr	r2, [r3, #24]
 8009e52:	8b7b      	ldrh	r3, [r7, #26]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d306      	bcc.n	8009e66 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	699a      	ldr	r2, [r3, #24]
 8009e5c:	8b7b      	ldrh	r3, [r7, #26]
 8009e5e:	1ad2      	subs	r2, r2, r3
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	619a      	str	r2, [r3, #24]
 8009e64:	e002      	b.n	8009e6c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d123      	bne.n	8009ebc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4413      	add	r3, r2
 8009e82:	881b      	ldrh	r3, [r3, #0]
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e8e:	833b      	strh	r3, [r7, #24]
 8009e90:	8b3b      	ldrh	r3, [r7, #24]
 8009e92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e96:	833b      	strh	r3, [r7, #24]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	441a      	add	r2, r3
 8009ea6:	8b3b      	ldrh	r3, [r7, #24]
 8009ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009ebc:	88fb      	ldrh	r3, [r7, #6]
 8009ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d01f      	beq.n	8009f06 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ee0:	82fb      	strh	r3, [r7, #22]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	441a      	add	r2, r3
 8009ef0:	8afb      	ldrh	r3, [r7, #22]
 8009ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009efe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009f06:	8b7b      	ldrh	r3, [r7, #26]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 8085 	beq.w	800a018 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6818      	ldr	r0, [r3, #0]
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	6959      	ldr	r1, [r3, #20]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	891a      	ldrh	r2, [r3, #8]
 8009f1a:	8b7b      	ldrh	r3, [r7, #26]
 8009f1c:	f007 fa49 	bl	80113b2 <USB_ReadPMA>
 8009f20:	e07a      	b.n	800a018 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	00db      	lsls	r3, r3, #3
 8009f34:	4413      	add	r3, r2
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	6812      	ldr	r2, [r2, #0]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f40:	881b      	ldrh	r3, [r3, #0]
 8009f42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f46:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	699a      	ldr	r2, [r3, #24]
 8009f4c:	8b7b      	ldrh	r3, [r7, #26]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d306      	bcc.n	8009f60 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	699a      	ldr	r2, [r3, #24]
 8009f56:	8b7b      	ldrh	r3, [r7, #26]
 8009f58:	1ad2      	subs	r2, r2, r3
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	619a      	str	r2, [r3, #24]
 8009f5e:	e002      	b.n	8009f66 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	2200      	movs	r2, #0
 8009f64:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	699b      	ldr	r3, [r3, #24]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d123      	bne.n	8009fb6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	461a      	mov	r2, r3
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4413      	add	r3, r2
 8009f7c:	881b      	ldrh	r3, [r3, #0]
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f88:	83fb      	strh	r3, [r7, #30]
 8009f8a:	8bfb      	ldrh	r3, [r7, #30]
 8009f8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009f90:	83fb      	strh	r3, [r7, #30]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	441a      	add	r2, r3
 8009fa0:	8bfb      	ldrh	r3, [r7, #30]
 8009fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009fb6:	88fb      	ldrh	r3, [r7, #6]
 8009fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d11f      	bne.n	800a000 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	4413      	add	r3, r2
 8009fce:	881b      	ldrh	r3, [r3, #0]
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fda:	83bb      	strh	r3, [r7, #28]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	441a      	add	r2, r3
 8009fea:	8bbb      	ldrh	r3, [r7, #28]
 8009fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ff8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a000:	8b7b      	ldrh	r3, [r7, #26]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d008      	beq.n	800a018 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6818      	ldr	r0, [r3, #0]
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	6959      	ldr	r1, [r3, #20]
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	895a      	ldrh	r2, [r3, #10]
 800a012:	8b7b      	ldrh	r3, [r7, #26]
 800a014:	f007 f9cd 	bl	80113b2 <USB_ReadPMA>
    }
  }

  return count;
 800a018:	8b7b      	ldrh	r3, [r7, #26]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3720      	adds	r7, #32
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b0a4      	sub	sp, #144	; 0x90
 800a026:	af00      	add	r7, sp, #0
 800a028:	60f8      	str	r0, [r7, #12]
 800a02a:	60b9      	str	r1, [r7, #8]
 800a02c:	4613      	mov	r3, r2
 800a02e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a030:	88fb      	ldrh	r3, [r7, #6]
 800a032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a036:	2b00      	cmp	r3, #0
 800a038:	f000 81db 	beq.w	800a3f2 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a044:	b29b      	uxth	r3, r3
 800a046:	461a      	mov	r2, r3
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	00db      	lsls	r3, r3, #3
 800a04e:	4413      	add	r3, r2
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	6812      	ldr	r2, [r2, #0]
 800a054:	4413      	add	r3, r2
 800a056:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a05a:	881b      	ldrh	r3, [r3, #0]
 800a05c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a060:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	699a      	ldr	r2, [r3, #24]
 800a068:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d907      	bls.n	800a080 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	699a      	ldr	r2, [r3, #24]
 800a074:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a078:	1ad2      	subs	r2, r2, r3
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	619a      	str	r2, [r3, #24]
 800a07e:	e002      	b.n	800a086 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	2200      	movs	r2, #0
 800a084:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f040 80b9 	bne.w	800a202 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	785b      	ldrb	r3, [r3, #1]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d126      	bne.n	800a0e6 <HAL_PCD_EP_DB_Transmit+0xc4>
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ac:	4413      	add	r3, r2
 800a0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	00da      	lsls	r2, r3, #3
 800a0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b8:	4413      	add	r3, r2
 800a0ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a0be:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c2:	881b      	ldrh	r3, [r3, #0]
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ce:	801a      	strh	r2, [r3, #0]
 800a0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d2:	881b      	ldrh	r3, [r3, #0]
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	801a      	strh	r2, [r3, #0]
 800a0e4:	e01a      	b.n	800a11c <HAL_PCD_EP_DB_Transmit+0xfa>
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	785b      	ldrb	r3, [r3, #1]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d116      	bne.n	800a11c <HAL_PCD_EP_DB_Transmit+0xfa>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	637b      	str	r3, [r7, #52]	; 0x34
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	461a      	mov	r2, r3
 800a100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a102:	4413      	add	r3, r2
 800a104:	637b      	str	r3, [r7, #52]	; 0x34
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	00da      	lsls	r2, r3, #3
 800a10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a10e:	4413      	add	r3, r2
 800a110:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a114:	633b      	str	r3, [r7, #48]	; 0x30
 800a116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a118:	2200      	movs	r2, #0
 800a11a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	627b      	str	r3, [r7, #36]	; 0x24
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	785b      	ldrb	r3, [r3, #1]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d126      	bne.n	800a178 <HAL_PCD_EP_DB_Transmit+0x156>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	61fb      	str	r3, [r7, #28]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a138:	b29b      	uxth	r3, r3
 800a13a:	461a      	mov	r2, r3
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	4413      	add	r3, r2
 800a140:	61fb      	str	r3, [r7, #28]
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	00da      	lsls	r2, r3, #3
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	4413      	add	r3, r2
 800a14c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a150:	61bb      	str	r3, [r7, #24]
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	881b      	ldrh	r3, [r3, #0]
 800a156:	b29b      	uxth	r3, r3
 800a158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	801a      	strh	r2, [r3, #0]
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	881b      	ldrh	r3, [r3, #0]
 800a166:	b29b      	uxth	r3, r3
 800a168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a16c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a170:	b29a      	uxth	r2, r3
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	801a      	strh	r2, [r3, #0]
 800a176:	e017      	b.n	800a1a8 <HAL_PCD_EP_DB_Transmit+0x186>
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	785b      	ldrb	r3, [r3, #1]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d113      	bne.n	800a1a8 <HAL_PCD_EP_DB_Transmit+0x186>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a188:	b29b      	uxth	r3, r3
 800a18a:	461a      	mov	r2, r3
 800a18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18e:	4413      	add	r3, r2
 800a190:	627b      	str	r3, [r7, #36]	; 0x24
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	00da      	lsls	r2, r3, #3
 800a198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19a:	4413      	add	r3, r2
 800a19c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a1a0:	623b      	str	r3, [r7, #32]
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f00a f861 	bl	8014276 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a1b4:	88fb      	ldrh	r3, [r7, #6]
 800a1b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 82fa 	beq.w	800a7b4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	4413      	add	r3, r2
 800a1ce:	881b      	ldrh	r3, [r3, #0]
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1da:	82fb      	strh	r3, [r7, #22]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	441a      	add	r2, r3
 800a1ea:	8afb      	ldrh	r3, [r7, #22]
 800a1ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	8013      	strh	r3, [r2, #0]
 800a200:	e2d8      	b.n	800a7b4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a202:	88fb      	ldrh	r3, [r7, #6]
 800a204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d021      	beq.n	800a250 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	461a      	mov	r2, r3
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4413      	add	r3, r2
 800a21a:	881b      	ldrh	r3, [r3, #0]
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a226:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	441a      	add	r2, r3
 800a238:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a23c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a244:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a256:	2b01      	cmp	r3, #1
 800a258:	f040 82ac 	bne.w	800a7b4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	695a      	ldr	r2, [r3, #20]
 800a260:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a264:	441a      	add	r2, r3
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	69da      	ldr	r2, [r3, #28]
 800a26e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a272:	441a      	add	r2, r3
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	6a1a      	ldr	r2, [r3, #32]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	429a      	cmp	r2, r3
 800a282:	d30b      	bcc.n	800a29c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	6a1a      	ldr	r2, [r3, #32]
 800a290:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a294:	1ad2      	subs	r2, r2, r3
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	621a      	str	r2, [r3, #32]
 800a29a:	e017      	b.n	800a2cc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	6a1b      	ldr	r3, [r3, #32]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d108      	bne.n	800a2b6 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800a2a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a2a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a2b4:	e00a      	b.n	800a2cc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	785b      	ldrb	r3, [r3, #1]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d165      	bne.n	800a3a0 <HAL_PCD_EP_DB_Transmit+0x37e>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e8:	4413      	add	r3, r2
 800a2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	00da      	lsls	r2, r3, #3
 800a2f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a2fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	881b      	ldrh	r3, [r3, #0]
 800a300:	b29b      	uxth	r3, r3
 800a302:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a306:	b29a      	uxth	r2, r3
 800a308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30a:	801a      	strh	r2, [r3, #0]
 800a30c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a310:	2b3e      	cmp	r3, #62	; 0x3e
 800a312:	d91d      	bls.n	800a350 <HAL_PCD_EP_DB_Transmit+0x32e>
 800a314:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a318:	095b      	lsrs	r3, r3, #5
 800a31a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a31c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a320:	f003 031f 	and.w	r3, r3, #31
 800a324:	2b00      	cmp	r3, #0
 800a326:	d102      	bne.n	800a32e <HAL_PCD_EP_DB_Transmit+0x30c>
 800a328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a32a:	3b01      	subs	r3, #1
 800a32c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a330:	881b      	ldrh	r3, [r3, #0]
 800a332:	b29a      	uxth	r2, r3
 800a334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a336:	b29b      	uxth	r3, r3
 800a338:	029b      	lsls	r3, r3, #10
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	4313      	orrs	r3, r2
 800a33e:	b29b      	uxth	r3, r3
 800a340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a348:	b29a      	uxth	r2, r3
 800a34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34c:	801a      	strh	r2, [r3, #0]
 800a34e:	e044      	b.n	800a3da <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a350:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10a      	bne.n	800a36e <HAL_PCD_EP_DB_Transmit+0x34c>
 800a358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35a:	881b      	ldrh	r3, [r3, #0]
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a366:	b29a      	uxth	r2, r3
 800a368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36a:	801a      	strh	r2, [r3, #0]
 800a36c:	e035      	b.n	800a3da <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a36e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a372:	085b      	lsrs	r3, r3, #1
 800a374:	64bb      	str	r3, [r7, #72]	; 0x48
 800a376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a37a:	f003 0301 	and.w	r3, r3, #1
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d002      	beq.n	800a388 <HAL_PCD_EP_DB_Transmit+0x366>
 800a382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a384:	3301      	adds	r3, #1
 800a386:	64bb      	str	r3, [r7, #72]	; 0x48
 800a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38a:	881b      	ldrh	r3, [r3, #0]
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a390:	b29b      	uxth	r3, r3
 800a392:	029b      	lsls	r3, r3, #10
 800a394:	b29b      	uxth	r3, r3
 800a396:	4313      	orrs	r3, r2
 800a398:	b29a      	uxth	r2, r3
 800a39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39c:	801a      	strh	r2, [r3, #0]
 800a39e:	e01c      	b.n	800a3da <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	785b      	ldrb	r3, [r3, #1]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d118      	bne.n	800a3da <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	647b      	str	r3, [r7, #68]	; 0x44
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3bc:	4413      	add	r3, r2
 800a3be:	647b      	str	r3, [r7, #68]	; 0x44
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	00da      	lsls	r2, r3, #3
 800a3c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3c8:	4413      	add	r3, r2
 800a3ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a3ce:	643b      	str	r3, [r7, #64]	; 0x40
 800a3d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3d8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6818      	ldr	r0, [r3, #0]
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	6959      	ldr	r1, [r3, #20]
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	891a      	ldrh	r2, [r3, #8]
 800a3e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	f006 ff9f 	bl	801132e <USB_WritePMA>
 800a3f0:	e1e0      	b.n	800a7b4 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	00db      	lsls	r3, r3, #3
 800a404:	4413      	add	r3, r2
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	6812      	ldr	r2, [r2, #0]
 800a40a:	4413      	add	r3, r2
 800a40c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a416:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	699a      	ldr	r2, [r3, #24]
 800a41e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a422:	429a      	cmp	r2, r3
 800a424:	d307      	bcc.n	800a436 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	699a      	ldr	r2, [r3, #24]
 800a42a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a42e:	1ad2      	subs	r2, r2, r3
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	619a      	str	r2, [r3, #24]
 800a434:	e002      	b.n	800a43c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	2200      	movs	r2, #0
 800a43a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	699b      	ldr	r3, [r3, #24]
 800a440:	2b00      	cmp	r3, #0
 800a442:	f040 80c0 	bne.w	800a5c6 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	785b      	ldrb	r3, [r3, #1]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d126      	bne.n	800a49c <HAL_PCD_EP_DB_Transmit+0x47a>
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	461a      	mov	r2, r3
 800a460:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a462:	4413      	add	r3, r2
 800a464:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	00da      	lsls	r2, r3, #3
 800a46c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a46e:	4413      	add	r3, r2
 800a470:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a474:	67bb      	str	r3, [r7, #120]	; 0x78
 800a476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a478:	881b      	ldrh	r3, [r3, #0]
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a480:	b29a      	uxth	r2, r3
 800a482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a484:	801a      	strh	r2, [r3, #0]
 800a486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a488:	881b      	ldrh	r3, [r3, #0]
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a494:	b29a      	uxth	r2, r3
 800a496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a498:	801a      	strh	r2, [r3, #0]
 800a49a:	e01a      	b.n	800a4d2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	785b      	ldrb	r3, [r3, #1]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d116      	bne.n	800a4d2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	667b      	str	r3, [r7, #100]	; 0x64
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4b8:	4413      	add	r3, r2
 800a4ba:	667b      	str	r3, [r7, #100]	; 0x64
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	00da      	lsls	r2, r3, #3
 800a4c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4ca:	663b      	str	r3, [r7, #96]	; 0x60
 800a4cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	677b      	str	r3, [r7, #116]	; 0x74
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	785b      	ldrb	r3, [r3, #1]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d12b      	bne.n	800a538 <HAL_PCD_EP_DB_Transmit+0x516>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4f4:	4413      	add	r3, r2
 800a4f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	00da      	lsls	r2, r3, #3
 800a4fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a500:	4413      	add	r3, r2
 800a502:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a506:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a50a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a50e:	881b      	ldrh	r3, [r3, #0]
 800a510:	b29b      	uxth	r3, r3
 800a512:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a516:	b29a      	uxth	r2, r3
 800a518:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a51c:	801a      	strh	r2, [r3, #0]
 800a51e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a522:	881b      	ldrh	r3, [r3, #0]
 800a524:	b29b      	uxth	r3, r3
 800a526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a52a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a52e:	b29a      	uxth	r2, r3
 800a530:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a534:	801a      	strh	r2, [r3, #0]
 800a536:	e017      	b.n	800a568 <HAL_PCD_EP_DB_Transmit+0x546>
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	785b      	ldrb	r3, [r3, #1]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d113      	bne.n	800a568 <HAL_PCD_EP_DB_Transmit+0x546>
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a548:	b29b      	uxth	r3, r3
 800a54a:	461a      	mov	r2, r3
 800a54c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a54e:	4413      	add	r3, r2
 800a550:	677b      	str	r3, [r7, #116]	; 0x74
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	00da      	lsls	r2, r3, #3
 800a558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a55a:	4413      	add	r3, r2
 800a55c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a560:	673b      	str	r3, [r7, #112]	; 0x70
 800a562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a564:	2200      	movs	r2, #0
 800a566:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	4619      	mov	r1, r3
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f009 fe81 	bl	8014276 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a574:	88fb      	ldrh	r3, [r7, #6]
 800a576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f040 811a 	bne.w	800a7b4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	461a      	mov	r2, r3
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	881b      	ldrh	r3, [r3, #0]
 800a590:	b29b      	uxth	r3, r3
 800a592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a59a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	441a      	add	r2, r3
 800a5ac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800a5b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	8013      	strh	r3, [r2, #0]
 800a5c4:	e0f6      	b.n	800a7b4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a5c6:	88fb      	ldrh	r3, [r7, #6]
 800a5c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d121      	bne.n	800a614 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4413      	add	r3, r2
 800a5de:	881b      	ldrh	r3, [r3, #0]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	441a      	add	r2, r3
 800a5fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a608:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a610:	b29b      	uxth	r3, r3
 800a612:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	f040 80ca 	bne.w	800a7b4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	695a      	ldr	r2, [r3, #20]
 800a624:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a628:	441a      	add	r2, r3
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	69da      	ldr	r2, [r3, #28]
 800a632:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a636:	441a      	add	r2, r3
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	6a1a      	ldr	r2, [r3, #32]
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	429a      	cmp	r2, r3
 800a646:	d30b      	bcc.n	800a660 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	6a1a      	ldr	r2, [r3, #32]
 800a654:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a658:	1ad2      	subs	r2, r2, r3
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	621a      	str	r2, [r3, #32]
 800a65e:	e017      	b.n	800a690 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	6a1b      	ldr	r3, [r3, #32]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d108      	bne.n	800a67a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800a668:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a66c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	2200      	movs	r2, #0
 800a674:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a678:	e00a      	b.n	800a690 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	6a1b      	ldr	r3, [r3, #32]
 800a67e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	2200      	movs	r2, #0
 800a686:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	657b      	str	r3, [r7, #84]	; 0x54
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	785b      	ldrb	r3, [r3, #1]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d165      	bne.n	800a76a <HAL_PCD_EP_DB_Transmit+0x748>
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6b2:	4413      	add	r3, r2
 800a6b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	00da      	lsls	r2, r3, #3
 800a6bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6be:	4413      	add	r3, r2
 800a6c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a6c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6c8:	881b      	ldrh	r3, [r3, #0]
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6d4:	801a      	strh	r2, [r3, #0]
 800a6d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6da:	2b3e      	cmp	r3, #62	; 0x3e
 800a6dc:	d91d      	bls.n	800a71a <HAL_PCD_EP_DB_Transmit+0x6f8>
 800a6de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6e2:	095b      	lsrs	r3, r3, #5
 800a6e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6ea:	f003 031f 	and.w	r3, r3, #31
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d102      	bne.n	800a6f8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800a6f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6fa:	881b      	ldrh	r3, [r3, #0]
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a700:	b29b      	uxth	r3, r3
 800a702:	029b      	lsls	r3, r3, #10
 800a704:	b29b      	uxth	r3, r3
 800a706:	4313      	orrs	r3, r2
 800a708:	b29b      	uxth	r3, r3
 800a70a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a70e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a712:	b29a      	uxth	r2, r3
 800a714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a716:	801a      	strh	r2, [r3, #0]
 800a718:	e041      	b.n	800a79e <HAL_PCD_EP_DB_Transmit+0x77c>
 800a71a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d10a      	bne.n	800a738 <HAL_PCD_EP_DB_Transmit+0x716>
 800a722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	b29b      	uxth	r3, r3
 800a728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a72c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a730:	b29a      	uxth	r2, r3
 800a732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a734:	801a      	strh	r2, [r3, #0]
 800a736:	e032      	b.n	800a79e <HAL_PCD_EP_DB_Transmit+0x77c>
 800a738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a73c:	085b      	lsrs	r3, r3, #1
 800a73e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a744:	f003 0301 	and.w	r3, r3, #1
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d002      	beq.n	800a752 <HAL_PCD_EP_DB_Transmit+0x730>
 800a74c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a74e:	3301      	adds	r3, #1
 800a750:	66bb      	str	r3, [r7, #104]	; 0x68
 800a752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a754:	881b      	ldrh	r3, [r3, #0]
 800a756:	b29a      	uxth	r2, r3
 800a758:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	029b      	lsls	r3, r3, #10
 800a75e:	b29b      	uxth	r3, r3
 800a760:	4313      	orrs	r3, r2
 800a762:	b29a      	uxth	r2, r3
 800a764:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a766:	801a      	strh	r2, [r3, #0]
 800a768:	e019      	b.n	800a79e <HAL_PCD_EP_DB_Transmit+0x77c>
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	785b      	ldrb	r3, [r3, #1]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d115      	bne.n	800a79e <HAL_PCD_EP_DB_Transmit+0x77c>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	461a      	mov	r2, r3
 800a77e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a780:	4413      	add	r3, r2
 800a782:	657b      	str	r3, [r7, #84]	; 0x54
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	00da      	lsls	r2, r3, #3
 800a78a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a78c:	4413      	add	r3, r2
 800a78e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a792:	653b      	str	r3, [r7, #80]	; 0x50
 800a794:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a798:	b29a      	uxth	r2, r3
 800a79a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a79c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6818      	ldr	r0, [r3, #0]
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	6959      	ldr	r1, [r3, #20]
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	895a      	ldrh	r2, [r3, #10]
 800a7aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	f006 fdbd 	bl	801132e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	881b      	ldrh	r3, [r3, #0]
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7ce:	82bb      	strh	r3, [r7, #20]
 800a7d0:	8abb      	ldrh	r3, [r7, #20]
 800a7d2:	f083 0310 	eor.w	r3, r3, #16
 800a7d6:	82bb      	strh	r3, [r7, #20]
 800a7d8:	8abb      	ldrh	r3, [r7, #20]
 800a7da:	f083 0320 	eor.w	r3, r3, #32
 800a7de:	82bb      	strh	r3, [r7, #20]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	441a      	add	r2, r3
 800a7ee:	8abb      	ldrh	r3, [r7, #20]
 800a7f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a800:	b29b      	uxth	r3, r3
 800a802:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3790      	adds	r7, #144	; 0x90
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a80e:	b480      	push	{r7}
 800a810:	b087      	sub	sp, #28
 800a812:	af00      	add	r7, sp, #0
 800a814:	60f8      	str	r0, [r7, #12]
 800a816:	607b      	str	r3, [r7, #4]
 800a818:	460b      	mov	r3, r1
 800a81a:	817b      	strh	r3, [r7, #10]
 800a81c:	4613      	mov	r3, r2
 800a81e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a820:	897b      	ldrh	r3, [r7, #10]
 800a822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a826:	b29b      	uxth	r3, r3
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d00b      	beq.n	800a844 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a82c:	897b      	ldrh	r3, [r7, #10]
 800a82e:	f003 0307 	and.w	r3, r3, #7
 800a832:	1c5a      	adds	r2, r3, #1
 800a834:	4613      	mov	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4413      	add	r3, r2
 800a83a:	00db      	lsls	r3, r3, #3
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	4413      	add	r3, r2
 800a840:	617b      	str	r3, [r7, #20]
 800a842:	e009      	b.n	800a858 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a844:	897a      	ldrh	r2, [r7, #10]
 800a846:	4613      	mov	r3, r2
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	4413      	add	r3, r2
 800a84c:	00db      	lsls	r3, r3, #3
 800a84e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	4413      	add	r3, r2
 800a856:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a858:	893b      	ldrh	r3, [r7, #8]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d107      	bne.n	800a86e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	2200      	movs	r2, #0
 800a862:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	b29a      	uxth	r2, r3
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	80da      	strh	r2, [r3, #6]
 800a86c:	e00b      	b.n	800a886 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	2201      	movs	r2, #1
 800a872:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	b29a      	uxth	r2, r3
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	0c1b      	lsrs	r3, r3, #16
 800a880:	b29a      	uxth	r2, r3
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	371c      	adds	r7, #28
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	f043 0301 	orr.w	r3, r3, #1
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	f043 0302 	orr.w	r3, r3, #2
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a8ec:	4b04      	ldr	r3, [pc, #16]	; (800a900 <HAL_PWREx_GetVoltageRange+0x18>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	40007000 	.word	0x40007000

0800a904 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a912:	d130      	bne.n	800a976 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a914:	4b23      	ldr	r3, [pc, #140]	; (800a9a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a91c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a920:	d038      	beq.n	800a994 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a922:	4b20      	ldr	r3, [pc, #128]	; (800a9a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a92a:	4a1e      	ldr	r2, [pc, #120]	; (800a9a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a92c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a930:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a932:	4b1d      	ldr	r3, [pc, #116]	; (800a9a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2232      	movs	r2, #50	; 0x32
 800a938:	fb02 f303 	mul.w	r3, r2, r3
 800a93c:	4a1b      	ldr	r2, [pc, #108]	; (800a9ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a93e:	fba2 2303 	umull	r2, r3, r2, r3
 800a942:	0c9b      	lsrs	r3, r3, #18
 800a944:	3301      	adds	r3, #1
 800a946:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a948:	e002      	b.n	800a950 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	3b01      	subs	r3, #1
 800a94e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a950:	4b14      	ldr	r3, [pc, #80]	; (800a9a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a952:	695b      	ldr	r3, [r3, #20]
 800a954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a95c:	d102      	bne.n	800a964 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1f2      	bne.n	800a94a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a964:	4b0f      	ldr	r3, [pc, #60]	; (800a9a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a966:	695b      	ldr	r3, [r3, #20]
 800a968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a96c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a970:	d110      	bne.n	800a994 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a972:	2303      	movs	r3, #3
 800a974:	e00f      	b.n	800a996 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a976:	4b0b      	ldr	r3, [pc, #44]	; (800a9a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a97e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a982:	d007      	beq.n	800a994 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a984:	4b07      	ldr	r3, [pc, #28]	; (800a9a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a98c:	4a05      	ldr	r2, [pc, #20]	; (800a9a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a98e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a992:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	40007000 	.word	0x40007000
 800a9a8:	20000024 	.word	0x20000024
 800a9ac:	431bde83 	.word	0x431bde83

0800a9b0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800a9b4:	4b05      	ldr	r3, [pc, #20]	; (800a9cc <HAL_PWREx_EnableVddUSB+0x1c>)
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	4a04      	ldr	r2, [pc, #16]	; (800a9cc <HAL_PWREx_EnableVddUSB+0x1c>)
 800a9ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a9be:	6053      	str	r3, [r2, #4]
}
 800a9c0:	bf00      	nop
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	40007000 	.word	0x40007000

0800a9d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b088      	sub	sp, #32
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d102      	bne.n	800a9e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	f000 bc02 	b.w	800b1e8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a9e4:	4b96      	ldr	r3, [pc, #600]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	f003 030c 	and.w	r3, r3, #12
 800a9ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a9ee:	4b94      	ldr	r3, [pc, #592]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	f003 0303 	and.w	r3, r3, #3
 800a9f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f003 0310 	and.w	r3, r3, #16
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f000 80e4 	beq.w	800abce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d007      	beq.n	800aa1c <HAL_RCC_OscConfig+0x4c>
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	2b0c      	cmp	r3, #12
 800aa10:	f040 808b 	bne.w	800ab2a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	f040 8087 	bne.w	800ab2a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800aa1c:	4b88      	ldr	r3, [pc, #544]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0302 	and.w	r3, r3, #2
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d005      	beq.n	800aa34 <HAL_RCC_OscConfig+0x64>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d101      	bne.n	800aa34 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e3d9      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a1a      	ldr	r2, [r3, #32]
 800aa38:	4b81      	ldr	r3, [pc, #516]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 0308 	and.w	r3, r3, #8
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d004      	beq.n	800aa4e <HAL_RCC_OscConfig+0x7e>
 800aa44:	4b7e      	ldr	r3, [pc, #504]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa4c:	e005      	b.n	800aa5a <HAL_RCC_OscConfig+0x8a>
 800aa4e:	4b7c      	ldr	r3, [pc, #496]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800aa50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa54:	091b      	lsrs	r3, r3, #4
 800aa56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d223      	bcs.n	800aaa6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6a1b      	ldr	r3, [r3, #32]
 800aa62:	4618      	mov	r0, r3
 800aa64:	f000 fd8c 	bl	800b580 <RCC_SetFlashLatencyFromMSIRange>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d001      	beq.n	800aa72 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e3ba      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aa72:	4b73      	ldr	r3, [pc, #460]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a72      	ldr	r2, [pc, #456]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800aa78:	f043 0308 	orr.w	r3, r3, #8
 800aa7c:	6013      	str	r3, [r2, #0]
 800aa7e:	4b70      	ldr	r3, [pc, #448]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	496d      	ldr	r1, [pc, #436]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aa90:	4b6b      	ldr	r3, [pc, #428]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	69db      	ldr	r3, [r3, #28]
 800aa9c:	021b      	lsls	r3, r3, #8
 800aa9e:	4968      	ldr	r1, [pc, #416]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	604b      	str	r3, [r1, #4]
 800aaa4:	e025      	b.n	800aaf2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aaa6:	4b66      	ldr	r3, [pc, #408]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a65      	ldr	r2, [pc, #404]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800aaac:	f043 0308 	orr.w	r3, r3, #8
 800aab0:	6013      	str	r3, [r2, #0]
 800aab2:	4b63      	ldr	r3, [pc, #396]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a1b      	ldr	r3, [r3, #32]
 800aabe:	4960      	ldr	r1, [pc, #384]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800aac0:	4313      	orrs	r3, r2
 800aac2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aac4:	4b5e      	ldr	r3, [pc, #376]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	69db      	ldr	r3, [r3, #28]
 800aad0:	021b      	lsls	r3, r3, #8
 800aad2:	495b      	ldr	r1, [pc, #364]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800aad4:	4313      	orrs	r3, r2
 800aad6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d109      	bne.n	800aaf2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 fd4c 	bl	800b580 <RCC_SetFlashLatencyFromMSIRange>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e37a      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aaf2:	f000 fc81 	bl	800b3f8 <HAL_RCC_GetSysClockFreq>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	4b51      	ldr	r3, [pc, #324]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	091b      	lsrs	r3, r3, #4
 800aafe:	f003 030f 	and.w	r3, r3, #15
 800ab02:	4950      	ldr	r1, [pc, #320]	; (800ac44 <HAL_RCC_OscConfig+0x274>)
 800ab04:	5ccb      	ldrb	r3, [r1, r3]
 800ab06:	f003 031f 	and.w	r3, r3, #31
 800ab0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab0e:	4a4e      	ldr	r2, [pc, #312]	; (800ac48 <HAL_RCC_OscConfig+0x278>)
 800ab10:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ab12:	4b4e      	ldr	r3, [pc, #312]	; (800ac4c <HAL_RCC_OscConfig+0x27c>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fb fc36 	bl	8006388 <HAL_InitTick>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800ab20:	7bfb      	ldrb	r3, [r7, #15]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d052      	beq.n	800abcc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800ab26:	7bfb      	ldrb	r3, [r7, #15]
 800ab28:	e35e      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	699b      	ldr	r3, [r3, #24]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d032      	beq.n	800ab98 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ab32:	4b43      	ldr	r3, [pc, #268]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a42      	ldr	r2, [pc, #264]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800ab38:	f043 0301 	orr.w	r3, r3, #1
 800ab3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ab3e:	f7fb fc73 	bl	8006428 <HAL_GetTick>
 800ab42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ab44:	e008      	b.n	800ab58 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ab46:	f7fb fc6f 	bl	8006428 <HAL_GetTick>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d901      	bls.n	800ab58 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800ab54:	2303      	movs	r3, #3
 800ab56:	e347      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ab58:	4b39      	ldr	r3, [pc, #228]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f003 0302 	and.w	r3, r3, #2
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d0f0      	beq.n	800ab46 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ab64:	4b36      	ldr	r3, [pc, #216]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a35      	ldr	r2, [pc, #212]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800ab6a:	f043 0308 	orr.w	r3, r3, #8
 800ab6e:	6013      	str	r3, [r2, #0]
 800ab70:	4b33      	ldr	r3, [pc, #204]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a1b      	ldr	r3, [r3, #32]
 800ab7c:	4930      	ldr	r1, [pc, #192]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ab82:	4b2f      	ldr	r3, [pc, #188]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	69db      	ldr	r3, [r3, #28]
 800ab8e:	021b      	lsls	r3, r3, #8
 800ab90:	492b      	ldr	r1, [pc, #172]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800ab92:	4313      	orrs	r3, r2
 800ab94:	604b      	str	r3, [r1, #4]
 800ab96:	e01a      	b.n	800abce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ab98:	4b29      	ldr	r3, [pc, #164]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a28      	ldr	r2, [pc, #160]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800ab9e:	f023 0301 	bic.w	r3, r3, #1
 800aba2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800aba4:	f7fb fc40 	bl	8006428 <HAL_GetTick>
 800aba8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800abaa:	e008      	b.n	800abbe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800abac:	f7fb fc3c 	bl	8006428 <HAL_GetTick>
 800abb0:	4602      	mov	r2, r0
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d901      	bls.n	800abbe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800abba:	2303      	movs	r3, #3
 800abbc:	e314      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800abbe:	4b20      	ldr	r3, [pc, #128]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 0302 	and.w	r3, r3, #2
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1f0      	bne.n	800abac <HAL_RCC_OscConfig+0x1dc>
 800abca:	e000      	b.n	800abce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800abcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f003 0301 	and.w	r3, r3, #1
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d073      	beq.n	800acc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	2b08      	cmp	r3, #8
 800abde:	d005      	beq.n	800abec <HAL_RCC_OscConfig+0x21c>
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	2b0c      	cmp	r3, #12
 800abe4:	d10e      	bne.n	800ac04 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	2b03      	cmp	r3, #3
 800abea:	d10b      	bne.n	800ac04 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800abec:	4b14      	ldr	r3, [pc, #80]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d063      	beq.n	800acc0 <HAL_RCC_OscConfig+0x2f0>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d15f      	bne.n	800acc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800ac00:	2301      	movs	r3, #1
 800ac02:	e2f1      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac0c:	d106      	bne.n	800ac1c <HAL_RCC_OscConfig+0x24c>
 800ac0e:	4b0c      	ldr	r3, [pc, #48]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a0b      	ldr	r2, [pc, #44]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800ac14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac18:	6013      	str	r3, [r2, #0]
 800ac1a:	e025      	b.n	800ac68 <HAL_RCC_OscConfig+0x298>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac24:	d114      	bne.n	800ac50 <HAL_RCC_OscConfig+0x280>
 800ac26:	4b06      	ldr	r3, [pc, #24]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a05      	ldr	r2, [pc, #20]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800ac2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac30:	6013      	str	r3, [r2, #0]
 800ac32:	4b03      	ldr	r3, [pc, #12]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a02      	ldr	r2, [pc, #8]	; (800ac40 <HAL_RCC_OscConfig+0x270>)
 800ac38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac3c:	6013      	str	r3, [r2, #0]
 800ac3e:	e013      	b.n	800ac68 <HAL_RCC_OscConfig+0x298>
 800ac40:	40021000 	.word	0x40021000
 800ac44:	0801ccac 	.word	0x0801ccac
 800ac48:	20000024 	.word	0x20000024
 800ac4c:	20000028 	.word	0x20000028
 800ac50:	4ba0      	ldr	r3, [pc, #640]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a9f      	ldr	r2, [pc, #636]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ac56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac5a:	6013      	str	r3, [r2, #0]
 800ac5c:	4b9d      	ldr	r3, [pc, #628]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a9c      	ldr	r2, [pc, #624]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ac62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d013      	beq.n	800ac98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac70:	f7fb fbda 	bl	8006428 <HAL_GetTick>
 800ac74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ac76:	e008      	b.n	800ac8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac78:	f7fb fbd6 	bl	8006428 <HAL_GetTick>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	2b64      	cmp	r3, #100	; 0x64
 800ac84:	d901      	bls.n	800ac8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800ac86:	2303      	movs	r3, #3
 800ac88:	e2ae      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ac8a:	4b92      	ldr	r3, [pc, #584]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d0f0      	beq.n	800ac78 <HAL_RCC_OscConfig+0x2a8>
 800ac96:	e014      	b.n	800acc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac98:	f7fb fbc6 	bl	8006428 <HAL_GetTick>
 800ac9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ac9e:	e008      	b.n	800acb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aca0:	f7fb fbc2 	bl	8006428 <HAL_GetTick>
 800aca4:	4602      	mov	r2, r0
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	2b64      	cmp	r3, #100	; 0x64
 800acac:	d901      	bls.n	800acb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800acae:	2303      	movs	r3, #3
 800acb0:	e29a      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800acb2:	4b88      	ldr	r3, [pc, #544]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1f0      	bne.n	800aca0 <HAL_RCC_OscConfig+0x2d0>
 800acbe:	e000      	b.n	800acc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800acc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f003 0302 	and.w	r3, r3, #2
 800acca:	2b00      	cmp	r3, #0
 800accc:	d060      	beq.n	800ad90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	2b04      	cmp	r3, #4
 800acd2:	d005      	beq.n	800ace0 <HAL_RCC_OscConfig+0x310>
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	2b0c      	cmp	r3, #12
 800acd8:	d119      	bne.n	800ad0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	2b02      	cmp	r3, #2
 800acde:	d116      	bne.n	800ad0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ace0:	4b7c      	ldr	r3, [pc, #496]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d005      	beq.n	800acf8 <HAL_RCC_OscConfig+0x328>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d101      	bne.n	800acf8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e277      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800acf8:	4b76      	ldr	r3, [pc, #472]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	691b      	ldr	r3, [r3, #16]
 800ad04:	061b      	lsls	r3, r3, #24
 800ad06:	4973      	ldr	r1, [pc, #460]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ad0c:	e040      	b.n	800ad90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d023      	beq.n	800ad5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ad16:	4b6f      	ldr	r3, [pc, #444]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a6e      	ldr	r2, [pc, #440]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ad1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad22:	f7fb fb81 	bl	8006428 <HAL_GetTick>
 800ad26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad28:	e008      	b.n	800ad3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad2a:	f7fb fb7d 	bl	8006428 <HAL_GetTick>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d901      	bls.n	800ad3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	e255      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad3c:	4b65      	ldr	r3, [pc, #404]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d0f0      	beq.n	800ad2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad48:	4b62      	ldr	r3, [pc, #392]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	061b      	lsls	r3, r3, #24
 800ad56:	495f      	ldr	r1, [pc, #380]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	604b      	str	r3, [r1, #4]
 800ad5c:	e018      	b.n	800ad90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ad5e:	4b5d      	ldr	r3, [pc, #372]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a5c      	ldr	r2, [pc, #368]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ad64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad6a:	f7fb fb5d 	bl	8006428 <HAL_GetTick>
 800ad6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ad70:	e008      	b.n	800ad84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad72:	f7fb fb59 	bl	8006428 <HAL_GetTick>
 800ad76:	4602      	mov	r2, r0
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	2b02      	cmp	r3, #2
 800ad7e:	d901      	bls.n	800ad84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800ad80:	2303      	movs	r3, #3
 800ad82:	e231      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ad84:	4b53      	ldr	r3, [pc, #332]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1f0      	bne.n	800ad72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f003 0308 	and.w	r3, r3, #8
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d03c      	beq.n	800ae16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	695b      	ldr	r3, [r3, #20]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d01c      	beq.n	800adde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ada4:	4b4b      	ldr	r3, [pc, #300]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ada6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800adaa:	4a4a      	ldr	r2, [pc, #296]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800adac:	f043 0301 	orr.w	r3, r3, #1
 800adb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adb4:	f7fb fb38 	bl	8006428 <HAL_GetTick>
 800adb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800adba:	e008      	b.n	800adce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800adbc:	f7fb fb34 	bl	8006428 <HAL_GetTick>
 800adc0:	4602      	mov	r2, r0
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	d901      	bls.n	800adce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800adca:	2303      	movs	r3, #3
 800adcc:	e20c      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800adce:	4b41      	ldr	r3, [pc, #260]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800add0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800add4:	f003 0302 	and.w	r3, r3, #2
 800add8:	2b00      	cmp	r3, #0
 800adda:	d0ef      	beq.n	800adbc <HAL_RCC_OscConfig+0x3ec>
 800addc:	e01b      	b.n	800ae16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800adde:	4b3d      	ldr	r3, [pc, #244]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ade0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ade4:	4a3b      	ldr	r2, [pc, #236]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ade6:	f023 0301 	bic.w	r3, r3, #1
 800adea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adee:	f7fb fb1b 	bl	8006428 <HAL_GetTick>
 800adf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800adf4:	e008      	b.n	800ae08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800adf6:	f7fb fb17 	bl	8006428 <HAL_GetTick>
 800adfa:	4602      	mov	r2, r0
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d901      	bls.n	800ae08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800ae04:	2303      	movs	r3, #3
 800ae06:	e1ef      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ae08:	4b32      	ldr	r3, [pc, #200]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ae0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae0e:	f003 0302 	and.w	r3, r3, #2
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d1ef      	bne.n	800adf6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 0304 	and.w	r3, r3, #4
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	f000 80a6 	beq.w	800af70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae24:	2300      	movs	r3, #0
 800ae26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800ae28:	4b2a      	ldr	r3, [pc, #168]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ae2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10d      	bne.n	800ae50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae34:	4b27      	ldr	r3, [pc, #156]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ae36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae38:	4a26      	ldr	r2, [pc, #152]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ae3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae3e:	6593      	str	r3, [r2, #88]	; 0x58
 800ae40:	4b24      	ldr	r3, [pc, #144]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ae42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae48:	60bb      	str	r3, [r7, #8]
 800ae4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae50:	4b21      	ldr	r3, [pc, #132]	; (800aed8 <HAL_RCC_OscConfig+0x508>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d118      	bne.n	800ae8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae5c:	4b1e      	ldr	r3, [pc, #120]	; (800aed8 <HAL_RCC_OscConfig+0x508>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a1d      	ldr	r2, [pc, #116]	; (800aed8 <HAL_RCC_OscConfig+0x508>)
 800ae62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ae68:	f7fb fade 	bl	8006428 <HAL_GetTick>
 800ae6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae6e:	e008      	b.n	800ae82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae70:	f7fb fada 	bl	8006428 <HAL_GetTick>
 800ae74:	4602      	mov	r2, r0
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	1ad3      	subs	r3, r2, r3
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d901      	bls.n	800ae82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e1b2      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae82:	4b15      	ldr	r3, [pc, #84]	; (800aed8 <HAL_RCC_OscConfig+0x508>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d0f0      	beq.n	800ae70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d108      	bne.n	800aea8 <HAL_RCC_OscConfig+0x4d8>
 800ae96:	4b0f      	ldr	r3, [pc, #60]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ae98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae9c:	4a0d      	ldr	r2, [pc, #52]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800ae9e:	f043 0301 	orr.w	r3, r3, #1
 800aea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aea6:	e029      	b.n	800aefc <HAL_RCC_OscConfig+0x52c>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	2b05      	cmp	r3, #5
 800aeae:	d115      	bne.n	800aedc <HAL_RCC_OscConfig+0x50c>
 800aeb0:	4b08      	ldr	r3, [pc, #32]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800aeb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeb6:	4a07      	ldr	r2, [pc, #28]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800aeb8:	f043 0304 	orr.w	r3, r3, #4
 800aebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aec0:	4b04      	ldr	r3, [pc, #16]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800aec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aec6:	4a03      	ldr	r2, [pc, #12]	; (800aed4 <HAL_RCC_OscConfig+0x504>)
 800aec8:	f043 0301 	orr.w	r3, r3, #1
 800aecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aed0:	e014      	b.n	800aefc <HAL_RCC_OscConfig+0x52c>
 800aed2:	bf00      	nop
 800aed4:	40021000 	.word	0x40021000
 800aed8:	40007000 	.word	0x40007000
 800aedc:	4b9a      	ldr	r3, [pc, #616]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800aede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aee2:	4a99      	ldr	r2, [pc, #612]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800aee4:	f023 0301 	bic.w	r3, r3, #1
 800aee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aeec:	4b96      	ldr	r3, [pc, #600]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800aeee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aef2:	4a95      	ldr	r2, [pc, #596]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800aef4:	f023 0304 	bic.w	r3, r3, #4
 800aef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d016      	beq.n	800af32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af04:	f7fb fa90 	bl	8006428 <HAL_GetTick>
 800af08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af0a:	e00a      	b.n	800af22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af0c:	f7fb fa8c 	bl	8006428 <HAL_GetTick>
 800af10:	4602      	mov	r2, r0
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	f241 3288 	movw	r2, #5000	; 0x1388
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d901      	bls.n	800af22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800af1e:	2303      	movs	r3, #3
 800af20:	e162      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af22:	4b89      	ldr	r3, [pc, #548]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800af24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af28:	f003 0302 	and.w	r3, r3, #2
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d0ed      	beq.n	800af0c <HAL_RCC_OscConfig+0x53c>
 800af30:	e015      	b.n	800af5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af32:	f7fb fa79 	bl	8006428 <HAL_GetTick>
 800af36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800af38:	e00a      	b.n	800af50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af3a:	f7fb fa75 	bl	8006428 <HAL_GetTick>
 800af3e:	4602      	mov	r2, r0
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	1ad3      	subs	r3, r2, r3
 800af44:	f241 3288 	movw	r2, #5000	; 0x1388
 800af48:	4293      	cmp	r3, r2
 800af4a:	d901      	bls.n	800af50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800af4c:	2303      	movs	r3, #3
 800af4e:	e14b      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800af50:	4b7d      	ldr	r3, [pc, #500]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800af52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af56:	f003 0302 	and.w	r3, r3, #2
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d1ed      	bne.n	800af3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800af5e:	7ffb      	ldrb	r3, [r7, #31]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d105      	bne.n	800af70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af64:	4b78      	ldr	r3, [pc, #480]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800af66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af68:	4a77      	ldr	r2, [pc, #476]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800af6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f003 0320 	and.w	r3, r3, #32
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d03c      	beq.n	800aff6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af80:	2b00      	cmp	r3, #0
 800af82:	d01c      	beq.n	800afbe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800af84:	4b70      	ldr	r3, [pc, #448]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800af86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af8a:	4a6f      	ldr	r2, [pc, #444]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800af8c:	f043 0301 	orr.w	r3, r3, #1
 800af90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af94:	f7fb fa48 	bl	8006428 <HAL_GetTick>
 800af98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800af9a:	e008      	b.n	800afae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800af9c:	f7fb fa44 	bl	8006428 <HAL_GetTick>
 800afa0:	4602      	mov	r2, r0
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	1ad3      	subs	r3, r2, r3
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	d901      	bls.n	800afae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800afaa:	2303      	movs	r3, #3
 800afac:	e11c      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800afae:	4b66      	ldr	r3, [pc, #408]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800afb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800afb4:	f003 0302 	and.w	r3, r3, #2
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d0ef      	beq.n	800af9c <HAL_RCC_OscConfig+0x5cc>
 800afbc:	e01b      	b.n	800aff6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800afbe:	4b62      	ldr	r3, [pc, #392]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800afc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800afc4:	4a60      	ldr	r2, [pc, #384]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800afc6:	f023 0301 	bic.w	r3, r3, #1
 800afca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afce:	f7fb fa2b 	bl	8006428 <HAL_GetTick>
 800afd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800afd4:	e008      	b.n	800afe8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800afd6:	f7fb fa27 	bl	8006428 <HAL_GetTick>
 800afda:	4602      	mov	r2, r0
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	1ad3      	subs	r3, r2, r3
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d901      	bls.n	800afe8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800afe4:	2303      	movs	r3, #3
 800afe6:	e0ff      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800afe8:	4b57      	ldr	r3, [pc, #348]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800afea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800afee:	f003 0302 	and.w	r3, r3, #2
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1ef      	bne.n	800afd6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800affa:	2b00      	cmp	r3, #0
 800affc:	f000 80f3 	beq.w	800b1e6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b004:	2b02      	cmp	r3, #2
 800b006:	f040 80c9 	bne.w	800b19c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b00a:	4b4f      	ldr	r3, [pc, #316]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	f003 0203 	and.w	r2, r3, #3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d12c      	bne.n	800b078 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b028:	3b01      	subs	r3, #1
 800b02a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d123      	bne.n	800b078 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b03a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d11b      	bne.n	800b078 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b04a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d113      	bne.n	800b078 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b05a:	085b      	lsrs	r3, r3, #1
 800b05c:	3b01      	subs	r3, #1
 800b05e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b060:	429a      	cmp	r2, r3
 800b062:	d109      	bne.n	800b078 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06e:	085b      	lsrs	r3, r3, #1
 800b070:	3b01      	subs	r3, #1
 800b072:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b074:	429a      	cmp	r2, r3
 800b076:	d06b      	beq.n	800b150 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	2b0c      	cmp	r3, #12
 800b07c:	d062      	beq.n	800b144 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b07e:	4b32      	ldr	r3, [pc, #200]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b086:	2b00      	cmp	r3, #0
 800b088:	d001      	beq.n	800b08e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	e0ac      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b08e:	4b2e      	ldr	r3, [pc, #184]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a2d      	ldr	r2, [pc, #180]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800b094:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b098:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b09a:	f7fb f9c5 	bl	8006428 <HAL_GetTick>
 800b09e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b0a0:	e008      	b.n	800b0b4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0a2:	f7fb f9c1 	bl	8006428 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d901      	bls.n	800b0b4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e099      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b0b4:	4b24      	ldr	r3, [pc, #144]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1f0      	bne.n	800b0a2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b0c0:	4b21      	ldr	r3, [pc, #132]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800b0c2:	68da      	ldr	r2, [r3, #12]
 800b0c4:	4b21      	ldr	r3, [pc, #132]	; (800b14c <HAL_RCC_OscConfig+0x77c>)
 800b0c6:	4013      	ands	r3, r2
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b0d0:	3a01      	subs	r2, #1
 800b0d2:	0112      	lsls	r2, r2, #4
 800b0d4:	4311      	orrs	r1, r2
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b0da:	0212      	lsls	r2, r2, #8
 800b0dc:	4311      	orrs	r1, r2
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b0e2:	0852      	lsrs	r2, r2, #1
 800b0e4:	3a01      	subs	r2, #1
 800b0e6:	0552      	lsls	r2, r2, #21
 800b0e8:	4311      	orrs	r1, r2
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b0ee:	0852      	lsrs	r2, r2, #1
 800b0f0:	3a01      	subs	r2, #1
 800b0f2:	0652      	lsls	r2, r2, #25
 800b0f4:	4311      	orrs	r1, r2
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b0fa:	06d2      	lsls	r2, r2, #27
 800b0fc:	430a      	orrs	r2, r1
 800b0fe:	4912      	ldr	r1, [pc, #72]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800b100:	4313      	orrs	r3, r2
 800b102:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b104:	4b10      	ldr	r3, [pc, #64]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a0f      	ldr	r2, [pc, #60]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800b10a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b10e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b110:	4b0d      	ldr	r3, [pc, #52]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	4a0c      	ldr	r2, [pc, #48]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800b116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b11a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b11c:	f7fb f984 	bl	8006428 <HAL_GetTick>
 800b120:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b122:	e008      	b.n	800b136 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b124:	f7fb f980 	bl	8006428 <HAL_GetTick>
 800b128:	4602      	mov	r2, r0
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d901      	bls.n	800b136 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800b132:	2303      	movs	r3, #3
 800b134:	e058      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b136:	4b04      	ldr	r3, [pc, #16]	; (800b148 <HAL_RCC_OscConfig+0x778>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d0f0      	beq.n	800b124 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b142:	e050      	b.n	800b1e6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	e04f      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
 800b148:	40021000 	.word	0x40021000
 800b14c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b150:	4b27      	ldr	r3, [pc, #156]	; (800b1f0 <HAL_RCC_OscConfig+0x820>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d144      	bne.n	800b1e6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b15c:	4b24      	ldr	r3, [pc, #144]	; (800b1f0 <HAL_RCC_OscConfig+0x820>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a23      	ldr	r2, [pc, #140]	; (800b1f0 <HAL_RCC_OscConfig+0x820>)
 800b162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b166:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b168:	4b21      	ldr	r3, [pc, #132]	; (800b1f0 <HAL_RCC_OscConfig+0x820>)
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	4a20      	ldr	r2, [pc, #128]	; (800b1f0 <HAL_RCC_OscConfig+0x820>)
 800b16e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b172:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b174:	f7fb f958 	bl	8006428 <HAL_GetTick>
 800b178:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b17a:	e008      	b.n	800b18e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b17c:	f7fb f954 	bl	8006428 <HAL_GetTick>
 800b180:	4602      	mov	r2, r0
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	2b02      	cmp	r3, #2
 800b188:	d901      	bls.n	800b18e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800b18a:	2303      	movs	r3, #3
 800b18c:	e02c      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b18e:	4b18      	ldr	r3, [pc, #96]	; (800b1f0 <HAL_RCC_OscConfig+0x820>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b196:	2b00      	cmp	r3, #0
 800b198:	d0f0      	beq.n	800b17c <HAL_RCC_OscConfig+0x7ac>
 800b19a:	e024      	b.n	800b1e6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	2b0c      	cmp	r3, #12
 800b1a0:	d01f      	beq.n	800b1e2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1a2:	4b13      	ldr	r3, [pc, #76]	; (800b1f0 <HAL_RCC_OscConfig+0x820>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a12      	ldr	r2, [pc, #72]	; (800b1f0 <HAL_RCC_OscConfig+0x820>)
 800b1a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b1ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1ae:	f7fb f93b 	bl	8006428 <HAL_GetTick>
 800b1b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b1b4:	e008      	b.n	800b1c8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1b6:	f7fb f937 	bl	8006428 <HAL_GetTick>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	2b02      	cmp	r3, #2
 800b1c2:	d901      	bls.n	800b1c8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	e00f      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b1c8:	4b09      	ldr	r3, [pc, #36]	; (800b1f0 <HAL_RCC_OscConfig+0x820>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1f0      	bne.n	800b1b6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800b1d4:	4b06      	ldr	r3, [pc, #24]	; (800b1f0 <HAL_RCC_OscConfig+0x820>)
 800b1d6:	68da      	ldr	r2, [r3, #12]
 800b1d8:	4905      	ldr	r1, [pc, #20]	; (800b1f0 <HAL_RCC_OscConfig+0x820>)
 800b1da:	4b06      	ldr	r3, [pc, #24]	; (800b1f4 <HAL_RCC_OscConfig+0x824>)
 800b1dc:	4013      	ands	r3, r2
 800b1de:	60cb      	str	r3, [r1, #12]
 800b1e0:	e001      	b.n	800b1e6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e000      	b.n	800b1e8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3720      	adds	r7, #32
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	40021000 	.word	0x40021000
 800b1f4:	feeefffc 	.word	0xfeeefffc

0800b1f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d101      	bne.n	800b20c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	e0e7      	b.n	800b3dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b20c:	4b75      	ldr	r3, [pc, #468]	; (800b3e4 <HAL_RCC_ClockConfig+0x1ec>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 0307 	and.w	r3, r3, #7
 800b214:	683a      	ldr	r2, [r7, #0]
 800b216:	429a      	cmp	r2, r3
 800b218:	d910      	bls.n	800b23c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b21a:	4b72      	ldr	r3, [pc, #456]	; (800b3e4 <HAL_RCC_ClockConfig+0x1ec>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f023 0207 	bic.w	r2, r3, #7
 800b222:	4970      	ldr	r1, [pc, #448]	; (800b3e4 <HAL_RCC_ClockConfig+0x1ec>)
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	4313      	orrs	r3, r2
 800b228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b22a:	4b6e      	ldr	r3, [pc, #440]	; (800b3e4 <HAL_RCC_ClockConfig+0x1ec>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f003 0307 	and.w	r3, r3, #7
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	429a      	cmp	r2, r3
 800b236:	d001      	beq.n	800b23c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	e0cf      	b.n	800b3dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f003 0302 	and.w	r3, r3, #2
 800b244:	2b00      	cmp	r3, #0
 800b246:	d010      	beq.n	800b26a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	689a      	ldr	r2, [r3, #8]
 800b24c:	4b66      	ldr	r3, [pc, #408]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b254:	429a      	cmp	r2, r3
 800b256:	d908      	bls.n	800b26a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b258:	4b63      	ldr	r3, [pc, #396]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	4960      	ldr	r1, [pc, #384]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b266:	4313      	orrs	r3, r2
 800b268:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 0301 	and.w	r3, r3, #1
 800b272:	2b00      	cmp	r3, #0
 800b274:	d04c      	beq.n	800b310 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	2b03      	cmp	r3, #3
 800b27c:	d107      	bne.n	800b28e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b27e:	4b5a      	ldr	r3, [pc, #360]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b286:	2b00      	cmp	r3, #0
 800b288:	d121      	bne.n	800b2ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	e0a6      	b.n	800b3dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	2b02      	cmp	r3, #2
 800b294:	d107      	bne.n	800b2a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b296:	4b54      	ldr	r3, [pc, #336]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d115      	bne.n	800b2ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e09a      	b.n	800b3dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d107      	bne.n	800b2be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b2ae:	4b4e      	ldr	r3, [pc, #312]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 0302 	and.w	r3, r3, #2
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d109      	bne.n	800b2ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	e08e      	b.n	800b3dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b2be:	4b4a      	ldr	r3, [pc, #296]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d101      	bne.n	800b2ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e086      	b.n	800b3dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b2ce:	4b46      	ldr	r3, [pc, #280]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	f023 0203 	bic.w	r2, r3, #3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	4943      	ldr	r1, [pc, #268]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2e0:	f7fb f8a2 	bl	8006428 <HAL_GetTick>
 800b2e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2e6:	e00a      	b.n	800b2fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2e8:	f7fb f89e 	bl	8006428 <HAL_GetTick>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d901      	bls.n	800b2fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800b2fa:	2303      	movs	r3, #3
 800b2fc:	e06e      	b.n	800b3dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2fe:	4b3a      	ldr	r3, [pc, #232]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	f003 020c 	and.w	r2, r3, #12
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d1eb      	bne.n	800b2e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f003 0302 	and.w	r3, r3, #2
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d010      	beq.n	800b33e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	689a      	ldr	r2, [r3, #8]
 800b320:	4b31      	ldr	r3, [pc, #196]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b328:	429a      	cmp	r2, r3
 800b32a:	d208      	bcs.n	800b33e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b32c:	4b2e      	ldr	r3, [pc, #184]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	492b      	ldr	r1, [pc, #172]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b33a:	4313      	orrs	r3, r2
 800b33c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b33e:	4b29      	ldr	r3, [pc, #164]	; (800b3e4 <HAL_RCC_ClockConfig+0x1ec>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f003 0307 	and.w	r3, r3, #7
 800b346:	683a      	ldr	r2, [r7, #0]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d210      	bcs.n	800b36e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b34c:	4b25      	ldr	r3, [pc, #148]	; (800b3e4 <HAL_RCC_ClockConfig+0x1ec>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f023 0207 	bic.w	r2, r3, #7
 800b354:	4923      	ldr	r1, [pc, #140]	; (800b3e4 <HAL_RCC_ClockConfig+0x1ec>)
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	4313      	orrs	r3, r2
 800b35a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b35c:	4b21      	ldr	r3, [pc, #132]	; (800b3e4 <HAL_RCC_ClockConfig+0x1ec>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f003 0307 	and.w	r3, r3, #7
 800b364:	683a      	ldr	r2, [r7, #0]
 800b366:	429a      	cmp	r2, r3
 800b368:	d001      	beq.n	800b36e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800b36a:	2301      	movs	r3, #1
 800b36c:	e036      	b.n	800b3dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 0304 	and.w	r3, r3, #4
 800b376:	2b00      	cmp	r3, #0
 800b378:	d008      	beq.n	800b38c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b37a:	4b1b      	ldr	r3, [pc, #108]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	4918      	ldr	r1, [pc, #96]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b388:	4313      	orrs	r3, r2
 800b38a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 0308 	and.w	r3, r3, #8
 800b394:	2b00      	cmp	r3, #0
 800b396:	d009      	beq.n	800b3ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b398:	4b13      	ldr	r3, [pc, #76]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	00db      	lsls	r3, r3, #3
 800b3a6:	4910      	ldr	r1, [pc, #64]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b3ac:	f000 f824 	bl	800b3f8 <HAL_RCC_GetSysClockFreq>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	4b0d      	ldr	r3, [pc, #52]	; (800b3e8 <HAL_RCC_ClockConfig+0x1f0>)
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	091b      	lsrs	r3, r3, #4
 800b3b8:	f003 030f 	and.w	r3, r3, #15
 800b3bc:	490b      	ldr	r1, [pc, #44]	; (800b3ec <HAL_RCC_ClockConfig+0x1f4>)
 800b3be:	5ccb      	ldrb	r3, [r1, r3]
 800b3c0:	f003 031f 	and.w	r3, r3, #31
 800b3c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b3c8:	4a09      	ldr	r2, [pc, #36]	; (800b3f0 <HAL_RCC_ClockConfig+0x1f8>)
 800b3ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b3cc:	4b09      	ldr	r3, [pc, #36]	; (800b3f4 <HAL_RCC_ClockConfig+0x1fc>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7fa ffd9 	bl	8006388 <HAL_InitTick>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	72fb      	strb	r3, [r7, #11]

  return status;
 800b3da:	7afb      	ldrb	r3, [r7, #11]
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3710      	adds	r7, #16
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	40022000 	.word	0x40022000
 800b3e8:	40021000 	.word	0x40021000
 800b3ec:	0801ccac 	.word	0x0801ccac
 800b3f0:	20000024 	.word	0x20000024
 800b3f4:	20000028 	.word	0x20000028

0800b3f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b089      	sub	sp, #36	; 0x24
 800b3fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b3fe:	2300      	movs	r3, #0
 800b400:	61fb      	str	r3, [r7, #28]
 800b402:	2300      	movs	r3, #0
 800b404:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b406:	4b3e      	ldr	r3, [pc, #248]	; (800b500 <HAL_RCC_GetSysClockFreq+0x108>)
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	f003 030c 	and.w	r3, r3, #12
 800b40e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b410:	4b3b      	ldr	r3, [pc, #236]	; (800b500 <HAL_RCC_GetSysClockFreq+0x108>)
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	f003 0303 	and.w	r3, r3, #3
 800b418:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d005      	beq.n	800b42c <HAL_RCC_GetSysClockFreq+0x34>
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	2b0c      	cmp	r3, #12
 800b424:	d121      	bne.n	800b46a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d11e      	bne.n	800b46a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b42c:	4b34      	ldr	r3, [pc, #208]	; (800b500 <HAL_RCC_GetSysClockFreq+0x108>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f003 0308 	and.w	r3, r3, #8
 800b434:	2b00      	cmp	r3, #0
 800b436:	d107      	bne.n	800b448 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b438:	4b31      	ldr	r3, [pc, #196]	; (800b500 <HAL_RCC_GetSysClockFreq+0x108>)
 800b43a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b43e:	0a1b      	lsrs	r3, r3, #8
 800b440:	f003 030f 	and.w	r3, r3, #15
 800b444:	61fb      	str	r3, [r7, #28]
 800b446:	e005      	b.n	800b454 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b448:	4b2d      	ldr	r3, [pc, #180]	; (800b500 <HAL_RCC_GetSysClockFreq+0x108>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	091b      	lsrs	r3, r3, #4
 800b44e:	f003 030f 	and.w	r3, r3, #15
 800b452:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b454:	4a2b      	ldr	r2, [pc, #172]	; (800b504 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b45c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d10d      	bne.n	800b480 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b468:	e00a      	b.n	800b480 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	2b04      	cmp	r3, #4
 800b46e:	d102      	bne.n	800b476 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b470:	4b25      	ldr	r3, [pc, #148]	; (800b508 <HAL_RCC_GetSysClockFreq+0x110>)
 800b472:	61bb      	str	r3, [r7, #24]
 800b474:	e004      	b.n	800b480 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	2b08      	cmp	r3, #8
 800b47a:	d101      	bne.n	800b480 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b47c:	4b23      	ldr	r3, [pc, #140]	; (800b50c <HAL_RCC_GetSysClockFreq+0x114>)
 800b47e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	2b0c      	cmp	r3, #12
 800b484:	d134      	bne.n	800b4f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b486:	4b1e      	ldr	r3, [pc, #120]	; (800b500 <HAL_RCC_GetSysClockFreq+0x108>)
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	f003 0303 	and.w	r3, r3, #3
 800b48e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	2b02      	cmp	r3, #2
 800b494:	d003      	beq.n	800b49e <HAL_RCC_GetSysClockFreq+0xa6>
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	2b03      	cmp	r3, #3
 800b49a:	d003      	beq.n	800b4a4 <HAL_RCC_GetSysClockFreq+0xac>
 800b49c:	e005      	b.n	800b4aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b49e:	4b1a      	ldr	r3, [pc, #104]	; (800b508 <HAL_RCC_GetSysClockFreq+0x110>)
 800b4a0:	617b      	str	r3, [r7, #20]
      break;
 800b4a2:	e005      	b.n	800b4b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b4a4:	4b19      	ldr	r3, [pc, #100]	; (800b50c <HAL_RCC_GetSysClockFreq+0x114>)
 800b4a6:	617b      	str	r3, [r7, #20]
      break;
 800b4a8:	e002      	b.n	800b4b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	617b      	str	r3, [r7, #20]
      break;
 800b4ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b4b0:	4b13      	ldr	r3, [pc, #76]	; (800b500 <HAL_RCC_GetSysClockFreq+0x108>)
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	091b      	lsrs	r3, r3, #4
 800b4b6:	f003 0307 	and.w	r3, r3, #7
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b4be:	4b10      	ldr	r3, [pc, #64]	; (800b500 <HAL_RCC_GetSysClockFreq+0x108>)
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	0a1b      	lsrs	r3, r3, #8
 800b4c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4c8:	697a      	ldr	r2, [r7, #20]
 800b4ca:	fb03 f202 	mul.w	r2, r3, r2
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b4d6:	4b0a      	ldr	r3, [pc, #40]	; (800b500 <HAL_RCC_GetSysClockFreq+0x108>)
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	0e5b      	lsrs	r3, r3, #25
 800b4dc:	f003 0303 	and.w	r3, r3, #3
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	005b      	lsls	r3, r3, #1
 800b4e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b4e6:	697a      	ldr	r2, [r7, #20]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b4f0:	69bb      	ldr	r3, [r7, #24]
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3724      	adds	r7, #36	; 0x24
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	40021000 	.word	0x40021000
 800b504:	0801ccc4 	.word	0x0801ccc4
 800b508:	00f42400 	.word	0x00f42400
 800b50c:	007a1200 	.word	0x007a1200

0800b510 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b510:	b480      	push	{r7}
 800b512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b514:	4b03      	ldr	r3, [pc, #12]	; (800b524 <HAL_RCC_GetHCLKFreq+0x14>)
 800b516:	681b      	ldr	r3, [r3, #0]
}
 800b518:	4618      	mov	r0, r3
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	20000024 	.word	0x20000024

0800b528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b52c:	f7ff fff0 	bl	800b510 <HAL_RCC_GetHCLKFreq>
 800b530:	4602      	mov	r2, r0
 800b532:	4b06      	ldr	r3, [pc, #24]	; (800b54c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	0a1b      	lsrs	r3, r3, #8
 800b538:	f003 0307 	and.w	r3, r3, #7
 800b53c:	4904      	ldr	r1, [pc, #16]	; (800b550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b53e:	5ccb      	ldrb	r3, [r1, r3]
 800b540:	f003 031f 	and.w	r3, r3, #31
 800b544:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b548:	4618      	mov	r0, r3
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	40021000 	.word	0x40021000
 800b550:	0801ccbc 	.word	0x0801ccbc

0800b554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b558:	f7ff ffda 	bl	800b510 <HAL_RCC_GetHCLKFreq>
 800b55c:	4602      	mov	r2, r0
 800b55e:	4b06      	ldr	r3, [pc, #24]	; (800b578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	0adb      	lsrs	r3, r3, #11
 800b564:	f003 0307 	and.w	r3, r3, #7
 800b568:	4904      	ldr	r1, [pc, #16]	; (800b57c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b56a:	5ccb      	ldrb	r3, [r1, r3]
 800b56c:	f003 031f 	and.w	r3, r3, #31
 800b570:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b574:	4618      	mov	r0, r3
 800b576:	bd80      	pop	{r7, pc}
 800b578:	40021000 	.word	0x40021000
 800b57c:	0801ccbc 	.word	0x0801ccbc

0800b580 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b588:	2300      	movs	r3, #0
 800b58a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b58c:	4b2a      	ldr	r3, [pc, #168]	; (800b638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b58e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b594:	2b00      	cmp	r3, #0
 800b596:	d003      	beq.n	800b5a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b598:	f7ff f9a6 	bl	800a8e8 <HAL_PWREx_GetVoltageRange>
 800b59c:	6178      	str	r0, [r7, #20]
 800b59e:	e014      	b.n	800b5ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b5a0:	4b25      	ldr	r3, [pc, #148]	; (800b638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b5a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a4:	4a24      	ldr	r2, [pc, #144]	; (800b638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b5a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5aa:	6593      	str	r3, [r2, #88]	; 0x58
 800b5ac:	4b22      	ldr	r3, [pc, #136]	; (800b638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b5ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5b4:	60fb      	str	r3, [r7, #12]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b5b8:	f7ff f996 	bl	800a8e8 <HAL_PWREx_GetVoltageRange>
 800b5bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b5be:	4b1e      	ldr	r3, [pc, #120]	; (800b638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b5c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5c2:	4a1d      	ldr	r2, [pc, #116]	; (800b638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b5c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5d0:	d10b      	bne.n	800b5ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2b80      	cmp	r3, #128	; 0x80
 800b5d6:	d919      	bls.n	800b60c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2ba0      	cmp	r3, #160	; 0xa0
 800b5dc:	d902      	bls.n	800b5e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b5de:	2302      	movs	r3, #2
 800b5e0:	613b      	str	r3, [r7, #16]
 800b5e2:	e013      	b.n	800b60c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	613b      	str	r3, [r7, #16]
 800b5e8:	e010      	b.n	800b60c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2b80      	cmp	r3, #128	; 0x80
 800b5ee:	d902      	bls.n	800b5f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b5f0:	2303      	movs	r3, #3
 800b5f2:	613b      	str	r3, [r7, #16]
 800b5f4:	e00a      	b.n	800b60c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2b80      	cmp	r3, #128	; 0x80
 800b5fa:	d102      	bne.n	800b602 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b5fc:	2302      	movs	r3, #2
 800b5fe:	613b      	str	r3, [r7, #16]
 800b600:	e004      	b.n	800b60c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2b70      	cmp	r3, #112	; 0x70
 800b606:	d101      	bne.n	800b60c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b608:	2301      	movs	r3, #1
 800b60a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b60c:	4b0b      	ldr	r3, [pc, #44]	; (800b63c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f023 0207 	bic.w	r2, r3, #7
 800b614:	4909      	ldr	r1, [pc, #36]	; (800b63c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	4313      	orrs	r3, r2
 800b61a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b61c:	4b07      	ldr	r3, [pc, #28]	; (800b63c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f003 0307 	and.w	r3, r3, #7
 800b624:	693a      	ldr	r2, [r7, #16]
 800b626:	429a      	cmp	r2, r3
 800b628:	d001      	beq.n	800b62e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e000      	b.n	800b630 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	3718      	adds	r7, #24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	40021000 	.word	0x40021000
 800b63c:	40022000 	.word	0x40022000

0800b640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b648:	2300      	movs	r3, #0
 800b64a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b64c:	2300      	movs	r3, #0
 800b64e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d031      	beq.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b660:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b664:	d01a      	beq.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800b666:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b66a:	d814      	bhi.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d009      	beq.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b674:	d10f      	bne.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800b676:	4b5d      	ldr	r3, [pc, #372]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	4a5c      	ldr	r2, [pc, #368]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b67c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b680:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b682:	e00c      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	3304      	adds	r3, #4
 800b688:	2100      	movs	r1, #0
 800b68a:	4618      	mov	r0, r3
 800b68c:	f000 f9ce 	bl	800ba2c <RCCEx_PLLSAI1_Config>
 800b690:	4603      	mov	r3, r0
 800b692:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b694:	e003      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b696:	2301      	movs	r3, #1
 800b698:	74fb      	strb	r3, [r7, #19]
      break;
 800b69a:	e000      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800b69c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b69e:	7cfb      	ldrb	r3, [r7, #19]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d10b      	bne.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b6a4:	4b51      	ldr	r3, [pc, #324]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b6a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6b2:	494e      	ldr	r1, [pc, #312]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b6ba:	e001      	b.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6bc:	7cfb      	ldrb	r3, [r7, #19]
 800b6be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f000 809e 	beq.w	800b80a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b6d2:	4b46      	ldr	r3, [pc, #280]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b6d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e000      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d00d      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6e8:	4b40      	ldr	r3, [pc, #256]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b6ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6ec:	4a3f      	ldr	r2, [pc, #252]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b6ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6f2:	6593      	str	r3, [r2, #88]	; 0x58
 800b6f4:	4b3d      	ldr	r3, [pc, #244]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b6f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6fc:	60bb      	str	r3, [r7, #8]
 800b6fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b700:	2301      	movs	r3, #1
 800b702:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b704:	4b3a      	ldr	r3, [pc, #232]	; (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a39      	ldr	r2, [pc, #228]	; (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b70a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b70e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b710:	f7fa fe8a 	bl	8006428 <HAL_GetTick>
 800b714:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b716:	e009      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b718:	f7fa fe86 	bl	8006428 <HAL_GetTick>
 800b71c:	4602      	mov	r2, r0
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	2b02      	cmp	r3, #2
 800b724:	d902      	bls.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800b726:	2303      	movs	r3, #3
 800b728:	74fb      	strb	r3, [r7, #19]
        break;
 800b72a:	e005      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b72c:	4b30      	ldr	r3, [pc, #192]	; (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b734:	2b00      	cmp	r3, #0
 800b736:	d0ef      	beq.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800b738:	7cfb      	ldrb	r3, [r7, #19]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d15a      	bne.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b73e:	4b2b      	ldr	r3, [pc, #172]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b748:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d01e      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b754:	697a      	ldr	r2, [r7, #20]
 800b756:	429a      	cmp	r2, r3
 800b758:	d019      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b75a:	4b24      	ldr	r3, [pc, #144]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b75c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b764:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b766:	4b21      	ldr	r3, [pc, #132]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b76c:	4a1f      	ldr	r2, [pc, #124]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b76e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b776:	4b1d      	ldr	r3, [pc, #116]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b77c:	4a1b      	ldr	r2, [pc, #108]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b77e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b782:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b786:	4a19      	ldr	r2, [pc, #100]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	f003 0301 	and.w	r3, r3, #1
 800b794:	2b00      	cmp	r3, #0
 800b796:	d016      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b798:	f7fa fe46 	bl	8006428 <HAL_GetTick>
 800b79c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b79e:	e00b      	b.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7a0:	f7fa fe42 	bl	8006428 <HAL_GetTick>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d902      	bls.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	74fb      	strb	r3, [r7, #19]
            break;
 800b7b6:	e006      	b.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7b8:	4b0c      	ldr	r3, [pc, #48]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b7ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7be:	f003 0302 	and.w	r3, r3, #2
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d0ec      	beq.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800b7c6:	7cfb      	ldrb	r3, [r7, #19]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d10b      	bne.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b7cc:	4b07      	ldr	r3, [pc, #28]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b7ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7da:	4904      	ldr	r1, [pc, #16]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b7e2:	e009      	b.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b7e4:	7cfb      	ldrb	r3, [r7, #19]
 800b7e6:	74bb      	strb	r3, [r7, #18]
 800b7e8:	e006      	b.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800b7ea:	bf00      	nop
 800b7ec:	40021000 	.word	0x40021000
 800b7f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7f4:	7cfb      	ldrb	r3, [r7, #19]
 800b7f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b7f8:	7c7b      	ldrb	r3, [r7, #17]
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d105      	bne.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b7fe:	4b8a      	ldr	r3, [pc, #552]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b802:	4a89      	ldr	r2, [pc, #548]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b808:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00a      	beq.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b816:	4b84      	ldr	r3, [pc, #528]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b81c:	f023 0203 	bic.w	r2, r3, #3
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6a1b      	ldr	r3, [r3, #32]
 800b824:	4980      	ldr	r1, [pc, #512]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b826:	4313      	orrs	r3, r2
 800b828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f003 0302 	and.w	r3, r3, #2
 800b834:	2b00      	cmp	r3, #0
 800b836:	d00a      	beq.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b838:	4b7b      	ldr	r3, [pc, #492]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b83a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b83e:	f023 020c 	bic.w	r2, r3, #12
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b846:	4978      	ldr	r1, [pc, #480]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b848:	4313      	orrs	r3, r2
 800b84a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f003 0320 	and.w	r3, r3, #32
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00a      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b85a:	4b73      	ldr	r3, [pc, #460]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b85c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b860:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b868:	496f      	ldr	r1, [pc, #444]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b86a:	4313      	orrs	r3, r2
 800b86c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00a      	beq.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b87c:	4b6a      	ldr	r3, [pc, #424]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b87e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b882:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b88a:	4967      	ldr	r1, [pc, #412]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b88c:	4313      	orrs	r3, r2
 800b88e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00a      	beq.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b89e:	4b62      	ldr	r3, [pc, #392]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b8a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ac:	495e      	ldr	r1, [pc, #376]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00a      	beq.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b8c0:	4b59      	ldr	r3, [pc, #356]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b8c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ce:	4956      	ldr	r1, [pc, #344]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d00a      	beq.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b8e2:	4b51      	ldr	r3, [pc, #324]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b8e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f0:	494d      	ldr	r1, [pc, #308]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b900:	2b00      	cmp	r3, #0
 800b902:	d028      	beq.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b904:	4b48      	ldr	r3, [pc, #288]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b90a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b912:	4945      	ldr	r1, [pc, #276]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b914:	4313      	orrs	r3, r2
 800b916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b922:	d106      	bne.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b924:	4b40      	ldr	r3, [pc, #256]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	4a3f      	ldr	r2, [pc, #252]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b92a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b92e:	60d3      	str	r3, [r2, #12]
 800b930:	e011      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b936:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b93a:	d10c      	bne.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	3304      	adds	r3, #4
 800b940:	2101      	movs	r1, #1
 800b942:	4618      	mov	r0, r3
 800b944:	f000 f872 	bl	800ba2c <RCCEx_PLLSAI1_Config>
 800b948:	4603      	mov	r3, r0
 800b94a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b94c:	7cfb      	ldrb	r3, [r7, #19]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d001      	beq.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800b952:	7cfb      	ldrb	r3, [r7, #19]
 800b954:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d028      	beq.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b962:	4b31      	ldr	r3, [pc, #196]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b968:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b970:	492d      	ldr	r1, [pc, #180]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b972:	4313      	orrs	r3, r2
 800b974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b97c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b980:	d106      	bne.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b982:	4b29      	ldr	r3, [pc, #164]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	4a28      	ldr	r2, [pc, #160]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b98c:	60d3      	str	r3, [r2, #12]
 800b98e:	e011      	b.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b994:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b998:	d10c      	bne.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	3304      	adds	r3, #4
 800b99e:	2101      	movs	r1, #1
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f000 f843 	bl	800ba2c <RCCEx_PLLSAI1_Config>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b9aa:	7cfb      	ldrb	r3, [r7, #19]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d001      	beq.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800b9b0:	7cfb      	ldrb	r3, [r7, #19]
 800b9b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d01c      	beq.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b9c0:	4b19      	ldr	r3, [pc, #100]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b9c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9ce:	4916      	ldr	r1, [pc, #88]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9de:	d10c      	bne.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	3304      	adds	r3, #4
 800b9e4:	2102      	movs	r1, #2
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f000 f820 	bl	800ba2c <RCCEx_PLLSAI1_Config>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b9f0:	7cfb      	ldrb	r3, [r7, #19]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d001      	beq.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800b9f6:	7cfb      	ldrb	r3, [r7, #19]
 800b9f8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00a      	beq.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ba06:	4b08      	ldr	r3, [pc, #32]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ba08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba0c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba14:	4904      	ldr	r1, [pc, #16]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ba16:	4313      	orrs	r3, r2
 800ba18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800ba1c:	7cbb      	ldrb	r3, [r7, #18]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3718      	adds	r7, #24
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	40021000 	.word	0x40021000

0800ba2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ba3a:	4b74      	ldr	r3, [pc, #464]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	f003 0303 	and.w	r3, r3, #3
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d018      	beq.n	800ba78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ba46:	4b71      	ldr	r3, [pc, #452]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	f003 0203 	and.w	r2, r3, #3
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d10d      	bne.n	800ba72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
       ||
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d009      	beq.n	800ba72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800ba5e:	4b6b      	ldr	r3, [pc, #428]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	091b      	lsrs	r3, r3, #4
 800ba64:	f003 0307 	and.w	r3, r3, #7
 800ba68:	1c5a      	adds	r2, r3, #1
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	685b      	ldr	r3, [r3, #4]
       ||
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d047      	beq.n	800bb02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	73fb      	strb	r3, [r7, #15]
 800ba76:	e044      	b.n	800bb02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b03      	cmp	r3, #3
 800ba7e:	d018      	beq.n	800bab2 <RCCEx_PLLSAI1_Config+0x86>
 800ba80:	2b03      	cmp	r3, #3
 800ba82:	d825      	bhi.n	800bad0 <RCCEx_PLLSAI1_Config+0xa4>
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d002      	beq.n	800ba8e <RCCEx_PLLSAI1_Config+0x62>
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d009      	beq.n	800baa0 <RCCEx_PLLSAI1_Config+0x74>
 800ba8c:	e020      	b.n	800bad0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ba8e:	4b5f      	ldr	r3, [pc, #380]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f003 0302 	and.w	r3, r3, #2
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d11d      	bne.n	800bad6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba9e:	e01a      	b.n	800bad6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800baa0:	4b5a      	ldr	r3, [pc, #360]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d116      	bne.n	800bada <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bab0:	e013      	b.n	800bada <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800bab2:	4b56      	ldr	r3, [pc, #344]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10f      	bne.n	800bade <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800babe:	4b53      	ldr	r3, [pc, #332]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d109      	bne.n	800bade <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bace:	e006      	b.n	800bade <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	73fb      	strb	r3, [r7, #15]
      break;
 800bad4:	e004      	b.n	800bae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800bad6:	bf00      	nop
 800bad8:	e002      	b.n	800bae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800bada:	bf00      	nop
 800badc:	e000      	b.n	800bae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800bade:	bf00      	nop
    }

    if(status == HAL_OK)
 800bae0:	7bfb      	ldrb	r3, [r7, #15]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d10d      	bne.n	800bb02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800bae6:	4b49      	ldr	r3, [pc, #292]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bae8:	68db      	ldr	r3, [r3, #12]
 800baea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6819      	ldr	r1, [r3, #0]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	3b01      	subs	r3, #1
 800baf8:	011b      	lsls	r3, r3, #4
 800bafa:	430b      	orrs	r3, r1
 800bafc:	4943      	ldr	r1, [pc, #268]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bafe:	4313      	orrs	r3, r2
 800bb00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d17c      	bne.n	800bc02 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800bb08:	4b40      	ldr	r3, [pc, #256]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a3f      	ldr	r2, [pc, #252]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bb0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bb12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb14:	f7fa fc88 	bl	8006428 <HAL_GetTick>
 800bb18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bb1a:	e009      	b.n	800bb30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bb1c:	f7fa fc84 	bl	8006428 <HAL_GetTick>
 800bb20:	4602      	mov	r2, r0
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	1ad3      	subs	r3, r2, r3
 800bb26:	2b02      	cmp	r3, #2
 800bb28:	d902      	bls.n	800bb30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	73fb      	strb	r3, [r7, #15]
        break;
 800bb2e:	e005      	b.n	800bb3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bb30:	4b36      	ldr	r3, [pc, #216]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1ef      	bne.n	800bb1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800bb3c:	7bfb      	ldrb	r3, [r7, #15]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d15f      	bne.n	800bc02 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d110      	bne.n	800bb6a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bb48:	4b30      	ldr	r3, [pc, #192]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bb4a:	691b      	ldr	r3, [r3, #16]
 800bb4c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800bb50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	6892      	ldr	r2, [r2, #8]
 800bb58:	0211      	lsls	r1, r2, #8
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	68d2      	ldr	r2, [r2, #12]
 800bb5e:	06d2      	lsls	r2, r2, #27
 800bb60:	430a      	orrs	r2, r1
 800bb62:	492a      	ldr	r1, [pc, #168]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bb64:	4313      	orrs	r3, r2
 800bb66:	610b      	str	r3, [r1, #16]
 800bb68:	e027      	b.n	800bbba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d112      	bne.n	800bb96 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bb70:	4b26      	ldr	r3, [pc, #152]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bb72:	691b      	ldr	r3, [r3, #16]
 800bb74:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800bb78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	6892      	ldr	r2, [r2, #8]
 800bb80:	0211      	lsls	r1, r2, #8
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	6912      	ldr	r2, [r2, #16]
 800bb86:	0852      	lsrs	r2, r2, #1
 800bb88:	3a01      	subs	r2, #1
 800bb8a:	0552      	lsls	r2, r2, #21
 800bb8c:	430a      	orrs	r2, r1
 800bb8e:	491f      	ldr	r1, [pc, #124]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bb90:	4313      	orrs	r3, r2
 800bb92:	610b      	str	r3, [r1, #16]
 800bb94:	e011      	b.n	800bbba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bb96:	4b1d      	ldr	r3, [pc, #116]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bb98:	691b      	ldr	r3, [r3, #16]
 800bb9a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800bb9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	6892      	ldr	r2, [r2, #8]
 800bba6:	0211      	lsls	r1, r2, #8
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	6952      	ldr	r2, [r2, #20]
 800bbac:	0852      	lsrs	r2, r2, #1
 800bbae:	3a01      	subs	r2, #1
 800bbb0:	0652      	lsls	r2, r2, #25
 800bbb2:	430a      	orrs	r2, r1
 800bbb4:	4915      	ldr	r1, [pc, #84]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800bbba:	4b14      	ldr	r3, [pc, #80]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a13      	ldr	r2, [pc, #76]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bbc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bbc4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbc6:	f7fa fc2f 	bl	8006428 <HAL_GetTick>
 800bbca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bbcc:	e009      	b.n	800bbe2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bbce:	f7fa fc2b 	bl	8006428 <HAL_GetTick>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	2b02      	cmp	r3, #2
 800bbda:	d902      	bls.n	800bbe2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800bbdc:	2303      	movs	r3, #3
 800bbde:	73fb      	strb	r3, [r7, #15]
          break;
 800bbe0:	e005      	b.n	800bbee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bbe2:	4b0a      	ldr	r3, [pc, #40]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d0ef      	beq.n	800bbce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800bbee:	7bfb      	ldrb	r3, [r7, #15]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d106      	bne.n	800bc02 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800bbf4:	4b05      	ldr	r3, [pc, #20]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bbf6:	691a      	ldr	r2, [r3, #16]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	699b      	ldr	r3, [r3, #24]
 800bbfc:	4903      	ldr	r1, [pc, #12]	; (800bc0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800bc02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3710      	adds	r7, #16
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}
 800bc0c:	40021000 	.word	0x40021000

0800bc10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d101      	bne.n	800bc22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e095      	b.n	800bd4e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d108      	bne.n	800bc3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc32:	d009      	beq.n	800bc48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	61da      	str	r2, [r3, #28]
 800bc3a:	e005      	b.n	800bc48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d106      	bne.n	800bc68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f7f6 fbee 	bl	8002444 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2202      	movs	r2, #2
 800bc6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bc88:	d902      	bls.n	800bc90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	60fb      	str	r3, [r7, #12]
 800bc8e:	e002      	b.n	800bc96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bc90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bc9e:	d007      	beq.n	800bcb0 <HAL_SPI_Init+0xa0>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bca8:	d002      	beq.n	800bcb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bcc0:	431a      	orrs	r2, r3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	691b      	ldr	r3, [r3, #16]
 800bcc6:	f003 0302 	and.w	r3, r3, #2
 800bcca:	431a      	orrs	r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	695b      	ldr	r3, [r3, #20]
 800bcd0:	f003 0301 	and.w	r3, r3, #1
 800bcd4:	431a      	orrs	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	699b      	ldr	r3, [r3, #24]
 800bcda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bcde:	431a      	orrs	r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	69db      	ldr	r3, [r3, #28]
 800bce4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bce8:	431a      	orrs	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a1b      	ldr	r3, [r3, #32]
 800bcee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcf2:	ea42 0103 	orr.w	r1, r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcfa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	430a      	orrs	r2, r1
 800bd04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	699b      	ldr	r3, [r3, #24]
 800bd0a:	0c1b      	lsrs	r3, r3, #16
 800bd0c:	f003 0204 	and.w	r2, r3, #4
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd14:	f003 0310 	and.w	r3, r3, #16
 800bd18:	431a      	orrs	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd1e:	f003 0308 	and.w	r3, r3, #8
 800bd22:	431a      	orrs	r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bd2c:	ea42 0103 	orr.w	r1, r2, r3
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	430a      	orrs	r2, r1
 800bd3c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
	...

0800bd58 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b086      	sub	sp, #24
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	4613      	mov	r3, r2
 800bd64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bd66:	2300      	movs	r3, #0
 800bd68:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d101      	bne.n	800bd78 <HAL_SPI_Transmit_DMA+0x20>
 800bd74:	2302      	movs	r3, #2
 800bd76:	e0d4      	b.n	800bf22 <HAL_SPI_Transmit_DMA+0x1ca>
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d002      	beq.n	800bd92 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bd90:	e0c2      	b.n	800bf18 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d002      	beq.n	800bd9e <HAL_SPI_Transmit_DMA+0x46>
 800bd98:	88fb      	ldrh	r3, [r7, #6]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d102      	bne.n	800bda4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bda2:	e0b9      	b.n	800bf18 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2203      	movs	r2, #3
 800bda8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	68ba      	ldr	r2, [r7, #8]
 800bdb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	88fa      	ldrh	r2, [r7, #6]
 800bdbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	88fa      	ldrh	r2, [r7, #6]
 800bdc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdee:	d10f      	bne.n	800be10 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdfe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be0e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be14:	4a45      	ldr	r2, [pc, #276]	; (800bf2c <HAL_SPI_Transmit_DMA+0x1d4>)
 800be16:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be1c:	4a44      	ldr	r2, [pc, #272]	; (800bf30 <HAL_SPI_Transmit_DMA+0x1d8>)
 800be1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be24:	4a43      	ldr	r2, [pc, #268]	; (800bf34 <HAL_SPI_Transmit_DMA+0x1dc>)
 800be26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be2c:	2200      	movs	r2, #0
 800be2e:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	685a      	ldr	r2, [r3, #4]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800be3e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800be48:	d82d      	bhi.n	800bea6 <HAL_SPI_Transmit_DMA+0x14e>
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be4e:	699b      	ldr	r3, [r3, #24]
 800be50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be54:	d127      	bne.n	800bea6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	f003 0301 	and.w	r3, r3, #1
 800be60:	2b00      	cmp	r3, #0
 800be62:	d10f      	bne.n	800be84 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	685a      	ldr	r2, [r3, #4]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800be72:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be78:	b29b      	uxth	r3, r3
 800be7a:	085b      	lsrs	r3, r3, #1
 800be7c:	b29a      	uxth	r2, r3
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	87da      	strh	r2, [r3, #62]	; 0x3e
 800be82:	e010      	b.n	800bea6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	685a      	ldr	r2, [r3, #4]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be92:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be98:	b29b      	uxth	r3, r3
 800be9a:	085b      	lsrs	r3, r3, #1
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	3301      	adds	r3, #1
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beae:	4619      	mov	r1, r3
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	330c      	adds	r3, #12
 800beb6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bebc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bebe:	f7fb ff4d 	bl	8007d5c <HAL_DMA_Start_IT>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d008      	beq.n	800beda <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800becc:	f043 0210 	orr.w	r2, r3, #16
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800bed4:	2301      	movs	r3, #1
 800bed6:	75fb      	strb	r3, [r7, #23]

    goto error;
 800bed8:	e01e      	b.n	800bf18 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee4:	2b40      	cmp	r3, #64	; 0x40
 800bee6:	d007      	beq.n	800bef8 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bef6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	685a      	ldr	r2, [r3, #4]
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f042 0220 	orr.w	r2, r2, #32
 800bf06:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	685a      	ldr	r2, [r3, #4]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f042 0202 	orr.w	r2, r2, #2
 800bf16:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bf20:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3718      	adds	r7, #24
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	0800c96f 	.word	0x0800c96f
 800bf30:	0800c791 	.word	0x0800c791
 800bf34:	0800c9c3 	.word	0x0800c9c3

0800bf38 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b086      	sub	sp, #24
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	4613      	mov	r3, r2
 800bf44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bf46:	2300      	movs	r3, #0
 800bf48:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d002      	beq.n	800bf5c <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800bf56:	2302      	movs	r3, #2
 800bf58:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bf5a:	e0fe      	b.n	800c15a <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d110      	bne.n	800bf86 <HAL_SPI_Receive_DMA+0x4e>
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf6c:	d10b      	bne.n	800bf86 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2204      	movs	r2, #4
 800bf72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800bf76:	88fb      	ldrh	r3, [r7, #6]
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	68b9      	ldr	r1, [r7, #8]
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f000 f8fb 	bl	800c178 <HAL_SPI_TransmitReceive_DMA>
 800bf82:	4603      	mov	r3, r0
 800bf84:	e0ee      	b.n	800c164 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d101      	bne.n	800bf94 <HAL_SPI_Receive_DMA+0x5c>
 800bf90:	2302      	movs	r3, #2
 800bf92:	e0e7      	b.n	800c164 <HAL_SPI_Receive_DMA+0x22c>
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2201      	movs	r2, #1
 800bf98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d002      	beq.n	800bfa8 <HAL_SPI_Receive_DMA+0x70>
 800bfa2:	88fb      	ldrh	r3, [r7, #6]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d102      	bne.n	800bfae <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bfac:	e0d5      	b.n	800c15a <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2204      	movs	r2, #4
 800bfb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	68ba      	ldr	r2, [r7, #8]
 800bfc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	88fa      	ldrh	r2, [r7, #6]
 800bfc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	88fa      	ldrh	r2, [r7, #6]
 800bfce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bff2:	d10f      	bne.n	800c014 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c002:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c012:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	685a      	ldr	r2, [r3, #4]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c022:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c02c:	d908      	bls.n	800c040 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	685a      	ldr	r2, [r3, #4]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c03c:	605a      	str	r2, [r3, #4]
 800c03e:	e042      	b.n	800c0c6 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	685a      	ldr	r2, [r3, #4]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c04e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c054:	699b      	ldr	r3, [r3, #24]
 800c056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c05a:	d134      	bne.n	800c0c6 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	685a      	ldr	r2, [r3, #4]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c06a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c072:	b29b      	uxth	r3, r3
 800c074:	f003 0301 	and.w	r3, r3, #1
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d111      	bne.n	800c0a0 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	685a      	ldr	r2, [r3, #4]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c08a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c092:	b29b      	uxth	r3, r3
 800c094:	085b      	lsrs	r3, r3, #1
 800c096:	b29a      	uxth	r2, r3
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c09e:	e012      	b.n	800c0c6 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	685a      	ldr	r2, [r3, #4]
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c0ae:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	085b      	lsrs	r3, r3, #1
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	3301      	adds	r3, #1
 800c0be:	b29a      	uxth	r2, r3
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0ca:	4a28      	ldr	r2, [pc, #160]	; (800c16c <HAL_SPI_Receive_DMA+0x234>)
 800c0cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0d2:	4a27      	ldr	r2, [pc, #156]	; (800c170 <HAL_SPI_Receive_DMA+0x238>)
 800c0d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0da:	4a26      	ldr	r2, [pc, #152]	; (800c174 <HAL_SPI_Receive_DMA+0x23c>)
 800c0dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	330c      	adds	r3, #12
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f6:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0fe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c100:	f7fb fe2c 	bl	8007d5c <HAL_DMA_Start_IT>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d008      	beq.n	800c11c <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c10e:	f043 0210 	orr.w	r2, r3, #16
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c11a:	e01e      	b.n	800c15a <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c126:	2b40      	cmp	r3, #64	; 0x40
 800c128:	d007      	beq.n	800c13a <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c138:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	685a      	ldr	r2, [r3, #4]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f042 0220 	orr.w	r2, r2, #32
 800c148:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	685a      	ldr	r2, [r3, #4]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f042 0201 	orr.w	r2, r2, #1
 800c158:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c162:	7dfb      	ldrb	r3, [r7, #23]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3718      	adds	r7, #24
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	0800c98b 	.word	0x0800c98b
 800c170:	0800c837 	.word	0x0800c837
 800c174:	0800c9c3 	.word	0x0800c9c3

0800c178 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	607a      	str	r2, [r7, #4]
 800c184:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c186:	2300      	movs	r3, #0
 800c188:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c190:	2b01      	cmp	r3, #1
 800c192:	d101      	bne.n	800c198 <HAL_SPI_TransmitReceive_DMA+0x20>
 800c194:	2302      	movs	r3, #2
 800c196:	e164      	b.n	800c462 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c1a6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800c1ae:	7dbb      	ldrb	r3, [r7, #22]
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d00d      	beq.n	800c1d0 <HAL_SPI_TransmitReceive_DMA+0x58>
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1ba:	d106      	bne.n	800c1ca <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d102      	bne.n	800c1ca <HAL_SPI_TransmitReceive_DMA+0x52>
 800c1c4:	7dbb      	ldrb	r3, [r7, #22]
 800c1c6:	2b04      	cmp	r3, #4
 800c1c8:	d002      	beq.n	800c1d0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800c1ca:	2302      	movs	r3, #2
 800c1cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c1ce:	e143      	b.n	800c458 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d005      	beq.n	800c1e2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d002      	beq.n	800c1e2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c1dc:	887b      	ldrh	r3, [r7, #2]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d102      	bne.n	800c1e8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c1e6:	e137      	b.n	800c458 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	2b04      	cmp	r3, #4
 800c1f2:	d003      	beq.n	800c1fc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2205      	movs	r2, #5
 800c1f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2200      	movs	r2, #0
 800c200:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	68ba      	ldr	r2, [r7, #8]
 800c206:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	887a      	ldrh	r2, [r7, #2]
 800c20c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	887a      	ldrh	r2, [r7, #2]
 800c212:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	887a      	ldrh	r2, [r7, #2]
 800c21e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	887a      	ldrh	r2, [r7, #2]
 800c226:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2200      	movs	r2, #0
 800c234:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	685a      	ldr	r2, [r3, #4]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800c244:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c24e:	d908      	bls.n	800c262 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	685a      	ldr	r2, [r3, #4]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c25e:	605a      	str	r2, [r3, #4]
 800c260:	e06f      	b.n	800c342 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	685a      	ldr	r2, [r3, #4]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c270:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c276:	699b      	ldr	r3, [r3, #24]
 800c278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c27c:	d126      	bne.n	800c2cc <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c282:	f003 0301 	and.w	r3, r3, #1
 800c286:	2b00      	cmp	r3, #0
 800c288:	d10f      	bne.n	800c2aa <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	685a      	ldr	r2, [r3, #4]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c298:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	085b      	lsrs	r3, r3, #1
 800c2a2:	b29a      	uxth	r2, r3
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c2a8:	e010      	b.n	800c2cc <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	685a      	ldr	r2, [r3, #4]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2b8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	085b      	lsrs	r3, r3, #1
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2d0:	699b      	ldr	r3, [r3, #24]
 800c2d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2d6:	d134      	bne.n	800c342 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	685a      	ldr	r2, [r3, #4]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c2e6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	f003 0301 	and.w	r3, r3, #1
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d111      	bne.n	800c31c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	685a      	ldr	r2, [r3, #4]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c306:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c30e:	b29b      	uxth	r3, r3
 800c310:	085b      	lsrs	r3, r3, #1
 800c312:	b29a      	uxth	r2, r3
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c31a:	e012      	b.n	800c342 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	685a      	ldr	r2, [r3, #4]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c32a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c332:	b29b      	uxth	r3, r3
 800c334:	085b      	lsrs	r3, r3, #1
 800c336:	b29b      	uxth	r3, r3
 800c338:	3301      	adds	r3, #1
 800c33a:	b29a      	uxth	r2, r3
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	2b04      	cmp	r3, #4
 800c34c:	d108      	bne.n	800c360 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c352:	4a46      	ldr	r2, [pc, #280]	; (800c46c <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 800c354:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c35a:	4a45      	ldr	r2, [pc, #276]	; (800c470 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800c35c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c35e:	e007      	b.n	800c370 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c364:	4a43      	ldr	r2, [pc, #268]	; (800c474 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800c366:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c36c:	4a42      	ldr	r2, [pc, #264]	; (800c478 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800c36e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c374:	4a41      	ldr	r2, [pc, #260]	; (800c47c <HAL_SPI_TransmitReceive_DMA+0x304>)
 800c376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c37c:	2200      	movs	r2, #0
 800c37e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	330c      	adds	r3, #12
 800c38a:	4619      	mov	r1, r3
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c390:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c398:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c39a:	f7fb fcdf 	bl	8007d5c <HAL_DMA_Start_IT>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d008      	beq.n	800c3b6 <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3a8:	f043 0210 	orr.w	r2, r3, #16
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c3b4:	e050      	b.n	800c458 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	685a      	ldr	r2, [r3, #4]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f042 0201 	orr.w	r2, r2, #1
 800c3c4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3da:	2200      	movs	r2, #0
 800c3dc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	330c      	adds	r3, #12
 800c3f6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3fc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c3fe:	f7fb fcad 	bl	8007d5c <HAL_DMA_Start_IT>
 800c402:	4603      	mov	r3, r0
 800c404:	2b00      	cmp	r3, #0
 800c406:	d008      	beq.n	800c41a <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c40c:	f043 0210 	orr.w	r2, r3, #16
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c414:	2301      	movs	r3, #1
 800c416:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c418:	e01e      	b.n	800c458 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c424:	2b40      	cmp	r3, #64	; 0x40
 800c426:	d007      	beq.n	800c438 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c436:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	685a      	ldr	r2, [r3, #4]
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f042 0220 	orr.w	r2, r2, #32
 800c446:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	685a      	ldr	r2, [r3, #4]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f042 0202 	orr.w	r2, r2, #2
 800c456:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2200      	movs	r2, #0
 800c45c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c460:	7dfb      	ldrb	r3, [r7, #23]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3718      	adds	r7, #24
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	0800c98b 	.word	0x0800c98b
 800c470:	0800c837 	.word	0x0800c837
 800c474:	0800c9a7 	.word	0x0800c9a7
 800c478:	0800c8df 	.word	0x0800c8df
 800c47c:	0800c9c3 	.word	0x0800c9c3

0800c480 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c488:	2300      	movs	r3, #0
 800c48a:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00f      	beq.n	800c4b4 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c498:	4618      	mov	r0, r3
 800c49a:	f7fb fcbf 	bl	8007e1c <HAL_DMA_Abort>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d007      	beq.n	800c4b4 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4a8:	f043 0210 	orr.w	r2, r3, #16
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00f      	beq.n	800c4dc <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7fb fcab 	bl	8007e1c <HAL_DMA_Abort>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d007      	beq.n	800c4dc <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4d0:	f043 0210 	orr.w	r2, r3, #16
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	685a      	ldr	r2, [r3, #4]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f022 0203 	bic.w	r2, r2, #3
 800c4ea:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 800c4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
	...

0800c500 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b088      	sub	sp, #32
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10e      	bne.n	800c540 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d009      	beq.n	800c540 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c532:	2b00      	cmp	r3, #0
 800c534:	d004      	beq.n	800c540 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	4798      	blx	r3
    return;
 800c53e:	e0ce      	b.n	800c6de <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	f003 0302 	and.w	r3, r3, #2
 800c546:	2b00      	cmp	r3, #0
 800c548:	d009      	beq.n	800c55e <HAL_SPI_IRQHandler+0x5e>
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c550:	2b00      	cmp	r3, #0
 800c552:	d004      	beq.n	800c55e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	4798      	blx	r3
    return;
 800c55c:	e0bf      	b.n	800c6de <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c55e:	69bb      	ldr	r3, [r7, #24]
 800c560:	f003 0320 	and.w	r3, r3, #32
 800c564:	2b00      	cmp	r3, #0
 800c566:	d10a      	bne.n	800c57e <HAL_SPI_IRQHandler+0x7e>
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d105      	bne.n	800c57e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f000 80b0 	beq.w	800c6de <HAL_SPI_IRQHandler+0x1de>
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	f003 0320 	and.w	r3, r3, #32
 800c584:	2b00      	cmp	r3, #0
 800c586:	f000 80aa 	beq.w	800c6de <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c590:	2b00      	cmp	r3, #0
 800c592:	d023      	beq.n	800c5dc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	2b03      	cmp	r3, #3
 800c59e:	d011      	beq.n	800c5c4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5a4:	f043 0204 	orr.w	r2, r3, #4
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	617b      	str	r3, [r7, #20]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	617b      	str	r3, [r7, #20]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	617b      	str	r3, [r7, #20]
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	e00b      	b.n	800c5dc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	613b      	str	r3, [r7, #16]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	613b      	str	r3, [r7, #16]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	613b      	str	r3, [r7, #16]
 800c5d8:	693b      	ldr	r3, [r7, #16]
        return;
 800c5da:	e080      	b.n	800c6de <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	f003 0320 	and.w	r3, r3, #32
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d014      	beq.n	800c610 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5ea:	f043 0201 	orr.w	r2, r3, #1
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	60fb      	str	r3, [r7, #12]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	60fb      	str	r3, [r7, #12]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c60c:	601a      	str	r2, [r3, #0]
 800c60e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c616:	2b00      	cmp	r3, #0
 800c618:	d00c      	beq.n	800c634 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c61e:	f043 0208 	orr.w	r2, r3, #8
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c626:	2300      	movs	r3, #0
 800c628:	60bb      	str	r3, [r7, #8]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	60bb      	str	r3, [r7, #8]
 800c632:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d04f      	beq.n	800c6dc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	685a      	ldr	r2, [r3, #4]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c64a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2201      	movs	r2, #1
 800c650:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	f003 0302 	and.w	r3, r3, #2
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d104      	bne.n	800c668 <HAL_SPI_IRQHandler+0x168>
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	f003 0301 	and.w	r3, r3, #1
 800c664:	2b00      	cmp	r3, #0
 800c666:	d034      	beq.n	800c6d2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	685a      	ldr	r2, [r3, #4]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f022 0203 	bic.w	r2, r2, #3
 800c676:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d011      	beq.n	800c6a4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c684:	4a17      	ldr	r2, [pc, #92]	; (800c6e4 <HAL_SPI_IRQHandler+0x1e4>)
 800c686:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7fb fc03 	bl	8007e98 <HAL_DMA_Abort_IT>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d005      	beq.n	800c6a4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c69c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d016      	beq.n	800c6da <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6b0:	4a0c      	ldr	r2, [pc, #48]	; (800c6e4 <HAL_SPI_IRQHandler+0x1e4>)
 800c6b2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7fb fbed 	bl	8007e98 <HAL_DMA_Abort_IT>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d00a      	beq.n	800c6da <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800c6d0:	e003      	b.n	800c6da <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f844 	bl	800c760 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c6d8:	e000      	b.n	800c6dc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800c6da:	bf00      	nop
    return;
 800c6dc:	bf00      	nop
  }
}
 800c6de:	3720      	adds	r7, #32
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	0800ca03 	.word	0x0800ca03

0800c6e8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800c6f0:	bf00      	nop
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c704:	bf00      	nop
 800c706:	370c      	adds	r7, #12
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr

0800c710 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c718:	bf00      	nop
 800c71a:	370c      	adds	r7, #12
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c724:	b480      	push	{r7}
 800c726:	b083      	sub	sp, #12
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800c72c:	bf00      	nop
 800c72e:	370c      	adds	r7, #12
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr

0800c738 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800c740:	bf00      	nop
 800c742:	370c      	adds	r7, #12
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr

0800c74c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b083      	sub	sp, #12
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800c754:	bf00      	nop
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c768:	bf00      	nop
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c782:	b2db      	uxtb	r3, r3
}
 800c784:	4618      	mov	r0, r3
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b086      	sub	sp, #24
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c79c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c79e:	f7f9 fe43 	bl	8006428 <HAL_GetTick>
 800c7a2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f003 0320 	and.w	r3, r3, #32
 800c7ae:	2b20      	cmp	r3, #32
 800c7b0:	d03b      	beq.n	800c82a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	685a      	ldr	r2, [r3, #4]
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f022 0220 	bic.w	r2, r2, #32
 800c7c0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	685a      	ldr	r2, [r3, #4]
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f022 0202 	bic.w	r2, r2, #2
 800c7d0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c7d2:	693a      	ldr	r2, [r7, #16]
 800c7d4:	2164      	movs	r1, #100	; 0x64
 800c7d6:	6978      	ldr	r0, [r7, #20]
 800c7d8:	f000 fa9e 	bl	800cd18 <SPI_EndRxTxTransaction>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d005      	beq.n	800c7ee <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7e6:	f043 0220 	orr.w	r2, r3, #32
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d10a      	bne.n	800c80c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	60fb      	str	r3, [r7, #12]
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	60fb      	str	r3, [r7, #12]
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	60fb      	str	r3, [r7, #12]
 800c80a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	2200      	movs	r2, #0
 800c810:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	2201      	movs	r2, #1
 800c816:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d003      	beq.n	800c82a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c822:	6978      	ldr	r0, [r7, #20]
 800c824:	f7ff ff9c 	bl	800c760 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c828:	e002      	b.n	800c830 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800c82a:	6978      	ldr	r0, [r7, #20]
 800c82c:	f7ff ff5c 	bl	800c6e8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c830:	3718      	adds	r7, #24
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}

0800c836 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c836:	b580      	push	{r7, lr}
 800c838:	b084      	sub	sp, #16
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c842:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c844:	f7f9 fdf0 	bl	8006428 <HAL_GetTick>
 800c848:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 0320 	and.w	r3, r3, #32
 800c854:	2b20      	cmp	r3, #32
 800c856:	d03c      	beq.n	800c8d2 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	685a      	ldr	r2, [r3, #4]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f022 0220 	bic.w	r2, r2, #32
 800c866:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d10d      	bne.n	800c88c <SPI_DMAReceiveCplt+0x56>
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c878:	d108      	bne.n	800c88c <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	685a      	ldr	r2, [r3, #4]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f022 0203 	bic.w	r2, r2, #3
 800c888:	605a      	str	r2, [r3, #4]
 800c88a:	e007      	b.n	800c89c <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	685a      	ldr	r2, [r3, #4]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f022 0201 	bic.w	r2, r2, #1
 800c89a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	2164      	movs	r1, #100	; 0x64
 800c8a0:	68f8      	ldr	r0, [r7, #12]
 800c8a2:	f000 f9e1 	bl	800cc68 <SPI_EndRxTransaction>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d002      	beq.n	800c8b2 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2220      	movs	r2, #32
 800c8b0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d003      	beq.n	800c8d2 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	f7ff ff48 	bl	800c760 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c8d0:	e002      	b.n	800c8d8 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800c8d2:	68f8      	ldr	r0, [r7, #12]
 800c8d4:	f7ff ff12 	bl	800c6fc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b084      	sub	sp, #16
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ea:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c8ec:	f7f9 fd9c 	bl	8006428 <HAL_GetTick>
 800c8f0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f003 0320 	and.w	r3, r3, #32
 800c8fc:	2b20      	cmp	r3, #32
 800c8fe:	d030      	beq.n	800c962 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	685a      	ldr	r2, [r3, #4]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f022 0220 	bic.w	r2, r2, #32
 800c90e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c910:	68ba      	ldr	r2, [r7, #8]
 800c912:	2164      	movs	r1, #100	; 0x64
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f000 f9ff 	bl	800cd18 <SPI_EndRxTxTransaction>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d005      	beq.n	800c92c <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c924:	f043 0220 	orr.w	r2, r3, #32
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	685a      	ldr	r2, [r3, #4]
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f022 0203 	bic.w	r2, r2, #3
 800c93a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2200      	movs	r2, #0
 800c940:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2200      	movs	r2, #0
 800c946:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2201      	movs	r2, #1
 800c94e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c956:	2b00      	cmp	r3, #0
 800c958:	d003      	beq.n	800c962 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c95a:	68f8      	ldr	r0, [r7, #12]
 800c95c:	f7ff ff00 	bl	800c760 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c960:	e002      	b.n	800c968 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	f7ff fed4 	bl	800c710 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b084      	sub	sp, #16
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c97a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f7ff fed1 	bl	800c724 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c982:	bf00      	nop
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b084      	sub	sp, #16
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c996:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f7ff fecd 	bl	800c738 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c99e:	bf00      	nop
 800c9a0:	3710      	adds	r7, #16
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b084      	sub	sp, #16
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9b2:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800c9b4:	68f8      	ldr	r0, [r7, #12]
 800c9b6:	f7ff fec9 	bl	800c74c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c9ba:	bf00      	nop
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b084      	sub	sp, #16
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ce:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	685a      	ldr	r2, [r3, #4]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f022 0203 	bic.w	r2, r2, #3
 800c9de:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9e4:	f043 0210 	orr.w	r2, r3, #16
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	f7ff feb3 	bl	800c760 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c9fa:	bf00      	nop
 800c9fc:	3710      	adds	r7, #16
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b084      	sub	sp, #16
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca0e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2200      	movs	r2, #0
 800ca14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	f7ff fe9e 	bl	800c760 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ca24:	bf00      	nop
 800ca26:	3710      	adds	r7, #16
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b088      	sub	sp, #32
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	603b      	str	r3, [r7, #0]
 800ca38:	4613      	mov	r3, r2
 800ca3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ca3c:	f7f9 fcf4 	bl	8006428 <HAL_GetTick>
 800ca40:	4602      	mov	r2, r0
 800ca42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca44:	1a9b      	subs	r3, r3, r2
 800ca46:	683a      	ldr	r2, [r7, #0]
 800ca48:	4413      	add	r3, r2
 800ca4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ca4c:	f7f9 fcec 	bl	8006428 <HAL_GetTick>
 800ca50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ca52:	4b39      	ldr	r3, [pc, #228]	; (800cb38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	015b      	lsls	r3, r3, #5
 800ca58:	0d1b      	lsrs	r3, r3, #20
 800ca5a:	69fa      	ldr	r2, [r7, #28]
 800ca5c:	fb02 f303 	mul.w	r3, r2, r3
 800ca60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ca62:	e054      	b.n	800cb0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca6a:	d050      	beq.n	800cb0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ca6c:	f7f9 fcdc 	bl	8006428 <HAL_GetTick>
 800ca70:	4602      	mov	r2, r0
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	1ad3      	subs	r3, r2, r3
 800ca76:	69fa      	ldr	r2, [r7, #28]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d902      	bls.n	800ca82 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ca7c:	69fb      	ldr	r3, [r7, #28]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d13d      	bne.n	800cafe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	685a      	ldr	r2, [r3, #4]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ca90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ca9a:	d111      	bne.n	800cac0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caa4:	d004      	beq.n	800cab0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	689b      	ldr	r3, [r3, #8]
 800caaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800caae:	d107      	bne.n	800cac0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cabe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cac8:	d10f      	bne.n	800caea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cad8:	601a      	str	r2, [r3, #0]
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cae8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2201      	movs	r2, #1
 800caee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2200      	movs	r2, #0
 800caf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cafa:	2303      	movs	r3, #3
 800cafc:	e017      	b.n	800cb2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d101      	bne.n	800cb08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cb04:	2300      	movs	r3, #0
 800cb06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	3b01      	subs	r3, #1
 800cb0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	689a      	ldr	r2, [r3, #8]
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	4013      	ands	r3, r2
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	bf0c      	ite	eq
 800cb1e:	2301      	moveq	r3, #1
 800cb20:	2300      	movne	r3, #0
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	461a      	mov	r2, r3
 800cb26:	79fb      	ldrb	r3, [r7, #7]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d19b      	bne.n	800ca64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3720      	adds	r7, #32
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	20000024 	.word	0x20000024

0800cb3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b08a      	sub	sp, #40	; 0x28
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	607a      	str	r2, [r7, #4]
 800cb48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800cb4e:	f7f9 fc6b 	bl	8006428 <HAL_GetTick>
 800cb52:	4602      	mov	r2, r0
 800cb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb56:	1a9b      	subs	r3, r3, r2
 800cb58:	683a      	ldr	r2, [r7, #0]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800cb5e:	f7f9 fc63 	bl	8006428 <HAL_GetTick>
 800cb62:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	330c      	adds	r3, #12
 800cb6a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800cb6c:	4b3d      	ldr	r3, [pc, #244]	; (800cc64 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	4613      	mov	r3, r2
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	4413      	add	r3, r2
 800cb76:	00da      	lsls	r2, r3, #3
 800cb78:	1ad3      	subs	r3, r2, r3
 800cb7a:	0d1b      	lsrs	r3, r3, #20
 800cb7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb7e:	fb02 f303 	mul.w	r3, r2, r3
 800cb82:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800cb84:	e060      	b.n	800cc48 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cb8c:	d107      	bne.n	800cb9e <SPI_WaitFifoStateUntilTimeout+0x62>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d104      	bne.n	800cb9e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800cb94:	69fb      	ldr	r3, [r7, #28]
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800cb9c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba4:	d050      	beq.n	800cc48 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cba6:	f7f9 fc3f 	bl	8006428 <HAL_GetTick>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	6a3b      	ldr	r3, [r7, #32]
 800cbae:	1ad3      	subs	r3, r2, r3
 800cbb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d902      	bls.n	800cbbc <SPI_WaitFifoStateUntilTimeout+0x80>
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d13d      	bne.n	800cc38 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	685a      	ldr	r2, [r3, #4]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cbca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cbd4:	d111      	bne.n	800cbfa <SPI_WaitFifoStateUntilTimeout+0xbe>
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cbde:	d004      	beq.n	800cbea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbe8:	d107      	bne.n	800cbfa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cbf8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc02:	d10f      	bne.n	800cc24 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cc12:	601a      	str	r2, [r3, #0]
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cc22:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2201      	movs	r2, #1
 800cc28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cc34:	2303      	movs	r3, #3
 800cc36:	e010      	b.n	800cc5a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d101      	bne.n	800cc42 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	3b01      	subs	r3, #1
 800cc46:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	689a      	ldr	r2, [r3, #8]
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	4013      	ands	r3, r2
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d196      	bne.n	800cb86 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3728      	adds	r7, #40	; 0x28
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	20000024 	.word	0x20000024

0800cc68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b086      	sub	sp, #24
 800cc6c:	af02      	add	r7, sp, #8
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc7c:	d111      	bne.n	800cca2 <SPI_EndRxTransaction+0x3a>
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc86:	d004      	beq.n	800cc92 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	689b      	ldr	r3, [r3, #8]
 800cc8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc90:	d107      	bne.n	800cca2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cca0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	2180      	movs	r1, #128	; 0x80
 800ccac:	68f8      	ldr	r0, [r7, #12]
 800ccae:	f7ff febd 	bl	800ca2c <SPI_WaitFlagStateUntilTimeout>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d007      	beq.n	800ccc8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccbc:	f043 0220 	orr.w	r2, r3, #32
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ccc4:	2303      	movs	r3, #3
 800ccc6:	e023      	b.n	800cd10 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ccd0:	d11d      	bne.n	800cd0e <SPI_EndRxTransaction+0xa6>
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccda:	d004      	beq.n	800cce6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cce4:	d113      	bne.n	800cd0e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	9300      	str	r3, [sp, #0]
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ccf2:	68f8      	ldr	r0, [r7, #12]
 800ccf4:	f7ff ff22 	bl	800cb3c <SPI_WaitFifoStateUntilTimeout>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d007      	beq.n	800cd0e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd02:	f043 0220 	orr.w	r2, r3, #32
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800cd0a:	2303      	movs	r3, #3
 800cd0c:	e000      	b.n	800cd10 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800cd0e:	2300      	movs	r3, #0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b086      	sub	sp, #24
 800cd1c:	af02      	add	r7, sp, #8
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	9300      	str	r3, [sp, #0]
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f7ff ff03 	bl	800cb3c <SPI_WaitFifoStateUntilTimeout>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d007      	beq.n	800cd4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd40:	f043 0220 	orr.w	r2, r3, #32
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	e027      	b.n	800cd9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	9300      	str	r3, [sp, #0]
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	2200      	movs	r2, #0
 800cd54:	2180      	movs	r1, #128	; 0x80
 800cd56:	68f8      	ldr	r0, [r7, #12]
 800cd58:	f7ff fe68 	bl	800ca2c <SPI_WaitFlagStateUntilTimeout>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d007      	beq.n	800cd72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd66:	f043 0220 	orr.w	r2, r3, #32
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cd6e:	2303      	movs	r3, #3
 800cd70:	e014      	b.n	800cd9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	9300      	str	r3, [sp, #0]
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800cd7e:	68f8      	ldr	r0, [r7, #12]
 800cd80:	f7ff fedc 	bl	800cb3c <SPI_WaitFifoStateUntilTimeout>
 800cd84:	4603      	mov	r3, r0
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d007      	beq.n	800cd9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd8e:	f043 0220 	orr.w	r2, r3, #32
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cd96:	2303      	movs	r3, #3
 800cd98:	e000      	b.n	800cd9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800cd9a:	2300      	movs	r3, #0
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d101      	bne.n	800cdb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e049      	b.n	800ce4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d106      	bne.n	800cdd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f7f8 ff10 	bl	8005bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2202      	movs	r2, #2
 800cdd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	3304      	adds	r3, #4
 800cde0:	4619      	mov	r1, r3
 800cde2:	4610      	mov	r0, r2
 800cde4:	f000 fb02 	bl	800d3ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2201      	movs	r2, #1
 800cdec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2201      	movs	r2, #1
 800ce14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2201      	movs	r2, #1
 800ce44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce48:	2300      	movs	r3, #0
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3708      	adds	r7, #8
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
	...

0800ce54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d001      	beq.n	800ce6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e033      	b.n	800ced4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2202      	movs	r2, #2
 800ce70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a19      	ldr	r2, [pc, #100]	; (800cee0 <HAL_TIM_Base_Start+0x8c>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d009      	beq.n	800ce92 <HAL_TIM_Base_Start+0x3e>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce86:	d004      	beq.n	800ce92 <HAL_TIM_Base_Start+0x3e>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a15      	ldr	r2, [pc, #84]	; (800cee4 <HAL_TIM_Base_Start+0x90>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d115      	bne.n	800cebe <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	689a      	ldr	r2, [r3, #8]
 800ce98:	4b13      	ldr	r3, [pc, #76]	; (800cee8 <HAL_TIM_Base_Start+0x94>)
 800ce9a:	4013      	ands	r3, r2
 800ce9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2b06      	cmp	r3, #6
 800cea2:	d015      	beq.n	800ced0 <HAL_TIM_Base_Start+0x7c>
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ceaa:	d011      	beq.n	800ced0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f042 0201 	orr.w	r2, r2, #1
 800ceba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cebc:	e008      	b.n	800ced0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f042 0201 	orr.w	r2, r2, #1
 800cecc:	601a      	str	r2, [r3, #0]
 800cece:	e000      	b.n	800ced2 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ced0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ced2:	2300      	movs	r3, #0
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3714      	adds	r7, #20
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	40012c00 	.word	0x40012c00
 800cee4:	40014000 	.word	0x40014000
 800cee8:	00010007 	.word	0x00010007

0800ceec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b085      	sub	sp, #20
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cefa:	b2db      	uxtb	r3, r3
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d001      	beq.n	800cf04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cf00:	2301      	movs	r3, #1
 800cf02:	e03b      	b.n	800cf7c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2202      	movs	r2, #2
 800cf08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	68da      	ldr	r2, [r3, #12]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f042 0201 	orr.w	r2, r2, #1
 800cf1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a19      	ldr	r2, [pc, #100]	; (800cf88 <HAL_TIM_Base_Start_IT+0x9c>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d009      	beq.n	800cf3a <HAL_TIM_Base_Start_IT+0x4e>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf2e:	d004      	beq.n	800cf3a <HAL_TIM_Base_Start_IT+0x4e>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a15      	ldr	r2, [pc, #84]	; (800cf8c <HAL_TIM_Base_Start_IT+0xa0>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d115      	bne.n	800cf66 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	689a      	ldr	r2, [r3, #8]
 800cf40:	4b13      	ldr	r3, [pc, #76]	; (800cf90 <HAL_TIM_Base_Start_IT+0xa4>)
 800cf42:	4013      	ands	r3, r2
 800cf44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2b06      	cmp	r3, #6
 800cf4a:	d015      	beq.n	800cf78 <HAL_TIM_Base_Start_IT+0x8c>
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf52:	d011      	beq.n	800cf78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f042 0201 	orr.w	r2, r2, #1
 800cf62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf64:	e008      	b.n	800cf78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f042 0201 	orr.w	r2, r2, #1
 800cf74:	601a      	str	r2, [r3, #0]
 800cf76:	e000      	b.n	800cf7a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cf7a:	2300      	movs	r3, #0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3714      	adds	r7, #20
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr
 800cf88:	40012c00 	.word	0x40012c00
 800cf8c:	40014000 	.word	0x40014000
 800cf90:	00010007 	.word	0x00010007

0800cf94 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	68da      	ldr	r2, [r3, #12]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f022 0201 	bic.w	r2, r2, #1
 800cfaa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	6a1a      	ldr	r2, [r3, #32]
 800cfb2:	f241 1311 	movw	r3, #4369	; 0x1111
 800cfb6:	4013      	ands	r3, r2
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10f      	bne.n	800cfdc <HAL_TIM_Base_Stop_IT+0x48>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	6a1a      	ldr	r2, [r3, #32]
 800cfc2:	f240 4344 	movw	r3, #1092	; 0x444
 800cfc6:	4013      	ands	r3, r2
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d107      	bne.n	800cfdc <HAL_TIM_Base_Stop_IT+0x48>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	681a      	ldr	r2, [r3, #0]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f022 0201 	bic.w	r2, r2, #1
 800cfda:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cfe4:	2300      	movs	r3, #0
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	370c      	adds	r7, #12
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr

0800cff2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b084      	sub	sp, #16
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	68db      	ldr	r3, [r3, #12]
 800d000:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	f003 0302 	and.w	r3, r3, #2
 800d010:	2b00      	cmp	r3, #0
 800d012:	d020      	beq.n	800d056 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f003 0302 	and.w	r3, r3, #2
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d01b      	beq.n	800d056 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f06f 0202 	mvn.w	r2, #2
 800d026:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2201      	movs	r2, #1
 800d02c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	699b      	ldr	r3, [r3, #24]
 800d034:	f003 0303 	and.w	r3, r3, #3
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d003      	beq.n	800d044 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 f9b7 	bl	800d3b0 <HAL_TIM_IC_CaptureCallback>
 800d042:	e005      	b.n	800d050 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 f9a9 	bl	800d39c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 f9ba 	bl	800d3c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	f003 0304 	and.w	r3, r3, #4
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d020      	beq.n	800d0a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f003 0304 	and.w	r3, r3, #4
 800d066:	2b00      	cmp	r3, #0
 800d068:	d01b      	beq.n	800d0a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f06f 0204 	mvn.w	r2, #4
 800d072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2202      	movs	r2, #2
 800d078:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	699b      	ldr	r3, [r3, #24]
 800d080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d084:	2b00      	cmp	r3, #0
 800d086:	d003      	beq.n	800d090 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 f991 	bl	800d3b0 <HAL_TIM_IC_CaptureCallback>
 800d08e:	e005      	b.n	800d09c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f000 f983 	bl	800d39c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f000 f994 	bl	800d3c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	f003 0308 	and.w	r3, r3, #8
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d020      	beq.n	800d0ee <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f003 0308 	and.w	r3, r3, #8
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d01b      	beq.n	800d0ee <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f06f 0208 	mvn.w	r2, #8
 800d0be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2204      	movs	r2, #4
 800d0c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	69db      	ldr	r3, [r3, #28]
 800d0cc:	f003 0303 	and.w	r3, r3, #3
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d003      	beq.n	800d0dc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 f96b 	bl	800d3b0 <HAL_TIM_IC_CaptureCallback>
 800d0da:	e005      	b.n	800d0e8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 f95d 	bl	800d39c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f000 f96e 	bl	800d3c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	f003 0310 	and.w	r3, r3, #16
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d020      	beq.n	800d13a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f003 0310 	and.w	r3, r3, #16
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d01b      	beq.n	800d13a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f06f 0210 	mvn.w	r2, #16
 800d10a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2208      	movs	r2, #8
 800d110:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	69db      	ldr	r3, [r3, #28]
 800d118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d003      	beq.n	800d128 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f000 f945 	bl	800d3b0 <HAL_TIM_IC_CaptureCallback>
 800d126:	e005      	b.n	800d134 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 f937 	bl	800d39c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 f948 	bl	800d3c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2200      	movs	r2, #0
 800d138:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	f003 0301 	and.w	r3, r3, #1
 800d140:	2b00      	cmp	r3, #0
 800d142:	d00c      	beq.n	800d15e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f003 0301 	and.w	r3, r3, #1
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d007      	beq.n	800d15e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f06f 0201 	mvn.w	r2, #1
 800d156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 f915 	bl	800d388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d164:	2b00      	cmp	r3, #0
 800d166:	d00c      	beq.n	800d182 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d007      	beq.n	800d182 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d17a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 faa3 	bl	800d6c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00c      	beq.n	800d1a6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d192:	2b00      	cmp	r3, #0
 800d194:	d007      	beq.n	800d1a6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d19e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 fa9b 	bl	800d6dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d00c      	beq.n	800d1ca <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d007      	beq.n	800d1ca <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d1c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f000 f907 	bl	800d3d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	f003 0320 	and.w	r3, r3, #32
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d00c      	beq.n	800d1ee <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f003 0320 	and.w	r3, r3, #32
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d007      	beq.n	800d1ee <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f06f 0220 	mvn.w	r2, #32
 800d1e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 fa63 	bl	800d6b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d1ee:	bf00      	nop
 800d1f0:	3710      	adds	r7, #16
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b084      	sub	sp, #16
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
 800d1fe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d200:	2300      	movs	r3, #0
 800d202:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d101      	bne.n	800d212 <HAL_TIM_ConfigClockSource+0x1c>
 800d20e:	2302      	movs	r3, #2
 800d210:	e0b6      	b.n	800d380 <HAL_TIM_ConfigClockSource+0x18a>
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2201      	movs	r2, #1
 800d216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2202      	movs	r2, #2
 800d21e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d230:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d234:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d23c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	68ba      	ldr	r2, [r7, #8]
 800d244:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d24e:	d03e      	beq.n	800d2ce <HAL_TIM_ConfigClockSource+0xd8>
 800d250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d254:	f200 8087 	bhi.w	800d366 <HAL_TIM_ConfigClockSource+0x170>
 800d258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d25c:	f000 8086 	beq.w	800d36c <HAL_TIM_ConfigClockSource+0x176>
 800d260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d264:	d87f      	bhi.n	800d366 <HAL_TIM_ConfigClockSource+0x170>
 800d266:	2b70      	cmp	r3, #112	; 0x70
 800d268:	d01a      	beq.n	800d2a0 <HAL_TIM_ConfigClockSource+0xaa>
 800d26a:	2b70      	cmp	r3, #112	; 0x70
 800d26c:	d87b      	bhi.n	800d366 <HAL_TIM_ConfigClockSource+0x170>
 800d26e:	2b60      	cmp	r3, #96	; 0x60
 800d270:	d050      	beq.n	800d314 <HAL_TIM_ConfigClockSource+0x11e>
 800d272:	2b60      	cmp	r3, #96	; 0x60
 800d274:	d877      	bhi.n	800d366 <HAL_TIM_ConfigClockSource+0x170>
 800d276:	2b50      	cmp	r3, #80	; 0x50
 800d278:	d03c      	beq.n	800d2f4 <HAL_TIM_ConfigClockSource+0xfe>
 800d27a:	2b50      	cmp	r3, #80	; 0x50
 800d27c:	d873      	bhi.n	800d366 <HAL_TIM_ConfigClockSource+0x170>
 800d27e:	2b40      	cmp	r3, #64	; 0x40
 800d280:	d058      	beq.n	800d334 <HAL_TIM_ConfigClockSource+0x13e>
 800d282:	2b40      	cmp	r3, #64	; 0x40
 800d284:	d86f      	bhi.n	800d366 <HAL_TIM_ConfigClockSource+0x170>
 800d286:	2b30      	cmp	r3, #48	; 0x30
 800d288:	d064      	beq.n	800d354 <HAL_TIM_ConfigClockSource+0x15e>
 800d28a:	2b30      	cmp	r3, #48	; 0x30
 800d28c:	d86b      	bhi.n	800d366 <HAL_TIM_ConfigClockSource+0x170>
 800d28e:	2b20      	cmp	r3, #32
 800d290:	d060      	beq.n	800d354 <HAL_TIM_ConfigClockSource+0x15e>
 800d292:	2b20      	cmp	r3, #32
 800d294:	d867      	bhi.n	800d366 <HAL_TIM_ConfigClockSource+0x170>
 800d296:	2b00      	cmp	r3, #0
 800d298:	d05c      	beq.n	800d354 <HAL_TIM_ConfigClockSource+0x15e>
 800d29a:	2b10      	cmp	r3, #16
 800d29c:	d05a      	beq.n	800d354 <HAL_TIM_ConfigClockSource+0x15e>
 800d29e:	e062      	b.n	800d366 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d2b0:	f000 f97a 	bl	800d5a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	689b      	ldr	r3, [r3, #8]
 800d2ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d2c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	68ba      	ldr	r2, [r7, #8]
 800d2ca:	609a      	str	r2, [r3, #8]
      break;
 800d2cc:	e04f      	b.n	800d36e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d2de:	f000 f963 	bl	800d5a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	689a      	ldr	r2, [r3, #8]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d2f0:	609a      	str	r2, [r3, #8]
      break;
 800d2f2:	e03c      	b.n	800d36e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d300:	461a      	mov	r2, r3
 800d302:	f000 f8d7 	bl	800d4b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2150      	movs	r1, #80	; 0x50
 800d30c:	4618      	mov	r0, r3
 800d30e:	f000 f930 	bl	800d572 <TIM_ITRx_SetConfig>
      break;
 800d312:	e02c      	b.n	800d36e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d320:	461a      	mov	r2, r3
 800d322:	f000 f8f6 	bl	800d512 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2160      	movs	r1, #96	; 0x60
 800d32c:	4618      	mov	r0, r3
 800d32e:	f000 f920 	bl	800d572 <TIM_ITRx_SetConfig>
      break;
 800d332:	e01c      	b.n	800d36e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d340:	461a      	mov	r2, r3
 800d342:	f000 f8b7 	bl	800d4b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2140      	movs	r1, #64	; 0x40
 800d34c:	4618      	mov	r0, r3
 800d34e:	f000 f910 	bl	800d572 <TIM_ITRx_SetConfig>
      break;
 800d352:	e00c      	b.n	800d36e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4619      	mov	r1, r3
 800d35e:	4610      	mov	r0, r2
 800d360:	f000 f907 	bl	800d572 <TIM_ITRx_SetConfig>
      break;
 800d364:	e003      	b.n	800d36e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800d366:	2301      	movs	r3, #1
 800d368:	73fb      	strb	r3, [r7, #15]
      break;
 800d36a:	e000      	b.n	800d36e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800d36c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2201      	movs	r2, #1
 800d372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2200      	movs	r2, #0
 800d37a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d380:	4618      	mov	r0, r3
 800d382:	3710      	adds	r7, #16
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}

0800d388 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d388:	b480      	push	{r7}
 800d38a:	b083      	sub	sp, #12
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d390:	bf00      	nop
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d3a4:	bf00      	nop
 800d3a6:	370c      	adds	r7, #12
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr

0800d3b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d3b8:	bf00      	nop
 800d3ba:	370c      	adds	r7, #12
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d3cc:	bf00      	nop
 800d3ce:	370c      	adds	r7, #12
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr

0800d3d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b083      	sub	sp, #12
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d3e0:	bf00      	nop
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b085      	sub	sp, #20
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	4a2a      	ldr	r2, [pc, #168]	; (800d4a8 <TIM_Base_SetConfig+0xbc>)
 800d400:	4293      	cmp	r3, r2
 800d402:	d003      	beq.n	800d40c <TIM_Base_SetConfig+0x20>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d40a:	d108      	bne.n	800d41e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	68fa      	ldr	r2, [r7, #12]
 800d41a:	4313      	orrs	r3, r2
 800d41c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	4a21      	ldr	r2, [pc, #132]	; (800d4a8 <TIM_Base_SetConfig+0xbc>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d00b      	beq.n	800d43e <TIM_Base_SetConfig+0x52>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d42c:	d007      	beq.n	800d43e <TIM_Base_SetConfig+0x52>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4a1e      	ldr	r2, [pc, #120]	; (800d4ac <TIM_Base_SetConfig+0xc0>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d003      	beq.n	800d43e <TIM_Base_SetConfig+0x52>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4a1d      	ldr	r2, [pc, #116]	; (800d4b0 <TIM_Base_SetConfig+0xc4>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d108      	bne.n	800d450 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	68fa      	ldr	r2, [r7, #12]
 800d44c:	4313      	orrs	r3, r2
 800d44e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	695b      	ldr	r3, [r3, #20]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	68fa      	ldr	r2, [r7, #12]
 800d462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	689a      	ldr	r2, [r3, #8]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	4a0c      	ldr	r2, [pc, #48]	; (800d4a8 <TIM_Base_SetConfig+0xbc>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d007      	beq.n	800d48c <TIM_Base_SetConfig+0xa0>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	4a0b      	ldr	r2, [pc, #44]	; (800d4ac <TIM_Base_SetConfig+0xc0>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d003      	beq.n	800d48c <TIM_Base_SetConfig+0xa0>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	4a0a      	ldr	r2, [pc, #40]	; (800d4b0 <TIM_Base_SetConfig+0xc4>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	d103      	bne.n	800d494 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	691a      	ldr	r2, [r3, #16]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2201      	movs	r2, #1
 800d498:	615a      	str	r2, [r3, #20]
}
 800d49a:	bf00      	nop
 800d49c:	3714      	adds	r7, #20
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	40012c00 	.word	0x40012c00
 800d4ac:	40014000 	.word	0x40014000
 800d4b0:	40014400 	.word	0x40014400

0800d4b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b087      	sub	sp, #28
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	6a1b      	ldr	r3, [r3, #32]
 800d4c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	6a1b      	ldr	r3, [r3, #32]
 800d4ca:	f023 0201 	bic.w	r2, r3, #1
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	699b      	ldr	r3, [r3, #24]
 800d4d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d4de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	011b      	lsls	r3, r3, #4
 800d4e4:	693a      	ldr	r2, [r7, #16]
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	f023 030a 	bic.w	r3, r3, #10
 800d4f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d4f2:	697a      	ldr	r2, [r7, #20]
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	693a      	ldr	r2, [r7, #16]
 800d4fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	697a      	ldr	r2, [r7, #20]
 800d504:	621a      	str	r2, [r3, #32]
}
 800d506:	bf00      	nop
 800d508:	371c      	adds	r7, #28
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr

0800d512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d512:	b480      	push	{r7}
 800d514:	b087      	sub	sp, #28
 800d516:	af00      	add	r7, sp, #0
 800d518:	60f8      	str	r0, [r7, #12]
 800d51a:	60b9      	str	r1, [r7, #8]
 800d51c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	6a1b      	ldr	r3, [r3, #32]
 800d522:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	6a1b      	ldr	r3, [r3, #32]
 800d528:	f023 0210 	bic.w	r2, r3, #16
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	699b      	ldr	r3, [r3, #24]
 800d534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d53c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	031b      	lsls	r3, r3, #12
 800d542:	693a      	ldr	r2, [r7, #16]
 800d544:	4313      	orrs	r3, r2
 800d546:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d54e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	011b      	lsls	r3, r3, #4
 800d554:	697a      	ldr	r2, [r7, #20]
 800d556:	4313      	orrs	r3, r2
 800d558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	693a      	ldr	r2, [r7, #16]
 800d55e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	697a      	ldr	r2, [r7, #20]
 800d564:	621a      	str	r2, [r3, #32]
}
 800d566:	bf00      	nop
 800d568:	371c      	adds	r7, #28
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr

0800d572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d572:	b480      	push	{r7}
 800d574:	b085      	sub	sp, #20
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
 800d57a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d58a:	683a      	ldr	r2, [r7, #0]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	4313      	orrs	r3, r2
 800d590:	f043 0307 	orr.w	r3, r3, #7
 800d594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	68fa      	ldr	r2, [r7, #12]
 800d59a:	609a      	str	r2, [r3, #8]
}
 800d59c:	bf00      	nop
 800d59e:	3714      	adds	r7, #20
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b087      	sub	sp, #28
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	607a      	str	r2, [r7, #4]
 800d5b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	689b      	ldr	r3, [r3, #8]
 800d5ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d5c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	021a      	lsls	r2, r3, #8
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	431a      	orrs	r2, r3
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	697a      	ldr	r2, [r7, #20]
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	697a      	ldr	r2, [r7, #20]
 800d5da:	609a      	str	r2, [r3, #8]
}
 800d5dc:	bf00      	nop
 800d5de:	371c      	adds	r7, #28
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b085      	sub	sp, #20
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d101      	bne.n	800d600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d5fc:	2302      	movs	r3, #2
 800d5fe:	e04f      	b.n	800d6a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2201      	movs	r2, #1
 800d604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2202      	movs	r2, #2
 800d60c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	689b      	ldr	r3, [r3, #8]
 800d61e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4a21      	ldr	r2, [pc, #132]	; (800d6ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d108      	bne.n	800d63c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d630:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	68fa      	ldr	r2, [r7, #12]
 800d638:	4313      	orrs	r3, r2
 800d63a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d642:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	68fa      	ldr	r2, [r7, #12]
 800d64a:	4313      	orrs	r3, r2
 800d64c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	68fa      	ldr	r2, [r7, #12]
 800d654:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a14      	ldr	r2, [pc, #80]	; (800d6ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d009      	beq.n	800d674 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d668:	d004      	beq.n	800d674 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	4a10      	ldr	r2, [pc, #64]	; (800d6b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d10c      	bne.n	800d68e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d67a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	68ba      	ldr	r2, [r7, #8]
 800d682:	4313      	orrs	r3, r2
 800d684:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	68ba      	ldr	r2, [r7, #8]
 800d68c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2201      	movs	r2, #1
 800d692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3714      	adds	r7, #20
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr
 800d6ac:	40012c00 	.word	0x40012c00
 800d6b0:	40014000 	.word	0x40014000

0800d6b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d6bc:	bf00      	nop
 800d6be:	370c      	adds	r7, #12
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d6d0:	bf00      	nop
 800d6d2:	370c      	adds	r7, #12
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d6e4:	bf00      	nop
 800d6e6:	370c      	adds	r7, #12
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d101      	bne.n	800d702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d6fe:	2301      	movs	r3, #1
 800d700:	e040      	b.n	800d784 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d706:	2b00      	cmp	r3, #0
 800d708:	d106      	bne.n	800d718 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f7f8 fcb8 	bl	8006088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2224      	movs	r2, #36	; 0x24
 800d71c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f022 0201 	bic.w	r2, r2, #1
 800d72c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d732:	2b00      	cmp	r3, #0
 800d734:	d002      	beq.n	800d73c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 feb0 	bl	800e49c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 fc81 	bl	800e044 <UART_SetConfig>
 800d742:	4603      	mov	r3, r0
 800d744:	2b01      	cmp	r3, #1
 800d746:	d101      	bne.n	800d74c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800d748:	2301      	movs	r3, #1
 800d74a:	e01b      	b.n	800d784 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	685a      	ldr	r2, [r3, #4]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d75a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	689a      	ldr	r2, [r3, #8]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d76a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f042 0201 	orr.w	r2, r2, #1
 800d77a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 ff2f 	bl	800e5e0 <UART_CheckIdleState>
 800d782:	4603      	mov	r3, r0
}
 800d784:	4618      	mov	r0, r3
 800d786:	3708      	adds	r7, #8
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b08a      	sub	sp, #40	; 0x28
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	4613      	mov	r3, r2
 800d798:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7a0:	2b20      	cmp	r3, #32
 800d7a2:	d137      	bne.n	800d814 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d002      	beq.n	800d7b0 <HAL_UART_Receive_DMA+0x24>
 800d7aa:	88fb      	ldrh	r3, [r7, #6]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d101      	bne.n	800d7b4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e030      	b.n	800d816 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4a18      	ldr	r2, [pc, #96]	; (800d820 <HAL_UART_Receive_DMA+0x94>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d01f      	beq.n	800d804 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d018      	beq.n	800d804 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	e853 3f00 	ldrex	r3, [r3]
 800d7de:	613b      	str	r3, [r7, #16]
   return(result);
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d7e6:	627b      	str	r3, [r7, #36]	; 0x24
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f0:	623b      	str	r3, [r7, #32]
 800d7f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7f4:	69f9      	ldr	r1, [r7, #28]
 800d7f6:	6a3a      	ldr	r2, [r7, #32]
 800d7f8:	e841 2300 	strex	r3, r2, [r1]
 800d7fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800d7fe:	69bb      	ldr	r3, [r7, #24]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d1e6      	bne.n	800d7d2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d804:	88fb      	ldrh	r3, [r7, #6]
 800d806:	461a      	mov	r2, r3
 800d808:	68b9      	ldr	r1, [r7, #8]
 800d80a:	68f8      	ldr	r0, [r7, #12]
 800d80c:	f000 fff8 	bl	800e800 <UART_Start_Receive_DMA>
 800d810:	4603      	mov	r3, r0
 800d812:	e000      	b.n	800d816 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d814:	2302      	movs	r3, #2
  }
}
 800d816:	4618      	mov	r0, r3
 800d818:	3728      	adds	r7, #40	; 0x28
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	40008000 	.word	0x40008000

0800d824 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b0a0      	sub	sp, #128	; 0x80
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d834:	e853 3f00 	ldrex	r3, [r3]
 800d838:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d83a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d83c:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800d840:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	461a      	mov	r2, r3
 800d848:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d84a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d84c:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d84e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d850:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d852:	e841 2300 	strex	r3, r2, [r1]
 800d856:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d858:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d1e6      	bne.n	800d82c <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	3308      	adds	r3, #8
 800d864:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d868:	e853 3f00 	ldrex	r3, [r3]
 800d86c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d86e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d870:	f023 0301 	bic.w	r3, r3, #1
 800d874:	67bb      	str	r3, [r7, #120]	; 0x78
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	3308      	adds	r3, #8
 800d87c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d87e:	657a      	str	r2, [r7, #84]	; 0x54
 800d880:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d882:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d884:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d886:	e841 2300 	strex	r3, r2, [r1]
 800d88a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d88c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1e5      	bne.n	800d85e <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d896:	2b01      	cmp	r3, #1
 800d898:	d118      	bne.n	800d8cc <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a2:	e853 3f00 	ldrex	r3, [r3]
 800d8a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8aa:	f023 0310 	bic.w	r3, r3, #16
 800d8ae:	677b      	str	r3, [r7, #116]	; 0x74
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8b8:	643b      	str	r3, [r7, #64]	; 0x40
 800d8ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d8be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8c0:	e841 2300 	strex	r3, r2, [r1]
 800d8c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d1e6      	bne.n	800d89a <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	689b      	ldr	r3, [r3, #8]
 800d8d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8d6:	2b80      	cmp	r3, #128	; 0x80
 800d8d8:	d137      	bne.n	800d94a <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	3308      	adds	r3, #8
 800d8e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8e2:	6a3b      	ldr	r3, [r7, #32]
 800d8e4:	e853 3f00 	ldrex	r3, [r3]
 800d8e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8f0:	673b      	str	r3, [r7, #112]	; 0x70
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	3308      	adds	r3, #8
 800d8f8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d8fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d8fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d902:	e841 2300 	strex	r3, r2, [r1]
 800d906:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d1e5      	bne.n	800d8da <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d912:	2b00      	cmp	r3, #0
 800d914:	d019      	beq.n	800d94a <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d91a:	2200      	movs	r2, #0
 800d91c:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d922:	4618      	mov	r0, r3
 800d924:	f7fa fa7a 	bl	8007e1c <HAL_DMA_Abort>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00d      	beq.n	800d94a <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d932:	4618      	mov	r0, r3
 800d934:	f7fa fba0 	bl	8008078 <HAL_DMA_GetError>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b20      	cmp	r3, #32
 800d93c:	d105      	bne.n	800d94a <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2210      	movs	r2, #16
 800d942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d946:	2303      	movs	r3, #3
 800d948:	e063      	b.n	800da12 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	689b      	ldr	r3, [r3, #8]
 800d950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d954:	2b40      	cmp	r3, #64	; 0x40
 800d956:	d137      	bne.n	800d9c8 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	3308      	adds	r3, #8
 800d95e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	e853 3f00 	ldrex	r3, [r3]
 800d966:	60bb      	str	r3, [r7, #8]
   return(result);
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d96e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	3308      	adds	r3, #8
 800d976:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d978:	61ba      	str	r2, [r7, #24]
 800d97a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d97c:	6979      	ldr	r1, [r7, #20]
 800d97e:	69ba      	ldr	r2, [r7, #24]
 800d980:	e841 2300 	strex	r3, r2, [r1]
 800d984:	613b      	str	r3, [r7, #16]
   return(result);
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d1e5      	bne.n	800d958 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d990:	2b00      	cmp	r3, #0
 800d992:	d019      	beq.n	800d9c8 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d998:	2200      	movs	r2, #0
 800d99a:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7fa fa3b 	bl	8007e1c <HAL_DMA_Abort>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d00d      	beq.n	800d9c8 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7fa fb61 	bl	8008078 <HAL_DMA_GetError>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	2b20      	cmp	r3, #32
 800d9ba:	d105      	bne.n	800d9c8 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2210      	movs	r2, #16
 800d9c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d9c4:	2303      	movs	r3, #3
 800d9c6:	e024      	b.n	800da12 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	220f      	movs	r2, #15
 800d9de:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	8b1b      	ldrh	r3, [r3, #24]
 800d9e6:	b29a      	uxth	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f042 0208 	orr.w	r2, r2, #8
 800d9f0:	b292      	uxth	r2, r2
 800d9f2:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2220      	movs	r2, #32
 800d9f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2220      	movs	r2, #32
 800d9fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2200      	movs	r2, #0
 800da0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800da10:	2300      	movs	r3, #0
}
 800da12:	4618      	mov	r0, r3
 800da14:	3780      	adds	r7, #128	; 0x80
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
	...

0800da1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b0ba      	sub	sp, #232	; 0xe8
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	69db      	ldr	r3, [r3, #28]
 800da2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	689b      	ldr	r3, [r3, #8]
 800da3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800da42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800da46:	f640 030f 	movw	r3, #2063	; 0x80f
 800da4a:	4013      	ands	r3, r2
 800da4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800da50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800da54:	2b00      	cmp	r3, #0
 800da56:	d115      	bne.n	800da84 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800da58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da5c:	f003 0320 	and.w	r3, r3, #32
 800da60:	2b00      	cmp	r3, #0
 800da62:	d00f      	beq.n	800da84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800da64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da68:	f003 0320 	and.w	r3, r3, #32
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d009      	beq.n	800da84 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da74:	2b00      	cmp	r3, #0
 800da76:	f000 82ae 	beq.w	800dfd6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	4798      	blx	r3
      }
      return;
 800da82:	e2a8      	b.n	800dfd6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800da84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f000 8117 	beq.w	800dcbc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800da8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da92:	f003 0301 	and.w	r3, r3, #1
 800da96:	2b00      	cmp	r3, #0
 800da98:	d106      	bne.n	800daa8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800da9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800da9e:	4b85      	ldr	r3, [pc, #532]	; (800dcb4 <HAL_UART_IRQHandler+0x298>)
 800daa0:	4013      	ands	r3, r2
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f000 810a 	beq.w	800dcbc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800daa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800daac:	f003 0301 	and.w	r3, r3, #1
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d011      	beq.n	800dad8 <HAL_UART_IRQHandler+0xbc>
 800dab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00b      	beq.n	800dad8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2201      	movs	r2, #1
 800dac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dace:	f043 0201 	orr.w	r2, r3, #1
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dadc:	f003 0302 	and.w	r3, r3, #2
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d011      	beq.n	800db08 <HAL_UART_IRQHandler+0xec>
 800dae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dae8:	f003 0301 	and.w	r3, r3, #1
 800daec:	2b00      	cmp	r3, #0
 800daee:	d00b      	beq.n	800db08 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2202      	movs	r2, #2
 800daf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dafe:	f043 0204 	orr.w	r2, r3, #4
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db0c:	f003 0304 	and.w	r3, r3, #4
 800db10:	2b00      	cmp	r3, #0
 800db12:	d011      	beq.n	800db38 <HAL_UART_IRQHandler+0x11c>
 800db14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db18:	f003 0301 	and.w	r3, r3, #1
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00b      	beq.n	800db38 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2204      	movs	r2, #4
 800db26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db2e:	f043 0202 	orr.w	r2, r3, #2
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800db38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db3c:	f003 0308 	and.w	r3, r3, #8
 800db40:	2b00      	cmp	r3, #0
 800db42:	d017      	beq.n	800db74 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800db44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db48:	f003 0320 	and.w	r3, r3, #32
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d105      	bne.n	800db5c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800db50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d00b      	beq.n	800db74 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2208      	movs	r2, #8
 800db62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db6a:	f043 0208 	orr.w	r2, r3, #8
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800db74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d012      	beq.n	800dba6 <HAL_UART_IRQHandler+0x18a>
 800db80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d00c      	beq.n	800dba6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db9c:	f043 0220 	orr.w	r2, r3, #32
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	f000 8214 	beq.w	800dfda <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800dbb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbb6:	f003 0320 	and.w	r3, r3, #32
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00d      	beq.n	800dbda <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800dbbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbc2:	f003 0320 	and.w	r3, r3, #32
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d007      	beq.n	800dbda <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d003      	beq.n	800dbda <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbe0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	689b      	ldr	r3, [r3, #8]
 800dbea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbee:	2b40      	cmp	r3, #64	; 0x40
 800dbf0:	d005      	beq.n	800dbfe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dbf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dbf6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d04f      	beq.n	800dc9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 fec4 	bl	800e98c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	689b      	ldr	r3, [r3, #8]
 800dc0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc0e:	2b40      	cmp	r3, #64	; 0x40
 800dc10:	d141      	bne.n	800dc96 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	3308      	adds	r3, #8
 800dc18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dc20:	e853 3f00 	ldrex	r3, [r3]
 800dc24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dc28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dc2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	3308      	adds	r3, #8
 800dc3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dc3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dc42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dc4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dc4e:	e841 2300 	strex	r3, r2, [r1]
 800dc52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800dc56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d1d9      	bne.n	800dc12 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d013      	beq.n	800dc8e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc6a:	4a13      	ldr	r2, [pc, #76]	; (800dcb8 <HAL_UART_IRQHandler+0x29c>)
 800dc6c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7fa f910 	bl	8007e98 <HAL_DMA_Abort_IT>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d017      	beq.n	800dcae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc84:	687a      	ldr	r2, [r7, #4]
 800dc86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800dc88:	4610      	mov	r0, r2
 800dc8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc8c:	e00f      	b.n	800dcae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 f9c2 	bl	800e018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc94:	e00b      	b.n	800dcae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 f9be 	bl	800e018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc9c:	e007      	b.n	800dcae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f000 f9ba 	bl	800e018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2200      	movs	r2, #0
 800dca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800dcac:	e195      	b.n	800dfda <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcae:	bf00      	nop
    return;
 800dcb0:	e193      	b.n	800dfda <HAL_UART_IRQHandler+0x5be>
 800dcb2:	bf00      	nop
 800dcb4:	04000120 	.word	0x04000120
 800dcb8:	0800ec3d 	.word	0x0800ec3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	f040 814e 	bne.w	800df62 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dcc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcca:	f003 0310 	and.w	r3, r3, #16
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	f000 8147 	beq.w	800df62 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dcd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dcd8:	f003 0310 	and.w	r3, r3, #16
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	f000 8140 	beq.w	800df62 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2210      	movs	r2, #16
 800dce8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	689b      	ldr	r3, [r3, #8]
 800dcf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcf4:	2b40      	cmp	r3, #64	; 0x40
 800dcf6:	f040 80b8 	bne.w	800de6a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	685b      	ldr	r3, [r3, #4]
 800dd02:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dd06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	f000 8167 	beq.w	800dfde <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dd16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	f080 815f 	bcs.w	800dfde <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f003 0320 	and.w	r3, r3, #32
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	f040 8086 	bne.w	800de48 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd48:	e853 3f00 	ldrex	r3, [r3]
 800dd4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dd50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	461a      	mov	r2, r3
 800dd62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dd66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dd6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dd72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dd76:	e841 2300 	strex	r3, r2, [r1]
 800dd7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dd7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d1da      	bne.n	800dd3c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	3308      	adds	r3, #8
 800dd8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dd90:	e853 3f00 	ldrex	r3, [r3]
 800dd94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dd96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd98:	f023 0301 	bic.w	r3, r3, #1
 800dd9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	3308      	adds	r3, #8
 800dda6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ddaa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ddae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ddb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ddb6:	e841 2300 	strex	r3, r2, [r1]
 800ddba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ddbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d1e1      	bne.n	800dd86 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	3308      	adds	r3, #8
 800ddc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddcc:	e853 3f00 	ldrex	r3, [r3]
 800ddd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ddd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	3308      	adds	r3, #8
 800dde2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dde6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dde8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ddec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ddee:	e841 2300 	strex	r3, r2, [r1]
 800ddf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ddf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d1e3      	bne.n	800ddc2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2220      	movs	r2, #32
 800ddfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2200      	movs	r2, #0
 800de06:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de10:	e853 3f00 	ldrex	r3, [r3]
 800de14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800de16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de18:	f023 0310 	bic.w	r3, r3, #16
 800de1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	461a      	mov	r2, r3
 800de26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800de2a:	65bb      	str	r3, [r7, #88]	; 0x58
 800de2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800de32:	e841 2300 	strex	r3, r2, [r1]
 800de36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800de38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d1e4      	bne.n	800de08 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de42:	4618      	mov	r0, r3
 800de44:	f7f9 ffea 	bl	8007e1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2202      	movs	r2, #2
 800de4c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	1ad3      	subs	r3, r2, r3
 800de5e:	b29b      	uxth	r3, r3
 800de60:	4619      	mov	r1, r3
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f000 f8e2 	bl	800e02c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800de68:	e0b9      	b.n	800dfde <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800de76:	b29b      	uxth	r3, r3
 800de78:	1ad3      	subs	r3, r2, r3
 800de7a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800de84:	b29b      	uxth	r3, r3
 800de86:	2b00      	cmp	r3, #0
 800de88:	f000 80ab 	beq.w	800dfe2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800de8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800de90:	2b00      	cmp	r3, #0
 800de92:	f000 80a6 	beq.w	800dfe2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de9e:	e853 3f00 	ldrex	r3, [r3]
 800dea2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dea6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800deaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	461a      	mov	r2, r3
 800deb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800deb8:	647b      	str	r3, [r7, #68]	; 0x44
 800deba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800debc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800debe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dec0:	e841 2300 	strex	r3, r2, [r1]
 800dec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1e4      	bne.n	800de96 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	3308      	adds	r3, #8
 800ded2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded6:	e853 3f00 	ldrex	r3, [r3]
 800deda:	623b      	str	r3, [r7, #32]
   return(result);
 800dedc:	6a3b      	ldr	r3, [r7, #32]
 800dede:	f023 0301 	bic.w	r3, r3, #1
 800dee2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	3308      	adds	r3, #8
 800deec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800def0:	633a      	str	r2, [r7, #48]	; 0x30
 800def2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800def6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800def8:	e841 2300 	strex	r3, r2, [r1]
 800defc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800defe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1e3      	bne.n	800decc <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2220      	movs	r2, #32
 800df08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2200      	movs	r2, #0
 800df10:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2200      	movs	r2, #0
 800df16:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	e853 3f00 	ldrex	r3, [r3]
 800df24:	60fb      	str	r3, [r7, #12]
   return(result);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f023 0310 	bic.w	r3, r3, #16
 800df2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	461a      	mov	r2, r3
 800df36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800df3a:	61fb      	str	r3, [r7, #28]
 800df3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df3e:	69b9      	ldr	r1, [r7, #24]
 800df40:	69fa      	ldr	r2, [r7, #28]
 800df42:	e841 2300 	strex	r3, r2, [r1]
 800df46:	617b      	str	r3, [r7, #20]
   return(result);
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d1e4      	bne.n	800df18 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2202      	movs	r2, #2
 800df52:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800df54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800df58:	4619      	mov	r1, r3
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f000 f866 	bl	800e02c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800df60:	e03f      	b.n	800dfe2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800df62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00e      	beq.n	800df8c <HAL_UART_IRQHandler+0x570>
 800df6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df76:	2b00      	cmp	r3, #0
 800df78:	d008      	beq.n	800df8c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800df82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 fe99 	bl	800ecbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800df8a:	e02d      	b.n	800dfe8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800df8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df94:	2b00      	cmp	r3, #0
 800df96:	d00e      	beq.n	800dfb6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800df98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d008      	beq.n	800dfb6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d01c      	beq.n	800dfe6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	4798      	blx	r3
    }
    return;
 800dfb4:	e017      	b.n	800dfe6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dfb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d012      	beq.n	800dfe8 <HAL_UART_IRQHandler+0x5cc>
 800dfc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d00c      	beq.n	800dfe8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 fe4a 	bl	800ec68 <UART_EndTransmit_IT>
    return;
 800dfd4:	e008      	b.n	800dfe8 <HAL_UART_IRQHandler+0x5cc>
      return;
 800dfd6:	bf00      	nop
 800dfd8:	e006      	b.n	800dfe8 <HAL_UART_IRQHandler+0x5cc>
    return;
 800dfda:	bf00      	nop
 800dfdc:	e004      	b.n	800dfe8 <HAL_UART_IRQHandler+0x5cc>
      return;
 800dfde:	bf00      	nop
 800dfe0:	e002      	b.n	800dfe8 <HAL_UART_IRQHandler+0x5cc>
      return;
 800dfe2:	bf00      	nop
 800dfe4:	e000      	b.n	800dfe8 <HAL_UART_IRQHandler+0x5cc>
    return;
 800dfe6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800dfe8:	37e8      	adds	r7, #232	; 0xe8
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop

0800dff0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dff0:	b480      	push	{r7}
 800dff2:	b083      	sub	sp, #12
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dff8:	bf00      	nop
 800dffa:	370c      	adds	r7, #12
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e00c:	bf00      	nop
 800e00e:	370c      	adds	r7, #12
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr

0800e018 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e020:	bf00      	nop
 800e022:	370c      	adds	r7, #12
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr

0800e02c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b083      	sub	sp, #12
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	460b      	mov	r3, r1
 800e036:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e038:	bf00      	nop
 800e03a:	370c      	adds	r7, #12
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e048:	b08a      	sub	sp, #40	; 0x28
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e04e:	2300      	movs	r3, #0
 800e050:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	689a      	ldr	r2, [r3, #8]
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	691b      	ldr	r3, [r3, #16]
 800e05c:	431a      	orrs	r2, r3
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	695b      	ldr	r3, [r3, #20]
 800e062:	431a      	orrs	r2, r3
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	69db      	ldr	r3, [r3, #28]
 800e068:	4313      	orrs	r3, r2
 800e06a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	4bb4      	ldr	r3, [pc, #720]	; (800e344 <UART_SetConfig+0x300>)
 800e074:	4013      	ands	r3, r2
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	6812      	ldr	r2, [r2, #0]
 800e07a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e07c:	430b      	orrs	r3, r1
 800e07e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	68da      	ldr	r2, [r3, #12]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	430a      	orrs	r2, r1
 800e094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	699b      	ldr	r3, [r3, #24]
 800e09a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4aa9      	ldr	r2, [pc, #676]	; (800e348 <UART_SetConfig+0x304>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d004      	beq.n	800e0b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6a1b      	ldr	r3, [r3, #32]
 800e0aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	689b      	ldr	r3, [r3, #8]
 800e0b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0c0:	430a      	orrs	r2, r1
 800e0c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4aa0      	ldr	r2, [pc, #640]	; (800e34c <UART_SetConfig+0x308>)
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d126      	bne.n	800e11c <UART_SetConfig+0xd8>
 800e0ce:	4ba0      	ldr	r3, [pc, #640]	; (800e350 <UART_SetConfig+0x30c>)
 800e0d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0d4:	f003 0303 	and.w	r3, r3, #3
 800e0d8:	2b03      	cmp	r3, #3
 800e0da:	d81b      	bhi.n	800e114 <UART_SetConfig+0xd0>
 800e0dc:	a201      	add	r2, pc, #4	; (adr r2, 800e0e4 <UART_SetConfig+0xa0>)
 800e0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0e2:	bf00      	nop
 800e0e4:	0800e0f5 	.word	0x0800e0f5
 800e0e8:	0800e105 	.word	0x0800e105
 800e0ec:	0800e0fd 	.word	0x0800e0fd
 800e0f0:	0800e10d 	.word	0x0800e10d
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e0fa:	e080      	b.n	800e1fe <UART_SetConfig+0x1ba>
 800e0fc:	2302      	movs	r3, #2
 800e0fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e102:	e07c      	b.n	800e1fe <UART_SetConfig+0x1ba>
 800e104:	2304      	movs	r3, #4
 800e106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e10a:	e078      	b.n	800e1fe <UART_SetConfig+0x1ba>
 800e10c:	2308      	movs	r3, #8
 800e10e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e112:	e074      	b.n	800e1fe <UART_SetConfig+0x1ba>
 800e114:	2310      	movs	r3, #16
 800e116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e11a:	e070      	b.n	800e1fe <UART_SetConfig+0x1ba>
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	4a8c      	ldr	r2, [pc, #560]	; (800e354 <UART_SetConfig+0x310>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d138      	bne.n	800e198 <UART_SetConfig+0x154>
 800e126:	4b8a      	ldr	r3, [pc, #552]	; (800e350 <UART_SetConfig+0x30c>)
 800e128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e12c:	f003 030c 	and.w	r3, r3, #12
 800e130:	2b0c      	cmp	r3, #12
 800e132:	d82d      	bhi.n	800e190 <UART_SetConfig+0x14c>
 800e134:	a201      	add	r2, pc, #4	; (adr r2, 800e13c <UART_SetConfig+0xf8>)
 800e136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e13a:	bf00      	nop
 800e13c:	0800e171 	.word	0x0800e171
 800e140:	0800e191 	.word	0x0800e191
 800e144:	0800e191 	.word	0x0800e191
 800e148:	0800e191 	.word	0x0800e191
 800e14c:	0800e181 	.word	0x0800e181
 800e150:	0800e191 	.word	0x0800e191
 800e154:	0800e191 	.word	0x0800e191
 800e158:	0800e191 	.word	0x0800e191
 800e15c:	0800e179 	.word	0x0800e179
 800e160:	0800e191 	.word	0x0800e191
 800e164:	0800e191 	.word	0x0800e191
 800e168:	0800e191 	.word	0x0800e191
 800e16c:	0800e189 	.word	0x0800e189
 800e170:	2300      	movs	r3, #0
 800e172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e176:	e042      	b.n	800e1fe <UART_SetConfig+0x1ba>
 800e178:	2302      	movs	r3, #2
 800e17a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e17e:	e03e      	b.n	800e1fe <UART_SetConfig+0x1ba>
 800e180:	2304      	movs	r3, #4
 800e182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e186:	e03a      	b.n	800e1fe <UART_SetConfig+0x1ba>
 800e188:	2308      	movs	r3, #8
 800e18a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e18e:	e036      	b.n	800e1fe <UART_SetConfig+0x1ba>
 800e190:	2310      	movs	r3, #16
 800e192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e196:	e032      	b.n	800e1fe <UART_SetConfig+0x1ba>
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4a6a      	ldr	r2, [pc, #424]	; (800e348 <UART_SetConfig+0x304>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d12a      	bne.n	800e1f8 <UART_SetConfig+0x1b4>
 800e1a2:	4b6b      	ldr	r3, [pc, #428]	; (800e350 <UART_SetConfig+0x30c>)
 800e1a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e1ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e1b0:	d01a      	beq.n	800e1e8 <UART_SetConfig+0x1a4>
 800e1b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e1b6:	d81b      	bhi.n	800e1f0 <UART_SetConfig+0x1ac>
 800e1b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e1bc:	d00c      	beq.n	800e1d8 <UART_SetConfig+0x194>
 800e1be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e1c2:	d815      	bhi.n	800e1f0 <UART_SetConfig+0x1ac>
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d003      	beq.n	800e1d0 <UART_SetConfig+0x18c>
 800e1c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1cc:	d008      	beq.n	800e1e0 <UART_SetConfig+0x19c>
 800e1ce:	e00f      	b.n	800e1f0 <UART_SetConfig+0x1ac>
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e1d6:	e012      	b.n	800e1fe <UART_SetConfig+0x1ba>
 800e1d8:	2302      	movs	r3, #2
 800e1da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e1de:	e00e      	b.n	800e1fe <UART_SetConfig+0x1ba>
 800e1e0:	2304      	movs	r3, #4
 800e1e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e1e6:	e00a      	b.n	800e1fe <UART_SetConfig+0x1ba>
 800e1e8:	2308      	movs	r3, #8
 800e1ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e1ee:	e006      	b.n	800e1fe <UART_SetConfig+0x1ba>
 800e1f0:	2310      	movs	r3, #16
 800e1f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e1f6:	e002      	b.n	800e1fe <UART_SetConfig+0x1ba>
 800e1f8:	2310      	movs	r3, #16
 800e1fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	4a51      	ldr	r2, [pc, #324]	; (800e348 <UART_SetConfig+0x304>)
 800e204:	4293      	cmp	r3, r2
 800e206:	d17a      	bne.n	800e2fe <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e208:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e20c:	2b08      	cmp	r3, #8
 800e20e:	d824      	bhi.n	800e25a <UART_SetConfig+0x216>
 800e210:	a201      	add	r2, pc, #4	; (adr r2, 800e218 <UART_SetConfig+0x1d4>)
 800e212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e216:	bf00      	nop
 800e218:	0800e23d 	.word	0x0800e23d
 800e21c:	0800e25b 	.word	0x0800e25b
 800e220:	0800e245 	.word	0x0800e245
 800e224:	0800e25b 	.word	0x0800e25b
 800e228:	0800e24b 	.word	0x0800e24b
 800e22c:	0800e25b 	.word	0x0800e25b
 800e230:	0800e25b 	.word	0x0800e25b
 800e234:	0800e25b 	.word	0x0800e25b
 800e238:	0800e253 	.word	0x0800e253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e23c:	f7fd f974 	bl	800b528 <HAL_RCC_GetPCLK1Freq>
 800e240:	61f8      	str	r0, [r7, #28]
        break;
 800e242:	e010      	b.n	800e266 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e244:	4b44      	ldr	r3, [pc, #272]	; (800e358 <UART_SetConfig+0x314>)
 800e246:	61fb      	str	r3, [r7, #28]
        break;
 800e248:	e00d      	b.n	800e266 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e24a:	f7fd f8d5 	bl	800b3f8 <HAL_RCC_GetSysClockFreq>
 800e24e:	61f8      	str	r0, [r7, #28]
        break;
 800e250:	e009      	b.n	800e266 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e256:	61fb      	str	r3, [r7, #28]
        break;
 800e258:	e005      	b.n	800e266 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800e25a:	2300      	movs	r3, #0
 800e25c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e25e:	2301      	movs	r3, #1
 800e260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e264:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e266:	69fb      	ldr	r3, [r7, #28]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	f000 8107 	beq.w	800e47c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	685a      	ldr	r2, [r3, #4]
 800e272:	4613      	mov	r3, r2
 800e274:	005b      	lsls	r3, r3, #1
 800e276:	4413      	add	r3, r2
 800e278:	69fa      	ldr	r2, [r7, #28]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d305      	bcc.n	800e28a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e284:	69fa      	ldr	r2, [r7, #28]
 800e286:	429a      	cmp	r2, r3
 800e288:	d903      	bls.n	800e292 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800e28a:	2301      	movs	r3, #1
 800e28c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e290:	e0f4      	b.n	800e47c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e292:	69fb      	ldr	r3, [r7, #28]
 800e294:	2200      	movs	r2, #0
 800e296:	461c      	mov	r4, r3
 800e298:	4615      	mov	r5, r2
 800e29a:	f04f 0200 	mov.w	r2, #0
 800e29e:	f04f 0300 	mov.w	r3, #0
 800e2a2:	022b      	lsls	r3, r5, #8
 800e2a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e2a8:	0222      	lsls	r2, r4, #8
 800e2aa:	68f9      	ldr	r1, [r7, #12]
 800e2ac:	6849      	ldr	r1, [r1, #4]
 800e2ae:	0849      	lsrs	r1, r1, #1
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	4688      	mov	r8, r1
 800e2b4:	4681      	mov	r9, r0
 800e2b6:	eb12 0a08 	adds.w	sl, r2, r8
 800e2ba:	eb43 0b09 	adc.w	fp, r3, r9
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	603b      	str	r3, [r7, #0]
 800e2c6:	607a      	str	r2, [r7, #4]
 800e2c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2cc:	4650      	mov	r0, sl
 800e2ce:	4659      	mov	r1, fp
 800e2d0:	f7f2 fcda 	bl	8000c88 <__aeabi_uldivmod>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	4613      	mov	r3, r2
 800e2da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e2e2:	d308      	bcc.n	800e2f6 <UART_SetConfig+0x2b2>
 800e2e4:	69bb      	ldr	r3, [r7, #24]
 800e2e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2ea:	d204      	bcs.n	800e2f6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	69ba      	ldr	r2, [r7, #24]
 800e2f2:	60da      	str	r2, [r3, #12]
 800e2f4:	e0c2      	b.n	800e47c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e2fc:	e0be      	b.n	800e47c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	69db      	ldr	r3, [r3, #28]
 800e302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e306:	d16a      	bne.n	800e3de <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800e308:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e30c:	2b08      	cmp	r3, #8
 800e30e:	d834      	bhi.n	800e37a <UART_SetConfig+0x336>
 800e310:	a201      	add	r2, pc, #4	; (adr r2, 800e318 <UART_SetConfig+0x2d4>)
 800e312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e316:	bf00      	nop
 800e318:	0800e33d 	.word	0x0800e33d
 800e31c:	0800e35d 	.word	0x0800e35d
 800e320:	0800e365 	.word	0x0800e365
 800e324:	0800e37b 	.word	0x0800e37b
 800e328:	0800e36b 	.word	0x0800e36b
 800e32c:	0800e37b 	.word	0x0800e37b
 800e330:	0800e37b 	.word	0x0800e37b
 800e334:	0800e37b 	.word	0x0800e37b
 800e338:	0800e373 	.word	0x0800e373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e33c:	f7fd f8f4 	bl	800b528 <HAL_RCC_GetPCLK1Freq>
 800e340:	61f8      	str	r0, [r7, #28]
        break;
 800e342:	e020      	b.n	800e386 <UART_SetConfig+0x342>
 800e344:	efff69f3 	.word	0xefff69f3
 800e348:	40008000 	.word	0x40008000
 800e34c:	40013800 	.word	0x40013800
 800e350:	40021000 	.word	0x40021000
 800e354:	40004400 	.word	0x40004400
 800e358:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e35c:	f7fd f8fa 	bl	800b554 <HAL_RCC_GetPCLK2Freq>
 800e360:	61f8      	str	r0, [r7, #28]
        break;
 800e362:	e010      	b.n	800e386 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e364:	4b4c      	ldr	r3, [pc, #304]	; (800e498 <UART_SetConfig+0x454>)
 800e366:	61fb      	str	r3, [r7, #28]
        break;
 800e368:	e00d      	b.n	800e386 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e36a:	f7fd f845 	bl	800b3f8 <HAL_RCC_GetSysClockFreq>
 800e36e:	61f8      	str	r0, [r7, #28]
        break;
 800e370:	e009      	b.n	800e386 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e376:	61fb      	str	r3, [r7, #28]
        break;
 800e378:	e005      	b.n	800e386 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800e37a:	2300      	movs	r3, #0
 800e37c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e37e:	2301      	movs	r3, #1
 800e380:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e384:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e386:	69fb      	ldr	r3, [r7, #28]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d077      	beq.n	800e47c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	005a      	lsls	r2, r3, #1
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	085b      	lsrs	r3, r3, #1
 800e396:	441a      	add	r2, r3
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e3a2:	69bb      	ldr	r3, [r7, #24]
 800e3a4:	2b0f      	cmp	r3, #15
 800e3a6:	d916      	bls.n	800e3d6 <UART_SetConfig+0x392>
 800e3a8:	69bb      	ldr	r3, [r7, #24]
 800e3aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3ae:	d212      	bcs.n	800e3d6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e3b0:	69bb      	ldr	r3, [r7, #24]
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	f023 030f 	bic.w	r3, r3, #15
 800e3b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e3ba:	69bb      	ldr	r3, [r7, #24]
 800e3bc:	085b      	lsrs	r3, r3, #1
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	f003 0307 	and.w	r3, r3, #7
 800e3c4:	b29a      	uxth	r2, r3
 800e3c6:	8afb      	ldrh	r3, [r7, #22]
 800e3c8:	4313      	orrs	r3, r2
 800e3ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	8afa      	ldrh	r2, [r7, #22]
 800e3d2:	60da      	str	r2, [r3, #12]
 800e3d4:	e052      	b.n	800e47c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e3dc:	e04e      	b.n	800e47c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e3de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e3e2:	2b08      	cmp	r3, #8
 800e3e4:	d827      	bhi.n	800e436 <UART_SetConfig+0x3f2>
 800e3e6:	a201      	add	r2, pc, #4	; (adr r2, 800e3ec <UART_SetConfig+0x3a8>)
 800e3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ec:	0800e411 	.word	0x0800e411
 800e3f0:	0800e419 	.word	0x0800e419
 800e3f4:	0800e421 	.word	0x0800e421
 800e3f8:	0800e437 	.word	0x0800e437
 800e3fc:	0800e427 	.word	0x0800e427
 800e400:	0800e437 	.word	0x0800e437
 800e404:	0800e437 	.word	0x0800e437
 800e408:	0800e437 	.word	0x0800e437
 800e40c:	0800e42f 	.word	0x0800e42f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e410:	f7fd f88a 	bl	800b528 <HAL_RCC_GetPCLK1Freq>
 800e414:	61f8      	str	r0, [r7, #28]
        break;
 800e416:	e014      	b.n	800e442 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e418:	f7fd f89c 	bl	800b554 <HAL_RCC_GetPCLK2Freq>
 800e41c:	61f8      	str	r0, [r7, #28]
        break;
 800e41e:	e010      	b.n	800e442 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e420:	4b1d      	ldr	r3, [pc, #116]	; (800e498 <UART_SetConfig+0x454>)
 800e422:	61fb      	str	r3, [r7, #28]
        break;
 800e424:	e00d      	b.n	800e442 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e426:	f7fc ffe7 	bl	800b3f8 <HAL_RCC_GetSysClockFreq>
 800e42a:	61f8      	str	r0, [r7, #28]
        break;
 800e42c:	e009      	b.n	800e442 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e42e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e432:	61fb      	str	r3, [r7, #28]
        break;
 800e434:	e005      	b.n	800e442 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800e436:	2300      	movs	r3, #0
 800e438:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e43a:	2301      	movs	r3, #1
 800e43c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e440:	bf00      	nop
    }

    if (pclk != 0U)
 800e442:	69fb      	ldr	r3, [r7, #28]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d019      	beq.n	800e47c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	085a      	lsrs	r2, r3, #1
 800e44e:	69fb      	ldr	r3, [r7, #28]
 800e450:	441a      	add	r2, r3
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	685b      	ldr	r3, [r3, #4]
 800e456:	fbb2 f3f3 	udiv	r3, r2, r3
 800e45a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e45c:	69bb      	ldr	r3, [r7, #24]
 800e45e:	2b0f      	cmp	r3, #15
 800e460:	d909      	bls.n	800e476 <UART_SetConfig+0x432>
 800e462:	69bb      	ldr	r3, [r7, #24]
 800e464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e468:	d205      	bcs.n	800e476 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	b29a      	uxth	r2, r3
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	60da      	str	r2, [r3, #12]
 800e474:	e002      	b.n	800e47c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800e476:	2301      	movs	r3, #1
 800e478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2200      	movs	r2, #0
 800e480:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2200      	movs	r2, #0
 800e486:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800e488:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3728      	adds	r7, #40	; 0x28
 800e490:	46bd      	mov	sp, r7
 800e492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e496:	bf00      	nop
 800e498:	00f42400 	.word	0x00f42400

0800e49c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b083      	sub	sp, #12
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a8:	f003 0308 	and.w	r3, r3, #8
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d00a      	beq.n	800e4c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	430a      	orrs	r2, r1
 800e4c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ca:	f003 0301 	and.w	r3, r3, #1
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d00a      	beq.n	800e4e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	430a      	orrs	r2, r1
 800e4e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ec:	f003 0302 	and.w	r3, r3, #2
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d00a      	beq.n	800e50a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	430a      	orrs	r2, r1
 800e508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e50e:	f003 0304 	and.w	r3, r3, #4
 800e512:	2b00      	cmp	r3, #0
 800e514:	d00a      	beq.n	800e52c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	430a      	orrs	r2, r1
 800e52a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e530:	f003 0310 	and.w	r3, r3, #16
 800e534:	2b00      	cmp	r3, #0
 800e536:	d00a      	beq.n	800e54e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	689b      	ldr	r3, [r3, #8]
 800e53e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	430a      	orrs	r2, r1
 800e54c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e552:	f003 0320 	and.w	r3, r3, #32
 800e556:	2b00      	cmp	r3, #0
 800e558:	d00a      	beq.n	800e570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	689b      	ldr	r3, [r3, #8]
 800e560:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	430a      	orrs	r2, r1
 800e56e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d01a      	beq.n	800e5b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	430a      	orrs	r2, r1
 800e590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e59a:	d10a      	bne.n	800e5b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	430a      	orrs	r2, r1
 800e5b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00a      	beq.n	800e5d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	430a      	orrs	r2, r1
 800e5d2:	605a      	str	r2, [r3, #4]
  }
}
 800e5d4:	bf00      	nop
 800e5d6:	370c      	adds	r7, #12
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5de:	4770      	bx	lr

0800e5e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b098      	sub	sp, #96	; 0x60
 800e5e4:	af02      	add	r7, sp, #8
 800e5e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e5f0:	f7f7 ff1a 	bl	8006428 <HAL_GetTick>
 800e5f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f003 0308 	and.w	r3, r3, #8
 800e600:	2b08      	cmp	r3, #8
 800e602:	d12e      	bne.n	800e662 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e608:	9300      	str	r3, [sp, #0]
 800e60a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e60c:	2200      	movs	r2, #0
 800e60e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 f88c 	bl	800e730 <UART_WaitOnFlagUntilTimeout>
 800e618:	4603      	mov	r3, r0
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d021      	beq.n	800e662 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e626:	e853 3f00 	ldrex	r3, [r3]
 800e62a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e62e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e632:	653b      	str	r3, [r7, #80]	; 0x50
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	461a      	mov	r2, r3
 800e63a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e63c:	647b      	str	r3, [r7, #68]	; 0x44
 800e63e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e640:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e644:	e841 2300 	strex	r3, r2, [r1]
 800e648:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d1e6      	bne.n	800e61e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2220      	movs	r2, #32
 800e654:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2200      	movs	r2, #0
 800e65a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e65e:	2303      	movs	r3, #3
 800e660:	e062      	b.n	800e728 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f003 0304 	and.w	r3, r3, #4
 800e66c:	2b04      	cmp	r3, #4
 800e66e:	d149      	bne.n	800e704 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e670:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e678:	2200      	movs	r2, #0
 800e67a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 f856 	bl	800e730 <UART_WaitOnFlagUntilTimeout>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d03c      	beq.n	800e704 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e692:	e853 3f00 	ldrex	r3, [r3]
 800e696:	623b      	str	r3, [r7, #32]
   return(result);
 800e698:	6a3b      	ldr	r3, [r7, #32]
 800e69a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e69e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6a8:	633b      	str	r3, [r7, #48]	; 0x30
 800e6aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6b0:	e841 2300 	strex	r3, r2, [r1]
 800e6b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d1e6      	bne.n	800e68a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	3308      	adds	r3, #8
 800e6c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	e853 3f00 	ldrex	r3, [r3]
 800e6ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f023 0301 	bic.w	r3, r3, #1
 800e6d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	3308      	adds	r3, #8
 800e6da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6dc:	61fa      	str	r2, [r7, #28]
 800e6de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6e0:	69b9      	ldr	r1, [r7, #24]
 800e6e2:	69fa      	ldr	r2, [r7, #28]
 800e6e4:	e841 2300 	strex	r3, r2, [r1]
 800e6e8:	617b      	str	r3, [r7, #20]
   return(result);
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d1e5      	bne.n	800e6bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2220      	movs	r2, #32
 800e6f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e700:	2303      	movs	r3, #3
 800e702:	e011      	b.n	800e728 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2220      	movs	r2, #32
 800e708:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2220      	movs	r2, #32
 800e70e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2200      	movs	r2, #0
 800e716:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2200      	movs	r2, #0
 800e71c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2200      	movs	r2, #0
 800e722:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800e726:	2300      	movs	r3, #0
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3758      	adds	r7, #88	; 0x58
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	60f8      	str	r0, [r7, #12]
 800e738:	60b9      	str	r1, [r7, #8]
 800e73a:	603b      	str	r3, [r7, #0]
 800e73c:	4613      	mov	r3, r2
 800e73e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e740:	e049      	b.n	800e7d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e748:	d045      	beq.n	800e7d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e74a:	f7f7 fe6d 	bl	8006428 <HAL_GetTick>
 800e74e:	4602      	mov	r2, r0
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	1ad3      	subs	r3, r2, r3
 800e754:	69ba      	ldr	r2, [r7, #24]
 800e756:	429a      	cmp	r2, r3
 800e758:	d302      	bcc.n	800e760 <UART_WaitOnFlagUntilTimeout+0x30>
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d101      	bne.n	800e764 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e760:	2303      	movs	r3, #3
 800e762:	e048      	b.n	800e7f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f003 0304 	and.w	r3, r3, #4
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d031      	beq.n	800e7d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	69db      	ldr	r3, [r3, #28]
 800e778:	f003 0308 	and.w	r3, r3, #8
 800e77c:	2b08      	cmp	r3, #8
 800e77e:	d110      	bne.n	800e7a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	2208      	movs	r2, #8
 800e786:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	f000 f8ff 	bl	800e98c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	2208      	movs	r2, #8
 800e792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2200      	movs	r2, #0
 800e79a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	e029      	b.n	800e7f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	69db      	ldr	r3, [r3, #28]
 800e7a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e7ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e7b0:	d111      	bne.n	800e7d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e7ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	f000 f8e5 	bl	800e98c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2220      	movs	r2, #32
 800e7c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800e7d2:	2303      	movs	r3, #3
 800e7d4:	e00f      	b.n	800e7f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	69da      	ldr	r2, [r3, #28]
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	4013      	ands	r3, r2
 800e7e0:	68ba      	ldr	r2, [r7, #8]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	bf0c      	ite	eq
 800e7e6:	2301      	moveq	r3, #1
 800e7e8:	2300      	movne	r3, #0
 800e7ea:	b2db      	uxtb	r3, r3
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	79fb      	ldrb	r3, [r7, #7]
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d0a6      	beq.n	800e742 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e7f4:	2300      	movs	r3, #0
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3710      	adds	r7, #16
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
	...

0800e800 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b096      	sub	sp, #88	; 0x58
 800e804:	af00      	add	r7, sp, #0
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	4613      	mov	r3, r2
 800e80c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	68ba      	ldr	r2, [r7, #8]
 800e812:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	88fa      	ldrh	r2, [r7, #6]
 800e818:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2200      	movs	r2, #0
 800e820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2222      	movs	r2, #34	; 0x22
 800e828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e830:	2b00      	cmp	r3, #0
 800e832:	d028      	beq.n	800e886 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e838:	4a3e      	ldr	r2, [pc, #248]	; (800e934 <UART_Start_Receive_DMA+0x134>)
 800e83a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e840:	4a3d      	ldr	r2, [pc, #244]	; (800e938 <UART_Start_Receive_DMA+0x138>)
 800e842:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e848:	4a3c      	ldr	r2, [pc, #240]	; (800e93c <UART_Start_Receive_DMA+0x13c>)
 800e84a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e850:	2200      	movs	r2, #0
 800e852:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	3324      	adds	r3, #36	; 0x24
 800e85e:	4619      	mov	r1, r3
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e864:	461a      	mov	r2, r3
 800e866:	88fb      	ldrh	r3, [r7, #6]
 800e868:	f7f9 fa78 	bl	8007d5c <HAL_DMA_Start_IT>
 800e86c:	4603      	mov	r3, r0
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d009      	beq.n	800e886 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	2210      	movs	r2, #16
 800e876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2220      	movs	r2, #32
 800e87e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800e882:	2301      	movs	r3, #1
 800e884:	e051      	b.n	800e92a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	691b      	ldr	r3, [r3, #16]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d018      	beq.n	800e8c0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e896:	e853 3f00 	ldrex	r3, [r3]
 800e89a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e8a2:	657b      	str	r3, [r7, #84]	; 0x54
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8ae:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e8b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8b4:	e841 2300 	strex	r3, r2, [r1]
 800e8b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d1e6      	bne.n	800e88e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	3308      	adds	r3, #8
 800e8c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ca:	e853 3f00 	ldrex	r3, [r3]
 800e8ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d2:	f043 0301 	orr.w	r3, r3, #1
 800e8d6:	653b      	str	r3, [r7, #80]	; 0x50
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	3308      	adds	r3, #8
 800e8de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e8e0:	637a      	str	r2, [r7, #52]	; 0x34
 800e8e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e8e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8e8:	e841 2300 	strex	r3, r2, [r1]
 800e8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d1e5      	bne.n	800e8c0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	3308      	adds	r3, #8
 800e8fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	e853 3f00 	ldrex	r3, [r3]
 800e902:	613b      	str	r3, [r7, #16]
   return(result);
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e90a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	3308      	adds	r3, #8
 800e912:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e914:	623a      	str	r2, [r7, #32]
 800e916:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e918:	69f9      	ldr	r1, [r7, #28]
 800e91a:	6a3a      	ldr	r2, [r7, #32]
 800e91c:	e841 2300 	strex	r3, r2, [r1]
 800e920:	61bb      	str	r3, [r7, #24]
   return(result);
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d1e5      	bne.n	800e8f4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800e928:	2300      	movs	r3, #0
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3758      	adds	r7, #88	; 0x58
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	0800ea55 	.word	0x0800ea55
 800e938:	0800eb81 	.word	0x0800eb81
 800e93c:	0800ebbf 	.word	0x0800ebbf

0800e940 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e940:	b480      	push	{r7}
 800e942:	b089      	sub	sp, #36	; 0x24
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	e853 3f00 	ldrex	r3, [r3]
 800e954:	60bb      	str	r3, [r7, #8]
   return(result);
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e95c:	61fb      	str	r3, [r7, #28]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	461a      	mov	r2, r3
 800e964:	69fb      	ldr	r3, [r7, #28]
 800e966:	61bb      	str	r3, [r7, #24]
 800e968:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e96a:	6979      	ldr	r1, [r7, #20]
 800e96c:	69ba      	ldr	r2, [r7, #24]
 800e96e:	e841 2300 	strex	r3, r2, [r1]
 800e972:	613b      	str	r3, [r7, #16]
   return(result);
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d1e6      	bne.n	800e948 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2220      	movs	r2, #32
 800e97e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800e980:	bf00      	nop
 800e982:	3724      	adds	r7, #36	; 0x24
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr

0800e98c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e98c:	b480      	push	{r7}
 800e98e:	b095      	sub	sp, #84	; 0x54
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e99c:	e853 3f00 	ldrex	r3, [r3]
 800e9a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e9a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9b2:	643b      	str	r3, [r7, #64]	; 0x40
 800e9b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e9b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e9ba:	e841 2300 	strex	r3, r2, [r1]
 800e9be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d1e6      	bne.n	800e994 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	3308      	adds	r3, #8
 800e9cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ce:	6a3b      	ldr	r3, [r7, #32]
 800e9d0:	e853 3f00 	ldrex	r3, [r3]
 800e9d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	f023 0301 	bic.w	r3, r3, #1
 800e9dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	3308      	adds	r3, #8
 800e9e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e9e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e9e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9ee:	e841 2300 	strex	r3, r2, [r1]
 800e9f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d1e5      	bne.n	800e9c6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d118      	bne.n	800ea34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	e853 3f00 	ldrex	r3, [r3]
 800ea0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	f023 0310 	bic.w	r3, r3, #16
 800ea16:	647b      	str	r3, [r7, #68]	; 0x44
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea20:	61bb      	str	r3, [r7, #24]
 800ea22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea24:	6979      	ldr	r1, [r7, #20]
 800ea26:	69ba      	ldr	r2, [r7, #24]
 800ea28:	e841 2300 	strex	r3, r2, [r1]
 800ea2c:	613b      	str	r3, [r7, #16]
   return(result);
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d1e6      	bne.n	800ea02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2220      	movs	r2, #32
 800ea38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ea48:	bf00      	nop
 800ea4a:	3754      	adds	r7, #84	; 0x54
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr

0800ea54 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b09c      	sub	sp, #112	; 0x70
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea60:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f003 0320 	and.w	r3, r3, #32
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d171      	bne.n	800eb54 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ea70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea72:	2200      	movs	r2, #0
 800ea74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea80:	e853 3f00 	ldrex	r3, [r3]
 800ea84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ea86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea8c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ea8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	461a      	mov	r2, r3
 800ea94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea96:	65bb      	str	r3, [r7, #88]	; 0x58
 800ea98:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ea9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea9e:	e841 2300 	strex	r3, r2, [r1]
 800eaa2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eaa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d1e6      	bne.n	800ea78 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eaaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	3308      	adds	r3, #8
 800eab0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab4:	e853 3f00 	ldrex	r3, [r3]
 800eab8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eaba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eabc:	f023 0301 	bic.w	r3, r3, #1
 800eac0:	667b      	str	r3, [r7, #100]	; 0x64
 800eac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	3308      	adds	r3, #8
 800eac8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800eaca:	647a      	str	r2, [r7, #68]	; 0x44
 800eacc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eace:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ead0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ead2:	e841 2300 	strex	r3, r2, [r1]
 800ead6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ead8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d1e5      	bne.n	800eaaa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	3308      	adds	r3, #8
 800eae4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae8:	e853 3f00 	ldrex	r3, [r3]
 800eaec:	623b      	str	r3, [r7, #32]
   return(result);
 800eaee:	6a3b      	ldr	r3, [r7, #32]
 800eaf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eaf4:	663b      	str	r3, [r7, #96]	; 0x60
 800eaf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	3308      	adds	r3, #8
 800eafc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eafe:	633a      	str	r2, [r7, #48]	; 0x30
 800eb00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb06:	e841 2300 	strex	r3, r2, [r1]
 800eb0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d1e5      	bne.n	800eade <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800eb12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb14:	2220      	movs	r2, #32
 800eb16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d118      	bne.n	800eb54 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	e853 3f00 	ldrex	r3, [r3]
 800eb2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f023 0310 	bic.w	r3, r3, #16
 800eb36:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eb38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb40:	61fb      	str	r3, [r7, #28]
 800eb42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb44:	69b9      	ldr	r1, [r7, #24]
 800eb46:	69fa      	ldr	r2, [r7, #28]
 800eb48:	e841 2300 	strex	r3, r2, [r1]
 800eb4c:	617b      	str	r3, [r7, #20]
   return(result);
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d1e6      	bne.n	800eb22 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eb54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb56:	2200      	movs	r2, #0
 800eb58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb5e:	2b01      	cmp	r3, #1
 800eb60:	d107      	bne.n	800eb72 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eb62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800eb68:	4619      	mov	r1, r3
 800eb6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eb6c:	f7ff fa5e 	bl	800e02c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eb70:	e002      	b.n	800eb78 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800eb72:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eb74:	f7f7 fb54 	bl	8006220 <HAL_UART_RxCpltCallback>
}
 800eb78:	bf00      	nop
 800eb7a:	3770      	adds	r7, #112	; 0x70
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b084      	sub	sp, #16
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb8c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2201      	movs	r2, #1
 800eb92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb98:	2b01      	cmp	r3, #1
 800eb9a:	d109      	bne.n	800ebb0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800eba2:	085b      	lsrs	r3, r3, #1
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	4619      	mov	r1, r3
 800eba8:	68f8      	ldr	r0, [r7, #12]
 800ebaa:	f7ff fa3f 	bl	800e02c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ebae:	e002      	b.n	800ebb6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ebb0:	68f8      	ldr	r0, [r7, #12]
 800ebb2:	f7ff fa27 	bl	800e004 <HAL_UART_RxHalfCpltCallback>
}
 800ebb6:	bf00      	nop
 800ebb8:	3710      	adds	r7, #16
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}

0800ebbe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ebbe:	b580      	push	{r7, lr}
 800ebc0:	b086      	sub	sp, #24
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebd0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ebd8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	689b      	ldr	r3, [r3, #8]
 800ebe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebe4:	2b80      	cmp	r3, #128	; 0x80
 800ebe6:	d109      	bne.n	800ebfc <UART_DMAError+0x3e>
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	2b21      	cmp	r3, #33	; 0x21
 800ebec:	d106      	bne.n	800ebfc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ebf6:	6978      	ldr	r0, [r7, #20]
 800ebf8:	f7ff fea2 	bl	800e940 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	689b      	ldr	r3, [r3, #8]
 800ec02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec06:	2b40      	cmp	r3, #64	; 0x40
 800ec08:	d109      	bne.n	800ec1e <UART_DMAError+0x60>
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	2b22      	cmp	r3, #34	; 0x22
 800ec0e:	d106      	bne.n	800ec1e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	2200      	movs	r2, #0
 800ec14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ec18:	6978      	ldr	r0, [r7, #20]
 800ec1a:	f7ff feb7 	bl	800e98c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec24:	f043 0210 	orr.w	r2, r3, #16
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ec2e:	6978      	ldr	r0, [r7, #20]
 800ec30:	f7ff f9f2 	bl	800e018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec34:	bf00      	nop
 800ec36:	3718      	adds	r7, #24
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2200      	movs	r2, #0
 800ec56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ec5a:	68f8      	ldr	r0, [r7, #12]
 800ec5c:	f7ff f9dc 	bl	800e018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec60:	bf00      	nop
 800ec62:	3710      	adds	r7, #16
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b088      	sub	sp, #32
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	e853 3f00 	ldrex	r3, [r3]
 800ec7c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec84:	61fb      	str	r3, [r7, #28]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	61bb      	str	r3, [r7, #24]
 800ec90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec92:	6979      	ldr	r1, [r7, #20]
 800ec94:	69ba      	ldr	r2, [r7, #24]
 800ec96:	e841 2300 	strex	r3, r2, [r1]
 800ec9a:	613b      	str	r3, [r7, #16]
   return(result);
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d1e6      	bne.n	800ec70 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2220      	movs	r2, #32
 800eca6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f7ff f99e 	bl	800dff0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecb4:	bf00      	nop
 800ecb6:	3720      	adds	r7, #32
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ecc4:	bf00      	nop
 800ecc6:	370c      	adds	r7, #12
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ecd0:	b084      	sub	sp, #16
 800ecd2:	b480      	push	{r7}
 800ecd4:	b083      	sub	sp, #12
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
 800ecda:	f107 0014 	add.w	r0, r7, #20
 800ecde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ece2:	2300      	movs	r3, #0
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	370c      	adds	r7, #12
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	b004      	add	sp, #16
 800ecf0:	4770      	bx	lr

0800ecf2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800ecf2:	b480      	push	{r7}
 800ecf4:	b085      	sub	sp, #20
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ed02:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ed06:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	b29a      	uxth	r2, r3
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ed12:	2300      	movs	r3, #0
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3714      	adds	r7, #20
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr

0800ed20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b085      	sub	sp, #20
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ed28:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ed2c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ed34:	b29a      	uxth	r2, r3
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	43db      	mvns	r3, r3
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	4013      	ands	r3, r2
 800ed40:	b29a      	uxth	r2, r3
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ed48:	2300      	movs	r3, #0
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3714      	adds	r7, #20
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr

0800ed56 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800ed56:	b480      	push	{r7}
 800ed58:	b083      	sub	sp, #12
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
 800ed5e:	460b      	mov	r3, r1
 800ed60:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ed62:	2300      	movs	r3, #0
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	370c      	adds	r7, #12
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6e:	4770      	bx	lr

0800ed70 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ed70:	b084      	sub	sp, #16
 800ed72:	b480      	push	{r7}
 800ed74:	b083      	sub	sp, #12
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]
 800ed7a:	f107 0014 	add.w	r0, r7, #20
 800ed7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2201      	movs	r2, #1
 800ed86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2200      	movs	r2, #0
 800ed96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800eda2:	2300      	movs	r3, #0
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	370c      	adds	r7, #12
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	b004      	add	sp, #16
 800edb0:	4770      	bx	lr
	...

0800edb4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b09d      	sub	sp, #116	; 0x74
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800edbe:	2300      	movs	r3, #0
 800edc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	009b      	lsls	r3, r3, #2
 800edcc:	4413      	add	r3, r2
 800edce:	881b      	ldrh	r3, [r3, #0]
 800edd0:	b29b      	uxth	r3, r3
 800edd2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800edd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edda:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	78db      	ldrb	r3, [r3, #3]
 800ede2:	2b03      	cmp	r3, #3
 800ede4:	d81f      	bhi.n	800ee26 <USB_ActivateEndpoint+0x72>
 800ede6:	a201      	add	r2, pc, #4	; (adr r2, 800edec <USB_ActivateEndpoint+0x38>)
 800ede8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edec:	0800edfd 	.word	0x0800edfd
 800edf0:	0800ee19 	.word	0x0800ee19
 800edf4:	0800ee2f 	.word	0x0800ee2f
 800edf8:	0800ee0b 	.word	0x0800ee0b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800edfc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ee00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ee04:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ee08:	e012      	b.n	800ee30 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ee0a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ee0e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800ee12:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ee16:	e00b      	b.n	800ee30 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ee18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ee1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ee20:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ee24:	e004      	b.n	800ee30 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800ee26:	2301      	movs	r3, #1
 800ee28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800ee2c:	e000      	b.n	800ee30 <USB_ActivateEndpoint+0x7c>
      break;
 800ee2e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	441a      	add	r2, r3
 800ee3a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ee3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	4413      	add	r3, r2
 800ee5c:	881b      	ldrh	r3, [r3, #0]
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	b21b      	sxth	r3, r3
 800ee62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee6a:	b21a      	sxth	r2, r3
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	b21b      	sxth	r3, r3
 800ee72:	4313      	orrs	r3, r2
 800ee74:	b21b      	sxth	r3, r3
 800ee76:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800ee7a:	687a      	ldr	r2, [r7, #4]
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	009b      	lsls	r3, r3, #2
 800ee82:	441a      	add	r2, r3
 800ee84:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ee88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee98:	b29b      	uxth	r3, r3
 800ee9a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	7b1b      	ldrb	r3, [r3, #12]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	f040 8178 	bne.w	800f196 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	785b      	ldrb	r3, [r3, #1]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	f000 8084 	beq.w	800efb8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	61bb      	str	r3, [r7, #24]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	461a      	mov	r2, r3
 800eebe:	69bb      	ldr	r3, [r7, #24]
 800eec0:	4413      	add	r3, r2
 800eec2:	61bb      	str	r3, [r7, #24]
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	781b      	ldrb	r3, [r3, #0]
 800eec8:	00da      	lsls	r2, r3, #3
 800eeca:	69bb      	ldr	r3, [r7, #24]
 800eecc:	4413      	add	r3, r2
 800eece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eed2:	617b      	str	r3, [r7, #20]
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	88db      	ldrh	r3, [r3, #6]
 800eed8:	085b      	lsrs	r3, r3, #1
 800eeda:	b29b      	uxth	r3, r3
 800eedc:	005b      	lsls	r3, r3, #1
 800eede:	b29a      	uxth	r2, r3
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eee4:	687a      	ldr	r2, [r7, #4]
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	009b      	lsls	r3, r3, #2
 800eeec:	4413      	add	r3, r2
 800eeee:	881b      	ldrh	r3, [r3, #0]
 800eef0:	827b      	strh	r3, [r7, #18]
 800eef2:	8a7b      	ldrh	r3, [r7, #18]
 800eef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d01b      	beq.n	800ef34 <USB_ActivateEndpoint+0x180>
 800eefc:	687a      	ldr	r2, [r7, #4]
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	009b      	lsls	r3, r3, #2
 800ef04:	4413      	add	r3, r2
 800ef06:	881b      	ldrh	r3, [r3, #0]
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef12:	823b      	strh	r3, [r7, #16]
 800ef14:	687a      	ldr	r2, [r7, #4]
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	009b      	lsls	r3, r3, #2
 800ef1c:	441a      	add	r2, r3
 800ef1e:	8a3b      	ldrh	r3, [r7, #16]
 800ef20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ef30:	b29b      	uxth	r3, r3
 800ef32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	78db      	ldrb	r3, [r3, #3]
 800ef38:	2b01      	cmp	r3, #1
 800ef3a:	d020      	beq.n	800ef7e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	781b      	ldrb	r3, [r3, #0]
 800ef42:	009b      	lsls	r3, r3, #2
 800ef44:	4413      	add	r3, r2
 800ef46:	881b      	ldrh	r3, [r3, #0]
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef52:	81bb      	strh	r3, [r7, #12]
 800ef54:	89bb      	ldrh	r3, [r7, #12]
 800ef56:	f083 0320 	eor.w	r3, r3, #32
 800ef5a:	81bb      	strh	r3, [r7, #12]
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	441a      	add	r2, r3
 800ef66:	89bb      	ldrh	r3, [r7, #12]
 800ef68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	8013      	strh	r3, [r2, #0]
 800ef7c:	e2d5      	b.n	800f52a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	4413      	add	r3, r2
 800ef88:	881b      	ldrh	r3, [r3, #0]
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef94:	81fb      	strh	r3, [r7, #14]
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	441a      	add	r2, r3
 800efa0:	89fb      	ldrh	r3, [r7, #14]
 800efa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800efa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800efaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800efae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	8013      	strh	r3, [r2, #0]
 800efb6:	e2b8      	b.n	800f52a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	633b      	str	r3, [r7, #48]	; 0x30
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	461a      	mov	r2, r3
 800efc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc8:	4413      	add	r3, r2
 800efca:	633b      	str	r3, [r7, #48]	; 0x30
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	00da      	lsls	r2, r3, #3
 800efd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd4:	4413      	add	r3, r2
 800efd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800efda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	88db      	ldrh	r3, [r3, #6]
 800efe0:	085b      	lsrs	r3, r3, #1
 800efe2:	b29b      	uxth	r3, r3
 800efe4:	005b      	lsls	r3, r3, #1
 800efe6:	b29a      	uxth	r2, r3
 800efe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efea:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	62bb      	str	r3, [r7, #40]	; 0x28
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eff6:	b29b      	uxth	r3, r3
 800eff8:	461a      	mov	r2, r3
 800effa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effc:	4413      	add	r3, r2
 800effe:	62bb      	str	r3, [r7, #40]	; 0x28
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	00da      	lsls	r2, r3, #3
 800f006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f008:	4413      	add	r3, r2
 800f00a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f00e:	627b      	str	r3, [r7, #36]	; 0x24
 800f010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f012:	881b      	ldrh	r3, [r3, #0]
 800f014:	b29b      	uxth	r3, r3
 800f016:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f01a:	b29a      	uxth	r2, r3
 800f01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01e:	801a      	strh	r2, [r3, #0]
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	691b      	ldr	r3, [r3, #16]
 800f024:	2b3e      	cmp	r3, #62	; 0x3e
 800f026:	d91d      	bls.n	800f064 <USB_ActivateEndpoint+0x2b0>
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	691b      	ldr	r3, [r3, #16]
 800f02c:	095b      	lsrs	r3, r3, #5
 800f02e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	691b      	ldr	r3, [r3, #16]
 800f034:	f003 031f 	and.w	r3, r3, #31
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d102      	bne.n	800f042 <USB_ActivateEndpoint+0x28e>
 800f03c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f03e:	3b01      	subs	r3, #1
 800f040:	66bb      	str	r3, [r7, #104]	; 0x68
 800f042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f044:	881b      	ldrh	r3, [r3, #0]
 800f046:	b29a      	uxth	r2, r3
 800f048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	029b      	lsls	r3, r3, #10
 800f04e:	b29b      	uxth	r3, r3
 800f050:	4313      	orrs	r3, r2
 800f052:	b29b      	uxth	r3, r3
 800f054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f05c:	b29a      	uxth	r2, r3
 800f05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f060:	801a      	strh	r2, [r3, #0]
 800f062:	e026      	b.n	800f0b2 <USB_ActivateEndpoint+0x2fe>
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	691b      	ldr	r3, [r3, #16]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d10a      	bne.n	800f082 <USB_ActivateEndpoint+0x2ce>
 800f06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06e:	881b      	ldrh	r3, [r3, #0]
 800f070:	b29b      	uxth	r3, r3
 800f072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f07a:	b29a      	uxth	r2, r3
 800f07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07e:	801a      	strh	r2, [r3, #0]
 800f080:	e017      	b.n	800f0b2 <USB_ActivateEndpoint+0x2fe>
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	691b      	ldr	r3, [r3, #16]
 800f086:	085b      	lsrs	r3, r3, #1
 800f088:	66bb      	str	r3, [r7, #104]	; 0x68
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	691b      	ldr	r3, [r3, #16]
 800f08e:	f003 0301 	and.w	r3, r3, #1
 800f092:	2b00      	cmp	r3, #0
 800f094:	d002      	beq.n	800f09c <USB_ActivateEndpoint+0x2e8>
 800f096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f098:	3301      	adds	r3, #1
 800f09a:	66bb      	str	r3, [r7, #104]	; 0x68
 800f09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09e:	881b      	ldrh	r3, [r3, #0]
 800f0a0:	b29a      	uxth	r2, r3
 800f0a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0a4:	b29b      	uxth	r3, r3
 800f0a6:	029b      	lsls	r3, r3, #10
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	4313      	orrs	r3, r2
 800f0ac:	b29a      	uxth	r2, r3
 800f0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	009b      	lsls	r3, r3, #2
 800f0ba:	4413      	add	r3, r2
 800f0bc:	881b      	ldrh	r3, [r3, #0]
 800f0be:	847b      	strh	r3, [r7, #34]	; 0x22
 800f0c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f0c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d01b      	beq.n	800f102 <USB_ActivateEndpoint+0x34e>
 800f0ca:	687a      	ldr	r2, [r7, #4]
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	009b      	lsls	r3, r3, #2
 800f0d2:	4413      	add	r3, r2
 800f0d4:	881b      	ldrh	r3, [r3, #0]
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f0dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0e0:	843b      	strh	r3, [r7, #32]
 800f0e2:	687a      	ldr	r2, [r7, #4]
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	441a      	add	r2, r3
 800f0ec:	8c3b      	ldrh	r3, [r7, #32]
 800f0ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f0f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f0f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f0fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0fe:	b29b      	uxth	r3, r3
 800f100:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d124      	bne.n	800f154 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f10a:	687a      	ldr	r2, [r7, #4]
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	4413      	add	r3, r2
 800f114:	881b      	ldrh	r3, [r3, #0]
 800f116:	b29b      	uxth	r3, r3
 800f118:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f11c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f120:	83bb      	strh	r3, [r7, #28]
 800f122:	8bbb      	ldrh	r3, [r7, #28]
 800f124:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f128:	83bb      	strh	r3, [r7, #28]
 800f12a:	8bbb      	ldrh	r3, [r7, #28]
 800f12c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f130:	83bb      	strh	r3, [r7, #28]
 800f132:	687a      	ldr	r2, [r7, #4]
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	781b      	ldrb	r3, [r3, #0]
 800f138:	009b      	lsls	r3, r3, #2
 800f13a:	441a      	add	r2, r3
 800f13c:	8bbb      	ldrh	r3, [r7, #28]
 800f13e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f14a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f14e:	b29b      	uxth	r3, r3
 800f150:	8013      	strh	r3, [r2, #0]
 800f152:	e1ea      	b.n	800f52a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800f154:	687a      	ldr	r2, [r7, #4]
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	009b      	lsls	r3, r3, #2
 800f15c:	4413      	add	r3, r2
 800f15e:	881b      	ldrh	r3, [r3, #0]
 800f160:	b29b      	uxth	r3, r3
 800f162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f16a:	83fb      	strh	r3, [r7, #30]
 800f16c:	8bfb      	ldrh	r3, [r7, #30]
 800f16e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f172:	83fb      	strh	r3, [r7, #30]
 800f174:	687a      	ldr	r2, [r7, #4]
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	009b      	lsls	r3, r3, #2
 800f17c:	441a      	add	r2, r3
 800f17e:	8bfb      	ldrh	r3, [r7, #30]
 800f180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f18c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f190:	b29b      	uxth	r3, r3
 800f192:	8013      	strh	r3, [r2, #0]
 800f194:	e1c9      	b.n	800f52a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	78db      	ldrb	r3, [r3, #3]
 800f19a:	2b02      	cmp	r3, #2
 800f19c:	d11e      	bne.n	800f1dc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	781b      	ldrb	r3, [r3, #0]
 800f1a4:	009b      	lsls	r3, r3, #2
 800f1a6:	4413      	add	r3, r2
 800f1a8:	881b      	ldrh	r3, [r3, #0]
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1b4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800f1b8:	687a      	ldr	r2, [r7, #4]
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	009b      	lsls	r3, r3, #2
 800f1c0:	441a      	add	r2, r3
 800f1c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f1c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1ce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f1d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	8013      	strh	r3, [r2, #0]
 800f1da:	e01d      	b.n	800f218 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800f1dc:	687a      	ldr	r2, [r7, #4]
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	009b      	lsls	r3, r3, #2
 800f1e4:	4413      	add	r3, r2
 800f1e6:	881b      	ldrh	r3, [r3, #0]
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800f1ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800f1f6:	687a      	ldr	r2, [r7, #4]
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	009b      	lsls	r3, r3, #2
 800f1fe:	441a      	add	r2, r3
 800f200:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800f204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f20c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f214:	b29b      	uxth	r3, r3
 800f216:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f222:	b29b      	uxth	r3, r3
 800f224:	461a      	mov	r2, r3
 800f226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f228:	4413      	add	r3, r2
 800f22a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	00da      	lsls	r2, r3, #3
 800f232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f234:	4413      	add	r3, r2
 800f236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f23a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	891b      	ldrh	r3, [r3, #8]
 800f240:	085b      	lsrs	r3, r3, #1
 800f242:	b29b      	uxth	r3, r3
 800f244:	005b      	lsls	r3, r3, #1
 800f246:	b29a      	uxth	r2, r3
 800f248:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f24a:	801a      	strh	r2, [r3, #0]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	657b      	str	r3, [r7, #84]	; 0x54
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f256:	b29b      	uxth	r3, r3
 800f258:	461a      	mov	r2, r3
 800f25a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f25c:	4413      	add	r3, r2
 800f25e:	657b      	str	r3, [r7, #84]	; 0x54
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	00da      	lsls	r2, r3, #3
 800f266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f268:	4413      	add	r3, r2
 800f26a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f26e:	653b      	str	r3, [r7, #80]	; 0x50
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	895b      	ldrh	r3, [r3, #10]
 800f274:	085b      	lsrs	r3, r3, #1
 800f276:	b29b      	uxth	r3, r3
 800f278:	005b      	lsls	r3, r3, #1
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f27e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	785b      	ldrb	r3, [r3, #1]
 800f284:	2b00      	cmp	r3, #0
 800f286:	f040 8093 	bne.w	800f3b0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	009b      	lsls	r3, r3, #2
 800f292:	4413      	add	r3, r2
 800f294:	881b      	ldrh	r3, [r3, #0]
 800f296:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f29a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f29e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d01b      	beq.n	800f2de <USB_ActivateEndpoint+0x52a>
 800f2a6:	687a      	ldr	r2, [r7, #4]
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	009b      	lsls	r3, r3, #2
 800f2ae:	4413      	add	r3, r2
 800f2b0:	881b      	ldrh	r3, [r3, #0]
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f2be:	687a      	ldr	r2, [r7, #4]
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	009b      	lsls	r3, r3, #2
 800f2c6:	441a      	add	r2, r3
 800f2c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f2ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f2ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f2d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f2de:	687a      	ldr	r2, [r7, #4]
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	009b      	lsls	r3, r3, #2
 800f2e6:	4413      	add	r3, r2
 800f2e8:	881b      	ldrh	r3, [r3, #0]
 800f2ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f2ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d01b      	beq.n	800f32e <USB_ActivateEndpoint+0x57a>
 800f2f6:	687a      	ldr	r2, [r7, #4]
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	009b      	lsls	r3, r3, #2
 800f2fe:	4413      	add	r3, r2
 800f300:	881b      	ldrh	r3, [r3, #0]
 800f302:	b29b      	uxth	r3, r3
 800f304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f30c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800f30e:	687a      	ldr	r2, [r7, #4]
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	781b      	ldrb	r3, [r3, #0]
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	441a      	add	r2, r3
 800f318:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f31a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f31e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f326:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f32a:	b29b      	uxth	r3, r3
 800f32c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	009b      	lsls	r3, r3, #2
 800f336:	4413      	add	r3, r2
 800f338:	881b      	ldrh	r3, [r3, #0]
 800f33a:	b29b      	uxth	r3, r3
 800f33c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f344:	873b      	strh	r3, [r7, #56]	; 0x38
 800f346:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f348:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f34c:	873b      	strh	r3, [r7, #56]	; 0x38
 800f34e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f350:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f354:	873b      	strh	r3, [r7, #56]	; 0x38
 800f356:	687a      	ldr	r2, [r7, #4]
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	009b      	lsls	r3, r3, #2
 800f35e:	441a      	add	r2, r3
 800f360:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f36a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f36e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f372:	b29b      	uxth	r3, r3
 800f374:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f376:	687a      	ldr	r2, [r7, #4]
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	009b      	lsls	r3, r3, #2
 800f37e:	4413      	add	r3, r2
 800f380:	881b      	ldrh	r3, [r3, #0]
 800f382:	b29b      	uxth	r3, r3
 800f384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f38c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	009b      	lsls	r3, r3, #2
 800f396:	441a      	add	r2, r3
 800f398:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f39a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f39e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f3a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f3a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	8013      	strh	r3, [r2, #0]
 800f3ae:	e0bc      	b.n	800f52a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	009b      	lsls	r3, r3, #2
 800f3b8:	4413      	add	r3, r2
 800f3ba:	881b      	ldrh	r3, [r3, #0]
 800f3bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800f3c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f3c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d01d      	beq.n	800f408 <USB_ActivateEndpoint+0x654>
 800f3cc:	687a      	ldr	r2, [r7, #4]
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	009b      	lsls	r3, r3, #2
 800f3d4:	4413      	add	r3, r2
 800f3d6:	881b      	ldrh	r3, [r3, #0]
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	009b      	lsls	r3, r3, #2
 800f3ee:	441a      	add	r2, r3
 800f3f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f3f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f3f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f3fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f404:	b29b      	uxth	r3, r3
 800f406:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f408:	687a      	ldr	r2, [r7, #4]
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	009b      	lsls	r3, r3, #2
 800f410:	4413      	add	r3, r2
 800f412:	881b      	ldrh	r3, [r3, #0]
 800f414:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800f418:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f41c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f420:	2b00      	cmp	r3, #0
 800f422:	d01d      	beq.n	800f460 <USB_ActivateEndpoint+0x6ac>
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	009b      	lsls	r3, r3, #2
 800f42c:	4413      	add	r3, r2
 800f42e:	881b      	ldrh	r3, [r3, #0]
 800f430:	b29b      	uxth	r3, r3
 800f432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f43a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800f43e:	687a      	ldr	r2, [r7, #4]
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	009b      	lsls	r3, r3, #2
 800f446:	441a      	add	r2, r3
 800f448:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800f44c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f458:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f45c:	b29b      	uxth	r3, r3
 800f45e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	78db      	ldrb	r3, [r3, #3]
 800f464:	2b01      	cmp	r3, #1
 800f466:	d024      	beq.n	800f4b2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f468:	687a      	ldr	r2, [r7, #4]
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	009b      	lsls	r3, r3, #2
 800f470:	4413      	add	r3, r2
 800f472:	881b      	ldrh	r3, [r3, #0]
 800f474:	b29b      	uxth	r3, r3
 800f476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f47a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f47e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f482:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f486:	f083 0320 	eor.w	r3, r3, #32
 800f48a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	009b      	lsls	r3, r3, #2
 800f496:	441a      	add	r2, r3
 800f498:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f49c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4ac:	b29b      	uxth	r3, r3
 800f4ae:	8013      	strh	r3, [r2, #0]
 800f4b0:	e01d      	b.n	800f4ee <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	4413      	add	r3, r2
 800f4bc:	881b      	ldrh	r3, [r3, #0]
 800f4be:	b29b      	uxth	r3, r3
 800f4c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f4cc:	687a      	ldr	r2, [r7, #4]
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	441a      	add	r2, r3
 800f4d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f4da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	4413      	add	r3, r2
 800f4f8:	881b      	ldrh	r3, [r3, #0]
 800f4fa:	b29b      	uxth	r3, r3
 800f4fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f504:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	009b      	lsls	r3, r3, #2
 800f510:	441a      	add	r2, r3
 800f512:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f51a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f51e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f526:	b29b      	uxth	r3, r3
 800f528:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800f52a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3774      	adds	r7, #116	; 0x74
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr
 800f53a:	bf00      	nop

0800f53c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f53c:	b480      	push	{r7}
 800f53e:	b08d      	sub	sp, #52	; 0x34
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	7b1b      	ldrb	r3, [r3, #12]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	f040 808e 	bne.w	800f66c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	785b      	ldrb	r3, [r3, #1]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d044      	beq.n	800f5e2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f558:	687a      	ldr	r2, [r7, #4]
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	009b      	lsls	r3, r3, #2
 800f560:	4413      	add	r3, r2
 800f562:	881b      	ldrh	r3, [r3, #0]
 800f564:	81bb      	strh	r3, [r7, #12]
 800f566:	89bb      	ldrh	r3, [r7, #12]
 800f568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d01b      	beq.n	800f5a8 <USB_DeactivateEndpoint+0x6c>
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	009b      	lsls	r3, r3, #2
 800f578:	4413      	add	r3, r2
 800f57a:	881b      	ldrh	r3, [r3, #0]
 800f57c:	b29b      	uxth	r3, r3
 800f57e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f586:	817b      	strh	r3, [r7, #10]
 800f588:	687a      	ldr	r2, [r7, #4]
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	441a      	add	r2, r3
 800f592:	897b      	ldrh	r3, [r7, #10]
 800f594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f59c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f5a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f5a4:	b29b      	uxth	r3, r3
 800f5a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f5a8:	687a      	ldr	r2, [r7, #4]
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	781b      	ldrb	r3, [r3, #0]
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	4413      	add	r3, r2
 800f5b2:	881b      	ldrh	r3, [r3, #0]
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f5be:	813b      	strh	r3, [r7, #8]
 800f5c0:	687a      	ldr	r2, [r7, #4]
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	781b      	ldrb	r3, [r3, #0]
 800f5c6:	009b      	lsls	r3, r3, #2
 800f5c8:	441a      	add	r2, r3
 800f5ca:	893b      	ldrh	r3, [r7, #8]
 800f5cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f5d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f5d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	8013      	strh	r3, [r2, #0]
 800f5e0:	e192      	b.n	800f908 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	009b      	lsls	r3, r3, #2
 800f5ea:	4413      	add	r3, r2
 800f5ec:	881b      	ldrh	r3, [r3, #0]
 800f5ee:	827b      	strh	r3, [r7, #18]
 800f5f0:	8a7b      	ldrh	r3, [r7, #18]
 800f5f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d01b      	beq.n	800f632 <USB_DeactivateEndpoint+0xf6>
 800f5fa:	687a      	ldr	r2, [r7, #4]
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	009b      	lsls	r3, r3, #2
 800f602:	4413      	add	r3, r2
 800f604:	881b      	ldrh	r3, [r3, #0]
 800f606:	b29b      	uxth	r3, r3
 800f608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f60c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f610:	823b      	strh	r3, [r7, #16]
 800f612:	687a      	ldr	r2, [r7, #4]
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	009b      	lsls	r3, r3, #2
 800f61a:	441a      	add	r2, r3
 800f61c:	8a3b      	ldrh	r3, [r7, #16]
 800f61e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f62a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f62e:	b29b      	uxth	r3, r3
 800f630:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	009b      	lsls	r3, r3, #2
 800f63a:	4413      	add	r3, r2
 800f63c:	881b      	ldrh	r3, [r3, #0]
 800f63e:	b29b      	uxth	r3, r3
 800f640:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f648:	81fb      	strh	r3, [r7, #14]
 800f64a:	687a      	ldr	r2, [r7, #4]
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	009b      	lsls	r3, r3, #2
 800f652:	441a      	add	r2, r3
 800f654:	89fb      	ldrh	r3, [r7, #14]
 800f656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f65a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f65e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f666:	b29b      	uxth	r3, r3
 800f668:	8013      	strh	r3, [r2, #0]
 800f66a:	e14d      	b.n	800f908 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	785b      	ldrb	r3, [r3, #1]
 800f670:	2b00      	cmp	r3, #0
 800f672:	f040 80a5 	bne.w	800f7c0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f676:	687a      	ldr	r2, [r7, #4]
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	009b      	lsls	r3, r3, #2
 800f67e:	4413      	add	r3, r2
 800f680:	881b      	ldrh	r3, [r3, #0]
 800f682:	843b      	strh	r3, [r7, #32]
 800f684:	8c3b      	ldrh	r3, [r7, #32]
 800f686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d01b      	beq.n	800f6c6 <USB_DeactivateEndpoint+0x18a>
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	4413      	add	r3, r2
 800f698:	881b      	ldrh	r3, [r3, #0]
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6a4:	83fb      	strh	r3, [r7, #30]
 800f6a6:	687a      	ldr	r2, [r7, #4]
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	009b      	lsls	r3, r3, #2
 800f6ae:	441a      	add	r2, r3
 800f6b0:	8bfb      	ldrh	r3, [r7, #30]
 800f6b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f6b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f6ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f6be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6c2:	b29b      	uxth	r3, r3
 800f6c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f6c6:	687a      	ldr	r2, [r7, #4]
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	009b      	lsls	r3, r3, #2
 800f6ce:	4413      	add	r3, r2
 800f6d0:	881b      	ldrh	r3, [r3, #0]
 800f6d2:	83bb      	strh	r3, [r7, #28]
 800f6d4:	8bbb      	ldrh	r3, [r7, #28]
 800f6d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d01b      	beq.n	800f716 <USB_DeactivateEndpoint+0x1da>
 800f6de:	687a      	ldr	r2, [r7, #4]
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	4413      	add	r3, r2
 800f6e8:	881b      	ldrh	r3, [r3, #0]
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6f4:	837b      	strh	r3, [r7, #26]
 800f6f6:	687a      	ldr	r2, [r7, #4]
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	009b      	lsls	r3, r3, #2
 800f6fe:	441a      	add	r2, r3
 800f700:	8b7b      	ldrh	r3, [r7, #26]
 800f702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f70a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f70e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f712:	b29b      	uxth	r3, r3
 800f714:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800f716:	687a      	ldr	r2, [r7, #4]
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	009b      	lsls	r3, r3, #2
 800f71e:	4413      	add	r3, r2
 800f720:	881b      	ldrh	r3, [r3, #0]
 800f722:	b29b      	uxth	r3, r3
 800f724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f72c:	833b      	strh	r3, [r7, #24]
 800f72e:	687a      	ldr	r2, [r7, #4]
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	009b      	lsls	r3, r3, #2
 800f736:	441a      	add	r2, r3
 800f738:	8b3b      	ldrh	r3, [r7, #24]
 800f73a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f73e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f746:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f74e:	687a      	ldr	r2, [r7, #4]
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	009b      	lsls	r3, r3, #2
 800f756:	4413      	add	r3, r2
 800f758:	881b      	ldrh	r3, [r3, #0]
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f764:	82fb      	strh	r3, [r7, #22]
 800f766:	687a      	ldr	r2, [r7, #4]
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	009b      	lsls	r3, r3, #2
 800f76e:	441a      	add	r2, r3
 800f770:	8afb      	ldrh	r3, [r7, #22]
 800f772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f77a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f77e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f782:	b29b      	uxth	r3, r3
 800f784:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f786:	687a      	ldr	r2, [r7, #4]
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	009b      	lsls	r3, r3, #2
 800f78e:	4413      	add	r3, r2
 800f790:	881b      	ldrh	r3, [r3, #0]
 800f792:	b29b      	uxth	r3, r3
 800f794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f79c:	82bb      	strh	r3, [r7, #20]
 800f79e:	687a      	ldr	r2, [r7, #4]
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	009b      	lsls	r3, r3, #2
 800f7a6:	441a      	add	r2, r3
 800f7a8:	8abb      	ldrh	r3, [r7, #20]
 800f7aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f7ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f7b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f7b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	8013      	strh	r3, [r2, #0]
 800f7be:	e0a3      	b.n	800f908 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f7c0:	687a      	ldr	r2, [r7, #4]
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	4413      	add	r3, r2
 800f7ca:	881b      	ldrh	r3, [r3, #0]
 800f7cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f7ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f7d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d01b      	beq.n	800f810 <USB_DeactivateEndpoint+0x2d4>
 800f7d8:	687a      	ldr	r2, [r7, #4]
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	781b      	ldrb	r3, [r3, #0]
 800f7de:	009b      	lsls	r3, r3, #2
 800f7e0:	4413      	add	r3, r2
 800f7e2:	881b      	ldrh	r3, [r3, #0]
 800f7e4:	b29b      	uxth	r3, r3
 800f7e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	009b      	lsls	r3, r3, #2
 800f7f8:	441a      	add	r2, r3
 800f7fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f7fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f804:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f80c:	b29b      	uxth	r3, r3
 800f80e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f810:	687a      	ldr	r2, [r7, #4]
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	781b      	ldrb	r3, [r3, #0]
 800f816:	009b      	lsls	r3, r3, #2
 800f818:	4413      	add	r3, r2
 800f81a:	881b      	ldrh	r3, [r3, #0]
 800f81c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800f81e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f824:	2b00      	cmp	r3, #0
 800f826:	d01b      	beq.n	800f860 <USB_DeactivateEndpoint+0x324>
 800f828:	687a      	ldr	r2, [r7, #4]
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	4413      	add	r3, r2
 800f832:	881b      	ldrh	r3, [r3, #0]
 800f834:	b29b      	uxth	r3, r3
 800f836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f83a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f83e:	853b      	strh	r3, [r7, #40]	; 0x28
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	781b      	ldrb	r3, [r3, #0]
 800f846:	009b      	lsls	r3, r3, #2
 800f848:	441a      	add	r2, r3
 800f84a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f84c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f858:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f860:	687a      	ldr	r2, [r7, #4]
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	009b      	lsls	r3, r3, #2
 800f868:	4413      	add	r3, r2
 800f86a:	881b      	ldrh	r3, [r3, #0]
 800f86c:	b29b      	uxth	r3, r3
 800f86e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f876:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	009b      	lsls	r3, r3, #2
 800f880:	441a      	add	r2, r3
 800f882:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f88c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f894:	b29b      	uxth	r3, r3
 800f896:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f898:	687a      	ldr	r2, [r7, #4]
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	4413      	add	r3, r2
 800f8a2:	881b      	ldrh	r3, [r3, #0]
 800f8a4:	b29b      	uxth	r3, r3
 800f8a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	009b      	lsls	r3, r3, #2
 800f8b8:	441a      	add	r2, r3
 800f8ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f8d0:	687a      	ldr	r2, [r7, #4]
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	009b      	lsls	r3, r3, #2
 800f8d8:	4413      	add	r3, r2
 800f8da:	881b      	ldrh	r3, [r3, #0]
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f8e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8e6:	847b      	strh	r3, [r7, #34]	; 0x22
 800f8e8:	687a      	ldr	r2, [r7, #4]
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	009b      	lsls	r3, r3, #2
 800f8f0:	441a      	add	r2, r3
 800f8f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f8f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f904:	b29b      	uxth	r3, r3
 800f906:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800f908:	2300      	movs	r3, #0
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3734      	adds	r7, #52	; 0x34
 800f90e:	46bd      	mov	sp, r7
 800f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f914:	4770      	bx	lr

0800f916 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f916:	b580      	push	{r7, lr}
 800f918:	b0c2      	sub	sp, #264	; 0x108
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f924:	6018      	str	r0, [r3, #0]
 800f926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f92a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f92e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	785b      	ldrb	r3, [r3, #1]
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	f040 86b7 	bne.w	80106b0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800f942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	699a      	ldr	r2, [r3, #24]
 800f94e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	691b      	ldr	r3, [r3, #16]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d908      	bls.n	800f970 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800f95e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	691b      	ldr	r3, [r3, #16]
 800f96a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f96e:	e007      	b.n	800f980 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800f970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	699b      	ldr	r3, [r3, #24]
 800f97c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800f980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	7b1b      	ldrb	r3, [r3, #12]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d13a      	bne.n	800fa06 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	6959      	ldr	r1, [r3, #20]
 800f99c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	88da      	ldrh	r2, [r3, #6]
 800f9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f9b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f9b6:	6800      	ldr	r0, [r0, #0]
 800f9b8:	f001 fcb9 	bl	801132e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f9bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	613b      	str	r3, [r7, #16]
 800f9c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	461a      	mov	r2, r3
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	4413      	add	r3, r2
 800f9de:	613b      	str	r3, [r7, #16]
 800f9e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	00da      	lsls	r2, r3, #3
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	4413      	add	r3, r2
 800f9f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f9f6:	60fb      	str	r3, [r7, #12]
 800f9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9fc:	b29a      	uxth	r2, r3
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	801a      	strh	r2, [r3, #0]
 800fa02:	f000 be1f 	b.w	8010644 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800fa06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	78db      	ldrb	r3, [r3, #3]
 800fa12:	2b02      	cmp	r3, #2
 800fa14:	f040 8462 	bne.w	80102dc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800fa18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	6a1a      	ldr	r2, [r3, #32]
 800fa24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	691b      	ldr	r3, [r3, #16]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	f240 83df 	bls.w	80101f4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800fa36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa3e:	681a      	ldr	r2, [r3, #0]
 800fa40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	009b      	lsls	r3, r3, #2
 800fa4e:	4413      	add	r3, r2
 800fa50:	881b      	ldrh	r3, [r3, #0]
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa5c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800fa60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	781b      	ldrb	r3, [r3, #0]
 800fa76:	009b      	lsls	r3, r3, #2
 800fa78:	441a      	add	r2, r3
 800fa7a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800fa7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa86:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800fa8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa8e:	b29b      	uxth	r3, r3
 800fa90:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800fa92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	6a1a      	ldr	r2, [r3, #32]
 800fa9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800faa2:	1ad2      	subs	r2, r2, r3
 800faa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800fab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fab8:	681a      	ldr	r2, [r3, #0]
 800faba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fabe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	781b      	ldrb	r3, [r3, #0]
 800fac6:	009b      	lsls	r3, r3, #2
 800fac8:	4413      	add	r3, r2
 800faca:	881b      	ldrh	r3, [r3, #0]
 800facc:	b29b      	uxth	r3, r3
 800face:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	f000 81c7 	beq.w	800fe66 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fadc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	633b      	str	r3, [r7, #48]	; 0x30
 800fae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	785b      	ldrb	r3, [r3, #1]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d177      	bne.n	800fbe4 <USB_EPStartXfer+0x2ce>
 800faf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	461a      	mov	r2, r3
 800fb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb14:	4413      	add	r3, r2
 800fb16:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	00da      	lsls	r2, r3, #3
 800fb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb28:	4413      	add	r3, r2
 800fb2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fb2e:	627b      	str	r3, [r7, #36]	; 0x24
 800fb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb32:	881b      	ldrh	r3, [r3, #0]
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fb3a:	b29a      	uxth	r2, r3
 800fb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3e:	801a      	strh	r2, [r3, #0]
 800fb40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb44:	2b3e      	cmp	r3, #62	; 0x3e
 800fb46:	d921      	bls.n	800fb8c <USB_EPStartXfer+0x276>
 800fb48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb4c:	095b      	lsrs	r3, r3, #5
 800fb4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fb52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb56:	f003 031f 	and.w	r3, r3, #31
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d104      	bne.n	800fb68 <USB_EPStartXfer+0x252>
 800fb5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fb62:	3b01      	subs	r3, #1
 800fb64:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb6a:	881b      	ldrh	r3, [r3, #0]
 800fb6c:	b29a      	uxth	r2, r3
 800fb6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	029b      	lsls	r3, r3, #10
 800fb76:	b29b      	uxth	r3, r3
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	b29b      	uxth	r3, r3
 800fb7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb84:	b29a      	uxth	r2, r3
 800fb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb88:	801a      	strh	r2, [r3, #0]
 800fb8a:	e050      	b.n	800fc2e <USB_EPStartXfer+0x318>
 800fb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d10a      	bne.n	800fbaa <USB_EPStartXfer+0x294>
 800fb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb96:	881b      	ldrh	r3, [r3, #0]
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fba2:	b29a      	uxth	r2, r3
 800fba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba6:	801a      	strh	r2, [r3, #0]
 800fba8:	e041      	b.n	800fc2e <USB_EPStartXfer+0x318>
 800fbaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbae:	085b      	lsrs	r3, r3, #1
 800fbb0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fbb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbb8:	f003 0301 	and.w	r3, r3, #1
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d004      	beq.n	800fbca <USB_EPStartXfer+0x2b4>
 800fbc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbcc:	881b      	ldrh	r3, [r3, #0]
 800fbce:	b29a      	uxth	r2, r3
 800fbd0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fbd4:	b29b      	uxth	r3, r3
 800fbd6:	029b      	lsls	r3, r3, #10
 800fbd8:	b29b      	uxth	r3, r3
 800fbda:	4313      	orrs	r3, r2
 800fbdc:	b29a      	uxth	r2, r3
 800fbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe0:	801a      	strh	r2, [r3, #0]
 800fbe2:	e024      	b.n	800fc2e <USB_EPStartXfer+0x318>
 800fbe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	785b      	ldrb	r3, [r3, #1]
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	d11c      	bne.n	800fc2e <USB_EPStartXfer+0x318>
 800fbf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	461a      	mov	r2, r3
 800fc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc08:	4413      	add	r3, r2
 800fc0a:	633b      	str	r3, [r7, #48]	; 0x30
 800fc0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	00da      	lsls	r2, r3, #3
 800fc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1c:	4413      	add	r3, r2
 800fc1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fc22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc28:	b29a      	uxth	r2, r3
 800fc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800fc2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	895b      	ldrh	r3, [r3, #10]
 800fc3a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fc3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	6959      	ldr	r1, [r3, #20]
 800fc4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc4e:	b29b      	uxth	r3, r3
 800fc50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fc54:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fc58:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fc5c:	6800      	ldr	r0, [r0, #0]
 800fc5e:	f001 fb66 	bl	801132e <USB_WritePMA>
            ep->xfer_buff += len;
 800fc62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	695a      	ldr	r2, [r3, #20]
 800fc6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc72:	441a      	add	r2, r3
 800fc74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800fc80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	6a1a      	ldr	r2, [r3, #32]
 800fc8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	691b      	ldr	r3, [r3, #16]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d90f      	bls.n	800fcbc <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800fc9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	6a1a      	ldr	r2, [r3, #32]
 800fca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcac:	1ad2      	subs	r2, r2, r3
 800fcae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	621a      	str	r2, [r3, #32]
 800fcba:	e00e      	b.n	800fcda <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800fcbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	6a1b      	ldr	r3, [r3, #32]
 800fcc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800fccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fcda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	785b      	ldrb	r3, [r3, #1]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d177      	bne.n	800fdda <USB_EPStartXfer+0x4c4>
 800fcea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	61bb      	str	r3, [r7, #24]
 800fcf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd04:	b29b      	uxth	r3, r3
 800fd06:	461a      	mov	r2, r3
 800fd08:	69bb      	ldr	r3, [r7, #24]
 800fd0a:	4413      	add	r3, r2
 800fd0c:	61bb      	str	r3, [r7, #24]
 800fd0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	781b      	ldrb	r3, [r3, #0]
 800fd1a:	00da      	lsls	r2, r3, #3
 800fd1c:	69bb      	ldr	r3, [r7, #24]
 800fd1e:	4413      	add	r3, r2
 800fd20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fd24:	617b      	str	r3, [r7, #20]
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	881b      	ldrh	r3, [r3, #0]
 800fd2a:	b29b      	uxth	r3, r3
 800fd2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fd30:	b29a      	uxth	r2, r3
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	801a      	strh	r2, [r3, #0]
 800fd36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd3a:	2b3e      	cmp	r3, #62	; 0x3e
 800fd3c:	d921      	bls.n	800fd82 <USB_EPStartXfer+0x46c>
 800fd3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd42:	095b      	lsrs	r3, r3, #5
 800fd44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fd48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd4c:	f003 031f 	and.w	r3, r3, #31
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d104      	bne.n	800fd5e <USB_EPStartXfer+0x448>
 800fd54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fd58:	3b01      	subs	r3, #1
 800fd5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	881b      	ldrh	r3, [r3, #0]
 800fd62:	b29a      	uxth	r2, r3
 800fd64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fd68:	b29b      	uxth	r3, r3
 800fd6a:	029b      	lsls	r3, r3, #10
 800fd6c:	b29b      	uxth	r3, r3
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	b29b      	uxth	r3, r3
 800fd72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd7a:	b29a      	uxth	r2, r3
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	801a      	strh	r2, [r3, #0]
 800fd80:	e056      	b.n	800fe30 <USB_EPStartXfer+0x51a>
 800fd82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d10a      	bne.n	800fda0 <USB_EPStartXfer+0x48a>
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	881b      	ldrh	r3, [r3, #0]
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd98:	b29a      	uxth	r2, r3
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	801a      	strh	r2, [r3, #0]
 800fd9e:	e047      	b.n	800fe30 <USB_EPStartXfer+0x51a>
 800fda0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fda4:	085b      	lsrs	r3, r3, #1
 800fda6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fdaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdae:	f003 0301 	and.w	r3, r3, #1
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d004      	beq.n	800fdc0 <USB_EPStartXfer+0x4aa>
 800fdb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fdba:	3301      	adds	r3, #1
 800fdbc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	881b      	ldrh	r3, [r3, #0]
 800fdc4:	b29a      	uxth	r2, r3
 800fdc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fdca:	b29b      	uxth	r3, r3
 800fdcc:	029b      	lsls	r3, r3, #10
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	4313      	orrs	r3, r2
 800fdd2:	b29a      	uxth	r2, r3
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	801a      	strh	r2, [r3, #0]
 800fdd8:	e02a      	b.n	800fe30 <USB_EPStartXfer+0x51a>
 800fdda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	785b      	ldrb	r3, [r3, #1]
 800fde6:	2b01      	cmp	r3, #1
 800fde8:	d122      	bne.n	800fe30 <USB_EPStartXfer+0x51a>
 800fdea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	623b      	str	r3, [r7, #32]
 800fdf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe04:	b29b      	uxth	r3, r3
 800fe06:	461a      	mov	r2, r3
 800fe08:	6a3b      	ldr	r3, [r7, #32]
 800fe0a:	4413      	add	r3, r2
 800fe0c:	623b      	str	r3, [r7, #32]
 800fe0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	781b      	ldrb	r3, [r3, #0]
 800fe1a:	00da      	lsls	r2, r3, #3
 800fe1c:	6a3b      	ldr	r3, [r7, #32]
 800fe1e:	4413      	add	r3, r2
 800fe20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fe24:	61fb      	str	r3, [r7, #28]
 800fe26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe2a:	b29a      	uxth	r2, r3
 800fe2c:	69fb      	ldr	r3, [r7, #28]
 800fe2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800fe30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	891b      	ldrh	r3, [r3, #8]
 800fe3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fe40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	6959      	ldr	r1, [r3, #20]
 800fe4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe50:	b29b      	uxth	r3, r3
 800fe52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fe56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fe5a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fe5e:	6800      	ldr	r0, [r0, #0]
 800fe60:	f001 fa65 	bl	801132e <USB_WritePMA>
 800fe64:	e3ee      	b.n	8010644 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fe66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	785b      	ldrb	r3, [r3, #1]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d177      	bne.n	800ff66 <USB_EPStartXfer+0x650>
 800fe76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe90:	b29b      	uxth	r3, r3
 800fe92:	461a      	mov	r2, r3
 800fe94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe96:	4413      	add	r3, r2
 800fe98:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	781b      	ldrb	r3, [r3, #0]
 800fea6:	00da      	lsls	r2, r3, #3
 800fea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800feaa:	4413      	add	r3, r2
 800feac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800feb0:	647b      	str	r3, [r7, #68]	; 0x44
 800feb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800feb4:	881b      	ldrh	r3, [r3, #0]
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800febc:	b29a      	uxth	r2, r3
 800febe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fec0:	801a      	strh	r2, [r3, #0]
 800fec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fec6:	2b3e      	cmp	r3, #62	; 0x3e
 800fec8:	d921      	bls.n	800ff0e <USB_EPStartXfer+0x5f8>
 800feca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fece:	095b      	lsrs	r3, r3, #5
 800fed0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800fed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fed8:	f003 031f 	and.w	r3, r3, #31
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d104      	bne.n	800feea <USB_EPStartXfer+0x5d4>
 800fee0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fee4:	3b01      	subs	r3, #1
 800fee6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800feea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800feec:	881b      	ldrh	r3, [r3, #0]
 800feee:	b29a      	uxth	r2, r3
 800fef0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fef4:	b29b      	uxth	r3, r3
 800fef6:	029b      	lsls	r3, r3, #10
 800fef8:	b29b      	uxth	r3, r3
 800fefa:	4313      	orrs	r3, r2
 800fefc:	b29b      	uxth	r3, r3
 800fefe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff06:	b29a      	uxth	r2, r3
 800ff08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff0a:	801a      	strh	r2, [r3, #0]
 800ff0c:	e056      	b.n	800ffbc <USB_EPStartXfer+0x6a6>
 800ff0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d10a      	bne.n	800ff2c <USB_EPStartXfer+0x616>
 800ff16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff18:	881b      	ldrh	r3, [r3, #0]
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff24:	b29a      	uxth	r2, r3
 800ff26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff28:	801a      	strh	r2, [r3, #0]
 800ff2a:	e047      	b.n	800ffbc <USB_EPStartXfer+0x6a6>
 800ff2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff30:	085b      	lsrs	r3, r3, #1
 800ff32:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ff36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff3a:	f003 0301 	and.w	r3, r3, #1
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d004      	beq.n	800ff4c <USB_EPStartXfer+0x636>
 800ff42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ff46:	3301      	adds	r3, #1
 800ff48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ff4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff4e:	881b      	ldrh	r3, [r3, #0]
 800ff50:	b29a      	uxth	r2, r3
 800ff52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ff56:	b29b      	uxth	r3, r3
 800ff58:	029b      	lsls	r3, r3, #10
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	4313      	orrs	r3, r2
 800ff5e:	b29a      	uxth	r2, r3
 800ff60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff62:	801a      	strh	r2, [r3, #0]
 800ff64:	e02a      	b.n	800ffbc <USB_EPStartXfer+0x6a6>
 800ff66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	785b      	ldrb	r3, [r3, #1]
 800ff72:	2b01      	cmp	r3, #1
 800ff74:	d122      	bne.n	800ffbc <USB_EPStartXfer+0x6a6>
 800ff76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	653b      	str	r3, [r7, #80]	; 0x50
 800ff82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff90:	b29b      	uxth	r3, r3
 800ff92:	461a      	mov	r2, r3
 800ff94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff96:	4413      	add	r3, r2
 800ff98:	653b      	str	r3, [r7, #80]	; 0x50
 800ff9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	00da      	lsls	r2, r3, #3
 800ffa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffaa:	4413      	add	r3, r2
 800ffac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ffb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ffb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffb6:	b29a      	uxth	r2, r3
 800ffb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ffbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	891b      	ldrh	r3, [r3, #8]
 800ffc8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ffcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	6959      	ldr	r1, [r3, #20]
 800ffd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffdc:	b29b      	uxth	r3, r3
 800ffde:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ffe2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ffe6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ffea:	6800      	ldr	r0, [r0, #0]
 800ffec:	f001 f99f 	bl	801132e <USB_WritePMA>
            ep->xfer_buff += len;
 800fff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	695a      	ldr	r2, [r3, #20]
 800fffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010000:	441a      	add	r2, r3
 8010002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801000e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	6a1a      	ldr	r2, [r3, #32]
 801001a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801001e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	691b      	ldr	r3, [r3, #16]
 8010026:	429a      	cmp	r2, r3
 8010028:	d90f      	bls.n	801004a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 801002a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801002e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	6a1a      	ldr	r2, [r3, #32]
 8010036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801003a:	1ad2      	subs	r2, r2, r3
 801003c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	621a      	str	r2, [r3, #32]
 8010048:	e00e      	b.n	8010068 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 801004a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801004e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	6a1b      	ldr	r3, [r3, #32]
 8010056:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 801005a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801005e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	2200      	movs	r2, #0
 8010066:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801006c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	643b      	str	r3, [r7, #64]	; 0x40
 8010074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	785b      	ldrb	r3, [r3, #1]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d177      	bne.n	8010174 <USB_EPStartXfer+0x85e>
 8010084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010088:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010094:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801009e:	b29b      	uxth	r3, r3
 80100a0:	461a      	mov	r2, r3
 80100a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a4:	4413      	add	r3, r2
 80100a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80100a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	781b      	ldrb	r3, [r3, #0]
 80100b4:	00da      	lsls	r2, r3, #3
 80100b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b8:	4413      	add	r3, r2
 80100ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80100be:	637b      	str	r3, [r7, #52]	; 0x34
 80100c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100c2:	881b      	ldrh	r3, [r3, #0]
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80100ca:	b29a      	uxth	r2, r3
 80100cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ce:	801a      	strh	r2, [r3, #0]
 80100d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100d4:	2b3e      	cmp	r3, #62	; 0x3e
 80100d6:	d921      	bls.n	801011c <USB_EPStartXfer+0x806>
 80100d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100dc:	095b      	lsrs	r3, r3, #5
 80100de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80100e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100e6:	f003 031f 	and.w	r3, r3, #31
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d104      	bne.n	80100f8 <USB_EPStartXfer+0x7e2>
 80100ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80100f2:	3b01      	subs	r3, #1
 80100f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80100f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100fa:	881b      	ldrh	r3, [r3, #0]
 80100fc:	b29a      	uxth	r2, r3
 80100fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010102:	b29b      	uxth	r3, r3
 8010104:	029b      	lsls	r3, r3, #10
 8010106:	b29b      	uxth	r3, r3
 8010108:	4313      	orrs	r3, r2
 801010a:	b29b      	uxth	r3, r3
 801010c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010114:	b29a      	uxth	r2, r3
 8010116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010118:	801a      	strh	r2, [r3, #0]
 801011a:	e050      	b.n	80101be <USB_EPStartXfer+0x8a8>
 801011c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010120:	2b00      	cmp	r3, #0
 8010122:	d10a      	bne.n	801013a <USB_EPStartXfer+0x824>
 8010124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010126:	881b      	ldrh	r3, [r3, #0]
 8010128:	b29b      	uxth	r3, r3
 801012a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801012e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010132:	b29a      	uxth	r2, r3
 8010134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010136:	801a      	strh	r2, [r3, #0]
 8010138:	e041      	b.n	80101be <USB_EPStartXfer+0x8a8>
 801013a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801013e:	085b      	lsrs	r3, r3, #1
 8010140:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010148:	f003 0301 	and.w	r3, r3, #1
 801014c:	2b00      	cmp	r3, #0
 801014e:	d004      	beq.n	801015a <USB_EPStartXfer+0x844>
 8010150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010154:	3301      	adds	r3, #1
 8010156:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801015a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801015c:	881b      	ldrh	r3, [r3, #0]
 801015e:	b29a      	uxth	r2, r3
 8010160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010164:	b29b      	uxth	r3, r3
 8010166:	029b      	lsls	r3, r3, #10
 8010168:	b29b      	uxth	r3, r3
 801016a:	4313      	orrs	r3, r2
 801016c:	b29a      	uxth	r2, r3
 801016e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010170:	801a      	strh	r2, [r3, #0]
 8010172:	e024      	b.n	80101be <USB_EPStartXfer+0x8a8>
 8010174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	785b      	ldrb	r3, [r3, #1]
 8010180:	2b01      	cmp	r3, #1
 8010182:	d11c      	bne.n	80101be <USB_EPStartXfer+0x8a8>
 8010184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010188:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010192:	b29b      	uxth	r3, r3
 8010194:	461a      	mov	r2, r3
 8010196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010198:	4413      	add	r3, r2
 801019a:	643b      	str	r3, [r7, #64]	; 0x40
 801019c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	00da      	lsls	r2, r3, #3
 80101aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101ac:	4413      	add	r3, r2
 80101ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80101b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101b8:	b29a      	uxth	r2, r3
 80101ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80101be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	895b      	ldrh	r3, [r3, #10]
 80101ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80101ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	6959      	ldr	r1, [r3, #20]
 80101da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101de:	b29b      	uxth	r3, r3
 80101e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80101e4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80101e8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80101ec:	6800      	ldr	r0, [r0, #0]
 80101ee:	f001 f89e 	bl	801132e <USB_WritePMA>
 80101f2:	e227      	b.n	8010644 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80101f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	6a1b      	ldr	r3, [r3, #32]
 8010200:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8010204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010208:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801020c:	681a      	ldr	r2, [r3, #0]
 801020e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	009b      	lsls	r3, r3, #2
 801021c:	4413      	add	r3, r2
 801021e:	881b      	ldrh	r3, [r3, #0]
 8010220:	b29b      	uxth	r3, r3
 8010222:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8010226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801022a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801022e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010232:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801023c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	781b      	ldrb	r3, [r3, #0]
 8010244:	009b      	lsls	r3, r3, #2
 8010246:	441a      	add	r2, r3
 8010248:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801024c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801025c:	b29b      	uxth	r3, r3
 801025e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010264:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801026c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801027a:	b29b      	uxth	r3, r3
 801027c:	461a      	mov	r2, r3
 801027e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010280:	4413      	add	r3, r2
 8010282:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	781b      	ldrb	r3, [r3, #0]
 8010290:	00da      	lsls	r2, r3, #3
 8010292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010294:	4413      	add	r3, r2
 8010296:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801029a:	65bb      	str	r3, [r7, #88]	; 0x58
 801029c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102a0:	b29a      	uxth	r2, r3
 80102a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80102a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	891b      	ldrh	r3, [r3, #8]
 80102b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80102b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	6959      	ldr	r1, [r3, #20]
 80102c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102c6:	b29b      	uxth	r3, r3
 80102c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80102cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80102d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80102d4:	6800      	ldr	r0, [r0, #0]
 80102d6:	f001 f82a 	bl	801132e <USB_WritePMA>
 80102da:	e1b3      	b.n	8010644 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80102dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	6a1a      	ldr	r2, [r3, #32]
 80102e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102ec:	1ad2      	subs	r2, r2, r3
 80102ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80102fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010302:	681a      	ldr	r2, [r3, #0]
 8010304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	009b      	lsls	r3, r3, #2
 8010312:	4413      	add	r3, r2
 8010314:	881b      	ldrh	r3, [r3, #0]
 8010316:	b29b      	uxth	r3, r3
 8010318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801031c:	2b00      	cmp	r3, #0
 801031e:	f000 80c6 	beq.w	80104ae <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010326:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	673b      	str	r3, [r7, #112]	; 0x70
 801032e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	785b      	ldrb	r3, [r3, #1]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d177      	bne.n	801042e <USB_EPStartXfer+0xb18>
 801033e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	66bb      	str	r3, [r7, #104]	; 0x68
 801034a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801034e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010358:	b29b      	uxth	r3, r3
 801035a:	461a      	mov	r2, r3
 801035c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801035e:	4413      	add	r3, r2
 8010360:	66bb      	str	r3, [r7, #104]	; 0x68
 8010362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	00da      	lsls	r2, r3, #3
 8010370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010372:	4413      	add	r3, r2
 8010374:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010378:	667b      	str	r3, [r7, #100]	; 0x64
 801037a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801037c:	881b      	ldrh	r3, [r3, #0]
 801037e:	b29b      	uxth	r3, r3
 8010380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010384:	b29a      	uxth	r2, r3
 8010386:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010388:	801a      	strh	r2, [r3, #0]
 801038a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801038e:	2b3e      	cmp	r3, #62	; 0x3e
 8010390:	d921      	bls.n	80103d6 <USB_EPStartXfer+0xac0>
 8010392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010396:	095b      	lsrs	r3, r3, #5
 8010398:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801039c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103a0:	f003 031f 	and.w	r3, r3, #31
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d104      	bne.n	80103b2 <USB_EPStartXfer+0xa9c>
 80103a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80103ac:	3b01      	subs	r3, #1
 80103ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80103b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103b4:	881b      	ldrh	r3, [r3, #0]
 80103b6:	b29a      	uxth	r2, r3
 80103b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80103bc:	b29b      	uxth	r3, r3
 80103be:	029b      	lsls	r3, r3, #10
 80103c0:	b29b      	uxth	r3, r3
 80103c2:	4313      	orrs	r3, r2
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80103ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80103ce:	b29a      	uxth	r2, r3
 80103d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103d2:	801a      	strh	r2, [r3, #0]
 80103d4:	e050      	b.n	8010478 <USB_EPStartXfer+0xb62>
 80103d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d10a      	bne.n	80103f4 <USB_EPStartXfer+0xade>
 80103de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103e0:	881b      	ldrh	r3, [r3, #0]
 80103e2:	b29b      	uxth	r3, r3
 80103e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80103e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80103ec:	b29a      	uxth	r2, r3
 80103ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103f0:	801a      	strh	r2, [r3, #0]
 80103f2:	e041      	b.n	8010478 <USB_EPStartXfer+0xb62>
 80103f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103f8:	085b      	lsrs	r3, r3, #1
 80103fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80103fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010402:	f003 0301 	and.w	r3, r3, #1
 8010406:	2b00      	cmp	r3, #0
 8010408:	d004      	beq.n	8010414 <USB_EPStartXfer+0xafe>
 801040a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801040e:	3301      	adds	r3, #1
 8010410:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010416:	881b      	ldrh	r3, [r3, #0]
 8010418:	b29a      	uxth	r2, r3
 801041a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801041e:	b29b      	uxth	r3, r3
 8010420:	029b      	lsls	r3, r3, #10
 8010422:	b29b      	uxth	r3, r3
 8010424:	4313      	orrs	r3, r2
 8010426:	b29a      	uxth	r2, r3
 8010428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801042a:	801a      	strh	r2, [r3, #0]
 801042c:	e024      	b.n	8010478 <USB_EPStartXfer+0xb62>
 801042e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	785b      	ldrb	r3, [r3, #1]
 801043a:	2b01      	cmp	r3, #1
 801043c:	d11c      	bne.n	8010478 <USB_EPStartXfer+0xb62>
 801043e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801044c:	b29b      	uxth	r3, r3
 801044e:	461a      	mov	r2, r3
 8010450:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010452:	4413      	add	r3, r2
 8010454:	673b      	str	r3, [r7, #112]	; 0x70
 8010456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801045a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	00da      	lsls	r2, r3, #3
 8010464:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010466:	4413      	add	r3, r2
 8010468:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801046c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801046e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010472:	b29a      	uxth	r2, r3
 8010474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010476:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8010478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801047c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	895b      	ldrh	r3, [r3, #10]
 8010484:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801048c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	6959      	ldr	r1, [r3, #20]
 8010494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010498:	b29b      	uxth	r3, r3
 801049a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801049e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80104a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80104a6:	6800      	ldr	r0, [r0, #0]
 80104a8:	f000 ff41 	bl	801132e <USB_WritePMA>
 80104ac:	e0ca      	b.n	8010644 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80104ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	785b      	ldrb	r3, [r3, #1]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d177      	bne.n	80105ae <USB_EPStartXfer+0xc98>
 80104be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80104ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80104d8:	b29b      	uxth	r3, r3
 80104da:	461a      	mov	r2, r3
 80104dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80104de:	4413      	add	r3, r2
 80104e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80104e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	781b      	ldrb	r3, [r3, #0]
 80104ee:	00da      	lsls	r2, r3, #3
 80104f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80104f2:	4413      	add	r3, r2
 80104f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80104f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80104fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104fc:	881b      	ldrh	r3, [r3, #0]
 80104fe:	b29b      	uxth	r3, r3
 8010500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010504:	b29a      	uxth	r2, r3
 8010506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010508:	801a      	strh	r2, [r3, #0]
 801050a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801050e:	2b3e      	cmp	r3, #62	; 0x3e
 8010510:	d921      	bls.n	8010556 <USB_EPStartXfer+0xc40>
 8010512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010516:	095b      	lsrs	r3, r3, #5
 8010518:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801051c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010520:	f003 031f 	and.w	r3, r3, #31
 8010524:	2b00      	cmp	r3, #0
 8010526:	d104      	bne.n	8010532 <USB_EPStartXfer+0xc1c>
 8010528:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801052c:	3b01      	subs	r3, #1
 801052e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010534:	881b      	ldrh	r3, [r3, #0]
 8010536:	b29a      	uxth	r2, r3
 8010538:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801053c:	b29b      	uxth	r3, r3
 801053e:	029b      	lsls	r3, r3, #10
 8010540:	b29b      	uxth	r3, r3
 8010542:	4313      	orrs	r3, r2
 8010544:	b29b      	uxth	r3, r3
 8010546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801054a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801054e:	b29a      	uxth	r2, r3
 8010550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010552:	801a      	strh	r2, [r3, #0]
 8010554:	e05c      	b.n	8010610 <USB_EPStartXfer+0xcfa>
 8010556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801055a:	2b00      	cmp	r3, #0
 801055c:	d10a      	bne.n	8010574 <USB_EPStartXfer+0xc5e>
 801055e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010560:	881b      	ldrh	r3, [r3, #0]
 8010562:	b29b      	uxth	r3, r3
 8010564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801056c:	b29a      	uxth	r2, r3
 801056e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010570:	801a      	strh	r2, [r3, #0]
 8010572:	e04d      	b.n	8010610 <USB_EPStartXfer+0xcfa>
 8010574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010578:	085b      	lsrs	r3, r3, #1
 801057a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801057e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010582:	f003 0301 	and.w	r3, r3, #1
 8010586:	2b00      	cmp	r3, #0
 8010588:	d004      	beq.n	8010594 <USB_EPStartXfer+0xc7e>
 801058a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801058e:	3301      	adds	r3, #1
 8010590:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010596:	881b      	ldrh	r3, [r3, #0]
 8010598:	b29a      	uxth	r2, r3
 801059a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801059e:	b29b      	uxth	r3, r3
 80105a0:	029b      	lsls	r3, r3, #10
 80105a2:	b29b      	uxth	r3, r3
 80105a4:	4313      	orrs	r3, r2
 80105a6:	b29a      	uxth	r2, r3
 80105a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105aa:	801a      	strh	r2, [r3, #0]
 80105ac:	e030      	b.n	8010610 <USB_EPStartXfer+0xcfa>
 80105ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	785b      	ldrb	r3, [r3, #1]
 80105ba:	2b01      	cmp	r3, #1
 80105bc:	d128      	bne.n	8010610 <USB_EPStartXfer+0xcfa>
 80105be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80105cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80105da:	b29b      	uxth	r3, r3
 80105dc:	461a      	mov	r2, r3
 80105de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80105e2:	4413      	add	r3, r2
 80105e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80105e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	00da      	lsls	r2, r3, #3
 80105f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80105fa:	4413      	add	r3, r2
 80105fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010600:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010608:	b29a      	uxth	r2, r3
 801060a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801060e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	891b      	ldrh	r3, [r3, #8]
 801061c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	6959      	ldr	r1, [r3, #20]
 801062c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010630:	b29b      	uxth	r3, r3
 8010632:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010636:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801063a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801063e:	6800      	ldr	r0, [r0, #0]
 8010640:	f000 fe75 	bl	801132e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8010644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801064c:	681a      	ldr	r2, [r3, #0]
 801064e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	781b      	ldrb	r3, [r3, #0]
 801065a:	009b      	lsls	r3, r3, #2
 801065c:	4413      	add	r3, r2
 801065e:	881b      	ldrh	r3, [r3, #0]
 8010660:	b29b      	uxth	r3, r3
 8010662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801066a:	817b      	strh	r3, [r7, #10]
 801066c:	897b      	ldrh	r3, [r7, #10]
 801066e:	f083 0310 	eor.w	r3, r3, #16
 8010672:	817b      	strh	r3, [r7, #10]
 8010674:	897b      	ldrh	r3, [r7, #10]
 8010676:	f083 0320 	eor.w	r3, r3, #32
 801067a:	817b      	strh	r3, [r7, #10]
 801067c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010684:	681a      	ldr	r2, [r3, #0]
 8010686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801068a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	781b      	ldrb	r3, [r3, #0]
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	441a      	add	r2, r3
 8010696:	897b      	ldrh	r3, [r7, #10]
 8010698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801069c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80106a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80106a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	8013      	strh	r3, [r2, #0]
 80106ac:	f000 bcde 	b.w	801106c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80106b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	7b1b      	ldrb	r3, [r3, #12]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	f040 80bb 	bne.w	8010838 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80106c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	699a      	ldr	r2, [r3, #24]
 80106ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	691b      	ldr	r3, [r3, #16]
 80106da:	429a      	cmp	r2, r3
 80106dc:	d917      	bls.n	801070e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80106de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	691b      	ldr	r3, [r3, #16]
 80106ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80106ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	699a      	ldr	r2, [r3, #24]
 80106fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106fe:	1ad2      	subs	r2, r2, r3
 8010700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	619a      	str	r2, [r3, #24]
 801070c:	e00e      	b.n	801072c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 801070e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	699b      	ldr	r3, [r3, #24]
 801071a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 801071e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	2200      	movs	r2, #0
 801072a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801072c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801073a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801073e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010748:	b29b      	uxth	r3, r3
 801074a:	461a      	mov	r2, r3
 801074c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010750:	4413      	add	r3, r2
 8010752:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801075a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	00da      	lsls	r2, r3, #3
 8010764:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010768:	4413      	add	r3, r2
 801076a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801076e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010772:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010776:	881b      	ldrh	r3, [r3, #0]
 8010778:	b29b      	uxth	r3, r3
 801077a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801077e:	b29a      	uxth	r2, r3
 8010780:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010784:	801a      	strh	r2, [r3, #0]
 8010786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801078a:	2b3e      	cmp	r3, #62	; 0x3e
 801078c:	d924      	bls.n	80107d8 <USB_EPStartXfer+0xec2>
 801078e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010792:	095b      	lsrs	r3, r3, #5
 8010794:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801079c:	f003 031f 	and.w	r3, r3, #31
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d104      	bne.n	80107ae <USB_EPStartXfer+0xe98>
 80107a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80107a8:	3b01      	subs	r3, #1
 80107aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80107ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107b2:	881b      	ldrh	r3, [r3, #0]
 80107b4:	b29a      	uxth	r2, r3
 80107b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80107ba:	b29b      	uxth	r3, r3
 80107bc:	029b      	lsls	r3, r3, #10
 80107be:	b29b      	uxth	r3, r3
 80107c0:	4313      	orrs	r3, r2
 80107c2:	b29b      	uxth	r3, r3
 80107c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80107c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80107cc:	b29a      	uxth	r2, r3
 80107ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107d2:	801a      	strh	r2, [r3, #0]
 80107d4:	f000 bc10 	b.w	8010ff8 <USB_EPStartXfer+0x16e2>
 80107d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d10c      	bne.n	80107fa <USB_EPStartXfer+0xee4>
 80107e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107e4:	881b      	ldrh	r3, [r3, #0]
 80107e6:	b29b      	uxth	r3, r3
 80107e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80107ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80107f0:	b29a      	uxth	r2, r3
 80107f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107f6:	801a      	strh	r2, [r3, #0]
 80107f8:	e3fe      	b.n	8010ff8 <USB_EPStartXfer+0x16e2>
 80107fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107fe:	085b      	lsrs	r3, r3, #1
 8010800:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010808:	f003 0301 	and.w	r3, r3, #1
 801080c:	2b00      	cmp	r3, #0
 801080e:	d004      	beq.n	801081a <USB_EPStartXfer+0xf04>
 8010810:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010814:	3301      	adds	r3, #1
 8010816:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801081a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801081e:	881b      	ldrh	r3, [r3, #0]
 8010820:	b29a      	uxth	r2, r3
 8010822:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010826:	b29b      	uxth	r3, r3
 8010828:	029b      	lsls	r3, r3, #10
 801082a:	b29b      	uxth	r3, r3
 801082c:	4313      	orrs	r3, r2
 801082e:	b29a      	uxth	r2, r3
 8010830:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010834:	801a      	strh	r2, [r3, #0]
 8010836:	e3df      	b.n	8010ff8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8010838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801083c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	78db      	ldrb	r3, [r3, #3]
 8010844:	2b02      	cmp	r3, #2
 8010846:	f040 8218 	bne.w	8010c7a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801084a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801084e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	785b      	ldrb	r3, [r3, #1]
 8010856:	2b00      	cmp	r3, #0
 8010858:	f040 809d 	bne.w	8010996 <USB_EPStartXfer+0x1080>
 801085c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010860:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801086a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801086e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010878:	b29b      	uxth	r3, r3
 801087a:	461a      	mov	r2, r3
 801087c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010880:	4413      	add	r3, r2
 8010882:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801088a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	781b      	ldrb	r3, [r3, #0]
 8010892:	00da      	lsls	r2, r3, #3
 8010894:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010898:	4413      	add	r3, r2
 801089a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801089e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80108a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80108a6:	881b      	ldrh	r3, [r3, #0]
 80108a8:	b29b      	uxth	r3, r3
 80108aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80108ae:	b29a      	uxth	r2, r3
 80108b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80108b4:	801a      	strh	r2, [r3, #0]
 80108b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	691b      	ldr	r3, [r3, #16]
 80108c2:	2b3e      	cmp	r3, #62	; 0x3e
 80108c4:	d92b      	bls.n	801091e <USB_EPStartXfer+0x1008>
 80108c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	691b      	ldr	r3, [r3, #16]
 80108d2:	095b      	lsrs	r3, r3, #5
 80108d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80108d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	691b      	ldr	r3, [r3, #16]
 80108e4:	f003 031f 	and.w	r3, r3, #31
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d104      	bne.n	80108f6 <USB_EPStartXfer+0xfe0>
 80108ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108f0:	3b01      	subs	r3, #1
 80108f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80108f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80108fa:	881b      	ldrh	r3, [r3, #0]
 80108fc:	b29a      	uxth	r2, r3
 80108fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010902:	b29b      	uxth	r3, r3
 8010904:	029b      	lsls	r3, r3, #10
 8010906:	b29b      	uxth	r3, r3
 8010908:	4313      	orrs	r3, r2
 801090a:	b29b      	uxth	r3, r3
 801090c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010914:	b29a      	uxth	r2, r3
 8010916:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801091a:	801a      	strh	r2, [r3, #0]
 801091c:	e070      	b.n	8010a00 <USB_EPStartXfer+0x10ea>
 801091e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	691b      	ldr	r3, [r3, #16]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d10c      	bne.n	8010948 <USB_EPStartXfer+0x1032>
 801092e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010932:	881b      	ldrh	r3, [r3, #0]
 8010934:	b29b      	uxth	r3, r3
 8010936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801093a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801093e:	b29a      	uxth	r2, r3
 8010940:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010944:	801a      	strh	r2, [r3, #0]
 8010946:	e05b      	b.n	8010a00 <USB_EPStartXfer+0x10ea>
 8010948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801094c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	691b      	ldr	r3, [r3, #16]
 8010954:	085b      	lsrs	r3, r3, #1
 8010956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801095a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801095e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	691b      	ldr	r3, [r3, #16]
 8010966:	f003 0301 	and.w	r3, r3, #1
 801096a:	2b00      	cmp	r3, #0
 801096c:	d004      	beq.n	8010978 <USB_EPStartXfer+0x1062>
 801096e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010972:	3301      	adds	r3, #1
 8010974:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801097c:	881b      	ldrh	r3, [r3, #0]
 801097e:	b29a      	uxth	r2, r3
 8010980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010984:	b29b      	uxth	r3, r3
 8010986:	029b      	lsls	r3, r3, #10
 8010988:	b29b      	uxth	r3, r3
 801098a:	4313      	orrs	r3, r2
 801098c:	b29a      	uxth	r2, r3
 801098e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010992:	801a      	strh	r2, [r3, #0]
 8010994:	e034      	b.n	8010a00 <USB_EPStartXfer+0x10ea>
 8010996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801099a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	785b      	ldrb	r3, [r3, #1]
 80109a2:	2b01      	cmp	r3, #1
 80109a4:	d12c      	bne.n	8010a00 <USB_EPStartXfer+0x10ea>
 80109a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80109b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80109c2:	b29b      	uxth	r3, r3
 80109c4:	461a      	mov	r2, r3
 80109c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80109ca:	4413      	add	r3, r2
 80109cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80109d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	00da      	lsls	r2, r3, #3
 80109de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80109e2:	4413      	add	r3, r2
 80109e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80109e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80109ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	691b      	ldr	r3, [r3, #16]
 80109f8:	b29a      	uxth	r2, r3
 80109fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80109fe:	801a      	strh	r2, [r3, #0]
 8010a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	785b      	ldrb	r3, [r3, #1]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	f040 809d 	bne.w	8010b5a <USB_EPStartXfer+0x1244>
 8010a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	461a      	mov	r2, r3
 8010a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010a44:	4413      	add	r3, r2
 8010a46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	781b      	ldrb	r3, [r3, #0]
 8010a56:	00da      	lsls	r2, r3, #3
 8010a58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010a5c:	4413      	add	r3, r2
 8010a5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010a62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010a66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a6a:	881b      	ldrh	r3, [r3, #0]
 8010a6c:	b29b      	uxth	r3, r3
 8010a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010a72:	b29a      	uxth	r2, r3
 8010a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a78:	801a      	strh	r2, [r3, #0]
 8010a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	691b      	ldr	r3, [r3, #16]
 8010a86:	2b3e      	cmp	r3, #62	; 0x3e
 8010a88:	d92b      	bls.n	8010ae2 <USB_EPStartXfer+0x11cc>
 8010a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	691b      	ldr	r3, [r3, #16]
 8010a96:	095b      	lsrs	r3, r3, #5
 8010a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	691b      	ldr	r3, [r3, #16]
 8010aa8:	f003 031f 	and.w	r3, r3, #31
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d104      	bne.n	8010aba <USB_EPStartXfer+0x11a4>
 8010ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ab4:	3b01      	subs	r3, #1
 8010ab6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010aba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010abe:	881b      	ldrh	r3, [r3, #0]
 8010ac0:	b29a      	uxth	r2, r3
 8010ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ac6:	b29b      	uxth	r3, r3
 8010ac8:	029b      	lsls	r3, r3, #10
 8010aca:	b29b      	uxth	r3, r3
 8010acc:	4313      	orrs	r3, r2
 8010ace:	b29b      	uxth	r3, r3
 8010ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ad8:	b29a      	uxth	r2, r3
 8010ada:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ade:	801a      	strh	r2, [r3, #0]
 8010ae0:	e069      	b.n	8010bb6 <USB_EPStartXfer+0x12a0>
 8010ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	691b      	ldr	r3, [r3, #16]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d10c      	bne.n	8010b0c <USB_EPStartXfer+0x11f6>
 8010af2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010af6:	881b      	ldrh	r3, [r3, #0]
 8010af8:	b29b      	uxth	r3, r3
 8010afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010b02:	b29a      	uxth	r2, r3
 8010b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b08:	801a      	strh	r2, [r3, #0]
 8010b0a:	e054      	b.n	8010bb6 <USB_EPStartXfer+0x12a0>
 8010b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	691b      	ldr	r3, [r3, #16]
 8010b18:	085b      	lsrs	r3, r3, #1
 8010b1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	691b      	ldr	r3, [r3, #16]
 8010b2a:	f003 0301 	and.w	r3, r3, #1
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d004      	beq.n	8010b3c <USB_EPStartXfer+0x1226>
 8010b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b36:	3301      	adds	r3, #1
 8010b38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b40:	881b      	ldrh	r3, [r3, #0]
 8010b42:	b29a      	uxth	r2, r3
 8010b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b48:	b29b      	uxth	r3, r3
 8010b4a:	029b      	lsls	r3, r3, #10
 8010b4c:	b29b      	uxth	r3, r3
 8010b4e:	4313      	orrs	r3, r2
 8010b50:	b29a      	uxth	r2, r3
 8010b52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b56:	801a      	strh	r2, [r3, #0]
 8010b58:	e02d      	b.n	8010bb6 <USB_EPStartXfer+0x12a0>
 8010b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	785b      	ldrb	r3, [r3, #1]
 8010b66:	2b01      	cmp	r3, #1
 8010b68:	d125      	bne.n	8010bb6 <USB_EPStartXfer+0x12a0>
 8010b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b78:	b29b      	uxth	r3, r3
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010b80:	4413      	add	r3, r2
 8010b82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	00da      	lsls	r2, r3, #3
 8010b94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010b98:	4413      	add	r3, r2
 8010b9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	691b      	ldr	r3, [r3, #16]
 8010bae:	b29a      	uxth	r2, r3
 8010bb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010bb4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8010bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	69db      	ldr	r3, [r3, #28]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	f000 8218 	beq.w	8010ff8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8010bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010bd0:	681a      	ldr	r2, [r3, #0]
 8010bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	781b      	ldrb	r3, [r3, #0]
 8010bde:	009b      	lsls	r3, r3, #2
 8010be0:	4413      	add	r3, r2
 8010be2:	881b      	ldrh	r3, [r3, #0]
 8010be4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010be8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d005      	beq.n	8010c00 <USB_EPStartXfer+0x12ea>
 8010bf4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d10d      	bne.n	8010c1c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010c00:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	f040 81f5 	bne.w	8010ff8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010c0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	f040 81ee 	bne.w	8010ff8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8010c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c24:	681a      	ldr	r2, [r3, #0]
 8010c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	009b      	lsls	r3, r3, #2
 8010c34:	4413      	add	r3, r2
 8010c36:	881b      	ldrh	r3, [r3, #0]
 8010c38:	b29b      	uxth	r3, r3
 8010c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c42:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8010c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c4e:	681a      	ldr	r2, [r3, #0]
 8010c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	781b      	ldrb	r3, [r3, #0]
 8010c5c:	009b      	lsls	r3, r3, #2
 8010c5e:	441a      	add	r2, r3
 8010c60:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8010c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010c74:	b29b      	uxth	r3, r3
 8010c76:	8013      	strh	r3, [r2, #0]
 8010c78:	e1be      	b.n	8010ff8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8010c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	78db      	ldrb	r3, [r3, #3]
 8010c86:	2b01      	cmp	r3, #1
 8010c88:	f040 81b4 	bne.w	8010ff4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8010c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	699a      	ldr	r2, [r3, #24]
 8010c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	691b      	ldr	r3, [r3, #16]
 8010ca4:	429a      	cmp	r2, r3
 8010ca6:	d917      	bls.n	8010cd8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8010ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	691b      	ldr	r3, [r3, #16]
 8010cb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8010cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	699a      	ldr	r2, [r3, #24]
 8010cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cc8:	1ad2      	subs	r2, r2, r3
 8010cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	619a      	str	r2, [r3, #24]
 8010cd6:	e00e      	b.n	8010cf6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8010cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	699b      	ldr	r3, [r3, #24]
 8010ce4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8010ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8010cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	785b      	ldrb	r3, [r3, #1]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	f040 8085 	bne.w	8010e12 <USB_EPStartXfer+0x14fc>
 8010d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010d24:	b29b      	uxth	r3, r3
 8010d26:	461a      	mov	r2, r3
 8010d28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010d2c:	4413      	add	r3, r2
 8010d2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	00da      	lsls	r2, r3, #3
 8010d40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010d44:	4413      	add	r3, r2
 8010d46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010d4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010d4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010d52:	881b      	ldrh	r3, [r3, #0]
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010d5a:	b29a      	uxth	r2, r3
 8010d5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010d60:	801a      	strh	r2, [r3, #0]
 8010d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d66:	2b3e      	cmp	r3, #62	; 0x3e
 8010d68:	d923      	bls.n	8010db2 <USB_EPStartXfer+0x149c>
 8010d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d6e:	095b      	lsrs	r3, r3, #5
 8010d70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d78:	f003 031f 	and.w	r3, r3, #31
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d104      	bne.n	8010d8a <USB_EPStartXfer+0x1474>
 8010d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d84:	3b01      	subs	r3, #1
 8010d86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010d8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010d8e:	881b      	ldrh	r3, [r3, #0]
 8010d90:	b29a      	uxth	r2, r3
 8010d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d96:	b29b      	uxth	r3, r3
 8010d98:	029b      	lsls	r3, r3, #10
 8010d9a:	b29b      	uxth	r3, r3
 8010d9c:	4313      	orrs	r3, r2
 8010d9e:	b29b      	uxth	r3, r3
 8010da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010da8:	b29a      	uxth	r2, r3
 8010daa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010dae:	801a      	strh	r2, [r3, #0]
 8010db0:	e060      	b.n	8010e74 <USB_EPStartXfer+0x155e>
 8010db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d10c      	bne.n	8010dd4 <USB_EPStartXfer+0x14be>
 8010dba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010dbe:	881b      	ldrh	r3, [r3, #0]
 8010dc0:	b29b      	uxth	r3, r3
 8010dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010dca:	b29a      	uxth	r2, r3
 8010dcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010dd0:	801a      	strh	r2, [r3, #0]
 8010dd2:	e04f      	b.n	8010e74 <USB_EPStartXfer+0x155e>
 8010dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010dd8:	085b      	lsrs	r3, r3, #1
 8010dda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010de2:	f003 0301 	and.w	r3, r3, #1
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d004      	beq.n	8010df4 <USB_EPStartXfer+0x14de>
 8010dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010dee:	3301      	adds	r3, #1
 8010df0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010df4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010df8:	881b      	ldrh	r3, [r3, #0]
 8010dfa:	b29a      	uxth	r2, r3
 8010dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	029b      	lsls	r3, r3, #10
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	4313      	orrs	r3, r2
 8010e08:	b29a      	uxth	r2, r3
 8010e0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010e0e:	801a      	strh	r2, [r3, #0]
 8010e10:	e030      	b.n	8010e74 <USB_EPStartXfer+0x155e>
 8010e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	785b      	ldrb	r3, [r3, #1]
 8010e1e:	2b01      	cmp	r3, #1
 8010e20:	d128      	bne.n	8010e74 <USB_EPStartXfer+0x155e>
 8010e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e3e:	b29b      	uxth	r3, r3
 8010e40:	461a      	mov	r2, r3
 8010e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010e46:	4413      	add	r3, r2
 8010e48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	781b      	ldrb	r3, [r3, #0]
 8010e58:	00da      	lsls	r2, r3, #3
 8010e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010e5e:	4413      	add	r3, r2
 8010e60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010e64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e6c:	b29a      	uxth	r2, r3
 8010e6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010e72:	801a      	strh	r2, [r3, #0]
 8010e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	785b      	ldrb	r3, [r3, #1]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	f040 8085 	bne.w	8010f9e <USB_EPStartXfer+0x1688>
 8010e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010eb0:	b29b      	uxth	r3, r3
 8010eb2:	461a      	mov	r2, r3
 8010eb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010eb8:	4413      	add	r3, r2
 8010eba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	00da      	lsls	r2, r3, #3
 8010ecc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010ed0:	4413      	add	r3, r2
 8010ed2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010ed6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010eda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010ede:	881b      	ldrh	r3, [r3, #0]
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010ee6:	b29a      	uxth	r2, r3
 8010ee8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010eec:	801a      	strh	r2, [r3, #0]
 8010eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ef2:	2b3e      	cmp	r3, #62	; 0x3e
 8010ef4:	d923      	bls.n	8010f3e <USB_EPStartXfer+0x1628>
 8010ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010efa:	095b      	lsrs	r3, r3, #5
 8010efc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f04:	f003 031f 	and.w	r3, r3, #31
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d104      	bne.n	8010f16 <USB_EPStartXfer+0x1600>
 8010f0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010f10:	3b01      	subs	r3, #1
 8010f12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010f16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010f1a:	881b      	ldrh	r3, [r3, #0]
 8010f1c:	b29a      	uxth	r2, r3
 8010f1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010f22:	b29b      	uxth	r3, r3
 8010f24:	029b      	lsls	r3, r3, #10
 8010f26:	b29b      	uxth	r3, r3
 8010f28:	4313      	orrs	r3, r2
 8010f2a:	b29b      	uxth	r3, r3
 8010f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f34:	b29a      	uxth	r2, r3
 8010f36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010f3a:	801a      	strh	r2, [r3, #0]
 8010f3c:	e05c      	b.n	8010ff8 <USB_EPStartXfer+0x16e2>
 8010f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d10c      	bne.n	8010f60 <USB_EPStartXfer+0x164a>
 8010f46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010f4a:	881b      	ldrh	r3, [r3, #0]
 8010f4c:	b29b      	uxth	r3, r3
 8010f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f56:	b29a      	uxth	r2, r3
 8010f58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010f5c:	801a      	strh	r2, [r3, #0]
 8010f5e:	e04b      	b.n	8010ff8 <USB_EPStartXfer+0x16e2>
 8010f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f64:	085b      	lsrs	r3, r3, #1
 8010f66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f6e:	f003 0301 	and.w	r3, r3, #1
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d004      	beq.n	8010f80 <USB_EPStartXfer+0x166a>
 8010f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010f7a:	3301      	adds	r3, #1
 8010f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010f80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010f84:	881b      	ldrh	r3, [r3, #0]
 8010f86:	b29a      	uxth	r2, r3
 8010f88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010f8c:	b29b      	uxth	r3, r3
 8010f8e:	029b      	lsls	r3, r3, #10
 8010f90:	b29b      	uxth	r3, r3
 8010f92:	4313      	orrs	r3, r2
 8010f94:	b29a      	uxth	r2, r3
 8010f96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010f9a:	801a      	strh	r2, [r3, #0]
 8010f9c:	e02c      	b.n	8010ff8 <USB_EPStartXfer+0x16e2>
 8010f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	785b      	ldrb	r3, [r3, #1]
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	d124      	bne.n	8010ff8 <USB_EPStartXfer+0x16e2>
 8010fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010fbc:	b29b      	uxth	r3, r3
 8010fbe:	461a      	mov	r2, r3
 8010fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010fc4:	4413      	add	r3, r2
 8010fc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	00da      	lsls	r2, r3, #3
 8010fd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010fdc:	4413      	add	r3, r2
 8010fde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010fe2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fea:	b29a      	uxth	r2, r3
 8010fec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010ff0:	801a      	strh	r2, [r3, #0]
 8010ff2:	e001      	b.n	8010ff8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	e03a      	b.n	801106e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011000:	681a      	ldr	r2, [r3, #0]
 8011002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	781b      	ldrb	r3, [r3, #0]
 801100e:	009b      	lsls	r3, r3, #2
 8011010:	4413      	add	r3, r2
 8011012:	881b      	ldrh	r3, [r3, #0]
 8011014:	b29b      	uxth	r3, r3
 8011016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801101a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801101e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011022:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011026:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801102a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801102e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011032:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011036:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801103a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801103e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011042:	681a      	ldr	r2, [r3, #0]
 8011044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	009b      	lsls	r3, r3, #2
 8011052:	441a      	add	r2, r3
 8011054:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801105c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011068:	b29b      	uxth	r3, r3
 801106a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801106c:	2300      	movs	r3, #0
}
 801106e:	4618      	mov	r0, r3
 8011070:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}

08011078 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011078:	b480      	push	{r7}
 801107a:	b085      	sub	sp, #20
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	785b      	ldrb	r3, [r3, #1]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d020      	beq.n	80110cc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801108a:	687a      	ldr	r2, [r7, #4]
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	009b      	lsls	r3, r3, #2
 8011092:	4413      	add	r3, r2
 8011094:	881b      	ldrh	r3, [r3, #0]
 8011096:	b29b      	uxth	r3, r3
 8011098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801109c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80110a0:	81bb      	strh	r3, [r7, #12]
 80110a2:	89bb      	ldrh	r3, [r7, #12]
 80110a4:	f083 0310 	eor.w	r3, r3, #16
 80110a8:	81bb      	strh	r3, [r7, #12]
 80110aa:	687a      	ldr	r2, [r7, #4]
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	009b      	lsls	r3, r3, #2
 80110b2:	441a      	add	r2, r3
 80110b4:	89bb      	ldrh	r3, [r7, #12]
 80110b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80110ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80110be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80110c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110c6:	b29b      	uxth	r3, r3
 80110c8:	8013      	strh	r3, [r2, #0]
 80110ca:	e01f      	b.n	801110c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80110cc:	687a      	ldr	r2, [r7, #4]
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	009b      	lsls	r3, r3, #2
 80110d4:	4413      	add	r3, r2
 80110d6:	881b      	ldrh	r3, [r3, #0]
 80110d8:	b29b      	uxth	r3, r3
 80110da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80110de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110e2:	81fb      	strh	r3, [r7, #14]
 80110e4:	89fb      	ldrh	r3, [r7, #14]
 80110e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80110ea:	81fb      	strh	r3, [r7, #14]
 80110ec:	687a      	ldr	r2, [r7, #4]
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	009b      	lsls	r3, r3, #2
 80110f4:	441a      	add	r2, r3
 80110f6:	89fb      	ldrh	r3, [r7, #14]
 80110f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80110fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011108:	b29b      	uxth	r3, r3
 801110a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801110c:	2300      	movs	r3, #0
}
 801110e:	4618      	mov	r0, r3
 8011110:	3714      	adds	r7, #20
 8011112:	46bd      	mov	sp, r7
 8011114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011118:	4770      	bx	lr

0801111a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801111a:	b480      	push	{r7}
 801111c:	b087      	sub	sp, #28
 801111e:	af00      	add	r7, sp, #0
 8011120:	6078      	str	r0, [r7, #4]
 8011122:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	7b1b      	ldrb	r3, [r3, #12]
 8011128:	2b00      	cmp	r3, #0
 801112a:	f040 809d 	bne.w	8011268 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	785b      	ldrb	r3, [r3, #1]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d04c      	beq.n	80111d0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011136:	687a      	ldr	r2, [r7, #4]
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	781b      	ldrb	r3, [r3, #0]
 801113c:	009b      	lsls	r3, r3, #2
 801113e:	4413      	add	r3, r2
 8011140:	881b      	ldrh	r3, [r3, #0]
 8011142:	823b      	strh	r3, [r7, #16]
 8011144:	8a3b      	ldrh	r3, [r7, #16]
 8011146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801114a:	2b00      	cmp	r3, #0
 801114c:	d01b      	beq.n	8011186 <USB_EPClearStall+0x6c>
 801114e:	687a      	ldr	r2, [r7, #4]
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	009b      	lsls	r3, r3, #2
 8011156:	4413      	add	r3, r2
 8011158:	881b      	ldrh	r3, [r3, #0]
 801115a:	b29b      	uxth	r3, r3
 801115c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011164:	81fb      	strh	r3, [r7, #14]
 8011166:	687a      	ldr	r2, [r7, #4]
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	781b      	ldrb	r3, [r3, #0]
 801116c:	009b      	lsls	r3, r3, #2
 801116e:	441a      	add	r2, r3
 8011170:	89fb      	ldrh	r3, [r7, #14]
 8011172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801117a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801117e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011182:	b29b      	uxth	r3, r3
 8011184:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	78db      	ldrb	r3, [r3, #3]
 801118a:	2b01      	cmp	r3, #1
 801118c:	d06c      	beq.n	8011268 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801118e:	687a      	ldr	r2, [r7, #4]
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	781b      	ldrb	r3, [r3, #0]
 8011194:	009b      	lsls	r3, r3, #2
 8011196:	4413      	add	r3, r2
 8011198:	881b      	ldrh	r3, [r3, #0]
 801119a:	b29b      	uxth	r3, r3
 801119c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80111a4:	81bb      	strh	r3, [r7, #12]
 80111a6:	89bb      	ldrh	r3, [r7, #12]
 80111a8:	f083 0320 	eor.w	r3, r3, #32
 80111ac:	81bb      	strh	r3, [r7, #12]
 80111ae:	687a      	ldr	r2, [r7, #4]
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	009b      	lsls	r3, r3, #2
 80111b6:	441a      	add	r2, r3
 80111b8:	89bb      	ldrh	r3, [r7, #12]
 80111ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80111be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80111c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111ca:	b29b      	uxth	r3, r3
 80111cc:	8013      	strh	r3, [r2, #0]
 80111ce:	e04b      	b.n	8011268 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80111d0:	687a      	ldr	r2, [r7, #4]
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	009b      	lsls	r3, r3, #2
 80111d8:	4413      	add	r3, r2
 80111da:	881b      	ldrh	r3, [r3, #0]
 80111dc:	82fb      	strh	r3, [r7, #22]
 80111de:	8afb      	ldrh	r3, [r7, #22]
 80111e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d01b      	beq.n	8011220 <USB_EPClearStall+0x106>
 80111e8:	687a      	ldr	r2, [r7, #4]
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	781b      	ldrb	r3, [r3, #0]
 80111ee:	009b      	lsls	r3, r3, #2
 80111f0:	4413      	add	r3, r2
 80111f2:	881b      	ldrh	r3, [r3, #0]
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80111fe:	82bb      	strh	r3, [r7, #20]
 8011200:	687a      	ldr	r2, [r7, #4]
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	009b      	lsls	r3, r3, #2
 8011208:	441a      	add	r2, r3
 801120a:	8abb      	ldrh	r3, [r7, #20]
 801120c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011214:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801121c:	b29b      	uxth	r3, r3
 801121e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011220:	687a      	ldr	r2, [r7, #4]
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	009b      	lsls	r3, r3, #2
 8011228:	4413      	add	r3, r2
 801122a:	881b      	ldrh	r3, [r3, #0]
 801122c:	b29b      	uxth	r3, r3
 801122e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011236:	827b      	strh	r3, [r7, #18]
 8011238:	8a7b      	ldrh	r3, [r7, #18]
 801123a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801123e:	827b      	strh	r3, [r7, #18]
 8011240:	8a7b      	ldrh	r3, [r7, #18]
 8011242:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011246:	827b      	strh	r3, [r7, #18]
 8011248:	687a      	ldr	r2, [r7, #4]
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	781b      	ldrb	r3, [r3, #0]
 801124e:	009b      	lsls	r3, r3, #2
 8011250:	441a      	add	r2, r3
 8011252:	8a7b      	ldrh	r3, [r7, #18]
 8011254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801125c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011264:	b29b      	uxth	r3, r3
 8011266:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8011268:	2300      	movs	r3, #0
}
 801126a:	4618      	mov	r0, r3
 801126c:	371c      	adds	r7, #28
 801126e:	46bd      	mov	sp, r7
 8011270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011274:	4770      	bx	lr

08011276 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8011276:	b480      	push	{r7}
 8011278:	b083      	sub	sp, #12
 801127a:	af00      	add	r7, sp, #0
 801127c:	6078      	str	r0, [r7, #4]
 801127e:	460b      	mov	r3, r1
 8011280:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8011282:	78fb      	ldrb	r3, [r7, #3]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d103      	bne.n	8011290 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2280      	movs	r2, #128	; 0x80
 801128c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8011290:	2300      	movs	r3, #0
}
 8011292:	4618      	mov	r0, r3
 8011294:	370c      	adds	r7, #12
 8011296:	46bd      	mov	sp, r7
 8011298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129c:	4770      	bx	lr

0801129e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801129e:	b480      	push	{r7}
 80112a0:	b083      	sub	sp, #12
 80112a2:	af00      	add	r7, sp, #0
 80112a4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80112ac:	b29b      	uxth	r3, r3
 80112ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80112b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80112b6:	b29a      	uxth	r2, r3
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80112be:	2300      	movs	r3, #0
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	370c      	adds	r7, #12
 80112c4:	46bd      	mov	sp, r7
 80112c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ca:	4770      	bx	lr

080112cc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80112cc:	b480      	push	{r7}
 80112ce:	b083      	sub	sp, #12
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80112da:	b29b      	uxth	r3, r3
 80112dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80112e0:	b29a      	uxth	r2, r3
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80112e8:	2300      	movs	r3, #0
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	370c      	adds	r7, #12
 80112ee:	46bd      	mov	sp, r7
 80112f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f4:	4770      	bx	lr

080112f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80112f6:	b480      	push	{r7}
 80112f8:	b085      	sub	sp, #20
 80112fa:	af00      	add	r7, sp, #0
 80112fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011304:	b29b      	uxth	r3, r3
 8011306:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8011308:	68fb      	ldr	r3, [r7, #12]
}
 801130a:	4618      	mov	r0, r3
 801130c:	3714      	adds	r7, #20
 801130e:	46bd      	mov	sp, r7
 8011310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011314:	4770      	bx	lr

08011316 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8011316:	b480      	push	{r7}
 8011318:	b083      	sub	sp, #12
 801131a:	af00      	add	r7, sp, #0
 801131c:	6078      	str	r0, [r7, #4]
 801131e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8011320:	2300      	movs	r3, #0
}
 8011322:	4618      	mov	r0, r3
 8011324:	370c      	adds	r7, #12
 8011326:	46bd      	mov	sp, r7
 8011328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132c:	4770      	bx	lr

0801132e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801132e:	b480      	push	{r7}
 8011330:	b08b      	sub	sp, #44	; 0x2c
 8011332:	af00      	add	r7, sp, #0
 8011334:	60f8      	str	r0, [r7, #12]
 8011336:	60b9      	str	r1, [r7, #8]
 8011338:	4611      	mov	r1, r2
 801133a:	461a      	mov	r2, r3
 801133c:	460b      	mov	r3, r1
 801133e:	80fb      	strh	r3, [r7, #6]
 8011340:	4613      	mov	r3, r2
 8011342:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011344:	88bb      	ldrh	r3, [r7, #4]
 8011346:	3301      	adds	r3, #1
 8011348:	085b      	lsrs	r3, r3, #1
 801134a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011354:	88fa      	ldrh	r2, [r7, #6]
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	4413      	add	r3, r2
 801135a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801135e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011360:	69bb      	ldr	r3, [r7, #24]
 8011362:	627b      	str	r3, [r7, #36]	; 0x24
 8011364:	e01b      	b.n	801139e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8011366:	69fb      	ldr	r3, [r7, #28]
 8011368:	781b      	ldrb	r3, [r3, #0]
 801136a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801136c:	69fb      	ldr	r3, [r7, #28]
 801136e:	3301      	adds	r3, #1
 8011370:	781b      	ldrb	r3, [r3, #0]
 8011372:	021b      	lsls	r3, r3, #8
 8011374:	b21a      	sxth	r2, r3
 8011376:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801137a:	4313      	orrs	r3, r2
 801137c:	b21b      	sxth	r3, r3
 801137e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011380:	6a3b      	ldr	r3, [r7, #32]
 8011382:	8a7a      	ldrh	r2, [r7, #18]
 8011384:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011386:	6a3b      	ldr	r3, [r7, #32]
 8011388:	3302      	adds	r3, #2
 801138a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801138c:	69fb      	ldr	r3, [r7, #28]
 801138e:	3301      	adds	r3, #1
 8011390:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8011392:	69fb      	ldr	r3, [r7, #28]
 8011394:	3301      	adds	r3, #1
 8011396:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801139a:	3b01      	subs	r3, #1
 801139c:	627b      	str	r3, [r7, #36]	; 0x24
 801139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d1e0      	bne.n	8011366 <USB_WritePMA+0x38>
  }
}
 80113a4:	bf00      	nop
 80113a6:	bf00      	nop
 80113a8:	372c      	adds	r7, #44	; 0x2c
 80113aa:	46bd      	mov	sp, r7
 80113ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b0:	4770      	bx	lr

080113b2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80113b2:	b480      	push	{r7}
 80113b4:	b08b      	sub	sp, #44	; 0x2c
 80113b6:	af00      	add	r7, sp, #0
 80113b8:	60f8      	str	r0, [r7, #12]
 80113ba:	60b9      	str	r1, [r7, #8]
 80113bc:	4611      	mov	r1, r2
 80113be:	461a      	mov	r2, r3
 80113c0:	460b      	mov	r3, r1
 80113c2:	80fb      	strh	r3, [r7, #6]
 80113c4:	4613      	mov	r3, r2
 80113c6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80113c8:	88bb      	ldrh	r3, [r7, #4]
 80113ca:	085b      	lsrs	r3, r3, #1
 80113cc:	b29b      	uxth	r3, r3
 80113ce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80113d8:	88fa      	ldrh	r2, [r7, #6]
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	4413      	add	r3, r2
 80113de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80113e2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80113e4:	69bb      	ldr	r3, [r7, #24]
 80113e6:	627b      	str	r3, [r7, #36]	; 0x24
 80113e8:	e018      	b.n	801141c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80113ea:	6a3b      	ldr	r3, [r7, #32]
 80113ec:	881b      	ldrh	r3, [r3, #0]
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80113f2:	6a3b      	ldr	r3, [r7, #32]
 80113f4:	3302      	adds	r3, #2
 80113f6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80113f8:	693b      	ldr	r3, [r7, #16]
 80113fa:	b2da      	uxtb	r2, r3
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011400:	69fb      	ldr	r3, [r7, #28]
 8011402:	3301      	adds	r3, #1
 8011404:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8011406:	693b      	ldr	r3, [r7, #16]
 8011408:	0a1b      	lsrs	r3, r3, #8
 801140a:	b2da      	uxtb	r2, r3
 801140c:	69fb      	ldr	r3, [r7, #28]
 801140e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	3301      	adds	r3, #1
 8011414:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011418:	3b01      	subs	r3, #1
 801141a:	627b      	str	r3, [r7, #36]	; 0x24
 801141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141e:	2b00      	cmp	r3, #0
 8011420:	d1e3      	bne.n	80113ea <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8011422:	88bb      	ldrh	r3, [r7, #4]
 8011424:	f003 0301 	and.w	r3, r3, #1
 8011428:	b29b      	uxth	r3, r3
 801142a:	2b00      	cmp	r3, #0
 801142c:	d007      	beq.n	801143e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 801142e:	6a3b      	ldr	r3, [r7, #32]
 8011430:	881b      	ldrh	r3, [r3, #0]
 8011432:	b29b      	uxth	r3, r3
 8011434:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	b2da      	uxtb	r2, r3
 801143a:	69fb      	ldr	r3, [r7, #28]
 801143c:	701a      	strb	r2, [r3, #0]
  }
}
 801143e:	bf00      	nop
 8011440:	372c      	adds	r7, #44	; 0x2c
 8011442:	46bd      	mov	sp, r7
 8011444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011448:	4770      	bx	lr
	...

0801144c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b084      	sub	sp, #16
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
 8011454:	460b      	mov	r3, r1
 8011456:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011458:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801145c:	f003 fa1a 	bl	8014894 <USBD_static_malloc>
 8011460:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d109      	bne.n	801147c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	32b0      	adds	r2, #176	; 0xb0
 8011472:	2100      	movs	r1, #0
 8011474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011478:	2302      	movs	r3, #2
 801147a:	e0d4      	b.n	8011626 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801147c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8011480:	2100      	movs	r1, #0
 8011482:	68f8      	ldr	r0, [r7, #12]
 8011484:	f005 f9b9 	bl	80167fa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	32b0      	adds	r2, #176	; 0xb0
 8011492:	68f9      	ldr	r1, [r7, #12]
 8011494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	32b0      	adds	r2, #176	; 0xb0
 80114a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	7c1b      	ldrb	r3, [r3, #16]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d138      	bne.n	8011526 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80114b4:	4b5e      	ldr	r3, [pc, #376]	; (8011630 <USBD_CDC_Init+0x1e4>)
 80114b6:	7819      	ldrb	r1, [r3, #0]
 80114b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80114bc:	2202      	movs	r2, #2
 80114be:	6878      	ldr	r0, [r7, #4]
 80114c0:	f002 ffea 	bl	8014498 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80114c4:	4b5a      	ldr	r3, [pc, #360]	; (8011630 <USBD_CDC_Init+0x1e4>)
 80114c6:	781b      	ldrb	r3, [r3, #0]
 80114c8:	f003 020f 	and.w	r2, r3, #15
 80114cc:	6879      	ldr	r1, [r7, #4]
 80114ce:	4613      	mov	r3, r2
 80114d0:	009b      	lsls	r3, r3, #2
 80114d2:	4413      	add	r3, r2
 80114d4:	009b      	lsls	r3, r3, #2
 80114d6:	440b      	add	r3, r1
 80114d8:	3324      	adds	r3, #36	; 0x24
 80114da:	2201      	movs	r2, #1
 80114dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80114de:	4b55      	ldr	r3, [pc, #340]	; (8011634 <USBD_CDC_Init+0x1e8>)
 80114e0:	7819      	ldrb	r1, [r3, #0]
 80114e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80114e6:	2202      	movs	r2, #2
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f002 ffd5 	bl	8014498 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80114ee:	4b51      	ldr	r3, [pc, #324]	; (8011634 <USBD_CDC_Init+0x1e8>)
 80114f0:	781b      	ldrb	r3, [r3, #0]
 80114f2:	f003 020f 	and.w	r2, r3, #15
 80114f6:	6879      	ldr	r1, [r7, #4]
 80114f8:	4613      	mov	r3, r2
 80114fa:	009b      	lsls	r3, r3, #2
 80114fc:	4413      	add	r3, r2
 80114fe:	009b      	lsls	r3, r3, #2
 8011500:	440b      	add	r3, r1
 8011502:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011506:	2201      	movs	r2, #1
 8011508:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801150a:	4b4b      	ldr	r3, [pc, #300]	; (8011638 <USBD_CDC_Init+0x1ec>)
 801150c:	781b      	ldrb	r3, [r3, #0]
 801150e:	f003 020f 	and.w	r2, r3, #15
 8011512:	6879      	ldr	r1, [r7, #4]
 8011514:	4613      	mov	r3, r2
 8011516:	009b      	lsls	r3, r3, #2
 8011518:	4413      	add	r3, r2
 801151a:	009b      	lsls	r3, r3, #2
 801151c:	440b      	add	r3, r1
 801151e:	3326      	adds	r3, #38	; 0x26
 8011520:	2210      	movs	r2, #16
 8011522:	801a      	strh	r2, [r3, #0]
 8011524:	e035      	b.n	8011592 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011526:	4b42      	ldr	r3, [pc, #264]	; (8011630 <USBD_CDC_Init+0x1e4>)
 8011528:	7819      	ldrb	r1, [r3, #0]
 801152a:	2340      	movs	r3, #64	; 0x40
 801152c:	2202      	movs	r2, #2
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f002 ffb2 	bl	8014498 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011534:	4b3e      	ldr	r3, [pc, #248]	; (8011630 <USBD_CDC_Init+0x1e4>)
 8011536:	781b      	ldrb	r3, [r3, #0]
 8011538:	f003 020f 	and.w	r2, r3, #15
 801153c:	6879      	ldr	r1, [r7, #4]
 801153e:	4613      	mov	r3, r2
 8011540:	009b      	lsls	r3, r3, #2
 8011542:	4413      	add	r3, r2
 8011544:	009b      	lsls	r3, r3, #2
 8011546:	440b      	add	r3, r1
 8011548:	3324      	adds	r3, #36	; 0x24
 801154a:	2201      	movs	r2, #1
 801154c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801154e:	4b39      	ldr	r3, [pc, #228]	; (8011634 <USBD_CDC_Init+0x1e8>)
 8011550:	7819      	ldrb	r1, [r3, #0]
 8011552:	2340      	movs	r3, #64	; 0x40
 8011554:	2202      	movs	r2, #2
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f002 ff9e 	bl	8014498 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801155c:	4b35      	ldr	r3, [pc, #212]	; (8011634 <USBD_CDC_Init+0x1e8>)
 801155e:	781b      	ldrb	r3, [r3, #0]
 8011560:	f003 020f 	and.w	r2, r3, #15
 8011564:	6879      	ldr	r1, [r7, #4]
 8011566:	4613      	mov	r3, r2
 8011568:	009b      	lsls	r3, r3, #2
 801156a:	4413      	add	r3, r2
 801156c:	009b      	lsls	r3, r3, #2
 801156e:	440b      	add	r3, r1
 8011570:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011574:	2201      	movs	r2, #1
 8011576:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011578:	4b2f      	ldr	r3, [pc, #188]	; (8011638 <USBD_CDC_Init+0x1ec>)
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	f003 020f 	and.w	r2, r3, #15
 8011580:	6879      	ldr	r1, [r7, #4]
 8011582:	4613      	mov	r3, r2
 8011584:	009b      	lsls	r3, r3, #2
 8011586:	4413      	add	r3, r2
 8011588:	009b      	lsls	r3, r3, #2
 801158a:	440b      	add	r3, r1
 801158c:	3326      	adds	r3, #38	; 0x26
 801158e:	2210      	movs	r2, #16
 8011590:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011592:	4b29      	ldr	r3, [pc, #164]	; (8011638 <USBD_CDC_Init+0x1ec>)
 8011594:	7819      	ldrb	r1, [r3, #0]
 8011596:	2308      	movs	r3, #8
 8011598:	2203      	movs	r2, #3
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f002 ff7c 	bl	8014498 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80115a0:	4b25      	ldr	r3, [pc, #148]	; (8011638 <USBD_CDC_Init+0x1ec>)
 80115a2:	781b      	ldrb	r3, [r3, #0]
 80115a4:	f003 020f 	and.w	r2, r3, #15
 80115a8:	6879      	ldr	r1, [r7, #4]
 80115aa:	4613      	mov	r3, r2
 80115ac:	009b      	lsls	r3, r3, #2
 80115ae:	4413      	add	r3, r2
 80115b0:	009b      	lsls	r3, r3, #2
 80115b2:	440b      	add	r3, r1
 80115b4:	3324      	adds	r3, #36	; 0x24
 80115b6:	2201      	movs	r2, #1
 80115b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	2200      	movs	r2, #0
 80115be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80115c8:	687a      	ldr	r2, [r7, #4]
 80115ca:	33b0      	adds	r3, #176	; 0xb0
 80115cc:	009b      	lsls	r3, r3, #2
 80115ce:	4413      	add	r3, r2
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	2200      	movs	r2, #0
 80115da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2200      	movs	r2, #0
 80115e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d101      	bne.n	80115f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80115f0:	2302      	movs	r3, #2
 80115f2:	e018      	b.n	8011626 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	7c1b      	ldrb	r3, [r3, #16]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d10a      	bne.n	8011612 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80115fc:	4b0d      	ldr	r3, [pc, #52]	; (8011634 <USBD_CDC_Init+0x1e8>)
 80115fe:	7819      	ldrb	r1, [r3, #0]
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011606:	f44f 7300 	mov.w	r3, #512	; 0x200
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f003 f8c0 	bl	8014790 <USBD_LL_PrepareReceive>
 8011610:	e008      	b.n	8011624 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011612:	4b08      	ldr	r3, [pc, #32]	; (8011634 <USBD_CDC_Init+0x1e8>)
 8011614:	7819      	ldrb	r1, [r3, #0]
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801161c:	2340      	movs	r3, #64	; 0x40
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f003 f8b6 	bl	8014790 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011624:	2300      	movs	r3, #0
}
 8011626:	4618      	mov	r0, r3
 8011628:	3710      	adds	r7, #16
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}
 801162e:	bf00      	nop
 8011630:	200000b7 	.word	0x200000b7
 8011634:	200000b8 	.word	0x200000b8
 8011638:	200000b9 	.word	0x200000b9

0801163c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b082      	sub	sp, #8
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	460b      	mov	r3, r1
 8011646:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8011648:	4b3a      	ldr	r3, [pc, #232]	; (8011734 <USBD_CDC_DeInit+0xf8>)
 801164a:	781b      	ldrb	r3, [r3, #0]
 801164c:	4619      	mov	r1, r3
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f002 ff60 	bl	8014514 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8011654:	4b37      	ldr	r3, [pc, #220]	; (8011734 <USBD_CDC_DeInit+0xf8>)
 8011656:	781b      	ldrb	r3, [r3, #0]
 8011658:	f003 020f 	and.w	r2, r3, #15
 801165c:	6879      	ldr	r1, [r7, #4]
 801165e:	4613      	mov	r3, r2
 8011660:	009b      	lsls	r3, r3, #2
 8011662:	4413      	add	r3, r2
 8011664:	009b      	lsls	r3, r3, #2
 8011666:	440b      	add	r3, r1
 8011668:	3324      	adds	r3, #36	; 0x24
 801166a:	2200      	movs	r2, #0
 801166c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801166e:	4b32      	ldr	r3, [pc, #200]	; (8011738 <USBD_CDC_DeInit+0xfc>)
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	4619      	mov	r1, r3
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f002 ff4d 	bl	8014514 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801167a:	4b2f      	ldr	r3, [pc, #188]	; (8011738 <USBD_CDC_DeInit+0xfc>)
 801167c:	781b      	ldrb	r3, [r3, #0]
 801167e:	f003 020f 	and.w	r2, r3, #15
 8011682:	6879      	ldr	r1, [r7, #4]
 8011684:	4613      	mov	r3, r2
 8011686:	009b      	lsls	r3, r3, #2
 8011688:	4413      	add	r3, r2
 801168a:	009b      	lsls	r3, r3, #2
 801168c:	440b      	add	r3, r1
 801168e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011692:	2200      	movs	r2, #0
 8011694:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8011696:	4b29      	ldr	r3, [pc, #164]	; (801173c <USBD_CDC_DeInit+0x100>)
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	4619      	mov	r1, r3
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f002 ff39 	bl	8014514 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80116a2:	4b26      	ldr	r3, [pc, #152]	; (801173c <USBD_CDC_DeInit+0x100>)
 80116a4:	781b      	ldrb	r3, [r3, #0]
 80116a6:	f003 020f 	and.w	r2, r3, #15
 80116aa:	6879      	ldr	r1, [r7, #4]
 80116ac:	4613      	mov	r3, r2
 80116ae:	009b      	lsls	r3, r3, #2
 80116b0:	4413      	add	r3, r2
 80116b2:	009b      	lsls	r3, r3, #2
 80116b4:	440b      	add	r3, r1
 80116b6:	3324      	adds	r3, #36	; 0x24
 80116b8:	2200      	movs	r2, #0
 80116ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80116bc:	4b1f      	ldr	r3, [pc, #124]	; (801173c <USBD_CDC_DeInit+0x100>)
 80116be:	781b      	ldrb	r3, [r3, #0]
 80116c0:	f003 020f 	and.w	r2, r3, #15
 80116c4:	6879      	ldr	r1, [r7, #4]
 80116c6:	4613      	mov	r3, r2
 80116c8:	009b      	lsls	r3, r3, #2
 80116ca:	4413      	add	r3, r2
 80116cc:	009b      	lsls	r3, r3, #2
 80116ce:	440b      	add	r3, r1
 80116d0:	3326      	adds	r3, #38	; 0x26
 80116d2:	2200      	movs	r2, #0
 80116d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	32b0      	adds	r2, #176	; 0xb0
 80116e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d01f      	beq.n	8011728 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80116ee:	687a      	ldr	r2, [r7, #4]
 80116f0:	33b0      	adds	r3, #176	; 0xb0
 80116f2:	009b      	lsls	r3, r3, #2
 80116f4:	4413      	add	r3, r2
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	685b      	ldr	r3, [r3, #4]
 80116fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	32b0      	adds	r2, #176	; 0xb0
 8011706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801170a:	4618      	mov	r0, r3
 801170c:	f003 f8d0 	bl	80148b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	32b0      	adds	r2, #176	; 0xb0
 801171a:	2100      	movs	r1, #0
 801171c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2200      	movs	r2, #0
 8011724:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011728:	2300      	movs	r3, #0
}
 801172a:	4618      	mov	r0, r3
 801172c:	3708      	adds	r7, #8
 801172e:	46bd      	mov	sp, r7
 8011730:	bd80      	pop	{r7, pc}
 8011732:	bf00      	nop
 8011734:	200000b7 	.word	0x200000b7
 8011738:	200000b8 	.word	0x200000b8
 801173c:	200000b9 	.word	0x200000b9

08011740 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b086      	sub	sp, #24
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	32b0      	adds	r2, #176	; 0xb0
 8011754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011758:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801175a:	2300      	movs	r3, #0
 801175c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801175e:	2300      	movs	r3, #0
 8011760:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011762:	2300      	movs	r3, #0
 8011764:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d101      	bne.n	8011770 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801176c:	2303      	movs	r3, #3
 801176e:	e0bf      	b.n	80118f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	781b      	ldrb	r3, [r3, #0]
 8011774:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011778:	2b00      	cmp	r3, #0
 801177a:	d050      	beq.n	801181e <USBD_CDC_Setup+0xde>
 801177c:	2b20      	cmp	r3, #32
 801177e:	f040 80af 	bne.w	80118e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	88db      	ldrh	r3, [r3, #6]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d03a      	beq.n	8011800 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	b25b      	sxtb	r3, r3
 8011790:	2b00      	cmp	r3, #0
 8011792:	da1b      	bge.n	80117cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801179a:	687a      	ldr	r2, [r7, #4]
 801179c:	33b0      	adds	r3, #176	; 0xb0
 801179e:	009b      	lsls	r3, r3, #2
 80117a0:	4413      	add	r3, r2
 80117a2:	685b      	ldr	r3, [r3, #4]
 80117a4:	689b      	ldr	r3, [r3, #8]
 80117a6:	683a      	ldr	r2, [r7, #0]
 80117a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80117aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80117ac:	683a      	ldr	r2, [r7, #0]
 80117ae:	88d2      	ldrh	r2, [r2, #6]
 80117b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	88db      	ldrh	r3, [r3, #6]
 80117b6:	2b07      	cmp	r3, #7
 80117b8:	bf28      	it	cs
 80117ba:	2307      	movcs	r3, #7
 80117bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80117be:	693b      	ldr	r3, [r7, #16]
 80117c0:	89fa      	ldrh	r2, [r7, #14]
 80117c2:	4619      	mov	r1, r3
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f001 fd21 	bl	801320c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80117ca:	e090      	b.n	80118ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	785a      	ldrb	r2, [r3, #1]
 80117d0:	693b      	ldr	r3, [r7, #16]
 80117d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	88db      	ldrh	r3, [r3, #6]
 80117da:	2b3f      	cmp	r3, #63	; 0x3f
 80117dc:	d803      	bhi.n	80117e6 <USBD_CDC_Setup+0xa6>
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	88db      	ldrh	r3, [r3, #6]
 80117e2:	b2da      	uxtb	r2, r3
 80117e4:	e000      	b.n	80117e8 <USBD_CDC_Setup+0xa8>
 80117e6:	2240      	movs	r2, #64	; 0x40
 80117e8:	693b      	ldr	r3, [r7, #16]
 80117ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80117ee:	6939      	ldr	r1, [r7, #16]
 80117f0:	693b      	ldr	r3, [r7, #16]
 80117f2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80117f6:	461a      	mov	r2, r3
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f001 fd33 	bl	8013264 <USBD_CtlPrepareRx>
      break;
 80117fe:	e076      	b.n	80118ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011806:	687a      	ldr	r2, [r7, #4]
 8011808:	33b0      	adds	r3, #176	; 0xb0
 801180a:	009b      	lsls	r3, r3, #2
 801180c:	4413      	add	r3, r2
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	689b      	ldr	r3, [r3, #8]
 8011812:	683a      	ldr	r2, [r7, #0]
 8011814:	7850      	ldrb	r0, [r2, #1]
 8011816:	2200      	movs	r2, #0
 8011818:	6839      	ldr	r1, [r7, #0]
 801181a:	4798      	blx	r3
      break;
 801181c:	e067      	b.n	80118ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	785b      	ldrb	r3, [r3, #1]
 8011822:	2b0b      	cmp	r3, #11
 8011824:	d851      	bhi.n	80118ca <USBD_CDC_Setup+0x18a>
 8011826:	a201      	add	r2, pc, #4	; (adr r2, 801182c <USBD_CDC_Setup+0xec>)
 8011828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801182c:	0801185d 	.word	0x0801185d
 8011830:	080118d9 	.word	0x080118d9
 8011834:	080118cb 	.word	0x080118cb
 8011838:	080118cb 	.word	0x080118cb
 801183c:	080118cb 	.word	0x080118cb
 8011840:	080118cb 	.word	0x080118cb
 8011844:	080118cb 	.word	0x080118cb
 8011848:	080118cb 	.word	0x080118cb
 801184c:	080118cb 	.word	0x080118cb
 8011850:	080118cb 	.word	0x080118cb
 8011854:	08011887 	.word	0x08011887
 8011858:	080118b1 	.word	0x080118b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011862:	b2db      	uxtb	r3, r3
 8011864:	2b03      	cmp	r3, #3
 8011866:	d107      	bne.n	8011878 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011868:	f107 030a 	add.w	r3, r7, #10
 801186c:	2202      	movs	r2, #2
 801186e:	4619      	mov	r1, r3
 8011870:	6878      	ldr	r0, [r7, #4]
 8011872:	f001 fccb 	bl	801320c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011876:	e032      	b.n	80118de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011878:	6839      	ldr	r1, [r7, #0]
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f001 fc55 	bl	801312a <USBD_CtlError>
            ret = USBD_FAIL;
 8011880:	2303      	movs	r3, #3
 8011882:	75fb      	strb	r3, [r7, #23]
          break;
 8011884:	e02b      	b.n	80118de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801188c:	b2db      	uxtb	r3, r3
 801188e:	2b03      	cmp	r3, #3
 8011890:	d107      	bne.n	80118a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011892:	f107 030d 	add.w	r3, r7, #13
 8011896:	2201      	movs	r2, #1
 8011898:	4619      	mov	r1, r3
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f001 fcb6 	bl	801320c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80118a0:	e01d      	b.n	80118de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80118a2:	6839      	ldr	r1, [r7, #0]
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f001 fc40 	bl	801312a <USBD_CtlError>
            ret = USBD_FAIL;
 80118aa:	2303      	movs	r3, #3
 80118ac:	75fb      	strb	r3, [r7, #23]
          break;
 80118ae:	e016      	b.n	80118de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118b6:	b2db      	uxtb	r3, r3
 80118b8:	2b03      	cmp	r3, #3
 80118ba:	d00f      	beq.n	80118dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80118bc:	6839      	ldr	r1, [r7, #0]
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f001 fc33 	bl	801312a <USBD_CtlError>
            ret = USBD_FAIL;
 80118c4:	2303      	movs	r3, #3
 80118c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80118c8:	e008      	b.n	80118dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80118ca:	6839      	ldr	r1, [r7, #0]
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	f001 fc2c 	bl	801312a <USBD_CtlError>
          ret = USBD_FAIL;
 80118d2:	2303      	movs	r3, #3
 80118d4:	75fb      	strb	r3, [r7, #23]
          break;
 80118d6:	e002      	b.n	80118de <USBD_CDC_Setup+0x19e>
          break;
 80118d8:	bf00      	nop
 80118da:	e008      	b.n	80118ee <USBD_CDC_Setup+0x1ae>
          break;
 80118dc:	bf00      	nop
      }
      break;
 80118de:	e006      	b.n	80118ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80118e0:	6839      	ldr	r1, [r7, #0]
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f001 fc21 	bl	801312a <USBD_CtlError>
      ret = USBD_FAIL;
 80118e8:	2303      	movs	r3, #3
 80118ea:	75fb      	strb	r3, [r7, #23]
      break;
 80118ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80118ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3718      	adds	r7, #24
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}

080118f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b084      	sub	sp, #16
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
 8011900:	460b      	mov	r3, r1
 8011902:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801190a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	32b0      	adds	r2, #176	; 0xb0
 8011916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d101      	bne.n	8011922 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801191e:	2303      	movs	r3, #3
 8011920:	e065      	b.n	80119ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	32b0      	adds	r2, #176	; 0xb0
 801192c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011930:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011932:	78fb      	ldrb	r3, [r7, #3]
 8011934:	f003 020f 	and.w	r2, r3, #15
 8011938:	6879      	ldr	r1, [r7, #4]
 801193a:	4613      	mov	r3, r2
 801193c:	009b      	lsls	r3, r3, #2
 801193e:	4413      	add	r3, r2
 8011940:	009b      	lsls	r3, r3, #2
 8011942:	440b      	add	r3, r1
 8011944:	3318      	adds	r3, #24
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d02f      	beq.n	80119ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801194c:	78fb      	ldrb	r3, [r7, #3]
 801194e:	f003 020f 	and.w	r2, r3, #15
 8011952:	6879      	ldr	r1, [r7, #4]
 8011954:	4613      	mov	r3, r2
 8011956:	009b      	lsls	r3, r3, #2
 8011958:	4413      	add	r3, r2
 801195a:	009b      	lsls	r3, r3, #2
 801195c:	440b      	add	r3, r1
 801195e:	3318      	adds	r3, #24
 8011960:	681a      	ldr	r2, [r3, #0]
 8011962:	78fb      	ldrb	r3, [r7, #3]
 8011964:	f003 010f 	and.w	r1, r3, #15
 8011968:	68f8      	ldr	r0, [r7, #12]
 801196a:	460b      	mov	r3, r1
 801196c:	009b      	lsls	r3, r3, #2
 801196e:	440b      	add	r3, r1
 8011970:	00db      	lsls	r3, r3, #3
 8011972:	4403      	add	r3, r0
 8011974:	3338      	adds	r3, #56	; 0x38
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	fbb2 f1f3 	udiv	r1, r2, r3
 801197c:	fb01 f303 	mul.w	r3, r1, r3
 8011980:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011982:	2b00      	cmp	r3, #0
 8011984:	d112      	bne.n	80119ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8011986:	78fb      	ldrb	r3, [r7, #3]
 8011988:	f003 020f 	and.w	r2, r3, #15
 801198c:	6879      	ldr	r1, [r7, #4]
 801198e:	4613      	mov	r3, r2
 8011990:	009b      	lsls	r3, r3, #2
 8011992:	4413      	add	r3, r2
 8011994:	009b      	lsls	r3, r3, #2
 8011996:	440b      	add	r3, r1
 8011998:	3318      	adds	r3, #24
 801199a:	2200      	movs	r2, #0
 801199c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801199e:	78f9      	ldrb	r1, [r7, #3]
 80119a0:	2300      	movs	r3, #0
 80119a2:	2200      	movs	r2, #0
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f002 febb 	bl	8014720 <USBD_LL_Transmit>
 80119aa:	e01f      	b.n	80119ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	2200      	movs	r2, #0
 80119b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80119ba:	687a      	ldr	r2, [r7, #4]
 80119bc:	33b0      	adds	r3, #176	; 0xb0
 80119be:	009b      	lsls	r3, r3, #2
 80119c0:	4413      	add	r3, r2
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	691b      	ldr	r3, [r3, #16]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d010      	beq.n	80119ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80119d0:	687a      	ldr	r2, [r7, #4]
 80119d2:	33b0      	adds	r3, #176	; 0xb0
 80119d4:	009b      	lsls	r3, r3, #2
 80119d6:	4413      	add	r3, r2
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	691b      	ldr	r3, [r3, #16]
 80119dc:	68ba      	ldr	r2, [r7, #8]
 80119de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80119e2:	68ba      	ldr	r2, [r7, #8]
 80119e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80119e8:	78fa      	ldrb	r2, [r7, #3]
 80119ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80119ec:	2300      	movs	r3, #0
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3710      	adds	r7, #16
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}

080119f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80119f6:	b580      	push	{r7, lr}
 80119f8:	b084      	sub	sp, #16
 80119fa:	af00      	add	r7, sp, #0
 80119fc:	6078      	str	r0, [r7, #4]
 80119fe:	460b      	mov	r3, r1
 8011a00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	32b0      	adds	r2, #176	; 0xb0
 8011a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	32b0      	adds	r2, #176	; 0xb0
 8011a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d101      	bne.n	8011a28 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8011a24:	2303      	movs	r3, #3
 8011a26:	e01a      	b.n	8011a5e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011a28:	78fb      	ldrb	r3, [r7, #3]
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f002 fee7 	bl	8014800 <USBD_LL_GetRxDataSize>
 8011a32:	4602      	mov	r2, r0
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011a40:	687a      	ldr	r2, [r7, #4]
 8011a42:	33b0      	adds	r3, #176	; 0xb0
 8011a44:	009b      	lsls	r3, r3, #2
 8011a46:	4413      	add	r3, r2
 8011a48:	685b      	ldr	r3, [r3, #4]
 8011a4a:	68db      	ldr	r3, [r3, #12]
 8011a4c:	68fa      	ldr	r2, [r7, #12]
 8011a4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011a52:	68fa      	ldr	r2, [r7, #12]
 8011a54:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011a58:	4611      	mov	r1, r2
 8011a5a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011a5c:	2300      	movs	r3, #0
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3710      	adds	r7, #16
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}

08011a66 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011a66:	b580      	push	{r7, lr}
 8011a68:	b084      	sub	sp, #16
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	32b0      	adds	r2, #176	; 0xb0
 8011a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d101      	bne.n	8011a88 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011a84:	2303      	movs	r3, #3
 8011a86:	e025      	b.n	8011ad4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	33b0      	adds	r3, #176	; 0xb0
 8011a92:	009b      	lsls	r3, r3, #2
 8011a94:	4413      	add	r3, r2
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d01a      	beq.n	8011ad2 <USBD_CDC_EP0_RxReady+0x6c>
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011aa2:	2bff      	cmp	r3, #255	; 0xff
 8011aa4:	d015      	beq.n	8011ad2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011aac:	687a      	ldr	r2, [r7, #4]
 8011aae:	33b0      	adds	r3, #176	; 0xb0
 8011ab0:	009b      	lsls	r3, r3, #2
 8011ab2:	4413      	add	r3, r2
 8011ab4:	685b      	ldr	r3, [r3, #4]
 8011ab6:	689b      	ldr	r3, [r3, #8]
 8011ab8:	68fa      	ldr	r2, [r7, #12]
 8011aba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8011abe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8011ac0:	68fa      	ldr	r2, [r7, #12]
 8011ac2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011ac6:	b292      	uxth	r2, r2
 8011ac8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	22ff      	movs	r2, #255	; 0xff
 8011ace:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011ad2:	2300      	movs	r3, #0
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3710      	adds	r7, #16
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}

08011adc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b086      	sub	sp, #24
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011ae4:	2182      	movs	r1, #130	; 0x82
 8011ae6:	4818      	ldr	r0, [pc, #96]	; (8011b48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011ae8:	f000 fcbd 	bl	8012466 <USBD_GetEpDesc>
 8011aec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011aee:	2101      	movs	r1, #1
 8011af0:	4815      	ldr	r0, [pc, #84]	; (8011b48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011af2:	f000 fcb8 	bl	8012466 <USBD_GetEpDesc>
 8011af6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011af8:	2181      	movs	r1, #129	; 0x81
 8011afa:	4813      	ldr	r0, [pc, #76]	; (8011b48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011afc:	f000 fcb3 	bl	8012466 <USBD_GetEpDesc>
 8011b00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d002      	beq.n	8011b0e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	2210      	movs	r2, #16
 8011b0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d006      	beq.n	8011b22 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	2200      	movs	r2, #0
 8011b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011b1c:	711a      	strb	r2, [r3, #4]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d006      	beq.n	8011b36 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011b30:	711a      	strb	r2, [r3, #4]
 8011b32:	2200      	movs	r2, #0
 8011b34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2243      	movs	r2, #67	; 0x43
 8011b3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011b3c:	4b02      	ldr	r3, [pc, #8]	; (8011b48 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	3718      	adds	r7, #24
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
 8011b46:	bf00      	nop
 8011b48:	20000074 	.word	0x20000074

08011b4c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b086      	sub	sp, #24
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011b54:	2182      	movs	r1, #130	; 0x82
 8011b56:	4818      	ldr	r0, [pc, #96]	; (8011bb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011b58:	f000 fc85 	bl	8012466 <USBD_GetEpDesc>
 8011b5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011b5e:	2101      	movs	r1, #1
 8011b60:	4815      	ldr	r0, [pc, #84]	; (8011bb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011b62:	f000 fc80 	bl	8012466 <USBD_GetEpDesc>
 8011b66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011b68:	2181      	movs	r1, #129	; 0x81
 8011b6a:	4813      	ldr	r0, [pc, #76]	; (8011bb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011b6c:	f000 fc7b 	bl	8012466 <USBD_GetEpDesc>
 8011b70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d002      	beq.n	8011b7e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011b78:	697b      	ldr	r3, [r7, #20]
 8011b7a:	2210      	movs	r2, #16
 8011b7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d006      	beq.n	8011b92 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011b84:	693b      	ldr	r3, [r7, #16]
 8011b86:	2200      	movs	r2, #0
 8011b88:	711a      	strb	r2, [r3, #4]
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	f042 0202 	orr.w	r2, r2, #2
 8011b90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d006      	beq.n	8011ba6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	711a      	strb	r2, [r3, #4]
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	f042 0202 	orr.w	r2, r2, #2
 8011ba4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2243      	movs	r2, #67	; 0x43
 8011baa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011bac:	4b02      	ldr	r3, [pc, #8]	; (8011bb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3718      	adds	r7, #24
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	20000074 	.word	0x20000074

08011bbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b086      	sub	sp, #24
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011bc4:	2182      	movs	r1, #130	; 0x82
 8011bc6:	4818      	ldr	r0, [pc, #96]	; (8011c28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011bc8:	f000 fc4d 	bl	8012466 <USBD_GetEpDesc>
 8011bcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011bce:	2101      	movs	r1, #1
 8011bd0:	4815      	ldr	r0, [pc, #84]	; (8011c28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011bd2:	f000 fc48 	bl	8012466 <USBD_GetEpDesc>
 8011bd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011bd8:	2181      	movs	r1, #129	; 0x81
 8011bda:	4813      	ldr	r0, [pc, #76]	; (8011c28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011bdc:	f000 fc43 	bl	8012466 <USBD_GetEpDesc>
 8011be0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d002      	beq.n	8011bee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	2210      	movs	r2, #16
 8011bec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011bee:	693b      	ldr	r3, [r7, #16]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d006      	beq.n	8011c02 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011bf4:	693b      	ldr	r3, [r7, #16]
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011bfc:	711a      	strb	r2, [r3, #4]
 8011bfe:	2200      	movs	r2, #0
 8011c00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d006      	beq.n	8011c16 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011c10:	711a      	strb	r2, [r3, #4]
 8011c12:	2200      	movs	r2, #0
 8011c14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	2243      	movs	r2, #67	; 0x43
 8011c1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011c1c:	4b02      	ldr	r3, [pc, #8]	; (8011c28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3718      	adds	r7, #24
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	bf00      	nop
 8011c28:	20000074 	.word	0x20000074

08011c2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011c2c:	b480      	push	{r7}
 8011c2e:	b083      	sub	sp, #12
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	220a      	movs	r2, #10
 8011c38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011c3a:	4b03      	ldr	r3, [pc, #12]	; (8011c48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	370c      	adds	r7, #12
 8011c40:	46bd      	mov	sp, r7
 8011c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c46:	4770      	bx	lr
 8011c48:	20000030 	.word	0x20000030

08011c4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011c4c:	b480      	push	{r7}
 8011c4e:	b083      	sub	sp, #12
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
 8011c54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d101      	bne.n	8011c60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011c5c:	2303      	movs	r3, #3
 8011c5e:	e009      	b.n	8011c74 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011c66:	687a      	ldr	r2, [r7, #4]
 8011c68:	33b0      	adds	r3, #176	; 0xb0
 8011c6a:	009b      	lsls	r3, r3, #2
 8011c6c:	4413      	add	r3, r2
 8011c6e:	683a      	ldr	r2, [r7, #0]
 8011c70:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011c72:	2300      	movs	r3, #0
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	370c      	adds	r7, #12
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7e:	4770      	bx	lr

08011c80 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011c80:	b480      	push	{r7}
 8011c82:	b087      	sub	sp, #28
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	60f8      	str	r0, [r7, #12]
 8011c88:	60b9      	str	r1, [r7, #8]
 8011c8a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	32b0      	adds	r2, #176	; 0xb0
 8011c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c9a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d101      	bne.n	8011ca6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011ca2:	2303      	movs	r3, #3
 8011ca4:	e008      	b.n	8011cb8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8011ca6:	697b      	ldr	r3, [r7, #20]
 8011ca8:	68ba      	ldr	r2, [r7, #8]
 8011caa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	687a      	ldr	r2, [r7, #4]
 8011cb2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011cb6:	2300      	movs	r3, #0
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	371c      	adds	r7, #28
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc2:	4770      	bx	lr

08011cc4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b085      	sub	sp, #20
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	32b0      	adds	r2, #176	; 0xb0
 8011cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cdc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d101      	bne.n	8011ce8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011ce4:	2303      	movs	r3, #3
 8011ce6:	e004      	b.n	8011cf2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	683a      	ldr	r2, [r7, #0]
 8011cec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011cf0:	2300      	movs	r3, #0
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3714      	adds	r7, #20
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfc:	4770      	bx	lr
	...

08011d00 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	32b0      	adds	r2, #176	; 0xb0
 8011d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d16:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8011d18:	2301      	movs	r3, #1
 8011d1a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d101      	bne.n	8011d26 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011d22:	2303      	movs	r3, #3
 8011d24:	e025      	b.n	8011d72 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8011d26:	68bb      	ldr	r3, [r7, #8]
 8011d28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d11f      	bne.n	8011d70 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	2201      	movs	r2, #1
 8011d34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8011d38:	4b10      	ldr	r3, [pc, #64]	; (8011d7c <USBD_CDC_TransmitPacket+0x7c>)
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	f003 020f 	and.w	r2, r3, #15
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8011d46:	6878      	ldr	r0, [r7, #4]
 8011d48:	4613      	mov	r3, r2
 8011d4a:	009b      	lsls	r3, r3, #2
 8011d4c:	4413      	add	r3, r2
 8011d4e:	009b      	lsls	r3, r3, #2
 8011d50:	4403      	add	r3, r0
 8011d52:	3318      	adds	r3, #24
 8011d54:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8011d56:	4b09      	ldr	r3, [pc, #36]	; (8011d7c <USBD_CDC_TransmitPacket+0x7c>)
 8011d58:	7819      	ldrb	r1, [r3, #0]
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011d60:	68bb      	ldr	r3, [r7, #8]
 8011d62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f002 fcda 	bl	8014720 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3710      	adds	r7, #16
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	200000b7 	.word	0x200000b7

08011d80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b084      	sub	sp, #16
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	32b0      	adds	r2, #176	; 0xb0
 8011d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d96:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	32b0      	adds	r2, #176	; 0xb0
 8011da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d101      	bne.n	8011dae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8011daa:	2303      	movs	r3, #3
 8011dac:	e018      	b.n	8011de0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	7c1b      	ldrb	r3, [r3, #16]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d10a      	bne.n	8011dcc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011db6:	4b0c      	ldr	r3, [pc, #48]	; (8011de8 <USBD_CDC_ReceivePacket+0x68>)
 8011db8:	7819      	ldrb	r1, [r3, #0]
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f002 fce3 	bl	8014790 <USBD_LL_PrepareReceive>
 8011dca:	e008      	b.n	8011dde <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011dcc:	4b06      	ldr	r3, [pc, #24]	; (8011de8 <USBD_CDC_ReceivePacket+0x68>)
 8011dce:	7819      	ldrb	r1, [r3, #0]
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011dd6:	2340      	movs	r3, #64	; 0x40
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f002 fcd9 	bl	8014790 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011dde:	2300      	movs	r3, #0
}
 8011de0:	4618      	mov	r0, r3
 8011de2:	3710      	adds	r7, #16
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}
 8011de8:	200000b8 	.word	0x200000b8

08011dec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b086      	sub	sp, #24
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	60f8      	str	r0, [r7, #12]
 8011df4:	60b9      	str	r1, [r7, #8]
 8011df6:	4613      	mov	r3, r2
 8011df8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d101      	bne.n	8011e04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011e00:	2303      	movs	r3, #3
 8011e02:	e01f      	b.n	8011e44 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2200      	movs	r2, #0
 8011e08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	2200      	movs	r2, #0
 8011e18:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d003      	beq.n	8011e2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	68ba      	ldr	r2, [r7, #8]
 8011e26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	2201      	movs	r2, #1
 8011e2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	79fa      	ldrb	r2, [r7, #7]
 8011e36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011e38:	68f8      	ldr	r0, [r7, #12]
 8011e3a:	f002 fa99 	bl	8014370 <USBD_LL_Init>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3718      	adds	r7, #24
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}

08011e4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b084      	sub	sp, #16
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011e56:	2300      	movs	r3, #0
 8011e58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d101      	bne.n	8011e64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011e60:	2303      	movs	r3, #3
 8011e62:	e025      	b.n	8011eb0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	683a      	ldr	r2, [r7, #0]
 8011e68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	32ae      	adds	r2, #174	; 0xae
 8011e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d00f      	beq.n	8011ea0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	32ae      	adds	r2, #174	; 0xae
 8011e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e90:	f107 020e 	add.w	r2, r7, #14
 8011e94:	4610      	mov	r0, r2
 8011e96:	4798      	blx	r3
 8011e98:	4602      	mov	r2, r0
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011ea6:	1c5a      	adds	r2, r3, #1
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8011eae:	2300      	movs	r3, #0
}
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	3710      	adds	r7, #16
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}

08011eb8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b082      	sub	sp, #8
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f002 fab7 	bl	8014434 <USBD_LL_Start>
 8011ec6:	4603      	mov	r3, r0
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3708      	adds	r7, #8
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}

08011ed0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011ed0:	b480      	push	{r7}
 8011ed2:	b083      	sub	sp, #12
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011ed8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	370c      	adds	r7, #12
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee4:	4770      	bx	lr

08011ee6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011ee6:	b580      	push	{r7, lr}
 8011ee8:	b084      	sub	sp, #16
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	6078      	str	r0, [r7, #4]
 8011eee:	460b      	mov	r3, r1
 8011ef0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d009      	beq.n	8011f14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	78fa      	ldrb	r2, [r7, #3]
 8011f0a:	4611      	mov	r1, r2
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	4798      	blx	r3
 8011f10:	4603      	mov	r3, r0
 8011f12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3710      	adds	r7, #16
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}

08011f1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011f1e:	b580      	push	{r7, lr}
 8011f20:	b084      	sub	sp, #16
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	6078      	str	r0, [r7, #4]
 8011f26:	460b      	mov	r3, r1
 8011f28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f34:	685b      	ldr	r3, [r3, #4]
 8011f36:	78fa      	ldrb	r2, [r7, #3]
 8011f38:	4611      	mov	r1, r2
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	4798      	blx	r3
 8011f3e:	4603      	mov	r3, r0
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d001      	beq.n	8011f48 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011f44:	2303      	movs	r3, #3
 8011f46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3710      	adds	r7, #16
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}

08011f52 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011f52:	b580      	push	{r7, lr}
 8011f54:	b084      	sub	sp, #16
 8011f56:	af00      	add	r7, sp, #0
 8011f58:	6078      	str	r0, [r7, #4]
 8011f5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011f62:	6839      	ldr	r1, [r7, #0]
 8011f64:	4618      	mov	r0, r3
 8011f66:	f001 f8a6 	bl	80130b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	2201      	movs	r2, #1
 8011f6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011f78:	461a      	mov	r2, r3
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011f86:	f003 031f 	and.w	r3, r3, #31
 8011f8a:	2b02      	cmp	r3, #2
 8011f8c:	d01a      	beq.n	8011fc4 <USBD_LL_SetupStage+0x72>
 8011f8e:	2b02      	cmp	r3, #2
 8011f90:	d822      	bhi.n	8011fd8 <USBD_LL_SetupStage+0x86>
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d002      	beq.n	8011f9c <USBD_LL_SetupStage+0x4a>
 8011f96:	2b01      	cmp	r3, #1
 8011f98:	d00a      	beq.n	8011fb0 <USBD_LL_SetupStage+0x5e>
 8011f9a:	e01d      	b.n	8011fd8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011fa2:	4619      	mov	r1, r3
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	f000 fad3 	bl	8012550 <USBD_StdDevReq>
 8011faa:	4603      	mov	r3, r0
 8011fac:	73fb      	strb	r3, [r7, #15]
      break;
 8011fae:	e020      	b.n	8011ff2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f000 fb3b 	bl	8012634 <USBD_StdItfReq>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8011fc2:	e016      	b.n	8011ff2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011fca:	4619      	mov	r1, r3
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f000 fb9d 	bl	801270c <USBD_StdEPReq>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8011fd6:	e00c      	b.n	8011ff2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011fde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011fe2:	b2db      	uxtb	r3, r3
 8011fe4:	4619      	mov	r1, r3
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f002 faca 	bl	8014580 <USBD_LL_StallEP>
 8011fec:	4603      	mov	r3, r0
 8011fee:	73fb      	strb	r3, [r7, #15]
      break;
 8011ff0:	bf00      	nop
  }

  return ret;
 8011ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	3710      	adds	r7, #16
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	bd80      	pop	{r7, pc}

08011ffc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b086      	sub	sp, #24
 8012000:	af00      	add	r7, sp, #0
 8012002:	60f8      	str	r0, [r7, #12]
 8012004:	460b      	mov	r3, r1
 8012006:	607a      	str	r2, [r7, #4]
 8012008:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801200a:	2300      	movs	r3, #0
 801200c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801200e:	7afb      	ldrb	r3, [r7, #11]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d16e      	bne.n	80120f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801201a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012022:	2b03      	cmp	r3, #3
 8012024:	f040 8098 	bne.w	8012158 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012028:	693b      	ldr	r3, [r7, #16]
 801202a:	689a      	ldr	r2, [r3, #8]
 801202c:	693b      	ldr	r3, [r7, #16]
 801202e:	68db      	ldr	r3, [r3, #12]
 8012030:	429a      	cmp	r2, r3
 8012032:	d913      	bls.n	801205c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	689a      	ldr	r2, [r3, #8]
 8012038:	693b      	ldr	r3, [r7, #16]
 801203a:	68db      	ldr	r3, [r3, #12]
 801203c:	1ad2      	subs	r2, r2, r3
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	68da      	ldr	r2, [r3, #12]
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	689b      	ldr	r3, [r3, #8]
 801204a:	4293      	cmp	r3, r2
 801204c:	bf28      	it	cs
 801204e:	4613      	movcs	r3, r2
 8012050:	461a      	mov	r2, r3
 8012052:	6879      	ldr	r1, [r7, #4]
 8012054:	68f8      	ldr	r0, [r7, #12]
 8012056:	f001 f922 	bl	801329e <USBD_CtlContinueRx>
 801205a:	e07d      	b.n	8012158 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012062:	f003 031f 	and.w	r3, r3, #31
 8012066:	2b02      	cmp	r3, #2
 8012068:	d014      	beq.n	8012094 <USBD_LL_DataOutStage+0x98>
 801206a:	2b02      	cmp	r3, #2
 801206c:	d81d      	bhi.n	80120aa <USBD_LL_DataOutStage+0xae>
 801206e:	2b00      	cmp	r3, #0
 8012070:	d002      	beq.n	8012078 <USBD_LL_DataOutStage+0x7c>
 8012072:	2b01      	cmp	r3, #1
 8012074:	d003      	beq.n	801207e <USBD_LL_DataOutStage+0x82>
 8012076:	e018      	b.n	80120aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012078:	2300      	movs	r3, #0
 801207a:	75bb      	strb	r3, [r7, #22]
            break;
 801207c:	e018      	b.n	80120b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8012084:	b2db      	uxtb	r3, r3
 8012086:	4619      	mov	r1, r3
 8012088:	68f8      	ldr	r0, [r7, #12]
 801208a:	f000 f9d2 	bl	8012432 <USBD_CoreFindIF>
 801208e:	4603      	mov	r3, r0
 8012090:	75bb      	strb	r3, [r7, #22]
            break;
 8012092:	e00d      	b.n	80120b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801209a:	b2db      	uxtb	r3, r3
 801209c:	4619      	mov	r1, r3
 801209e:	68f8      	ldr	r0, [r7, #12]
 80120a0:	f000 f9d4 	bl	801244c <USBD_CoreFindEP>
 80120a4:	4603      	mov	r3, r0
 80120a6:	75bb      	strb	r3, [r7, #22]
            break;
 80120a8:	e002      	b.n	80120b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80120aa:	2300      	movs	r3, #0
 80120ac:	75bb      	strb	r3, [r7, #22]
            break;
 80120ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80120b0:	7dbb      	ldrb	r3, [r7, #22]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d119      	bne.n	80120ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120bc:	b2db      	uxtb	r3, r3
 80120be:	2b03      	cmp	r3, #3
 80120c0:	d113      	bne.n	80120ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80120c2:	7dba      	ldrb	r2, [r7, #22]
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	32ae      	adds	r2, #174	; 0xae
 80120c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120cc:	691b      	ldr	r3, [r3, #16]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d00b      	beq.n	80120ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80120d2:	7dba      	ldrb	r2, [r7, #22]
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80120da:	7dba      	ldrb	r2, [r7, #22]
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	32ae      	adds	r2, #174	; 0xae
 80120e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120e4:	691b      	ldr	r3, [r3, #16]
 80120e6:	68f8      	ldr	r0, [r7, #12]
 80120e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80120ea:	68f8      	ldr	r0, [r7, #12]
 80120ec:	f001 f8e8 	bl	80132c0 <USBD_CtlSendStatus>
 80120f0:	e032      	b.n	8012158 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80120f2:	7afb      	ldrb	r3, [r7, #11]
 80120f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	4619      	mov	r1, r3
 80120fc:	68f8      	ldr	r0, [r7, #12]
 80120fe:	f000 f9a5 	bl	801244c <USBD_CoreFindEP>
 8012102:	4603      	mov	r3, r0
 8012104:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012106:	7dbb      	ldrb	r3, [r7, #22]
 8012108:	2bff      	cmp	r3, #255	; 0xff
 801210a:	d025      	beq.n	8012158 <USBD_LL_DataOutStage+0x15c>
 801210c:	7dbb      	ldrb	r3, [r7, #22]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d122      	bne.n	8012158 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012118:	b2db      	uxtb	r3, r3
 801211a:	2b03      	cmp	r3, #3
 801211c:	d117      	bne.n	801214e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801211e:	7dba      	ldrb	r2, [r7, #22]
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	32ae      	adds	r2, #174	; 0xae
 8012124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012128:	699b      	ldr	r3, [r3, #24]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d00f      	beq.n	801214e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801212e:	7dba      	ldrb	r2, [r7, #22]
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012136:	7dba      	ldrb	r2, [r7, #22]
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	32ae      	adds	r2, #174	; 0xae
 801213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012140:	699b      	ldr	r3, [r3, #24]
 8012142:	7afa      	ldrb	r2, [r7, #11]
 8012144:	4611      	mov	r1, r2
 8012146:	68f8      	ldr	r0, [r7, #12]
 8012148:	4798      	blx	r3
 801214a:	4603      	mov	r3, r0
 801214c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801214e:	7dfb      	ldrb	r3, [r7, #23]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d001      	beq.n	8012158 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012154:	7dfb      	ldrb	r3, [r7, #23]
 8012156:	e000      	b.n	801215a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012158:	2300      	movs	r3, #0
}
 801215a:	4618      	mov	r0, r3
 801215c:	3718      	adds	r7, #24
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}

08012162 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012162:	b580      	push	{r7, lr}
 8012164:	b086      	sub	sp, #24
 8012166:	af00      	add	r7, sp, #0
 8012168:	60f8      	str	r0, [r7, #12]
 801216a:	460b      	mov	r3, r1
 801216c:	607a      	str	r2, [r7, #4]
 801216e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8012170:	7afb      	ldrb	r3, [r7, #11]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d16f      	bne.n	8012256 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	3314      	adds	r3, #20
 801217a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012182:	2b02      	cmp	r3, #2
 8012184:	d15a      	bne.n	801223c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012186:	693b      	ldr	r3, [r7, #16]
 8012188:	689a      	ldr	r2, [r3, #8]
 801218a:	693b      	ldr	r3, [r7, #16]
 801218c:	68db      	ldr	r3, [r3, #12]
 801218e:	429a      	cmp	r2, r3
 8012190:	d914      	bls.n	80121bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012192:	693b      	ldr	r3, [r7, #16]
 8012194:	689a      	ldr	r2, [r3, #8]
 8012196:	693b      	ldr	r3, [r7, #16]
 8012198:	68db      	ldr	r3, [r3, #12]
 801219a:	1ad2      	subs	r2, r2, r3
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80121a0:	693b      	ldr	r3, [r7, #16]
 80121a2:	689b      	ldr	r3, [r3, #8]
 80121a4:	461a      	mov	r2, r3
 80121a6:	6879      	ldr	r1, [r7, #4]
 80121a8:	68f8      	ldr	r0, [r7, #12]
 80121aa:	f001 f84a 	bl	8013242 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80121ae:	2300      	movs	r3, #0
 80121b0:	2200      	movs	r2, #0
 80121b2:	2100      	movs	r1, #0
 80121b4:	68f8      	ldr	r0, [r7, #12]
 80121b6:	f002 faeb 	bl	8014790 <USBD_LL_PrepareReceive>
 80121ba:	e03f      	b.n	801223c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	68da      	ldr	r2, [r3, #12]
 80121c0:	693b      	ldr	r3, [r7, #16]
 80121c2:	689b      	ldr	r3, [r3, #8]
 80121c4:	429a      	cmp	r2, r3
 80121c6:	d11c      	bne.n	8012202 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80121c8:	693b      	ldr	r3, [r7, #16]
 80121ca:	685a      	ldr	r2, [r3, #4]
 80121cc:	693b      	ldr	r3, [r7, #16]
 80121ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d316      	bcc.n	8012202 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80121d4:	693b      	ldr	r3, [r7, #16]
 80121d6:	685a      	ldr	r2, [r3, #4]
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80121de:	429a      	cmp	r2, r3
 80121e0:	d20f      	bcs.n	8012202 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80121e2:	2200      	movs	r2, #0
 80121e4:	2100      	movs	r1, #0
 80121e6:	68f8      	ldr	r0, [r7, #12]
 80121e8:	f001 f82b 	bl	8013242 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	2200      	movs	r2, #0
 80121f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80121f4:	2300      	movs	r3, #0
 80121f6:	2200      	movs	r2, #0
 80121f8:	2100      	movs	r1, #0
 80121fa:	68f8      	ldr	r0, [r7, #12]
 80121fc:	f002 fac8 	bl	8014790 <USBD_LL_PrepareReceive>
 8012200:	e01c      	b.n	801223c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012208:	b2db      	uxtb	r3, r3
 801220a:	2b03      	cmp	r3, #3
 801220c:	d10f      	bne.n	801222e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012214:	68db      	ldr	r3, [r3, #12]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d009      	beq.n	801222e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	2200      	movs	r2, #0
 801221e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012228:	68db      	ldr	r3, [r3, #12]
 801222a:	68f8      	ldr	r0, [r7, #12]
 801222c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801222e:	2180      	movs	r1, #128	; 0x80
 8012230:	68f8      	ldr	r0, [r7, #12]
 8012232:	f002 f9a5 	bl	8014580 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012236:	68f8      	ldr	r0, [r7, #12]
 8012238:	f001 f855 	bl	80132e6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012242:	2b00      	cmp	r3, #0
 8012244:	d03a      	beq.n	80122bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8012246:	68f8      	ldr	r0, [r7, #12]
 8012248:	f7ff fe42 	bl	8011ed0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	2200      	movs	r2, #0
 8012250:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012254:	e032      	b.n	80122bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8012256:	7afb      	ldrb	r3, [r7, #11]
 8012258:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801225c:	b2db      	uxtb	r3, r3
 801225e:	4619      	mov	r1, r3
 8012260:	68f8      	ldr	r0, [r7, #12]
 8012262:	f000 f8f3 	bl	801244c <USBD_CoreFindEP>
 8012266:	4603      	mov	r3, r0
 8012268:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801226a:	7dfb      	ldrb	r3, [r7, #23]
 801226c:	2bff      	cmp	r3, #255	; 0xff
 801226e:	d025      	beq.n	80122bc <USBD_LL_DataInStage+0x15a>
 8012270:	7dfb      	ldrb	r3, [r7, #23]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d122      	bne.n	80122bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801227c:	b2db      	uxtb	r3, r3
 801227e:	2b03      	cmp	r3, #3
 8012280:	d11c      	bne.n	80122bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8012282:	7dfa      	ldrb	r2, [r7, #23]
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	32ae      	adds	r2, #174	; 0xae
 8012288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801228c:	695b      	ldr	r3, [r3, #20]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d014      	beq.n	80122bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8012292:	7dfa      	ldrb	r2, [r7, #23]
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801229a:	7dfa      	ldrb	r2, [r7, #23]
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	32ae      	adds	r2, #174	; 0xae
 80122a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122a4:	695b      	ldr	r3, [r3, #20]
 80122a6:	7afa      	ldrb	r2, [r7, #11]
 80122a8:	4611      	mov	r1, r2
 80122aa:	68f8      	ldr	r0, [r7, #12]
 80122ac:	4798      	blx	r3
 80122ae:	4603      	mov	r3, r0
 80122b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80122b2:	7dbb      	ldrb	r3, [r7, #22]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d001      	beq.n	80122bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80122b8:	7dbb      	ldrb	r3, [r7, #22]
 80122ba:	e000      	b.n	80122be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80122bc:	2300      	movs	r3, #0
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3718      	adds	r7, #24
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}

080122c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80122c6:	b580      	push	{r7, lr}
 80122c8:	b084      	sub	sp, #16
 80122ca:	af00      	add	r7, sp, #0
 80122cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80122ce:	2300      	movs	r3, #0
 80122d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2201      	movs	r2, #1
 80122d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2200      	movs	r2, #0
 80122de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	2200      	movs	r2, #0
 80122e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2200      	movs	r2, #0
 80122ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	2200      	movs	r2, #0
 80122f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d014      	beq.n	801232c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012308:	685b      	ldr	r3, [r3, #4]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d00e      	beq.n	801232c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012314:	685b      	ldr	r3, [r3, #4]
 8012316:	687a      	ldr	r2, [r7, #4]
 8012318:	6852      	ldr	r2, [r2, #4]
 801231a:	b2d2      	uxtb	r2, r2
 801231c:	4611      	mov	r1, r2
 801231e:	6878      	ldr	r0, [r7, #4]
 8012320:	4798      	blx	r3
 8012322:	4603      	mov	r3, r0
 8012324:	2b00      	cmp	r3, #0
 8012326:	d001      	beq.n	801232c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012328:	2303      	movs	r3, #3
 801232a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801232c:	2340      	movs	r3, #64	; 0x40
 801232e:	2200      	movs	r2, #0
 8012330:	2100      	movs	r1, #0
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f002 f8b0 	bl	8014498 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2201      	movs	r2, #1
 801233c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2240      	movs	r2, #64	; 0x40
 8012344:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012348:	2340      	movs	r3, #64	; 0x40
 801234a:	2200      	movs	r2, #0
 801234c:	2180      	movs	r1, #128	; 0x80
 801234e:	6878      	ldr	r0, [r7, #4]
 8012350:	f002 f8a2 	bl	8014498 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2201      	movs	r2, #1
 8012358:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	2240      	movs	r2, #64	; 0x40
 801235e:	621a      	str	r2, [r3, #32]

  return ret;
 8012360:	7bfb      	ldrb	r3, [r7, #15]
}
 8012362:	4618      	mov	r0, r3
 8012364:	3710      	adds	r7, #16
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}

0801236a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801236a:	b480      	push	{r7}
 801236c:	b083      	sub	sp, #12
 801236e:	af00      	add	r7, sp, #0
 8012370:	6078      	str	r0, [r7, #4]
 8012372:	460b      	mov	r3, r1
 8012374:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	78fa      	ldrb	r2, [r7, #3]
 801237a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801237c:	2300      	movs	r3, #0
}
 801237e:	4618      	mov	r0, r3
 8012380:	370c      	adds	r7, #12
 8012382:	46bd      	mov	sp, r7
 8012384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012388:	4770      	bx	lr

0801238a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801238a:	b480      	push	{r7}
 801238c:	b083      	sub	sp, #12
 801238e:	af00      	add	r7, sp, #0
 8012390:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012398:	b2db      	uxtb	r3, r3
 801239a:	2b04      	cmp	r3, #4
 801239c:	d006      	beq.n	80123ac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123a4:	b2da      	uxtb	r2, r3
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2204      	movs	r2, #4
 80123b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80123b4:	2300      	movs	r3, #0
}
 80123b6:	4618      	mov	r0, r3
 80123b8:	370c      	adds	r7, #12
 80123ba:	46bd      	mov	sp, r7
 80123bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c0:	4770      	bx	lr

080123c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80123c2:	b480      	push	{r7}
 80123c4:	b083      	sub	sp, #12
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123d0:	b2db      	uxtb	r3, r3
 80123d2:	2b04      	cmp	r3, #4
 80123d4:	d106      	bne.n	80123e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80123dc:	b2da      	uxtb	r2, r3
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80123e4:	2300      	movs	r3, #0
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	370c      	adds	r7, #12
 80123ea:	46bd      	mov	sp, r7
 80123ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f0:	4770      	bx	lr

080123f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80123f2:	b580      	push	{r7, lr}
 80123f4:	b082      	sub	sp, #8
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012400:	b2db      	uxtb	r3, r3
 8012402:	2b03      	cmp	r3, #3
 8012404:	d110      	bne.n	8012428 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801240c:	2b00      	cmp	r3, #0
 801240e:	d00b      	beq.n	8012428 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012416:	69db      	ldr	r3, [r3, #28]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d005      	beq.n	8012428 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012422:	69db      	ldr	r3, [r3, #28]
 8012424:	6878      	ldr	r0, [r7, #4]
 8012426:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012428:	2300      	movs	r3, #0
}
 801242a:	4618      	mov	r0, r3
 801242c:	3708      	adds	r7, #8
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}

08012432 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012432:	b480      	push	{r7}
 8012434:	b083      	sub	sp, #12
 8012436:	af00      	add	r7, sp, #0
 8012438:	6078      	str	r0, [r7, #4]
 801243a:	460b      	mov	r3, r1
 801243c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801243e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012440:	4618      	mov	r0, r3
 8012442:	370c      	adds	r7, #12
 8012444:	46bd      	mov	sp, r7
 8012446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244a:	4770      	bx	lr

0801244c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801244c:	b480      	push	{r7}
 801244e:	b083      	sub	sp, #12
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	460b      	mov	r3, r1
 8012456:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012458:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801245a:	4618      	mov	r0, r3
 801245c:	370c      	adds	r7, #12
 801245e:	46bd      	mov	sp, r7
 8012460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012464:	4770      	bx	lr

08012466 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8012466:	b580      	push	{r7, lr}
 8012468:	b086      	sub	sp, #24
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]
 801246e:	460b      	mov	r3, r1
 8012470:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801247a:	2300      	movs	r3, #0
 801247c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	885b      	ldrh	r3, [r3, #2]
 8012482:	b29a      	uxth	r2, r3
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	781b      	ldrb	r3, [r3, #0]
 8012488:	b29b      	uxth	r3, r3
 801248a:	429a      	cmp	r2, r3
 801248c:	d920      	bls.n	80124d0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	781b      	ldrb	r3, [r3, #0]
 8012492:	b29b      	uxth	r3, r3
 8012494:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8012496:	e013      	b.n	80124c0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8012498:	f107 030a 	add.w	r3, r7, #10
 801249c:	4619      	mov	r1, r3
 801249e:	6978      	ldr	r0, [r7, #20]
 80124a0:	f000 f81b 	bl	80124da <USBD_GetNextDesc>
 80124a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	785b      	ldrb	r3, [r3, #1]
 80124aa:	2b05      	cmp	r3, #5
 80124ac:	d108      	bne.n	80124c0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	789b      	ldrb	r3, [r3, #2]
 80124b6:	78fa      	ldrb	r2, [r7, #3]
 80124b8:	429a      	cmp	r2, r3
 80124ba:	d008      	beq.n	80124ce <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80124bc:	2300      	movs	r3, #0
 80124be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	885b      	ldrh	r3, [r3, #2]
 80124c4:	b29a      	uxth	r2, r3
 80124c6:	897b      	ldrh	r3, [r7, #10]
 80124c8:	429a      	cmp	r2, r3
 80124ca:	d8e5      	bhi.n	8012498 <USBD_GetEpDesc+0x32>
 80124cc:	e000      	b.n	80124d0 <USBD_GetEpDesc+0x6a>
          break;
 80124ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80124d0:	693b      	ldr	r3, [r7, #16]
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	3718      	adds	r7, #24
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}

080124da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80124da:	b480      	push	{r7}
 80124dc:	b085      	sub	sp, #20
 80124de:	af00      	add	r7, sp, #0
 80124e0:	6078      	str	r0, [r7, #4]
 80124e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	881a      	ldrh	r2, [r3, #0]
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	781b      	ldrb	r3, [r3, #0]
 80124f0:	b29b      	uxth	r3, r3
 80124f2:	4413      	add	r3, r2
 80124f4:	b29a      	uxth	r2, r3
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	781b      	ldrb	r3, [r3, #0]
 80124fe:	461a      	mov	r2, r3
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	4413      	add	r3, r2
 8012504:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8012506:	68fb      	ldr	r3, [r7, #12]
}
 8012508:	4618      	mov	r0, r3
 801250a:	3714      	adds	r7, #20
 801250c:	46bd      	mov	sp, r7
 801250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012512:	4770      	bx	lr

08012514 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012514:	b480      	push	{r7}
 8012516:	b087      	sub	sp, #28
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012520:	697b      	ldr	r3, [r7, #20]
 8012522:	781b      	ldrb	r3, [r3, #0]
 8012524:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	3301      	adds	r3, #1
 801252a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801252c:	697b      	ldr	r3, [r7, #20]
 801252e:	781b      	ldrb	r3, [r3, #0]
 8012530:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012532:	8a3b      	ldrh	r3, [r7, #16]
 8012534:	021b      	lsls	r3, r3, #8
 8012536:	b21a      	sxth	r2, r3
 8012538:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801253c:	4313      	orrs	r3, r2
 801253e:	b21b      	sxth	r3, r3
 8012540:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012542:	89fb      	ldrh	r3, [r7, #14]
}
 8012544:	4618      	mov	r0, r3
 8012546:	371c      	adds	r7, #28
 8012548:	46bd      	mov	sp, r7
 801254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254e:	4770      	bx	lr

08012550 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b084      	sub	sp, #16
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
 8012558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801255a:	2300      	movs	r3, #0
 801255c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	781b      	ldrb	r3, [r3, #0]
 8012562:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012566:	2b40      	cmp	r3, #64	; 0x40
 8012568:	d005      	beq.n	8012576 <USBD_StdDevReq+0x26>
 801256a:	2b40      	cmp	r3, #64	; 0x40
 801256c:	d857      	bhi.n	801261e <USBD_StdDevReq+0xce>
 801256e:	2b00      	cmp	r3, #0
 8012570:	d00f      	beq.n	8012592 <USBD_StdDevReq+0x42>
 8012572:	2b20      	cmp	r3, #32
 8012574:	d153      	bne.n	801261e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	32ae      	adds	r2, #174	; 0xae
 8012580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012584:	689b      	ldr	r3, [r3, #8]
 8012586:	6839      	ldr	r1, [r7, #0]
 8012588:	6878      	ldr	r0, [r7, #4]
 801258a:	4798      	blx	r3
 801258c:	4603      	mov	r3, r0
 801258e:	73fb      	strb	r3, [r7, #15]
      break;
 8012590:	e04a      	b.n	8012628 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	785b      	ldrb	r3, [r3, #1]
 8012596:	2b09      	cmp	r3, #9
 8012598:	d83b      	bhi.n	8012612 <USBD_StdDevReq+0xc2>
 801259a:	a201      	add	r2, pc, #4	; (adr r2, 80125a0 <USBD_StdDevReq+0x50>)
 801259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125a0:	080125f5 	.word	0x080125f5
 80125a4:	08012609 	.word	0x08012609
 80125a8:	08012613 	.word	0x08012613
 80125ac:	080125ff 	.word	0x080125ff
 80125b0:	08012613 	.word	0x08012613
 80125b4:	080125d3 	.word	0x080125d3
 80125b8:	080125c9 	.word	0x080125c9
 80125bc:	08012613 	.word	0x08012613
 80125c0:	080125eb 	.word	0x080125eb
 80125c4:	080125dd 	.word	0x080125dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80125c8:	6839      	ldr	r1, [r7, #0]
 80125ca:	6878      	ldr	r0, [r7, #4]
 80125cc:	f000 fa3c 	bl	8012a48 <USBD_GetDescriptor>
          break;
 80125d0:	e024      	b.n	801261c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80125d2:	6839      	ldr	r1, [r7, #0]
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	f000 fbcb 	bl	8012d70 <USBD_SetAddress>
          break;
 80125da:	e01f      	b.n	801261c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80125dc:	6839      	ldr	r1, [r7, #0]
 80125de:	6878      	ldr	r0, [r7, #4]
 80125e0:	f000 fc0a 	bl	8012df8 <USBD_SetConfig>
 80125e4:	4603      	mov	r3, r0
 80125e6:	73fb      	strb	r3, [r7, #15]
          break;
 80125e8:	e018      	b.n	801261c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80125ea:	6839      	ldr	r1, [r7, #0]
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f000 fcad 	bl	8012f4c <USBD_GetConfig>
          break;
 80125f2:	e013      	b.n	801261c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80125f4:	6839      	ldr	r1, [r7, #0]
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f000 fcde 	bl	8012fb8 <USBD_GetStatus>
          break;
 80125fc:	e00e      	b.n	801261c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80125fe:	6839      	ldr	r1, [r7, #0]
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f000 fd0d 	bl	8013020 <USBD_SetFeature>
          break;
 8012606:	e009      	b.n	801261c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012608:	6839      	ldr	r1, [r7, #0]
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f000 fd31 	bl	8013072 <USBD_ClrFeature>
          break;
 8012610:	e004      	b.n	801261c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8012612:	6839      	ldr	r1, [r7, #0]
 8012614:	6878      	ldr	r0, [r7, #4]
 8012616:	f000 fd88 	bl	801312a <USBD_CtlError>
          break;
 801261a:	bf00      	nop
      }
      break;
 801261c:	e004      	b.n	8012628 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801261e:	6839      	ldr	r1, [r7, #0]
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f000 fd82 	bl	801312a <USBD_CtlError>
      break;
 8012626:	bf00      	nop
  }

  return ret;
 8012628:	7bfb      	ldrb	r3, [r7, #15]
}
 801262a:	4618      	mov	r0, r3
 801262c:	3710      	adds	r7, #16
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop

08012634 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b084      	sub	sp, #16
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801263e:	2300      	movs	r3, #0
 8012640:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	781b      	ldrb	r3, [r3, #0]
 8012646:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801264a:	2b40      	cmp	r3, #64	; 0x40
 801264c:	d005      	beq.n	801265a <USBD_StdItfReq+0x26>
 801264e:	2b40      	cmp	r3, #64	; 0x40
 8012650:	d852      	bhi.n	80126f8 <USBD_StdItfReq+0xc4>
 8012652:	2b00      	cmp	r3, #0
 8012654:	d001      	beq.n	801265a <USBD_StdItfReq+0x26>
 8012656:	2b20      	cmp	r3, #32
 8012658:	d14e      	bne.n	80126f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012660:	b2db      	uxtb	r3, r3
 8012662:	3b01      	subs	r3, #1
 8012664:	2b02      	cmp	r3, #2
 8012666:	d840      	bhi.n	80126ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	889b      	ldrh	r3, [r3, #4]
 801266c:	b2db      	uxtb	r3, r3
 801266e:	2b01      	cmp	r3, #1
 8012670:	d836      	bhi.n	80126e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	889b      	ldrh	r3, [r3, #4]
 8012676:	b2db      	uxtb	r3, r3
 8012678:	4619      	mov	r1, r3
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f7ff fed9 	bl	8012432 <USBD_CoreFindIF>
 8012680:	4603      	mov	r3, r0
 8012682:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012684:	7bbb      	ldrb	r3, [r7, #14]
 8012686:	2bff      	cmp	r3, #255	; 0xff
 8012688:	d01d      	beq.n	80126c6 <USBD_StdItfReq+0x92>
 801268a:	7bbb      	ldrb	r3, [r7, #14]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d11a      	bne.n	80126c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012690:	7bba      	ldrb	r2, [r7, #14]
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	32ae      	adds	r2, #174	; 0xae
 8012696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801269a:	689b      	ldr	r3, [r3, #8]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d00f      	beq.n	80126c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80126a0:	7bba      	ldrb	r2, [r7, #14]
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80126a8:	7bba      	ldrb	r2, [r7, #14]
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	32ae      	adds	r2, #174	; 0xae
 80126ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126b2:	689b      	ldr	r3, [r3, #8]
 80126b4:	6839      	ldr	r1, [r7, #0]
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	4798      	blx	r3
 80126ba:	4603      	mov	r3, r0
 80126bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80126be:	e004      	b.n	80126ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80126c0:	2303      	movs	r3, #3
 80126c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80126c4:	e001      	b.n	80126ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80126c6:	2303      	movs	r3, #3
 80126c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	88db      	ldrh	r3, [r3, #6]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d110      	bne.n	80126f4 <USBD_StdItfReq+0xc0>
 80126d2:	7bfb      	ldrb	r3, [r7, #15]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d10d      	bne.n	80126f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f000 fdf1 	bl	80132c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80126de:	e009      	b.n	80126f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80126e0:	6839      	ldr	r1, [r7, #0]
 80126e2:	6878      	ldr	r0, [r7, #4]
 80126e4:	f000 fd21 	bl	801312a <USBD_CtlError>
          break;
 80126e8:	e004      	b.n	80126f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80126ea:	6839      	ldr	r1, [r7, #0]
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	f000 fd1c 	bl	801312a <USBD_CtlError>
          break;
 80126f2:	e000      	b.n	80126f6 <USBD_StdItfReq+0xc2>
          break;
 80126f4:	bf00      	nop
      }
      break;
 80126f6:	e004      	b.n	8012702 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80126f8:	6839      	ldr	r1, [r7, #0]
 80126fa:	6878      	ldr	r0, [r7, #4]
 80126fc:	f000 fd15 	bl	801312a <USBD_CtlError>
      break;
 8012700:	bf00      	nop
  }

  return ret;
 8012702:	7bfb      	ldrb	r3, [r7, #15]
}
 8012704:	4618      	mov	r0, r3
 8012706:	3710      	adds	r7, #16
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}

0801270c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b084      	sub	sp, #16
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
 8012714:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8012716:	2300      	movs	r3, #0
 8012718:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	889b      	ldrh	r3, [r3, #4]
 801271e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012728:	2b40      	cmp	r3, #64	; 0x40
 801272a:	d007      	beq.n	801273c <USBD_StdEPReq+0x30>
 801272c:	2b40      	cmp	r3, #64	; 0x40
 801272e:	f200 817f 	bhi.w	8012a30 <USBD_StdEPReq+0x324>
 8012732:	2b00      	cmp	r3, #0
 8012734:	d02a      	beq.n	801278c <USBD_StdEPReq+0x80>
 8012736:	2b20      	cmp	r3, #32
 8012738:	f040 817a 	bne.w	8012a30 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801273c:	7bbb      	ldrb	r3, [r7, #14]
 801273e:	4619      	mov	r1, r3
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f7ff fe83 	bl	801244c <USBD_CoreFindEP>
 8012746:	4603      	mov	r3, r0
 8012748:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801274a:	7b7b      	ldrb	r3, [r7, #13]
 801274c:	2bff      	cmp	r3, #255	; 0xff
 801274e:	f000 8174 	beq.w	8012a3a <USBD_StdEPReq+0x32e>
 8012752:	7b7b      	ldrb	r3, [r7, #13]
 8012754:	2b00      	cmp	r3, #0
 8012756:	f040 8170 	bne.w	8012a3a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801275a:	7b7a      	ldrb	r2, [r7, #13]
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012762:	7b7a      	ldrb	r2, [r7, #13]
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	32ae      	adds	r2, #174	; 0xae
 8012768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801276c:	689b      	ldr	r3, [r3, #8]
 801276e:	2b00      	cmp	r3, #0
 8012770:	f000 8163 	beq.w	8012a3a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012774:	7b7a      	ldrb	r2, [r7, #13]
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	32ae      	adds	r2, #174	; 0xae
 801277a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801277e:	689b      	ldr	r3, [r3, #8]
 8012780:	6839      	ldr	r1, [r7, #0]
 8012782:	6878      	ldr	r0, [r7, #4]
 8012784:	4798      	blx	r3
 8012786:	4603      	mov	r3, r0
 8012788:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801278a:	e156      	b.n	8012a3a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	785b      	ldrb	r3, [r3, #1]
 8012790:	2b03      	cmp	r3, #3
 8012792:	d008      	beq.n	80127a6 <USBD_StdEPReq+0x9a>
 8012794:	2b03      	cmp	r3, #3
 8012796:	f300 8145 	bgt.w	8012a24 <USBD_StdEPReq+0x318>
 801279a:	2b00      	cmp	r3, #0
 801279c:	f000 809b 	beq.w	80128d6 <USBD_StdEPReq+0x1ca>
 80127a0:	2b01      	cmp	r3, #1
 80127a2:	d03c      	beq.n	801281e <USBD_StdEPReq+0x112>
 80127a4:	e13e      	b.n	8012a24 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127ac:	b2db      	uxtb	r3, r3
 80127ae:	2b02      	cmp	r3, #2
 80127b0:	d002      	beq.n	80127b8 <USBD_StdEPReq+0xac>
 80127b2:	2b03      	cmp	r3, #3
 80127b4:	d016      	beq.n	80127e4 <USBD_StdEPReq+0xd8>
 80127b6:	e02c      	b.n	8012812 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80127b8:	7bbb      	ldrb	r3, [r7, #14]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d00d      	beq.n	80127da <USBD_StdEPReq+0xce>
 80127be:	7bbb      	ldrb	r3, [r7, #14]
 80127c0:	2b80      	cmp	r3, #128	; 0x80
 80127c2:	d00a      	beq.n	80127da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80127c4:	7bbb      	ldrb	r3, [r7, #14]
 80127c6:	4619      	mov	r1, r3
 80127c8:	6878      	ldr	r0, [r7, #4]
 80127ca:	f001 fed9 	bl	8014580 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80127ce:	2180      	movs	r1, #128	; 0x80
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f001 fed5 	bl	8014580 <USBD_LL_StallEP>
 80127d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80127d8:	e020      	b.n	801281c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80127da:	6839      	ldr	r1, [r7, #0]
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	f000 fca4 	bl	801312a <USBD_CtlError>
              break;
 80127e2:	e01b      	b.n	801281c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	885b      	ldrh	r3, [r3, #2]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d10e      	bne.n	801280a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80127ec:	7bbb      	ldrb	r3, [r7, #14]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d00b      	beq.n	801280a <USBD_StdEPReq+0xfe>
 80127f2:	7bbb      	ldrb	r3, [r7, #14]
 80127f4:	2b80      	cmp	r3, #128	; 0x80
 80127f6:	d008      	beq.n	801280a <USBD_StdEPReq+0xfe>
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	88db      	ldrh	r3, [r3, #6]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d104      	bne.n	801280a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012800:	7bbb      	ldrb	r3, [r7, #14]
 8012802:	4619      	mov	r1, r3
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f001 febb 	bl	8014580 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f000 fd58 	bl	80132c0 <USBD_CtlSendStatus>

              break;
 8012810:	e004      	b.n	801281c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8012812:	6839      	ldr	r1, [r7, #0]
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f000 fc88 	bl	801312a <USBD_CtlError>
              break;
 801281a:	bf00      	nop
          }
          break;
 801281c:	e107      	b.n	8012a2e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012824:	b2db      	uxtb	r3, r3
 8012826:	2b02      	cmp	r3, #2
 8012828:	d002      	beq.n	8012830 <USBD_StdEPReq+0x124>
 801282a:	2b03      	cmp	r3, #3
 801282c:	d016      	beq.n	801285c <USBD_StdEPReq+0x150>
 801282e:	e04b      	b.n	80128c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012830:	7bbb      	ldrb	r3, [r7, #14]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d00d      	beq.n	8012852 <USBD_StdEPReq+0x146>
 8012836:	7bbb      	ldrb	r3, [r7, #14]
 8012838:	2b80      	cmp	r3, #128	; 0x80
 801283a:	d00a      	beq.n	8012852 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801283c:	7bbb      	ldrb	r3, [r7, #14]
 801283e:	4619      	mov	r1, r3
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f001 fe9d 	bl	8014580 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012846:	2180      	movs	r1, #128	; 0x80
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f001 fe99 	bl	8014580 <USBD_LL_StallEP>
 801284e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012850:	e040      	b.n	80128d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012852:	6839      	ldr	r1, [r7, #0]
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	f000 fc68 	bl	801312a <USBD_CtlError>
              break;
 801285a:	e03b      	b.n	80128d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	885b      	ldrh	r3, [r3, #2]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d136      	bne.n	80128d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012864:	7bbb      	ldrb	r3, [r7, #14]
 8012866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801286a:	2b00      	cmp	r3, #0
 801286c:	d004      	beq.n	8012878 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801286e:	7bbb      	ldrb	r3, [r7, #14]
 8012870:	4619      	mov	r1, r3
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f001 feba 	bl	80145ec <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f000 fd21 	bl	80132c0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801287e:	7bbb      	ldrb	r3, [r7, #14]
 8012880:	4619      	mov	r1, r3
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f7ff fde2 	bl	801244c <USBD_CoreFindEP>
 8012888:	4603      	mov	r3, r0
 801288a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801288c:	7b7b      	ldrb	r3, [r7, #13]
 801288e:	2bff      	cmp	r3, #255	; 0xff
 8012890:	d01f      	beq.n	80128d2 <USBD_StdEPReq+0x1c6>
 8012892:	7b7b      	ldrb	r3, [r7, #13]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d11c      	bne.n	80128d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8012898:	7b7a      	ldrb	r2, [r7, #13]
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80128a0:	7b7a      	ldrb	r2, [r7, #13]
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	32ae      	adds	r2, #174	; 0xae
 80128a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128aa:	689b      	ldr	r3, [r3, #8]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d010      	beq.n	80128d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80128b0:	7b7a      	ldrb	r2, [r7, #13]
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	32ae      	adds	r2, #174	; 0xae
 80128b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128ba:	689b      	ldr	r3, [r3, #8]
 80128bc:	6839      	ldr	r1, [r7, #0]
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	4798      	blx	r3
 80128c2:	4603      	mov	r3, r0
 80128c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80128c6:	e004      	b.n	80128d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80128c8:	6839      	ldr	r1, [r7, #0]
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f000 fc2d 	bl	801312a <USBD_CtlError>
              break;
 80128d0:	e000      	b.n	80128d4 <USBD_StdEPReq+0x1c8>
              break;
 80128d2:	bf00      	nop
          }
          break;
 80128d4:	e0ab      	b.n	8012a2e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128dc:	b2db      	uxtb	r3, r3
 80128de:	2b02      	cmp	r3, #2
 80128e0:	d002      	beq.n	80128e8 <USBD_StdEPReq+0x1dc>
 80128e2:	2b03      	cmp	r3, #3
 80128e4:	d032      	beq.n	801294c <USBD_StdEPReq+0x240>
 80128e6:	e097      	b.n	8012a18 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80128e8:	7bbb      	ldrb	r3, [r7, #14]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d007      	beq.n	80128fe <USBD_StdEPReq+0x1f2>
 80128ee:	7bbb      	ldrb	r3, [r7, #14]
 80128f0:	2b80      	cmp	r3, #128	; 0x80
 80128f2:	d004      	beq.n	80128fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80128f4:	6839      	ldr	r1, [r7, #0]
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f000 fc17 	bl	801312a <USBD_CtlError>
                break;
 80128fc:	e091      	b.n	8012a22 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80128fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012902:	2b00      	cmp	r3, #0
 8012904:	da0b      	bge.n	801291e <USBD_StdEPReq+0x212>
 8012906:	7bbb      	ldrb	r3, [r7, #14]
 8012908:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801290c:	4613      	mov	r3, r2
 801290e:	009b      	lsls	r3, r3, #2
 8012910:	4413      	add	r3, r2
 8012912:	009b      	lsls	r3, r3, #2
 8012914:	3310      	adds	r3, #16
 8012916:	687a      	ldr	r2, [r7, #4]
 8012918:	4413      	add	r3, r2
 801291a:	3304      	adds	r3, #4
 801291c:	e00b      	b.n	8012936 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801291e:	7bbb      	ldrb	r3, [r7, #14]
 8012920:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012924:	4613      	mov	r3, r2
 8012926:	009b      	lsls	r3, r3, #2
 8012928:	4413      	add	r3, r2
 801292a:	009b      	lsls	r3, r3, #2
 801292c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012930:	687a      	ldr	r2, [r7, #4]
 8012932:	4413      	add	r3, r2
 8012934:	3304      	adds	r3, #4
 8012936:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012938:	68bb      	ldr	r3, [r7, #8]
 801293a:	2200      	movs	r2, #0
 801293c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	2202      	movs	r2, #2
 8012942:	4619      	mov	r1, r3
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f000 fc61 	bl	801320c <USBD_CtlSendData>
              break;
 801294a:	e06a      	b.n	8012a22 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801294c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012950:	2b00      	cmp	r3, #0
 8012952:	da11      	bge.n	8012978 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012954:	7bbb      	ldrb	r3, [r7, #14]
 8012956:	f003 020f 	and.w	r2, r3, #15
 801295a:	6879      	ldr	r1, [r7, #4]
 801295c:	4613      	mov	r3, r2
 801295e:	009b      	lsls	r3, r3, #2
 8012960:	4413      	add	r3, r2
 8012962:	009b      	lsls	r3, r3, #2
 8012964:	440b      	add	r3, r1
 8012966:	3324      	adds	r3, #36	; 0x24
 8012968:	881b      	ldrh	r3, [r3, #0]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d117      	bne.n	801299e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801296e:	6839      	ldr	r1, [r7, #0]
 8012970:	6878      	ldr	r0, [r7, #4]
 8012972:	f000 fbda 	bl	801312a <USBD_CtlError>
                  break;
 8012976:	e054      	b.n	8012a22 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012978:	7bbb      	ldrb	r3, [r7, #14]
 801297a:	f003 020f 	and.w	r2, r3, #15
 801297e:	6879      	ldr	r1, [r7, #4]
 8012980:	4613      	mov	r3, r2
 8012982:	009b      	lsls	r3, r3, #2
 8012984:	4413      	add	r3, r2
 8012986:	009b      	lsls	r3, r3, #2
 8012988:	440b      	add	r3, r1
 801298a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801298e:	881b      	ldrh	r3, [r3, #0]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d104      	bne.n	801299e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012994:	6839      	ldr	r1, [r7, #0]
 8012996:	6878      	ldr	r0, [r7, #4]
 8012998:	f000 fbc7 	bl	801312a <USBD_CtlError>
                  break;
 801299c:	e041      	b.n	8012a22 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801299e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	da0b      	bge.n	80129be <USBD_StdEPReq+0x2b2>
 80129a6:	7bbb      	ldrb	r3, [r7, #14]
 80129a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80129ac:	4613      	mov	r3, r2
 80129ae:	009b      	lsls	r3, r3, #2
 80129b0:	4413      	add	r3, r2
 80129b2:	009b      	lsls	r3, r3, #2
 80129b4:	3310      	adds	r3, #16
 80129b6:	687a      	ldr	r2, [r7, #4]
 80129b8:	4413      	add	r3, r2
 80129ba:	3304      	adds	r3, #4
 80129bc:	e00b      	b.n	80129d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80129be:	7bbb      	ldrb	r3, [r7, #14]
 80129c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80129c4:	4613      	mov	r3, r2
 80129c6:	009b      	lsls	r3, r3, #2
 80129c8:	4413      	add	r3, r2
 80129ca:	009b      	lsls	r3, r3, #2
 80129cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80129d0:	687a      	ldr	r2, [r7, #4]
 80129d2:	4413      	add	r3, r2
 80129d4:	3304      	adds	r3, #4
 80129d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80129d8:	7bbb      	ldrb	r3, [r7, #14]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d002      	beq.n	80129e4 <USBD_StdEPReq+0x2d8>
 80129de:	7bbb      	ldrb	r3, [r7, #14]
 80129e0:	2b80      	cmp	r3, #128	; 0x80
 80129e2:	d103      	bne.n	80129ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80129e4:	68bb      	ldr	r3, [r7, #8]
 80129e6:	2200      	movs	r2, #0
 80129e8:	601a      	str	r2, [r3, #0]
 80129ea:	e00e      	b.n	8012a0a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80129ec:	7bbb      	ldrb	r3, [r7, #14]
 80129ee:	4619      	mov	r1, r3
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f001 fe31 	bl	8014658 <USBD_LL_IsStallEP>
 80129f6:	4603      	mov	r3, r0
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d003      	beq.n	8012a04 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80129fc:	68bb      	ldr	r3, [r7, #8]
 80129fe:	2201      	movs	r2, #1
 8012a00:	601a      	str	r2, [r3, #0]
 8012a02:	e002      	b.n	8012a0a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	2200      	movs	r2, #0
 8012a08:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	2202      	movs	r2, #2
 8012a0e:	4619      	mov	r1, r3
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f000 fbfb 	bl	801320c <USBD_CtlSendData>
              break;
 8012a16:	e004      	b.n	8012a22 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8012a18:	6839      	ldr	r1, [r7, #0]
 8012a1a:	6878      	ldr	r0, [r7, #4]
 8012a1c:	f000 fb85 	bl	801312a <USBD_CtlError>
              break;
 8012a20:	bf00      	nop
          }
          break;
 8012a22:	e004      	b.n	8012a2e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8012a24:	6839      	ldr	r1, [r7, #0]
 8012a26:	6878      	ldr	r0, [r7, #4]
 8012a28:	f000 fb7f 	bl	801312a <USBD_CtlError>
          break;
 8012a2c:	bf00      	nop
      }
      break;
 8012a2e:	e005      	b.n	8012a3c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8012a30:	6839      	ldr	r1, [r7, #0]
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f000 fb79 	bl	801312a <USBD_CtlError>
      break;
 8012a38:	e000      	b.n	8012a3c <USBD_StdEPReq+0x330>
      break;
 8012a3a:	bf00      	nop
  }

  return ret;
 8012a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a3e:	4618      	mov	r0, r3
 8012a40:	3710      	adds	r7, #16
 8012a42:	46bd      	mov	sp, r7
 8012a44:	bd80      	pop	{r7, pc}
	...

08012a48 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b084      	sub	sp, #16
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
 8012a50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012a52:	2300      	movs	r3, #0
 8012a54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012a56:	2300      	movs	r3, #0
 8012a58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	885b      	ldrh	r3, [r3, #2]
 8012a62:	0a1b      	lsrs	r3, r3, #8
 8012a64:	b29b      	uxth	r3, r3
 8012a66:	3b01      	subs	r3, #1
 8012a68:	2b0e      	cmp	r3, #14
 8012a6a:	f200 8152 	bhi.w	8012d12 <USBD_GetDescriptor+0x2ca>
 8012a6e:	a201      	add	r2, pc, #4	; (adr r2, 8012a74 <USBD_GetDescriptor+0x2c>)
 8012a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a74:	08012ae5 	.word	0x08012ae5
 8012a78:	08012afd 	.word	0x08012afd
 8012a7c:	08012b3d 	.word	0x08012b3d
 8012a80:	08012d13 	.word	0x08012d13
 8012a84:	08012d13 	.word	0x08012d13
 8012a88:	08012cb3 	.word	0x08012cb3
 8012a8c:	08012cdf 	.word	0x08012cdf
 8012a90:	08012d13 	.word	0x08012d13
 8012a94:	08012d13 	.word	0x08012d13
 8012a98:	08012d13 	.word	0x08012d13
 8012a9c:	08012d13 	.word	0x08012d13
 8012aa0:	08012d13 	.word	0x08012d13
 8012aa4:	08012d13 	.word	0x08012d13
 8012aa8:	08012d13 	.word	0x08012d13
 8012aac:	08012ab1 	.word	0x08012ab1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ab6:	69db      	ldr	r3, [r3, #28]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d00b      	beq.n	8012ad4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ac2:	69db      	ldr	r3, [r3, #28]
 8012ac4:	687a      	ldr	r2, [r7, #4]
 8012ac6:	7c12      	ldrb	r2, [r2, #16]
 8012ac8:	f107 0108 	add.w	r1, r7, #8
 8012acc:	4610      	mov	r0, r2
 8012ace:	4798      	blx	r3
 8012ad0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012ad2:	e126      	b.n	8012d22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012ad4:	6839      	ldr	r1, [r7, #0]
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f000 fb27 	bl	801312a <USBD_CtlError>
        err++;
 8012adc:	7afb      	ldrb	r3, [r7, #11]
 8012ade:	3301      	adds	r3, #1
 8012ae0:	72fb      	strb	r3, [r7, #11]
      break;
 8012ae2:	e11e      	b.n	8012d22 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	687a      	ldr	r2, [r7, #4]
 8012aee:	7c12      	ldrb	r2, [r2, #16]
 8012af0:	f107 0108 	add.w	r1, r7, #8
 8012af4:	4610      	mov	r0, r2
 8012af6:	4798      	blx	r3
 8012af8:	60f8      	str	r0, [r7, #12]
      break;
 8012afa:	e112      	b.n	8012d22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	7c1b      	ldrb	r3, [r3, #16]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d10d      	bne.n	8012b20 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b0c:	f107 0208 	add.w	r2, r7, #8
 8012b10:	4610      	mov	r0, r2
 8012b12:	4798      	blx	r3
 8012b14:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	3301      	adds	r3, #1
 8012b1a:	2202      	movs	r2, #2
 8012b1c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012b1e:	e100      	b.n	8012d22 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b28:	f107 0208 	add.w	r2, r7, #8
 8012b2c:	4610      	mov	r0, r2
 8012b2e:	4798      	blx	r3
 8012b30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	3301      	adds	r3, #1
 8012b36:	2202      	movs	r2, #2
 8012b38:	701a      	strb	r2, [r3, #0]
      break;
 8012b3a:	e0f2      	b.n	8012d22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	885b      	ldrh	r3, [r3, #2]
 8012b40:	b2db      	uxtb	r3, r3
 8012b42:	2b05      	cmp	r3, #5
 8012b44:	f200 80ac 	bhi.w	8012ca0 <USBD_GetDescriptor+0x258>
 8012b48:	a201      	add	r2, pc, #4	; (adr r2, 8012b50 <USBD_GetDescriptor+0x108>)
 8012b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b4e:	bf00      	nop
 8012b50:	08012b69 	.word	0x08012b69
 8012b54:	08012b9d 	.word	0x08012b9d
 8012b58:	08012bd1 	.word	0x08012bd1
 8012b5c:	08012c05 	.word	0x08012c05
 8012b60:	08012c39 	.word	0x08012c39
 8012b64:	08012c6d 	.word	0x08012c6d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b6e:	685b      	ldr	r3, [r3, #4]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d00b      	beq.n	8012b8c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b7a:	685b      	ldr	r3, [r3, #4]
 8012b7c:	687a      	ldr	r2, [r7, #4]
 8012b7e:	7c12      	ldrb	r2, [r2, #16]
 8012b80:	f107 0108 	add.w	r1, r7, #8
 8012b84:	4610      	mov	r0, r2
 8012b86:	4798      	blx	r3
 8012b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012b8a:	e091      	b.n	8012cb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012b8c:	6839      	ldr	r1, [r7, #0]
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f000 facb 	bl	801312a <USBD_CtlError>
            err++;
 8012b94:	7afb      	ldrb	r3, [r7, #11]
 8012b96:	3301      	adds	r3, #1
 8012b98:	72fb      	strb	r3, [r7, #11]
          break;
 8012b9a:	e089      	b.n	8012cb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ba2:	689b      	ldr	r3, [r3, #8]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d00b      	beq.n	8012bc0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012bae:	689b      	ldr	r3, [r3, #8]
 8012bb0:	687a      	ldr	r2, [r7, #4]
 8012bb2:	7c12      	ldrb	r2, [r2, #16]
 8012bb4:	f107 0108 	add.w	r1, r7, #8
 8012bb8:	4610      	mov	r0, r2
 8012bba:	4798      	blx	r3
 8012bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012bbe:	e077      	b.n	8012cb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012bc0:	6839      	ldr	r1, [r7, #0]
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f000 fab1 	bl	801312a <USBD_CtlError>
            err++;
 8012bc8:	7afb      	ldrb	r3, [r7, #11]
 8012bca:	3301      	adds	r3, #1
 8012bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8012bce:	e06f      	b.n	8012cb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012bd6:	68db      	ldr	r3, [r3, #12]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d00b      	beq.n	8012bf4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012be2:	68db      	ldr	r3, [r3, #12]
 8012be4:	687a      	ldr	r2, [r7, #4]
 8012be6:	7c12      	ldrb	r2, [r2, #16]
 8012be8:	f107 0108 	add.w	r1, r7, #8
 8012bec:	4610      	mov	r0, r2
 8012bee:	4798      	blx	r3
 8012bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012bf2:	e05d      	b.n	8012cb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012bf4:	6839      	ldr	r1, [r7, #0]
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f000 fa97 	bl	801312a <USBD_CtlError>
            err++;
 8012bfc:	7afb      	ldrb	r3, [r7, #11]
 8012bfe:	3301      	adds	r3, #1
 8012c00:	72fb      	strb	r3, [r7, #11]
          break;
 8012c02:	e055      	b.n	8012cb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c0a:	691b      	ldr	r3, [r3, #16]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d00b      	beq.n	8012c28 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c16:	691b      	ldr	r3, [r3, #16]
 8012c18:	687a      	ldr	r2, [r7, #4]
 8012c1a:	7c12      	ldrb	r2, [r2, #16]
 8012c1c:	f107 0108 	add.w	r1, r7, #8
 8012c20:	4610      	mov	r0, r2
 8012c22:	4798      	blx	r3
 8012c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c26:	e043      	b.n	8012cb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c28:	6839      	ldr	r1, [r7, #0]
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f000 fa7d 	bl	801312a <USBD_CtlError>
            err++;
 8012c30:	7afb      	ldrb	r3, [r7, #11]
 8012c32:	3301      	adds	r3, #1
 8012c34:	72fb      	strb	r3, [r7, #11]
          break;
 8012c36:	e03b      	b.n	8012cb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c3e:	695b      	ldr	r3, [r3, #20]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d00b      	beq.n	8012c5c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c4a:	695b      	ldr	r3, [r3, #20]
 8012c4c:	687a      	ldr	r2, [r7, #4]
 8012c4e:	7c12      	ldrb	r2, [r2, #16]
 8012c50:	f107 0108 	add.w	r1, r7, #8
 8012c54:	4610      	mov	r0, r2
 8012c56:	4798      	blx	r3
 8012c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c5a:	e029      	b.n	8012cb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c5c:	6839      	ldr	r1, [r7, #0]
 8012c5e:	6878      	ldr	r0, [r7, #4]
 8012c60:	f000 fa63 	bl	801312a <USBD_CtlError>
            err++;
 8012c64:	7afb      	ldrb	r3, [r7, #11]
 8012c66:	3301      	adds	r3, #1
 8012c68:	72fb      	strb	r3, [r7, #11]
          break;
 8012c6a:	e021      	b.n	8012cb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c72:	699b      	ldr	r3, [r3, #24]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d00b      	beq.n	8012c90 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c7e:	699b      	ldr	r3, [r3, #24]
 8012c80:	687a      	ldr	r2, [r7, #4]
 8012c82:	7c12      	ldrb	r2, [r2, #16]
 8012c84:	f107 0108 	add.w	r1, r7, #8
 8012c88:	4610      	mov	r0, r2
 8012c8a:	4798      	blx	r3
 8012c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c8e:	e00f      	b.n	8012cb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c90:	6839      	ldr	r1, [r7, #0]
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	f000 fa49 	bl	801312a <USBD_CtlError>
            err++;
 8012c98:	7afb      	ldrb	r3, [r7, #11]
 8012c9a:	3301      	adds	r3, #1
 8012c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8012c9e:	e007      	b.n	8012cb0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012ca0:	6839      	ldr	r1, [r7, #0]
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f000 fa41 	bl	801312a <USBD_CtlError>
          err++;
 8012ca8:	7afb      	ldrb	r3, [r7, #11]
 8012caa:	3301      	adds	r3, #1
 8012cac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012cae:	bf00      	nop
      }
      break;
 8012cb0:	e037      	b.n	8012d22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	7c1b      	ldrb	r3, [r3, #16]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d109      	bne.n	8012cce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cc2:	f107 0208 	add.w	r2, r7, #8
 8012cc6:	4610      	mov	r0, r2
 8012cc8:	4798      	blx	r3
 8012cca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012ccc:	e029      	b.n	8012d22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012cce:	6839      	ldr	r1, [r7, #0]
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f000 fa2a 	bl	801312a <USBD_CtlError>
        err++;
 8012cd6:	7afb      	ldrb	r3, [r7, #11]
 8012cd8:	3301      	adds	r3, #1
 8012cda:	72fb      	strb	r3, [r7, #11]
      break;
 8012cdc:	e021      	b.n	8012d22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	7c1b      	ldrb	r3, [r3, #16]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d10d      	bne.n	8012d02 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cee:	f107 0208 	add.w	r2, r7, #8
 8012cf2:	4610      	mov	r0, r2
 8012cf4:	4798      	blx	r3
 8012cf6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	3301      	adds	r3, #1
 8012cfc:	2207      	movs	r2, #7
 8012cfe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012d00:	e00f      	b.n	8012d22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012d02:	6839      	ldr	r1, [r7, #0]
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f000 fa10 	bl	801312a <USBD_CtlError>
        err++;
 8012d0a:	7afb      	ldrb	r3, [r7, #11]
 8012d0c:	3301      	adds	r3, #1
 8012d0e:	72fb      	strb	r3, [r7, #11]
      break;
 8012d10:	e007      	b.n	8012d22 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012d12:	6839      	ldr	r1, [r7, #0]
 8012d14:	6878      	ldr	r0, [r7, #4]
 8012d16:	f000 fa08 	bl	801312a <USBD_CtlError>
      err++;
 8012d1a:	7afb      	ldrb	r3, [r7, #11]
 8012d1c:	3301      	adds	r3, #1
 8012d1e:	72fb      	strb	r3, [r7, #11]
      break;
 8012d20:	bf00      	nop
  }

  if (err != 0U)
 8012d22:	7afb      	ldrb	r3, [r7, #11]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d11e      	bne.n	8012d66 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	88db      	ldrh	r3, [r3, #6]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d016      	beq.n	8012d5e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012d30:	893b      	ldrh	r3, [r7, #8]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d00e      	beq.n	8012d54 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	88da      	ldrh	r2, [r3, #6]
 8012d3a:	893b      	ldrh	r3, [r7, #8]
 8012d3c:	4293      	cmp	r3, r2
 8012d3e:	bf28      	it	cs
 8012d40:	4613      	movcs	r3, r2
 8012d42:	b29b      	uxth	r3, r3
 8012d44:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012d46:	893b      	ldrh	r3, [r7, #8]
 8012d48:	461a      	mov	r2, r3
 8012d4a:	68f9      	ldr	r1, [r7, #12]
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f000 fa5d 	bl	801320c <USBD_CtlSendData>
 8012d52:	e009      	b.n	8012d68 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012d54:	6839      	ldr	r1, [r7, #0]
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	f000 f9e7 	bl	801312a <USBD_CtlError>
 8012d5c:	e004      	b.n	8012d68 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f000 faae 	bl	80132c0 <USBD_CtlSendStatus>
 8012d64:	e000      	b.n	8012d68 <USBD_GetDescriptor+0x320>
    return;
 8012d66:	bf00      	nop
  }
}
 8012d68:	3710      	adds	r7, #16
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}
 8012d6e:	bf00      	nop

08012d70 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b084      	sub	sp, #16
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012d7a:	683b      	ldr	r3, [r7, #0]
 8012d7c:	889b      	ldrh	r3, [r3, #4]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d131      	bne.n	8012de6 <USBD_SetAddress+0x76>
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	88db      	ldrh	r3, [r3, #6]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d12d      	bne.n	8012de6 <USBD_SetAddress+0x76>
 8012d8a:	683b      	ldr	r3, [r7, #0]
 8012d8c:	885b      	ldrh	r3, [r3, #2]
 8012d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8012d90:	d829      	bhi.n	8012de6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	885b      	ldrh	r3, [r3, #2]
 8012d96:	b2db      	uxtb	r3, r3
 8012d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012da4:	b2db      	uxtb	r3, r3
 8012da6:	2b03      	cmp	r3, #3
 8012da8:	d104      	bne.n	8012db4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012daa:	6839      	ldr	r1, [r7, #0]
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f000 f9bc 	bl	801312a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012db2:	e01d      	b.n	8012df0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	7bfa      	ldrb	r2, [r7, #15]
 8012db8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012dbc:	7bfb      	ldrb	r3, [r7, #15]
 8012dbe:	4619      	mov	r1, r3
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f001 fc77 	bl	80146b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f000 fa7a 	bl	80132c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012dcc:	7bfb      	ldrb	r3, [r7, #15]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d004      	beq.n	8012ddc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2202      	movs	r2, #2
 8012dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012dda:	e009      	b.n	8012df0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2201      	movs	r2, #1
 8012de0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012de4:	e004      	b.n	8012df0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012de6:	6839      	ldr	r1, [r7, #0]
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f000 f99e 	bl	801312a <USBD_CtlError>
  }
}
 8012dee:	bf00      	nop
 8012df0:	bf00      	nop
 8012df2:	3710      	adds	r7, #16
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}

08012df8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b084      	sub	sp, #16
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
 8012e00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e02:	2300      	movs	r3, #0
 8012e04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	885b      	ldrh	r3, [r3, #2]
 8012e0a:	b2da      	uxtb	r2, r3
 8012e0c:	4b4e      	ldr	r3, [pc, #312]	; (8012f48 <USBD_SetConfig+0x150>)
 8012e0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012e10:	4b4d      	ldr	r3, [pc, #308]	; (8012f48 <USBD_SetConfig+0x150>)
 8012e12:	781b      	ldrb	r3, [r3, #0]
 8012e14:	2b01      	cmp	r3, #1
 8012e16:	d905      	bls.n	8012e24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012e18:	6839      	ldr	r1, [r7, #0]
 8012e1a:	6878      	ldr	r0, [r7, #4]
 8012e1c:	f000 f985 	bl	801312a <USBD_CtlError>
    return USBD_FAIL;
 8012e20:	2303      	movs	r3, #3
 8012e22:	e08c      	b.n	8012f3e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	2b02      	cmp	r3, #2
 8012e2e:	d002      	beq.n	8012e36 <USBD_SetConfig+0x3e>
 8012e30:	2b03      	cmp	r3, #3
 8012e32:	d029      	beq.n	8012e88 <USBD_SetConfig+0x90>
 8012e34:	e075      	b.n	8012f22 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012e36:	4b44      	ldr	r3, [pc, #272]	; (8012f48 <USBD_SetConfig+0x150>)
 8012e38:	781b      	ldrb	r3, [r3, #0]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d020      	beq.n	8012e80 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012e3e:	4b42      	ldr	r3, [pc, #264]	; (8012f48 <USBD_SetConfig+0x150>)
 8012e40:	781b      	ldrb	r3, [r3, #0]
 8012e42:	461a      	mov	r2, r3
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012e48:	4b3f      	ldr	r3, [pc, #252]	; (8012f48 <USBD_SetConfig+0x150>)
 8012e4a:	781b      	ldrb	r3, [r3, #0]
 8012e4c:	4619      	mov	r1, r3
 8012e4e:	6878      	ldr	r0, [r7, #4]
 8012e50:	f7ff f849 	bl	8011ee6 <USBD_SetClassConfig>
 8012e54:	4603      	mov	r3, r0
 8012e56:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012e58:	7bfb      	ldrb	r3, [r7, #15]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d008      	beq.n	8012e70 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012e5e:	6839      	ldr	r1, [r7, #0]
 8012e60:	6878      	ldr	r0, [r7, #4]
 8012e62:	f000 f962 	bl	801312a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2202      	movs	r2, #2
 8012e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012e6e:	e065      	b.n	8012f3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f000 fa25 	bl	80132c0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2203      	movs	r2, #3
 8012e7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012e7e:	e05d      	b.n	8012f3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012e80:	6878      	ldr	r0, [r7, #4]
 8012e82:	f000 fa1d 	bl	80132c0 <USBD_CtlSendStatus>
      break;
 8012e86:	e059      	b.n	8012f3c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012e88:	4b2f      	ldr	r3, [pc, #188]	; (8012f48 <USBD_SetConfig+0x150>)
 8012e8a:	781b      	ldrb	r3, [r3, #0]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d112      	bne.n	8012eb6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2202      	movs	r2, #2
 8012e94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012e98:	4b2b      	ldr	r3, [pc, #172]	; (8012f48 <USBD_SetConfig+0x150>)
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	461a      	mov	r2, r3
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012ea2:	4b29      	ldr	r3, [pc, #164]	; (8012f48 <USBD_SetConfig+0x150>)
 8012ea4:	781b      	ldrb	r3, [r3, #0]
 8012ea6:	4619      	mov	r1, r3
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f7ff f838 	bl	8011f1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012eae:	6878      	ldr	r0, [r7, #4]
 8012eb0:	f000 fa06 	bl	80132c0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012eb4:	e042      	b.n	8012f3c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012eb6:	4b24      	ldr	r3, [pc, #144]	; (8012f48 <USBD_SetConfig+0x150>)
 8012eb8:	781b      	ldrb	r3, [r3, #0]
 8012eba:	461a      	mov	r2, r3
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	685b      	ldr	r3, [r3, #4]
 8012ec0:	429a      	cmp	r2, r3
 8012ec2:	d02a      	beq.n	8012f1a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	685b      	ldr	r3, [r3, #4]
 8012ec8:	b2db      	uxtb	r3, r3
 8012eca:	4619      	mov	r1, r3
 8012ecc:	6878      	ldr	r0, [r7, #4]
 8012ece:	f7ff f826 	bl	8011f1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012ed2:	4b1d      	ldr	r3, [pc, #116]	; (8012f48 <USBD_SetConfig+0x150>)
 8012ed4:	781b      	ldrb	r3, [r3, #0]
 8012ed6:	461a      	mov	r2, r3
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012edc:	4b1a      	ldr	r3, [pc, #104]	; (8012f48 <USBD_SetConfig+0x150>)
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	4619      	mov	r1, r3
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f7fe ffff 	bl	8011ee6 <USBD_SetClassConfig>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012eec:	7bfb      	ldrb	r3, [r7, #15]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d00f      	beq.n	8012f12 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012ef2:	6839      	ldr	r1, [r7, #0]
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f000 f918 	bl	801312a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	685b      	ldr	r3, [r3, #4]
 8012efe:	b2db      	uxtb	r3, r3
 8012f00:	4619      	mov	r1, r3
 8012f02:	6878      	ldr	r0, [r7, #4]
 8012f04:	f7ff f80b 	bl	8011f1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2202      	movs	r2, #2
 8012f0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012f10:	e014      	b.n	8012f3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012f12:	6878      	ldr	r0, [r7, #4]
 8012f14:	f000 f9d4 	bl	80132c0 <USBD_CtlSendStatus>
      break;
 8012f18:	e010      	b.n	8012f3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012f1a:	6878      	ldr	r0, [r7, #4]
 8012f1c:	f000 f9d0 	bl	80132c0 <USBD_CtlSendStatus>
      break;
 8012f20:	e00c      	b.n	8012f3c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012f22:	6839      	ldr	r1, [r7, #0]
 8012f24:	6878      	ldr	r0, [r7, #4]
 8012f26:	f000 f900 	bl	801312a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012f2a:	4b07      	ldr	r3, [pc, #28]	; (8012f48 <USBD_SetConfig+0x150>)
 8012f2c:	781b      	ldrb	r3, [r3, #0]
 8012f2e:	4619      	mov	r1, r3
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f7fe fff4 	bl	8011f1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012f36:	2303      	movs	r3, #3
 8012f38:	73fb      	strb	r3, [r7, #15]
      break;
 8012f3a:	bf00      	nop
  }

  return ret;
 8012f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3710      	adds	r7, #16
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	bf00      	nop
 8012f48:	20001268 	.word	0x20001268

08012f4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b082      	sub	sp, #8
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	88db      	ldrh	r3, [r3, #6]
 8012f5a:	2b01      	cmp	r3, #1
 8012f5c:	d004      	beq.n	8012f68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012f5e:	6839      	ldr	r1, [r7, #0]
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f000 f8e2 	bl	801312a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012f66:	e023      	b.n	8012fb0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f6e:	b2db      	uxtb	r3, r3
 8012f70:	2b02      	cmp	r3, #2
 8012f72:	dc02      	bgt.n	8012f7a <USBD_GetConfig+0x2e>
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	dc03      	bgt.n	8012f80 <USBD_GetConfig+0x34>
 8012f78:	e015      	b.n	8012fa6 <USBD_GetConfig+0x5a>
 8012f7a:	2b03      	cmp	r3, #3
 8012f7c:	d00b      	beq.n	8012f96 <USBD_GetConfig+0x4a>
 8012f7e:	e012      	b.n	8012fa6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2200      	movs	r2, #0
 8012f84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	3308      	adds	r3, #8
 8012f8a:	2201      	movs	r2, #1
 8012f8c:	4619      	mov	r1, r3
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f000 f93c 	bl	801320c <USBD_CtlSendData>
        break;
 8012f94:	e00c      	b.n	8012fb0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	3304      	adds	r3, #4
 8012f9a:	2201      	movs	r2, #1
 8012f9c:	4619      	mov	r1, r3
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	f000 f934 	bl	801320c <USBD_CtlSendData>
        break;
 8012fa4:	e004      	b.n	8012fb0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012fa6:	6839      	ldr	r1, [r7, #0]
 8012fa8:	6878      	ldr	r0, [r7, #4]
 8012faa:	f000 f8be 	bl	801312a <USBD_CtlError>
        break;
 8012fae:	bf00      	nop
}
 8012fb0:	bf00      	nop
 8012fb2:	3708      	adds	r7, #8
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}

08012fb8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b082      	sub	sp, #8
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
 8012fc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012fc8:	b2db      	uxtb	r3, r3
 8012fca:	3b01      	subs	r3, #1
 8012fcc:	2b02      	cmp	r3, #2
 8012fce:	d81e      	bhi.n	801300e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012fd0:	683b      	ldr	r3, [r7, #0]
 8012fd2:	88db      	ldrh	r3, [r3, #6]
 8012fd4:	2b02      	cmp	r3, #2
 8012fd6:	d004      	beq.n	8012fe2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012fd8:	6839      	ldr	r1, [r7, #0]
 8012fda:	6878      	ldr	r0, [r7, #4]
 8012fdc:	f000 f8a5 	bl	801312a <USBD_CtlError>
        break;
 8012fe0:	e01a      	b.n	8013018 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2201      	movs	r2, #1
 8012fe6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d005      	beq.n	8012ffe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	68db      	ldr	r3, [r3, #12]
 8012ff6:	f043 0202 	orr.w	r2, r3, #2
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	330c      	adds	r3, #12
 8013002:	2202      	movs	r2, #2
 8013004:	4619      	mov	r1, r3
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f000 f900 	bl	801320c <USBD_CtlSendData>
      break;
 801300c:	e004      	b.n	8013018 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801300e:	6839      	ldr	r1, [r7, #0]
 8013010:	6878      	ldr	r0, [r7, #4]
 8013012:	f000 f88a 	bl	801312a <USBD_CtlError>
      break;
 8013016:	bf00      	nop
  }
}
 8013018:	bf00      	nop
 801301a:	3708      	adds	r7, #8
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}

08013020 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b082      	sub	sp, #8
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
 8013028:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	885b      	ldrh	r3, [r3, #2]
 801302e:	2b01      	cmp	r3, #1
 8013030:	d107      	bne.n	8013042 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2201      	movs	r2, #1
 8013036:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f000 f940 	bl	80132c0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013040:	e013      	b.n	801306a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	885b      	ldrh	r3, [r3, #2]
 8013046:	2b02      	cmp	r3, #2
 8013048:	d10b      	bne.n	8013062 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	889b      	ldrh	r3, [r3, #4]
 801304e:	0a1b      	lsrs	r3, r3, #8
 8013050:	b29b      	uxth	r3, r3
 8013052:	b2da      	uxtb	r2, r3
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801305a:	6878      	ldr	r0, [r7, #4]
 801305c:	f000 f930 	bl	80132c0 <USBD_CtlSendStatus>
}
 8013060:	e003      	b.n	801306a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8013062:	6839      	ldr	r1, [r7, #0]
 8013064:	6878      	ldr	r0, [r7, #4]
 8013066:	f000 f860 	bl	801312a <USBD_CtlError>
}
 801306a:	bf00      	nop
 801306c:	3708      	adds	r7, #8
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}

08013072 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013072:	b580      	push	{r7, lr}
 8013074:	b082      	sub	sp, #8
 8013076:	af00      	add	r7, sp, #0
 8013078:	6078      	str	r0, [r7, #4]
 801307a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013082:	b2db      	uxtb	r3, r3
 8013084:	3b01      	subs	r3, #1
 8013086:	2b02      	cmp	r3, #2
 8013088:	d80b      	bhi.n	80130a2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	885b      	ldrh	r3, [r3, #2]
 801308e:	2b01      	cmp	r3, #1
 8013090:	d10c      	bne.n	80130ac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	2200      	movs	r2, #0
 8013096:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f000 f910 	bl	80132c0 <USBD_CtlSendStatus>
      }
      break;
 80130a0:	e004      	b.n	80130ac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80130a2:	6839      	ldr	r1, [r7, #0]
 80130a4:	6878      	ldr	r0, [r7, #4]
 80130a6:	f000 f840 	bl	801312a <USBD_CtlError>
      break;
 80130aa:	e000      	b.n	80130ae <USBD_ClrFeature+0x3c>
      break;
 80130ac:	bf00      	nop
  }
}
 80130ae:	bf00      	nop
 80130b0:	3708      	adds	r7, #8
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}

080130b6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80130b6:	b580      	push	{r7, lr}
 80130b8:	b084      	sub	sp, #16
 80130ba:	af00      	add	r7, sp, #0
 80130bc:	6078      	str	r0, [r7, #4]
 80130be:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	781a      	ldrb	r2, [r3, #0]
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	3301      	adds	r3, #1
 80130d0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	781a      	ldrb	r2, [r3, #0]
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	3301      	adds	r3, #1
 80130de:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80130e0:	68f8      	ldr	r0, [r7, #12]
 80130e2:	f7ff fa17 	bl	8012514 <SWAPBYTE>
 80130e6:	4603      	mov	r3, r0
 80130e8:	461a      	mov	r2, r3
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	3301      	adds	r3, #1
 80130f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	3301      	adds	r3, #1
 80130f8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80130fa:	68f8      	ldr	r0, [r7, #12]
 80130fc:	f7ff fa0a 	bl	8012514 <SWAPBYTE>
 8013100:	4603      	mov	r3, r0
 8013102:	461a      	mov	r2, r3
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	3301      	adds	r3, #1
 801310c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	3301      	adds	r3, #1
 8013112:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013114:	68f8      	ldr	r0, [r7, #12]
 8013116:	f7ff f9fd 	bl	8012514 <SWAPBYTE>
 801311a:	4603      	mov	r3, r0
 801311c:	461a      	mov	r2, r3
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	80da      	strh	r2, [r3, #6]
}
 8013122:	bf00      	nop
 8013124:	3710      	adds	r7, #16
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}

0801312a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801312a:	b580      	push	{r7, lr}
 801312c:	b082      	sub	sp, #8
 801312e:	af00      	add	r7, sp, #0
 8013130:	6078      	str	r0, [r7, #4]
 8013132:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013134:	2180      	movs	r1, #128	; 0x80
 8013136:	6878      	ldr	r0, [r7, #4]
 8013138:	f001 fa22 	bl	8014580 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801313c:	2100      	movs	r1, #0
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f001 fa1e 	bl	8014580 <USBD_LL_StallEP>
}
 8013144:	bf00      	nop
 8013146:	3708      	adds	r7, #8
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}

0801314c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b086      	sub	sp, #24
 8013150:	af00      	add	r7, sp, #0
 8013152:	60f8      	str	r0, [r7, #12]
 8013154:	60b9      	str	r1, [r7, #8]
 8013156:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013158:	2300      	movs	r3, #0
 801315a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d036      	beq.n	80131d0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8013166:	6938      	ldr	r0, [r7, #16]
 8013168:	f000 f836 	bl	80131d8 <USBD_GetLen>
 801316c:	4603      	mov	r3, r0
 801316e:	3301      	adds	r3, #1
 8013170:	b29b      	uxth	r3, r3
 8013172:	005b      	lsls	r3, r3, #1
 8013174:	b29a      	uxth	r2, r3
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801317a:	7dfb      	ldrb	r3, [r7, #23]
 801317c:	68ba      	ldr	r2, [r7, #8]
 801317e:	4413      	add	r3, r2
 8013180:	687a      	ldr	r2, [r7, #4]
 8013182:	7812      	ldrb	r2, [r2, #0]
 8013184:	701a      	strb	r2, [r3, #0]
  idx++;
 8013186:	7dfb      	ldrb	r3, [r7, #23]
 8013188:	3301      	adds	r3, #1
 801318a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801318c:	7dfb      	ldrb	r3, [r7, #23]
 801318e:	68ba      	ldr	r2, [r7, #8]
 8013190:	4413      	add	r3, r2
 8013192:	2203      	movs	r2, #3
 8013194:	701a      	strb	r2, [r3, #0]
  idx++;
 8013196:	7dfb      	ldrb	r3, [r7, #23]
 8013198:	3301      	adds	r3, #1
 801319a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801319c:	e013      	b.n	80131c6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801319e:	7dfb      	ldrb	r3, [r7, #23]
 80131a0:	68ba      	ldr	r2, [r7, #8]
 80131a2:	4413      	add	r3, r2
 80131a4:	693a      	ldr	r2, [r7, #16]
 80131a6:	7812      	ldrb	r2, [r2, #0]
 80131a8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80131aa:	693b      	ldr	r3, [r7, #16]
 80131ac:	3301      	adds	r3, #1
 80131ae:	613b      	str	r3, [r7, #16]
    idx++;
 80131b0:	7dfb      	ldrb	r3, [r7, #23]
 80131b2:	3301      	adds	r3, #1
 80131b4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80131b6:	7dfb      	ldrb	r3, [r7, #23]
 80131b8:	68ba      	ldr	r2, [r7, #8]
 80131ba:	4413      	add	r3, r2
 80131bc:	2200      	movs	r2, #0
 80131be:	701a      	strb	r2, [r3, #0]
    idx++;
 80131c0:	7dfb      	ldrb	r3, [r7, #23]
 80131c2:	3301      	adds	r3, #1
 80131c4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80131c6:	693b      	ldr	r3, [r7, #16]
 80131c8:	781b      	ldrb	r3, [r3, #0]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d1e7      	bne.n	801319e <USBD_GetString+0x52>
 80131ce:	e000      	b.n	80131d2 <USBD_GetString+0x86>
    return;
 80131d0:	bf00      	nop
  }
}
 80131d2:	3718      	adds	r7, #24
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}

080131d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80131d8:	b480      	push	{r7}
 80131da:	b085      	sub	sp, #20
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80131e0:	2300      	movs	r3, #0
 80131e2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80131e8:	e005      	b.n	80131f6 <USBD_GetLen+0x1e>
  {
    len++;
 80131ea:	7bfb      	ldrb	r3, [r7, #15]
 80131ec:	3301      	adds	r3, #1
 80131ee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	3301      	adds	r3, #1
 80131f4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	781b      	ldrb	r3, [r3, #0]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d1f5      	bne.n	80131ea <USBD_GetLen+0x12>
  }

  return len;
 80131fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8013200:	4618      	mov	r0, r3
 8013202:	3714      	adds	r7, #20
 8013204:	46bd      	mov	sp, r7
 8013206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801320a:	4770      	bx	lr

0801320c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b084      	sub	sp, #16
 8013210:	af00      	add	r7, sp, #0
 8013212:	60f8      	str	r0, [r7, #12]
 8013214:	60b9      	str	r1, [r7, #8]
 8013216:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	2202      	movs	r2, #2
 801321c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	687a      	ldr	r2, [r7, #4]
 8013224:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	687a      	ldr	r2, [r7, #4]
 801322a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	68ba      	ldr	r2, [r7, #8]
 8013230:	2100      	movs	r1, #0
 8013232:	68f8      	ldr	r0, [r7, #12]
 8013234:	f001 fa74 	bl	8014720 <USBD_LL_Transmit>

  return USBD_OK;
 8013238:	2300      	movs	r3, #0
}
 801323a:	4618      	mov	r0, r3
 801323c:	3710      	adds	r7, #16
 801323e:	46bd      	mov	sp, r7
 8013240:	bd80      	pop	{r7, pc}

08013242 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013242:	b580      	push	{r7, lr}
 8013244:	b084      	sub	sp, #16
 8013246:	af00      	add	r7, sp, #0
 8013248:	60f8      	str	r0, [r7, #12]
 801324a:	60b9      	str	r1, [r7, #8]
 801324c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	68ba      	ldr	r2, [r7, #8]
 8013252:	2100      	movs	r1, #0
 8013254:	68f8      	ldr	r0, [r7, #12]
 8013256:	f001 fa63 	bl	8014720 <USBD_LL_Transmit>

  return USBD_OK;
 801325a:	2300      	movs	r3, #0
}
 801325c:	4618      	mov	r0, r3
 801325e:	3710      	adds	r7, #16
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}

08013264 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b084      	sub	sp, #16
 8013268:	af00      	add	r7, sp, #0
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	60b9      	str	r1, [r7, #8]
 801326e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	2203      	movs	r2, #3
 8013274:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	687a      	ldr	r2, [r7, #4]
 801327c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	687a      	ldr	r2, [r7, #4]
 8013284:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	68ba      	ldr	r2, [r7, #8]
 801328c:	2100      	movs	r1, #0
 801328e:	68f8      	ldr	r0, [r7, #12]
 8013290:	f001 fa7e 	bl	8014790 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013294:	2300      	movs	r3, #0
}
 8013296:	4618      	mov	r0, r3
 8013298:	3710      	adds	r7, #16
 801329a:	46bd      	mov	sp, r7
 801329c:	bd80      	pop	{r7, pc}

0801329e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801329e:	b580      	push	{r7, lr}
 80132a0:	b084      	sub	sp, #16
 80132a2:	af00      	add	r7, sp, #0
 80132a4:	60f8      	str	r0, [r7, #12]
 80132a6:	60b9      	str	r1, [r7, #8]
 80132a8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	68ba      	ldr	r2, [r7, #8]
 80132ae:	2100      	movs	r1, #0
 80132b0:	68f8      	ldr	r0, [r7, #12]
 80132b2:	f001 fa6d 	bl	8014790 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80132b6:	2300      	movs	r3, #0
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3710      	adds	r7, #16
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}

080132c0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b082      	sub	sp, #8
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2204      	movs	r2, #4
 80132cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80132d0:	2300      	movs	r3, #0
 80132d2:	2200      	movs	r2, #0
 80132d4:	2100      	movs	r1, #0
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f001 fa22 	bl	8014720 <USBD_LL_Transmit>

  return USBD_OK;
 80132dc:	2300      	movs	r3, #0
}
 80132de:	4618      	mov	r0, r3
 80132e0:	3708      	adds	r7, #8
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}

080132e6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80132e6:	b580      	push	{r7, lr}
 80132e8:	b082      	sub	sp, #8
 80132ea:	af00      	add	r7, sp, #0
 80132ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	2205      	movs	r2, #5
 80132f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80132f6:	2300      	movs	r3, #0
 80132f8:	2200      	movs	r2, #0
 80132fa:	2100      	movs	r1, #0
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f001 fa47 	bl	8014790 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013302:	2300      	movs	r3, #0
}
 8013304:	4618      	mov	r0, r3
 8013306:	3708      	adds	r7, #8
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}

0801330c <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	f7f3 f893 	bl	8006440 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 801331a:	bf00      	nop
 801331c:	3708      	adds	r7, #8
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}

08013322 <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8013322:	b580      	push	{r7, lr}
 8013324:	b082      	sub	sp, #8
 8013326:	af00      	add	r7, sp, #0
 8013328:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 801332a:	e002      	b.n	8013332 <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 801332c:	2001      	movs	r0, #1
 801332e:	f7ff ffed 	bl	801330c <SPIF_Delay>
  while (Handle->Lock)
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	7b1b      	ldrb	r3, [r3, #12]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d1f8      	bne.n	801332c <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2201      	movs	r2, #1
 801333e:	731a      	strb	r2, [r3, #12]
}
 8013340:	bf00      	nop
 8013342:	3708      	adds	r7, #8
 8013344:	46bd      	mov	sp, r7
 8013346:	bd80      	pop	{r7, pc}

08013348 <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8013348:	b480      	push	{r7}
 801334a:	b083      	sub	sp, #12
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	2200      	movs	r2, #0
 8013354:	731a      	strb	r2, [r3, #12]
}
 8013356:	bf00      	nop
 8013358:	370c      	adds	r7, #12
 801335a:	46bd      	mov	sp, r7
 801335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013360:	4770      	bx	lr

08013362 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8013362:	b580      	push	{r7, lr}
 8013364:	b084      	sub	sp, #16
 8013366:	af00      	add	r7, sp, #0
 8013368:	6078      	str	r0, [r7, #4]
 801336a:	460b      	mov	r3, r1
 801336c:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	6858      	ldr	r0, [r3, #4]
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	691b      	ldr	r3, [r3, #16]
 8013376:	b29b      	uxth	r3, r3
 8013378:	78fa      	ldrb	r2, [r7, #3]
 801337a:	4619      	mov	r1, r3
 801337c:	f7f5 f83a 	bl	80083f4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 8013380:	2300      	movs	r3, #0
 8013382:	60fb      	str	r3, [r7, #12]
 8013384:	e002      	b.n	801338c <SPIF_CsPin+0x2a>
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	3301      	adds	r3, #1
 801338a:	60fb      	str	r3, [r7, #12]
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	2b09      	cmp	r3, #9
 8013390:	ddf9      	ble.n	8013386 <SPIF_CsPin+0x24>
}
 8013392:	bf00      	nop
 8013394:	bf00      	nop
 8013396:	3710      	adds	r7, #16
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}

0801339c <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b086      	sub	sp, #24
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	60f8      	str	r0, [r7, #12]
 80133a4:	60b9      	str	r1, [r7, #8]
 80133a6:	607a      	str	r2, [r7, #4]
 80133a8:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80133aa:	2300      	movs	r3, #0
 80133ac:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 80133ae:	f7f3 f83b 	bl	8006428 <HAL_GetTick>
 80133b2:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_TransmitReceive_DMA(Handle->HSpi, Tx, Rx, Size) != HAL_OK)
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	6818      	ldr	r0, [r3, #0]
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	b29b      	uxth	r3, r3
 80133bc:	687a      	ldr	r2, [r7, #4]
 80133be:	68b9      	ldr	r1, [r7, #8]
 80133c0:	f7f8 feda 	bl	800c178 <HAL_SPI_TransmitReceive_DMA>
 80133c4:	4603      	mov	r3, r0
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d11a      	bne.n	8013400 <SPIF_TransmitReceive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 80133ca:	2001      	movs	r0, #1
 80133cc:	f7ff ff9e 	bl	801330c <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 80133d0:	f7f3 f82a 	bl	8006428 <HAL_GetTick>
 80133d4:	4602      	mov	r2, r0
 80133d6:	693b      	ldr	r3, [r7, #16]
 80133d8:	1ad3      	subs	r3, r2, r3
 80133da:	6a3a      	ldr	r2, [r7, #32]
 80133dc:	429a      	cmp	r2, r3
 80133de:	d805      	bhi.n	80133ec <SPIF_TransmitReceive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7f9 f84b 	bl	800c480 <HAL_SPI_DMAStop>
        break;
 80133ea:	e009      	b.n	8013400 <SPIF_TransmitReceive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	4618      	mov	r0, r3
 80133f2:	f7f9 f9bf 	bl	800c774 <HAL_SPI_GetState>
 80133f6:	4603      	mov	r3, r0
 80133f8:	2b01      	cmp	r3, #1
 80133fa:	d1e6      	bne.n	80133ca <SPIF_TransmitReceive+0x2e>
      {
        retVal = true;
 80133fc:	2301      	movs	r3, #1
 80133fe:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8013400:	7dfb      	ldrb	r3, [r7, #23]
}
 8013402:	4618      	mov	r0, r3
 8013404:	3718      	adds	r7, #24
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}

0801340a <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 801340a:	b580      	push	{r7, lr}
 801340c:	b086      	sub	sp, #24
 801340e:	af00      	add	r7, sp, #0
 8013410:	60f8      	str	r0, [r7, #12]
 8013412:	60b9      	str	r1, [r7, #8]
 8013414:	607a      	str	r2, [r7, #4]
 8013416:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8013418:	2300      	movs	r3, #0
 801341a:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 801341c:	f7f3 f804 	bl	8006428 <HAL_GetTick>
 8013420:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Transmit_DMA(Handle->HSpi, Tx, Size) != HAL_OK)
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	687a      	ldr	r2, [r7, #4]
 8013428:	b292      	uxth	r2, r2
 801342a:	68b9      	ldr	r1, [r7, #8]
 801342c:	4618      	mov	r0, r3
 801342e:	f7f8 fc93 	bl	800bd58 <HAL_SPI_Transmit_DMA>
 8013432:	4603      	mov	r3, r0
 8013434:	2b00      	cmp	r3, #0
 8013436:	d11a      	bne.n	801346e <SPIF_Transmit+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8013438:	2001      	movs	r0, #1
 801343a:	f7ff ff67 	bl	801330c <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 801343e:	f7f2 fff3 	bl	8006428 <HAL_GetTick>
 8013442:	4602      	mov	r2, r0
 8013444:	693b      	ldr	r3, [r7, #16]
 8013446:	1ad3      	subs	r3, r2, r3
 8013448:	683a      	ldr	r2, [r7, #0]
 801344a:	429a      	cmp	r2, r3
 801344c:	d805      	bhi.n	801345a <SPIF_Transmit+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	4618      	mov	r0, r3
 8013454:	f7f9 f814 	bl	800c480 <HAL_SPI_DMAStop>
        break;
 8013458:	e009      	b.n	801346e <SPIF_Transmit+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	4618      	mov	r0, r3
 8013460:	f7f9 f988 	bl	800c774 <HAL_SPI_GetState>
 8013464:	4603      	mov	r3, r0
 8013466:	2b01      	cmp	r3, #1
 8013468:	d1e6      	bne.n	8013438 <SPIF_Transmit+0x2e>
      {
        retVal = true;
 801346a:	2301      	movs	r3, #1
 801346c:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 801346e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013470:	4618      	mov	r0, r3
 8013472:	3718      	adds	r7, #24
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}

08013478 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b086      	sub	sp, #24
 801347c:	af00      	add	r7, sp, #0
 801347e:	60f8      	str	r0, [r7, #12]
 8013480:	60b9      	str	r1, [r7, #8]
 8013482:	607a      	str	r2, [r7, #4]
 8013484:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8013486:	2300      	movs	r3, #0
 8013488:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 801348a:	f7f2 ffcd 	bl	8006428 <HAL_GetTick>
 801348e:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Receive_DMA(Handle->HSpi, Rx, Size) != HAL_OK)
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	687a      	ldr	r2, [r7, #4]
 8013496:	b292      	uxth	r2, r2
 8013498:	68b9      	ldr	r1, [r7, #8]
 801349a:	4618      	mov	r0, r3
 801349c:	f7f8 fd4c 	bl	800bf38 <HAL_SPI_Receive_DMA>
 80134a0:	4603      	mov	r3, r0
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d11a      	bne.n	80134dc <SPIF_Receive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 80134a6:	2001      	movs	r0, #1
 80134a8:	f7ff ff30 	bl	801330c <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 80134ac:	f7f2 ffbc 	bl	8006428 <HAL_GetTick>
 80134b0:	4602      	mov	r2, r0
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	1ad3      	subs	r3, r2, r3
 80134b6:	683a      	ldr	r2, [r7, #0]
 80134b8:	429a      	cmp	r2, r3
 80134ba:	d805      	bhi.n	80134c8 <SPIF_Receive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7f8 ffdd 	bl	800c480 <HAL_SPI_DMAStop>
        break;
 80134c6:	e009      	b.n	80134dc <SPIF_Receive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7f9 f951 	bl	800c774 <HAL_SPI_GetState>
 80134d2:	4603      	mov	r3, r0
 80134d4:	2b01      	cmp	r3, #1
 80134d6:	d1e6      	bne.n	80134a6 <SPIF_Receive+0x2e>
      {
        retVal = true;
 80134d8:	2301      	movs	r3, #1
 80134da:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 80134dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80134de:	4618      	mov	r0, r3
 80134e0:	3718      	adds	r7, #24
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}

080134e6 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 80134e6:	b580      	push	{r7, lr}
 80134e8:	b084      	sub	sp, #16
 80134ea:	af00      	add	r7, sp, #0
 80134ec:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 80134ee:	2301      	movs	r3, #1
 80134f0:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 80134f2:	2306      	movs	r3, #6
 80134f4:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 80134f6:	2100      	movs	r1, #0
 80134f8:	6878      	ldr	r0, [r7, #4]
 80134fa:	f7ff ff32 	bl	8013362 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 80134fe:	f107 010c 	add.w	r1, r7, #12
 8013502:	2364      	movs	r3, #100	; 0x64
 8013504:	2201      	movs	r2, #1
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	f7ff ff7f 	bl	801340a <SPIF_Transmit>
 801350c:	4603      	mov	r3, r0
 801350e:	f083 0301 	eor.w	r3, r3, #1
 8013512:	b2db      	uxtb	r3, r3
 8013514:	2b00      	cmp	r3, #0
 8013516:	d001      	beq.n	801351c <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 8013518:	2300      	movs	r3, #0
 801351a:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 801351c:	2101      	movs	r1, #1
 801351e:	6878      	ldr	r0, [r7, #4]
 8013520:	f7ff ff1f 	bl	8013362 <SPIF_CsPin>
  return retVal;
 8013524:	7bfb      	ldrb	r3, [r7, #15]
}
 8013526:	4618      	mov	r0, r3
 8013528:	3710      	adds	r7, #16
 801352a:	46bd      	mov	sp, r7
 801352c:	bd80      	pop	{r7, pc}

0801352e <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 801352e:	b580      	push	{r7, lr}
 8013530:	b084      	sub	sp, #16
 8013532:	af00      	add	r7, sp, #0
 8013534:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8013536:	2301      	movs	r3, #1
 8013538:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 801353a:	2304      	movs	r3, #4
 801353c:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 801353e:	2100      	movs	r1, #0
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f7ff ff0e 	bl	8013362 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8013546:	f107 010c 	add.w	r1, r7, #12
 801354a:	2364      	movs	r3, #100	; 0x64
 801354c:	2201      	movs	r2, #1
 801354e:	6878      	ldr	r0, [r7, #4]
 8013550:	f7ff ff5b 	bl	801340a <SPIF_Transmit>
 8013554:	4603      	mov	r3, r0
 8013556:	f083 0301 	eor.w	r3, r3, #1
 801355a:	b2db      	uxtb	r3, r3
 801355c:	2b00      	cmp	r3, #0
 801355e:	d001      	beq.n	8013564 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8013560:	2300      	movs	r3, #0
 8013562:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8013564:	2101      	movs	r1, #1
 8013566:	6878      	ldr	r0, [r7, #4]
 8013568:	f7ff fefb 	bl	8013362 <SPIF_CsPin>
  return retVal;
 801356c:	7bfb      	ldrb	r3, [r7, #15]
}
 801356e:	4618      	mov	r0, r3
 8013570:	3710      	adds	r7, #16
 8013572:	46bd      	mov	sp, r7
 8013574:	bd80      	pop	{r7, pc}

08013576 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8013576:	b580      	push	{r7, lr}
 8013578:	b086      	sub	sp, #24
 801357a:	af02      	add	r7, sp, #8
 801357c:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 801357e:	2300      	movs	r3, #0
 8013580:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 8013582:	f24a 5305 	movw	r3, #42245	; 0xa505
 8013586:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 8013588:	2100      	movs	r1, #0
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	f7ff fee9 	bl	8013362 <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 8013590:	f107 0208 	add.w	r2, r7, #8
 8013594:	f107 010c 	add.w	r1, r7, #12
 8013598:	2364      	movs	r3, #100	; 0x64
 801359a:	9300      	str	r3, [sp, #0]
 801359c:	2302      	movs	r3, #2
 801359e:	6878      	ldr	r0, [r7, #4]
 80135a0:	f7ff fefc 	bl	801339c <SPIF_TransmitReceive>
 80135a4:	4603      	mov	r3, r0
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d001      	beq.n	80135ae <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 80135aa:	7a7b      	ldrb	r3, [r7, #9]
 80135ac:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 80135ae:	2101      	movs	r1, #1
 80135b0:	6878      	ldr	r0, [r7, #4]
 80135b2:	f7ff fed6 	bl	8013362 <SPIF_CsPin>
  return retVal;
 80135b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	3710      	adds	r7, #16
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b084      	sub	sp, #16
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 80135ca:	2300      	movs	r3, #0
 80135cc:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 80135ce:	f7f2 ff2b 	bl	8006428 <HAL_GetTick>
 80135d2:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 80135d4:	2001      	movs	r0, #1
 80135d6:	f7ff fe99 	bl	801330c <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 80135da:	f7f2 ff25 	bl	8006428 <HAL_GetTick>
 80135de:	4602      	mov	r2, r0
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	1ad3      	subs	r3, r2, r3
 80135e4:	683a      	ldr	r2, [r7, #0]
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d90a      	bls.n	8013600 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f7ff ffc3 	bl	8013576 <SPIF_ReadReg1>
 80135f0:	4603      	mov	r3, r0
 80135f2:	f003 0301 	and.w	r3, r3, #1
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d1ec      	bne.n	80135d4 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 80135fa:	2301      	movs	r3, #1
 80135fc:	73fb      	strb	r3, [r7, #15]
      break;
 80135fe:	e000      	b.n	8013602 <SPIF_WaitForWriting+0x42>
      break;
 8013600:	bf00      	nop
    }
  }
  return retVal;
 8013602:	7bfb      	ldrb	r3, [r7, #15]
}
 8013604:	4618      	mov	r0, r3
 8013606:	3710      	adds	r7, #16
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}

0801360c <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b088      	sub	sp, #32
 8013610:	af02      	add	r7, sp, #8
 8013612:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8013614:	f06f 0360 	mvn.w	r3, #96	; 0x60
 8013618:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 801361a:	2300      	movs	r3, #0
 801361c:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 801361e:	2100      	movs	r1, #0
 8013620:	6878      	ldr	r0, [r7, #4]
 8013622:	f7ff fe9e 	bl	8013362 <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 8013626:	f107 020c 	add.w	r2, r7, #12
 801362a:	f107 0110 	add.w	r1, r7, #16
 801362e:	2364      	movs	r3, #100	; 0x64
 8013630:	9300      	str	r3, [sp, #0]
 8013632:	2304      	movs	r3, #4
 8013634:	6878      	ldr	r0, [r7, #4]
 8013636:	f7ff feb1 	bl	801339c <SPIF_TransmitReceive>
 801363a:	4603      	mov	r3, r0
 801363c:	f083 0301 	eor.w	r3, r3, #1
 8013640:	b2db      	uxtb	r3, r3
 8013642:	2b00      	cmp	r3, #0
 8013644:	d004      	beq.n	8013650 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 8013646:	2101      	movs	r1, #1
 8013648:	6878      	ldr	r0, [r7, #4]
 801364a:	f7ff fe8a 	bl	8013362 <SPIF_CsPin>
      break;
 801364e:	e16f      	b.n	8013930 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8013650:	2101      	movs	r1, #1
 8013652:	6878      	ldr	r0, [r7, #4]
 8013654:	f7ff fe85 	bl	8013362 <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8013658:	7b7a      	ldrb	r2, [r7, #13]
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 801365e:	7bba      	ldrb	r2, [r7, #14]
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8013664:	7bfa      	ldrb	r2, [r7, #15]
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	7a1b      	ldrb	r3, [r3, #8]
 801366e:	2bef      	cmp	r3, #239	; 0xef
 8013670:	f000 80f0 	beq.w	8013854 <SPIF_FindChip+0x248>
 8013674:	2bef      	cmp	r3, #239	; 0xef
 8013676:	f300 80e9 	bgt.w	801384c <SPIF_FindChip+0x240>
 801367a:	2bc8      	cmp	r3, #200	; 0xc8
 801367c:	f300 80e6 	bgt.w	801384c <SPIF_FindChip+0x240>
 8013680:	2b85      	cmp	r3, #133	; 0x85
 8013682:	da0c      	bge.n	801369e <SPIF_FindChip+0x92>
 8013684:	2b62      	cmp	r3, #98	; 0x62
 8013686:	f000 80e7 	beq.w	8013858 <SPIF_FindChip+0x24c>
 801368a:	2b62      	cmp	r3, #98	; 0x62
 801368c:	f300 80de 	bgt.w	801384c <SPIF_FindChip+0x240>
 8013690:	2b20      	cmp	r3, #32
 8013692:	f300 80d9 	bgt.w	8013848 <SPIF_FindChip+0x23c>
 8013696:	2b00      	cmp	r3, #0
 8013698:	f300 8090 	bgt.w	80137bc <SPIF_FindChip+0x1b0>
 801369c:	e0d6      	b.n	801384c <SPIF_FindChip+0x240>
 801369e:	3b85      	subs	r3, #133	; 0x85
 80136a0:	2b43      	cmp	r3, #67	; 0x43
 80136a2:	f200 80d3 	bhi.w	801384c <SPIF_FindChip+0x240>
 80136a6:	a201      	add	r2, pc, #4	; (adr r2, 80136ac <SPIF_FindChip+0xa0>)
 80136a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136ac:	0801385d 	.word	0x0801385d
 80136b0:	0801384d 	.word	0x0801384d
 80136b4:	0801384d 	.word	0x0801384d
 80136b8:	0801384d 	.word	0x0801384d
 80136bc:	0801385d 	.word	0x0801385d
 80136c0:	0801384d 	.word	0x0801384d
 80136c4:	0801384d 	.word	0x0801384d
 80136c8:	0801385d 	.word	0x0801385d
 80136cc:	0801384d 	.word	0x0801384d
 80136d0:	0801384d 	.word	0x0801384d
 80136d4:	0801384d 	.word	0x0801384d
 80136d8:	0801384d 	.word	0x0801384d
 80136dc:	0801384d 	.word	0x0801384d
 80136e0:	0801384d 	.word	0x0801384d
 80136e4:	0801384d 	.word	0x0801384d
 80136e8:	0801384d 	.word	0x0801384d
 80136ec:	0801384d 	.word	0x0801384d
 80136f0:	0801384d 	.word	0x0801384d
 80136f4:	0801384d 	.word	0x0801384d
 80136f8:	0801384d 	.word	0x0801384d
 80136fc:	0801384d 	.word	0x0801384d
 8013700:	0801384d 	.word	0x0801384d
 8013704:	0801384d 	.word	0x0801384d
 8013708:	0801384d 	.word	0x0801384d
 801370c:	0801385d 	.word	0x0801385d
 8013710:	0801384d 	.word	0x0801384d
 8013714:	0801384d 	.word	0x0801384d
 8013718:	0801384d 	.word	0x0801384d
 801371c:	0801385d 	.word	0x0801385d
 8013720:	0801384d 	.word	0x0801384d
 8013724:	0801384d 	.word	0x0801384d
 8013728:	0801384d 	.word	0x0801384d
 801372c:	0801384d 	.word	0x0801384d
 8013730:	0801384d 	.word	0x0801384d
 8013734:	0801384d 	.word	0x0801384d
 8013738:	0801384d 	.word	0x0801384d
 801373c:	0801384d 	.word	0x0801384d
 8013740:	0801384d 	.word	0x0801384d
 8013744:	0801384d 	.word	0x0801384d
 8013748:	0801384d 	.word	0x0801384d
 801374c:	0801385d 	.word	0x0801385d
 8013750:	0801384d 	.word	0x0801384d
 8013754:	0801384d 	.word	0x0801384d
 8013758:	0801384d 	.word	0x0801384d
 801375c:	0801384d 	.word	0x0801384d
 8013760:	0801384d 	.word	0x0801384d
 8013764:	0801384d 	.word	0x0801384d
 8013768:	0801384d 	.word	0x0801384d
 801376c:	0801384d 	.word	0x0801384d
 8013770:	0801384d 	.word	0x0801384d
 8013774:	0801384d 	.word	0x0801384d
 8013778:	0801384d 	.word	0x0801384d
 801377c:	0801384d 	.word	0x0801384d
 8013780:	0801384d 	.word	0x0801384d
 8013784:	0801384d 	.word	0x0801384d
 8013788:	0801384d 	.word	0x0801384d
 801378c:	0801384d 	.word	0x0801384d
 8013790:	0801384d 	.word	0x0801384d
 8013794:	0801385d 	.word	0x0801385d
 8013798:	0801384d 	.word	0x0801384d
 801379c:	0801384d 	.word	0x0801384d
 80137a0:	0801385d 	.word	0x0801385d
 80137a4:	0801384d 	.word	0x0801384d
 80137a8:	0801384d 	.word	0x0801384d
 80137ac:	0801384d 	.word	0x0801384d
 80137b0:	0801384d 	.word	0x0801384d
 80137b4:	0801384d 	.word	0x0801384d
 80137b8:	0801385d 	.word	0x0801385d
 80137bc:	3b01      	subs	r3, #1
 80137be:	2b1f      	cmp	r3, #31
 80137c0:	d844      	bhi.n	801384c <SPIF_FindChip+0x240>
 80137c2:	a201      	add	r2, pc, #4	; (adr r2, 80137c8 <SPIF_FindChip+0x1bc>)
 80137c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137c8:	08013861 	.word	0x08013861
 80137cc:	0801384d 	.word	0x0801384d
 80137d0:	0801384d 	.word	0x0801384d
 80137d4:	08013861 	.word	0x08013861
 80137d8:	0801384d 	.word	0x0801384d
 80137dc:	0801384d 	.word	0x0801384d
 80137e0:	0801384d 	.word	0x0801384d
 80137e4:	0801384d 	.word	0x0801384d
 80137e8:	0801384d 	.word	0x0801384d
 80137ec:	0801384d 	.word	0x0801384d
 80137f0:	0801384d 	.word	0x0801384d
 80137f4:	0801384d 	.word	0x0801384d
 80137f8:	0801384d 	.word	0x0801384d
 80137fc:	0801384d 	.word	0x0801384d
 8013800:	0801384d 	.word	0x0801384d
 8013804:	0801384d 	.word	0x0801384d
 8013808:	0801384d 	.word	0x0801384d
 801380c:	0801384d 	.word	0x0801384d
 8013810:	0801384d 	.word	0x0801384d
 8013814:	0801384d 	.word	0x0801384d
 8013818:	0801384d 	.word	0x0801384d
 801381c:	0801384d 	.word	0x0801384d
 8013820:	0801384d 	.word	0x0801384d
 8013824:	0801384d 	.word	0x0801384d
 8013828:	0801384d 	.word	0x0801384d
 801382c:	0801384d 	.word	0x0801384d
 8013830:	0801384d 	.word	0x0801384d
 8013834:	08013861 	.word	0x08013861
 8013838:	0801384d 	.word	0x0801384d
 801383c:	0801384d 	.word	0x0801384d
 8013840:	0801384d 	.word	0x0801384d
 8013844:	08013861 	.word	0x08013861
 8013848:	2b37      	cmp	r3, #55	; 0x37
 801384a:	d00b      	beq.n	8013864 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	2200      	movs	r2, #0
 8013850:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 8013852:	e008      	b.n	8013866 <SPIF_FindChip+0x25a>
      break;
 8013854:	bf00      	nop
 8013856:	e006      	b.n	8013866 <SPIF_FindChip+0x25a>
      break;
 8013858:	bf00      	nop
 801385a:	e004      	b.n	8013866 <SPIF_FindChip+0x25a>
      break;
 801385c:	bf00      	nop
 801385e:	e002      	b.n	8013866 <SPIF_FindChip+0x25a>
      break;
 8013860:	bf00      	nop
 8013862:	e000      	b.n	8013866 <SPIF_FindChip+0x25a>
      break;
 8013864:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	7a5b      	ldrb	r3, [r3, #9]
 801386a:	3b11      	subs	r3, #17
 801386c:	2b0f      	cmp	r3, #15
 801386e:	d84e      	bhi.n	801390e <SPIF_FindChip+0x302>
 8013870:	a201      	add	r2, pc, #4	; (adr r2, 8013878 <SPIF_FindChip+0x26c>)
 8013872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013876:	bf00      	nop
 8013878:	080138b9 	.word	0x080138b9
 801387c:	080138c1 	.word	0x080138c1
 8013880:	080138c9 	.word	0x080138c9
 8013884:	080138d1 	.word	0x080138d1
 8013888:	080138d9 	.word	0x080138d9
 801388c:	080138e1 	.word	0x080138e1
 8013890:	080138e9 	.word	0x080138e9
 8013894:	080138f1 	.word	0x080138f1
 8013898:	080138fb 	.word	0x080138fb
 801389c:	0801390f 	.word	0x0801390f
 80138a0:	0801390f 	.word	0x0801390f
 80138a4:	0801390f 	.word	0x0801390f
 80138a8:	0801390f 	.word	0x0801390f
 80138ac:	0801390f 	.word	0x0801390f
 80138b0:	0801390f 	.word	0x0801390f
 80138b4:	08013905 	.word	0x08013905
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2202      	movs	r2, #2
 80138bc:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 80138be:	e02a      	b.n	8013916 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	2204      	movs	r2, #4
 80138c4:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 80138c6:	e026      	b.n	8013916 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	2208      	movs	r2, #8
 80138cc:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 80138ce:	e022      	b.n	8013916 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	2210      	movs	r2, #16
 80138d4:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 80138d6:	e01e      	b.n	8013916 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	2220      	movs	r2, #32
 80138dc:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 80138de:	e01a      	b.n	8013916 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2240      	movs	r2, #64	; 0x40
 80138e4:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 80138e6:	e016      	b.n	8013916 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2280      	movs	r2, #128	; 0x80
 80138ec:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 80138ee:	e012      	b.n	8013916 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80138f6:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 80138f8:	e00d      	b.n	8013916 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013900:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 8013902:	e008      	b.n	8013916 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801390a:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 801390c:	e003      	b.n	8013916 <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	2200      	movs	r2, #0
 8013912:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 8013914:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	69db      	ldr	r3, [r3, #28]
 801391a:	011a      	lsls	r2, r3, #4
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	699b      	ldr	r3, [r3, #24]
 8013924:	031b      	lsls	r3, r3, #12
 8013926:	0a1a      	lsrs	r2, r3, #8
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 801392c:	2301      	movs	r3, #1
 801392e:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8013930:	7dfb      	ldrb	r3, [r7, #23]
}
 8013932:	4618      	mov	r0, r3
 8013934:	3718      	adds	r7, #24
 8013936:	46bd      	mov	sp, r7
 8013938:	bd80      	pop	{r7, pc}
 801393a:	bf00      	nop

0801393c <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b08a      	sub	sp, #40	; 0x28
 8013940:	af00      	add	r7, sp, #0
 8013942:	60f8      	str	r0, [r7, #12]
 8013944:	60b9      	str	r1, [r7, #8]
 8013946:	607a      	str	r2, [r7, #4]
 8013948:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801394a:	2300      	movs	r3, #0
 801394c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8013950:	2300      	movs	r3, #0
 8013952:	623b      	str	r3, [r7, #32]
 8013954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013956:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801395a:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	695b      	ldr	r3, [r3, #20]
 8013960:	68ba      	ldr	r2, [r7, #8]
 8013962:	429a      	cmp	r2, r3
 8013964:	f080 8084 	bcs.w	8013a70 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 8013968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396a:	2bff      	cmp	r3, #255	; 0xff
 801396c:	f200 8082 	bhi.w	8013a74 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8013970:	683a      	ldr	r2, [r7, #0]
 8013972:	69fb      	ldr	r3, [r7, #28]
 8013974:	429a      	cmp	r2, r3
 8013976:	d901      	bls.n	801397c <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 8013978:	69fb      	ldr	r3, [r7, #28]
 801397a:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	021b      	lsls	r3, r3, #8
 8013980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013982:	4413      	add	r3, r2
 8013984:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 8013986:	68f8      	ldr	r0, [r7, #12]
 8013988:	f7ff fdad 	bl	80134e6 <SPIF_WriteEnable>
 801398c:	4603      	mov	r3, r0
 801398e:	f083 0301 	eor.w	r3, r3, #1
 8013992:	b2db      	uxtb	r3, r3
 8013994:	2b00      	cmp	r3, #0
 8013996:	d16f      	bne.n	8013a78 <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8013998:	2100      	movs	r1, #0
 801399a:	68f8      	ldr	r0, [r7, #12]
 801399c:	f7ff fce1 	bl	8013362 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	69db      	ldr	r3, [r3, #28]
 80139a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139a8:	d322      	bcc.n	80139f0 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 80139aa:	2312      	movs	r3, #18
 80139ac:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 80139ae:	6a3b      	ldr	r3, [r7, #32]
 80139b0:	0e1b      	lsrs	r3, r3, #24
 80139b2:	b2db      	uxtb	r3, r3
 80139b4:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 80139b6:	6a3b      	ldr	r3, [r7, #32]
 80139b8:	0c1b      	lsrs	r3, r3, #16
 80139ba:	b2db      	uxtb	r3, r3
 80139bc:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 80139be:	6a3b      	ldr	r3, [r7, #32]
 80139c0:	0a1b      	lsrs	r3, r3, #8
 80139c2:	b2db      	uxtb	r3, r3
 80139c4:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 80139c6:	6a3b      	ldr	r3, [r7, #32]
 80139c8:	b2db      	uxtb	r3, r3
 80139ca:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80139cc:	f107 0114 	add.w	r1, r7, #20
 80139d0:	2364      	movs	r3, #100	; 0x64
 80139d2:	2205      	movs	r2, #5
 80139d4:	68f8      	ldr	r0, [r7, #12]
 80139d6:	f7ff fd18 	bl	801340a <SPIF_Transmit>
 80139da:	4603      	mov	r3, r0
 80139dc:	f083 0301 	eor.w	r3, r3, #1
 80139e0:	b2db      	uxtb	r3, r3
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d023      	beq.n	8013a2e <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 80139e6:	2101      	movs	r1, #1
 80139e8:	68f8      	ldr	r0, [r7, #12]
 80139ea:	f7ff fcba 	bl	8013362 <SPIF_CsPin>
        break;
 80139ee:	e044      	b.n	8013a7a <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 80139f0:	2302      	movs	r3, #2
 80139f2:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 80139f4:	6a3b      	ldr	r3, [r7, #32]
 80139f6:	0c1b      	lsrs	r3, r3, #16
 80139f8:	b2db      	uxtb	r3, r3
 80139fa:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 80139fc:	6a3b      	ldr	r3, [r7, #32]
 80139fe:	0a1b      	lsrs	r3, r3, #8
 8013a00:	b2db      	uxtb	r3, r3
 8013a02:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8013a04:	6a3b      	ldr	r3, [r7, #32]
 8013a06:	b2db      	uxtb	r3, r3
 8013a08:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8013a0a:	f107 0114 	add.w	r1, r7, #20
 8013a0e:	2364      	movs	r3, #100	; 0x64
 8013a10:	2204      	movs	r2, #4
 8013a12:	68f8      	ldr	r0, [r7, #12]
 8013a14:	f7ff fcf9 	bl	801340a <SPIF_Transmit>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	f083 0301 	eor.w	r3, r3, #1
 8013a1e:	b2db      	uxtb	r3, r3
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d004      	beq.n	8013a2e <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8013a24:	2101      	movs	r1, #1
 8013a26:	68f8      	ldr	r0, [r7, #12]
 8013a28:	f7ff fc9b 	bl	8013362 <SPIF_CsPin>
        break;
 8013a2c:	e025      	b.n	8013a7a <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 8013a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013a32:	683a      	ldr	r2, [r7, #0]
 8013a34:	6879      	ldr	r1, [r7, #4]
 8013a36:	68f8      	ldr	r0, [r7, #12]
 8013a38:	f7ff fce7 	bl	801340a <SPIF_Transmit>
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	f083 0301 	eor.w	r3, r3, #1
 8013a42:	b2db      	uxtb	r3, r3
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d004      	beq.n	8013a52 <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8013a48:	2101      	movs	r1, #1
 8013a4a:	68f8      	ldr	r0, [r7, #12]
 8013a4c:	f7ff fc89 	bl	8013362 <SPIF_CsPin>
      break;
 8013a50:	e013      	b.n	8013a7a <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 8013a52:	2101      	movs	r1, #1
 8013a54:	68f8      	ldr	r0, [r7, #12]
 8013a56:	f7ff fc84 	bl	8013362 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 8013a5a:	2164      	movs	r1, #100	; 0x64
 8013a5c:	68f8      	ldr	r0, [r7, #12]
 8013a5e:	f7ff fdaf 	bl	80135c0 <SPIF_WaitForWriting>
 8013a62:	4603      	mov	r3, r0
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d008      	beq.n	8013a7a <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8013a68:	2301      	movs	r3, #1
 8013a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013a6e:	e004      	b.n	8013a7a <SPIF_WriteFn+0x13e>
      break;
 8013a70:	bf00      	nop
 8013a72:	e002      	b.n	8013a7a <SPIF_WriteFn+0x13e>
      break;
 8013a74:	bf00      	nop
 8013a76:	e000      	b.n	8013a7a <SPIF_WriteFn+0x13e>
      break;
 8013a78:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8013a7a:	68f8      	ldr	r0, [r7, #12]
 8013a7c:	f7ff fd57 	bl	801352e <SPIF_WriteDisable>
  return retVal;
 8013a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013a84:	4618      	mov	r0, r3
 8013a86:	3728      	adds	r7, #40	; 0x28
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}

08013a8c <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b086      	sub	sp, #24
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	60f8      	str	r0, [r7, #12]
 8013a94:	60b9      	str	r1, [r7, #8]
 8013a96:	607a      	str	r2, [r7, #4]
 8013a98:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 8013a9e:	2100      	movs	r1, #0
 8013aa0:	68f8      	ldr	r0, [r7, #12]
 8013aa2:	f7ff fc5e 	bl	8013362 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	69db      	ldr	r3, [r3, #28]
 8013aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013aae:	d322      	bcc.n	8013af6 <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 8013ab0:	2313      	movs	r3, #19
 8013ab2:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	0e1b      	lsrs	r3, r3, #24
 8013ab8:	b2db      	uxtb	r3, r3
 8013aba:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 8013abc:	68bb      	ldr	r3, [r7, #8]
 8013abe:	0c1b      	lsrs	r3, r3, #16
 8013ac0:	b2db      	uxtb	r3, r3
 8013ac2:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	0a1b      	lsrs	r3, r3, #8
 8013ac8:	b2db      	uxtb	r3, r3
 8013aca:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 8013acc:	68bb      	ldr	r3, [r7, #8]
 8013ace:	b2db      	uxtb	r3, r3
 8013ad0:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8013ad2:	f107 0110 	add.w	r1, r7, #16
 8013ad6:	2364      	movs	r3, #100	; 0x64
 8013ad8:	2205      	movs	r2, #5
 8013ada:	68f8      	ldr	r0, [r7, #12]
 8013adc:	f7ff fc95 	bl	801340a <SPIF_Transmit>
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	f083 0301 	eor.w	r3, r3, #1
 8013ae6:	b2db      	uxtb	r3, r3
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d023      	beq.n	8013b34 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8013aec:	2101      	movs	r1, #1
 8013aee:	68f8      	ldr	r0, [r7, #12]
 8013af0:	f7ff fc37 	bl	8013362 <SPIF_CsPin>
        break;
 8013af4:	e036      	b.n	8013b64 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 8013af6:	2303      	movs	r3, #3
 8013af8:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	0c1b      	lsrs	r3, r3, #16
 8013afe:	b2db      	uxtb	r3, r3
 8013b00:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	0a1b      	lsrs	r3, r3, #8
 8013b06:	b2db      	uxtb	r3, r3
 8013b08:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	b2db      	uxtb	r3, r3
 8013b0e:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8013b10:	f107 0110 	add.w	r1, r7, #16
 8013b14:	2364      	movs	r3, #100	; 0x64
 8013b16:	2204      	movs	r2, #4
 8013b18:	68f8      	ldr	r0, [r7, #12]
 8013b1a:	f7ff fc76 	bl	801340a <SPIF_Transmit>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	f083 0301 	eor.w	r3, r3, #1
 8013b24:	b2db      	uxtb	r3, r3
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d004      	beq.n	8013b34 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8013b2a:	2101      	movs	r1, #1
 8013b2c:	68f8      	ldr	r0, [r7, #12]
 8013b2e:	f7ff fc18 	bl	8013362 <SPIF_CsPin>
        break;
 8013b32:	e017      	b.n	8013b64 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8013b34:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8013b38:	683a      	ldr	r2, [r7, #0]
 8013b3a:	6879      	ldr	r1, [r7, #4]
 8013b3c:	68f8      	ldr	r0, [r7, #12]
 8013b3e:	f7ff fc9b 	bl	8013478 <SPIF_Receive>
 8013b42:	4603      	mov	r3, r0
 8013b44:	f083 0301 	eor.w	r3, r3, #1
 8013b48:	b2db      	uxtb	r3, r3
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d004      	beq.n	8013b58 <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 8013b4e:	2101      	movs	r1, #1
 8013b50:	68f8      	ldr	r0, [r7, #12]
 8013b52:	f7ff fc06 	bl	8013362 <SPIF_CsPin>
      break;
 8013b56:	e005      	b.n	8013b64 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8013b58:	2101      	movs	r1, #1
 8013b5a:	68f8      	ldr	r0, [r7, #12]
 8013b5c:	f7ff fc01 	bl	8013362 <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8013b60:	2301      	movs	r3, #1
 8013b62:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8013b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b66:	4618      	mov	r0, r3
 8013b68:	3718      	adds	r7, #24
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	bd80      	pop	{r7, pc}

08013b6e <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8013b6e:	b580      	push	{r7, lr}
 8013b70:	b086      	sub	sp, #24
 8013b72:	af00      	add	r7, sp, #0
 8013b74:	60f8      	str	r0, [r7, #12]
 8013b76:	60b9      	str	r1, [r7, #8]
 8013b78:	607a      	str	r2, [r7, #4]
 8013b7a:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d03a      	beq.n	8013bfc <SPIF_Init+0x8e>
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d037      	beq.n	8013bfc <SPIF_Init+0x8e>
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d034      	beq.n	8013bfc <SPIF_Init+0x8e>
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	7a9b      	ldrb	r3, [r3, #10]
 8013b96:	2b01      	cmp	r3, #1
 8013b98:	d030      	beq.n	8013bfc <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 8013b9a:	2220      	movs	r2, #32
 8013b9c:	2100      	movs	r1, #0
 8013b9e:	68f8      	ldr	r0, [r7, #12]
 8013ba0:	f002 fe2b 	bl	80167fa <memset>
    Handle->HSpi = HSpi;
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	68ba      	ldr	r2, [r7, #8]
 8013ba8:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	687a      	ldr	r2, [r7, #4]
 8013bae:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 8013bb0:	887a      	ldrh	r2, [r7, #2]
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 8013bb6:	2101      	movs	r1, #1
 8013bb8:	68f8      	ldr	r0, [r7, #12]
 8013bba:	f7ff fbd2 	bl	8013362 <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 8013bbe:	e002      	b.n	8013bc6 <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 8013bc0:	2001      	movs	r0, #1
 8013bc2:	f7ff fba3 	bl	801330c <SPIF_Delay>
    while (HAL_GetTick() < 20)
 8013bc6:	f7f2 fc2f 	bl	8006428 <HAL_GetTick>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	2b13      	cmp	r3, #19
 8013bce:	d9f7      	bls.n	8013bc0 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 8013bd0:	68f8      	ldr	r0, [r7, #12]
 8013bd2:	f7ff fcac 	bl	801352e <SPIF_WriteDisable>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	f083 0301 	eor.w	r3, r3, #1
 8013bdc:	b2db      	uxtb	r3, r3
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d10b      	bne.n	8013bfa <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 8013be2:	68f8      	ldr	r0, [r7, #12]
 8013be4:	f7ff fd12 	bl	801360c <SPIF_FindChip>
 8013be8:	4603      	mov	r3, r0
 8013bea:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8013bec:	7dfb      	ldrb	r3, [r7, #23]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d004      	beq.n	8013bfc <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	2201      	movs	r2, #1
 8013bf6:	729a      	strb	r2, [r3, #10]
 8013bf8:	e000      	b.n	8013bfc <SPIF_Init+0x8e>
      break;
 8013bfa:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8013bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bfe:	4618      	mov	r0, r3
 8013c00:	3718      	adds	r7, #24
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}

08013c06 <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 8013c06:	b580      	push	{r7, lr}
 8013c08:	b086      	sub	sp, #24
 8013c0a:	af00      	add	r7, sp, #0
 8013c0c:	6078      	str	r0, [r7, #4]
 8013c0e:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f7ff fb86 	bl	8013322 <SPIF_Lock>
  bool retVal = false;
 8013c16:	2300      	movs	r3, #0
 8013c18:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	031b      	lsls	r3, r3, #12
 8013c1e:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	699b      	ldr	r3, [r3, #24]
 8013c24:	683a      	ldr	r2, [r7, #0]
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d262      	bcs.n	8013cf0 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 8013c2a:	6878      	ldr	r0, [r7, #4]
 8013c2c:	f7ff fc5b 	bl	80134e6 <SPIF_WriteEnable>
 8013c30:	4603      	mov	r3, r0
 8013c32:	f083 0301 	eor.w	r3, r3, #1
 8013c36:	b2db      	uxtb	r3, r3
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d15b      	bne.n	8013cf4 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8013c3c:	2100      	movs	r1, #0
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f7ff fb8f 	bl	8013362 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	69db      	ldr	r3, [r3, #28]
 8013c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c4c:	d322      	bcc.n	8013c94 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 8013c4e:	2321      	movs	r3, #33	; 0x21
 8013c50:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 8013c52:	693b      	ldr	r3, [r7, #16]
 8013c54:	0e1b      	lsrs	r3, r3, #24
 8013c56:	b2db      	uxtb	r3, r3
 8013c58:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 8013c5a:	693b      	ldr	r3, [r7, #16]
 8013c5c:	0c1b      	lsrs	r3, r3, #16
 8013c5e:	b2db      	uxtb	r3, r3
 8013c60:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 8013c62:	693b      	ldr	r3, [r7, #16]
 8013c64:	0a1b      	lsrs	r3, r3, #8
 8013c66:	b2db      	uxtb	r3, r3
 8013c68:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 8013c6a:	693b      	ldr	r3, [r7, #16]
 8013c6c:	b2db      	uxtb	r3, r3
 8013c6e:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8013c70:	f107 0108 	add.w	r1, r7, #8
 8013c74:	2364      	movs	r3, #100	; 0x64
 8013c76:	2205      	movs	r2, #5
 8013c78:	6878      	ldr	r0, [r7, #4]
 8013c7a:	f7ff fbc6 	bl	801340a <SPIF_Transmit>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	f083 0301 	eor.w	r3, r3, #1
 8013c84:	b2db      	uxtb	r3, r3
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d023      	beq.n	8013cd2 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8013c8a:	2101      	movs	r1, #1
 8013c8c:	6878      	ldr	r0, [r7, #4]
 8013c8e:	f7ff fb68 	bl	8013362 <SPIF_CsPin>
        break;
 8013c92:	e030      	b.n	8013cf6 <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 8013c94:	2320      	movs	r3, #32
 8013c96:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	0c1b      	lsrs	r3, r3, #16
 8013c9c:	b2db      	uxtb	r3, r3
 8013c9e:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8013ca0:	693b      	ldr	r3, [r7, #16]
 8013ca2:	0a1b      	lsrs	r3, r3, #8
 8013ca4:	b2db      	uxtb	r3, r3
 8013ca6:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 8013ca8:	693b      	ldr	r3, [r7, #16]
 8013caa:	b2db      	uxtb	r3, r3
 8013cac:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8013cae:	f107 0108 	add.w	r1, r7, #8
 8013cb2:	2364      	movs	r3, #100	; 0x64
 8013cb4:	2204      	movs	r2, #4
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f7ff fba7 	bl	801340a <SPIF_Transmit>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	f083 0301 	eor.w	r3, r3, #1
 8013cc2:	b2db      	uxtb	r3, r3
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d004      	beq.n	8013cd2 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8013cc8:	2101      	movs	r1, #1
 8013cca:	6878      	ldr	r0, [r7, #4]
 8013ccc:	f7ff fb49 	bl	8013362 <SPIF_CsPin>
        break;
 8013cd0:	e011      	b.n	8013cf6 <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8013cd2:	2101      	movs	r1, #1
 8013cd4:	6878      	ldr	r0, [r7, #4]
 8013cd6:	f7ff fb44 	bl	8013362 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 8013cda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013cde:	6878      	ldr	r0, [r7, #4]
 8013ce0:	f7ff fc6e 	bl	80135c0 <SPIF_WaitForWriting>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d005      	beq.n	8013cf6 <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8013cea:	2301      	movs	r3, #1
 8013cec:	75fb      	strb	r3, [r7, #23]
 8013cee:	e002      	b.n	8013cf6 <SPIF_EraseSector+0xf0>
      break;
 8013cf0:	bf00      	nop
 8013cf2:	e000      	b.n	8013cf6 <SPIF_EraseSector+0xf0>
      break;
 8013cf4:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8013cf6:	6878      	ldr	r0, [r7, #4]
 8013cf8:	f7ff fc19 	bl	801352e <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f7ff fb23 	bl	8013348 <SPIF_UnLock>
  return retVal;
 8013d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3718      	adds	r7, #24
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}

08013d0c <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b088      	sub	sp, #32
 8013d10:	af02      	add	r7, sp, #8
 8013d12:	60f8      	str	r0, [r7, #12]
 8013d14:	60b9      	str	r1, [r7, #8]
 8013d16:	607a      	str	r2, [r7, #4]
 8013d18:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8013d1a:	68f8      	ldr	r0, [r7, #12]
 8013d1c:	f7ff fb01 	bl	8013322 <SPIF_Lock>
  bool retVal = false;
 8013d20:	2300      	movs	r3, #0
 8013d22:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 8013d24:	6a3b      	ldr	r3, [r7, #32]
 8013d26:	9300      	str	r3, [sp, #0]
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	687a      	ldr	r2, [r7, #4]
 8013d2c:	68b9      	ldr	r1, [r7, #8]
 8013d2e:	68f8      	ldr	r0, [r7, #12]
 8013d30:	f7ff fe04 	bl	801393c <SPIF_WriteFn>
 8013d34:	4603      	mov	r3, r0
 8013d36:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 8013d38:	68f8      	ldr	r0, [r7, #12]
 8013d3a:	f7ff fb05 	bl	8013348 <SPIF_UnLock>
  return retVal;
 8013d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d40:	4618      	mov	r0, r3
 8013d42:	3718      	adds	r7, #24
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd80      	pop	{r7, pc}

08013d48 <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b088      	sub	sp, #32
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	60f8      	str	r0, [r7, #12]
 8013d50:	60b9      	str	r1, [r7, #8]
 8013d52:	607a      	str	r2, [r7, #4]
 8013d54:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8013d56:	68f8      	ldr	r0, [r7, #12]
 8013d58:	f7ff fae3 	bl	8013322 <SPIF_Lock>
  bool retVal = false;
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	021b      	lsls	r3, r3, #8
 8013d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d66:	4413      	add	r3, r2
 8013d68:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 8013d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d6c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8013d70:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 8013d72:	683a      	ldr	r2, [r7, #0]
 8013d74:	697b      	ldr	r3, [r7, #20]
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d901      	bls.n	8013d7e <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	687a      	ldr	r2, [r7, #4]
 8013d82:	69b9      	ldr	r1, [r7, #24]
 8013d84:	68f8      	ldr	r0, [r7, #12]
 8013d86:	f7ff fe81 	bl	8013a8c <SPIF_ReadFn>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 8013d8e:	68f8      	ldr	r0, [r7, #12]
 8013d90:	f7ff fada 	bl	8013348 <SPIF_UnLock>
  return retVal;
 8013d94:	7ffb      	ldrb	r3, [r7, #31]
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3720      	adds	r7, #32
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bd80      	pop	{r7, pc}
	...

08013da0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013da4:	2200      	movs	r2, #0
 8013da6:	4912      	ldr	r1, [pc, #72]	; (8013df0 <MX_USB_DEVICE_Init+0x50>)
 8013da8:	4812      	ldr	r0, [pc, #72]	; (8013df4 <MX_USB_DEVICE_Init+0x54>)
 8013daa:	f7fe f81f 	bl	8011dec <USBD_Init>
 8013dae:	4603      	mov	r3, r0
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d001      	beq.n	8013db8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013db4:	f7ed fe6d 	bl	8001a92 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013db8:	490f      	ldr	r1, [pc, #60]	; (8013df8 <MX_USB_DEVICE_Init+0x58>)
 8013dba:	480e      	ldr	r0, [pc, #56]	; (8013df4 <MX_USB_DEVICE_Init+0x54>)
 8013dbc:	f7fe f846 	bl	8011e4c <USBD_RegisterClass>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d001      	beq.n	8013dca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013dc6:	f7ed fe64 	bl	8001a92 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013dca:	490c      	ldr	r1, [pc, #48]	; (8013dfc <MX_USB_DEVICE_Init+0x5c>)
 8013dcc:	4809      	ldr	r0, [pc, #36]	; (8013df4 <MX_USB_DEVICE_Init+0x54>)
 8013dce:	f7fd ff3d 	bl	8011c4c <USBD_CDC_RegisterInterface>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d001      	beq.n	8013ddc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013dd8:	f7ed fe5b 	bl	8001a92 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013ddc:	4805      	ldr	r0, [pc, #20]	; (8013df4 <MX_USB_DEVICE_Init+0x54>)
 8013dde:	f7fe f86b 	bl	8011eb8 <USBD_Start>
 8013de2:	4603      	mov	r3, r0
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d001      	beq.n	8013dec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013de8:	f7ed fe53 	bl	8001a92 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013dec:	bf00      	nop
 8013dee:	bd80      	pop	{r7, pc}
 8013df0:	200000d0 	.word	0x200000d0
 8013df4:	2000126c 	.word	0x2000126c
 8013df8:	2000003c 	.word	0x2000003c
 8013dfc:	200000bc 	.word	0x200000bc

08013e00 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013e04:	2200      	movs	r2, #0
 8013e06:	4905      	ldr	r1, [pc, #20]	; (8013e1c <CDC_Init_FS+0x1c>)
 8013e08:	4805      	ldr	r0, [pc, #20]	; (8013e20 <CDC_Init_FS+0x20>)
 8013e0a:	f7fd ff39 	bl	8011c80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013e0e:	4905      	ldr	r1, [pc, #20]	; (8013e24 <CDC_Init_FS+0x24>)
 8013e10:	4803      	ldr	r0, [pc, #12]	; (8013e20 <CDC_Init_FS+0x20>)
 8013e12:	f7fd ff57 	bl	8011cc4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013e16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013e18:	4618      	mov	r0, r3
 8013e1a:	bd80      	pop	{r7, pc}
 8013e1c:	20001948 	.word	0x20001948
 8013e20:	2000126c 	.word	0x2000126c
 8013e24:	20001548 	.word	0x20001548

08013e28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013e28:	b480      	push	{r7}
 8013e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013e2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013e2e:	4618      	mov	r0, r3
 8013e30:	46bd      	mov	sp, r7
 8013e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e36:	4770      	bx	lr

08013e38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013e38:	b480      	push	{r7}
 8013e3a:	b083      	sub	sp, #12
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	4603      	mov	r3, r0
 8013e40:	6039      	str	r1, [r7, #0]
 8013e42:	71fb      	strb	r3, [r7, #7]
 8013e44:	4613      	mov	r3, r2
 8013e46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013e48:	79fb      	ldrb	r3, [r7, #7]
 8013e4a:	2b23      	cmp	r3, #35	; 0x23
 8013e4c:	d84a      	bhi.n	8013ee4 <CDC_Control_FS+0xac>
 8013e4e:	a201      	add	r2, pc, #4	; (adr r2, 8013e54 <CDC_Control_FS+0x1c>)
 8013e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e54:	08013ee5 	.word	0x08013ee5
 8013e58:	08013ee5 	.word	0x08013ee5
 8013e5c:	08013ee5 	.word	0x08013ee5
 8013e60:	08013ee5 	.word	0x08013ee5
 8013e64:	08013ee5 	.word	0x08013ee5
 8013e68:	08013ee5 	.word	0x08013ee5
 8013e6c:	08013ee5 	.word	0x08013ee5
 8013e70:	08013ee5 	.word	0x08013ee5
 8013e74:	08013ee5 	.word	0x08013ee5
 8013e78:	08013ee5 	.word	0x08013ee5
 8013e7c:	08013ee5 	.word	0x08013ee5
 8013e80:	08013ee5 	.word	0x08013ee5
 8013e84:	08013ee5 	.word	0x08013ee5
 8013e88:	08013ee5 	.word	0x08013ee5
 8013e8c:	08013ee5 	.word	0x08013ee5
 8013e90:	08013ee5 	.word	0x08013ee5
 8013e94:	08013ee5 	.word	0x08013ee5
 8013e98:	08013ee5 	.word	0x08013ee5
 8013e9c:	08013ee5 	.word	0x08013ee5
 8013ea0:	08013ee5 	.word	0x08013ee5
 8013ea4:	08013ee5 	.word	0x08013ee5
 8013ea8:	08013ee5 	.word	0x08013ee5
 8013eac:	08013ee5 	.word	0x08013ee5
 8013eb0:	08013ee5 	.word	0x08013ee5
 8013eb4:	08013ee5 	.word	0x08013ee5
 8013eb8:	08013ee5 	.word	0x08013ee5
 8013ebc:	08013ee5 	.word	0x08013ee5
 8013ec0:	08013ee5 	.word	0x08013ee5
 8013ec4:	08013ee5 	.word	0x08013ee5
 8013ec8:	08013ee5 	.word	0x08013ee5
 8013ecc:	08013ee5 	.word	0x08013ee5
 8013ed0:	08013ee5 	.word	0x08013ee5
 8013ed4:	08013ee5 	.word	0x08013ee5
 8013ed8:	08013ee5 	.word	0x08013ee5
 8013edc:	08013ee5 	.word	0x08013ee5
 8013ee0:	08013ee5 	.word	0x08013ee5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013ee4:	bf00      	nop
  }

  return (USBD_OK);
 8013ee6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013ee8:	4618      	mov	r0, r3
 8013eea:	370c      	adds	r7, #12
 8013eec:	46bd      	mov	sp, r7
 8013eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef2:	4770      	bx	lr

08013ef4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b082      	sub	sp, #8
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
 8013efc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013efe:	6879      	ldr	r1, [r7, #4]
 8013f00:	4805      	ldr	r0, [pc, #20]	; (8013f18 <CDC_Receive_FS+0x24>)
 8013f02:	f7fd fedf 	bl	8011cc4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013f06:	4804      	ldr	r0, [pc, #16]	; (8013f18 <CDC_Receive_FS+0x24>)
 8013f08:	f7fd ff3a 	bl	8011d80 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013f0c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3708      	adds	r7, #8
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}
 8013f16:	bf00      	nop
 8013f18:	2000126c 	.word	0x2000126c

08013f1c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b084      	sub	sp, #16
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
 8013f24:	460b      	mov	r3, r1
 8013f26:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013f28:	2300      	movs	r3, #0
 8013f2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013f2c:	4b0d      	ldr	r3, [pc, #52]	; (8013f64 <CDC_Transmit_FS+0x48>)
 8013f2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f32:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013f34:	68bb      	ldr	r3, [r7, #8]
 8013f36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d001      	beq.n	8013f42 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8013f3e:	2301      	movs	r3, #1
 8013f40:	e00b      	b.n	8013f5a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8013f42:	887b      	ldrh	r3, [r7, #2]
 8013f44:	461a      	mov	r2, r3
 8013f46:	6879      	ldr	r1, [r7, #4]
 8013f48:	4806      	ldr	r0, [pc, #24]	; (8013f64 <CDC_Transmit_FS+0x48>)
 8013f4a:	f7fd fe99 	bl	8011c80 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013f4e:	4805      	ldr	r0, [pc, #20]	; (8013f64 <CDC_Transmit_FS+0x48>)
 8013f50:	f7fd fed6 	bl	8011d00 <USBD_CDC_TransmitPacket>
 8013f54:	4603      	mov	r3, r0
 8013f56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	3710      	adds	r7, #16
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}
 8013f62:	bf00      	nop
 8013f64:	2000126c 	.word	0x2000126c

08013f68 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013f68:	b480      	push	{r7}
 8013f6a:	b087      	sub	sp, #28
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	60f8      	str	r0, [r7, #12]
 8013f70:	60b9      	str	r1, [r7, #8]
 8013f72:	4613      	mov	r3, r2
 8013f74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013f76:	2300      	movs	r3, #0
 8013f78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013f7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	371c      	adds	r7, #28
 8013f82:	46bd      	mov	sp, r7
 8013f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f88:	4770      	bx	lr
	...

08013f8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013f8c:	b480      	push	{r7}
 8013f8e:	b083      	sub	sp, #12
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	4603      	mov	r3, r0
 8013f94:	6039      	str	r1, [r7, #0]
 8013f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	2212      	movs	r2, #18
 8013f9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013f9e:	4b03      	ldr	r3, [pc, #12]	; (8013fac <USBD_FS_DeviceDescriptor+0x20>)
}
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	370c      	adds	r7, #12
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013faa:	4770      	bx	lr
 8013fac:	200000f0 	.word	0x200000f0

08013fb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013fb0:	b480      	push	{r7}
 8013fb2:	b083      	sub	sp, #12
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	6039      	str	r1, [r7, #0]
 8013fba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013fbc:	683b      	ldr	r3, [r7, #0]
 8013fbe:	2204      	movs	r2, #4
 8013fc0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013fc2:	4b03      	ldr	r3, [pc, #12]	; (8013fd0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	370c      	adds	r7, #12
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fce:	4770      	bx	lr
 8013fd0:	20000110 	.word	0x20000110

08013fd4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b082      	sub	sp, #8
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	4603      	mov	r3, r0
 8013fdc:	6039      	str	r1, [r7, #0]
 8013fde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013fe0:	79fb      	ldrb	r3, [r7, #7]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d105      	bne.n	8013ff2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013fe6:	683a      	ldr	r2, [r7, #0]
 8013fe8:	4907      	ldr	r1, [pc, #28]	; (8014008 <USBD_FS_ProductStrDescriptor+0x34>)
 8013fea:	4808      	ldr	r0, [pc, #32]	; (801400c <USBD_FS_ProductStrDescriptor+0x38>)
 8013fec:	f7ff f8ae 	bl	801314c <USBD_GetString>
 8013ff0:	e004      	b.n	8013ffc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013ff2:	683a      	ldr	r2, [r7, #0]
 8013ff4:	4904      	ldr	r1, [pc, #16]	; (8014008 <USBD_FS_ProductStrDescriptor+0x34>)
 8013ff6:	4805      	ldr	r0, [pc, #20]	; (801400c <USBD_FS_ProductStrDescriptor+0x38>)
 8013ff8:	f7ff f8a8 	bl	801314c <USBD_GetString>
  }
  return USBD_StrDesc;
 8013ffc:	4b02      	ldr	r3, [pc, #8]	; (8014008 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013ffe:	4618      	mov	r0, r3
 8014000:	3708      	adds	r7, #8
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}
 8014006:	bf00      	nop
 8014008:	20001d48 	.word	0x20001d48
 801400c:	0801b0b8 	.word	0x0801b0b8

08014010 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b082      	sub	sp, #8
 8014014:	af00      	add	r7, sp, #0
 8014016:	4603      	mov	r3, r0
 8014018:	6039      	str	r1, [r7, #0]
 801401a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801401c:	683a      	ldr	r2, [r7, #0]
 801401e:	4904      	ldr	r1, [pc, #16]	; (8014030 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014020:	4804      	ldr	r0, [pc, #16]	; (8014034 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014022:	f7ff f893 	bl	801314c <USBD_GetString>
  return USBD_StrDesc;
 8014026:	4b02      	ldr	r3, [pc, #8]	; (8014030 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014028:	4618      	mov	r0, r3
 801402a:	3708      	adds	r7, #8
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}
 8014030:	20001d48 	.word	0x20001d48
 8014034:	0801b0c4 	.word	0x0801b0c4

08014038 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b082      	sub	sp, #8
 801403c:	af00      	add	r7, sp, #0
 801403e:	4603      	mov	r3, r0
 8014040:	6039      	str	r1, [r7, #0]
 8014042:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	221a      	movs	r2, #26
 8014048:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801404a:	f000 f855 	bl	80140f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801404e:	4b02      	ldr	r3, [pc, #8]	; (8014058 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014050:	4618      	mov	r0, r3
 8014052:	3708      	adds	r7, #8
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}
 8014058:	20000114 	.word	0x20000114

0801405c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b082      	sub	sp, #8
 8014060:	af00      	add	r7, sp, #0
 8014062:	4603      	mov	r3, r0
 8014064:	6039      	str	r1, [r7, #0]
 8014066:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014068:	79fb      	ldrb	r3, [r7, #7]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d105      	bne.n	801407a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801406e:	683a      	ldr	r2, [r7, #0]
 8014070:	4907      	ldr	r1, [pc, #28]	; (8014090 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014072:	4808      	ldr	r0, [pc, #32]	; (8014094 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014074:	f7ff f86a 	bl	801314c <USBD_GetString>
 8014078:	e004      	b.n	8014084 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801407a:	683a      	ldr	r2, [r7, #0]
 801407c:	4904      	ldr	r1, [pc, #16]	; (8014090 <USBD_FS_ConfigStrDescriptor+0x34>)
 801407e:	4805      	ldr	r0, [pc, #20]	; (8014094 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014080:	f7ff f864 	bl	801314c <USBD_GetString>
  }
  return USBD_StrDesc;
 8014084:	4b02      	ldr	r3, [pc, #8]	; (8014090 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014086:	4618      	mov	r0, r3
 8014088:	3708      	adds	r7, #8
 801408a:	46bd      	mov	sp, r7
 801408c:	bd80      	pop	{r7, pc}
 801408e:	bf00      	nop
 8014090:	20001d48 	.word	0x20001d48
 8014094:	0801b0d8 	.word	0x0801b0d8

08014098 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b082      	sub	sp, #8
 801409c:	af00      	add	r7, sp, #0
 801409e:	4603      	mov	r3, r0
 80140a0:	6039      	str	r1, [r7, #0]
 80140a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80140a4:	79fb      	ldrb	r3, [r7, #7]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d105      	bne.n	80140b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80140aa:	683a      	ldr	r2, [r7, #0]
 80140ac:	4907      	ldr	r1, [pc, #28]	; (80140cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80140ae:	4808      	ldr	r0, [pc, #32]	; (80140d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80140b0:	f7ff f84c 	bl	801314c <USBD_GetString>
 80140b4:	e004      	b.n	80140c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80140b6:	683a      	ldr	r2, [r7, #0]
 80140b8:	4904      	ldr	r1, [pc, #16]	; (80140cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80140ba:	4805      	ldr	r0, [pc, #20]	; (80140d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80140bc:	f7ff f846 	bl	801314c <USBD_GetString>
  }
  return USBD_StrDesc;
 80140c0:	4b02      	ldr	r3, [pc, #8]	; (80140cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80140c2:	4618      	mov	r0, r3
 80140c4:	3708      	adds	r7, #8
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}
 80140ca:	bf00      	nop
 80140cc:	20001d48 	.word	0x20001d48
 80140d0:	0801b0e4 	.word	0x0801b0e4

080140d4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80140d4:	b480      	push	{r7}
 80140d6:	b083      	sub	sp, #12
 80140d8:	af00      	add	r7, sp, #0
 80140da:	4603      	mov	r3, r0
 80140dc:	6039      	str	r1, [r7, #0]
 80140de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	220c      	movs	r2, #12
 80140e4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80140e6:	4b03      	ldr	r3, [pc, #12]	; (80140f4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80140e8:	4618      	mov	r0, r3
 80140ea:	370c      	adds	r7, #12
 80140ec:	46bd      	mov	sp, r7
 80140ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f2:	4770      	bx	lr
 80140f4:	20000104 	.word	0x20000104

080140f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b084      	sub	sp, #16
 80140fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80140fe:	4b0f      	ldr	r3, [pc, #60]	; (801413c <Get_SerialNum+0x44>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014104:	4b0e      	ldr	r3, [pc, #56]	; (8014140 <Get_SerialNum+0x48>)
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801410a:	4b0e      	ldr	r3, [pc, #56]	; (8014144 <Get_SerialNum+0x4c>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014110:	68fa      	ldr	r2, [r7, #12]
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	4413      	add	r3, r2
 8014116:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d009      	beq.n	8014132 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801411e:	2208      	movs	r2, #8
 8014120:	4909      	ldr	r1, [pc, #36]	; (8014148 <Get_SerialNum+0x50>)
 8014122:	68f8      	ldr	r0, [r7, #12]
 8014124:	f000 f814 	bl	8014150 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014128:	2204      	movs	r2, #4
 801412a:	4908      	ldr	r1, [pc, #32]	; (801414c <Get_SerialNum+0x54>)
 801412c:	68b8      	ldr	r0, [r7, #8]
 801412e:	f000 f80f 	bl	8014150 <IntToUnicode>
  }
}
 8014132:	bf00      	nop
 8014134:	3710      	adds	r7, #16
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}
 801413a:	bf00      	nop
 801413c:	1fff7590 	.word	0x1fff7590
 8014140:	1fff7594 	.word	0x1fff7594
 8014144:	1fff7598 	.word	0x1fff7598
 8014148:	20000116 	.word	0x20000116
 801414c:	20000126 	.word	0x20000126

08014150 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014150:	b480      	push	{r7}
 8014152:	b087      	sub	sp, #28
 8014154:	af00      	add	r7, sp, #0
 8014156:	60f8      	str	r0, [r7, #12]
 8014158:	60b9      	str	r1, [r7, #8]
 801415a:	4613      	mov	r3, r2
 801415c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801415e:	2300      	movs	r3, #0
 8014160:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014162:	2300      	movs	r3, #0
 8014164:	75fb      	strb	r3, [r7, #23]
 8014166:	e027      	b.n	80141b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	0f1b      	lsrs	r3, r3, #28
 801416c:	2b09      	cmp	r3, #9
 801416e:	d80b      	bhi.n	8014188 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	0f1b      	lsrs	r3, r3, #28
 8014174:	b2da      	uxtb	r2, r3
 8014176:	7dfb      	ldrb	r3, [r7, #23]
 8014178:	005b      	lsls	r3, r3, #1
 801417a:	4619      	mov	r1, r3
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	440b      	add	r3, r1
 8014180:	3230      	adds	r2, #48	; 0x30
 8014182:	b2d2      	uxtb	r2, r2
 8014184:	701a      	strb	r2, [r3, #0]
 8014186:	e00a      	b.n	801419e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	0f1b      	lsrs	r3, r3, #28
 801418c:	b2da      	uxtb	r2, r3
 801418e:	7dfb      	ldrb	r3, [r7, #23]
 8014190:	005b      	lsls	r3, r3, #1
 8014192:	4619      	mov	r1, r3
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	440b      	add	r3, r1
 8014198:	3237      	adds	r2, #55	; 0x37
 801419a:	b2d2      	uxtb	r2, r2
 801419c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	011b      	lsls	r3, r3, #4
 80141a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80141a4:	7dfb      	ldrb	r3, [r7, #23]
 80141a6:	005b      	lsls	r3, r3, #1
 80141a8:	3301      	adds	r3, #1
 80141aa:	68ba      	ldr	r2, [r7, #8]
 80141ac:	4413      	add	r3, r2
 80141ae:	2200      	movs	r2, #0
 80141b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80141b2:	7dfb      	ldrb	r3, [r7, #23]
 80141b4:	3301      	adds	r3, #1
 80141b6:	75fb      	strb	r3, [r7, #23]
 80141b8:	7dfa      	ldrb	r2, [r7, #23]
 80141ba:	79fb      	ldrb	r3, [r7, #7]
 80141bc:	429a      	cmp	r2, r3
 80141be:	d3d3      	bcc.n	8014168 <IntToUnicode+0x18>
  }
}
 80141c0:	bf00      	nop
 80141c2:	bf00      	nop
 80141c4:	371c      	adds	r7, #28
 80141c6:	46bd      	mov	sp, r7
 80141c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141cc:	4770      	bx	lr
	...

080141d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b084      	sub	sp, #16
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	4a0d      	ldr	r2, [pc, #52]	; (8014214 <HAL_PCD_MspInit+0x44>)
 80141de:	4293      	cmp	r3, r2
 80141e0:	d113      	bne.n	801420a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80141e2:	4b0d      	ldr	r3, [pc, #52]	; (8014218 <HAL_PCD_MspInit+0x48>)
 80141e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141e6:	4a0c      	ldr	r2, [pc, #48]	; (8014218 <HAL_PCD_MspInit+0x48>)
 80141e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80141ec:	6593      	str	r3, [r2, #88]	; 0x58
 80141ee:	4b0a      	ldr	r3, [pc, #40]	; (8014218 <HAL_PCD_MspInit+0x48>)
 80141f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80141f6:	60fb      	str	r3, [r7, #12]
 80141f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80141fa:	2200      	movs	r2, #0
 80141fc:	2100      	movs	r1, #0
 80141fe:	2043      	movs	r0, #67	; 0x43
 8014200:	f7f3 fcbd 	bl	8007b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8014204:	2043      	movs	r0, #67	; 0x43
 8014206:	f7f3 fcd6 	bl	8007bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801420a:	bf00      	nop
 801420c:	3710      	adds	r7, #16
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}
 8014212:	bf00      	nop
 8014214:	40006800 	.word	0x40006800
 8014218:	40021000 	.word	0x40021000

0801421c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b082      	sub	sp, #8
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8014230:	4619      	mov	r1, r3
 8014232:	4610      	mov	r0, r2
 8014234:	f7fd fe8d 	bl	8011f52 <USBD_LL_SetupStage>
}
 8014238:	bf00      	nop
 801423a:	3708      	adds	r7, #8
 801423c:	46bd      	mov	sp, r7
 801423e:	bd80      	pop	{r7, pc}

08014240 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b082      	sub	sp, #8
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
 8014248:	460b      	mov	r3, r1
 801424a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8014252:	78fa      	ldrb	r2, [r7, #3]
 8014254:	6879      	ldr	r1, [r7, #4]
 8014256:	4613      	mov	r3, r2
 8014258:	009b      	lsls	r3, r3, #2
 801425a:	4413      	add	r3, r2
 801425c:	00db      	lsls	r3, r3, #3
 801425e:	440b      	add	r3, r1
 8014260:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8014264:	681a      	ldr	r2, [r3, #0]
 8014266:	78fb      	ldrb	r3, [r7, #3]
 8014268:	4619      	mov	r1, r3
 801426a:	f7fd fec7 	bl	8011ffc <USBD_LL_DataOutStage>
}
 801426e:	bf00      	nop
 8014270:	3708      	adds	r7, #8
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}

08014276 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014276:	b580      	push	{r7, lr}
 8014278:	b082      	sub	sp, #8
 801427a:	af00      	add	r7, sp, #0
 801427c:	6078      	str	r0, [r7, #4]
 801427e:	460b      	mov	r3, r1
 8014280:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8014288:	78fa      	ldrb	r2, [r7, #3]
 801428a:	6879      	ldr	r1, [r7, #4]
 801428c:	4613      	mov	r3, r2
 801428e:	009b      	lsls	r3, r3, #2
 8014290:	4413      	add	r3, r2
 8014292:	00db      	lsls	r3, r3, #3
 8014294:	440b      	add	r3, r1
 8014296:	333c      	adds	r3, #60	; 0x3c
 8014298:	681a      	ldr	r2, [r3, #0]
 801429a:	78fb      	ldrb	r3, [r7, #3]
 801429c:	4619      	mov	r1, r3
 801429e:	f7fd ff60 	bl	8012162 <USBD_LL_DataInStage>
}
 80142a2:	bf00      	nop
 80142a4:	3708      	adds	r7, #8
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}

080142aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80142aa:	b580      	push	{r7, lr}
 80142ac:	b082      	sub	sp, #8
 80142ae:	af00      	add	r7, sp, #0
 80142b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7fe f89a 	bl	80123f2 <USBD_LL_SOF>
}
 80142be:	bf00      	nop
 80142c0:	3708      	adds	r7, #8
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd80      	pop	{r7, pc}

080142c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80142c6:	b580      	push	{r7, lr}
 80142c8:	b084      	sub	sp, #16
 80142ca:	af00      	add	r7, sp, #0
 80142cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80142ce:	2301      	movs	r3, #1
 80142d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	689b      	ldr	r3, [r3, #8]
 80142d6:	2b02      	cmp	r3, #2
 80142d8:	d001      	beq.n	80142de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80142da:	f7ed fbda 	bl	8001a92 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80142e4:	7bfa      	ldrb	r2, [r7, #15]
 80142e6:	4611      	mov	r1, r2
 80142e8:	4618      	mov	r0, r3
 80142ea:	f7fe f83e 	bl	801236a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80142f4:	4618      	mov	r0, r3
 80142f6:	f7fd ffe6 	bl	80122c6 <USBD_LL_Reset>
}
 80142fa:	bf00      	nop
 80142fc:	3710      	adds	r7, #16
 80142fe:	46bd      	mov	sp, r7
 8014300:	bd80      	pop	{r7, pc}
	...

08014304 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b082      	sub	sp, #8
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8014312:	4618      	mov	r0, r3
 8014314:	f7fe f839 	bl	801238a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	699b      	ldr	r3, [r3, #24]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d005      	beq.n	801432c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014320:	4b04      	ldr	r3, [pc, #16]	; (8014334 <HAL_PCD_SuspendCallback+0x30>)
 8014322:	691b      	ldr	r3, [r3, #16]
 8014324:	4a03      	ldr	r2, [pc, #12]	; (8014334 <HAL_PCD_SuspendCallback+0x30>)
 8014326:	f043 0306 	orr.w	r3, r3, #6
 801432a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801432c:	bf00      	nop
 801432e:	3708      	adds	r7, #8
 8014330:	46bd      	mov	sp, r7
 8014332:	bd80      	pop	{r7, pc}
 8014334:	e000ed00 	.word	0xe000ed00

08014338 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b082      	sub	sp, #8
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	699b      	ldr	r3, [r3, #24]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d007      	beq.n	8014358 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014348:	4b08      	ldr	r3, [pc, #32]	; (801436c <HAL_PCD_ResumeCallback+0x34>)
 801434a:	691b      	ldr	r3, [r3, #16]
 801434c:	4a07      	ldr	r2, [pc, #28]	; (801436c <HAL_PCD_ResumeCallback+0x34>)
 801434e:	f023 0306 	bic.w	r3, r3, #6
 8014352:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8014354:	f000 fab6 	bl	80148c4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801435e:	4618      	mov	r0, r3
 8014360:	f7fe f82f 	bl	80123c2 <USBD_LL_Resume>
}
 8014364:	bf00      	nop
 8014366:	3708      	adds	r7, #8
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}
 801436c:	e000ed00 	.word	0xe000ed00

08014370 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b082      	sub	sp, #8
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8014378:	f7f6 fb1a 	bl	800a9b0 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801437c:	4a2b      	ldr	r2, [pc, #172]	; (801442c <USBD_LL_Init+0xbc>)
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	4a29      	ldr	r2, [pc, #164]	; (801442c <USBD_LL_Init+0xbc>)
 8014388:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 801438c:	4b27      	ldr	r3, [pc, #156]	; (801442c <USBD_LL_Init+0xbc>)
 801438e:	4a28      	ldr	r2, [pc, #160]	; (8014430 <USBD_LL_Init+0xc0>)
 8014390:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8014392:	4b26      	ldr	r3, [pc, #152]	; (801442c <USBD_LL_Init+0xbc>)
 8014394:	2208      	movs	r2, #8
 8014396:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014398:	4b24      	ldr	r3, [pc, #144]	; (801442c <USBD_LL_Init+0xbc>)
 801439a:	2202      	movs	r2, #2
 801439c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801439e:	4b23      	ldr	r3, [pc, #140]	; (801442c <USBD_LL_Init+0xbc>)
 80143a0:	2202      	movs	r2, #2
 80143a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80143a4:	4b21      	ldr	r3, [pc, #132]	; (801442c <USBD_LL_Init+0xbc>)
 80143a6:	2200      	movs	r2, #0
 80143a8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80143aa:	4b20      	ldr	r3, [pc, #128]	; (801442c <USBD_LL_Init+0xbc>)
 80143ac:	2200      	movs	r2, #0
 80143ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80143b0:	4b1e      	ldr	r3, [pc, #120]	; (801442c <USBD_LL_Init+0xbc>)
 80143b2:	2200      	movs	r2, #0
 80143b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80143b6:	4b1d      	ldr	r3, [pc, #116]	; (801442c <USBD_LL_Init+0xbc>)
 80143b8:	2200      	movs	r2, #0
 80143ba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80143bc:	481b      	ldr	r0, [pc, #108]	; (801442c <USBD_LL_Init+0xbc>)
 80143be:	f7f4 fd15 	bl	8008dec <HAL_PCD_Init>
 80143c2:	4603      	mov	r3, r0
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d001      	beq.n	80143cc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80143c8:	f7ed fb63 	bl	8001a92 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80143d2:	2318      	movs	r3, #24
 80143d4:	2200      	movs	r2, #0
 80143d6:	2100      	movs	r1, #0
 80143d8:	f7f6 fa19 	bl	800a80e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80143e2:	2358      	movs	r3, #88	; 0x58
 80143e4:	2200      	movs	r2, #0
 80143e6:	2180      	movs	r1, #128	; 0x80
 80143e8:	f7f6 fa11 	bl	800a80e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80143f2:	23c0      	movs	r3, #192	; 0xc0
 80143f4:	2200      	movs	r2, #0
 80143f6:	2181      	movs	r1, #129	; 0x81
 80143f8:	f7f6 fa09 	bl	800a80e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014402:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014406:	2200      	movs	r2, #0
 8014408:	2101      	movs	r1, #1
 801440a:	f7f6 fa00 	bl	800a80e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014418:	2200      	movs	r2, #0
 801441a:	2182      	movs	r1, #130	; 0x82
 801441c:	f7f6 f9f7 	bl	800a80e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8014420:	2300      	movs	r3, #0
}
 8014422:	4618      	mov	r0, r3
 8014424:	3708      	adds	r7, #8
 8014426:	46bd      	mov	sp, r7
 8014428:	bd80      	pop	{r7, pc}
 801442a:	bf00      	nop
 801442c:	20001f48 	.word	0x20001f48
 8014430:	40006800 	.word	0x40006800

08014434 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b084      	sub	sp, #16
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801443c:	2300      	movs	r3, #0
 801443e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014440:	2300      	movs	r3, #0
 8014442:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801444a:	4618      	mov	r0, r3
 801444c:	f7f4 fdd4 	bl	8008ff8 <HAL_PCD_Start>
 8014450:	4603      	mov	r3, r0
 8014452:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014454:	7bbb      	ldrb	r3, [r7, #14]
 8014456:	2b03      	cmp	r3, #3
 8014458:	d816      	bhi.n	8014488 <USBD_LL_Start+0x54>
 801445a:	a201      	add	r2, pc, #4	; (adr r2, 8014460 <USBD_LL_Start+0x2c>)
 801445c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014460:	08014471 	.word	0x08014471
 8014464:	08014477 	.word	0x08014477
 8014468:	0801447d 	.word	0x0801447d
 801446c:	08014483 	.word	0x08014483
    case HAL_OK :
      usb_status = USBD_OK;
 8014470:	2300      	movs	r3, #0
 8014472:	73fb      	strb	r3, [r7, #15]
    break;
 8014474:	e00b      	b.n	801448e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014476:	2303      	movs	r3, #3
 8014478:	73fb      	strb	r3, [r7, #15]
    break;
 801447a:	e008      	b.n	801448e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801447c:	2301      	movs	r3, #1
 801447e:	73fb      	strb	r3, [r7, #15]
    break;
 8014480:	e005      	b.n	801448e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014482:	2303      	movs	r3, #3
 8014484:	73fb      	strb	r3, [r7, #15]
    break;
 8014486:	e002      	b.n	801448e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8014488:	2303      	movs	r3, #3
 801448a:	73fb      	strb	r3, [r7, #15]
    break;
 801448c:	bf00      	nop
  }
  return usb_status;
 801448e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014490:	4618      	mov	r0, r3
 8014492:	3710      	adds	r7, #16
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}

08014498 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b084      	sub	sp, #16
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
 80144a0:	4608      	mov	r0, r1
 80144a2:	4611      	mov	r1, r2
 80144a4:	461a      	mov	r2, r3
 80144a6:	4603      	mov	r3, r0
 80144a8:	70fb      	strb	r3, [r7, #3]
 80144aa:	460b      	mov	r3, r1
 80144ac:	70bb      	strb	r3, [r7, #2]
 80144ae:	4613      	mov	r3, r2
 80144b0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80144b2:	2300      	movs	r3, #0
 80144b4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80144b6:	2300      	movs	r3, #0
 80144b8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80144c0:	78bb      	ldrb	r3, [r7, #2]
 80144c2:	883a      	ldrh	r2, [r7, #0]
 80144c4:	78f9      	ldrb	r1, [r7, #3]
 80144c6:	f7f4 ff05 	bl	80092d4 <HAL_PCD_EP_Open>
 80144ca:	4603      	mov	r3, r0
 80144cc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80144ce:	7bbb      	ldrb	r3, [r7, #14]
 80144d0:	2b03      	cmp	r3, #3
 80144d2:	d817      	bhi.n	8014504 <USBD_LL_OpenEP+0x6c>
 80144d4:	a201      	add	r2, pc, #4	; (adr r2, 80144dc <USBD_LL_OpenEP+0x44>)
 80144d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144da:	bf00      	nop
 80144dc:	080144ed 	.word	0x080144ed
 80144e0:	080144f3 	.word	0x080144f3
 80144e4:	080144f9 	.word	0x080144f9
 80144e8:	080144ff 	.word	0x080144ff
    case HAL_OK :
      usb_status = USBD_OK;
 80144ec:	2300      	movs	r3, #0
 80144ee:	73fb      	strb	r3, [r7, #15]
    break;
 80144f0:	e00b      	b.n	801450a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80144f2:	2303      	movs	r3, #3
 80144f4:	73fb      	strb	r3, [r7, #15]
    break;
 80144f6:	e008      	b.n	801450a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80144f8:	2301      	movs	r3, #1
 80144fa:	73fb      	strb	r3, [r7, #15]
    break;
 80144fc:	e005      	b.n	801450a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80144fe:	2303      	movs	r3, #3
 8014500:	73fb      	strb	r3, [r7, #15]
    break;
 8014502:	e002      	b.n	801450a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8014504:	2303      	movs	r3, #3
 8014506:	73fb      	strb	r3, [r7, #15]
    break;
 8014508:	bf00      	nop
  }
  return usb_status;
 801450a:	7bfb      	ldrb	r3, [r7, #15]
}
 801450c:	4618      	mov	r0, r3
 801450e:	3710      	adds	r7, #16
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}

08014514 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b084      	sub	sp, #16
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
 801451c:	460b      	mov	r3, r1
 801451e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014520:	2300      	movs	r3, #0
 8014522:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014524:	2300      	movs	r3, #0
 8014526:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801452e:	78fa      	ldrb	r2, [r7, #3]
 8014530:	4611      	mov	r1, r2
 8014532:	4618      	mov	r0, r3
 8014534:	f7f4 ff2b 	bl	800938e <HAL_PCD_EP_Close>
 8014538:	4603      	mov	r3, r0
 801453a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801453c:	7bbb      	ldrb	r3, [r7, #14]
 801453e:	2b03      	cmp	r3, #3
 8014540:	d816      	bhi.n	8014570 <USBD_LL_CloseEP+0x5c>
 8014542:	a201      	add	r2, pc, #4	; (adr r2, 8014548 <USBD_LL_CloseEP+0x34>)
 8014544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014548:	08014559 	.word	0x08014559
 801454c:	0801455f 	.word	0x0801455f
 8014550:	08014565 	.word	0x08014565
 8014554:	0801456b 	.word	0x0801456b
    case HAL_OK :
      usb_status = USBD_OK;
 8014558:	2300      	movs	r3, #0
 801455a:	73fb      	strb	r3, [r7, #15]
    break;
 801455c:	e00b      	b.n	8014576 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801455e:	2303      	movs	r3, #3
 8014560:	73fb      	strb	r3, [r7, #15]
    break;
 8014562:	e008      	b.n	8014576 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014564:	2301      	movs	r3, #1
 8014566:	73fb      	strb	r3, [r7, #15]
    break;
 8014568:	e005      	b.n	8014576 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801456a:	2303      	movs	r3, #3
 801456c:	73fb      	strb	r3, [r7, #15]
    break;
 801456e:	e002      	b.n	8014576 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014570:	2303      	movs	r3, #3
 8014572:	73fb      	strb	r3, [r7, #15]
    break;
 8014574:	bf00      	nop
  }
  return usb_status;
 8014576:	7bfb      	ldrb	r3, [r7, #15]
}
 8014578:	4618      	mov	r0, r3
 801457a:	3710      	adds	r7, #16
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}

08014580 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b084      	sub	sp, #16
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
 8014588:	460b      	mov	r3, r1
 801458a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801458c:	2300      	movs	r3, #0
 801458e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014590:	2300      	movs	r3, #0
 8014592:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801459a:	78fa      	ldrb	r2, [r7, #3]
 801459c:	4611      	mov	r1, r2
 801459e:	4618      	mov	r0, r3
 80145a0:	f7f4 ffbd 	bl	800951e <HAL_PCD_EP_SetStall>
 80145a4:	4603      	mov	r3, r0
 80145a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80145a8:	7bbb      	ldrb	r3, [r7, #14]
 80145aa:	2b03      	cmp	r3, #3
 80145ac:	d816      	bhi.n	80145dc <USBD_LL_StallEP+0x5c>
 80145ae:	a201      	add	r2, pc, #4	; (adr r2, 80145b4 <USBD_LL_StallEP+0x34>)
 80145b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145b4:	080145c5 	.word	0x080145c5
 80145b8:	080145cb 	.word	0x080145cb
 80145bc:	080145d1 	.word	0x080145d1
 80145c0:	080145d7 	.word	0x080145d7
    case HAL_OK :
      usb_status = USBD_OK;
 80145c4:	2300      	movs	r3, #0
 80145c6:	73fb      	strb	r3, [r7, #15]
    break;
 80145c8:	e00b      	b.n	80145e2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80145ca:	2303      	movs	r3, #3
 80145cc:	73fb      	strb	r3, [r7, #15]
    break;
 80145ce:	e008      	b.n	80145e2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80145d0:	2301      	movs	r3, #1
 80145d2:	73fb      	strb	r3, [r7, #15]
    break;
 80145d4:	e005      	b.n	80145e2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80145d6:	2303      	movs	r3, #3
 80145d8:	73fb      	strb	r3, [r7, #15]
    break;
 80145da:	e002      	b.n	80145e2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80145dc:	2303      	movs	r3, #3
 80145de:	73fb      	strb	r3, [r7, #15]
    break;
 80145e0:	bf00      	nop
  }
  return usb_status;
 80145e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80145e4:	4618      	mov	r0, r3
 80145e6:	3710      	adds	r7, #16
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}

080145ec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b084      	sub	sp, #16
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
 80145f4:	460b      	mov	r3, r1
 80145f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80145f8:	2300      	movs	r3, #0
 80145fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80145fc:	2300      	movs	r3, #0
 80145fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014606:	78fa      	ldrb	r2, [r7, #3]
 8014608:	4611      	mov	r1, r2
 801460a:	4618      	mov	r0, r3
 801460c:	f7f4 ffe7 	bl	80095de <HAL_PCD_EP_ClrStall>
 8014610:	4603      	mov	r3, r0
 8014612:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014614:	7bbb      	ldrb	r3, [r7, #14]
 8014616:	2b03      	cmp	r3, #3
 8014618:	d816      	bhi.n	8014648 <USBD_LL_ClearStallEP+0x5c>
 801461a:	a201      	add	r2, pc, #4	; (adr r2, 8014620 <USBD_LL_ClearStallEP+0x34>)
 801461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014620:	08014631 	.word	0x08014631
 8014624:	08014637 	.word	0x08014637
 8014628:	0801463d 	.word	0x0801463d
 801462c:	08014643 	.word	0x08014643
    case HAL_OK :
      usb_status = USBD_OK;
 8014630:	2300      	movs	r3, #0
 8014632:	73fb      	strb	r3, [r7, #15]
    break;
 8014634:	e00b      	b.n	801464e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014636:	2303      	movs	r3, #3
 8014638:	73fb      	strb	r3, [r7, #15]
    break;
 801463a:	e008      	b.n	801464e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801463c:	2301      	movs	r3, #1
 801463e:	73fb      	strb	r3, [r7, #15]
    break;
 8014640:	e005      	b.n	801464e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014642:	2303      	movs	r3, #3
 8014644:	73fb      	strb	r3, [r7, #15]
    break;
 8014646:	e002      	b.n	801464e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014648:	2303      	movs	r3, #3
 801464a:	73fb      	strb	r3, [r7, #15]
    break;
 801464c:	bf00      	nop
  }
  return usb_status;
 801464e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014650:	4618      	mov	r0, r3
 8014652:	3710      	adds	r7, #16
 8014654:	46bd      	mov	sp, r7
 8014656:	bd80      	pop	{r7, pc}

08014658 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014658:	b480      	push	{r7}
 801465a:	b085      	sub	sp, #20
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
 8014660:	460b      	mov	r3, r1
 8014662:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801466a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801466c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014670:	2b00      	cmp	r3, #0
 8014672:	da0c      	bge.n	801468e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014674:	78fb      	ldrb	r3, [r7, #3]
 8014676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801467a:	68f9      	ldr	r1, [r7, #12]
 801467c:	1c5a      	adds	r2, r3, #1
 801467e:	4613      	mov	r3, r2
 8014680:	009b      	lsls	r3, r3, #2
 8014682:	4413      	add	r3, r2
 8014684:	00db      	lsls	r3, r3, #3
 8014686:	440b      	add	r3, r1
 8014688:	3302      	adds	r3, #2
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	e00b      	b.n	80146a6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801468e:	78fb      	ldrb	r3, [r7, #3]
 8014690:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014694:	68f9      	ldr	r1, [r7, #12]
 8014696:	4613      	mov	r3, r2
 8014698:	009b      	lsls	r3, r3, #2
 801469a:	4413      	add	r3, r2
 801469c:	00db      	lsls	r3, r3, #3
 801469e:	440b      	add	r3, r1
 80146a0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80146a4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80146a6:	4618      	mov	r0, r3
 80146a8:	3714      	adds	r7, #20
 80146aa:	46bd      	mov	sp, r7
 80146ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b0:	4770      	bx	lr
	...

080146b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b084      	sub	sp, #16
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	6078      	str	r0, [r7, #4]
 80146bc:	460b      	mov	r3, r1
 80146be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80146c0:	2300      	movs	r3, #0
 80146c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80146c4:	2300      	movs	r3, #0
 80146c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80146ce:	78fa      	ldrb	r2, [r7, #3]
 80146d0:	4611      	mov	r1, r2
 80146d2:	4618      	mov	r0, r3
 80146d4:	f7f4 fdd9 	bl	800928a <HAL_PCD_SetAddress>
 80146d8:	4603      	mov	r3, r0
 80146da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80146dc:	7bbb      	ldrb	r3, [r7, #14]
 80146de:	2b03      	cmp	r3, #3
 80146e0:	d816      	bhi.n	8014710 <USBD_LL_SetUSBAddress+0x5c>
 80146e2:	a201      	add	r2, pc, #4	; (adr r2, 80146e8 <USBD_LL_SetUSBAddress+0x34>)
 80146e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146e8:	080146f9 	.word	0x080146f9
 80146ec:	080146ff 	.word	0x080146ff
 80146f0:	08014705 	.word	0x08014705
 80146f4:	0801470b 	.word	0x0801470b
    case HAL_OK :
      usb_status = USBD_OK;
 80146f8:	2300      	movs	r3, #0
 80146fa:	73fb      	strb	r3, [r7, #15]
    break;
 80146fc:	e00b      	b.n	8014716 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80146fe:	2303      	movs	r3, #3
 8014700:	73fb      	strb	r3, [r7, #15]
    break;
 8014702:	e008      	b.n	8014716 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014704:	2301      	movs	r3, #1
 8014706:	73fb      	strb	r3, [r7, #15]
    break;
 8014708:	e005      	b.n	8014716 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801470a:	2303      	movs	r3, #3
 801470c:	73fb      	strb	r3, [r7, #15]
    break;
 801470e:	e002      	b.n	8014716 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8014710:	2303      	movs	r3, #3
 8014712:	73fb      	strb	r3, [r7, #15]
    break;
 8014714:	bf00      	nop
  }
  return usb_status;
 8014716:	7bfb      	ldrb	r3, [r7, #15]
}
 8014718:	4618      	mov	r0, r3
 801471a:	3710      	adds	r7, #16
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}

08014720 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b086      	sub	sp, #24
 8014724:	af00      	add	r7, sp, #0
 8014726:	60f8      	str	r0, [r7, #12]
 8014728:	607a      	str	r2, [r7, #4]
 801472a:	603b      	str	r3, [r7, #0]
 801472c:	460b      	mov	r3, r1
 801472e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014730:	2300      	movs	r3, #0
 8014732:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014734:	2300      	movs	r3, #0
 8014736:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801473e:	7af9      	ldrb	r1, [r7, #11]
 8014740:	683b      	ldr	r3, [r7, #0]
 8014742:	687a      	ldr	r2, [r7, #4]
 8014744:	f7f4 feb4 	bl	80094b0 <HAL_PCD_EP_Transmit>
 8014748:	4603      	mov	r3, r0
 801474a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801474c:	7dbb      	ldrb	r3, [r7, #22]
 801474e:	2b03      	cmp	r3, #3
 8014750:	d816      	bhi.n	8014780 <USBD_LL_Transmit+0x60>
 8014752:	a201      	add	r2, pc, #4	; (adr r2, 8014758 <USBD_LL_Transmit+0x38>)
 8014754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014758:	08014769 	.word	0x08014769
 801475c:	0801476f 	.word	0x0801476f
 8014760:	08014775 	.word	0x08014775
 8014764:	0801477b 	.word	0x0801477b
    case HAL_OK :
      usb_status = USBD_OK;
 8014768:	2300      	movs	r3, #0
 801476a:	75fb      	strb	r3, [r7, #23]
    break;
 801476c:	e00b      	b.n	8014786 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801476e:	2303      	movs	r3, #3
 8014770:	75fb      	strb	r3, [r7, #23]
    break;
 8014772:	e008      	b.n	8014786 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014774:	2301      	movs	r3, #1
 8014776:	75fb      	strb	r3, [r7, #23]
    break;
 8014778:	e005      	b.n	8014786 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801477a:	2303      	movs	r3, #3
 801477c:	75fb      	strb	r3, [r7, #23]
    break;
 801477e:	e002      	b.n	8014786 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8014780:	2303      	movs	r3, #3
 8014782:	75fb      	strb	r3, [r7, #23]
    break;
 8014784:	bf00      	nop
  }
  return usb_status;
 8014786:	7dfb      	ldrb	r3, [r7, #23]
}
 8014788:	4618      	mov	r0, r3
 801478a:	3718      	adds	r7, #24
 801478c:	46bd      	mov	sp, r7
 801478e:	bd80      	pop	{r7, pc}

08014790 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b086      	sub	sp, #24
 8014794:	af00      	add	r7, sp, #0
 8014796:	60f8      	str	r0, [r7, #12]
 8014798:	607a      	str	r2, [r7, #4]
 801479a:	603b      	str	r3, [r7, #0]
 801479c:	460b      	mov	r3, r1
 801479e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80147a0:	2300      	movs	r3, #0
 80147a2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80147a4:	2300      	movs	r3, #0
 80147a6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80147ae:	7af9      	ldrb	r1, [r7, #11]
 80147b0:	683b      	ldr	r3, [r7, #0]
 80147b2:	687a      	ldr	r2, [r7, #4]
 80147b4:	f7f4 fe33 	bl	800941e <HAL_PCD_EP_Receive>
 80147b8:	4603      	mov	r3, r0
 80147ba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80147bc:	7dbb      	ldrb	r3, [r7, #22]
 80147be:	2b03      	cmp	r3, #3
 80147c0:	d816      	bhi.n	80147f0 <USBD_LL_PrepareReceive+0x60>
 80147c2:	a201      	add	r2, pc, #4	; (adr r2, 80147c8 <USBD_LL_PrepareReceive+0x38>)
 80147c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147c8:	080147d9 	.word	0x080147d9
 80147cc:	080147df 	.word	0x080147df
 80147d0:	080147e5 	.word	0x080147e5
 80147d4:	080147eb 	.word	0x080147eb
    case HAL_OK :
      usb_status = USBD_OK;
 80147d8:	2300      	movs	r3, #0
 80147da:	75fb      	strb	r3, [r7, #23]
    break;
 80147dc:	e00b      	b.n	80147f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80147de:	2303      	movs	r3, #3
 80147e0:	75fb      	strb	r3, [r7, #23]
    break;
 80147e2:	e008      	b.n	80147f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80147e4:	2301      	movs	r3, #1
 80147e6:	75fb      	strb	r3, [r7, #23]
    break;
 80147e8:	e005      	b.n	80147f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80147ea:	2303      	movs	r3, #3
 80147ec:	75fb      	strb	r3, [r7, #23]
    break;
 80147ee:	e002      	b.n	80147f6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80147f0:	2303      	movs	r3, #3
 80147f2:	75fb      	strb	r3, [r7, #23]
    break;
 80147f4:	bf00      	nop
  }
  return usb_status;
 80147f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80147f8:	4618      	mov	r0, r3
 80147fa:	3718      	adds	r7, #24
 80147fc:	46bd      	mov	sp, r7
 80147fe:	bd80      	pop	{r7, pc}

08014800 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b082      	sub	sp, #8
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
 8014808:	460b      	mov	r3, r1
 801480a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014812:	78fa      	ldrb	r2, [r7, #3]
 8014814:	4611      	mov	r1, r2
 8014816:	4618      	mov	r0, r3
 8014818:	f7f4 fe32 	bl	8009480 <HAL_PCD_EP_GetRxCount>
 801481c:	4603      	mov	r3, r0
}
 801481e:	4618      	mov	r0, r3
 8014820:	3708      	adds	r7, #8
 8014822:	46bd      	mov	sp, r7
 8014824:	bd80      	pop	{r7, pc}
	...

08014828 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	460b      	mov	r3, r1
 8014832:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8014834:	78fb      	ldrb	r3, [r7, #3]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d002      	beq.n	8014840 <HAL_PCDEx_LPM_Callback+0x18>
 801483a:	2b01      	cmp	r3, #1
 801483c:	d013      	beq.n	8014866 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801483e:	e023      	b.n	8014888 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	699b      	ldr	r3, [r3, #24]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d007      	beq.n	8014858 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8014848:	f000 f83c 	bl	80148c4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801484c:	4b10      	ldr	r3, [pc, #64]	; (8014890 <HAL_PCDEx_LPM_Callback+0x68>)
 801484e:	691b      	ldr	r3, [r3, #16]
 8014850:	4a0f      	ldr	r2, [pc, #60]	; (8014890 <HAL_PCDEx_LPM_Callback+0x68>)
 8014852:	f023 0306 	bic.w	r3, r3, #6
 8014856:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801485e:	4618      	mov	r0, r3
 8014860:	f7fd fdaf 	bl	80123c2 <USBD_LL_Resume>
    break;
 8014864:	e010      	b.n	8014888 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801486c:	4618      	mov	r0, r3
 801486e:	f7fd fd8c 	bl	801238a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	699b      	ldr	r3, [r3, #24]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d005      	beq.n	8014886 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801487a:	4b05      	ldr	r3, [pc, #20]	; (8014890 <HAL_PCDEx_LPM_Callback+0x68>)
 801487c:	691b      	ldr	r3, [r3, #16]
 801487e:	4a04      	ldr	r2, [pc, #16]	; (8014890 <HAL_PCDEx_LPM_Callback+0x68>)
 8014880:	f043 0306 	orr.w	r3, r3, #6
 8014884:	6113      	str	r3, [r2, #16]
    break;
 8014886:	bf00      	nop
}
 8014888:	bf00      	nop
 801488a:	3708      	adds	r7, #8
 801488c:	46bd      	mov	sp, r7
 801488e:	bd80      	pop	{r7, pc}
 8014890:	e000ed00 	.word	0xe000ed00

08014894 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014894:	b480      	push	{r7}
 8014896:	b083      	sub	sp, #12
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801489c:	4b03      	ldr	r3, [pc, #12]	; (80148ac <USBD_static_malloc+0x18>)
}
 801489e:	4618      	mov	r0, r3
 80148a0:	370c      	adds	r7, #12
 80148a2:	46bd      	mov	sp, r7
 80148a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a8:	4770      	bx	lr
 80148aa:	bf00      	nop
 80148ac:	20002240 	.word	0x20002240

080148b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80148b0:	b480      	push	{r7}
 80148b2:	b083      	sub	sp, #12
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]

}
 80148b8:	bf00      	nop
 80148ba:	370c      	adds	r7, #12
 80148bc:	46bd      	mov	sp, r7
 80148be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c2:	4770      	bx	lr

080148c4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80148c8:	f7ed f862 	bl	8001990 <SystemClock_Config>
}
 80148cc:	bf00      	nop
 80148ce:	bd80      	pop	{r7, pc}

080148d0 <atoi>:
 80148d0:	220a      	movs	r2, #10
 80148d2:	2100      	movs	r1, #0
 80148d4:	f000 bfb8 	b.w	8015848 <strtol>

080148d8 <malloc>:
 80148d8:	4b02      	ldr	r3, [pc, #8]	; (80148e4 <malloc+0xc>)
 80148da:	4601      	mov	r1, r0
 80148dc:	6818      	ldr	r0, [r3, #0]
 80148de:	f000 b82b 	b.w	8014938 <_malloc_r>
 80148e2:	bf00      	nop
 80148e4:	200002f4 	.word	0x200002f4

080148e8 <free>:
 80148e8:	4b02      	ldr	r3, [pc, #8]	; (80148f4 <free+0xc>)
 80148ea:	4601      	mov	r1, r0
 80148ec:	6818      	ldr	r0, [r3, #0]
 80148ee:	f002 bf55 	b.w	801779c <_free_r>
 80148f2:	bf00      	nop
 80148f4:	200002f4 	.word	0x200002f4

080148f8 <sbrk_aligned>:
 80148f8:	b570      	push	{r4, r5, r6, lr}
 80148fa:	4e0e      	ldr	r6, [pc, #56]	; (8014934 <sbrk_aligned+0x3c>)
 80148fc:	460c      	mov	r4, r1
 80148fe:	6831      	ldr	r1, [r6, #0]
 8014900:	4605      	mov	r5, r0
 8014902:	b911      	cbnz	r1, 801490a <sbrk_aligned+0x12>
 8014904:	f002 f83e 	bl	8016984 <_sbrk_r>
 8014908:	6030      	str	r0, [r6, #0]
 801490a:	4621      	mov	r1, r4
 801490c:	4628      	mov	r0, r5
 801490e:	f002 f839 	bl	8016984 <_sbrk_r>
 8014912:	1c43      	adds	r3, r0, #1
 8014914:	d00a      	beq.n	801492c <sbrk_aligned+0x34>
 8014916:	1cc4      	adds	r4, r0, #3
 8014918:	f024 0403 	bic.w	r4, r4, #3
 801491c:	42a0      	cmp	r0, r4
 801491e:	d007      	beq.n	8014930 <sbrk_aligned+0x38>
 8014920:	1a21      	subs	r1, r4, r0
 8014922:	4628      	mov	r0, r5
 8014924:	f002 f82e 	bl	8016984 <_sbrk_r>
 8014928:	3001      	adds	r0, #1
 801492a:	d101      	bne.n	8014930 <sbrk_aligned+0x38>
 801492c:	f04f 34ff 	mov.w	r4, #4294967295
 8014930:	4620      	mov	r0, r4
 8014932:	bd70      	pop	{r4, r5, r6, pc}
 8014934:	20002464 	.word	0x20002464

08014938 <_malloc_r>:
 8014938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801493c:	1ccd      	adds	r5, r1, #3
 801493e:	f025 0503 	bic.w	r5, r5, #3
 8014942:	3508      	adds	r5, #8
 8014944:	2d0c      	cmp	r5, #12
 8014946:	bf38      	it	cc
 8014948:	250c      	movcc	r5, #12
 801494a:	2d00      	cmp	r5, #0
 801494c:	4607      	mov	r7, r0
 801494e:	db01      	blt.n	8014954 <_malloc_r+0x1c>
 8014950:	42a9      	cmp	r1, r5
 8014952:	d905      	bls.n	8014960 <_malloc_r+0x28>
 8014954:	230c      	movs	r3, #12
 8014956:	603b      	str	r3, [r7, #0]
 8014958:	2600      	movs	r6, #0
 801495a:	4630      	mov	r0, r6
 801495c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014960:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014a34 <_malloc_r+0xfc>
 8014964:	f000 f868 	bl	8014a38 <__malloc_lock>
 8014968:	f8d8 3000 	ldr.w	r3, [r8]
 801496c:	461c      	mov	r4, r3
 801496e:	bb5c      	cbnz	r4, 80149c8 <_malloc_r+0x90>
 8014970:	4629      	mov	r1, r5
 8014972:	4638      	mov	r0, r7
 8014974:	f7ff ffc0 	bl	80148f8 <sbrk_aligned>
 8014978:	1c43      	adds	r3, r0, #1
 801497a:	4604      	mov	r4, r0
 801497c:	d155      	bne.n	8014a2a <_malloc_r+0xf2>
 801497e:	f8d8 4000 	ldr.w	r4, [r8]
 8014982:	4626      	mov	r6, r4
 8014984:	2e00      	cmp	r6, #0
 8014986:	d145      	bne.n	8014a14 <_malloc_r+0xdc>
 8014988:	2c00      	cmp	r4, #0
 801498a:	d048      	beq.n	8014a1e <_malloc_r+0xe6>
 801498c:	6823      	ldr	r3, [r4, #0]
 801498e:	4631      	mov	r1, r6
 8014990:	4638      	mov	r0, r7
 8014992:	eb04 0903 	add.w	r9, r4, r3
 8014996:	f001 fff5 	bl	8016984 <_sbrk_r>
 801499a:	4581      	cmp	r9, r0
 801499c:	d13f      	bne.n	8014a1e <_malloc_r+0xe6>
 801499e:	6821      	ldr	r1, [r4, #0]
 80149a0:	1a6d      	subs	r5, r5, r1
 80149a2:	4629      	mov	r1, r5
 80149a4:	4638      	mov	r0, r7
 80149a6:	f7ff ffa7 	bl	80148f8 <sbrk_aligned>
 80149aa:	3001      	adds	r0, #1
 80149ac:	d037      	beq.n	8014a1e <_malloc_r+0xe6>
 80149ae:	6823      	ldr	r3, [r4, #0]
 80149b0:	442b      	add	r3, r5
 80149b2:	6023      	str	r3, [r4, #0]
 80149b4:	f8d8 3000 	ldr.w	r3, [r8]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d038      	beq.n	8014a2e <_malloc_r+0xf6>
 80149bc:	685a      	ldr	r2, [r3, #4]
 80149be:	42a2      	cmp	r2, r4
 80149c0:	d12b      	bne.n	8014a1a <_malloc_r+0xe2>
 80149c2:	2200      	movs	r2, #0
 80149c4:	605a      	str	r2, [r3, #4]
 80149c6:	e00f      	b.n	80149e8 <_malloc_r+0xb0>
 80149c8:	6822      	ldr	r2, [r4, #0]
 80149ca:	1b52      	subs	r2, r2, r5
 80149cc:	d41f      	bmi.n	8014a0e <_malloc_r+0xd6>
 80149ce:	2a0b      	cmp	r2, #11
 80149d0:	d917      	bls.n	8014a02 <_malloc_r+0xca>
 80149d2:	1961      	adds	r1, r4, r5
 80149d4:	42a3      	cmp	r3, r4
 80149d6:	6025      	str	r5, [r4, #0]
 80149d8:	bf18      	it	ne
 80149da:	6059      	strne	r1, [r3, #4]
 80149dc:	6863      	ldr	r3, [r4, #4]
 80149de:	bf08      	it	eq
 80149e0:	f8c8 1000 	streq.w	r1, [r8]
 80149e4:	5162      	str	r2, [r4, r5]
 80149e6:	604b      	str	r3, [r1, #4]
 80149e8:	4638      	mov	r0, r7
 80149ea:	f104 060b 	add.w	r6, r4, #11
 80149ee:	f000 f829 	bl	8014a44 <__malloc_unlock>
 80149f2:	f026 0607 	bic.w	r6, r6, #7
 80149f6:	1d23      	adds	r3, r4, #4
 80149f8:	1af2      	subs	r2, r6, r3
 80149fa:	d0ae      	beq.n	801495a <_malloc_r+0x22>
 80149fc:	1b9b      	subs	r3, r3, r6
 80149fe:	50a3      	str	r3, [r4, r2]
 8014a00:	e7ab      	b.n	801495a <_malloc_r+0x22>
 8014a02:	42a3      	cmp	r3, r4
 8014a04:	6862      	ldr	r2, [r4, #4]
 8014a06:	d1dd      	bne.n	80149c4 <_malloc_r+0x8c>
 8014a08:	f8c8 2000 	str.w	r2, [r8]
 8014a0c:	e7ec      	b.n	80149e8 <_malloc_r+0xb0>
 8014a0e:	4623      	mov	r3, r4
 8014a10:	6864      	ldr	r4, [r4, #4]
 8014a12:	e7ac      	b.n	801496e <_malloc_r+0x36>
 8014a14:	4634      	mov	r4, r6
 8014a16:	6876      	ldr	r6, [r6, #4]
 8014a18:	e7b4      	b.n	8014984 <_malloc_r+0x4c>
 8014a1a:	4613      	mov	r3, r2
 8014a1c:	e7cc      	b.n	80149b8 <_malloc_r+0x80>
 8014a1e:	230c      	movs	r3, #12
 8014a20:	603b      	str	r3, [r7, #0]
 8014a22:	4638      	mov	r0, r7
 8014a24:	f000 f80e 	bl	8014a44 <__malloc_unlock>
 8014a28:	e797      	b.n	801495a <_malloc_r+0x22>
 8014a2a:	6025      	str	r5, [r4, #0]
 8014a2c:	e7dc      	b.n	80149e8 <_malloc_r+0xb0>
 8014a2e:	605b      	str	r3, [r3, #4]
 8014a30:	deff      	udf	#255	; 0xff
 8014a32:	bf00      	nop
 8014a34:	20002460 	.word	0x20002460

08014a38 <__malloc_lock>:
 8014a38:	4801      	ldr	r0, [pc, #4]	; (8014a40 <__malloc_lock+0x8>)
 8014a3a:	f001 bff0 	b.w	8016a1e <__retarget_lock_acquire_recursive>
 8014a3e:	bf00      	nop
 8014a40:	200025a8 	.word	0x200025a8

08014a44 <__malloc_unlock>:
 8014a44:	4801      	ldr	r0, [pc, #4]	; (8014a4c <__malloc_unlock+0x8>)
 8014a46:	f001 bfeb 	b.w	8016a20 <__retarget_lock_release_recursive>
 8014a4a:	bf00      	nop
 8014a4c:	200025a8 	.word	0x200025a8

08014a50 <sulp>:
 8014a50:	b570      	push	{r4, r5, r6, lr}
 8014a52:	4604      	mov	r4, r0
 8014a54:	460d      	mov	r5, r1
 8014a56:	ec45 4b10 	vmov	d0, r4, r5
 8014a5a:	4616      	mov	r6, r2
 8014a5c:	f003 fdc0 	bl	80185e0 <__ulp>
 8014a60:	ec51 0b10 	vmov	r0, r1, d0
 8014a64:	b17e      	cbz	r6, 8014a86 <sulp+0x36>
 8014a66:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014a6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	dd09      	ble.n	8014a86 <sulp+0x36>
 8014a72:	051b      	lsls	r3, r3, #20
 8014a74:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014a78:	2400      	movs	r4, #0
 8014a7a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014a7e:	4622      	mov	r2, r4
 8014a80:	462b      	mov	r3, r5
 8014a82:	f7eb fdb9 	bl	80005f8 <__aeabi_dmul>
 8014a86:	bd70      	pop	{r4, r5, r6, pc}

08014a88 <_strtod_l>:
 8014a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a8c:	ed2d 8b02 	vpush	{d8}
 8014a90:	b09b      	sub	sp, #108	; 0x6c
 8014a92:	4604      	mov	r4, r0
 8014a94:	9213      	str	r2, [sp, #76]	; 0x4c
 8014a96:	2200      	movs	r2, #0
 8014a98:	9216      	str	r2, [sp, #88]	; 0x58
 8014a9a:	460d      	mov	r5, r1
 8014a9c:	f04f 0800 	mov.w	r8, #0
 8014aa0:	f04f 0900 	mov.w	r9, #0
 8014aa4:	460a      	mov	r2, r1
 8014aa6:	9215      	str	r2, [sp, #84]	; 0x54
 8014aa8:	7811      	ldrb	r1, [r2, #0]
 8014aaa:	292b      	cmp	r1, #43	; 0x2b
 8014aac:	d04c      	beq.n	8014b48 <_strtod_l+0xc0>
 8014aae:	d83a      	bhi.n	8014b26 <_strtod_l+0x9e>
 8014ab0:	290d      	cmp	r1, #13
 8014ab2:	d834      	bhi.n	8014b1e <_strtod_l+0x96>
 8014ab4:	2908      	cmp	r1, #8
 8014ab6:	d834      	bhi.n	8014b22 <_strtod_l+0x9a>
 8014ab8:	2900      	cmp	r1, #0
 8014aba:	d03d      	beq.n	8014b38 <_strtod_l+0xb0>
 8014abc:	2200      	movs	r2, #0
 8014abe:	920a      	str	r2, [sp, #40]	; 0x28
 8014ac0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8014ac2:	7832      	ldrb	r2, [r6, #0]
 8014ac4:	2a30      	cmp	r2, #48	; 0x30
 8014ac6:	f040 80b4 	bne.w	8014c32 <_strtod_l+0x1aa>
 8014aca:	7872      	ldrb	r2, [r6, #1]
 8014acc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8014ad0:	2a58      	cmp	r2, #88	; 0x58
 8014ad2:	d170      	bne.n	8014bb6 <_strtod_l+0x12e>
 8014ad4:	9302      	str	r3, [sp, #8]
 8014ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ad8:	9301      	str	r3, [sp, #4]
 8014ada:	ab16      	add	r3, sp, #88	; 0x58
 8014adc:	9300      	str	r3, [sp, #0]
 8014ade:	4a8e      	ldr	r2, [pc, #568]	; (8014d18 <_strtod_l+0x290>)
 8014ae0:	ab17      	add	r3, sp, #92	; 0x5c
 8014ae2:	a915      	add	r1, sp, #84	; 0x54
 8014ae4:	4620      	mov	r0, r4
 8014ae6:	f002 ff0d 	bl	8017904 <__gethex>
 8014aea:	f010 070f 	ands.w	r7, r0, #15
 8014aee:	4605      	mov	r5, r0
 8014af0:	d005      	beq.n	8014afe <_strtod_l+0x76>
 8014af2:	2f06      	cmp	r7, #6
 8014af4:	d12a      	bne.n	8014b4c <_strtod_l+0xc4>
 8014af6:	3601      	adds	r6, #1
 8014af8:	2300      	movs	r3, #0
 8014afa:	9615      	str	r6, [sp, #84]	; 0x54
 8014afc:	930a      	str	r3, [sp, #40]	; 0x28
 8014afe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	f040 857f 	bne.w	8015604 <_strtod_l+0xb7c>
 8014b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b08:	b1db      	cbz	r3, 8014b42 <_strtod_l+0xba>
 8014b0a:	4642      	mov	r2, r8
 8014b0c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014b10:	ec43 2b10 	vmov	d0, r2, r3
 8014b14:	b01b      	add	sp, #108	; 0x6c
 8014b16:	ecbd 8b02 	vpop	{d8}
 8014b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b1e:	2920      	cmp	r1, #32
 8014b20:	d1cc      	bne.n	8014abc <_strtod_l+0x34>
 8014b22:	3201      	adds	r2, #1
 8014b24:	e7bf      	b.n	8014aa6 <_strtod_l+0x1e>
 8014b26:	292d      	cmp	r1, #45	; 0x2d
 8014b28:	d1c8      	bne.n	8014abc <_strtod_l+0x34>
 8014b2a:	2101      	movs	r1, #1
 8014b2c:	910a      	str	r1, [sp, #40]	; 0x28
 8014b2e:	1c51      	adds	r1, r2, #1
 8014b30:	9115      	str	r1, [sp, #84]	; 0x54
 8014b32:	7852      	ldrb	r2, [r2, #1]
 8014b34:	2a00      	cmp	r2, #0
 8014b36:	d1c3      	bne.n	8014ac0 <_strtod_l+0x38>
 8014b38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b3a:	9515      	str	r5, [sp, #84]	; 0x54
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	f040 855f 	bne.w	8015600 <_strtod_l+0xb78>
 8014b42:	4642      	mov	r2, r8
 8014b44:	464b      	mov	r3, r9
 8014b46:	e7e3      	b.n	8014b10 <_strtod_l+0x88>
 8014b48:	2100      	movs	r1, #0
 8014b4a:	e7ef      	b.n	8014b2c <_strtod_l+0xa4>
 8014b4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014b4e:	b13a      	cbz	r2, 8014b60 <_strtod_l+0xd8>
 8014b50:	2135      	movs	r1, #53	; 0x35
 8014b52:	a818      	add	r0, sp, #96	; 0x60
 8014b54:	f003 fe41 	bl	80187da <__copybits>
 8014b58:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014b5a:	4620      	mov	r0, r4
 8014b5c:	f003 fa14 	bl	8017f88 <_Bfree>
 8014b60:	3f01      	subs	r7, #1
 8014b62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014b64:	2f04      	cmp	r7, #4
 8014b66:	d806      	bhi.n	8014b76 <_strtod_l+0xee>
 8014b68:	e8df f007 	tbb	[pc, r7]
 8014b6c:	201d0314 	.word	0x201d0314
 8014b70:	14          	.byte	0x14
 8014b71:	00          	.byte	0x00
 8014b72:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8014b76:	05e9      	lsls	r1, r5, #23
 8014b78:	bf48      	it	mi
 8014b7a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8014b7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014b82:	0d1b      	lsrs	r3, r3, #20
 8014b84:	051b      	lsls	r3, r3, #20
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d1b9      	bne.n	8014afe <_strtod_l+0x76>
 8014b8a:	f001 ff1d 	bl	80169c8 <__errno>
 8014b8e:	2322      	movs	r3, #34	; 0x22
 8014b90:	6003      	str	r3, [r0, #0]
 8014b92:	e7b4      	b.n	8014afe <_strtod_l+0x76>
 8014b94:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8014b98:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014b9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014ba0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014ba4:	e7e7      	b.n	8014b76 <_strtod_l+0xee>
 8014ba6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014d20 <_strtod_l+0x298>
 8014baa:	e7e4      	b.n	8014b76 <_strtod_l+0xee>
 8014bac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014bb0:	f04f 38ff 	mov.w	r8, #4294967295
 8014bb4:	e7df      	b.n	8014b76 <_strtod_l+0xee>
 8014bb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014bb8:	1c5a      	adds	r2, r3, #1
 8014bba:	9215      	str	r2, [sp, #84]	; 0x54
 8014bbc:	785b      	ldrb	r3, [r3, #1]
 8014bbe:	2b30      	cmp	r3, #48	; 0x30
 8014bc0:	d0f9      	beq.n	8014bb6 <_strtod_l+0x12e>
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d09b      	beq.n	8014afe <_strtod_l+0x76>
 8014bc6:	2301      	movs	r3, #1
 8014bc8:	f04f 0a00 	mov.w	sl, #0
 8014bcc:	9304      	str	r3, [sp, #16]
 8014bce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014bd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8014bd2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014bd6:	46d3      	mov	fp, sl
 8014bd8:	220a      	movs	r2, #10
 8014bda:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014bdc:	7806      	ldrb	r6, [r0, #0]
 8014bde:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014be2:	b2d9      	uxtb	r1, r3
 8014be4:	2909      	cmp	r1, #9
 8014be6:	d926      	bls.n	8014c36 <_strtod_l+0x1ae>
 8014be8:	494c      	ldr	r1, [pc, #304]	; (8014d1c <_strtod_l+0x294>)
 8014bea:	2201      	movs	r2, #1
 8014bec:	f001 fe0d 	bl	801680a <strncmp>
 8014bf0:	2800      	cmp	r0, #0
 8014bf2:	d030      	beq.n	8014c56 <_strtod_l+0x1ce>
 8014bf4:	2000      	movs	r0, #0
 8014bf6:	4632      	mov	r2, r6
 8014bf8:	9005      	str	r0, [sp, #20]
 8014bfa:	465e      	mov	r6, fp
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	2a65      	cmp	r2, #101	; 0x65
 8014c00:	d001      	beq.n	8014c06 <_strtod_l+0x17e>
 8014c02:	2a45      	cmp	r2, #69	; 0x45
 8014c04:	d113      	bne.n	8014c2e <_strtod_l+0x1a6>
 8014c06:	b91e      	cbnz	r6, 8014c10 <_strtod_l+0x188>
 8014c08:	9a04      	ldr	r2, [sp, #16]
 8014c0a:	4302      	orrs	r2, r0
 8014c0c:	d094      	beq.n	8014b38 <_strtod_l+0xb0>
 8014c0e:	2600      	movs	r6, #0
 8014c10:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014c12:	1c6a      	adds	r2, r5, #1
 8014c14:	9215      	str	r2, [sp, #84]	; 0x54
 8014c16:	786a      	ldrb	r2, [r5, #1]
 8014c18:	2a2b      	cmp	r2, #43	; 0x2b
 8014c1a:	d074      	beq.n	8014d06 <_strtod_l+0x27e>
 8014c1c:	2a2d      	cmp	r2, #45	; 0x2d
 8014c1e:	d078      	beq.n	8014d12 <_strtod_l+0x28a>
 8014c20:	f04f 0c00 	mov.w	ip, #0
 8014c24:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014c28:	2909      	cmp	r1, #9
 8014c2a:	d97f      	bls.n	8014d2c <_strtod_l+0x2a4>
 8014c2c:	9515      	str	r5, [sp, #84]	; 0x54
 8014c2e:	2700      	movs	r7, #0
 8014c30:	e09e      	b.n	8014d70 <_strtod_l+0x2e8>
 8014c32:	2300      	movs	r3, #0
 8014c34:	e7c8      	b.n	8014bc8 <_strtod_l+0x140>
 8014c36:	f1bb 0f08 	cmp.w	fp, #8
 8014c3a:	bfd8      	it	le
 8014c3c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014c3e:	f100 0001 	add.w	r0, r0, #1
 8014c42:	bfda      	itte	le
 8014c44:	fb02 3301 	mlale	r3, r2, r1, r3
 8014c48:	9309      	strle	r3, [sp, #36]	; 0x24
 8014c4a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014c4e:	f10b 0b01 	add.w	fp, fp, #1
 8014c52:	9015      	str	r0, [sp, #84]	; 0x54
 8014c54:	e7c1      	b.n	8014bda <_strtod_l+0x152>
 8014c56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c58:	1c5a      	adds	r2, r3, #1
 8014c5a:	9215      	str	r2, [sp, #84]	; 0x54
 8014c5c:	785a      	ldrb	r2, [r3, #1]
 8014c5e:	f1bb 0f00 	cmp.w	fp, #0
 8014c62:	d037      	beq.n	8014cd4 <_strtod_l+0x24c>
 8014c64:	9005      	str	r0, [sp, #20]
 8014c66:	465e      	mov	r6, fp
 8014c68:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014c6c:	2b09      	cmp	r3, #9
 8014c6e:	d912      	bls.n	8014c96 <_strtod_l+0x20e>
 8014c70:	2301      	movs	r3, #1
 8014c72:	e7c4      	b.n	8014bfe <_strtod_l+0x176>
 8014c74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c76:	1c5a      	adds	r2, r3, #1
 8014c78:	9215      	str	r2, [sp, #84]	; 0x54
 8014c7a:	785a      	ldrb	r2, [r3, #1]
 8014c7c:	3001      	adds	r0, #1
 8014c7e:	2a30      	cmp	r2, #48	; 0x30
 8014c80:	d0f8      	beq.n	8014c74 <_strtod_l+0x1ec>
 8014c82:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014c86:	2b08      	cmp	r3, #8
 8014c88:	f200 84c1 	bhi.w	801560e <_strtod_l+0xb86>
 8014c8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c8e:	9005      	str	r0, [sp, #20]
 8014c90:	2000      	movs	r0, #0
 8014c92:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c94:	4606      	mov	r6, r0
 8014c96:	3a30      	subs	r2, #48	; 0x30
 8014c98:	f100 0301 	add.w	r3, r0, #1
 8014c9c:	d014      	beq.n	8014cc8 <_strtod_l+0x240>
 8014c9e:	9905      	ldr	r1, [sp, #20]
 8014ca0:	4419      	add	r1, r3
 8014ca2:	9105      	str	r1, [sp, #20]
 8014ca4:	4633      	mov	r3, r6
 8014ca6:	eb00 0c06 	add.w	ip, r0, r6
 8014caa:	210a      	movs	r1, #10
 8014cac:	4563      	cmp	r3, ip
 8014cae:	d113      	bne.n	8014cd8 <_strtod_l+0x250>
 8014cb0:	1833      	adds	r3, r6, r0
 8014cb2:	2b08      	cmp	r3, #8
 8014cb4:	f106 0601 	add.w	r6, r6, #1
 8014cb8:	4406      	add	r6, r0
 8014cba:	dc1a      	bgt.n	8014cf2 <_strtod_l+0x26a>
 8014cbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014cbe:	230a      	movs	r3, #10
 8014cc0:	fb03 2301 	mla	r3, r3, r1, r2
 8014cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014cca:	1c51      	adds	r1, r2, #1
 8014ccc:	9115      	str	r1, [sp, #84]	; 0x54
 8014cce:	7852      	ldrb	r2, [r2, #1]
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	e7c9      	b.n	8014c68 <_strtod_l+0x1e0>
 8014cd4:	4658      	mov	r0, fp
 8014cd6:	e7d2      	b.n	8014c7e <_strtod_l+0x1f6>
 8014cd8:	2b08      	cmp	r3, #8
 8014cda:	f103 0301 	add.w	r3, r3, #1
 8014cde:	dc03      	bgt.n	8014ce8 <_strtod_l+0x260>
 8014ce0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014ce2:	434f      	muls	r7, r1
 8014ce4:	9709      	str	r7, [sp, #36]	; 0x24
 8014ce6:	e7e1      	b.n	8014cac <_strtod_l+0x224>
 8014ce8:	2b10      	cmp	r3, #16
 8014cea:	bfd8      	it	le
 8014cec:	fb01 fa0a 	mulle.w	sl, r1, sl
 8014cf0:	e7dc      	b.n	8014cac <_strtod_l+0x224>
 8014cf2:	2e10      	cmp	r6, #16
 8014cf4:	bfdc      	itt	le
 8014cf6:	230a      	movle	r3, #10
 8014cf8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8014cfc:	e7e3      	b.n	8014cc6 <_strtod_l+0x23e>
 8014cfe:	2300      	movs	r3, #0
 8014d00:	9305      	str	r3, [sp, #20]
 8014d02:	2301      	movs	r3, #1
 8014d04:	e780      	b.n	8014c08 <_strtod_l+0x180>
 8014d06:	f04f 0c00 	mov.w	ip, #0
 8014d0a:	1caa      	adds	r2, r5, #2
 8014d0c:	9215      	str	r2, [sp, #84]	; 0x54
 8014d0e:	78aa      	ldrb	r2, [r5, #2]
 8014d10:	e788      	b.n	8014c24 <_strtod_l+0x19c>
 8014d12:	f04f 0c01 	mov.w	ip, #1
 8014d16:	e7f8      	b.n	8014d0a <_strtod_l+0x282>
 8014d18:	0801ccf8 	.word	0x0801ccf8
 8014d1c:	0801ccf4 	.word	0x0801ccf4
 8014d20:	7ff00000 	.word	0x7ff00000
 8014d24:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d26:	1c51      	adds	r1, r2, #1
 8014d28:	9115      	str	r1, [sp, #84]	; 0x54
 8014d2a:	7852      	ldrb	r2, [r2, #1]
 8014d2c:	2a30      	cmp	r2, #48	; 0x30
 8014d2e:	d0f9      	beq.n	8014d24 <_strtod_l+0x29c>
 8014d30:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014d34:	2908      	cmp	r1, #8
 8014d36:	f63f af7a 	bhi.w	8014c2e <_strtod_l+0x1a6>
 8014d3a:	3a30      	subs	r2, #48	; 0x30
 8014d3c:	9208      	str	r2, [sp, #32]
 8014d3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d40:	920c      	str	r2, [sp, #48]	; 0x30
 8014d42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d44:	1c57      	adds	r7, r2, #1
 8014d46:	9715      	str	r7, [sp, #84]	; 0x54
 8014d48:	7852      	ldrb	r2, [r2, #1]
 8014d4a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014d4e:	f1be 0f09 	cmp.w	lr, #9
 8014d52:	d938      	bls.n	8014dc6 <_strtod_l+0x33e>
 8014d54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014d56:	1a7f      	subs	r7, r7, r1
 8014d58:	2f08      	cmp	r7, #8
 8014d5a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014d5e:	dc03      	bgt.n	8014d68 <_strtod_l+0x2e0>
 8014d60:	9908      	ldr	r1, [sp, #32]
 8014d62:	428f      	cmp	r7, r1
 8014d64:	bfa8      	it	ge
 8014d66:	460f      	movge	r7, r1
 8014d68:	f1bc 0f00 	cmp.w	ip, #0
 8014d6c:	d000      	beq.n	8014d70 <_strtod_l+0x2e8>
 8014d6e:	427f      	negs	r7, r7
 8014d70:	2e00      	cmp	r6, #0
 8014d72:	d14f      	bne.n	8014e14 <_strtod_l+0x38c>
 8014d74:	9904      	ldr	r1, [sp, #16]
 8014d76:	4301      	orrs	r1, r0
 8014d78:	f47f aec1 	bne.w	8014afe <_strtod_l+0x76>
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	f47f aedb 	bne.w	8014b38 <_strtod_l+0xb0>
 8014d82:	2a69      	cmp	r2, #105	; 0x69
 8014d84:	d029      	beq.n	8014dda <_strtod_l+0x352>
 8014d86:	dc26      	bgt.n	8014dd6 <_strtod_l+0x34e>
 8014d88:	2a49      	cmp	r2, #73	; 0x49
 8014d8a:	d026      	beq.n	8014dda <_strtod_l+0x352>
 8014d8c:	2a4e      	cmp	r2, #78	; 0x4e
 8014d8e:	f47f aed3 	bne.w	8014b38 <_strtod_l+0xb0>
 8014d92:	499b      	ldr	r1, [pc, #620]	; (8015000 <_strtod_l+0x578>)
 8014d94:	a815      	add	r0, sp, #84	; 0x54
 8014d96:	f002 fff5 	bl	8017d84 <__match>
 8014d9a:	2800      	cmp	r0, #0
 8014d9c:	f43f aecc 	beq.w	8014b38 <_strtod_l+0xb0>
 8014da0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014da2:	781b      	ldrb	r3, [r3, #0]
 8014da4:	2b28      	cmp	r3, #40	; 0x28
 8014da6:	d12f      	bne.n	8014e08 <_strtod_l+0x380>
 8014da8:	4996      	ldr	r1, [pc, #600]	; (8015004 <_strtod_l+0x57c>)
 8014daa:	aa18      	add	r2, sp, #96	; 0x60
 8014dac:	a815      	add	r0, sp, #84	; 0x54
 8014dae:	f002 fffd 	bl	8017dac <__hexnan>
 8014db2:	2805      	cmp	r0, #5
 8014db4:	d128      	bne.n	8014e08 <_strtod_l+0x380>
 8014db6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014db8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014dbc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014dc0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014dc4:	e69b      	b.n	8014afe <_strtod_l+0x76>
 8014dc6:	9f08      	ldr	r7, [sp, #32]
 8014dc8:	210a      	movs	r1, #10
 8014dca:	fb01 2107 	mla	r1, r1, r7, r2
 8014dce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014dd2:	9208      	str	r2, [sp, #32]
 8014dd4:	e7b5      	b.n	8014d42 <_strtod_l+0x2ba>
 8014dd6:	2a6e      	cmp	r2, #110	; 0x6e
 8014dd8:	e7d9      	b.n	8014d8e <_strtod_l+0x306>
 8014dda:	498b      	ldr	r1, [pc, #556]	; (8015008 <_strtod_l+0x580>)
 8014ddc:	a815      	add	r0, sp, #84	; 0x54
 8014dde:	f002 ffd1 	bl	8017d84 <__match>
 8014de2:	2800      	cmp	r0, #0
 8014de4:	f43f aea8 	beq.w	8014b38 <_strtod_l+0xb0>
 8014de8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014dea:	4988      	ldr	r1, [pc, #544]	; (801500c <_strtod_l+0x584>)
 8014dec:	3b01      	subs	r3, #1
 8014dee:	a815      	add	r0, sp, #84	; 0x54
 8014df0:	9315      	str	r3, [sp, #84]	; 0x54
 8014df2:	f002 ffc7 	bl	8017d84 <__match>
 8014df6:	b910      	cbnz	r0, 8014dfe <_strtod_l+0x376>
 8014df8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014dfa:	3301      	adds	r3, #1
 8014dfc:	9315      	str	r3, [sp, #84]	; 0x54
 8014dfe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801501c <_strtod_l+0x594>
 8014e02:	f04f 0800 	mov.w	r8, #0
 8014e06:	e67a      	b.n	8014afe <_strtod_l+0x76>
 8014e08:	4881      	ldr	r0, [pc, #516]	; (8015010 <_strtod_l+0x588>)
 8014e0a:	f001 fe21 	bl	8016a50 <nan>
 8014e0e:	ec59 8b10 	vmov	r8, r9, d0
 8014e12:	e674      	b.n	8014afe <_strtod_l+0x76>
 8014e14:	9b05      	ldr	r3, [sp, #20]
 8014e16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e18:	1afb      	subs	r3, r7, r3
 8014e1a:	f1bb 0f00 	cmp.w	fp, #0
 8014e1e:	bf08      	it	eq
 8014e20:	46b3      	moveq	fp, r6
 8014e22:	2e10      	cmp	r6, #16
 8014e24:	9308      	str	r3, [sp, #32]
 8014e26:	4635      	mov	r5, r6
 8014e28:	bfa8      	it	ge
 8014e2a:	2510      	movge	r5, #16
 8014e2c:	f7eb fb6a 	bl	8000504 <__aeabi_ui2d>
 8014e30:	2e09      	cmp	r6, #9
 8014e32:	4680      	mov	r8, r0
 8014e34:	4689      	mov	r9, r1
 8014e36:	dd13      	ble.n	8014e60 <_strtod_l+0x3d8>
 8014e38:	4b76      	ldr	r3, [pc, #472]	; (8015014 <_strtod_l+0x58c>)
 8014e3a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014e3e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014e42:	f7eb fbd9 	bl	80005f8 <__aeabi_dmul>
 8014e46:	4680      	mov	r8, r0
 8014e48:	4650      	mov	r0, sl
 8014e4a:	4689      	mov	r9, r1
 8014e4c:	f7eb fb5a 	bl	8000504 <__aeabi_ui2d>
 8014e50:	4602      	mov	r2, r0
 8014e52:	460b      	mov	r3, r1
 8014e54:	4640      	mov	r0, r8
 8014e56:	4649      	mov	r1, r9
 8014e58:	f7eb fa18 	bl	800028c <__adddf3>
 8014e5c:	4680      	mov	r8, r0
 8014e5e:	4689      	mov	r9, r1
 8014e60:	2e0f      	cmp	r6, #15
 8014e62:	dc38      	bgt.n	8014ed6 <_strtod_l+0x44e>
 8014e64:	9b08      	ldr	r3, [sp, #32]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	f43f ae49 	beq.w	8014afe <_strtod_l+0x76>
 8014e6c:	dd24      	ble.n	8014eb8 <_strtod_l+0x430>
 8014e6e:	2b16      	cmp	r3, #22
 8014e70:	dc0b      	bgt.n	8014e8a <_strtod_l+0x402>
 8014e72:	4968      	ldr	r1, [pc, #416]	; (8015014 <_strtod_l+0x58c>)
 8014e74:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014e78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e7c:	4642      	mov	r2, r8
 8014e7e:	464b      	mov	r3, r9
 8014e80:	f7eb fbba 	bl	80005f8 <__aeabi_dmul>
 8014e84:	4680      	mov	r8, r0
 8014e86:	4689      	mov	r9, r1
 8014e88:	e639      	b.n	8014afe <_strtod_l+0x76>
 8014e8a:	9a08      	ldr	r2, [sp, #32]
 8014e8c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8014e90:	4293      	cmp	r3, r2
 8014e92:	db20      	blt.n	8014ed6 <_strtod_l+0x44e>
 8014e94:	4c5f      	ldr	r4, [pc, #380]	; (8015014 <_strtod_l+0x58c>)
 8014e96:	f1c6 060f 	rsb	r6, r6, #15
 8014e9a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8014e9e:	4642      	mov	r2, r8
 8014ea0:	464b      	mov	r3, r9
 8014ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ea6:	f7eb fba7 	bl	80005f8 <__aeabi_dmul>
 8014eaa:	9b08      	ldr	r3, [sp, #32]
 8014eac:	1b9e      	subs	r6, r3, r6
 8014eae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8014eb2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014eb6:	e7e3      	b.n	8014e80 <_strtod_l+0x3f8>
 8014eb8:	9b08      	ldr	r3, [sp, #32]
 8014eba:	3316      	adds	r3, #22
 8014ebc:	db0b      	blt.n	8014ed6 <_strtod_l+0x44e>
 8014ebe:	9b05      	ldr	r3, [sp, #20]
 8014ec0:	1bdf      	subs	r7, r3, r7
 8014ec2:	4b54      	ldr	r3, [pc, #336]	; (8015014 <_strtod_l+0x58c>)
 8014ec4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8014ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014ecc:	4640      	mov	r0, r8
 8014ece:	4649      	mov	r1, r9
 8014ed0:	f7eb fcbc 	bl	800084c <__aeabi_ddiv>
 8014ed4:	e7d6      	b.n	8014e84 <_strtod_l+0x3fc>
 8014ed6:	9b08      	ldr	r3, [sp, #32]
 8014ed8:	1b75      	subs	r5, r6, r5
 8014eda:	441d      	add	r5, r3
 8014edc:	2d00      	cmp	r5, #0
 8014ede:	dd70      	ble.n	8014fc2 <_strtod_l+0x53a>
 8014ee0:	f015 030f 	ands.w	r3, r5, #15
 8014ee4:	d00a      	beq.n	8014efc <_strtod_l+0x474>
 8014ee6:	494b      	ldr	r1, [pc, #300]	; (8015014 <_strtod_l+0x58c>)
 8014ee8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014eec:	4642      	mov	r2, r8
 8014eee:	464b      	mov	r3, r9
 8014ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ef4:	f7eb fb80 	bl	80005f8 <__aeabi_dmul>
 8014ef8:	4680      	mov	r8, r0
 8014efa:	4689      	mov	r9, r1
 8014efc:	f035 050f 	bics.w	r5, r5, #15
 8014f00:	d04d      	beq.n	8014f9e <_strtod_l+0x516>
 8014f02:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8014f06:	dd22      	ble.n	8014f4e <_strtod_l+0x4c6>
 8014f08:	2500      	movs	r5, #0
 8014f0a:	46ab      	mov	fp, r5
 8014f0c:	9509      	str	r5, [sp, #36]	; 0x24
 8014f0e:	9505      	str	r5, [sp, #20]
 8014f10:	2322      	movs	r3, #34	; 0x22
 8014f12:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801501c <_strtod_l+0x594>
 8014f16:	6023      	str	r3, [r4, #0]
 8014f18:	f04f 0800 	mov.w	r8, #0
 8014f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	f43f aded 	beq.w	8014afe <_strtod_l+0x76>
 8014f24:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014f26:	4620      	mov	r0, r4
 8014f28:	f003 f82e 	bl	8017f88 <_Bfree>
 8014f2c:	9905      	ldr	r1, [sp, #20]
 8014f2e:	4620      	mov	r0, r4
 8014f30:	f003 f82a 	bl	8017f88 <_Bfree>
 8014f34:	4659      	mov	r1, fp
 8014f36:	4620      	mov	r0, r4
 8014f38:	f003 f826 	bl	8017f88 <_Bfree>
 8014f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014f3e:	4620      	mov	r0, r4
 8014f40:	f003 f822 	bl	8017f88 <_Bfree>
 8014f44:	4629      	mov	r1, r5
 8014f46:	4620      	mov	r0, r4
 8014f48:	f003 f81e 	bl	8017f88 <_Bfree>
 8014f4c:	e5d7      	b.n	8014afe <_strtod_l+0x76>
 8014f4e:	4b32      	ldr	r3, [pc, #200]	; (8015018 <_strtod_l+0x590>)
 8014f50:	9304      	str	r3, [sp, #16]
 8014f52:	2300      	movs	r3, #0
 8014f54:	112d      	asrs	r5, r5, #4
 8014f56:	4640      	mov	r0, r8
 8014f58:	4649      	mov	r1, r9
 8014f5a:	469a      	mov	sl, r3
 8014f5c:	2d01      	cmp	r5, #1
 8014f5e:	dc21      	bgt.n	8014fa4 <_strtod_l+0x51c>
 8014f60:	b10b      	cbz	r3, 8014f66 <_strtod_l+0x4de>
 8014f62:	4680      	mov	r8, r0
 8014f64:	4689      	mov	r9, r1
 8014f66:	492c      	ldr	r1, [pc, #176]	; (8015018 <_strtod_l+0x590>)
 8014f68:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014f6c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014f70:	4642      	mov	r2, r8
 8014f72:	464b      	mov	r3, r9
 8014f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f78:	f7eb fb3e 	bl	80005f8 <__aeabi_dmul>
 8014f7c:	4b27      	ldr	r3, [pc, #156]	; (801501c <_strtod_l+0x594>)
 8014f7e:	460a      	mov	r2, r1
 8014f80:	400b      	ands	r3, r1
 8014f82:	4927      	ldr	r1, [pc, #156]	; (8015020 <_strtod_l+0x598>)
 8014f84:	428b      	cmp	r3, r1
 8014f86:	4680      	mov	r8, r0
 8014f88:	d8be      	bhi.n	8014f08 <_strtod_l+0x480>
 8014f8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014f8e:	428b      	cmp	r3, r1
 8014f90:	bf86      	itte	hi
 8014f92:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8015024 <_strtod_l+0x59c>
 8014f96:	f04f 38ff 	movhi.w	r8, #4294967295
 8014f9a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	9304      	str	r3, [sp, #16]
 8014fa2:	e07b      	b.n	801509c <_strtod_l+0x614>
 8014fa4:	07ea      	lsls	r2, r5, #31
 8014fa6:	d505      	bpl.n	8014fb4 <_strtod_l+0x52c>
 8014fa8:	9b04      	ldr	r3, [sp, #16]
 8014faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fae:	f7eb fb23 	bl	80005f8 <__aeabi_dmul>
 8014fb2:	2301      	movs	r3, #1
 8014fb4:	9a04      	ldr	r2, [sp, #16]
 8014fb6:	3208      	adds	r2, #8
 8014fb8:	f10a 0a01 	add.w	sl, sl, #1
 8014fbc:	106d      	asrs	r5, r5, #1
 8014fbe:	9204      	str	r2, [sp, #16]
 8014fc0:	e7cc      	b.n	8014f5c <_strtod_l+0x4d4>
 8014fc2:	d0ec      	beq.n	8014f9e <_strtod_l+0x516>
 8014fc4:	426d      	negs	r5, r5
 8014fc6:	f015 020f 	ands.w	r2, r5, #15
 8014fca:	d00a      	beq.n	8014fe2 <_strtod_l+0x55a>
 8014fcc:	4b11      	ldr	r3, [pc, #68]	; (8015014 <_strtod_l+0x58c>)
 8014fce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014fd2:	4640      	mov	r0, r8
 8014fd4:	4649      	mov	r1, r9
 8014fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fda:	f7eb fc37 	bl	800084c <__aeabi_ddiv>
 8014fde:	4680      	mov	r8, r0
 8014fe0:	4689      	mov	r9, r1
 8014fe2:	112d      	asrs	r5, r5, #4
 8014fe4:	d0db      	beq.n	8014f9e <_strtod_l+0x516>
 8014fe6:	2d1f      	cmp	r5, #31
 8014fe8:	dd1e      	ble.n	8015028 <_strtod_l+0x5a0>
 8014fea:	2500      	movs	r5, #0
 8014fec:	46ab      	mov	fp, r5
 8014fee:	9509      	str	r5, [sp, #36]	; 0x24
 8014ff0:	9505      	str	r5, [sp, #20]
 8014ff2:	2322      	movs	r3, #34	; 0x22
 8014ff4:	f04f 0800 	mov.w	r8, #0
 8014ff8:	f04f 0900 	mov.w	r9, #0
 8014ffc:	6023      	str	r3, [r4, #0]
 8014ffe:	e78d      	b.n	8014f1c <_strtod_l+0x494>
 8015000:	0801ce56 	.word	0x0801ce56
 8015004:	0801cd0c 	.word	0x0801cd0c
 8015008:	0801ce4e 	.word	0x0801ce4e
 801500c:	0801cf3a 	.word	0x0801cf3a
 8015010:	0801cf36 	.word	0x0801cf36
 8015014:	0801d090 	.word	0x0801d090
 8015018:	0801d068 	.word	0x0801d068
 801501c:	7ff00000 	.word	0x7ff00000
 8015020:	7ca00000 	.word	0x7ca00000
 8015024:	7fefffff 	.word	0x7fefffff
 8015028:	f015 0310 	ands.w	r3, r5, #16
 801502c:	bf18      	it	ne
 801502e:	236a      	movne	r3, #106	; 0x6a
 8015030:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80153d4 <_strtod_l+0x94c>
 8015034:	9304      	str	r3, [sp, #16]
 8015036:	4640      	mov	r0, r8
 8015038:	4649      	mov	r1, r9
 801503a:	2300      	movs	r3, #0
 801503c:	07ea      	lsls	r2, r5, #31
 801503e:	d504      	bpl.n	801504a <_strtod_l+0x5c2>
 8015040:	e9da 2300 	ldrd	r2, r3, [sl]
 8015044:	f7eb fad8 	bl	80005f8 <__aeabi_dmul>
 8015048:	2301      	movs	r3, #1
 801504a:	106d      	asrs	r5, r5, #1
 801504c:	f10a 0a08 	add.w	sl, sl, #8
 8015050:	d1f4      	bne.n	801503c <_strtod_l+0x5b4>
 8015052:	b10b      	cbz	r3, 8015058 <_strtod_l+0x5d0>
 8015054:	4680      	mov	r8, r0
 8015056:	4689      	mov	r9, r1
 8015058:	9b04      	ldr	r3, [sp, #16]
 801505a:	b1bb      	cbz	r3, 801508c <_strtod_l+0x604>
 801505c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8015060:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015064:	2b00      	cmp	r3, #0
 8015066:	4649      	mov	r1, r9
 8015068:	dd10      	ble.n	801508c <_strtod_l+0x604>
 801506a:	2b1f      	cmp	r3, #31
 801506c:	f340 811e 	ble.w	80152ac <_strtod_l+0x824>
 8015070:	2b34      	cmp	r3, #52	; 0x34
 8015072:	bfde      	ittt	le
 8015074:	f04f 33ff 	movle.w	r3, #4294967295
 8015078:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801507c:	4093      	lslle	r3, r2
 801507e:	f04f 0800 	mov.w	r8, #0
 8015082:	bfcc      	ite	gt
 8015084:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8015088:	ea03 0901 	andle.w	r9, r3, r1
 801508c:	2200      	movs	r2, #0
 801508e:	2300      	movs	r3, #0
 8015090:	4640      	mov	r0, r8
 8015092:	4649      	mov	r1, r9
 8015094:	f7eb fd18 	bl	8000ac8 <__aeabi_dcmpeq>
 8015098:	2800      	cmp	r0, #0
 801509a:	d1a6      	bne.n	8014fea <_strtod_l+0x562>
 801509c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801509e:	9300      	str	r3, [sp, #0]
 80150a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150a2:	4633      	mov	r3, r6
 80150a4:	465a      	mov	r2, fp
 80150a6:	4620      	mov	r0, r4
 80150a8:	f002 ffd6 	bl	8018058 <__s2b>
 80150ac:	9009      	str	r0, [sp, #36]	; 0x24
 80150ae:	2800      	cmp	r0, #0
 80150b0:	f43f af2a 	beq.w	8014f08 <_strtod_l+0x480>
 80150b4:	9a08      	ldr	r2, [sp, #32]
 80150b6:	9b05      	ldr	r3, [sp, #20]
 80150b8:	2a00      	cmp	r2, #0
 80150ba:	eba3 0307 	sub.w	r3, r3, r7
 80150be:	bfa8      	it	ge
 80150c0:	2300      	movge	r3, #0
 80150c2:	930c      	str	r3, [sp, #48]	; 0x30
 80150c4:	2500      	movs	r5, #0
 80150c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80150ca:	9312      	str	r3, [sp, #72]	; 0x48
 80150cc:	46ab      	mov	fp, r5
 80150ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150d0:	4620      	mov	r0, r4
 80150d2:	6859      	ldr	r1, [r3, #4]
 80150d4:	f002 ff18 	bl	8017f08 <_Balloc>
 80150d8:	9005      	str	r0, [sp, #20]
 80150da:	2800      	cmp	r0, #0
 80150dc:	f43f af18 	beq.w	8014f10 <_strtod_l+0x488>
 80150e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150e2:	691a      	ldr	r2, [r3, #16]
 80150e4:	3202      	adds	r2, #2
 80150e6:	f103 010c 	add.w	r1, r3, #12
 80150ea:	0092      	lsls	r2, r2, #2
 80150ec:	300c      	adds	r0, #12
 80150ee:	f001 fca0 	bl	8016a32 <memcpy>
 80150f2:	ec49 8b10 	vmov	d0, r8, r9
 80150f6:	aa18      	add	r2, sp, #96	; 0x60
 80150f8:	a917      	add	r1, sp, #92	; 0x5c
 80150fa:	4620      	mov	r0, r4
 80150fc:	f003 fae0 	bl	80186c0 <__d2b>
 8015100:	ec49 8b18 	vmov	d8, r8, r9
 8015104:	9016      	str	r0, [sp, #88]	; 0x58
 8015106:	2800      	cmp	r0, #0
 8015108:	f43f af02 	beq.w	8014f10 <_strtod_l+0x488>
 801510c:	2101      	movs	r1, #1
 801510e:	4620      	mov	r0, r4
 8015110:	f003 f83a 	bl	8018188 <__i2b>
 8015114:	4683      	mov	fp, r0
 8015116:	2800      	cmp	r0, #0
 8015118:	f43f aefa 	beq.w	8014f10 <_strtod_l+0x488>
 801511c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801511e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015120:	2e00      	cmp	r6, #0
 8015122:	bfab      	itete	ge
 8015124:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8015126:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8015128:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801512a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801512e:	bfac      	ite	ge
 8015130:	eb06 0a03 	addge.w	sl, r6, r3
 8015134:	1b9f      	sublt	r7, r3, r6
 8015136:	9b04      	ldr	r3, [sp, #16]
 8015138:	1af6      	subs	r6, r6, r3
 801513a:	4416      	add	r6, r2
 801513c:	4ba0      	ldr	r3, [pc, #640]	; (80153c0 <_strtod_l+0x938>)
 801513e:	3e01      	subs	r6, #1
 8015140:	429e      	cmp	r6, r3
 8015142:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015146:	f280 80c4 	bge.w	80152d2 <_strtod_l+0x84a>
 801514a:	1b9b      	subs	r3, r3, r6
 801514c:	2b1f      	cmp	r3, #31
 801514e:	eba2 0203 	sub.w	r2, r2, r3
 8015152:	f04f 0101 	mov.w	r1, #1
 8015156:	f300 80b0 	bgt.w	80152ba <_strtod_l+0x832>
 801515a:	fa01 f303 	lsl.w	r3, r1, r3
 801515e:	930e      	str	r3, [sp, #56]	; 0x38
 8015160:	2300      	movs	r3, #0
 8015162:	930d      	str	r3, [sp, #52]	; 0x34
 8015164:	eb0a 0602 	add.w	r6, sl, r2
 8015168:	9b04      	ldr	r3, [sp, #16]
 801516a:	45b2      	cmp	sl, r6
 801516c:	4417      	add	r7, r2
 801516e:	441f      	add	r7, r3
 8015170:	4653      	mov	r3, sl
 8015172:	bfa8      	it	ge
 8015174:	4633      	movge	r3, r6
 8015176:	42bb      	cmp	r3, r7
 8015178:	bfa8      	it	ge
 801517a:	463b      	movge	r3, r7
 801517c:	2b00      	cmp	r3, #0
 801517e:	bfc2      	ittt	gt
 8015180:	1af6      	subgt	r6, r6, r3
 8015182:	1aff      	subgt	r7, r7, r3
 8015184:	ebaa 0a03 	subgt.w	sl, sl, r3
 8015188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801518a:	2b00      	cmp	r3, #0
 801518c:	dd17      	ble.n	80151be <_strtod_l+0x736>
 801518e:	4659      	mov	r1, fp
 8015190:	461a      	mov	r2, r3
 8015192:	4620      	mov	r0, r4
 8015194:	f003 f8b8 	bl	8018308 <__pow5mult>
 8015198:	4683      	mov	fp, r0
 801519a:	2800      	cmp	r0, #0
 801519c:	f43f aeb8 	beq.w	8014f10 <_strtod_l+0x488>
 80151a0:	4601      	mov	r1, r0
 80151a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80151a4:	4620      	mov	r0, r4
 80151a6:	f003 f805 	bl	80181b4 <__multiply>
 80151aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80151ac:	2800      	cmp	r0, #0
 80151ae:	f43f aeaf 	beq.w	8014f10 <_strtod_l+0x488>
 80151b2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80151b4:	4620      	mov	r0, r4
 80151b6:	f002 fee7 	bl	8017f88 <_Bfree>
 80151ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151bc:	9316      	str	r3, [sp, #88]	; 0x58
 80151be:	2e00      	cmp	r6, #0
 80151c0:	f300 808c 	bgt.w	80152dc <_strtod_l+0x854>
 80151c4:	9b08      	ldr	r3, [sp, #32]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	dd08      	ble.n	80151dc <_strtod_l+0x754>
 80151ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80151cc:	9905      	ldr	r1, [sp, #20]
 80151ce:	4620      	mov	r0, r4
 80151d0:	f003 f89a 	bl	8018308 <__pow5mult>
 80151d4:	9005      	str	r0, [sp, #20]
 80151d6:	2800      	cmp	r0, #0
 80151d8:	f43f ae9a 	beq.w	8014f10 <_strtod_l+0x488>
 80151dc:	2f00      	cmp	r7, #0
 80151de:	dd08      	ble.n	80151f2 <_strtod_l+0x76a>
 80151e0:	9905      	ldr	r1, [sp, #20]
 80151e2:	463a      	mov	r2, r7
 80151e4:	4620      	mov	r0, r4
 80151e6:	f003 f8e9 	bl	80183bc <__lshift>
 80151ea:	9005      	str	r0, [sp, #20]
 80151ec:	2800      	cmp	r0, #0
 80151ee:	f43f ae8f 	beq.w	8014f10 <_strtod_l+0x488>
 80151f2:	f1ba 0f00 	cmp.w	sl, #0
 80151f6:	dd08      	ble.n	801520a <_strtod_l+0x782>
 80151f8:	4659      	mov	r1, fp
 80151fa:	4652      	mov	r2, sl
 80151fc:	4620      	mov	r0, r4
 80151fe:	f003 f8dd 	bl	80183bc <__lshift>
 8015202:	4683      	mov	fp, r0
 8015204:	2800      	cmp	r0, #0
 8015206:	f43f ae83 	beq.w	8014f10 <_strtod_l+0x488>
 801520a:	9a05      	ldr	r2, [sp, #20]
 801520c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801520e:	4620      	mov	r0, r4
 8015210:	f003 f95c 	bl	80184cc <__mdiff>
 8015214:	4605      	mov	r5, r0
 8015216:	2800      	cmp	r0, #0
 8015218:	f43f ae7a 	beq.w	8014f10 <_strtod_l+0x488>
 801521c:	68c3      	ldr	r3, [r0, #12]
 801521e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015220:	2300      	movs	r3, #0
 8015222:	60c3      	str	r3, [r0, #12]
 8015224:	4659      	mov	r1, fp
 8015226:	f003 f935 	bl	8018494 <__mcmp>
 801522a:	2800      	cmp	r0, #0
 801522c:	da60      	bge.n	80152f0 <_strtod_l+0x868>
 801522e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015230:	ea53 0308 	orrs.w	r3, r3, r8
 8015234:	f040 8084 	bne.w	8015340 <_strtod_l+0x8b8>
 8015238:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801523c:	2b00      	cmp	r3, #0
 801523e:	d17f      	bne.n	8015340 <_strtod_l+0x8b8>
 8015240:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015244:	0d1b      	lsrs	r3, r3, #20
 8015246:	051b      	lsls	r3, r3, #20
 8015248:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801524c:	d978      	bls.n	8015340 <_strtod_l+0x8b8>
 801524e:	696b      	ldr	r3, [r5, #20]
 8015250:	b913      	cbnz	r3, 8015258 <_strtod_l+0x7d0>
 8015252:	692b      	ldr	r3, [r5, #16]
 8015254:	2b01      	cmp	r3, #1
 8015256:	dd73      	ble.n	8015340 <_strtod_l+0x8b8>
 8015258:	4629      	mov	r1, r5
 801525a:	2201      	movs	r2, #1
 801525c:	4620      	mov	r0, r4
 801525e:	f003 f8ad 	bl	80183bc <__lshift>
 8015262:	4659      	mov	r1, fp
 8015264:	4605      	mov	r5, r0
 8015266:	f003 f915 	bl	8018494 <__mcmp>
 801526a:	2800      	cmp	r0, #0
 801526c:	dd68      	ble.n	8015340 <_strtod_l+0x8b8>
 801526e:	9904      	ldr	r1, [sp, #16]
 8015270:	4a54      	ldr	r2, [pc, #336]	; (80153c4 <_strtod_l+0x93c>)
 8015272:	464b      	mov	r3, r9
 8015274:	2900      	cmp	r1, #0
 8015276:	f000 8084 	beq.w	8015382 <_strtod_l+0x8fa>
 801527a:	ea02 0109 	and.w	r1, r2, r9
 801527e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015282:	dc7e      	bgt.n	8015382 <_strtod_l+0x8fa>
 8015284:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015288:	f77f aeb3 	ble.w	8014ff2 <_strtod_l+0x56a>
 801528c:	4b4e      	ldr	r3, [pc, #312]	; (80153c8 <_strtod_l+0x940>)
 801528e:	4640      	mov	r0, r8
 8015290:	4649      	mov	r1, r9
 8015292:	2200      	movs	r2, #0
 8015294:	f7eb f9b0 	bl	80005f8 <__aeabi_dmul>
 8015298:	4b4a      	ldr	r3, [pc, #296]	; (80153c4 <_strtod_l+0x93c>)
 801529a:	400b      	ands	r3, r1
 801529c:	4680      	mov	r8, r0
 801529e:	4689      	mov	r9, r1
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	f47f ae3f 	bne.w	8014f24 <_strtod_l+0x49c>
 80152a6:	2322      	movs	r3, #34	; 0x22
 80152a8:	6023      	str	r3, [r4, #0]
 80152aa:	e63b      	b.n	8014f24 <_strtod_l+0x49c>
 80152ac:	f04f 32ff 	mov.w	r2, #4294967295
 80152b0:	fa02 f303 	lsl.w	r3, r2, r3
 80152b4:	ea03 0808 	and.w	r8, r3, r8
 80152b8:	e6e8      	b.n	801508c <_strtod_l+0x604>
 80152ba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80152be:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80152c2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80152c6:	36e2      	adds	r6, #226	; 0xe2
 80152c8:	fa01 f306 	lsl.w	r3, r1, r6
 80152cc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80152d0:	e748      	b.n	8015164 <_strtod_l+0x6dc>
 80152d2:	2100      	movs	r1, #0
 80152d4:	2301      	movs	r3, #1
 80152d6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80152da:	e743      	b.n	8015164 <_strtod_l+0x6dc>
 80152dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80152de:	4632      	mov	r2, r6
 80152e0:	4620      	mov	r0, r4
 80152e2:	f003 f86b 	bl	80183bc <__lshift>
 80152e6:	9016      	str	r0, [sp, #88]	; 0x58
 80152e8:	2800      	cmp	r0, #0
 80152ea:	f47f af6b 	bne.w	80151c4 <_strtod_l+0x73c>
 80152ee:	e60f      	b.n	8014f10 <_strtod_l+0x488>
 80152f0:	46ca      	mov	sl, r9
 80152f2:	d171      	bne.n	80153d8 <_strtod_l+0x950>
 80152f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80152f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80152fa:	b352      	cbz	r2, 8015352 <_strtod_l+0x8ca>
 80152fc:	4a33      	ldr	r2, [pc, #204]	; (80153cc <_strtod_l+0x944>)
 80152fe:	4293      	cmp	r3, r2
 8015300:	d12a      	bne.n	8015358 <_strtod_l+0x8d0>
 8015302:	9b04      	ldr	r3, [sp, #16]
 8015304:	4641      	mov	r1, r8
 8015306:	b1fb      	cbz	r3, 8015348 <_strtod_l+0x8c0>
 8015308:	4b2e      	ldr	r3, [pc, #184]	; (80153c4 <_strtod_l+0x93c>)
 801530a:	ea09 0303 	and.w	r3, r9, r3
 801530e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015312:	f04f 32ff 	mov.w	r2, #4294967295
 8015316:	d81a      	bhi.n	801534e <_strtod_l+0x8c6>
 8015318:	0d1b      	lsrs	r3, r3, #20
 801531a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801531e:	fa02 f303 	lsl.w	r3, r2, r3
 8015322:	4299      	cmp	r1, r3
 8015324:	d118      	bne.n	8015358 <_strtod_l+0x8d0>
 8015326:	4b2a      	ldr	r3, [pc, #168]	; (80153d0 <_strtod_l+0x948>)
 8015328:	459a      	cmp	sl, r3
 801532a:	d102      	bne.n	8015332 <_strtod_l+0x8aa>
 801532c:	3101      	adds	r1, #1
 801532e:	f43f adef 	beq.w	8014f10 <_strtod_l+0x488>
 8015332:	4b24      	ldr	r3, [pc, #144]	; (80153c4 <_strtod_l+0x93c>)
 8015334:	ea0a 0303 	and.w	r3, sl, r3
 8015338:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801533c:	f04f 0800 	mov.w	r8, #0
 8015340:	9b04      	ldr	r3, [sp, #16]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d1a2      	bne.n	801528c <_strtod_l+0x804>
 8015346:	e5ed      	b.n	8014f24 <_strtod_l+0x49c>
 8015348:	f04f 33ff 	mov.w	r3, #4294967295
 801534c:	e7e9      	b.n	8015322 <_strtod_l+0x89a>
 801534e:	4613      	mov	r3, r2
 8015350:	e7e7      	b.n	8015322 <_strtod_l+0x89a>
 8015352:	ea53 0308 	orrs.w	r3, r3, r8
 8015356:	d08a      	beq.n	801526e <_strtod_l+0x7e6>
 8015358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801535a:	b1e3      	cbz	r3, 8015396 <_strtod_l+0x90e>
 801535c:	ea13 0f0a 	tst.w	r3, sl
 8015360:	d0ee      	beq.n	8015340 <_strtod_l+0x8b8>
 8015362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015364:	9a04      	ldr	r2, [sp, #16]
 8015366:	4640      	mov	r0, r8
 8015368:	4649      	mov	r1, r9
 801536a:	b1c3      	cbz	r3, 801539e <_strtod_l+0x916>
 801536c:	f7ff fb70 	bl	8014a50 <sulp>
 8015370:	4602      	mov	r2, r0
 8015372:	460b      	mov	r3, r1
 8015374:	ec51 0b18 	vmov	r0, r1, d8
 8015378:	f7ea ff88 	bl	800028c <__adddf3>
 801537c:	4680      	mov	r8, r0
 801537e:	4689      	mov	r9, r1
 8015380:	e7de      	b.n	8015340 <_strtod_l+0x8b8>
 8015382:	4013      	ands	r3, r2
 8015384:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015388:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801538c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8015390:	f04f 38ff 	mov.w	r8, #4294967295
 8015394:	e7d4      	b.n	8015340 <_strtod_l+0x8b8>
 8015396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015398:	ea13 0f08 	tst.w	r3, r8
 801539c:	e7e0      	b.n	8015360 <_strtod_l+0x8d8>
 801539e:	f7ff fb57 	bl	8014a50 <sulp>
 80153a2:	4602      	mov	r2, r0
 80153a4:	460b      	mov	r3, r1
 80153a6:	ec51 0b18 	vmov	r0, r1, d8
 80153aa:	f7ea ff6d 	bl	8000288 <__aeabi_dsub>
 80153ae:	2200      	movs	r2, #0
 80153b0:	2300      	movs	r3, #0
 80153b2:	4680      	mov	r8, r0
 80153b4:	4689      	mov	r9, r1
 80153b6:	f7eb fb87 	bl	8000ac8 <__aeabi_dcmpeq>
 80153ba:	2800      	cmp	r0, #0
 80153bc:	d0c0      	beq.n	8015340 <_strtod_l+0x8b8>
 80153be:	e618      	b.n	8014ff2 <_strtod_l+0x56a>
 80153c0:	fffffc02 	.word	0xfffffc02
 80153c4:	7ff00000 	.word	0x7ff00000
 80153c8:	39500000 	.word	0x39500000
 80153cc:	000fffff 	.word	0x000fffff
 80153d0:	7fefffff 	.word	0x7fefffff
 80153d4:	0801cd20 	.word	0x0801cd20
 80153d8:	4659      	mov	r1, fp
 80153da:	4628      	mov	r0, r5
 80153dc:	f003 f9ca 	bl	8018774 <__ratio>
 80153e0:	ec57 6b10 	vmov	r6, r7, d0
 80153e4:	ee10 0a10 	vmov	r0, s0
 80153e8:	2200      	movs	r2, #0
 80153ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80153ee:	4639      	mov	r1, r7
 80153f0:	f7eb fb7e 	bl	8000af0 <__aeabi_dcmple>
 80153f4:	2800      	cmp	r0, #0
 80153f6:	d071      	beq.n	80154dc <_strtod_l+0xa54>
 80153f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d17c      	bne.n	80154f8 <_strtod_l+0xa70>
 80153fe:	f1b8 0f00 	cmp.w	r8, #0
 8015402:	d15a      	bne.n	80154ba <_strtod_l+0xa32>
 8015404:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015408:	2b00      	cmp	r3, #0
 801540a:	d15d      	bne.n	80154c8 <_strtod_l+0xa40>
 801540c:	4b90      	ldr	r3, [pc, #576]	; (8015650 <_strtod_l+0xbc8>)
 801540e:	2200      	movs	r2, #0
 8015410:	4630      	mov	r0, r6
 8015412:	4639      	mov	r1, r7
 8015414:	f7eb fb62 	bl	8000adc <__aeabi_dcmplt>
 8015418:	2800      	cmp	r0, #0
 801541a:	d15c      	bne.n	80154d6 <_strtod_l+0xa4e>
 801541c:	4630      	mov	r0, r6
 801541e:	4639      	mov	r1, r7
 8015420:	4b8c      	ldr	r3, [pc, #560]	; (8015654 <_strtod_l+0xbcc>)
 8015422:	2200      	movs	r2, #0
 8015424:	f7eb f8e8 	bl	80005f8 <__aeabi_dmul>
 8015428:	4606      	mov	r6, r0
 801542a:	460f      	mov	r7, r1
 801542c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015430:	9606      	str	r6, [sp, #24]
 8015432:	9307      	str	r3, [sp, #28]
 8015434:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015438:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801543c:	4b86      	ldr	r3, [pc, #536]	; (8015658 <_strtod_l+0xbd0>)
 801543e:	ea0a 0303 	and.w	r3, sl, r3
 8015442:	930d      	str	r3, [sp, #52]	; 0x34
 8015444:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015446:	4b85      	ldr	r3, [pc, #532]	; (801565c <_strtod_l+0xbd4>)
 8015448:	429a      	cmp	r2, r3
 801544a:	f040 8090 	bne.w	801556e <_strtod_l+0xae6>
 801544e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8015452:	ec49 8b10 	vmov	d0, r8, r9
 8015456:	f003 f8c3 	bl	80185e0 <__ulp>
 801545a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801545e:	ec51 0b10 	vmov	r0, r1, d0
 8015462:	f7eb f8c9 	bl	80005f8 <__aeabi_dmul>
 8015466:	4642      	mov	r2, r8
 8015468:	464b      	mov	r3, r9
 801546a:	f7ea ff0f 	bl	800028c <__adddf3>
 801546e:	460b      	mov	r3, r1
 8015470:	4979      	ldr	r1, [pc, #484]	; (8015658 <_strtod_l+0xbd0>)
 8015472:	4a7b      	ldr	r2, [pc, #492]	; (8015660 <_strtod_l+0xbd8>)
 8015474:	4019      	ands	r1, r3
 8015476:	4291      	cmp	r1, r2
 8015478:	4680      	mov	r8, r0
 801547a:	d944      	bls.n	8015506 <_strtod_l+0xa7e>
 801547c:	ee18 2a90 	vmov	r2, s17
 8015480:	4b78      	ldr	r3, [pc, #480]	; (8015664 <_strtod_l+0xbdc>)
 8015482:	429a      	cmp	r2, r3
 8015484:	d104      	bne.n	8015490 <_strtod_l+0xa08>
 8015486:	ee18 3a10 	vmov	r3, s16
 801548a:	3301      	adds	r3, #1
 801548c:	f43f ad40 	beq.w	8014f10 <_strtod_l+0x488>
 8015490:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8015664 <_strtod_l+0xbdc>
 8015494:	f04f 38ff 	mov.w	r8, #4294967295
 8015498:	9916      	ldr	r1, [sp, #88]	; 0x58
 801549a:	4620      	mov	r0, r4
 801549c:	f002 fd74 	bl	8017f88 <_Bfree>
 80154a0:	9905      	ldr	r1, [sp, #20]
 80154a2:	4620      	mov	r0, r4
 80154a4:	f002 fd70 	bl	8017f88 <_Bfree>
 80154a8:	4659      	mov	r1, fp
 80154aa:	4620      	mov	r0, r4
 80154ac:	f002 fd6c 	bl	8017f88 <_Bfree>
 80154b0:	4629      	mov	r1, r5
 80154b2:	4620      	mov	r0, r4
 80154b4:	f002 fd68 	bl	8017f88 <_Bfree>
 80154b8:	e609      	b.n	80150ce <_strtod_l+0x646>
 80154ba:	f1b8 0f01 	cmp.w	r8, #1
 80154be:	d103      	bne.n	80154c8 <_strtod_l+0xa40>
 80154c0:	f1b9 0f00 	cmp.w	r9, #0
 80154c4:	f43f ad95 	beq.w	8014ff2 <_strtod_l+0x56a>
 80154c8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8015620 <_strtod_l+0xb98>
 80154cc:	4f60      	ldr	r7, [pc, #384]	; (8015650 <_strtod_l+0xbc8>)
 80154ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80154d2:	2600      	movs	r6, #0
 80154d4:	e7ae      	b.n	8015434 <_strtod_l+0x9ac>
 80154d6:	4f5f      	ldr	r7, [pc, #380]	; (8015654 <_strtod_l+0xbcc>)
 80154d8:	2600      	movs	r6, #0
 80154da:	e7a7      	b.n	801542c <_strtod_l+0x9a4>
 80154dc:	4b5d      	ldr	r3, [pc, #372]	; (8015654 <_strtod_l+0xbcc>)
 80154de:	4630      	mov	r0, r6
 80154e0:	4639      	mov	r1, r7
 80154e2:	2200      	movs	r2, #0
 80154e4:	f7eb f888 	bl	80005f8 <__aeabi_dmul>
 80154e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154ea:	4606      	mov	r6, r0
 80154ec:	460f      	mov	r7, r1
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d09c      	beq.n	801542c <_strtod_l+0x9a4>
 80154f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80154f6:	e79d      	b.n	8015434 <_strtod_l+0x9ac>
 80154f8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8015628 <_strtod_l+0xba0>
 80154fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015500:	ec57 6b17 	vmov	r6, r7, d7
 8015504:	e796      	b.n	8015434 <_strtod_l+0x9ac>
 8015506:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801550a:	9b04      	ldr	r3, [sp, #16]
 801550c:	46ca      	mov	sl, r9
 801550e:	2b00      	cmp	r3, #0
 8015510:	d1c2      	bne.n	8015498 <_strtod_l+0xa10>
 8015512:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015516:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015518:	0d1b      	lsrs	r3, r3, #20
 801551a:	051b      	lsls	r3, r3, #20
 801551c:	429a      	cmp	r2, r3
 801551e:	d1bb      	bne.n	8015498 <_strtod_l+0xa10>
 8015520:	4630      	mov	r0, r6
 8015522:	4639      	mov	r1, r7
 8015524:	f7eb fbc8 	bl	8000cb8 <__aeabi_d2lz>
 8015528:	f7eb f838 	bl	800059c <__aeabi_l2d>
 801552c:	4602      	mov	r2, r0
 801552e:	460b      	mov	r3, r1
 8015530:	4630      	mov	r0, r6
 8015532:	4639      	mov	r1, r7
 8015534:	f7ea fea8 	bl	8000288 <__aeabi_dsub>
 8015538:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801553a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801553e:	ea43 0308 	orr.w	r3, r3, r8
 8015542:	4313      	orrs	r3, r2
 8015544:	4606      	mov	r6, r0
 8015546:	460f      	mov	r7, r1
 8015548:	d054      	beq.n	80155f4 <_strtod_l+0xb6c>
 801554a:	a339      	add	r3, pc, #228	; (adr r3, 8015630 <_strtod_l+0xba8>)
 801554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015550:	f7eb fac4 	bl	8000adc <__aeabi_dcmplt>
 8015554:	2800      	cmp	r0, #0
 8015556:	f47f ace5 	bne.w	8014f24 <_strtod_l+0x49c>
 801555a:	a337      	add	r3, pc, #220	; (adr r3, 8015638 <_strtod_l+0xbb0>)
 801555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015560:	4630      	mov	r0, r6
 8015562:	4639      	mov	r1, r7
 8015564:	f7eb fad8 	bl	8000b18 <__aeabi_dcmpgt>
 8015568:	2800      	cmp	r0, #0
 801556a:	d095      	beq.n	8015498 <_strtod_l+0xa10>
 801556c:	e4da      	b.n	8014f24 <_strtod_l+0x49c>
 801556e:	9b04      	ldr	r3, [sp, #16]
 8015570:	b333      	cbz	r3, 80155c0 <_strtod_l+0xb38>
 8015572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015574:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015578:	d822      	bhi.n	80155c0 <_strtod_l+0xb38>
 801557a:	a331      	add	r3, pc, #196	; (adr r3, 8015640 <_strtod_l+0xbb8>)
 801557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015580:	4630      	mov	r0, r6
 8015582:	4639      	mov	r1, r7
 8015584:	f7eb fab4 	bl	8000af0 <__aeabi_dcmple>
 8015588:	b1a0      	cbz	r0, 80155b4 <_strtod_l+0xb2c>
 801558a:	4639      	mov	r1, r7
 801558c:	4630      	mov	r0, r6
 801558e:	f7eb fb0b 	bl	8000ba8 <__aeabi_d2uiz>
 8015592:	2801      	cmp	r0, #1
 8015594:	bf38      	it	cc
 8015596:	2001      	movcc	r0, #1
 8015598:	f7ea ffb4 	bl	8000504 <__aeabi_ui2d>
 801559c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801559e:	4606      	mov	r6, r0
 80155a0:	460f      	mov	r7, r1
 80155a2:	bb23      	cbnz	r3, 80155ee <_strtod_l+0xb66>
 80155a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80155a8:	9010      	str	r0, [sp, #64]	; 0x40
 80155aa:	9311      	str	r3, [sp, #68]	; 0x44
 80155ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80155b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80155b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80155b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80155b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80155bc:	1a9b      	subs	r3, r3, r2
 80155be:	930f      	str	r3, [sp, #60]	; 0x3c
 80155c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80155c4:	eeb0 0a48 	vmov.f32	s0, s16
 80155c8:	eef0 0a68 	vmov.f32	s1, s17
 80155cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80155d0:	f003 f806 	bl	80185e0 <__ulp>
 80155d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80155d8:	ec53 2b10 	vmov	r2, r3, d0
 80155dc:	f7eb f80c 	bl	80005f8 <__aeabi_dmul>
 80155e0:	ec53 2b18 	vmov	r2, r3, d8
 80155e4:	f7ea fe52 	bl	800028c <__adddf3>
 80155e8:	4680      	mov	r8, r0
 80155ea:	4689      	mov	r9, r1
 80155ec:	e78d      	b.n	801550a <_strtod_l+0xa82>
 80155ee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80155f2:	e7db      	b.n	80155ac <_strtod_l+0xb24>
 80155f4:	a314      	add	r3, pc, #80	; (adr r3, 8015648 <_strtod_l+0xbc0>)
 80155f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155fa:	f7eb fa6f 	bl	8000adc <__aeabi_dcmplt>
 80155fe:	e7b3      	b.n	8015568 <_strtod_l+0xae0>
 8015600:	2300      	movs	r3, #0
 8015602:	930a      	str	r3, [sp, #40]	; 0x28
 8015604:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015606:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015608:	6013      	str	r3, [r2, #0]
 801560a:	f7ff ba7c 	b.w	8014b06 <_strtod_l+0x7e>
 801560e:	2a65      	cmp	r2, #101	; 0x65
 8015610:	f43f ab75 	beq.w	8014cfe <_strtod_l+0x276>
 8015614:	2a45      	cmp	r2, #69	; 0x45
 8015616:	f43f ab72 	beq.w	8014cfe <_strtod_l+0x276>
 801561a:	2301      	movs	r3, #1
 801561c:	f7ff bbaa 	b.w	8014d74 <_strtod_l+0x2ec>
 8015620:	00000000 	.word	0x00000000
 8015624:	bff00000 	.word	0xbff00000
 8015628:	00000000 	.word	0x00000000
 801562c:	3ff00000 	.word	0x3ff00000
 8015630:	94a03595 	.word	0x94a03595
 8015634:	3fdfffff 	.word	0x3fdfffff
 8015638:	35afe535 	.word	0x35afe535
 801563c:	3fe00000 	.word	0x3fe00000
 8015640:	ffc00000 	.word	0xffc00000
 8015644:	41dfffff 	.word	0x41dfffff
 8015648:	94a03595 	.word	0x94a03595
 801564c:	3fcfffff 	.word	0x3fcfffff
 8015650:	3ff00000 	.word	0x3ff00000
 8015654:	3fe00000 	.word	0x3fe00000
 8015658:	7ff00000 	.word	0x7ff00000
 801565c:	7fe00000 	.word	0x7fe00000
 8015660:	7c9fffff 	.word	0x7c9fffff
 8015664:	7fefffff 	.word	0x7fefffff

08015668 <_strtod_r>:
 8015668:	4b01      	ldr	r3, [pc, #4]	; (8015670 <_strtod_r+0x8>)
 801566a:	f7ff ba0d 	b.w	8014a88 <_strtod_l>
 801566e:	bf00      	nop
 8015670:	2000013c 	.word	0x2000013c

08015674 <strtof>:
 8015674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015678:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801573c <strtof+0xc8>
 801567c:	4b2a      	ldr	r3, [pc, #168]	; (8015728 <strtof+0xb4>)
 801567e:	460a      	mov	r2, r1
 8015680:	ed2d 8b02 	vpush	{d8}
 8015684:	4601      	mov	r1, r0
 8015686:	f8d8 0000 	ldr.w	r0, [r8]
 801568a:	f7ff f9fd 	bl	8014a88 <_strtod_l>
 801568e:	ec55 4b10 	vmov	r4, r5, d0
 8015692:	ee10 2a10 	vmov	r2, s0
 8015696:	ee10 0a10 	vmov	r0, s0
 801569a:	462b      	mov	r3, r5
 801569c:	4629      	mov	r1, r5
 801569e:	f7eb fa45 	bl	8000b2c <__aeabi_dcmpun>
 80156a2:	b190      	cbz	r0, 80156ca <strtof+0x56>
 80156a4:	2d00      	cmp	r5, #0
 80156a6:	4821      	ldr	r0, [pc, #132]	; (801572c <strtof+0xb8>)
 80156a8:	da09      	bge.n	80156be <strtof+0x4a>
 80156aa:	f001 f9d9 	bl	8016a60 <nanf>
 80156ae:	eeb1 8a40 	vneg.f32	s16, s0
 80156b2:	eeb0 0a48 	vmov.f32	s0, s16
 80156b6:	ecbd 8b02 	vpop	{d8}
 80156ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156be:	ecbd 8b02 	vpop	{d8}
 80156c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80156c6:	f001 b9cb 	b.w	8016a60 <nanf>
 80156ca:	4620      	mov	r0, r4
 80156cc:	4629      	mov	r1, r5
 80156ce:	f7eb fa8b 	bl	8000be8 <__aeabi_d2f>
 80156d2:	ee08 0a10 	vmov	s16, r0
 80156d6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8015730 <strtof+0xbc>
 80156da:	eeb0 7ac8 	vabs.f32	s14, s16
 80156de:	eeb4 7a67 	vcmp.f32	s14, s15
 80156e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156e6:	dd11      	ble.n	801570c <strtof+0x98>
 80156e8:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80156ec:	4b11      	ldr	r3, [pc, #68]	; (8015734 <strtof+0xc0>)
 80156ee:	f04f 32ff 	mov.w	r2, #4294967295
 80156f2:	4620      	mov	r0, r4
 80156f4:	4639      	mov	r1, r7
 80156f6:	f7eb fa19 	bl	8000b2c <__aeabi_dcmpun>
 80156fa:	b980      	cbnz	r0, 801571e <strtof+0xaa>
 80156fc:	4b0d      	ldr	r3, [pc, #52]	; (8015734 <strtof+0xc0>)
 80156fe:	f04f 32ff 	mov.w	r2, #4294967295
 8015702:	4620      	mov	r0, r4
 8015704:	4639      	mov	r1, r7
 8015706:	f7eb f9f3 	bl	8000af0 <__aeabi_dcmple>
 801570a:	b940      	cbnz	r0, 801571e <strtof+0xaa>
 801570c:	ee18 3a10 	vmov	r3, s16
 8015710:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8015714:	d1cd      	bne.n	80156b2 <strtof+0x3e>
 8015716:	4b08      	ldr	r3, [pc, #32]	; (8015738 <strtof+0xc4>)
 8015718:	402b      	ands	r3, r5
 801571a:	2b00      	cmp	r3, #0
 801571c:	d0c9      	beq.n	80156b2 <strtof+0x3e>
 801571e:	f8d8 3000 	ldr.w	r3, [r8]
 8015722:	2222      	movs	r2, #34	; 0x22
 8015724:	601a      	str	r2, [r3, #0]
 8015726:	e7c4      	b.n	80156b2 <strtof+0x3e>
 8015728:	2000013c 	.word	0x2000013c
 801572c:	0801cf36 	.word	0x0801cf36
 8015730:	7f7fffff 	.word	0x7f7fffff
 8015734:	7fefffff 	.word	0x7fefffff
 8015738:	7ff00000 	.word	0x7ff00000
 801573c:	200002f4 	.word	0x200002f4

08015740 <_strtol_l.constprop.0>:
 8015740:	2b01      	cmp	r3, #1
 8015742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015746:	d001      	beq.n	801574c <_strtol_l.constprop.0+0xc>
 8015748:	2b24      	cmp	r3, #36	; 0x24
 801574a:	d906      	bls.n	801575a <_strtol_l.constprop.0+0x1a>
 801574c:	f001 f93c 	bl	80169c8 <__errno>
 8015750:	2316      	movs	r3, #22
 8015752:	6003      	str	r3, [r0, #0]
 8015754:	2000      	movs	r0, #0
 8015756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801575a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015840 <_strtol_l.constprop.0+0x100>
 801575e:	460d      	mov	r5, r1
 8015760:	462e      	mov	r6, r5
 8015762:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015766:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801576a:	f017 0708 	ands.w	r7, r7, #8
 801576e:	d1f7      	bne.n	8015760 <_strtol_l.constprop.0+0x20>
 8015770:	2c2d      	cmp	r4, #45	; 0x2d
 8015772:	d132      	bne.n	80157da <_strtol_l.constprop.0+0x9a>
 8015774:	782c      	ldrb	r4, [r5, #0]
 8015776:	2701      	movs	r7, #1
 8015778:	1cb5      	adds	r5, r6, #2
 801577a:	2b00      	cmp	r3, #0
 801577c:	d05b      	beq.n	8015836 <_strtol_l.constprop.0+0xf6>
 801577e:	2b10      	cmp	r3, #16
 8015780:	d109      	bne.n	8015796 <_strtol_l.constprop.0+0x56>
 8015782:	2c30      	cmp	r4, #48	; 0x30
 8015784:	d107      	bne.n	8015796 <_strtol_l.constprop.0+0x56>
 8015786:	782c      	ldrb	r4, [r5, #0]
 8015788:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801578c:	2c58      	cmp	r4, #88	; 0x58
 801578e:	d14d      	bne.n	801582c <_strtol_l.constprop.0+0xec>
 8015790:	786c      	ldrb	r4, [r5, #1]
 8015792:	2310      	movs	r3, #16
 8015794:	3502      	adds	r5, #2
 8015796:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801579a:	f108 38ff 	add.w	r8, r8, #4294967295
 801579e:	f04f 0e00 	mov.w	lr, #0
 80157a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80157a6:	4676      	mov	r6, lr
 80157a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80157ac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80157b0:	f1bc 0f09 	cmp.w	ip, #9
 80157b4:	d816      	bhi.n	80157e4 <_strtol_l.constprop.0+0xa4>
 80157b6:	4664      	mov	r4, ip
 80157b8:	42a3      	cmp	r3, r4
 80157ba:	dd24      	ble.n	8015806 <_strtol_l.constprop.0+0xc6>
 80157bc:	f1be 3fff 	cmp.w	lr, #4294967295
 80157c0:	d008      	beq.n	80157d4 <_strtol_l.constprop.0+0x94>
 80157c2:	45b1      	cmp	r9, r6
 80157c4:	d31c      	bcc.n	8015800 <_strtol_l.constprop.0+0xc0>
 80157c6:	d101      	bne.n	80157cc <_strtol_l.constprop.0+0x8c>
 80157c8:	45a2      	cmp	sl, r4
 80157ca:	db19      	blt.n	8015800 <_strtol_l.constprop.0+0xc0>
 80157cc:	fb06 4603 	mla	r6, r6, r3, r4
 80157d0:	f04f 0e01 	mov.w	lr, #1
 80157d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80157d8:	e7e8      	b.n	80157ac <_strtol_l.constprop.0+0x6c>
 80157da:	2c2b      	cmp	r4, #43	; 0x2b
 80157dc:	bf04      	itt	eq
 80157de:	782c      	ldrbeq	r4, [r5, #0]
 80157e0:	1cb5      	addeq	r5, r6, #2
 80157e2:	e7ca      	b.n	801577a <_strtol_l.constprop.0+0x3a>
 80157e4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80157e8:	f1bc 0f19 	cmp.w	ip, #25
 80157ec:	d801      	bhi.n	80157f2 <_strtol_l.constprop.0+0xb2>
 80157ee:	3c37      	subs	r4, #55	; 0x37
 80157f0:	e7e2      	b.n	80157b8 <_strtol_l.constprop.0+0x78>
 80157f2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80157f6:	f1bc 0f19 	cmp.w	ip, #25
 80157fa:	d804      	bhi.n	8015806 <_strtol_l.constprop.0+0xc6>
 80157fc:	3c57      	subs	r4, #87	; 0x57
 80157fe:	e7db      	b.n	80157b8 <_strtol_l.constprop.0+0x78>
 8015800:	f04f 3eff 	mov.w	lr, #4294967295
 8015804:	e7e6      	b.n	80157d4 <_strtol_l.constprop.0+0x94>
 8015806:	f1be 3fff 	cmp.w	lr, #4294967295
 801580a:	d105      	bne.n	8015818 <_strtol_l.constprop.0+0xd8>
 801580c:	2322      	movs	r3, #34	; 0x22
 801580e:	6003      	str	r3, [r0, #0]
 8015810:	4646      	mov	r6, r8
 8015812:	b942      	cbnz	r2, 8015826 <_strtol_l.constprop.0+0xe6>
 8015814:	4630      	mov	r0, r6
 8015816:	e79e      	b.n	8015756 <_strtol_l.constprop.0+0x16>
 8015818:	b107      	cbz	r7, 801581c <_strtol_l.constprop.0+0xdc>
 801581a:	4276      	negs	r6, r6
 801581c:	2a00      	cmp	r2, #0
 801581e:	d0f9      	beq.n	8015814 <_strtol_l.constprop.0+0xd4>
 8015820:	f1be 0f00 	cmp.w	lr, #0
 8015824:	d000      	beq.n	8015828 <_strtol_l.constprop.0+0xe8>
 8015826:	1e69      	subs	r1, r5, #1
 8015828:	6011      	str	r1, [r2, #0]
 801582a:	e7f3      	b.n	8015814 <_strtol_l.constprop.0+0xd4>
 801582c:	2430      	movs	r4, #48	; 0x30
 801582e:	2b00      	cmp	r3, #0
 8015830:	d1b1      	bne.n	8015796 <_strtol_l.constprop.0+0x56>
 8015832:	2308      	movs	r3, #8
 8015834:	e7af      	b.n	8015796 <_strtol_l.constprop.0+0x56>
 8015836:	2c30      	cmp	r4, #48	; 0x30
 8015838:	d0a5      	beq.n	8015786 <_strtol_l.constprop.0+0x46>
 801583a:	230a      	movs	r3, #10
 801583c:	e7ab      	b.n	8015796 <_strtol_l.constprop.0+0x56>
 801583e:	bf00      	nop
 8015840:	0801cd49 	.word	0x0801cd49

08015844 <_strtol_r>:
 8015844:	f7ff bf7c 	b.w	8015740 <_strtol_l.constprop.0>

08015848 <strtol>:
 8015848:	4613      	mov	r3, r2
 801584a:	460a      	mov	r2, r1
 801584c:	4601      	mov	r1, r0
 801584e:	4802      	ldr	r0, [pc, #8]	; (8015858 <strtol+0x10>)
 8015850:	6800      	ldr	r0, [r0, #0]
 8015852:	f7ff bf75 	b.w	8015740 <_strtol_l.constprop.0>
 8015856:	bf00      	nop
 8015858:	200002f4 	.word	0x200002f4

0801585c <__cvt>:
 801585c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015860:	ec55 4b10 	vmov	r4, r5, d0
 8015864:	2d00      	cmp	r5, #0
 8015866:	460e      	mov	r6, r1
 8015868:	4619      	mov	r1, r3
 801586a:	462b      	mov	r3, r5
 801586c:	bfbb      	ittet	lt
 801586e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015872:	461d      	movlt	r5, r3
 8015874:	2300      	movge	r3, #0
 8015876:	232d      	movlt	r3, #45	; 0x2d
 8015878:	700b      	strb	r3, [r1, #0]
 801587a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801587c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015880:	4691      	mov	r9, r2
 8015882:	f023 0820 	bic.w	r8, r3, #32
 8015886:	bfbc      	itt	lt
 8015888:	4622      	movlt	r2, r4
 801588a:	4614      	movlt	r4, r2
 801588c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015890:	d005      	beq.n	801589e <__cvt+0x42>
 8015892:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015896:	d100      	bne.n	801589a <__cvt+0x3e>
 8015898:	3601      	adds	r6, #1
 801589a:	2102      	movs	r1, #2
 801589c:	e000      	b.n	80158a0 <__cvt+0x44>
 801589e:	2103      	movs	r1, #3
 80158a0:	ab03      	add	r3, sp, #12
 80158a2:	9301      	str	r3, [sp, #4]
 80158a4:	ab02      	add	r3, sp, #8
 80158a6:	9300      	str	r3, [sp, #0]
 80158a8:	ec45 4b10 	vmov	d0, r4, r5
 80158ac:	4653      	mov	r3, sl
 80158ae:	4632      	mov	r2, r6
 80158b0:	f001 f982 	bl	8016bb8 <_dtoa_r>
 80158b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80158b8:	4607      	mov	r7, r0
 80158ba:	d102      	bne.n	80158c2 <__cvt+0x66>
 80158bc:	f019 0f01 	tst.w	r9, #1
 80158c0:	d022      	beq.n	8015908 <__cvt+0xac>
 80158c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80158c6:	eb07 0906 	add.w	r9, r7, r6
 80158ca:	d110      	bne.n	80158ee <__cvt+0x92>
 80158cc:	783b      	ldrb	r3, [r7, #0]
 80158ce:	2b30      	cmp	r3, #48	; 0x30
 80158d0:	d10a      	bne.n	80158e8 <__cvt+0x8c>
 80158d2:	2200      	movs	r2, #0
 80158d4:	2300      	movs	r3, #0
 80158d6:	4620      	mov	r0, r4
 80158d8:	4629      	mov	r1, r5
 80158da:	f7eb f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80158de:	b918      	cbnz	r0, 80158e8 <__cvt+0x8c>
 80158e0:	f1c6 0601 	rsb	r6, r6, #1
 80158e4:	f8ca 6000 	str.w	r6, [sl]
 80158e8:	f8da 3000 	ldr.w	r3, [sl]
 80158ec:	4499      	add	r9, r3
 80158ee:	2200      	movs	r2, #0
 80158f0:	2300      	movs	r3, #0
 80158f2:	4620      	mov	r0, r4
 80158f4:	4629      	mov	r1, r5
 80158f6:	f7eb f8e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80158fa:	b108      	cbz	r0, 8015900 <__cvt+0xa4>
 80158fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8015900:	2230      	movs	r2, #48	; 0x30
 8015902:	9b03      	ldr	r3, [sp, #12]
 8015904:	454b      	cmp	r3, r9
 8015906:	d307      	bcc.n	8015918 <__cvt+0xbc>
 8015908:	9b03      	ldr	r3, [sp, #12]
 801590a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801590c:	1bdb      	subs	r3, r3, r7
 801590e:	4638      	mov	r0, r7
 8015910:	6013      	str	r3, [r2, #0]
 8015912:	b004      	add	sp, #16
 8015914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015918:	1c59      	adds	r1, r3, #1
 801591a:	9103      	str	r1, [sp, #12]
 801591c:	701a      	strb	r2, [r3, #0]
 801591e:	e7f0      	b.n	8015902 <__cvt+0xa6>

08015920 <__exponent>:
 8015920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015922:	4603      	mov	r3, r0
 8015924:	2900      	cmp	r1, #0
 8015926:	bfb8      	it	lt
 8015928:	4249      	neglt	r1, r1
 801592a:	f803 2b02 	strb.w	r2, [r3], #2
 801592e:	bfb4      	ite	lt
 8015930:	222d      	movlt	r2, #45	; 0x2d
 8015932:	222b      	movge	r2, #43	; 0x2b
 8015934:	2909      	cmp	r1, #9
 8015936:	7042      	strb	r2, [r0, #1]
 8015938:	dd2a      	ble.n	8015990 <__exponent+0x70>
 801593a:	f10d 0207 	add.w	r2, sp, #7
 801593e:	4617      	mov	r7, r2
 8015940:	260a      	movs	r6, #10
 8015942:	4694      	mov	ip, r2
 8015944:	fb91 f5f6 	sdiv	r5, r1, r6
 8015948:	fb06 1415 	mls	r4, r6, r5, r1
 801594c:	3430      	adds	r4, #48	; 0x30
 801594e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8015952:	460c      	mov	r4, r1
 8015954:	2c63      	cmp	r4, #99	; 0x63
 8015956:	f102 32ff 	add.w	r2, r2, #4294967295
 801595a:	4629      	mov	r1, r5
 801595c:	dcf1      	bgt.n	8015942 <__exponent+0x22>
 801595e:	3130      	adds	r1, #48	; 0x30
 8015960:	f1ac 0402 	sub.w	r4, ip, #2
 8015964:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015968:	1c41      	adds	r1, r0, #1
 801596a:	4622      	mov	r2, r4
 801596c:	42ba      	cmp	r2, r7
 801596e:	d30a      	bcc.n	8015986 <__exponent+0x66>
 8015970:	f10d 0209 	add.w	r2, sp, #9
 8015974:	eba2 020c 	sub.w	r2, r2, ip
 8015978:	42bc      	cmp	r4, r7
 801597a:	bf88      	it	hi
 801597c:	2200      	movhi	r2, #0
 801597e:	4413      	add	r3, r2
 8015980:	1a18      	subs	r0, r3, r0
 8015982:	b003      	add	sp, #12
 8015984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015986:	f812 5b01 	ldrb.w	r5, [r2], #1
 801598a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801598e:	e7ed      	b.n	801596c <__exponent+0x4c>
 8015990:	2330      	movs	r3, #48	; 0x30
 8015992:	3130      	adds	r1, #48	; 0x30
 8015994:	7083      	strb	r3, [r0, #2]
 8015996:	70c1      	strb	r1, [r0, #3]
 8015998:	1d03      	adds	r3, r0, #4
 801599a:	e7f1      	b.n	8015980 <__exponent+0x60>

0801599c <_printf_float>:
 801599c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159a0:	ed2d 8b02 	vpush	{d8}
 80159a4:	b08d      	sub	sp, #52	; 0x34
 80159a6:	460c      	mov	r4, r1
 80159a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80159ac:	4616      	mov	r6, r2
 80159ae:	461f      	mov	r7, r3
 80159b0:	4605      	mov	r5, r0
 80159b2:	f000 ffaf 	bl	8016914 <_localeconv_r>
 80159b6:	f8d0 a000 	ldr.w	sl, [r0]
 80159ba:	4650      	mov	r0, sl
 80159bc:	f7ea fc58 	bl	8000270 <strlen>
 80159c0:	2300      	movs	r3, #0
 80159c2:	930a      	str	r3, [sp, #40]	; 0x28
 80159c4:	6823      	ldr	r3, [r4, #0]
 80159c6:	9305      	str	r3, [sp, #20]
 80159c8:	f8d8 3000 	ldr.w	r3, [r8]
 80159cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80159d0:	3307      	adds	r3, #7
 80159d2:	f023 0307 	bic.w	r3, r3, #7
 80159d6:	f103 0208 	add.w	r2, r3, #8
 80159da:	f8c8 2000 	str.w	r2, [r8]
 80159de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80159e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80159e6:	9307      	str	r3, [sp, #28]
 80159e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80159ec:	ee08 0a10 	vmov	s16, r0
 80159f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80159f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80159f8:	4b9e      	ldr	r3, [pc, #632]	; (8015c74 <_printf_float+0x2d8>)
 80159fa:	f04f 32ff 	mov.w	r2, #4294967295
 80159fe:	f7eb f895 	bl	8000b2c <__aeabi_dcmpun>
 8015a02:	bb88      	cbnz	r0, 8015a68 <_printf_float+0xcc>
 8015a04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a08:	4b9a      	ldr	r3, [pc, #616]	; (8015c74 <_printf_float+0x2d8>)
 8015a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8015a0e:	f7eb f86f 	bl	8000af0 <__aeabi_dcmple>
 8015a12:	bb48      	cbnz	r0, 8015a68 <_printf_float+0xcc>
 8015a14:	2200      	movs	r2, #0
 8015a16:	2300      	movs	r3, #0
 8015a18:	4640      	mov	r0, r8
 8015a1a:	4649      	mov	r1, r9
 8015a1c:	f7eb f85e 	bl	8000adc <__aeabi_dcmplt>
 8015a20:	b110      	cbz	r0, 8015a28 <_printf_float+0x8c>
 8015a22:	232d      	movs	r3, #45	; 0x2d
 8015a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a28:	4a93      	ldr	r2, [pc, #588]	; (8015c78 <_printf_float+0x2dc>)
 8015a2a:	4b94      	ldr	r3, [pc, #592]	; (8015c7c <_printf_float+0x2e0>)
 8015a2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015a30:	bf94      	ite	ls
 8015a32:	4690      	movls	r8, r2
 8015a34:	4698      	movhi	r8, r3
 8015a36:	2303      	movs	r3, #3
 8015a38:	6123      	str	r3, [r4, #16]
 8015a3a:	9b05      	ldr	r3, [sp, #20]
 8015a3c:	f023 0304 	bic.w	r3, r3, #4
 8015a40:	6023      	str	r3, [r4, #0]
 8015a42:	f04f 0900 	mov.w	r9, #0
 8015a46:	9700      	str	r7, [sp, #0]
 8015a48:	4633      	mov	r3, r6
 8015a4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8015a4c:	4621      	mov	r1, r4
 8015a4e:	4628      	mov	r0, r5
 8015a50:	f000 f9da 	bl	8015e08 <_printf_common>
 8015a54:	3001      	adds	r0, #1
 8015a56:	f040 8090 	bne.w	8015b7a <_printf_float+0x1de>
 8015a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8015a5e:	b00d      	add	sp, #52	; 0x34
 8015a60:	ecbd 8b02 	vpop	{d8}
 8015a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a68:	4642      	mov	r2, r8
 8015a6a:	464b      	mov	r3, r9
 8015a6c:	4640      	mov	r0, r8
 8015a6e:	4649      	mov	r1, r9
 8015a70:	f7eb f85c 	bl	8000b2c <__aeabi_dcmpun>
 8015a74:	b140      	cbz	r0, 8015a88 <_printf_float+0xec>
 8015a76:	464b      	mov	r3, r9
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	bfbc      	itt	lt
 8015a7c:	232d      	movlt	r3, #45	; 0x2d
 8015a7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015a82:	4a7f      	ldr	r2, [pc, #508]	; (8015c80 <_printf_float+0x2e4>)
 8015a84:	4b7f      	ldr	r3, [pc, #508]	; (8015c84 <_printf_float+0x2e8>)
 8015a86:	e7d1      	b.n	8015a2c <_printf_float+0x90>
 8015a88:	6863      	ldr	r3, [r4, #4]
 8015a8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015a8e:	9206      	str	r2, [sp, #24]
 8015a90:	1c5a      	adds	r2, r3, #1
 8015a92:	d13f      	bne.n	8015b14 <_printf_float+0x178>
 8015a94:	2306      	movs	r3, #6
 8015a96:	6063      	str	r3, [r4, #4]
 8015a98:	9b05      	ldr	r3, [sp, #20]
 8015a9a:	6861      	ldr	r1, [r4, #4]
 8015a9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	9303      	str	r3, [sp, #12]
 8015aa4:	ab0a      	add	r3, sp, #40	; 0x28
 8015aa6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8015aaa:	ab09      	add	r3, sp, #36	; 0x24
 8015aac:	ec49 8b10 	vmov	d0, r8, r9
 8015ab0:	9300      	str	r3, [sp, #0]
 8015ab2:	6022      	str	r2, [r4, #0]
 8015ab4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015ab8:	4628      	mov	r0, r5
 8015aba:	f7ff fecf 	bl	801585c <__cvt>
 8015abe:	9b06      	ldr	r3, [sp, #24]
 8015ac0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ac2:	2b47      	cmp	r3, #71	; 0x47
 8015ac4:	4680      	mov	r8, r0
 8015ac6:	d108      	bne.n	8015ada <_printf_float+0x13e>
 8015ac8:	1cc8      	adds	r0, r1, #3
 8015aca:	db02      	blt.n	8015ad2 <_printf_float+0x136>
 8015acc:	6863      	ldr	r3, [r4, #4]
 8015ace:	4299      	cmp	r1, r3
 8015ad0:	dd41      	ble.n	8015b56 <_printf_float+0x1ba>
 8015ad2:	f1ab 0302 	sub.w	r3, fp, #2
 8015ad6:	fa5f fb83 	uxtb.w	fp, r3
 8015ada:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015ade:	d820      	bhi.n	8015b22 <_printf_float+0x186>
 8015ae0:	3901      	subs	r1, #1
 8015ae2:	465a      	mov	r2, fp
 8015ae4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015ae8:	9109      	str	r1, [sp, #36]	; 0x24
 8015aea:	f7ff ff19 	bl	8015920 <__exponent>
 8015aee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015af0:	1813      	adds	r3, r2, r0
 8015af2:	2a01      	cmp	r2, #1
 8015af4:	4681      	mov	r9, r0
 8015af6:	6123      	str	r3, [r4, #16]
 8015af8:	dc02      	bgt.n	8015b00 <_printf_float+0x164>
 8015afa:	6822      	ldr	r2, [r4, #0]
 8015afc:	07d2      	lsls	r2, r2, #31
 8015afe:	d501      	bpl.n	8015b04 <_printf_float+0x168>
 8015b00:	3301      	adds	r3, #1
 8015b02:	6123      	str	r3, [r4, #16]
 8015b04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d09c      	beq.n	8015a46 <_printf_float+0xaa>
 8015b0c:	232d      	movs	r3, #45	; 0x2d
 8015b0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b12:	e798      	b.n	8015a46 <_printf_float+0xaa>
 8015b14:	9a06      	ldr	r2, [sp, #24]
 8015b16:	2a47      	cmp	r2, #71	; 0x47
 8015b18:	d1be      	bne.n	8015a98 <_printf_float+0xfc>
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d1bc      	bne.n	8015a98 <_printf_float+0xfc>
 8015b1e:	2301      	movs	r3, #1
 8015b20:	e7b9      	b.n	8015a96 <_printf_float+0xfa>
 8015b22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015b26:	d118      	bne.n	8015b5a <_printf_float+0x1be>
 8015b28:	2900      	cmp	r1, #0
 8015b2a:	6863      	ldr	r3, [r4, #4]
 8015b2c:	dd0b      	ble.n	8015b46 <_printf_float+0x1aa>
 8015b2e:	6121      	str	r1, [r4, #16]
 8015b30:	b913      	cbnz	r3, 8015b38 <_printf_float+0x19c>
 8015b32:	6822      	ldr	r2, [r4, #0]
 8015b34:	07d0      	lsls	r0, r2, #31
 8015b36:	d502      	bpl.n	8015b3e <_printf_float+0x1a2>
 8015b38:	3301      	adds	r3, #1
 8015b3a:	440b      	add	r3, r1
 8015b3c:	6123      	str	r3, [r4, #16]
 8015b3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8015b40:	f04f 0900 	mov.w	r9, #0
 8015b44:	e7de      	b.n	8015b04 <_printf_float+0x168>
 8015b46:	b913      	cbnz	r3, 8015b4e <_printf_float+0x1b2>
 8015b48:	6822      	ldr	r2, [r4, #0]
 8015b4a:	07d2      	lsls	r2, r2, #31
 8015b4c:	d501      	bpl.n	8015b52 <_printf_float+0x1b6>
 8015b4e:	3302      	adds	r3, #2
 8015b50:	e7f4      	b.n	8015b3c <_printf_float+0x1a0>
 8015b52:	2301      	movs	r3, #1
 8015b54:	e7f2      	b.n	8015b3c <_printf_float+0x1a0>
 8015b56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b5c:	4299      	cmp	r1, r3
 8015b5e:	db05      	blt.n	8015b6c <_printf_float+0x1d0>
 8015b60:	6823      	ldr	r3, [r4, #0]
 8015b62:	6121      	str	r1, [r4, #16]
 8015b64:	07d8      	lsls	r0, r3, #31
 8015b66:	d5ea      	bpl.n	8015b3e <_printf_float+0x1a2>
 8015b68:	1c4b      	adds	r3, r1, #1
 8015b6a:	e7e7      	b.n	8015b3c <_printf_float+0x1a0>
 8015b6c:	2900      	cmp	r1, #0
 8015b6e:	bfd4      	ite	le
 8015b70:	f1c1 0202 	rsble	r2, r1, #2
 8015b74:	2201      	movgt	r2, #1
 8015b76:	4413      	add	r3, r2
 8015b78:	e7e0      	b.n	8015b3c <_printf_float+0x1a0>
 8015b7a:	6823      	ldr	r3, [r4, #0]
 8015b7c:	055a      	lsls	r2, r3, #21
 8015b7e:	d407      	bmi.n	8015b90 <_printf_float+0x1f4>
 8015b80:	6923      	ldr	r3, [r4, #16]
 8015b82:	4642      	mov	r2, r8
 8015b84:	4631      	mov	r1, r6
 8015b86:	4628      	mov	r0, r5
 8015b88:	47b8      	blx	r7
 8015b8a:	3001      	adds	r0, #1
 8015b8c:	d12c      	bne.n	8015be8 <_printf_float+0x24c>
 8015b8e:	e764      	b.n	8015a5a <_printf_float+0xbe>
 8015b90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015b94:	f240 80e0 	bls.w	8015d58 <_printf_float+0x3bc>
 8015b98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	f7ea ff92 	bl	8000ac8 <__aeabi_dcmpeq>
 8015ba4:	2800      	cmp	r0, #0
 8015ba6:	d034      	beq.n	8015c12 <_printf_float+0x276>
 8015ba8:	4a37      	ldr	r2, [pc, #220]	; (8015c88 <_printf_float+0x2ec>)
 8015baa:	2301      	movs	r3, #1
 8015bac:	4631      	mov	r1, r6
 8015bae:	4628      	mov	r0, r5
 8015bb0:	47b8      	blx	r7
 8015bb2:	3001      	adds	r0, #1
 8015bb4:	f43f af51 	beq.w	8015a5a <_printf_float+0xbe>
 8015bb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015bbc:	429a      	cmp	r2, r3
 8015bbe:	db02      	blt.n	8015bc6 <_printf_float+0x22a>
 8015bc0:	6823      	ldr	r3, [r4, #0]
 8015bc2:	07d8      	lsls	r0, r3, #31
 8015bc4:	d510      	bpl.n	8015be8 <_printf_float+0x24c>
 8015bc6:	ee18 3a10 	vmov	r3, s16
 8015bca:	4652      	mov	r2, sl
 8015bcc:	4631      	mov	r1, r6
 8015bce:	4628      	mov	r0, r5
 8015bd0:	47b8      	blx	r7
 8015bd2:	3001      	adds	r0, #1
 8015bd4:	f43f af41 	beq.w	8015a5a <_printf_float+0xbe>
 8015bd8:	f04f 0800 	mov.w	r8, #0
 8015bdc:	f104 091a 	add.w	r9, r4, #26
 8015be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015be2:	3b01      	subs	r3, #1
 8015be4:	4543      	cmp	r3, r8
 8015be6:	dc09      	bgt.n	8015bfc <_printf_float+0x260>
 8015be8:	6823      	ldr	r3, [r4, #0]
 8015bea:	079b      	lsls	r3, r3, #30
 8015bec:	f100 8107 	bmi.w	8015dfe <_printf_float+0x462>
 8015bf0:	68e0      	ldr	r0, [r4, #12]
 8015bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bf4:	4298      	cmp	r0, r3
 8015bf6:	bfb8      	it	lt
 8015bf8:	4618      	movlt	r0, r3
 8015bfa:	e730      	b.n	8015a5e <_printf_float+0xc2>
 8015bfc:	2301      	movs	r3, #1
 8015bfe:	464a      	mov	r2, r9
 8015c00:	4631      	mov	r1, r6
 8015c02:	4628      	mov	r0, r5
 8015c04:	47b8      	blx	r7
 8015c06:	3001      	adds	r0, #1
 8015c08:	f43f af27 	beq.w	8015a5a <_printf_float+0xbe>
 8015c0c:	f108 0801 	add.w	r8, r8, #1
 8015c10:	e7e6      	b.n	8015be0 <_printf_float+0x244>
 8015c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	dc39      	bgt.n	8015c8c <_printf_float+0x2f0>
 8015c18:	4a1b      	ldr	r2, [pc, #108]	; (8015c88 <_printf_float+0x2ec>)
 8015c1a:	2301      	movs	r3, #1
 8015c1c:	4631      	mov	r1, r6
 8015c1e:	4628      	mov	r0, r5
 8015c20:	47b8      	blx	r7
 8015c22:	3001      	adds	r0, #1
 8015c24:	f43f af19 	beq.w	8015a5a <_printf_float+0xbe>
 8015c28:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015c2c:	4313      	orrs	r3, r2
 8015c2e:	d102      	bne.n	8015c36 <_printf_float+0x29a>
 8015c30:	6823      	ldr	r3, [r4, #0]
 8015c32:	07d9      	lsls	r1, r3, #31
 8015c34:	d5d8      	bpl.n	8015be8 <_printf_float+0x24c>
 8015c36:	ee18 3a10 	vmov	r3, s16
 8015c3a:	4652      	mov	r2, sl
 8015c3c:	4631      	mov	r1, r6
 8015c3e:	4628      	mov	r0, r5
 8015c40:	47b8      	blx	r7
 8015c42:	3001      	adds	r0, #1
 8015c44:	f43f af09 	beq.w	8015a5a <_printf_float+0xbe>
 8015c48:	f04f 0900 	mov.w	r9, #0
 8015c4c:	f104 0a1a 	add.w	sl, r4, #26
 8015c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c52:	425b      	negs	r3, r3
 8015c54:	454b      	cmp	r3, r9
 8015c56:	dc01      	bgt.n	8015c5c <_printf_float+0x2c0>
 8015c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c5a:	e792      	b.n	8015b82 <_printf_float+0x1e6>
 8015c5c:	2301      	movs	r3, #1
 8015c5e:	4652      	mov	r2, sl
 8015c60:	4631      	mov	r1, r6
 8015c62:	4628      	mov	r0, r5
 8015c64:	47b8      	blx	r7
 8015c66:	3001      	adds	r0, #1
 8015c68:	f43f aef7 	beq.w	8015a5a <_printf_float+0xbe>
 8015c6c:	f109 0901 	add.w	r9, r9, #1
 8015c70:	e7ee      	b.n	8015c50 <_printf_float+0x2b4>
 8015c72:	bf00      	nop
 8015c74:	7fefffff 	.word	0x7fefffff
 8015c78:	0801ce49 	.word	0x0801ce49
 8015c7c:	0801ce4d 	.word	0x0801ce4d
 8015c80:	0801ce51 	.word	0x0801ce51
 8015c84:	0801ce55 	.word	0x0801ce55
 8015c88:	0801ce59 	.word	0x0801ce59
 8015c8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015c90:	429a      	cmp	r2, r3
 8015c92:	bfa8      	it	ge
 8015c94:	461a      	movge	r2, r3
 8015c96:	2a00      	cmp	r2, #0
 8015c98:	4691      	mov	r9, r2
 8015c9a:	dc37      	bgt.n	8015d0c <_printf_float+0x370>
 8015c9c:	f04f 0b00 	mov.w	fp, #0
 8015ca0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015ca4:	f104 021a 	add.w	r2, r4, #26
 8015ca8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015caa:	9305      	str	r3, [sp, #20]
 8015cac:	eba3 0309 	sub.w	r3, r3, r9
 8015cb0:	455b      	cmp	r3, fp
 8015cb2:	dc33      	bgt.n	8015d1c <_printf_float+0x380>
 8015cb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015cb8:	429a      	cmp	r2, r3
 8015cba:	db3b      	blt.n	8015d34 <_printf_float+0x398>
 8015cbc:	6823      	ldr	r3, [r4, #0]
 8015cbe:	07da      	lsls	r2, r3, #31
 8015cc0:	d438      	bmi.n	8015d34 <_printf_float+0x398>
 8015cc2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015cc6:	eba2 0903 	sub.w	r9, r2, r3
 8015cca:	9b05      	ldr	r3, [sp, #20]
 8015ccc:	1ad2      	subs	r2, r2, r3
 8015cce:	4591      	cmp	r9, r2
 8015cd0:	bfa8      	it	ge
 8015cd2:	4691      	movge	r9, r2
 8015cd4:	f1b9 0f00 	cmp.w	r9, #0
 8015cd8:	dc35      	bgt.n	8015d46 <_printf_float+0x3aa>
 8015cda:	f04f 0800 	mov.w	r8, #0
 8015cde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015ce2:	f104 0a1a 	add.w	sl, r4, #26
 8015ce6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015cea:	1a9b      	subs	r3, r3, r2
 8015cec:	eba3 0309 	sub.w	r3, r3, r9
 8015cf0:	4543      	cmp	r3, r8
 8015cf2:	f77f af79 	ble.w	8015be8 <_printf_float+0x24c>
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	4652      	mov	r2, sl
 8015cfa:	4631      	mov	r1, r6
 8015cfc:	4628      	mov	r0, r5
 8015cfe:	47b8      	blx	r7
 8015d00:	3001      	adds	r0, #1
 8015d02:	f43f aeaa 	beq.w	8015a5a <_printf_float+0xbe>
 8015d06:	f108 0801 	add.w	r8, r8, #1
 8015d0a:	e7ec      	b.n	8015ce6 <_printf_float+0x34a>
 8015d0c:	4613      	mov	r3, r2
 8015d0e:	4631      	mov	r1, r6
 8015d10:	4642      	mov	r2, r8
 8015d12:	4628      	mov	r0, r5
 8015d14:	47b8      	blx	r7
 8015d16:	3001      	adds	r0, #1
 8015d18:	d1c0      	bne.n	8015c9c <_printf_float+0x300>
 8015d1a:	e69e      	b.n	8015a5a <_printf_float+0xbe>
 8015d1c:	2301      	movs	r3, #1
 8015d1e:	4631      	mov	r1, r6
 8015d20:	4628      	mov	r0, r5
 8015d22:	9205      	str	r2, [sp, #20]
 8015d24:	47b8      	blx	r7
 8015d26:	3001      	adds	r0, #1
 8015d28:	f43f ae97 	beq.w	8015a5a <_printf_float+0xbe>
 8015d2c:	9a05      	ldr	r2, [sp, #20]
 8015d2e:	f10b 0b01 	add.w	fp, fp, #1
 8015d32:	e7b9      	b.n	8015ca8 <_printf_float+0x30c>
 8015d34:	ee18 3a10 	vmov	r3, s16
 8015d38:	4652      	mov	r2, sl
 8015d3a:	4631      	mov	r1, r6
 8015d3c:	4628      	mov	r0, r5
 8015d3e:	47b8      	blx	r7
 8015d40:	3001      	adds	r0, #1
 8015d42:	d1be      	bne.n	8015cc2 <_printf_float+0x326>
 8015d44:	e689      	b.n	8015a5a <_printf_float+0xbe>
 8015d46:	9a05      	ldr	r2, [sp, #20]
 8015d48:	464b      	mov	r3, r9
 8015d4a:	4442      	add	r2, r8
 8015d4c:	4631      	mov	r1, r6
 8015d4e:	4628      	mov	r0, r5
 8015d50:	47b8      	blx	r7
 8015d52:	3001      	adds	r0, #1
 8015d54:	d1c1      	bne.n	8015cda <_printf_float+0x33e>
 8015d56:	e680      	b.n	8015a5a <_printf_float+0xbe>
 8015d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d5a:	2a01      	cmp	r2, #1
 8015d5c:	dc01      	bgt.n	8015d62 <_printf_float+0x3c6>
 8015d5e:	07db      	lsls	r3, r3, #31
 8015d60:	d53a      	bpl.n	8015dd8 <_printf_float+0x43c>
 8015d62:	2301      	movs	r3, #1
 8015d64:	4642      	mov	r2, r8
 8015d66:	4631      	mov	r1, r6
 8015d68:	4628      	mov	r0, r5
 8015d6a:	47b8      	blx	r7
 8015d6c:	3001      	adds	r0, #1
 8015d6e:	f43f ae74 	beq.w	8015a5a <_printf_float+0xbe>
 8015d72:	ee18 3a10 	vmov	r3, s16
 8015d76:	4652      	mov	r2, sl
 8015d78:	4631      	mov	r1, r6
 8015d7a:	4628      	mov	r0, r5
 8015d7c:	47b8      	blx	r7
 8015d7e:	3001      	adds	r0, #1
 8015d80:	f43f ae6b 	beq.w	8015a5a <_printf_float+0xbe>
 8015d84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015d88:	2200      	movs	r2, #0
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8015d90:	f7ea fe9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8015d94:	b9d8      	cbnz	r0, 8015dce <_printf_float+0x432>
 8015d96:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015d9a:	f108 0201 	add.w	r2, r8, #1
 8015d9e:	4631      	mov	r1, r6
 8015da0:	4628      	mov	r0, r5
 8015da2:	47b8      	blx	r7
 8015da4:	3001      	adds	r0, #1
 8015da6:	d10e      	bne.n	8015dc6 <_printf_float+0x42a>
 8015da8:	e657      	b.n	8015a5a <_printf_float+0xbe>
 8015daa:	2301      	movs	r3, #1
 8015dac:	4652      	mov	r2, sl
 8015dae:	4631      	mov	r1, r6
 8015db0:	4628      	mov	r0, r5
 8015db2:	47b8      	blx	r7
 8015db4:	3001      	adds	r0, #1
 8015db6:	f43f ae50 	beq.w	8015a5a <_printf_float+0xbe>
 8015dba:	f108 0801 	add.w	r8, r8, #1
 8015dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dc0:	3b01      	subs	r3, #1
 8015dc2:	4543      	cmp	r3, r8
 8015dc4:	dcf1      	bgt.n	8015daa <_printf_float+0x40e>
 8015dc6:	464b      	mov	r3, r9
 8015dc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015dcc:	e6da      	b.n	8015b84 <_printf_float+0x1e8>
 8015dce:	f04f 0800 	mov.w	r8, #0
 8015dd2:	f104 0a1a 	add.w	sl, r4, #26
 8015dd6:	e7f2      	b.n	8015dbe <_printf_float+0x422>
 8015dd8:	2301      	movs	r3, #1
 8015dda:	4642      	mov	r2, r8
 8015ddc:	e7df      	b.n	8015d9e <_printf_float+0x402>
 8015dde:	2301      	movs	r3, #1
 8015de0:	464a      	mov	r2, r9
 8015de2:	4631      	mov	r1, r6
 8015de4:	4628      	mov	r0, r5
 8015de6:	47b8      	blx	r7
 8015de8:	3001      	adds	r0, #1
 8015dea:	f43f ae36 	beq.w	8015a5a <_printf_float+0xbe>
 8015dee:	f108 0801 	add.w	r8, r8, #1
 8015df2:	68e3      	ldr	r3, [r4, #12]
 8015df4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015df6:	1a5b      	subs	r3, r3, r1
 8015df8:	4543      	cmp	r3, r8
 8015dfa:	dcf0      	bgt.n	8015dde <_printf_float+0x442>
 8015dfc:	e6f8      	b.n	8015bf0 <_printf_float+0x254>
 8015dfe:	f04f 0800 	mov.w	r8, #0
 8015e02:	f104 0919 	add.w	r9, r4, #25
 8015e06:	e7f4      	b.n	8015df2 <_printf_float+0x456>

08015e08 <_printf_common>:
 8015e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e0c:	4616      	mov	r6, r2
 8015e0e:	4699      	mov	r9, r3
 8015e10:	688a      	ldr	r2, [r1, #8]
 8015e12:	690b      	ldr	r3, [r1, #16]
 8015e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015e18:	4293      	cmp	r3, r2
 8015e1a:	bfb8      	it	lt
 8015e1c:	4613      	movlt	r3, r2
 8015e1e:	6033      	str	r3, [r6, #0]
 8015e20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015e24:	4607      	mov	r7, r0
 8015e26:	460c      	mov	r4, r1
 8015e28:	b10a      	cbz	r2, 8015e2e <_printf_common+0x26>
 8015e2a:	3301      	adds	r3, #1
 8015e2c:	6033      	str	r3, [r6, #0]
 8015e2e:	6823      	ldr	r3, [r4, #0]
 8015e30:	0699      	lsls	r1, r3, #26
 8015e32:	bf42      	ittt	mi
 8015e34:	6833      	ldrmi	r3, [r6, #0]
 8015e36:	3302      	addmi	r3, #2
 8015e38:	6033      	strmi	r3, [r6, #0]
 8015e3a:	6825      	ldr	r5, [r4, #0]
 8015e3c:	f015 0506 	ands.w	r5, r5, #6
 8015e40:	d106      	bne.n	8015e50 <_printf_common+0x48>
 8015e42:	f104 0a19 	add.w	sl, r4, #25
 8015e46:	68e3      	ldr	r3, [r4, #12]
 8015e48:	6832      	ldr	r2, [r6, #0]
 8015e4a:	1a9b      	subs	r3, r3, r2
 8015e4c:	42ab      	cmp	r3, r5
 8015e4e:	dc26      	bgt.n	8015e9e <_printf_common+0x96>
 8015e50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015e54:	1e13      	subs	r3, r2, #0
 8015e56:	6822      	ldr	r2, [r4, #0]
 8015e58:	bf18      	it	ne
 8015e5a:	2301      	movne	r3, #1
 8015e5c:	0692      	lsls	r2, r2, #26
 8015e5e:	d42b      	bmi.n	8015eb8 <_printf_common+0xb0>
 8015e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015e64:	4649      	mov	r1, r9
 8015e66:	4638      	mov	r0, r7
 8015e68:	47c0      	blx	r8
 8015e6a:	3001      	adds	r0, #1
 8015e6c:	d01e      	beq.n	8015eac <_printf_common+0xa4>
 8015e6e:	6823      	ldr	r3, [r4, #0]
 8015e70:	6922      	ldr	r2, [r4, #16]
 8015e72:	f003 0306 	and.w	r3, r3, #6
 8015e76:	2b04      	cmp	r3, #4
 8015e78:	bf02      	ittt	eq
 8015e7a:	68e5      	ldreq	r5, [r4, #12]
 8015e7c:	6833      	ldreq	r3, [r6, #0]
 8015e7e:	1aed      	subeq	r5, r5, r3
 8015e80:	68a3      	ldr	r3, [r4, #8]
 8015e82:	bf0c      	ite	eq
 8015e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015e88:	2500      	movne	r5, #0
 8015e8a:	4293      	cmp	r3, r2
 8015e8c:	bfc4      	itt	gt
 8015e8e:	1a9b      	subgt	r3, r3, r2
 8015e90:	18ed      	addgt	r5, r5, r3
 8015e92:	2600      	movs	r6, #0
 8015e94:	341a      	adds	r4, #26
 8015e96:	42b5      	cmp	r5, r6
 8015e98:	d11a      	bne.n	8015ed0 <_printf_common+0xc8>
 8015e9a:	2000      	movs	r0, #0
 8015e9c:	e008      	b.n	8015eb0 <_printf_common+0xa8>
 8015e9e:	2301      	movs	r3, #1
 8015ea0:	4652      	mov	r2, sl
 8015ea2:	4649      	mov	r1, r9
 8015ea4:	4638      	mov	r0, r7
 8015ea6:	47c0      	blx	r8
 8015ea8:	3001      	adds	r0, #1
 8015eaa:	d103      	bne.n	8015eb4 <_printf_common+0xac>
 8015eac:	f04f 30ff 	mov.w	r0, #4294967295
 8015eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eb4:	3501      	adds	r5, #1
 8015eb6:	e7c6      	b.n	8015e46 <_printf_common+0x3e>
 8015eb8:	18e1      	adds	r1, r4, r3
 8015eba:	1c5a      	adds	r2, r3, #1
 8015ebc:	2030      	movs	r0, #48	; 0x30
 8015ebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015ec2:	4422      	add	r2, r4
 8015ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015ec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015ecc:	3302      	adds	r3, #2
 8015ece:	e7c7      	b.n	8015e60 <_printf_common+0x58>
 8015ed0:	2301      	movs	r3, #1
 8015ed2:	4622      	mov	r2, r4
 8015ed4:	4649      	mov	r1, r9
 8015ed6:	4638      	mov	r0, r7
 8015ed8:	47c0      	blx	r8
 8015eda:	3001      	adds	r0, #1
 8015edc:	d0e6      	beq.n	8015eac <_printf_common+0xa4>
 8015ede:	3601      	adds	r6, #1
 8015ee0:	e7d9      	b.n	8015e96 <_printf_common+0x8e>
	...

08015ee4 <_printf_i>:
 8015ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015ee8:	7e0f      	ldrb	r7, [r1, #24]
 8015eea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015eec:	2f78      	cmp	r7, #120	; 0x78
 8015eee:	4691      	mov	r9, r2
 8015ef0:	4680      	mov	r8, r0
 8015ef2:	460c      	mov	r4, r1
 8015ef4:	469a      	mov	sl, r3
 8015ef6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015efa:	d807      	bhi.n	8015f0c <_printf_i+0x28>
 8015efc:	2f62      	cmp	r7, #98	; 0x62
 8015efe:	d80a      	bhi.n	8015f16 <_printf_i+0x32>
 8015f00:	2f00      	cmp	r7, #0
 8015f02:	f000 80d4 	beq.w	80160ae <_printf_i+0x1ca>
 8015f06:	2f58      	cmp	r7, #88	; 0x58
 8015f08:	f000 80c0 	beq.w	801608c <_printf_i+0x1a8>
 8015f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015f14:	e03a      	b.n	8015f8c <_printf_i+0xa8>
 8015f16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015f1a:	2b15      	cmp	r3, #21
 8015f1c:	d8f6      	bhi.n	8015f0c <_printf_i+0x28>
 8015f1e:	a101      	add	r1, pc, #4	; (adr r1, 8015f24 <_printf_i+0x40>)
 8015f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015f24:	08015f7d 	.word	0x08015f7d
 8015f28:	08015f91 	.word	0x08015f91
 8015f2c:	08015f0d 	.word	0x08015f0d
 8015f30:	08015f0d 	.word	0x08015f0d
 8015f34:	08015f0d 	.word	0x08015f0d
 8015f38:	08015f0d 	.word	0x08015f0d
 8015f3c:	08015f91 	.word	0x08015f91
 8015f40:	08015f0d 	.word	0x08015f0d
 8015f44:	08015f0d 	.word	0x08015f0d
 8015f48:	08015f0d 	.word	0x08015f0d
 8015f4c:	08015f0d 	.word	0x08015f0d
 8015f50:	08016095 	.word	0x08016095
 8015f54:	08015fbd 	.word	0x08015fbd
 8015f58:	0801604f 	.word	0x0801604f
 8015f5c:	08015f0d 	.word	0x08015f0d
 8015f60:	08015f0d 	.word	0x08015f0d
 8015f64:	080160b7 	.word	0x080160b7
 8015f68:	08015f0d 	.word	0x08015f0d
 8015f6c:	08015fbd 	.word	0x08015fbd
 8015f70:	08015f0d 	.word	0x08015f0d
 8015f74:	08015f0d 	.word	0x08015f0d
 8015f78:	08016057 	.word	0x08016057
 8015f7c:	682b      	ldr	r3, [r5, #0]
 8015f7e:	1d1a      	adds	r2, r3, #4
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	602a      	str	r2, [r5, #0]
 8015f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015f8c:	2301      	movs	r3, #1
 8015f8e:	e09f      	b.n	80160d0 <_printf_i+0x1ec>
 8015f90:	6820      	ldr	r0, [r4, #0]
 8015f92:	682b      	ldr	r3, [r5, #0]
 8015f94:	0607      	lsls	r7, r0, #24
 8015f96:	f103 0104 	add.w	r1, r3, #4
 8015f9a:	6029      	str	r1, [r5, #0]
 8015f9c:	d501      	bpl.n	8015fa2 <_printf_i+0xbe>
 8015f9e:	681e      	ldr	r6, [r3, #0]
 8015fa0:	e003      	b.n	8015faa <_printf_i+0xc6>
 8015fa2:	0646      	lsls	r6, r0, #25
 8015fa4:	d5fb      	bpl.n	8015f9e <_printf_i+0xba>
 8015fa6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015faa:	2e00      	cmp	r6, #0
 8015fac:	da03      	bge.n	8015fb6 <_printf_i+0xd2>
 8015fae:	232d      	movs	r3, #45	; 0x2d
 8015fb0:	4276      	negs	r6, r6
 8015fb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015fb6:	485a      	ldr	r0, [pc, #360]	; (8016120 <_printf_i+0x23c>)
 8015fb8:	230a      	movs	r3, #10
 8015fba:	e012      	b.n	8015fe2 <_printf_i+0xfe>
 8015fbc:	682b      	ldr	r3, [r5, #0]
 8015fbe:	6820      	ldr	r0, [r4, #0]
 8015fc0:	1d19      	adds	r1, r3, #4
 8015fc2:	6029      	str	r1, [r5, #0]
 8015fc4:	0605      	lsls	r5, r0, #24
 8015fc6:	d501      	bpl.n	8015fcc <_printf_i+0xe8>
 8015fc8:	681e      	ldr	r6, [r3, #0]
 8015fca:	e002      	b.n	8015fd2 <_printf_i+0xee>
 8015fcc:	0641      	lsls	r1, r0, #25
 8015fce:	d5fb      	bpl.n	8015fc8 <_printf_i+0xe4>
 8015fd0:	881e      	ldrh	r6, [r3, #0]
 8015fd2:	4853      	ldr	r0, [pc, #332]	; (8016120 <_printf_i+0x23c>)
 8015fd4:	2f6f      	cmp	r7, #111	; 0x6f
 8015fd6:	bf0c      	ite	eq
 8015fd8:	2308      	moveq	r3, #8
 8015fda:	230a      	movne	r3, #10
 8015fdc:	2100      	movs	r1, #0
 8015fde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015fe2:	6865      	ldr	r5, [r4, #4]
 8015fe4:	60a5      	str	r5, [r4, #8]
 8015fe6:	2d00      	cmp	r5, #0
 8015fe8:	bfa2      	ittt	ge
 8015fea:	6821      	ldrge	r1, [r4, #0]
 8015fec:	f021 0104 	bicge.w	r1, r1, #4
 8015ff0:	6021      	strge	r1, [r4, #0]
 8015ff2:	b90e      	cbnz	r6, 8015ff8 <_printf_i+0x114>
 8015ff4:	2d00      	cmp	r5, #0
 8015ff6:	d04b      	beq.n	8016090 <_printf_i+0x1ac>
 8015ff8:	4615      	mov	r5, r2
 8015ffa:	fbb6 f1f3 	udiv	r1, r6, r3
 8015ffe:	fb03 6711 	mls	r7, r3, r1, r6
 8016002:	5dc7      	ldrb	r7, [r0, r7]
 8016004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016008:	4637      	mov	r7, r6
 801600a:	42bb      	cmp	r3, r7
 801600c:	460e      	mov	r6, r1
 801600e:	d9f4      	bls.n	8015ffa <_printf_i+0x116>
 8016010:	2b08      	cmp	r3, #8
 8016012:	d10b      	bne.n	801602c <_printf_i+0x148>
 8016014:	6823      	ldr	r3, [r4, #0]
 8016016:	07de      	lsls	r6, r3, #31
 8016018:	d508      	bpl.n	801602c <_printf_i+0x148>
 801601a:	6923      	ldr	r3, [r4, #16]
 801601c:	6861      	ldr	r1, [r4, #4]
 801601e:	4299      	cmp	r1, r3
 8016020:	bfde      	ittt	le
 8016022:	2330      	movle	r3, #48	; 0x30
 8016024:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016028:	f105 35ff 	addle.w	r5, r5, #4294967295
 801602c:	1b52      	subs	r2, r2, r5
 801602e:	6122      	str	r2, [r4, #16]
 8016030:	f8cd a000 	str.w	sl, [sp]
 8016034:	464b      	mov	r3, r9
 8016036:	aa03      	add	r2, sp, #12
 8016038:	4621      	mov	r1, r4
 801603a:	4640      	mov	r0, r8
 801603c:	f7ff fee4 	bl	8015e08 <_printf_common>
 8016040:	3001      	adds	r0, #1
 8016042:	d14a      	bne.n	80160da <_printf_i+0x1f6>
 8016044:	f04f 30ff 	mov.w	r0, #4294967295
 8016048:	b004      	add	sp, #16
 801604a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801604e:	6823      	ldr	r3, [r4, #0]
 8016050:	f043 0320 	orr.w	r3, r3, #32
 8016054:	6023      	str	r3, [r4, #0]
 8016056:	4833      	ldr	r0, [pc, #204]	; (8016124 <_printf_i+0x240>)
 8016058:	2778      	movs	r7, #120	; 0x78
 801605a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801605e:	6823      	ldr	r3, [r4, #0]
 8016060:	6829      	ldr	r1, [r5, #0]
 8016062:	061f      	lsls	r7, r3, #24
 8016064:	f851 6b04 	ldr.w	r6, [r1], #4
 8016068:	d402      	bmi.n	8016070 <_printf_i+0x18c>
 801606a:	065f      	lsls	r7, r3, #25
 801606c:	bf48      	it	mi
 801606e:	b2b6      	uxthmi	r6, r6
 8016070:	07df      	lsls	r7, r3, #31
 8016072:	bf48      	it	mi
 8016074:	f043 0320 	orrmi.w	r3, r3, #32
 8016078:	6029      	str	r1, [r5, #0]
 801607a:	bf48      	it	mi
 801607c:	6023      	strmi	r3, [r4, #0]
 801607e:	b91e      	cbnz	r6, 8016088 <_printf_i+0x1a4>
 8016080:	6823      	ldr	r3, [r4, #0]
 8016082:	f023 0320 	bic.w	r3, r3, #32
 8016086:	6023      	str	r3, [r4, #0]
 8016088:	2310      	movs	r3, #16
 801608a:	e7a7      	b.n	8015fdc <_printf_i+0xf8>
 801608c:	4824      	ldr	r0, [pc, #144]	; (8016120 <_printf_i+0x23c>)
 801608e:	e7e4      	b.n	801605a <_printf_i+0x176>
 8016090:	4615      	mov	r5, r2
 8016092:	e7bd      	b.n	8016010 <_printf_i+0x12c>
 8016094:	682b      	ldr	r3, [r5, #0]
 8016096:	6826      	ldr	r6, [r4, #0]
 8016098:	6961      	ldr	r1, [r4, #20]
 801609a:	1d18      	adds	r0, r3, #4
 801609c:	6028      	str	r0, [r5, #0]
 801609e:	0635      	lsls	r5, r6, #24
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	d501      	bpl.n	80160a8 <_printf_i+0x1c4>
 80160a4:	6019      	str	r1, [r3, #0]
 80160a6:	e002      	b.n	80160ae <_printf_i+0x1ca>
 80160a8:	0670      	lsls	r0, r6, #25
 80160aa:	d5fb      	bpl.n	80160a4 <_printf_i+0x1c0>
 80160ac:	8019      	strh	r1, [r3, #0]
 80160ae:	2300      	movs	r3, #0
 80160b0:	6123      	str	r3, [r4, #16]
 80160b2:	4615      	mov	r5, r2
 80160b4:	e7bc      	b.n	8016030 <_printf_i+0x14c>
 80160b6:	682b      	ldr	r3, [r5, #0]
 80160b8:	1d1a      	adds	r2, r3, #4
 80160ba:	602a      	str	r2, [r5, #0]
 80160bc:	681d      	ldr	r5, [r3, #0]
 80160be:	6862      	ldr	r2, [r4, #4]
 80160c0:	2100      	movs	r1, #0
 80160c2:	4628      	mov	r0, r5
 80160c4:	f7ea f884 	bl	80001d0 <memchr>
 80160c8:	b108      	cbz	r0, 80160ce <_printf_i+0x1ea>
 80160ca:	1b40      	subs	r0, r0, r5
 80160cc:	6060      	str	r0, [r4, #4]
 80160ce:	6863      	ldr	r3, [r4, #4]
 80160d0:	6123      	str	r3, [r4, #16]
 80160d2:	2300      	movs	r3, #0
 80160d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80160d8:	e7aa      	b.n	8016030 <_printf_i+0x14c>
 80160da:	6923      	ldr	r3, [r4, #16]
 80160dc:	462a      	mov	r2, r5
 80160de:	4649      	mov	r1, r9
 80160e0:	4640      	mov	r0, r8
 80160e2:	47d0      	blx	sl
 80160e4:	3001      	adds	r0, #1
 80160e6:	d0ad      	beq.n	8016044 <_printf_i+0x160>
 80160e8:	6823      	ldr	r3, [r4, #0]
 80160ea:	079b      	lsls	r3, r3, #30
 80160ec:	d413      	bmi.n	8016116 <_printf_i+0x232>
 80160ee:	68e0      	ldr	r0, [r4, #12]
 80160f0:	9b03      	ldr	r3, [sp, #12]
 80160f2:	4298      	cmp	r0, r3
 80160f4:	bfb8      	it	lt
 80160f6:	4618      	movlt	r0, r3
 80160f8:	e7a6      	b.n	8016048 <_printf_i+0x164>
 80160fa:	2301      	movs	r3, #1
 80160fc:	4632      	mov	r2, r6
 80160fe:	4649      	mov	r1, r9
 8016100:	4640      	mov	r0, r8
 8016102:	47d0      	blx	sl
 8016104:	3001      	adds	r0, #1
 8016106:	d09d      	beq.n	8016044 <_printf_i+0x160>
 8016108:	3501      	adds	r5, #1
 801610a:	68e3      	ldr	r3, [r4, #12]
 801610c:	9903      	ldr	r1, [sp, #12]
 801610e:	1a5b      	subs	r3, r3, r1
 8016110:	42ab      	cmp	r3, r5
 8016112:	dcf2      	bgt.n	80160fa <_printf_i+0x216>
 8016114:	e7eb      	b.n	80160ee <_printf_i+0x20a>
 8016116:	2500      	movs	r5, #0
 8016118:	f104 0619 	add.w	r6, r4, #25
 801611c:	e7f5      	b.n	801610a <_printf_i+0x226>
 801611e:	bf00      	nop
 8016120:	0801ce5b 	.word	0x0801ce5b
 8016124:	0801ce6c 	.word	0x0801ce6c

08016128 <_scanf_float>:
 8016128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801612c:	b087      	sub	sp, #28
 801612e:	4617      	mov	r7, r2
 8016130:	9303      	str	r3, [sp, #12]
 8016132:	688b      	ldr	r3, [r1, #8]
 8016134:	1e5a      	subs	r2, r3, #1
 8016136:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801613a:	bf83      	ittte	hi
 801613c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016140:	195b      	addhi	r3, r3, r5
 8016142:	9302      	strhi	r3, [sp, #8]
 8016144:	2300      	movls	r3, #0
 8016146:	bf86      	itte	hi
 8016148:	f240 135d 	movwhi	r3, #349	; 0x15d
 801614c:	608b      	strhi	r3, [r1, #8]
 801614e:	9302      	strls	r3, [sp, #8]
 8016150:	680b      	ldr	r3, [r1, #0]
 8016152:	468b      	mov	fp, r1
 8016154:	2500      	movs	r5, #0
 8016156:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801615a:	f84b 3b1c 	str.w	r3, [fp], #28
 801615e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016162:	4680      	mov	r8, r0
 8016164:	460c      	mov	r4, r1
 8016166:	465e      	mov	r6, fp
 8016168:	46aa      	mov	sl, r5
 801616a:	46a9      	mov	r9, r5
 801616c:	9501      	str	r5, [sp, #4]
 801616e:	68a2      	ldr	r2, [r4, #8]
 8016170:	b152      	cbz	r2, 8016188 <_scanf_float+0x60>
 8016172:	683b      	ldr	r3, [r7, #0]
 8016174:	781b      	ldrb	r3, [r3, #0]
 8016176:	2b4e      	cmp	r3, #78	; 0x4e
 8016178:	d864      	bhi.n	8016244 <_scanf_float+0x11c>
 801617a:	2b40      	cmp	r3, #64	; 0x40
 801617c:	d83c      	bhi.n	80161f8 <_scanf_float+0xd0>
 801617e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016182:	b2c8      	uxtb	r0, r1
 8016184:	280e      	cmp	r0, #14
 8016186:	d93a      	bls.n	80161fe <_scanf_float+0xd6>
 8016188:	f1b9 0f00 	cmp.w	r9, #0
 801618c:	d003      	beq.n	8016196 <_scanf_float+0x6e>
 801618e:	6823      	ldr	r3, [r4, #0]
 8016190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016194:	6023      	str	r3, [r4, #0]
 8016196:	f10a 3aff 	add.w	sl, sl, #4294967295
 801619a:	f1ba 0f01 	cmp.w	sl, #1
 801619e:	f200 8113 	bhi.w	80163c8 <_scanf_float+0x2a0>
 80161a2:	455e      	cmp	r6, fp
 80161a4:	f200 8105 	bhi.w	80163b2 <_scanf_float+0x28a>
 80161a8:	2501      	movs	r5, #1
 80161aa:	4628      	mov	r0, r5
 80161ac:	b007      	add	sp, #28
 80161ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80161b6:	2a0d      	cmp	r2, #13
 80161b8:	d8e6      	bhi.n	8016188 <_scanf_float+0x60>
 80161ba:	a101      	add	r1, pc, #4	; (adr r1, 80161c0 <_scanf_float+0x98>)
 80161bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80161c0:	080162ff 	.word	0x080162ff
 80161c4:	08016189 	.word	0x08016189
 80161c8:	08016189 	.word	0x08016189
 80161cc:	08016189 	.word	0x08016189
 80161d0:	0801635f 	.word	0x0801635f
 80161d4:	08016337 	.word	0x08016337
 80161d8:	08016189 	.word	0x08016189
 80161dc:	08016189 	.word	0x08016189
 80161e0:	0801630d 	.word	0x0801630d
 80161e4:	08016189 	.word	0x08016189
 80161e8:	08016189 	.word	0x08016189
 80161ec:	08016189 	.word	0x08016189
 80161f0:	08016189 	.word	0x08016189
 80161f4:	080162c5 	.word	0x080162c5
 80161f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80161fc:	e7db      	b.n	80161b6 <_scanf_float+0x8e>
 80161fe:	290e      	cmp	r1, #14
 8016200:	d8c2      	bhi.n	8016188 <_scanf_float+0x60>
 8016202:	a001      	add	r0, pc, #4	; (adr r0, 8016208 <_scanf_float+0xe0>)
 8016204:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016208:	080162b7 	.word	0x080162b7
 801620c:	08016189 	.word	0x08016189
 8016210:	080162b7 	.word	0x080162b7
 8016214:	0801634b 	.word	0x0801634b
 8016218:	08016189 	.word	0x08016189
 801621c:	08016265 	.word	0x08016265
 8016220:	080162a1 	.word	0x080162a1
 8016224:	080162a1 	.word	0x080162a1
 8016228:	080162a1 	.word	0x080162a1
 801622c:	080162a1 	.word	0x080162a1
 8016230:	080162a1 	.word	0x080162a1
 8016234:	080162a1 	.word	0x080162a1
 8016238:	080162a1 	.word	0x080162a1
 801623c:	080162a1 	.word	0x080162a1
 8016240:	080162a1 	.word	0x080162a1
 8016244:	2b6e      	cmp	r3, #110	; 0x6e
 8016246:	d809      	bhi.n	801625c <_scanf_float+0x134>
 8016248:	2b60      	cmp	r3, #96	; 0x60
 801624a:	d8b2      	bhi.n	80161b2 <_scanf_float+0x8a>
 801624c:	2b54      	cmp	r3, #84	; 0x54
 801624e:	d077      	beq.n	8016340 <_scanf_float+0x218>
 8016250:	2b59      	cmp	r3, #89	; 0x59
 8016252:	d199      	bne.n	8016188 <_scanf_float+0x60>
 8016254:	2d07      	cmp	r5, #7
 8016256:	d197      	bne.n	8016188 <_scanf_float+0x60>
 8016258:	2508      	movs	r5, #8
 801625a:	e029      	b.n	80162b0 <_scanf_float+0x188>
 801625c:	2b74      	cmp	r3, #116	; 0x74
 801625e:	d06f      	beq.n	8016340 <_scanf_float+0x218>
 8016260:	2b79      	cmp	r3, #121	; 0x79
 8016262:	e7f6      	b.n	8016252 <_scanf_float+0x12a>
 8016264:	6821      	ldr	r1, [r4, #0]
 8016266:	05c8      	lsls	r0, r1, #23
 8016268:	d51a      	bpl.n	80162a0 <_scanf_float+0x178>
 801626a:	9b02      	ldr	r3, [sp, #8]
 801626c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016270:	6021      	str	r1, [r4, #0]
 8016272:	f109 0901 	add.w	r9, r9, #1
 8016276:	b11b      	cbz	r3, 8016280 <_scanf_float+0x158>
 8016278:	3b01      	subs	r3, #1
 801627a:	3201      	adds	r2, #1
 801627c:	9302      	str	r3, [sp, #8]
 801627e:	60a2      	str	r2, [r4, #8]
 8016280:	68a3      	ldr	r3, [r4, #8]
 8016282:	3b01      	subs	r3, #1
 8016284:	60a3      	str	r3, [r4, #8]
 8016286:	6923      	ldr	r3, [r4, #16]
 8016288:	3301      	adds	r3, #1
 801628a:	6123      	str	r3, [r4, #16]
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	3b01      	subs	r3, #1
 8016290:	2b00      	cmp	r3, #0
 8016292:	607b      	str	r3, [r7, #4]
 8016294:	f340 8084 	ble.w	80163a0 <_scanf_float+0x278>
 8016298:	683b      	ldr	r3, [r7, #0]
 801629a:	3301      	adds	r3, #1
 801629c:	603b      	str	r3, [r7, #0]
 801629e:	e766      	b.n	801616e <_scanf_float+0x46>
 80162a0:	eb1a 0f05 	cmn.w	sl, r5
 80162a4:	f47f af70 	bne.w	8016188 <_scanf_float+0x60>
 80162a8:	6822      	ldr	r2, [r4, #0]
 80162aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80162ae:	6022      	str	r2, [r4, #0]
 80162b0:	f806 3b01 	strb.w	r3, [r6], #1
 80162b4:	e7e4      	b.n	8016280 <_scanf_float+0x158>
 80162b6:	6822      	ldr	r2, [r4, #0]
 80162b8:	0610      	lsls	r0, r2, #24
 80162ba:	f57f af65 	bpl.w	8016188 <_scanf_float+0x60>
 80162be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80162c2:	e7f4      	b.n	80162ae <_scanf_float+0x186>
 80162c4:	f1ba 0f00 	cmp.w	sl, #0
 80162c8:	d10e      	bne.n	80162e8 <_scanf_float+0x1c0>
 80162ca:	f1b9 0f00 	cmp.w	r9, #0
 80162ce:	d10e      	bne.n	80162ee <_scanf_float+0x1c6>
 80162d0:	6822      	ldr	r2, [r4, #0]
 80162d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80162d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80162da:	d108      	bne.n	80162ee <_scanf_float+0x1c6>
 80162dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80162e0:	6022      	str	r2, [r4, #0]
 80162e2:	f04f 0a01 	mov.w	sl, #1
 80162e6:	e7e3      	b.n	80162b0 <_scanf_float+0x188>
 80162e8:	f1ba 0f02 	cmp.w	sl, #2
 80162ec:	d055      	beq.n	801639a <_scanf_float+0x272>
 80162ee:	2d01      	cmp	r5, #1
 80162f0:	d002      	beq.n	80162f8 <_scanf_float+0x1d0>
 80162f2:	2d04      	cmp	r5, #4
 80162f4:	f47f af48 	bne.w	8016188 <_scanf_float+0x60>
 80162f8:	3501      	adds	r5, #1
 80162fa:	b2ed      	uxtb	r5, r5
 80162fc:	e7d8      	b.n	80162b0 <_scanf_float+0x188>
 80162fe:	f1ba 0f01 	cmp.w	sl, #1
 8016302:	f47f af41 	bne.w	8016188 <_scanf_float+0x60>
 8016306:	f04f 0a02 	mov.w	sl, #2
 801630a:	e7d1      	b.n	80162b0 <_scanf_float+0x188>
 801630c:	b97d      	cbnz	r5, 801632e <_scanf_float+0x206>
 801630e:	f1b9 0f00 	cmp.w	r9, #0
 8016312:	f47f af3c 	bne.w	801618e <_scanf_float+0x66>
 8016316:	6822      	ldr	r2, [r4, #0]
 8016318:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801631c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016320:	f47f af39 	bne.w	8016196 <_scanf_float+0x6e>
 8016324:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016328:	6022      	str	r2, [r4, #0]
 801632a:	2501      	movs	r5, #1
 801632c:	e7c0      	b.n	80162b0 <_scanf_float+0x188>
 801632e:	2d03      	cmp	r5, #3
 8016330:	d0e2      	beq.n	80162f8 <_scanf_float+0x1d0>
 8016332:	2d05      	cmp	r5, #5
 8016334:	e7de      	b.n	80162f4 <_scanf_float+0x1cc>
 8016336:	2d02      	cmp	r5, #2
 8016338:	f47f af26 	bne.w	8016188 <_scanf_float+0x60>
 801633c:	2503      	movs	r5, #3
 801633e:	e7b7      	b.n	80162b0 <_scanf_float+0x188>
 8016340:	2d06      	cmp	r5, #6
 8016342:	f47f af21 	bne.w	8016188 <_scanf_float+0x60>
 8016346:	2507      	movs	r5, #7
 8016348:	e7b2      	b.n	80162b0 <_scanf_float+0x188>
 801634a:	6822      	ldr	r2, [r4, #0]
 801634c:	0591      	lsls	r1, r2, #22
 801634e:	f57f af1b 	bpl.w	8016188 <_scanf_float+0x60>
 8016352:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016356:	6022      	str	r2, [r4, #0]
 8016358:	f8cd 9004 	str.w	r9, [sp, #4]
 801635c:	e7a8      	b.n	80162b0 <_scanf_float+0x188>
 801635e:	6822      	ldr	r2, [r4, #0]
 8016360:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016364:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016368:	d006      	beq.n	8016378 <_scanf_float+0x250>
 801636a:	0550      	lsls	r0, r2, #21
 801636c:	f57f af0c 	bpl.w	8016188 <_scanf_float+0x60>
 8016370:	f1b9 0f00 	cmp.w	r9, #0
 8016374:	f43f af0f 	beq.w	8016196 <_scanf_float+0x6e>
 8016378:	0591      	lsls	r1, r2, #22
 801637a:	bf58      	it	pl
 801637c:	9901      	ldrpl	r1, [sp, #4]
 801637e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016382:	bf58      	it	pl
 8016384:	eba9 0101 	subpl.w	r1, r9, r1
 8016388:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801638c:	bf58      	it	pl
 801638e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016392:	6022      	str	r2, [r4, #0]
 8016394:	f04f 0900 	mov.w	r9, #0
 8016398:	e78a      	b.n	80162b0 <_scanf_float+0x188>
 801639a:	f04f 0a03 	mov.w	sl, #3
 801639e:	e787      	b.n	80162b0 <_scanf_float+0x188>
 80163a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80163a4:	4639      	mov	r1, r7
 80163a6:	4640      	mov	r0, r8
 80163a8:	4798      	blx	r3
 80163aa:	2800      	cmp	r0, #0
 80163ac:	f43f aedf 	beq.w	801616e <_scanf_float+0x46>
 80163b0:	e6ea      	b.n	8016188 <_scanf_float+0x60>
 80163b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80163ba:	463a      	mov	r2, r7
 80163bc:	4640      	mov	r0, r8
 80163be:	4798      	blx	r3
 80163c0:	6923      	ldr	r3, [r4, #16]
 80163c2:	3b01      	subs	r3, #1
 80163c4:	6123      	str	r3, [r4, #16]
 80163c6:	e6ec      	b.n	80161a2 <_scanf_float+0x7a>
 80163c8:	1e6b      	subs	r3, r5, #1
 80163ca:	2b06      	cmp	r3, #6
 80163cc:	d825      	bhi.n	801641a <_scanf_float+0x2f2>
 80163ce:	2d02      	cmp	r5, #2
 80163d0:	d836      	bhi.n	8016440 <_scanf_float+0x318>
 80163d2:	455e      	cmp	r6, fp
 80163d4:	f67f aee8 	bls.w	80161a8 <_scanf_float+0x80>
 80163d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80163e0:	463a      	mov	r2, r7
 80163e2:	4640      	mov	r0, r8
 80163e4:	4798      	blx	r3
 80163e6:	6923      	ldr	r3, [r4, #16]
 80163e8:	3b01      	subs	r3, #1
 80163ea:	6123      	str	r3, [r4, #16]
 80163ec:	e7f1      	b.n	80163d2 <_scanf_float+0x2aa>
 80163ee:	9802      	ldr	r0, [sp, #8]
 80163f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80163f8:	9002      	str	r0, [sp, #8]
 80163fa:	463a      	mov	r2, r7
 80163fc:	4640      	mov	r0, r8
 80163fe:	4798      	blx	r3
 8016400:	6923      	ldr	r3, [r4, #16]
 8016402:	3b01      	subs	r3, #1
 8016404:	6123      	str	r3, [r4, #16]
 8016406:	f10a 3aff 	add.w	sl, sl, #4294967295
 801640a:	fa5f fa8a 	uxtb.w	sl, sl
 801640e:	f1ba 0f02 	cmp.w	sl, #2
 8016412:	d1ec      	bne.n	80163ee <_scanf_float+0x2c6>
 8016414:	3d03      	subs	r5, #3
 8016416:	b2ed      	uxtb	r5, r5
 8016418:	1b76      	subs	r6, r6, r5
 801641a:	6823      	ldr	r3, [r4, #0]
 801641c:	05da      	lsls	r2, r3, #23
 801641e:	d52f      	bpl.n	8016480 <_scanf_float+0x358>
 8016420:	055b      	lsls	r3, r3, #21
 8016422:	d510      	bpl.n	8016446 <_scanf_float+0x31e>
 8016424:	455e      	cmp	r6, fp
 8016426:	f67f aebf 	bls.w	80161a8 <_scanf_float+0x80>
 801642a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801642e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016432:	463a      	mov	r2, r7
 8016434:	4640      	mov	r0, r8
 8016436:	4798      	blx	r3
 8016438:	6923      	ldr	r3, [r4, #16]
 801643a:	3b01      	subs	r3, #1
 801643c:	6123      	str	r3, [r4, #16]
 801643e:	e7f1      	b.n	8016424 <_scanf_float+0x2fc>
 8016440:	46aa      	mov	sl, r5
 8016442:	9602      	str	r6, [sp, #8]
 8016444:	e7df      	b.n	8016406 <_scanf_float+0x2de>
 8016446:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801644a:	6923      	ldr	r3, [r4, #16]
 801644c:	2965      	cmp	r1, #101	; 0x65
 801644e:	f103 33ff 	add.w	r3, r3, #4294967295
 8016452:	f106 35ff 	add.w	r5, r6, #4294967295
 8016456:	6123      	str	r3, [r4, #16]
 8016458:	d00c      	beq.n	8016474 <_scanf_float+0x34c>
 801645a:	2945      	cmp	r1, #69	; 0x45
 801645c:	d00a      	beq.n	8016474 <_scanf_float+0x34c>
 801645e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016462:	463a      	mov	r2, r7
 8016464:	4640      	mov	r0, r8
 8016466:	4798      	blx	r3
 8016468:	6923      	ldr	r3, [r4, #16]
 801646a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801646e:	3b01      	subs	r3, #1
 8016470:	1eb5      	subs	r5, r6, #2
 8016472:	6123      	str	r3, [r4, #16]
 8016474:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016478:	463a      	mov	r2, r7
 801647a:	4640      	mov	r0, r8
 801647c:	4798      	blx	r3
 801647e:	462e      	mov	r6, r5
 8016480:	6825      	ldr	r5, [r4, #0]
 8016482:	f015 0510 	ands.w	r5, r5, #16
 8016486:	d158      	bne.n	801653a <_scanf_float+0x412>
 8016488:	7035      	strb	r5, [r6, #0]
 801648a:	6823      	ldr	r3, [r4, #0]
 801648c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016494:	d11c      	bne.n	80164d0 <_scanf_float+0x3a8>
 8016496:	9b01      	ldr	r3, [sp, #4]
 8016498:	454b      	cmp	r3, r9
 801649a:	eba3 0209 	sub.w	r2, r3, r9
 801649e:	d124      	bne.n	80164ea <_scanf_float+0x3c2>
 80164a0:	2200      	movs	r2, #0
 80164a2:	4659      	mov	r1, fp
 80164a4:	4640      	mov	r0, r8
 80164a6:	f7ff f8df 	bl	8015668 <_strtod_r>
 80164aa:	9b03      	ldr	r3, [sp, #12]
 80164ac:	6821      	ldr	r1, [r4, #0]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	f011 0f02 	tst.w	r1, #2
 80164b4:	ec57 6b10 	vmov	r6, r7, d0
 80164b8:	f103 0204 	add.w	r2, r3, #4
 80164bc:	d020      	beq.n	8016500 <_scanf_float+0x3d8>
 80164be:	9903      	ldr	r1, [sp, #12]
 80164c0:	600a      	str	r2, [r1, #0]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	e9c3 6700 	strd	r6, r7, [r3]
 80164c8:	68e3      	ldr	r3, [r4, #12]
 80164ca:	3301      	adds	r3, #1
 80164cc:	60e3      	str	r3, [r4, #12]
 80164ce:	e66c      	b.n	80161aa <_scanf_float+0x82>
 80164d0:	9b04      	ldr	r3, [sp, #16]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d0e4      	beq.n	80164a0 <_scanf_float+0x378>
 80164d6:	9905      	ldr	r1, [sp, #20]
 80164d8:	230a      	movs	r3, #10
 80164da:	462a      	mov	r2, r5
 80164dc:	3101      	adds	r1, #1
 80164de:	4640      	mov	r0, r8
 80164e0:	f7ff f9b0 	bl	8015844 <_strtol_r>
 80164e4:	9b04      	ldr	r3, [sp, #16]
 80164e6:	9e05      	ldr	r6, [sp, #20]
 80164e8:	1ac2      	subs	r2, r0, r3
 80164ea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80164ee:	429e      	cmp	r6, r3
 80164f0:	bf28      	it	cs
 80164f2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80164f6:	4912      	ldr	r1, [pc, #72]	; (8016540 <_scanf_float+0x418>)
 80164f8:	4630      	mov	r0, r6
 80164fa:	f000 f91b 	bl	8016734 <siprintf>
 80164fe:	e7cf      	b.n	80164a0 <_scanf_float+0x378>
 8016500:	f011 0f04 	tst.w	r1, #4
 8016504:	9903      	ldr	r1, [sp, #12]
 8016506:	600a      	str	r2, [r1, #0]
 8016508:	d1db      	bne.n	80164c2 <_scanf_float+0x39a>
 801650a:	f8d3 8000 	ldr.w	r8, [r3]
 801650e:	ee10 2a10 	vmov	r2, s0
 8016512:	ee10 0a10 	vmov	r0, s0
 8016516:	463b      	mov	r3, r7
 8016518:	4639      	mov	r1, r7
 801651a:	f7ea fb07 	bl	8000b2c <__aeabi_dcmpun>
 801651e:	b128      	cbz	r0, 801652c <_scanf_float+0x404>
 8016520:	4808      	ldr	r0, [pc, #32]	; (8016544 <_scanf_float+0x41c>)
 8016522:	f000 fa9d 	bl	8016a60 <nanf>
 8016526:	ed88 0a00 	vstr	s0, [r8]
 801652a:	e7cd      	b.n	80164c8 <_scanf_float+0x3a0>
 801652c:	4630      	mov	r0, r6
 801652e:	4639      	mov	r1, r7
 8016530:	f7ea fb5a 	bl	8000be8 <__aeabi_d2f>
 8016534:	f8c8 0000 	str.w	r0, [r8]
 8016538:	e7c6      	b.n	80164c8 <_scanf_float+0x3a0>
 801653a:	2500      	movs	r5, #0
 801653c:	e635      	b.n	80161aa <_scanf_float+0x82>
 801653e:	bf00      	nop
 8016540:	0801ce7d 	.word	0x0801ce7d
 8016544:	0801cf36 	.word	0x0801cf36

08016548 <std>:
 8016548:	2300      	movs	r3, #0
 801654a:	b510      	push	{r4, lr}
 801654c:	4604      	mov	r4, r0
 801654e:	e9c0 3300 	strd	r3, r3, [r0]
 8016552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016556:	6083      	str	r3, [r0, #8]
 8016558:	8181      	strh	r1, [r0, #12]
 801655a:	6643      	str	r3, [r0, #100]	; 0x64
 801655c:	81c2      	strh	r2, [r0, #14]
 801655e:	6183      	str	r3, [r0, #24]
 8016560:	4619      	mov	r1, r3
 8016562:	2208      	movs	r2, #8
 8016564:	305c      	adds	r0, #92	; 0x5c
 8016566:	f000 f948 	bl	80167fa <memset>
 801656a:	4b0d      	ldr	r3, [pc, #52]	; (80165a0 <std+0x58>)
 801656c:	6263      	str	r3, [r4, #36]	; 0x24
 801656e:	4b0d      	ldr	r3, [pc, #52]	; (80165a4 <std+0x5c>)
 8016570:	62a3      	str	r3, [r4, #40]	; 0x28
 8016572:	4b0d      	ldr	r3, [pc, #52]	; (80165a8 <std+0x60>)
 8016574:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016576:	4b0d      	ldr	r3, [pc, #52]	; (80165ac <std+0x64>)
 8016578:	6323      	str	r3, [r4, #48]	; 0x30
 801657a:	4b0d      	ldr	r3, [pc, #52]	; (80165b0 <std+0x68>)
 801657c:	6224      	str	r4, [r4, #32]
 801657e:	429c      	cmp	r4, r3
 8016580:	d006      	beq.n	8016590 <std+0x48>
 8016582:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8016586:	4294      	cmp	r4, r2
 8016588:	d002      	beq.n	8016590 <std+0x48>
 801658a:	33d0      	adds	r3, #208	; 0xd0
 801658c:	429c      	cmp	r4, r3
 801658e:	d105      	bne.n	801659c <std+0x54>
 8016590:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016598:	f000 ba40 	b.w	8016a1c <__retarget_lock_init_recursive>
 801659c:	bd10      	pop	{r4, pc}
 801659e:	bf00      	nop
 80165a0:	08016775 	.word	0x08016775
 80165a4:	08016797 	.word	0x08016797
 80165a8:	080167cf 	.word	0x080167cf
 80165ac:	080167f3 	.word	0x080167f3
 80165b0:	20002468 	.word	0x20002468

080165b4 <stdio_exit_handler>:
 80165b4:	4a02      	ldr	r2, [pc, #8]	; (80165c0 <stdio_exit_handler+0xc>)
 80165b6:	4903      	ldr	r1, [pc, #12]	; (80165c4 <stdio_exit_handler+0x10>)
 80165b8:	4803      	ldr	r0, [pc, #12]	; (80165c8 <stdio_exit_handler+0x14>)
 80165ba:	f000 b869 	b.w	8016690 <_fwalk_sglue>
 80165be:	bf00      	nop
 80165c0:	20000130 	.word	0x20000130
 80165c4:	08018c39 	.word	0x08018c39
 80165c8:	200002a8 	.word	0x200002a8

080165cc <cleanup_stdio>:
 80165cc:	6841      	ldr	r1, [r0, #4]
 80165ce:	4b0c      	ldr	r3, [pc, #48]	; (8016600 <cleanup_stdio+0x34>)
 80165d0:	4299      	cmp	r1, r3
 80165d2:	b510      	push	{r4, lr}
 80165d4:	4604      	mov	r4, r0
 80165d6:	d001      	beq.n	80165dc <cleanup_stdio+0x10>
 80165d8:	f002 fb2e 	bl	8018c38 <_fflush_r>
 80165dc:	68a1      	ldr	r1, [r4, #8]
 80165de:	4b09      	ldr	r3, [pc, #36]	; (8016604 <cleanup_stdio+0x38>)
 80165e0:	4299      	cmp	r1, r3
 80165e2:	d002      	beq.n	80165ea <cleanup_stdio+0x1e>
 80165e4:	4620      	mov	r0, r4
 80165e6:	f002 fb27 	bl	8018c38 <_fflush_r>
 80165ea:	68e1      	ldr	r1, [r4, #12]
 80165ec:	4b06      	ldr	r3, [pc, #24]	; (8016608 <cleanup_stdio+0x3c>)
 80165ee:	4299      	cmp	r1, r3
 80165f0:	d004      	beq.n	80165fc <cleanup_stdio+0x30>
 80165f2:	4620      	mov	r0, r4
 80165f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165f8:	f002 bb1e 	b.w	8018c38 <_fflush_r>
 80165fc:	bd10      	pop	{r4, pc}
 80165fe:	bf00      	nop
 8016600:	20002468 	.word	0x20002468
 8016604:	200024d0 	.word	0x200024d0
 8016608:	20002538 	.word	0x20002538

0801660c <global_stdio_init.part.0>:
 801660c:	b510      	push	{r4, lr}
 801660e:	4b0b      	ldr	r3, [pc, #44]	; (801663c <global_stdio_init.part.0+0x30>)
 8016610:	4c0b      	ldr	r4, [pc, #44]	; (8016640 <global_stdio_init.part.0+0x34>)
 8016612:	4a0c      	ldr	r2, [pc, #48]	; (8016644 <global_stdio_init.part.0+0x38>)
 8016614:	601a      	str	r2, [r3, #0]
 8016616:	4620      	mov	r0, r4
 8016618:	2200      	movs	r2, #0
 801661a:	2104      	movs	r1, #4
 801661c:	f7ff ff94 	bl	8016548 <std>
 8016620:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016624:	2201      	movs	r2, #1
 8016626:	2109      	movs	r1, #9
 8016628:	f7ff ff8e 	bl	8016548 <std>
 801662c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016630:	2202      	movs	r2, #2
 8016632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016636:	2112      	movs	r1, #18
 8016638:	f7ff bf86 	b.w	8016548 <std>
 801663c:	200025a0 	.word	0x200025a0
 8016640:	20002468 	.word	0x20002468
 8016644:	080165b5 	.word	0x080165b5

08016648 <__sfp_lock_acquire>:
 8016648:	4801      	ldr	r0, [pc, #4]	; (8016650 <__sfp_lock_acquire+0x8>)
 801664a:	f000 b9e8 	b.w	8016a1e <__retarget_lock_acquire_recursive>
 801664e:	bf00      	nop
 8016650:	200025a9 	.word	0x200025a9

08016654 <__sfp_lock_release>:
 8016654:	4801      	ldr	r0, [pc, #4]	; (801665c <__sfp_lock_release+0x8>)
 8016656:	f000 b9e3 	b.w	8016a20 <__retarget_lock_release_recursive>
 801665a:	bf00      	nop
 801665c:	200025a9 	.word	0x200025a9

08016660 <__sinit>:
 8016660:	b510      	push	{r4, lr}
 8016662:	4604      	mov	r4, r0
 8016664:	f7ff fff0 	bl	8016648 <__sfp_lock_acquire>
 8016668:	6a23      	ldr	r3, [r4, #32]
 801666a:	b11b      	cbz	r3, 8016674 <__sinit+0x14>
 801666c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016670:	f7ff bff0 	b.w	8016654 <__sfp_lock_release>
 8016674:	4b04      	ldr	r3, [pc, #16]	; (8016688 <__sinit+0x28>)
 8016676:	6223      	str	r3, [r4, #32]
 8016678:	4b04      	ldr	r3, [pc, #16]	; (801668c <__sinit+0x2c>)
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d1f5      	bne.n	801666c <__sinit+0xc>
 8016680:	f7ff ffc4 	bl	801660c <global_stdio_init.part.0>
 8016684:	e7f2      	b.n	801666c <__sinit+0xc>
 8016686:	bf00      	nop
 8016688:	080165cd 	.word	0x080165cd
 801668c:	200025a0 	.word	0x200025a0

08016690 <_fwalk_sglue>:
 8016690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016694:	4607      	mov	r7, r0
 8016696:	4688      	mov	r8, r1
 8016698:	4614      	mov	r4, r2
 801669a:	2600      	movs	r6, #0
 801669c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80166a0:	f1b9 0901 	subs.w	r9, r9, #1
 80166a4:	d505      	bpl.n	80166b2 <_fwalk_sglue+0x22>
 80166a6:	6824      	ldr	r4, [r4, #0]
 80166a8:	2c00      	cmp	r4, #0
 80166aa:	d1f7      	bne.n	801669c <_fwalk_sglue+0xc>
 80166ac:	4630      	mov	r0, r6
 80166ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166b2:	89ab      	ldrh	r3, [r5, #12]
 80166b4:	2b01      	cmp	r3, #1
 80166b6:	d907      	bls.n	80166c8 <_fwalk_sglue+0x38>
 80166b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80166bc:	3301      	adds	r3, #1
 80166be:	d003      	beq.n	80166c8 <_fwalk_sglue+0x38>
 80166c0:	4629      	mov	r1, r5
 80166c2:	4638      	mov	r0, r7
 80166c4:	47c0      	blx	r8
 80166c6:	4306      	orrs	r6, r0
 80166c8:	3568      	adds	r5, #104	; 0x68
 80166ca:	e7e9      	b.n	80166a0 <_fwalk_sglue+0x10>

080166cc <sniprintf>:
 80166cc:	b40c      	push	{r2, r3}
 80166ce:	b530      	push	{r4, r5, lr}
 80166d0:	4b17      	ldr	r3, [pc, #92]	; (8016730 <sniprintf+0x64>)
 80166d2:	1e0c      	subs	r4, r1, #0
 80166d4:	681d      	ldr	r5, [r3, #0]
 80166d6:	b09d      	sub	sp, #116	; 0x74
 80166d8:	da08      	bge.n	80166ec <sniprintf+0x20>
 80166da:	238b      	movs	r3, #139	; 0x8b
 80166dc:	602b      	str	r3, [r5, #0]
 80166de:	f04f 30ff 	mov.w	r0, #4294967295
 80166e2:	b01d      	add	sp, #116	; 0x74
 80166e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80166e8:	b002      	add	sp, #8
 80166ea:	4770      	bx	lr
 80166ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 80166f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80166f4:	bf14      	ite	ne
 80166f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80166fa:	4623      	moveq	r3, r4
 80166fc:	9304      	str	r3, [sp, #16]
 80166fe:	9307      	str	r3, [sp, #28]
 8016700:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016704:	9002      	str	r0, [sp, #8]
 8016706:	9006      	str	r0, [sp, #24]
 8016708:	f8ad 3016 	strh.w	r3, [sp, #22]
 801670c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801670e:	ab21      	add	r3, sp, #132	; 0x84
 8016710:	a902      	add	r1, sp, #8
 8016712:	4628      	mov	r0, r5
 8016714:	9301      	str	r3, [sp, #4]
 8016716:	f002 f90b 	bl	8018930 <_svfiprintf_r>
 801671a:	1c43      	adds	r3, r0, #1
 801671c:	bfbc      	itt	lt
 801671e:	238b      	movlt	r3, #139	; 0x8b
 8016720:	602b      	strlt	r3, [r5, #0]
 8016722:	2c00      	cmp	r4, #0
 8016724:	d0dd      	beq.n	80166e2 <sniprintf+0x16>
 8016726:	9b02      	ldr	r3, [sp, #8]
 8016728:	2200      	movs	r2, #0
 801672a:	701a      	strb	r2, [r3, #0]
 801672c:	e7d9      	b.n	80166e2 <sniprintf+0x16>
 801672e:	bf00      	nop
 8016730:	200002f4 	.word	0x200002f4

08016734 <siprintf>:
 8016734:	b40e      	push	{r1, r2, r3}
 8016736:	b500      	push	{lr}
 8016738:	b09c      	sub	sp, #112	; 0x70
 801673a:	ab1d      	add	r3, sp, #116	; 0x74
 801673c:	9002      	str	r0, [sp, #8]
 801673e:	9006      	str	r0, [sp, #24]
 8016740:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016744:	4809      	ldr	r0, [pc, #36]	; (801676c <siprintf+0x38>)
 8016746:	9107      	str	r1, [sp, #28]
 8016748:	9104      	str	r1, [sp, #16]
 801674a:	4909      	ldr	r1, [pc, #36]	; (8016770 <siprintf+0x3c>)
 801674c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016750:	9105      	str	r1, [sp, #20]
 8016752:	6800      	ldr	r0, [r0, #0]
 8016754:	9301      	str	r3, [sp, #4]
 8016756:	a902      	add	r1, sp, #8
 8016758:	f002 f8ea 	bl	8018930 <_svfiprintf_r>
 801675c:	9b02      	ldr	r3, [sp, #8]
 801675e:	2200      	movs	r2, #0
 8016760:	701a      	strb	r2, [r3, #0]
 8016762:	b01c      	add	sp, #112	; 0x70
 8016764:	f85d eb04 	ldr.w	lr, [sp], #4
 8016768:	b003      	add	sp, #12
 801676a:	4770      	bx	lr
 801676c:	200002f4 	.word	0x200002f4
 8016770:	ffff0208 	.word	0xffff0208

08016774 <__sread>:
 8016774:	b510      	push	{r4, lr}
 8016776:	460c      	mov	r4, r1
 8016778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801677c:	f000 f8f0 	bl	8016960 <_read_r>
 8016780:	2800      	cmp	r0, #0
 8016782:	bfab      	itete	ge
 8016784:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016786:	89a3      	ldrhlt	r3, [r4, #12]
 8016788:	181b      	addge	r3, r3, r0
 801678a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801678e:	bfac      	ite	ge
 8016790:	6563      	strge	r3, [r4, #84]	; 0x54
 8016792:	81a3      	strhlt	r3, [r4, #12]
 8016794:	bd10      	pop	{r4, pc}

08016796 <__swrite>:
 8016796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801679a:	461f      	mov	r7, r3
 801679c:	898b      	ldrh	r3, [r1, #12]
 801679e:	05db      	lsls	r3, r3, #23
 80167a0:	4605      	mov	r5, r0
 80167a2:	460c      	mov	r4, r1
 80167a4:	4616      	mov	r6, r2
 80167a6:	d505      	bpl.n	80167b4 <__swrite+0x1e>
 80167a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167ac:	2302      	movs	r3, #2
 80167ae:	2200      	movs	r2, #0
 80167b0:	f000 f8c4 	bl	801693c <_lseek_r>
 80167b4:	89a3      	ldrh	r3, [r4, #12]
 80167b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80167ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80167be:	81a3      	strh	r3, [r4, #12]
 80167c0:	4632      	mov	r2, r6
 80167c2:	463b      	mov	r3, r7
 80167c4:	4628      	mov	r0, r5
 80167c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167ca:	f000 b8eb 	b.w	80169a4 <_write_r>

080167ce <__sseek>:
 80167ce:	b510      	push	{r4, lr}
 80167d0:	460c      	mov	r4, r1
 80167d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167d6:	f000 f8b1 	bl	801693c <_lseek_r>
 80167da:	1c43      	adds	r3, r0, #1
 80167dc:	89a3      	ldrh	r3, [r4, #12]
 80167de:	bf15      	itete	ne
 80167e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80167e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80167e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80167ea:	81a3      	strheq	r3, [r4, #12]
 80167ec:	bf18      	it	ne
 80167ee:	81a3      	strhne	r3, [r4, #12]
 80167f0:	bd10      	pop	{r4, pc}

080167f2 <__sclose>:
 80167f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167f6:	f000 b891 	b.w	801691c <_close_r>

080167fa <memset>:
 80167fa:	4402      	add	r2, r0
 80167fc:	4603      	mov	r3, r0
 80167fe:	4293      	cmp	r3, r2
 8016800:	d100      	bne.n	8016804 <memset+0xa>
 8016802:	4770      	bx	lr
 8016804:	f803 1b01 	strb.w	r1, [r3], #1
 8016808:	e7f9      	b.n	80167fe <memset+0x4>

0801680a <strncmp>:
 801680a:	b510      	push	{r4, lr}
 801680c:	b16a      	cbz	r2, 801682a <strncmp+0x20>
 801680e:	3901      	subs	r1, #1
 8016810:	1884      	adds	r4, r0, r2
 8016812:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016816:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801681a:	429a      	cmp	r2, r3
 801681c:	d103      	bne.n	8016826 <strncmp+0x1c>
 801681e:	42a0      	cmp	r0, r4
 8016820:	d001      	beq.n	8016826 <strncmp+0x1c>
 8016822:	2a00      	cmp	r2, #0
 8016824:	d1f5      	bne.n	8016812 <strncmp+0x8>
 8016826:	1ad0      	subs	r0, r2, r3
 8016828:	bd10      	pop	{r4, pc}
 801682a:	4610      	mov	r0, r2
 801682c:	e7fc      	b.n	8016828 <strncmp+0x1e>
	...

08016830 <strtok>:
 8016830:	4b16      	ldr	r3, [pc, #88]	; (801688c <strtok+0x5c>)
 8016832:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016834:	681e      	ldr	r6, [r3, #0]
 8016836:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8016838:	4605      	mov	r5, r0
 801683a:	b9fc      	cbnz	r4, 801687c <strtok+0x4c>
 801683c:	2050      	movs	r0, #80	; 0x50
 801683e:	9101      	str	r1, [sp, #4]
 8016840:	f7fe f84a 	bl	80148d8 <malloc>
 8016844:	9901      	ldr	r1, [sp, #4]
 8016846:	6470      	str	r0, [r6, #68]	; 0x44
 8016848:	4602      	mov	r2, r0
 801684a:	b920      	cbnz	r0, 8016856 <strtok+0x26>
 801684c:	4b10      	ldr	r3, [pc, #64]	; (8016890 <strtok+0x60>)
 801684e:	4811      	ldr	r0, [pc, #68]	; (8016894 <strtok+0x64>)
 8016850:	215b      	movs	r1, #91	; 0x5b
 8016852:	f000 f90b 	bl	8016a6c <__assert_func>
 8016856:	e9c0 4400 	strd	r4, r4, [r0]
 801685a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801685e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8016862:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8016866:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801686a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801686e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8016872:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8016876:	6184      	str	r4, [r0, #24]
 8016878:	7704      	strb	r4, [r0, #28]
 801687a:	6244      	str	r4, [r0, #36]	; 0x24
 801687c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801687e:	2301      	movs	r3, #1
 8016880:	4628      	mov	r0, r5
 8016882:	b002      	add	sp, #8
 8016884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016888:	f000 b806 	b.w	8016898 <__strtok_r>
 801688c:	200002f4 	.word	0x200002f4
 8016890:	0801ce82 	.word	0x0801ce82
 8016894:	0801ce99 	.word	0x0801ce99

08016898 <__strtok_r>:
 8016898:	b5f0      	push	{r4, r5, r6, r7, lr}
 801689a:	b908      	cbnz	r0, 80168a0 <__strtok_r+0x8>
 801689c:	6810      	ldr	r0, [r2, #0]
 801689e:	b188      	cbz	r0, 80168c4 <__strtok_r+0x2c>
 80168a0:	4604      	mov	r4, r0
 80168a2:	4620      	mov	r0, r4
 80168a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80168a8:	460f      	mov	r7, r1
 80168aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80168ae:	b91e      	cbnz	r6, 80168b8 <__strtok_r+0x20>
 80168b0:	b965      	cbnz	r5, 80168cc <__strtok_r+0x34>
 80168b2:	6015      	str	r5, [r2, #0]
 80168b4:	4628      	mov	r0, r5
 80168b6:	e005      	b.n	80168c4 <__strtok_r+0x2c>
 80168b8:	42b5      	cmp	r5, r6
 80168ba:	d1f6      	bne.n	80168aa <__strtok_r+0x12>
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d1f0      	bne.n	80168a2 <__strtok_r+0xa>
 80168c0:	6014      	str	r4, [r2, #0]
 80168c2:	7003      	strb	r3, [r0, #0]
 80168c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168c6:	461c      	mov	r4, r3
 80168c8:	e00c      	b.n	80168e4 <__strtok_r+0x4c>
 80168ca:	b915      	cbnz	r5, 80168d2 <__strtok_r+0x3a>
 80168cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80168d0:	460e      	mov	r6, r1
 80168d2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80168d6:	42ab      	cmp	r3, r5
 80168d8:	d1f7      	bne.n	80168ca <__strtok_r+0x32>
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d0f3      	beq.n	80168c6 <__strtok_r+0x2e>
 80168de:	2300      	movs	r3, #0
 80168e0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80168e4:	6014      	str	r4, [r2, #0]
 80168e6:	e7ed      	b.n	80168c4 <__strtok_r+0x2c>

080168e8 <strstr>:
 80168e8:	780a      	ldrb	r2, [r1, #0]
 80168ea:	b570      	push	{r4, r5, r6, lr}
 80168ec:	b96a      	cbnz	r2, 801690a <strstr+0x22>
 80168ee:	bd70      	pop	{r4, r5, r6, pc}
 80168f0:	429a      	cmp	r2, r3
 80168f2:	d109      	bne.n	8016908 <strstr+0x20>
 80168f4:	460c      	mov	r4, r1
 80168f6:	4605      	mov	r5, r0
 80168f8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d0f6      	beq.n	80168ee <strstr+0x6>
 8016900:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016904:	429e      	cmp	r6, r3
 8016906:	d0f7      	beq.n	80168f8 <strstr+0x10>
 8016908:	3001      	adds	r0, #1
 801690a:	7803      	ldrb	r3, [r0, #0]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d1ef      	bne.n	80168f0 <strstr+0x8>
 8016910:	4618      	mov	r0, r3
 8016912:	e7ec      	b.n	80168ee <strstr+0x6>

08016914 <_localeconv_r>:
 8016914:	4800      	ldr	r0, [pc, #0]	; (8016918 <_localeconv_r+0x4>)
 8016916:	4770      	bx	lr
 8016918:	2000022c 	.word	0x2000022c

0801691c <_close_r>:
 801691c:	b538      	push	{r3, r4, r5, lr}
 801691e:	4d06      	ldr	r5, [pc, #24]	; (8016938 <_close_r+0x1c>)
 8016920:	2300      	movs	r3, #0
 8016922:	4604      	mov	r4, r0
 8016924:	4608      	mov	r0, r1
 8016926:	602b      	str	r3, [r5, #0]
 8016928:	f7ee ffd7 	bl	80058da <_close>
 801692c:	1c43      	adds	r3, r0, #1
 801692e:	d102      	bne.n	8016936 <_close_r+0x1a>
 8016930:	682b      	ldr	r3, [r5, #0]
 8016932:	b103      	cbz	r3, 8016936 <_close_r+0x1a>
 8016934:	6023      	str	r3, [r4, #0]
 8016936:	bd38      	pop	{r3, r4, r5, pc}
 8016938:	200025a4 	.word	0x200025a4

0801693c <_lseek_r>:
 801693c:	b538      	push	{r3, r4, r5, lr}
 801693e:	4d07      	ldr	r5, [pc, #28]	; (801695c <_lseek_r+0x20>)
 8016940:	4604      	mov	r4, r0
 8016942:	4608      	mov	r0, r1
 8016944:	4611      	mov	r1, r2
 8016946:	2200      	movs	r2, #0
 8016948:	602a      	str	r2, [r5, #0]
 801694a:	461a      	mov	r2, r3
 801694c:	f7ee ffec 	bl	8005928 <_lseek>
 8016950:	1c43      	adds	r3, r0, #1
 8016952:	d102      	bne.n	801695a <_lseek_r+0x1e>
 8016954:	682b      	ldr	r3, [r5, #0]
 8016956:	b103      	cbz	r3, 801695a <_lseek_r+0x1e>
 8016958:	6023      	str	r3, [r4, #0]
 801695a:	bd38      	pop	{r3, r4, r5, pc}
 801695c:	200025a4 	.word	0x200025a4

08016960 <_read_r>:
 8016960:	b538      	push	{r3, r4, r5, lr}
 8016962:	4d07      	ldr	r5, [pc, #28]	; (8016980 <_read_r+0x20>)
 8016964:	4604      	mov	r4, r0
 8016966:	4608      	mov	r0, r1
 8016968:	4611      	mov	r1, r2
 801696a:	2200      	movs	r2, #0
 801696c:	602a      	str	r2, [r5, #0]
 801696e:	461a      	mov	r2, r3
 8016970:	f7ee ff7a 	bl	8005868 <_read>
 8016974:	1c43      	adds	r3, r0, #1
 8016976:	d102      	bne.n	801697e <_read_r+0x1e>
 8016978:	682b      	ldr	r3, [r5, #0]
 801697a:	b103      	cbz	r3, 801697e <_read_r+0x1e>
 801697c:	6023      	str	r3, [r4, #0]
 801697e:	bd38      	pop	{r3, r4, r5, pc}
 8016980:	200025a4 	.word	0x200025a4

08016984 <_sbrk_r>:
 8016984:	b538      	push	{r3, r4, r5, lr}
 8016986:	4d06      	ldr	r5, [pc, #24]	; (80169a0 <_sbrk_r+0x1c>)
 8016988:	2300      	movs	r3, #0
 801698a:	4604      	mov	r4, r0
 801698c:	4608      	mov	r0, r1
 801698e:	602b      	str	r3, [r5, #0]
 8016990:	f7ee ffd8 	bl	8005944 <_sbrk>
 8016994:	1c43      	adds	r3, r0, #1
 8016996:	d102      	bne.n	801699e <_sbrk_r+0x1a>
 8016998:	682b      	ldr	r3, [r5, #0]
 801699a:	b103      	cbz	r3, 801699e <_sbrk_r+0x1a>
 801699c:	6023      	str	r3, [r4, #0]
 801699e:	bd38      	pop	{r3, r4, r5, pc}
 80169a0:	200025a4 	.word	0x200025a4

080169a4 <_write_r>:
 80169a4:	b538      	push	{r3, r4, r5, lr}
 80169a6:	4d07      	ldr	r5, [pc, #28]	; (80169c4 <_write_r+0x20>)
 80169a8:	4604      	mov	r4, r0
 80169aa:	4608      	mov	r0, r1
 80169ac:	4611      	mov	r1, r2
 80169ae:	2200      	movs	r2, #0
 80169b0:	602a      	str	r2, [r5, #0]
 80169b2:	461a      	mov	r2, r3
 80169b4:	f7ee ff75 	bl	80058a2 <_write>
 80169b8:	1c43      	adds	r3, r0, #1
 80169ba:	d102      	bne.n	80169c2 <_write_r+0x1e>
 80169bc:	682b      	ldr	r3, [r5, #0]
 80169be:	b103      	cbz	r3, 80169c2 <_write_r+0x1e>
 80169c0:	6023      	str	r3, [r4, #0]
 80169c2:	bd38      	pop	{r3, r4, r5, pc}
 80169c4:	200025a4 	.word	0x200025a4

080169c8 <__errno>:
 80169c8:	4b01      	ldr	r3, [pc, #4]	; (80169d0 <__errno+0x8>)
 80169ca:	6818      	ldr	r0, [r3, #0]
 80169cc:	4770      	bx	lr
 80169ce:	bf00      	nop
 80169d0:	200002f4 	.word	0x200002f4

080169d4 <__libc_init_array>:
 80169d4:	b570      	push	{r4, r5, r6, lr}
 80169d6:	4d0d      	ldr	r5, [pc, #52]	; (8016a0c <__libc_init_array+0x38>)
 80169d8:	4c0d      	ldr	r4, [pc, #52]	; (8016a10 <__libc_init_array+0x3c>)
 80169da:	1b64      	subs	r4, r4, r5
 80169dc:	10a4      	asrs	r4, r4, #2
 80169de:	2600      	movs	r6, #0
 80169e0:	42a6      	cmp	r6, r4
 80169e2:	d109      	bne.n	80169f8 <__libc_init_array+0x24>
 80169e4:	4d0b      	ldr	r5, [pc, #44]	; (8016a14 <__libc_init_array+0x40>)
 80169e6:	4c0c      	ldr	r4, [pc, #48]	; (8016a18 <__libc_init_array+0x44>)
 80169e8:	f004 fa02 	bl	801adf0 <_init>
 80169ec:	1b64      	subs	r4, r4, r5
 80169ee:	10a4      	asrs	r4, r4, #2
 80169f0:	2600      	movs	r6, #0
 80169f2:	42a6      	cmp	r6, r4
 80169f4:	d105      	bne.n	8016a02 <__libc_init_array+0x2e>
 80169f6:	bd70      	pop	{r4, r5, r6, pc}
 80169f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80169fc:	4798      	blx	r3
 80169fe:	3601      	adds	r6, #1
 8016a00:	e7ee      	b.n	80169e0 <__libc_init_array+0xc>
 8016a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a06:	4798      	blx	r3
 8016a08:	3601      	adds	r6, #1
 8016a0a:	e7f2      	b.n	80169f2 <__libc_init_array+0x1e>
 8016a0c:	0801d370 	.word	0x0801d370
 8016a10:	0801d370 	.word	0x0801d370
 8016a14:	0801d370 	.word	0x0801d370
 8016a18:	0801d374 	.word	0x0801d374

08016a1c <__retarget_lock_init_recursive>:
 8016a1c:	4770      	bx	lr

08016a1e <__retarget_lock_acquire_recursive>:
 8016a1e:	4770      	bx	lr

08016a20 <__retarget_lock_release_recursive>:
 8016a20:	4770      	bx	lr

08016a22 <strcpy>:
 8016a22:	4603      	mov	r3, r0
 8016a24:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016a28:	f803 2b01 	strb.w	r2, [r3], #1
 8016a2c:	2a00      	cmp	r2, #0
 8016a2e:	d1f9      	bne.n	8016a24 <strcpy+0x2>
 8016a30:	4770      	bx	lr

08016a32 <memcpy>:
 8016a32:	440a      	add	r2, r1
 8016a34:	4291      	cmp	r1, r2
 8016a36:	f100 33ff 	add.w	r3, r0, #4294967295
 8016a3a:	d100      	bne.n	8016a3e <memcpy+0xc>
 8016a3c:	4770      	bx	lr
 8016a3e:	b510      	push	{r4, lr}
 8016a40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016a44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016a48:	4291      	cmp	r1, r2
 8016a4a:	d1f9      	bne.n	8016a40 <memcpy+0xe>
 8016a4c:	bd10      	pop	{r4, pc}
	...

08016a50 <nan>:
 8016a50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016a58 <nan+0x8>
 8016a54:	4770      	bx	lr
 8016a56:	bf00      	nop
 8016a58:	00000000 	.word	0x00000000
 8016a5c:	7ff80000 	.word	0x7ff80000

08016a60 <nanf>:
 8016a60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016a68 <nanf+0x8>
 8016a64:	4770      	bx	lr
 8016a66:	bf00      	nop
 8016a68:	7fc00000 	.word	0x7fc00000

08016a6c <__assert_func>:
 8016a6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016a6e:	4614      	mov	r4, r2
 8016a70:	461a      	mov	r2, r3
 8016a72:	4b09      	ldr	r3, [pc, #36]	; (8016a98 <__assert_func+0x2c>)
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	4605      	mov	r5, r0
 8016a78:	68d8      	ldr	r0, [r3, #12]
 8016a7a:	b14c      	cbz	r4, 8016a90 <__assert_func+0x24>
 8016a7c:	4b07      	ldr	r3, [pc, #28]	; (8016a9c <__assert_func+0x30>)
 8016a7e:	9100      	str	r1, [sp, #0]
 8016a80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016a84:	4906      	ldr	r1, [pc, #24]	; (8016aa0 <__assert_func+0x34>)
 8016a86:	462b      	mov	r3, r5
 8016a88:	f002 f8fe 	bl	8018c88 <fiprintf>
 8016a8c:	f002 f928 	bl	8018ce0 <abort>
 8016a90:	4b04      	ldr	r3, [pc, #16]	; (8016aa4 <__assert_func+0x38>)
 8016a92:	461c      	mov	r4, r3
 8016a94:	e7f3      	b.n	8016a7e <__assert_func+0x12>
 8016a96:	bf00      	nop
 8016a98:	200002f4 	.word	0x200002f4
 8016a9c:	0801cefb 	.word	0x0801cefb
 8016aa0:	0801cf08 	.word	0x0801cf08
 8016aa4:	0801cf36 	.word	0x0801cf36

08016aa8 <quorem>:
 8016aa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aac:	6903      	ldr	r3, [r0, #16]
 8016aae:	690c      	ldr	r4, [r1, #16]
 8016ab0:	42a3      	cmp	r3, r4
 8016ab2:	4607      	mov	r7, r0
 8016ab4:	db7e      	blt.n	8016bb4 <quorem+0x10c>
 8016ab6:	3c01      	subs	r4, #1
 8016ab8:	f101 0814 	add.w	r8, r1, #20
 8016abc:	f100 0514 	add.w	r5, r0, #20
 8016ac0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016ac4:	9301      	str	r3, [sp, #4]
 8016ac6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016aca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016ace:	3301      	adds	r3, #1
 8016ad0:	429a      	cmp	r2, r3
 8016ad2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016ad6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016ada:	fbb2 f6f3 	udiv	r6, r2, r3
 8016ade:	d331      	bcc.n	8016b44 <quorem+0x9c>
 8016ae0:	f04f 0e00 	mov.w	lr, #0
 8016ae4:	4640      	mov	r0, r8
 8016ae6:	46ac      	mov	ip, r5
 8016ae8:	46f2      	mov	sl, lr
 8016aea:	f850 2b04 	ldr.w	r2, [r0], #4
 8016aee:	b293      	uxth	r3, r2
 8016af0:	fb06 e303 	mla	r3, r6, r3, lr
 8016af4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016af8:	0c1a      	lsrs	r2, r3, #16
 8016afa:	b29b      	uxth	r3, r3
 8016afc:	ebaa 0303 	sub.w	r3, sl, r3
 8016b00:	f8dc a000 	ldr.w	sl, [ip]
 8016b04:	fa13 f38a 	uxtah	r3, r3, sl
 8016b08:	fb06 220e 	mla	r2, r6, lr, r2
 8016b0c:	9300      	str	r3, [sp, #0]
 8016b0e:	9b00      	ldr	r3, [sp, #0]
 8016b10:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016b14:	b292      	uxth	r2, r2
 8016b16:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016b1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016b1e:	f8bd 3000 	ldrh.w	r3, [sp]
 8016b22:	4581      	cmp	r9, r0
 8016b24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016b28:	f84c 3b04 	str.w	r3, [ip], #4
 8016b2c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016b30:	d2db      	bcs.n	8016aea <quorem+0x42>
 8016b32:	f855 300b 	ldr.w	r3, [r5, fp]
 8016b36:	b92b      	cbnz	r3, 8016b44 <quorem+0x9c>
 8016b38:	9b01      	ldr	r3, [sp, #4]
 8016b3a:	3b04      	subs	r3, #4
 8016b3c:	429d      	cmp	r5, r3
 8016b3e:	461a      	mov	r2, r3
 8016b40:	d32c      	bcc.n	8016b9c <quorem+0xf4>
 8016b42:	613c      	str	r4, [r7, #16]
 8016b44:	4638      	mov	r0, r7
 8016b46:	f001 fca5 	bl	8018494 <__mcmp>
 8016b4a:	2800      	cmp	r0, #0
 8016b4c:	db22      	blt.n	8016b94 <quorem+0xec>
 8016b4e:	3601      	adds	r6, #1
 8016b50:	4629      	mov	r1, r5
 8016b52:	2000      	movs	r0, #0
 8016b54:	f858 2b04 	ldr.w	r2, [r8], #4
 8016b58:	f8d1 c000 	ldr.w	ip, [r1]
 8016b5c:	b293      	uxth	r3, r2
 8016b5e:	1ac3      	subs	r3, r0, r3
 8016b60:	0c12      	lsrs	r2, r2, #16
 8016b62:	fa13 f38c 	uxtah	r3, r3, ip
 8016b66:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8016b6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016b6e:	b29b      	uxth	r3, r3
 8016b70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016b74:	45c1      	cmp	r9, r8
 8016b76:	f841 3b04 	str.w	r3, [r1], #4
 8016b7a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016b7e:	d2e9      	bcs.n	8016b54 <quorem+0xac>
 8016b80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016b84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016b88:	b922      	cbnz	r2, 8016b94 <quorem+0xec>
 8016b8a:	3b04      	subs	r3, #4
 8016b8c:	429d      	cmp	r5, r3
 8016b8e:	461a      	mov	r2, r3
 8016b90:	d30a      	bcc.n	8016ba8 <quorem+0x100>
 8016b92:	613c      	str	r4, [r7, #16]
 8016b94:	4630      	mov	r0, r6
 8016b96:	b003      	add	sp, #12
 8016b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b9c:	6812      	ldr	r2, [r2, #0]
 8016b9e:	3b04      	subs	r3, #4
 8016ba0:	2a00      	cmp	r2, #0
 8016ba2:	d1ce      	bne.n	8016b42 <quorem+0x9a>
 8016ba4:	3c01      	subs	r4, #1
 8016ba6:	e7c9      	b.n	8016b3c <quorem+0x94>
 8016ba8:	6812      	ldr	r2, [r2, #0]
 8016baa:	3b04      	subs	r3, #4
 8016bac:	2a00      	cmp	r2, #0
 8016bae:	d1f0      	bne.n	8016b92 <quorem+0xea>
 8016bb0:	3c01      	subs	r4, #1
 8016bb2:	e7eb      	b.n	8016b8c <quorem+0xe4>
 8016bb4:	2000      	movs	r0, #0
 8016bb6:	e7ee      	b.n	8016b96 <quorem+0xee>

08016bb8 <_dtoa_r>:
 8016bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bbc:	ed2d 8b04 	vpush	{d8-d9}
 8016bc0:	69c5      	ldr	r5, [r0, #28]
 8016bc2:	b093      	sub	sp, #76	; 0x4c
 8016bc4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016bc8:	ec57 6b10 	vmov	r6, r7, d0
 8016bcc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016bd0:	9107      	str	r1, [sp, #28]
 8016bd2:	4604      	mov	r4, r0
 8016bd4:	920a      	str	r2, [sp, #40]	; 0x28
 8016bd6:	930d      	str	r3, [sp, #52]	; 0x34
 8016bd8:	b975      	cbnz	r5, 8016bf8 <_dtoa_r+0x40>
 8016bda:	2010      	movs	r0, #16
 8016bdc:	f7fd fe7c 	bl	80148d8 <malloc>
 8016be0:	4602      	mov	r2, r0
 8016be2:	61e0      	str	r0, [r4, #28]
 8016be4:	b920      	cbnz	r0, 8016bf0 <_dtoa_r+0x38>
 8016be6:	4bae      	ldr	r3, [pc, #696]	; (8016ea0 <_dtoa_r+0x2e8>)
 8016be8:	21ef      	movs	r1, #239	; 0xef
 8016bea:	48ae      	ldr	r0, [pc, #696]	; (8016ea4 <_dtoa_r+0x2ec>)
 8016bec:	f7ff ff3e 	bl	8016a6c <__assert_func>
 8016bf0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016bf4:	6005      	str	r5, [r0, #0]
 8016bf6:	60c5      	str	r5, [r0, #12]
 8016bf8:	69e3      	ldr	r3, [r4, #28]
 8016bfa:	6819      	ldr	r1, [r3, #0]
 8016bfc:	b151      	cbz	r1, 8016c14 <_dtoa_r+0x5c>
 8016bfe:	685a      	ldr	r2, [r3, #4]
 8016c00:	604a      	str	r2, [r1, #4]
 8016c02:	2301      	movs	r3, #1
 8016c04:	4093      	lsls	r3, r2
 8016c06:	608b      	str	r3, [r1, #8]
 8016c08:	4620      	mov	r0, r4
 8016c0a:	f001 f9bd 	bl	8017f88 <_Bfree>
 8016c0e:	69e3      	ldr	r3, [r4, #28]
 8016c10:	2200      	movs	r2, #0
 8016c12:	601a      	str	r2, [r3, #0]
 8016c14:	1e3b      	subs	r3, r7, #0
 8016c16:	bfbb      	ittet	lt
 8016c18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016c1c:	9303      	strlt	r3, [sp, #12]
 8016c1e:	2300      	movge	r3, #0
 8016c20:	2201      	movlt	r2, #1
 8016c22:	bfac      	ite	ge
 8016c24:	f8c8 3000 	strge.w	r3, [r8]
 8016c28:	f8c8 2000 	strlt.w	r2, [r8]
 8016c2c:	4b9e      	ldr	r3, [pc, #632]	; (8016ea8 <_dtoa_r+0x2f0>)
 8016c2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8016c32:	ea33 0308 	bics.w	r3, r3, r8
 8016c36:	d11b      	bne.n	8016c70 <_dtoa_r+0xb8>
 8016c38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016c3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8016c3e:	6013      	str	r3, [r2, #0]
 8016c40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8016c44:	4333      	orrs	r3, r6
 8016c46:	f000 8593 	beq.w	8017770 <_dtoa_r+0xbb8>
 8016c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016c4c:	b963      	cbnz	r3, 8016c68 <_dtoa_r+0xb0>
 8016c4e:	4b97      	ldr	r3, [pc, #604]	; (8016eac <_dtoa_r+0x2f4>)
 8016c50:	e027      	b.n	8016ca2 <_dtoa_r+0xea>
 8016c52:	4b97      	ldr	r3, [pc, #604]	; (8016eb0 <_dtoa_r+0x2f8>)
 8016c54:	9300      	str	r3, [sp, #0]
 8016c56:	3308      	adds	r3, #8
 8016c58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016c5a:	6013      	str	r3, [r2, #0]
 8016c5c:	9800      	ldr	r0, [sp, #0]
 8016c5e:	b013      	add	sp, #76	; 0x4c
 8016c60:	ecbd 8b04 	vpop	{d8-d9}
 8016c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c68:	4b90      	ldr	r3, [pc, #576]	; (8016eac <_dtoa_r+0x2f4>)
 8016c6a:	9300      	str	r3, [sp, #0]
 8016c6c:	3303      	adds	r3, #3
 8016c6e:	e7f3      	b.n	8016c58 <_dtoa_r+0xa0>
 8016c70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016c74:	2200      	movs	r2, #0
 8016c76:	ec51 0b17 	vmov	r0, r1, d7
 8016c7a:	eeb0 8a47 	vmov.f32	s16, s14
 8016c7e:	eef0 8a67 	vmov.f32	s17, s15
 8016c82:	2300      	movs	r3, #0
 8016c84:	f7e9 ff20 	bl	8000ac8 <__aeabi_dcmpeq>
 8016c88:	4681      	mov	r9, r0
 8016c8a:	b160      	cbz	r0, 8016ca6 <_dtoa_r+0xee>
 8016c8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016c8e:	2301      	movs	r3, #1
 8016c90:	6013      	str	r3, [r2, #0]
 8016c92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	f000 8568 	beq.w	801776a <_dtoa_r+0xbb2>
 8016c9a:	4b86      	ldr	r3, [pc, #536]	; (8016eb4 <_dtoa_r+0x2fc>)
 8016c9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016c9e:	6013      	str	r3, [r2, #0]
 8016ca0:	3b01      	subs	r3, #1
 8016ca2:	9300      	str	r3, [sp, #0]
 8016ca4:	e7da      	b.n	8016c5c <_dtoa_r+0xa4>
 8016ca6:	aa10      	add	r2, sp, #64	; 0x40
 8016ca8:	a911      	add	r1, sp, #68	; 0x44
 8016caa:	4620      	mov	r0, r4
 8016cac:	eeb0 0a48 	vmov.f32	s0, s16
 8016cb0:	eef0 0a68 	vmov.f32	s1, s17
 8016cb4:	f001 fd04 	bl	80186c0 <__d2b>
 8016cb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016cbc:	4682      	mov	sl, r0
 8016cbe:	2d00      	cmp	r5, #0
 8016cc0:	d07f      	beq.n	8016dc2 <_dtoa_r+0x20a>
 8016cc2:	ee18 3a90 	vmov	r3, s17
 8016cc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016cca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016cce:	ec51 0b18 	vmov	r0, r1, d8
 8016cd2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016cd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016cda:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8016cde:	4619      	mov	r1, r3
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	4b75      	ldr	r3, [pc, #468]	; (8016eb8 <_dtoa_r+0x300>)
 8016ce4:	f7e9 fad0 	bl	8000288 <__aeabi_dsub>
 8016ce8:	a367      	add	r3, pc, #412	; (adr r3, 8016e88 <_dtoa_r+0x2d0>)
 8016cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cee:	f7e9 fc83 	bl	80005f8 <__aeabi_dmul>
 8016cf2:	a367      	add	r3, pc, #412	; (adr r3, 8016e90 <_dtoa_r+0x2d8>)
 8016cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cf8:	f7e9 fac8 	bl	800028c <__adddf3>
 8016cfc:	4606      	mov	r6, r0
 8016cfe:	4628      	mov	r0, r5
 8016d00:	460f      	mov	r7, r1
 8016d02:	f7e9 fc0f 	bl	8000524 <__aeabi_i2d>
 8016d06:	a364      	add	r3, pc, #400	; (adr r3, 8016e98 <_dtoa_r+0x2e0>)
 8016d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d0c:	f7e9 fc74 	bl	80005f8 <__aeabi_dmul>
 8016d10:	4602      	mov	r2, r0
 8016d12:	460b      	mov	r3, r1
 8016d14:	4630      	mov	r0, r6
 8016d16:	4639      	mov	r1, r7
 8016d18:	f7e9 fab8 	bl	800028c <__adddf3>
 8016d1c:	4606      	mov	r6, r0
 8016d1e:	460f      	mov	r7, r1
 8016d20:	f7e9 ff1a 	bl	8000b58 <__aeabi_d2iz>
 8016d24:	2200      	movs	r2, #0
 8016d26:	4683      	mov	fp, r0
 8016d28:	2300      	movs	r3, #0
 8016d2a:	4630      	mov	r0, r6
 8016d2c:	4639      	mov	r1, r7
 8016d2e:	f7e9 fed5 	bl	8000adc <__aeabi_dcmplt>
 8016d32:	b148      	cbz	r0, 8016d48 <_dtoa_r+0x190>
 8016d34:	4658      	mov	r0, fp
 8016d36:	f7e9 fbf5 	bl	8000524 <__aeabi_i2d>
 8016d3a:	4632      	mov	r2, r6
 8016d3c:	463b      	mov	r3, r7
 8016d3e:	f7e9 fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 8016d42:	b908      	cbnz	r0, 8016d48 <_dtoa_r+0x190>
 8016d44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016d48:	f1bb 0f16 	cmp.w	fp, #22
 8016d4c:	d857      	bhi.n	8016dfe <_dtoa_r+0x246>
 8016d4e:	4b5b      	ldr	r3, [pc, #364]	; (8016ebc <_dtoa_r+0x304>)
 8016d50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d58:	ec51 0b18 	vmov	r0, r1, d8
 8016d5c:	f7e9 febe 	bl	8000adc <__aeabi_dcmplt>
 8016d60:	2800      	cmp	r0, #0
 8016d62:	d04e      	beq.n	8016e02 <_dtoa_r+0x24a>
 8016d64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016d68:	2300      	movs	r3, #0
 8016d6a:	930c      	str	r3, [sp, #48]	; 0x30
 8016d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d6e:	1b5b      	subs	r3, r3, r5
 8016d70:	1e5a      	subs	r2, r3, #1
 8016d72:	bf45      	ittet	mi
 8016d74:	f1c3 0301 	rsbmi	r3, r3, #1
 8016d78:	9305      	strmi	r3, [sp, #20]
 8016d7a:	2300      	movpl	r3, #0
 8016d7c:	2300      	movmi	r3, #0
 8016d7e:	9206      	str	r2, [sp, #24]
 8016d80:	bf54      	ite	pl
 8016d82:	9305      	strpl	r3, [sp, #20]
 8016d84:	9306      	strmi	r3, [sp, #24]
 8016d86:	f1bb 0f00 	cmp.w	fp, #0
 8016d8a:	db3c      	blt.n	8016e06 <_dtoa_r+0x24e>
 8016d8c:	9b06      	ldr	r3, [sp, #24]
 8016d8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8016d92:	445b      	add	r3, fp
 8016d94:	9306      	str	r3, [sp, #24]
 8016d96:	2300      	movs	r3, #0
 8016d98:	9308      	str	r3, [sp, #32]
 8016d9a:	9b07      	ldr	r3, [sp, #28]
 8016d9c:	2b09      	cmp	r3, #9
 8016d9e:	d868      	bhi.n	8016e72 <_dtoa_r+0x2ba>
 8016da0:	2b05      	cmp	r3, #5
 8016da2:	bfc4      	itt	gt
 8016da4:	3b04      	subgt	r3, #4
 8016da6:	9307      	strgt	r3, [sp, #28]
 8016da8:	9b07      	ldr	r3, [sp, #28]
 8016daa:	f1a3 0302 	sub.w	r3, r3, #2
 8016dae:	bfcc      	ite	gt
 8016db0:	2500      	movgt	r5, #0
 8016db2:	2501      	movle	r5, #1
 8016db4:	2b03      	cmp	r3, #3
 8016db6:	f200 8085 	bhi.w	8016ec4 <_dtoa_r+0x30c>
 8016dba:	e8df f003 	tbb	[pc, r3]
 8016dbe:	3b2e      	.short	0x3b2e
 8016dc0:	5839      	.short	0x5839
 8016dc2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016dc6:	441d      	add	r5, r3
 8016dc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016dcc:	2b20      	cmp	r3, #32
 8016dce:	bfc1      	itttt	gt
 8016dd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016dd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8016dd8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8016ddc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8016de0:	bfd6      	itet	le
 8016de2:	f1c3 0320 	rsble	r3, r3, #32
 8016de6:	ea48 0003 	orrgt.w	r0, r8, r3
 8016dea:	fa06 f003 	lslle.w	r0, r6, r3
 8016dee:	f7e9 fb89 	bl	8000504 <__aeabi_ui2d>
 8016df2:	2201      	movs	r2, #1
 8016df4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8016df8:	3d01      	subs	r5, #1
 8016dfa:	920e      	str	r2, [sp, #56]	; 0x38
 8016dfc:	e76f      	b.n	8016cde <_dtoa_r+0x126>
 8016dfe:	2301      	movs	r3, #1
 8016e00:	e7b3      	b.n	8016d6a <_dtoa_r+0x1b2>
 8016e02:	900c      	str	r0, [sp, #48]	; 0x30
 8016e04:	e7b2      	b.n	8016d6c <_dtoa_r+0x1b4>
 8016e06:	9b05      	ldr	r3, [sp, #20]
 8016e08:	eba3 030b 	sub.w	r3, r3, fp
 8016e0c:	9305      	str	r3, [sp, #20]
 8016e0e:	f1cb 0300 	rsb	r3, fp, #0
 8016e12:	9308      	str	r3, [sp, #32]
 8016e14:	2300      	movs	r3, #0
 8016e16:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e18:	e7bf      	b.n	8016d9a <_dtoa_r+0x1e2>
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8016e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	dc52      	bgt.n	8016eca <_dtoa_r+0x312>
 8016e24:	2301      	movs	r3, #1
 8016e26:	9301      	str	r3, [sp, #4]
 8016e28:	9304      	str	r3, [sp, #16]
 8016e2a:	461a      	mov	r2, r3
 8016e2c:	920a      	str	r2, [sp, #40]	; 0x28
 8016e2e:	e00b      	b.n	8016e48 <_dtoa_r+0x290>
 8016e30:	2301      	movs	r3, #1
 8016e32:	e7f3      	b.n	8016e1c <_dtoa_r+0x264>
 8016e34:	2300      	movs	r3, #0
 8016e36:	9309      	str	r3, [sp, #36]	; 0x24
 8016e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e3a:	445b      	add	r3, fp
 8016e3c:	9301      	str	r3, [sp, #4]
 8016e3e:	3301      	adds	r3, #1
 8016e40:	2b01      	cmp	r3, #1
 8016e42:	9304      	str	r3, [sp, #16]
 8016e44:	bfb8      	it	lt
 8016e46:	2301      	movlt	r3, #1
 8016e48:	69e0      	ldr	r0, [r4, #28]
 8016e4a:	2100      	movs	r1, #0
 8016e4c:	2204      	movs	r2, #4
 8016e4e:	f102 0614 	add.w	r6, r2, #20
 8016e52:	429e      	cmp	r6, r3
 8016e54:	d93d      	bls.n	8016ed2 <_dtoa_r+0x31a>
 8016e56:	6041      	str	r1, [r0, #4]
 8016e58:	4620      	mov	r0, r4
 8016e5a:	f001 f855 	bl	8017f08 <_Balloc>
 8016e5e:	9000      	str	r0, [sp, #0]
 8016e60:	2800      	cmp	r0, #0
 8016e62:	d139      	bne.n	8016ed8 <_dtoa_r+0x320>
 8016e64:	4b16      	ldr	r3, [pc, #88]	; (8016ec0 <_dtoa_r+0x308>)
 8016e66:	4602      	mov	r2, r0
 8016e68:	f240 11af 	movw	r1, #431	; 0x1af
 8016e6c:	e6bd      	b.n	8016bea <_dtoa_r+0x32>
 8016e6e:	2301      	movs	r3, #1
 8016e70:	e7e1      	b.n	8016e36 <_dtoa_r+0x27e>
 8016e72:	2501      	movs	r5, #1
 8016e74:	2300      	movs	r3, #0
 8016e76:	9307      	str	r3, [sp, #28]
 8016e78:	9509      	str	r5, [sp, #36]	; 0x24
 8016e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8016e7e:	9301      	str	r3, [sp, #4]
 8016e80:	9304      	str	r3, [sp, #16]
 8016e82:	2200      	movs	r2, #0
 8016e84:	2312      	movs	r3, #18
 8016e86:	e7d1      	b.n	8016e2c <_dtoa_r+0x274>
 8016e88:	636f4361 	.word	0x636f4361
 8016e8c:	3fd287a7 	.word	0x3fd287a7
 8016e90:	8b60c8b3 	.word	0x8b60c8b3
 8016e94:	3fc68a28 	.word	0x3fc68a28
 8016e98:	509f79fb 	.word	0x509f79fb
 8016e9c:	3fd34413 	.word	0x3fd34413
 8016ea0:	0801ce82 	.word	0x0801ce82
 8016ea4:	0801cf44 	.word	0x0801cf44
 8016ea8:	7ff00000 	.word	0x7ff00000
 8016eac:	0801cf40 	.word	0x0801cf40
 8016eb0:	0801cf37 	.word	0x0801cf37
 8016eb4:	0801ce5a 	.word	0x0801ce5a
 8016eb8:	3ff80000 	.word	0x3ff80000
 8016ebc:	0801d090 	.word	0x0801d090
 8016ec0:	0801cf9c 	.word	0x0801cf9c
 8016ec4:	2301      	movs	r3, #1
 8016ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8016ec8:	e7d7      	b.n	8016e7a <_dtoa_r+0x2c2>
 8016eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ecc:	9301      	str	r3, [sp, #4]
 8016ece:	9304      	str	r3, [sp, #16]
 8016ed0:	e7ba      	b.n	8016e48 <_dtoa_r+0x290>
 8016ed2:	3101      	adds	r1, #1
 8016ed4:	0052      	lsls	r2, r2, #1
 8016ed6:	e7ba      	b.n	8016e4e <_dtoa_r+0x296>
 8016ed8:	69e3      	ldr	r3, [r4, #28]
 8016eda:	9a00      	ldr	r2, [sp, #0]
 8016edc:	601a      	str	r2, [r3, #0]
 8016ede:	9b04      	ldr	r3, [sp, #16]
 8016ee0:	2b0e      	cmp	r3, #14
 8016ee2:	f200 80a8 	bhi.w	8017036 <_dtoa_r+0x47e>
 8016ee6:	2d00      	cmp	r5, #0
 8016ee8:	f000 80a5 	beq.w	8017036 <_dtoa_r+0x47e>
 8016eec:	f1bb 0f00 	cmp.w	fp, #0
 8016ef0:	dd38      	ble.n	8016f64 <_dtoa_r+0x3ac>
 8016ef2:	4bc0      	ldr	r3, [pc, #768]	; (80171f4 <_dtoa_r+0x63c>)
 8016ef4:	f00b 020f 	and.w	r2, fp, #15
 8016ef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016efc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8016f00:	e9d3 6700 	ldrd	r6, r7, [r3]
 8016f04:	ea4f 182b 	mov.w	r8, fp, asr #4
 8016f08:	d019      	beq.n	8016f3e <_dtoa_r+0x386>
 8016f0a:	4bbb      	ldr	r3, [pc, #748]	; (80171f8 <_dtoa_r+0x640>)
 8016f0c:	ec51 0b18 	vmov	r0, r1, d8
 8016f10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016f14:	f7e9 fc9a 	bl	800084c <__aeabi_ddiv>
 8016f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016f1c:	f008 080f 	and.w	r8, r8, #15
 8016f20:	2503      	movs	r5, #3
 8016f22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80171f8 <_dtoa_r+0x640>
 8016f26:	f1b8 0f00 	cmp.w	r8, #0
 8016f2a:	d10a      	bne.n	8016f42 <_dtoa_r+0x38a>
 8016f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016f30:	4632      	mov	r2, r6
 8016f32:	463b      	mov	r3, r7
 8016f34:	f7e9 fc8a 	bl	800084c <__aeabi_ddiv>
 8016f38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016f3c:	e02b      	b.n	8016f96 <_dtoa_r+0x3de>
 8016f3e:	2502      	movs	r5, #2
 8016f40:	e7ef      	b.n	8016f22 <_dtoa_r+0x36a>
 8016f42:	f018 0f01 	tst.w	r8, #1
 8016f46:	d008      	beq.n	8016f5a <_dtoa_r+0x3a2>
 8016f48:	4630      	mov	r0, r6
 8016f4a:	4639      	mov	r1, r7
 8016f4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016f50:	f7e9 fb52 	bl	80005f8 <__aeabi_dmul>
 8016f54:	3501      	adds	r5, #1
 8016f56:	4606      	mov	r6, r0
 8016f58:	460f      	mov	r7, r1
 8016f5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016f5e:	f109 0908 	add.w	r9, r9, #8
 8016f62:	e7e0      	b.n	8016f26 <_dtoa_r+0x36e>
 8016f64:	f000 809f 	beq.w	80170a6 <_dtoa_r+0x4ee>
 8016f68:	f1cb 0600 	rsb	r6, fp, #0
 8016f6c:	4ba1      	ldr	r3, [pc, #644]	; (80171f4 <_dtoa_r+0x63c>)
 8016f6e:	4fa2      	ldr	r7, [pc, #648]	; (80171f8 <_dtoa_r+0x640>)
 8016f70:	f006 020f 	and.w	r2, r6, #15
 8016f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f7c:	ec51 0b18 	vmov	r0, r1, d8
 8016f80:	f7e9 fb3a 	bl	80005f8 <__aeabi_dmul>
 8016f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016f88:	1136      	asrs	r6, r6, #4
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	2502      	movs	r5, #2
 8016f8e:	2e00      	cmp	r6, #0
 8016f90:	d17e      	bne.n	8017090 <_dtoa_r+0x4d8>
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d1d0      	bne.n	8016f38 <_dtoa_r+0x380>
 8016f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	f000 8084 	beq.w	80170aa <_dtoa_r+0x4f2>
 8016fa2:	4b96      	ldr	r3, [pc, #600]	; (80171fc <_dtoa_r+0x644>)
 8016fa4:	2200      	movs	r2, #0
 8016fa6:	4640      	mov	r0, r8
 8016fa8:	4649      	mov	r1, r9
 8016faa:	f7e9 fd97 	bl	8000adc <__aeabi_dcmplt>
 8016fae:	2800      	cmp	r0, #0
 8016fb0:	d07b      	beq.n	80170aa <_dtoa_r+0x4f2>
 8016fb2:	9b04      	ldr	r3, [sp, #16]
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d078      	beq.n	80170aa <_dtoa_r+0x4f2>
 8016fb8:	9b01      	ldr	r3, [sp, #4]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	dd39      	ble.n	8017032 <_dtoa_r+0x47a>
 8016fbe:	4b90      	ldr	r3, [pc, #576]	; (8017200 <_dtoa_r+0x648>)
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	4640      	mov	r0, r8
 8016fc4:	4649      	mov	r1, r9
 8016fc6:	f7e9 fb17 	bl	80005f8 <__aeabi_dmul>
 8016fca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016fce:	9e01      	ldr	r6, [sp, #4]
 8016fd0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8016fd4:	3501      	adds	r5, #1
 8016fd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016fda:	4628      	mov	r0, r5
 8016fdc:	f7e9 faa2 	bl	8000524 <__aeabi_i2d>
 8016fe0:	4642      	mov	r2, r8
 8016fe2:	464b      	mov	r3, r9
 8016fe4:	f7e9 fb08 	bl	80005f8 <__aeabi_dmul>
 8016fe8:	4b86      	ldr	r3, [pc, #536]	; (8017204 <_dtoa_r+0x64c>)
 8016fea:	2200      	movs	r2, #0
 8016fec:	f7e9 f94e 	bl	800028c <__adddf3>
 8016ff0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8016ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016ff8:	9303      	str	r3, [sp, #12]
 8016ffa:	2e00      	cmp	r6, #0
 8016ffc:	d158      	bne.n	80170b0 <_dtoa_r+0x4f8>
 8016ffe:	4b82      	ldr	r3, [pc, #520]	; (8017208 <_dtoa_r+0x650>)
 8017000:	2200      	movs	r2, #0
 8017002:	4640      	mov	r0, r8
 8017004:	4649      	mov	r1, r9
 8017006:	f7e9 f93f 	bl	8000288 <__aeabi_dsub>
 801700a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801700e:	4680      	mov	r8, r0
 8017010:	4689      	mov	r9, r1
 8017012:	f7e9 fd81 	bl	8000b18 <__aeabi_dcmpgt>
 8017016:	2800      	cmp	r0, #0
 8017018:	f040 8296 	bne.w	8017548 <_dtoa_r+0x990>
 801701c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017020:	4640      	mov	r0, r8
 8017022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017026:	4649      	mov	r1, r9
 8017028:	f7e9 fd58 	bl	8000adc <__aeabi_dcmplt>
 801702c:	2800      	cmp	r0, #0
 801702e:	f040 8289 	bne.w	8017544 <_dtoa_r+0x98c>
 8017032:	ed8d 8b02 	vstr	d8, [sp, #8]
 8017036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017038:	2b00      	cmp	r3, #0
 801703a:	f2c0 814e 	blt.w	80172da <_dtoa_r+0x722>
 801703e:	f1bb 0f0e 	cmp.w	fp, #14
 8017042:	f300 814a 	bgt.w	80172da <_dtoa_r+0x722>
 8017046:	4b6b      	ldr	r3, [pc, #428]	; (80171f4 <_dtoa_r+0x63c>)
 8017048:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801704c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017052:	2b00      	cmp	r3, #0
 8017054:	f280 80dc 	bge.w	8017210 <_dtoa_r+0x658>
 8017058:	9b04      	ldr	r3, [sp, #16]
 801705a:	2b00      	cmp	r3, #0
 801705c:	f300 80d8 	bgt.w	8017210 <_dtoa_r+0x658>
 8017060:	f040 826f 	bne.w	8017542 <_dtoa_r+0x98a>
 8017064:	4b68      	ldr	r3, [pc, #416]	; (8017208 <_dtoa_r+0x650>)
 8017066:	2200      	movs	r2, #0
 8017068:	4640      	mov	r0, r8
 801706a:	4649      	mov	r1, r9
 801706c:	f7e9 fac4 	bl	80005f8 <__aeabi_dmul>
 8017070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017074:	f7e9 fd46 	bl	8000b04 <__aeabi_dcmpge>
 8017078:	9e04      	ldr	r6, [sp, #16]
 801707a:	4637      	mov	r7, r6
 801707c:	2800      	cmp	r0, #0
 801707e:	f040 8245 	bne.w	801750c <_dtoa_r+0x954>
 8017082:	9d00      	ldr	r5, [sp, #0]
 8017084:	2331      	movs	r3, #49	; 0x31
 8017086:	f805 3b01 	strb.w	r3, [r5], #1
 801708a:	f10b 0b01 	add.w	fp, fp, #1
 801708e:	e241      	b.n	8017514 <_dtoa_r+0x95c>
 8017090:	07f2      	lsls	r2, r6, #31
 8017092:	d505      	bpl.n	80170a0 <_dtoa_r+0x4e8>
 8017094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017098:	f7e9 faae 	bl	80005f8 <__aeabi_dmul>
 801709c:	3501      	adds	r5, #1
 801709e:	2301      	movs	r3, #1
 80170a0:	1076      	asrs	r6, r6, #1
 80170a2:	3708      	adds	r7, #8
 80170a4:	e773      	b.n	8016f8e <_dtoa_r+0x3d6>
 80170a6:	2502      	movs	r5, #2
 80170a8:	e775      	b.n	8016f96 <_dtoa_r+0x3de>
 80170aa:	9e04      	ldr	r6, [sp, #16]
 80170ac:	465f      	mov	r7, fp
 80170ae:	e792      	b.n	8016fd6 <_dtoa_r+0x41e>
 80170b0:	9900      	ldr	r1, [sp, #0]
 80170b2:	4b50      	ldr	r3, [pc, #320]	; (80171f4 <_dtoa_r+0x63c>)
 80170b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80170b8:	4431      	add	r1, r6
 80170ba:	9102      	str	r1, [sp, #8]
 80170bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80170be:	eeb0 9a47 	vmov.f32	s18, s14
 80170c2:	eef0 9a67 	vmov.f32	s19, s15
 80170c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80170ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80170ce:	2900      	cmp	r1, #0
 80170d0:	d044      	beq.n	801715c <_dtoa_r+0x5a4>
 80170d2:	494e      	ldr	r1, [pc, #312]	; (801720c <_dtoa_r+0x654>)
 80170d4:	2000      	movs	r0, #0
 80170d6:	f7e9 fbb9 	bl	800084c <__aeabi_ddiv>
 80170da:	ec53 2b19 	vmov	r2, r3, d9
 80170de:	f7e9 f8d3 	bl	8000288 <__aeabi_dsub>
 80170e2:	9d00      	ldr	r5, [sp, #0]
 80170e4:	ec41 0b19 	vmov	d9, r0, r1
 80170e8:	4649      	mov	r1, r9
 80170ea:	4640      	mov	r0, r8
 80170ec:	f7e9 fd34 	bl	8000b58 <__aeabi_d2iz>
 80170f0:	4606      	mov	r6, r0
 80170f2:	f7e9 fa17 	bl	8000524 <__aeabi_i2d>
 80170f6:	4602      	mov	r2, r0
 80170f8:	460b      	mov	r3, r1
 80170fa:	4640      	mov	r0, r8
 80170fc:	4649      	mov	r1, r9
 80170fe:	f7e9 f8c3 	bl	8000288 <__aeabi_dsub>
 8017102:	3630      	adds	r6, #48	; 0x30
 8017104:	f805 6b01 	strb.w	r6, [r5], #1
 8017108:	ec53 2b19 	vmov	r2, r3, d9
 801710c:	4680      	mov	r8, r0
 801710e:	4689      	mov	r9, r1
 8017110:	f7e9 fce4 	bl	8000adc <__aeabi_dcmplt>
 8017114:	2800      	cmp	r0, #0
 8017116:	d164      	bne.n	80171e2 <_dtoa_r+0x62a>
 8017118:	4642      	mov	r2, r8
 801711a:	464b      	mov	r3, r9
 801711c:	4937      	ldr	r1, [pc, #220]	; (80171fc <_dtoa_r+0x644>)
 801711e:	2000      	movs	r0, #0
 8017120:	f7e9 f8b2 	bl	8000288 <__aeabi_dsub>
 8017124:	ec53 2b19 	vmov	r2, r3, d9
 8017128:	f7e9 fcd8 	bl	8000adc <__aeabi_dcmplt>
 801712c:	2800      	cmp	r0, #0
 801712e:	f040 80b6 	bne.w	801729e <_dtoa_r+0x6e6>
 8017132:	9b02      	ldr	r3, [sp, #8]
 8017134:	429d      	cmp	r5, r3
 8017136:	f43f af7c 	beq.w	8017032 <_dtoa_r+0x47a>
 801713a:	4b31      	ldr	r3, [pc, #196]	; (8017200 <_dtoa_r+0x648>)
 801713c:	ec51 0b19 	vmov	r0, r1, d9
 8017140:	2200      	movs	r2, #0
 8017142:	f7e9 fa59 	bl	80005f8 <__aeabi_dmul>
 8017146:	4b2e      	ldr	r3, [pc, #184]	; (8017200 <_dtoa_r+0x648>)
 8017148:	ec41 0b19 	vmov	d9, r0, r1
 801714c:	2200      	movs	r2, #0
 801714e:	4640      	mov	r0, r8
 8017150:	4649      	mov	r1, r9
 8017152:	f7e9 fa51 	bl	80005f8 <__aeabi_dmul>
 8017156:	4680      	mov	r8, r0
 8017158:	4689      	mov	r9, r1
 801715a:	e7c5      	b.n	80170e8 <_dtoa_r+0x530>
 801715c:	ec51 0b17 	vmov	r0, r1, d7
 8017160:	f7e9 fa4a 	bl	80005f8 <__aeabi_dmul>
 8017164:	9b02      	ldr	r3, [sp, #8]
 8017166:	9d00      	ldr	r5, [sp, #0]
 8017168:	930f      	str	r3, [sp, #60]	; 0x3c
 801716a:	ec41 0b19 	vmov	d9, r0, r1
 801716e:	4649      	mov	r1, r9
 8017170:	4640      	mov	r0, r8
 8017172:	f7e9 fcf1 	bl	8000b58 <__aeabi_d2iz>
 8017176:	4606      	mov	r6, r0
 8017178:	f7e9 f9d4 	bl	8000524 <__aeabi_i2d>
 801717c:	3630      	adds	r6, #48	; 0x30
 801717e:	4602      	mov	r2, r0
 8017180:	460b      	mov	r3, r1
 8017182:	4640      	mov	r0, r8
 8017184:	4649      	mov	r1, r9
 8017186:	f7e9 f87f 	bl	8000288 <__aeabi_dsub>
 801718a:	f805 6b01 	strb.w	r6, [r5], #1
 801718e:	9b02      	ldr	r3, [sp, #8]
 8017190:	429d      	cmp	r5, r3
 8017192:	4680      	mov	r8, r0
 8017194:	4689      	mov	r9, r1
 8017196:	f04f 0200 	mov.w	r2, #0
 801719a:	d124      	bne.n	80171e6 <_dtoa_r+0x62e>
 801719c:	4b1b      	ldr	r3, [pc, #108]	; (801720c <_dtoa_r+0x654>)
 801719e:	ec51 0b19 	vmov	r0, r1, d9
 80171a2:	f7e9 f873 	bl	800028c <__adddf3>
 80171a6:	4602      	mov	r2, r0
 80171a8:	460b      	mov	r3, r1
 80171aa:	4640      	mov	r0, r8
 80171ac:	4649      	mov	r1, r9
 80171ae:	f7e9 fcb3 	bl	8000b18 <__aeabi_dcmpgt>
 80171b2:	2800      	cmp	r0, #0
 80171b4:	d173      	bne.n	801729e <_dtoa_r+0x6e6>
 80171b6:	ec53 2b19 	vmov	r2, r3, d9
 80171ba:	4914      	ldr	r1, [pc, #80]	; (801720c <_dtoa_r+0x654>)
 80171bc:	2000      	movs	r0, #0
 80171be:	f7e9 f863 	bl	8000288 <__aeabi_dsub>
 80171c2:	4602      	mov	r2, r0
 80171c4:	460b      	mov	r3, r1
 80171c6:	4640      	mov	r0, r8
 80171c8:	4649      	mov	r1, r9
 80171ca:	f7e9 fc87 	bl	8000adc <__aeabi_dcmplt>
 80171ce:	2800      	cmp	r0, #0
 80171d0:	f43f af2f 	beq.w	8017032 <_dtoa_r+0x47a>
 80171d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80171d6:	1e6b      	subs	r3, r5, #1
 80171d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80171da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80171de:	2b30      	cmp	r3, #48	; 0x30
 80171e0:	d0f8      	beq.n	80171d4 <_dtoa_r+0x61c>
 80171e2:	46bb      	mov	fp, r7
 80171e4:	e04a      	b.n	801727c <_dtoa_r+0x6c4>
 80171e6:	4b06      	ldr	r3, [pc, #24]	; (8017200 <_dtoa_r+0x648>)
 80171e8:	f7e9 fa06 	bl	80005f8 <__aeabi_dmul>
 80171ec:	4680      	mov	r8, r0
 80171ee:	4689      	mov	r9, r1
 80171f0:	e7bd      	b.n	801716e <_dtoa_r+0x5b6>
 80171f2:	bf00      	nop
 80171f4:	0801d090 	.word	0x0801d090
 80171f8:	0801d068 	.word	0x0801d068
 80171fc:	3ff00000 	.word	0x3ff00000
 8017200:	40240000 	.word	0x40240000
 8017204:	401c0000 	.word	0x401c0000
 8017208:	40140000 	.word	0x40140000
 801720c:	3fe00000 	.word	0x3fe00000
 8017210:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017214:	9d00      	ldr	r5, [sp, #0]
 8017216:	4642      	mov	r2, r8
 8017218:	464b      	mov	r3, r9
 801721a:	4630      	mov	r0, r6
 801721c:	4639      	mov	r1, r7
 801721e:	f7e9 fb15 	bl	800084c <__aeabi_ddiv>
 8017222:	f7e9 fc99 	bl	8000b58 <__aeabi_d2iz>
 8017226:	9001      	str	r0, [sp, #4]
 8017228:	f7e9 f97c 	bl	8000524 <__aeabi_i2d>
 801722c:	4642      	mov	r2, r8
 801722e:	464b      	mov	r3, r9
 8017230:	f7e9 f9e2 	bl	80005f8 <__aeabi_dmul>
 8017234:	4602      	mov	r2, r0
 8017236:	460b      	mov	r3, r1
 8017238:	4630      	mov	r0, r6
 801723a:	4639      	mov	r1, r7
 801723c:	f7e9 f824 	bl	8000288 <__aeabi_dsub>
 8017240:	9e01      	ldr	r6, [sp, #4]
 8017242:	9f04      	ldr	r7, [sp, #16]
 8017244:	3630      	adds	r6, #48	; 0x30
 8017246:	f805 6b01 	strb.w	r6, [r5], #1
 801724a:	9e00      	ldr	r6, [sp, #0]
 801724c:	1bae      	subs	r6, r5, r6
 801724e:	42b7      	cmp	r7, r6
 8017250:	4602      	mov	r2, r0
 8017252:	460b      	mov	r3, r1
 8017254:	d134      	bne.n	80172c0 <_dtoa_r+0x708>
 8017256:	f7e9 f819 	bl	800028c <__adddf3>
 801725a:	4642      	mov	r2, r8
 801725c:	464b      	mov	r3, r9
 801725e:	4606      	mov	r6, r0
 8017260:	460f      	mov	r7, r1
 8017262:	f7e9 fc59 	bl	8000b18 <__aeabi_dcmpgt>
 8017266:	b9c8      	cbnz	r0, 801729c <_dtoa_r+0x6e4>
 8017268:	4642      	mov	r2, r8
 801726a:	464b      	mov	r3, r9
 801726c:	4630      	mov	r0, r6
 801726e:	4639      	mov	r1, r7
 8017270:	f7e9 fc2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8017274:	b110      	cbz	r0, 801727c <_dtoa_r+0x6c4>
 8017276:	9b01      	ldr	r3, [sp, #4]
 8017278:	07db      	lsls	r3, r3, #31
 801727a:	d40f      	bmi.n	801729c <_dtoa_r+0x6e4>
 801727c:	4651      	mov	r1, sl
 801727e:	4620      	mov	r0, r4
 8017280:	f000 fe82 	bl	8017f88 <_Bfree>
 8017284:	2300      	movs	r3, #0
 8017286:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017288:	702b      	strb	r3, [r5, #0]
 801728a:	f10b 0301 	add.w	r3, fp, #1
 801728e:	6013      	str	r3, [r2, #0]
 8017290:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017292:	2b00      	cmp	r3, #0
 8017294:	f43f ace2 	beq.w	8016c5c <_dtoa_r+0xa4>
 8017298:	601d      	str	r5, [r3, #0]
 801729a:	e4df      	b.n	8016c5c <_dtoa_r+0xa4>
 801729c:	465f      	mov	r7, fp
 801729e:	462b      	mov	r3, r5
 80172a0:	461d      	mov	r5, r3
 80172a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80172a6:	2a39      	cmp	r2, #57	; 0x39
 80172a8:	d106      	bne.n	80172b8 <_dtoa_r+0x700>
 80172aa:	9a00      	ldr	r2, [sp, #0]
 80172ac:	429a      	cmp	r2, r3
 80172ae:	d1f7      	bne.n	80172a0 <_dtoa_r+0x6e8>
 80172b0:	9900      	ldr	r1, [sp, #0]
 80172b2:	2230      	movs	r2, #48	; 0x30
 80172b4:	3701      	adds	r7, #1
 80172b6:	700a      	strb	r2, [r1, #0]
 80172b8:	781a      	ldrb	r2, [r3, #0]
 80172ba:	3201      	adds	r2, #1
 80172bc:	701a      	strb	r2, [r3, #0]
 80172be:	e790      	b.n	80171e2 <_dtoa_r+0x62a>
 80172c0:	4ba3      	ldr	r3, [pc, #652]	; (8017550 <_dtoa_r+0x998>)
 80172c2:	2200      	movs	r2, #0
 80172c4:	f7e9 f998 	bl	80005f8 <__aeabi_dmul>
 80172c8:	2200      	movs	r2, #0
 80172ca:	2300      	movs	r3, #0
 80172cc:	4606      	mov	r6, r0
 80172ce:	460f      	mov	r7, r1
 80172d0:	f7e9 fbfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80172d4:	2800      	cmp	r0, #0
 80172d6:	d09e      	beq.n	8017216 <_dtoa_r+0x65e>
 80172d8:	e7d0      	b.n	801727c <_dtoa_r+0x6c4>
 80172da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172dc:	2a00      	cmp	r2, #0
 80172de:	f000 80ca 	beq.w	8017476 <_dtoa_r+0x8be>
 80172e2:	9a07      	ldr	r2, [sp, #28]
 80172e4:	2a01      	cmp	r2, #1
 80172e6:	f300 80ad 	bgt.w	8017444 <_dtoa_r+0x88c>
 80172ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80172ec:	2a00      	cmp	r2, #0
 80172ee:	f000 80a5 	beq.w	801743c <_dtoa_r+0x884>
 80172f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80172f6:	9e08      	ldr	r6, [sp, #32]
 80172f8:	9d05      	ldr	r5, [sp, #20]
 80172fa:	9a05      	ldr	r2, [sp, #20]
 80172fc:	441a      	add	r2, r3
 80172fe:	9205      	str	r2, [sp, #20]
 8017300:	9a06      	ldr	r2, [sp, #24]
 8017302:	2101      	movs	r1, #1
 8017304:	441a      	add	r2, r3
 8017306:	4620      	mov	r0, r4
 8017308:	9206      	str	r2, [sp, #24]
 801730a:	f000 ff3d 	bl	8018188 <__i2b>
 801730e:	4607      	mov	r7, r0
 8017310:	b165      	cbz	r5, 801732c <_dtoa_r+0x774>
 8017312:	9b06      	ldr	r3, [sp, #24]
 8017314:	2b00      	cmp	r3, #0
 8017316:	dd09      	ble.n	801732c <_dtoa_r+0x774>
 8017318:	42ab      	cmp	r3, r5
 801731a:	9a05      	ldr	r2, [sp, #20]
 801731c:	bfa8      	it	ge
 801731e:	462b      	movge	r3, r5
 8017320:	1ad2      	subs	r2, r2, r3
 8017322:	9205      	str	r2, [sp, #20]
 8017324:	9a06      	ldr	r2, [sp, #24]
 8017326:	1aed      	subs	r5, r5, r3
 8017328:	1ad3      	subs	r3, r2, r3
 801732a:	9306      	str	r3, [sp, #24]
 801732c:	9b08      	ldr	r3, [sp, #32]
 801732e:	b1f3      	cbz	r3, 801736e <_dtoa_r+0x7b6>
 8017330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017332:	2b00      	cmp	r3, #0
 8017334:	f000 80a3 	beq.w	801747e <_dtoa_r+0x8c6>
 8017338:	2e00      	cmp	r6, #0
 801733a:	dd10      	ble.n	801735e <_dtoa_r+0x7a6>
 801733c:	4639      	mov	r1, r7
 801733e:	4632      	mov	r2, r6
 8017340:	4620      	mov	r0, r4
 8017342:	f000 ffe1 	bl	8018308 <__pow5mult>
 8017346:	4652      	mov	r2, sl
 8017348:	4601      	mov	r1, r0
 801734a:	4607      	mov	r7, r0
 801734c:	4620      	mov	r0, r4
 801734e:	f000 ff31 	bl	80181b4 <__multiply>
 8017352:	4651      	mov	r1, sl
 8017354:	4680      	mov	r8, r0
 8017356:	4620      	mov	r0, r4
 8017358:	f000 fe16 	bl	8017f88 <_Bfree>
 801735c:	46c2      	mov	sl, r8
 801735e:	9b08      	ldr	r3, [sp, #32]
 8017360:	1b9a      	subs	r2, r3, r6
 8017362:	d004      	beq.n	801736e <_dtoa_r+0x7b6>
 8017364:	4651      	mov	r1, sl
 8017366:	4620      	mov	r0, r4
 8017368:	f000 ffce 	bl	8018308 <__pow5mult>
 801736c:	4682      	mov	sl, r0
 801736e:	2101      	movs	r1, #1
 8017370:	4620      	mov	r0, r4
 8017372:	f000 ff09 	bl	8018188 <__i2b>
 8017376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017378:	2b00      	cmp	r3, #0
 801737a:	4606      	mov	r6, r0
 801737c:	f340 8081 	ble.w	8017482 <_dtoa_r+0x8ca>
 8017380:	461a      	mov	r2, r3
 8017382:	4601      	mov	r1, r0
 8017384:	4620      	mov	r0, r4
 8017386:	f000 ffbf 	bl	8018308 <__pow5mult>
 801738a:	9b07      	ldr	r3, [sp, #28]
 801738c:	2b01      	cmp	r3, #1
 801738e:	4606      	mov	r6, r0
 8017390:	dd7a      	ble.n	8017488 <_dtoa_r+0x8d0>
 8017392:	f04f 0800 	mov.w	r8, #0
 8017396:	6933      	ldr	r3, [r6, #16]
 8017398:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801739c:	6918      	ldr	r0, [r3, #16]
 801739e:	f000 fea5 	bl	80180ec <__hi0bits>
 80173a2:	f1c0 0020 	rsb	r0, r0, #32
 80173a6:	9b06      	ldr	r3, [sp, #24]
 80173a8:	4418      	add	r0, r3
 80173aa:	f010 001f 	ands.w	r0, r0, #31
 80173ae:	f000 8094 	beq.w	80174da <_dtoa_r+0x922>
 80173b2:	f1c0 0320 	rsb	r3, r0, #32
 80173b6:	2b04      	cmp	r3, #4
 80173b8:	f340 8085 	ble.w	80174c6 <_dtoa_r+0x90e>
 80173bc:	9b05      	ldr	r3, [sp, #20]
 80173be:	f1c0 001c 	rsb	r0, r0, #28
 80173c2:	4403      	add	r3, r0
 80173c4:	9305      	str	r3, [sp, #20]
 80173c6:	9b06      	ldr	r3, [sp, #24]
 80173c8:	4403      	add	r3, r0
 80173ca:	4405      	add	r5, r0
 80173cc:	9306      	str	r3, [sp, #24]
 80173ce:	9b05      	ldr	r3, [sp, #20]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	dd05      	ble.n	80173e0 <_dtoa_r+0x828>
 80173d4:	4651      	mov	r1, sl
 80173d6:	461a      	mov	r2, r3
 80173d8:	4620      	mov	r0, r4
 80173da:	f000 ffef 	bl	80183bc <__lshift>
 80173de:	4682      	mov	sl, r0
 80173e0:	9b06      	ldr	r3, [sp, #24]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	dd05      	ble.n	80173f2 <_dtoa_r+0x83a>
 80173e6:	4631      	mov	r1, r6
 80173e8:	461a      	mov	r2, r3
 80173ea:	4620      	mov	r0, r4
 80173ec:	f000 ffe6 	bl	80183bc <__lshift>
 80173f0:	4606      	mov	r6, r0
 80173f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d072      	beq.n	80174de <_dtoa_r+0x926>
 80173f8:	4631      	mov	r1, r6
 80173fa:	4650      	mov	r0, sl
 80173fc:	f001 f84a 	bl	8018494 <__mcmp>
 8017400:	2800      	cmp	r0, #0
 8017402:	da6c      	bge.n	80174de <_dtoa_r+0x926>
 8017404:	2300      	movs	r3, #0
 8017406:	4651      	mov	r1, sl
 8017408:	220a      	movs	r2, #10
 801740a:	4620      	mov	r0, r4
 801740c:	f000 fdde 	bl	8017fcc <__multadd>
 8017410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017412:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017416:	4682      	mov	sl, r0
 8017418:	2b00      	cmp	r3, #0
 801741a:	f000 81b0 	beq.w	801777e <_dtoa_r+0xbc6>
 801741e:	2300      	movs	r3, #0
 8017420:	4639      	mov	r1, r7
 8017422:	220a      	movs	r2, #10
 8017424:	4620      	mov	r0, r4
 8017426:	f000 fdd1 	bl	8017fcc <__multadd>
 801742a:	9b01      	ldr	r3, [sp, #4]
 801742c:	2b00      	cmp	r3, #0
 801742e:	4607      	mov	r7, r0
 8017430:	f300 8096 	bgt.w	8017560 <_dtoa_r+0x9a8>
 8017434:	9b07      	ldr	r3, [sp, #28]
 8017436:	2b02      	cmp	r3, #2
 8017438:	dc59      	bgt.n	80174ee <_dtoa_r+0x936>
 801743a:	e091      	b.n	8017560 <_dtoa_r+0x9a8>
 801743c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801743e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017442:	e758      	b.n	80172f6 <_dtoa_r+0x73e>
 8017444:	9b04      	ldr	r3, [sp, #16]
 8017446:	1e5e      	subs	r6, r3, #1
 8017448:	9b08      	ldr	r3, [sp, #32]
 801744a:	42b3      	cmp	r3, r6
 801744c:	bfbf      	itttt	lt
 801744e:	9b08      	ldrlt	r3, [sp, #32]
 8017450:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8017452:	9608      	strlt	r6, [sp, #32]
 8017454:	1af3      	sublt	r3, r6, r3
 8017456:	bfb4      	ite	lt
 8017458:	18d2      	addlt	r2, r2, r3
 801745a:	1b9e      	subge	r6, r3, r6
 801745c:	9b04      	ldr	r3, [sp, #16]
 801745e:	bfbc      	itt	lt
 8017460:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8017462:	2600      	movlt	r6, #0
 8017464:	2b00      	cmp	r3, #0
 8017466:	bfb7      	itett	lt
 8017468:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801746c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8017470:	1a9d      	sublt	r5, r3, r2
 8017472:	2300      	movlt	r3, #0
 8017474:	e741      	b.n	80172fa <_dtoa_r+0x742>
 8017476:	9e08      	ldr	r6, [sp, #32]
 8017478:	9d05      	ldr	r5, [sp, #20]
 801747a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801747c:	e748      	b.n	8017310 <_dtoa_r+0x758>
 801747e:	9a08      	ldr	r2, [sp, #32]
 8017480:	e770      	b.n	8017364 <_dtoa_r+0x7ac>
 8017482:	9b07      	ldr	r3, [sp, #28]
 8017484:	2b01      	cmp	r3, #1
 8017486:	dc19      	bgt.n	80174bc <_dtoa_r+0x904>
 8017488:	9b02      	ldr	r3, [sp, #8]
 801748a:	b9bb      	cbnz	r3, 80174bc <_dtoa_r+0x904>
 801748c:	9b03      	ldr	r3, [sp, #12]
 801748e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017492:	b99b      	cbnz	r3, 80174bc <_dtoa_r+0x904>
 8017494:	9b03      	ldr	r3, [sp, #12]
 8017496:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801749a:	0d1b      	lsrs	r3, r3, #20
 801749c:	051b      	lsls	r3, r3, #20
 801749e:	b183      	cbz	r3, 80174c2 <_dtoa_r+0x90a>
 80174a0:	9b05      	ldr	r3, [sp, #20]
 80174a2:	3301      	adds	r3, #1
 80174a4:	9305      	str	r3, [sp, #20]
 80174a6:	9b06      	ldr	r3, [sp, #24]
 80174a8:	3301      	adds	r3, #1
 80174aa:	9306      	str	r3, [sp, #24]
 80174ac:	f04f 0801 	mov.w	r8, #1
 80174b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	f47f af6f 	bne.w	8017396 <_dtoa_r+0x7de>
 80174b8:	2001      	movs	r0, #1
 80174ba:	e774      	b.n	80173a6 <_dtoa_r+0x7ee>
 80174bc:	f04f 0800 	mov.w	r8, #0
 80174c0:	e7f6      	b.n	80174b0 <_dtoa_r+0x8f8>
 80174c2:	4698      	mov	r8, r3
 80174c4:	e7f4      	b.n	80174b0 <_dtoa_r+0x8f8>
 80174c6:	d082      	beq.n	80173ce <_dtoa_r+0x816>
 80174c8:	9a05      	ldr	r2, [sp, #20]
 80174ca:	331c      	adds	r3, #28
 80174cc:	441a      	add	r2, r3
 80174ce:	9205      	str	r2, [sp, #20]
 80174d0:	9a06      	ldr	r2, [sp, #24]
 80174d2:	441a      	add	r2, r3
 80174d4:	441d      	add	r5, r3
 80174d6:	9206      	str	r2, [sp, #24]
 80174d8:	e779      	b.n	80173ce <_dtoa_r+0x816>
 80174da:	4603      	mov	r3, r0
 80174dc:	e7f4      	b.n	80174c8 <_dtoa_r+0x910>
 80174de:	9b04      	ldr	r3, [sp, #16]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	dc37      	bgt.n	8017554 <_dtoa_r+0x99c>
 80174e4:	9b07      	ldr	r3, [sp, #28]
 80174e6:	2b02      	cmp	r3, #2
 80174e8:	dd34      	ble.n	8017554 <_dtoa_r+0x99c>
 80174ea:	9b04      	ldr	r3, [sp, #16]
 80174ec:	9301      	str	r3, [sp, #4]
 80174ee:	9b01      	ldr	r3, [sp, #4]
 80174f0:	b963      	cbnz	r3, 801750c <_dtoa_r+0x954>
 80174f2:	4631      	mov	r1, r6
 80174f4:	2205      	movs	r2, #5
 80174f6:	4620      	mov	r0, r4
 80174f8:	f000 fd68 	bl	8017fcc <__multadd>
 80174fc:	4601      	mov	r1, r0
 80174fe:	4606      	mov	r6, r0
 8017500:	4650      	mov	r0, sl
 8017502:	f000 ffc7 	bl	8018494 <__mcmp>
 8017506:	2800      	cmp	r0, #0
 8017508:	f73f adbb 	bgt.w	8017082 <_dtoa_r+0x4ca>
 801750c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801750e:	9d00      	ldr	r5, [sp, #0]
 8017510:	ea6f 0b03 	mvn.w	fp, r3
 8017514:	f04f 0800 	mov.w	r8, #0
 8017518:	4631      	mov	r1, r6
 801751a:	4620      	mov	r0, r4
 801751c:	f000 fd34 	bl	8017f88 <_Bfree>
 8017520:	2f00      	cmp	r7, #0
 8017522:	f43f aeab 	beq.w	801727c <_dtoa_r+0x6c4>
 8017526:	f1b8 0f00 	cmp.w	r8, #0
 801752a:	d005      	beq.n	8017538 <_dtoa_r+0x980>
 801752c:	45b8      	cmp	r8, r7
 801752e:	d003      	beq.n	8017538 <_dtoa_r+0x980>
 8017530:	4641      	mov	r1, r8
 8017532:	4620      	mov	r0, r4
 8017534:	f000 fd28 	bl	8017f88 <_Bfree>
 8017538:	4639      	mov	r1, r7
 801753a:	4620      	mov	r0, r4
 801753c:	f000 fd24 	bl	8017f88 <_Bfree>
 8017540:	e69c      	b.n	801727c <_dtoa_r+0x6c4>
 8017542:	2600      	movs	r6, #0
 8017544:	4637      	mov	r7, r6
 8017546:	e7e1      	b.n	801750c <_dtoa_r+0x954>
 8017548:	46bb      	mov	fp, r7
 801754a:	4637      	mov	r7, r6
 801754c:	e599      	b.n	8017082 <_dtoa_r+0x4ca>
 801754e:	bf00      	nop
 8017550:	40240000 	.word	0x40240000
 8017554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017556:	2b00      	cmp	r3, #0
 8017558:	f000 80c8 	beq.w	80176ec <_dtoa_r+0xb34>
 801755c:	9b04      	ldr	r3, [sp, #16]
 801755e:	9301      	str	r3, [sp, #4]
 8017560:	2d00      	cmp	r5, #0
 8017562:	dd05      	ble.n	8017570 <_dtoa_r+0x9b8>
 8017564:	4639      	mov	r1, r7
 8017566:	462a      	mov	r2, r5
 8017568:	4620      	mov	r0, r4
 801756a:	f000 ff27 	bl	80183bc <__lshift>
 801756e:	4607      	mov	r7, r0
 8017570:	f1b8 0f00 	cmp.w	r8, #0
 8017574:	d05b      	beq.n	801762e <_dtoa_r+0xa76>
 8017576:	6879      	ldr	r1, [r7, #4]
 8017578:	4620      	mov	r0, r4
 801757a:	f000 fcc5 	bl	8017f08 <_Balloc>
 801757e:	4605      	mov	r5, r0
 8017580:	b928      	cbnz	r0, 801758e <_dtoa_r+0x9d6>
 8017582:	4b83      	ldr	r3, [pc, #524]	; (8017790 <_dtoa_r+0xbd8>)
 8017584:	4602      	mov	r2, r0
 8017586:	f240 21ef 	movw	r1, #751	; 0x2ef
 801758a:	f7ff bb2e 	b.w	8016bea <_dtoa_r+0x32>
 801758e:	693a      	ldr	r2, [r7, #16]
 8017590:	3202      	adds	r2, #2
 8017592:	0092      	lsls	r2, r2, #2
 8017594:	f107 010c 	add.w	r1, r7, #12
 8017598:	300c      	adds	r0, #12
 801759a:	f7ff fa4a 	bl	8016a32 <memcpy>
 801759e:	2201      	movs	r2, #1
 80175a0:	4629      	mov	r1, r5
 80175a2:	4620      	mov	r0, r4
 80175a4:	f000 ff0a 	bl	80183bc <__lshift>
 80175a8:	9b00      	ldr	r3, [sp, #0]
 80175aa:	3301      	adds	r3, #1
 80175ac:	9304      	str	r3, [sp, #16]
 80175ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80175b2:	4413      	add	r3, r2
 80175b4:	9308      	str	r3, [sp, #32]
 80175b6:	9b02      	ldr	r3, [sp, #8]
 80175b8:	f003 0301 	and.w	r3, r3, #1
 80175bc:	46b8      	mov	r8, r7
 80175be:	9306      	str	r3, [sp, #24]
 80175c0:	4607      	mov	r7, r0
 80175c2:	9b04      	ldr	r3, [sp, #16]
 80175c4:	4631      	mov	r1, r6
 80175c6:	3b01      	subs	r3, #1
 80175c8:	4650      	mov	r0, sl
 80175ca:	9301      	str	r3, [sp, #4]
 80175cc:	f7ff fa6c 	bl	8016aa8 <quorem>
 80175d0:	4641      	mov	r1, r8
 80175d2:	9002      	str	r0, [sp, #8]
 80175d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80175d8:	4650      	mov	r0, sl
 80175da:	f000 ff5b 	bl	8018494 <__mcmp>
 80175de:	463a      	mov	r2, r7
 80175e0:	9005      	str	r0, [sp, #20]
 80175e2:	4631      	mov	r1, r6
 80175e4:	4620      	mov	r0, r4
 80175e6:	f000 ff71 	bl	80184cc <__mdiff>
 80175ea:	68c2      	ldr	r2, [r0, #12]
 80175ec:	4605      	mov	r5, r0
 80175ee:	bb02      	cbnz	r2, 8017632 <_dtoa_r+0xa7a>
 80175f0:	4601      	mov	r1, r0
 80175f2:	4650      	mov	r0, sl
 80175f4:	f000 ff4e 	bl	8018494 <__mcmp>
 80175f8:	4602      	mov	r2, r0
 80175fa:	4629      	mov	r1, r5
 80175fc:	4620      	mov	r0, r4
 80175fe:	9209      	str	r2, [sp, #36]	; 0x24
 8017600:	f000 fcc2 	bl	8017f88 <_Bfree>
 8017604:	9b07      	ldr	r3, [sp, #28]
 8017606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017608:	9d04      	ldr	r5, [sp, #16]
 801760a:	ea43 0102 	orr.w	r1, r3, r2
 801760e:	9b06      	ldr	r3, [sp, #24]
 8017610:	4319      	orrs	r1, r3
 8017612:	d110      	bne.n	8017636 <_dtoa_r+0xa7e>
 8017614:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017618:	d029      	beq.n	801766e <_dtoa_r+0xab6>
 801761a:	9b05      	ldr	r3, [sp, #20]
 801761c:	2b00      	cmp	r3, #0
 801761e:	dd02      	ble.n	8017626 <_dtoa_r+0xa6e>
 8017620:	9b02      	ldr	r3, [sp, #8]
 8017622:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8017626:	9b01      	ldr	r3, [sp, #4]
 8017628:	f883 9000 	strb.w	r9, [r3]
 801762c:	e774      	b.n	8017518 <_dtoa_r+0x960>
 801762e:	4638      	mov	r0, r7
 8017630:	e7ba      	b.n	80175a8 <_dtoa_r+0x9f0>
 8017632:	2201      	movs	r2, #1
 8017634:	e7e1      	b.n	80175fa <_dtoa_r+0xa42>
 8017636:	9b05      	ldr	r3, [sp, #20]
 8017638:	2b00      	cmp	r3, #0
 801763a:	db04      	blt.n	8017646 <_dtoa_r+0xa8e>
 801763c:	9907      	ldr	r1, [sp, #28]
 801763e:	430b      	orrs	r3, r1
 8017640:	9906      	ldr	r1, [sp, #24]
 8017642:	430b      	orrs	r3, r1
 8017644:	d120      	bne.n	8017688 <_dtoa_r+0xad0>
 8017646:	2a00      	cmp	r2, #0
 8017648:	dded      	ble.n	8017626 <_dtoa_r+0xa6e>
 801764a:	4651      	mov	r1, sl
 801764c:	2201      	movs	r2, #1
 801764e:	4620      	mov	r0, r4
 8017650:	f000 feb4 	bl	80183bc <__lshift>
 8017654:	4631      	mov	r1, r6
 8017656:	4682      	mov	sl, r0
 8017658:	f000 ff1c 	bl	8018494 <__mcmp>
 801765c:	2800      	cmp	r0, #0
 801765e:	dc03      	bgt.n	8017668 <_dtoa_r+0xab0>
 8017660:	d1e1      	bne.n	8017626 <_dtoa_r+0xa6e>
 8017662:	f019 0f01 	tst.w	r9, #1
 8017666:	d0de      	beq.n	8017626 <_dtoa_r+0xa6e>
 8017668:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801766c:	d1d8      	bne.n	8017620 <_dtoa_r+0xa68>
 801766e:	9a01      	ldr	r2, [sp, #4]
 8017670:	2339      	movs	r3, #57	; 0x39
 8017672:	7013      	strb	r3, [r2, #0]
 8017674:	462b      	mov	r3, r5
 8017676:	461d      	mov	r5, r3
 8017678:	3b01      	subs	r3, #1
 801767a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801767e:	2a39      	cmp	r2, #57	; 0x39
 8017680:	d06c      	beq.n	801775c <_dtoa_r+0xba4>
 8017682:	3201      	adds	r2, #1
 8017684:	701a      	strb	r2, [r3, #0]
 8017686:	e747      	b.n	8017518 <_dtoa_r+0x960>
 8017688:	2a00      	cmp	r2, #0
 801768a:	dd07      	ble.n	801769c <_dtoa_r+0xae4>
 801768c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017690:	d0ed      	beq.n	801766e <_dtoa_r+0xab6>
 8017692:	9a01      	ldr	r2, [sp, #4]
 8017694:	f109 0301 	add.w	r3, r9, #1
 8017698:	7013      	strb	r3, [r2, #0]
 801769a:	e73d      	b.n	8017518 <_dtoa_r+0x960>
 801769c:	9b04      	ldr	r3, [sp, #16]
 801769e:	9a08      	ldr	r2, [sp, #32]
 80176a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80176a4:	4293      	cmp	r3, r2
 80176a6:	d043      	beq.n	8017730 <_dtoa_r+0xb78>
 80176a8:	4651      	mov	r1, sl
 80176aa:	2300      	movs	r3, #0
 80176ac:	220a      	movs	r2, #10
 80176ae:	4620      	mov	r0, r4
 80176b0:	f000 fc8c 	bl	8017fcc <__multadd>
 80176b4:	45b8      	cmp	r8, r7
 80176b6:	4682      	mov	sl, r0
 80176b8:	f04f 0300 	mov.w	r3, #0
 80176bc:	f04f 020a 	mov.w	r2, #10
 80176c0:	4641      	mov	r1, r8
 80176c2:	4620      	mov	r0, r4
 80176c4:	d107      	bne.n	80176d6 <_dtoa_r+0xb1e>
 80176c6:	f000 fc81 	bl	8017fcc <__multadd>
 80176ca:	4680      	mov	r8, r0
 80176cc:	4607      	mov	r7, r0
 80176ce:	9b04      	ldr	r3, [sp, #16]
 80176d0:	3301      	adds	r3, #1
 80176d2:	9304      	str	r3, [sp, #16]
 80176d4:	e775      	b.n	80175c2 <_dtoa_r+0xa0a>
 80176d6:	f000 fc79 	bl	8017fcc <__multadd>
 80176da:	4639      	mov	r1, r7
 80176dc:	4680      	mov	r8, r0
 80176de:	2300      	movs	r3, #0
 80176e0:	220a      	movs	r2, #10
 80176e2:	4620      	mov	r0, r4
 80176e4:	f000 fc72 	bl	8017fcc <__multadd>
 80176e8:	4607      	mov	r7, r0
 80176ea:	e7f0      	b.n	80176ce <_dtoa_r+0xb16>
 80176ec:	9b04      	ldr	r3, [sp, #16]
 80176ee:	9301      	str	r3, [sp, #4]
 80176f0:	9d00      	ldr	r5, [sp, #0]
 80176f2:	4631      	mov	r1, r6
 80176f4:	4650      	mov	r0, sl
 80176f6:	f7ff f9d7 	bl	8016aa8 <quorem>
 80176fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80176fe:	9b00      	ldr	r3, [sp, #0]
 8017700:	f805 9b01 	strb.w	r9, [r5], #1
 8017704:	1aea      	subs	r2, r5, r3
 8017706:	9b01      	ldr	r3, [sp, #4]
 8017708:	4293      	cmp	r3, r2
 801770a:	dd07      	ble.n	801771c <_dtoa_r+0xb64>
 801770c:	4651      	mov	r1, sl
 801770e:	2300      	movs	r3, #0
 8017710:	220a      	movs	r2, #10
 8017712:	4620      	mov	r0, r4
 8017714:	f000 fc5a 	bl	8017fcc <__multadd>
 8017718:	4682      	mov	sl, r0
 801771a:	e7ea      	b.n	80176f2 <_dtoa_r+0xb3a>
 801771c:	9b01      	ldr	r3, [sp, #4]
 801771e:	2b00      	cmp	r3, #0
 8017720:	bfc8      	it	gt
 8017722:	461d      	movgt	r5, r3
 8017724:	9b00      	ldr	r3, [sp, #0]
 8017726:	bfd8      	it	le
 8017728:	2501      	movle	r5, #1
 801772a:	441d      	add	r5, r3
 801772c:	f04f 0800 	mov.w	r8, #0
 8017730:	4651      	mov	r1, sl
 8017732:	2201      	movs	r2, #1
 8017734:	4620      	mov	r0, r4
 8017736:	f000 fe41 	bl	80183bc <__lshift>
 801773a:	4631      	mov	r1, r6
 801773c:	4682      	mov	sl, r0
 801773e:	f000 fea9 	bl	8018494 <__mcmp>
 8017742:	2800      	cmp	r0, #0
 8017744:	dc96      	bgt.n	8017674 <_dtoa_r+0xabc>
 8017746:	d102      	bne.n	801774e <_dtoa_r+0xb96>
 8017748:	f019 0f01 	tst.w	r9, #1
 801774c:	d192      	bne.n	8017674 <_dtoa_r+0xabc>
 801774e:	462b      	mov	r3, r5
 8017750:	461d      	mov	r5, r3
 8017752:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017756:	2a30      	cmp	r2, #48	; 0x30
 8017758:	d0fa      	beq.n	8017750 <_dtoa_r+0xb98>
 801775a:	e6dd      	b.n	8017518 <_dtoa_r+0x960>
 801775c:	9a00      	ldr	r2, [sp, #0]
 801775e:	429a      	cmp	r2, r3
 8017760:	d189      	bne.n	8017676 <_dtoa_r+0xabe>
 8017762:	f10b 0b01 	add.w	fp, fp, #1
 8017766:	2331      	movs	r3, #49	; 0x31
 8017768:	e796      	b.n	8017698 <_dtoa_r+0xae0>
 801776a:	4b0a      	ldr	r3, [pc, #40]	; (8017794 <_dtoa_r+0xbdc>)
 801776c:	f7ff ba99 	b.w	8016ca2 <_dtoa_r+0xea>
 8017770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017772:	2b00      	cmp	r3, #0
 8017774:	f47f aa6d 	bne.w	8016c52 <_dtoa_r+0x9a>
 8017778:	4b07      	ldr	r3, [pc, #28]	; (8017798 <_dtoa_r+0xbe0>)
 801777a:	f7ff ba92 	b.w	8016ca2 <_dtoa_r+0xea>
 801777e:	9b01      	ldr	r3, [sp, #4]
 8017780:	2b00      	cmp	r3, #0
 8017782:	dcb5      	bgt.n	80176f0 <_dtoa_r+0xb38>
 8017784:	9b07      	ldr	r3, [sp, #28]
 8017786:	2b02      	cmp	r3, #2
 8017788:	f73f aeb1 	bgt.w	80174ee <_dtoa_r+0x936>
 801778c:	e7b0      	b.n	80176f0 <_dtoa_r+0xb38>
 801778e:	bf00      	nop
 8017790:	0801cf9c 	.word	0x0801cf9c
 8017794:	0801ce59 	.word	0x0801ce59
 8017798:	0801cf37 	.word	0x0801cf37

0801779c <_free_r>:
 801779c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801779e:	2900      	cmp	r1, #0
 80177a0:	d044      	beq.n	801782c <_free_r+0x90>
 80177a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80177a6:	9001      	str	r0, [sp, #4]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	f1a1 0404 	sub.w	r4, r1, #4
 80177ae:	bfb8      	it	lt
 80177b0:	18e4      	addlt	r4, r4, r3
 80177b2:	f7fd f941 	bl	8014a38 <__malloc_lock>
 80177b6:	4a1e      	ldr	r2, [pc, #120]	; (8017830 <_free_r+0x94>)
 80177b8:	9801      	ldr	r0, [sp, #4]
 80177ba:	6813      	ldr	r3, [r2, #0]
 80177bc:	b933      	cbnz	r3, 80177cc <_free_r+0x30>
 80177be:	6063      	str	r3, [r4, #4]
 80177c0:	6014      	str	r4, [r2, #0]
 80177c2:	b003      	add	sp, #12
 80177c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80177c8:	f7fd b93c 	b.w	8014a44 <__malloc_unlock>
 80177cc:	42a3      	cmp	r3, r4
 80177ce:	d908      	bls.n	80177e2 <_free_r+0x46>
 80177d0:	6825      	ldr	r5, [r4, #0]
 80177d2:	1961      	adds	r1, r4, r5
 80177d4:	428b      	cmp	r3, r1
 80177d6:	bf01      	itttt	eq
 80177d8:	6819      	ldreq	r1, [r3, #0]
 80177da:	685b      	ldreq	r3, [r3, #4]
 80177dc:	1949      	addeq	r1, r1, r5
 80177de:	6021      	streq	r1, [r4, #0]
 80177e0:	e7ed      	b.n	80177be <_free_r+0x22>
 80177e2:	461a      	mov	r2, r3
 80177e4:	685b      	ldr	r3, [r3, #4]
 80177e6:	b10b      	cbz	r3, 80177ec <_free_r+0x50>
 80177e8:	42a3      	cmp	r3, r4
 80177ea:	d9fa      	bls.n	80177e2 <_free_r+0x46>
 80177ec:	6811      	ldr	r1, [r2, #0]
 80177ee:	1855      	adds	r5, r2, r1
 80177f0:	42a5      	cmp	r5, r4
 80177f2:	d10b      	bne.n	801780c <_free_r+0x70>
 80177f4:	6824      	ldr	r4, [r4, #0]
 80177f6:	4421      	add	r1, r4
 80177f8:	1854      	adds	r4, r2, r1
 80177fa:	42a3      	cmp	r3, r4
 80177fc:	6011      	str	r1, [r2, #0]
 80177fe:	d1e0      	bne.n	80177c2 <_free_r+0x26>
 8017800:	681c      	ldr	r4, [r3, #0]
 8017802:	685b      	ldr	r3, [r3, #4]
 8017804:	6053      	str	r3, [r2, #4]
 8017806:	440c      	add	r4, r1
 8017808:	6014      	str	r4, [r2, #0]
 801780a:	e7da      	b.n	80177c2 <_free_r+0x26>
 801780c:	d902      	bls.n	8017814 <_free_r+0x78>
 801780e:	230c      	movs	r3, #12
 8017810:	6003      	str	r3, [r0, #0]
 8017812:	e7d6      	b.n	80177c2 <_free_r+0x26>
 8017814:	6825      	ldr	r5, [r4, #0]
 8017816:	1961      	adds	r1, r4, r5
 8017818:	428b      	cmp	r3, r1
 801781a:	bf04      	itt	eq
 801781c:	6819      	ldreq	r1, [r3, #0]
 801781e:	685b      	ldreq	r3, [r3, #4]
 8017820:	6063      	str	r3, [r4, #4]
 8017822:	bf04      	itt	eq
 8017824:	1949      	addeq	r1, r1, r5
 8017826:	6021      	streq	r1, [r4, #0]
 8017828:	6054      	str	r4, [r2, #4]
 801782a:	e7ca      	b.n	80177c2 <_free_r+0x26>
 801782c:	b003      	add	sp, #12
 801782e:	bd30      	pop	{r4, r5, pc}
 8017830:	20002460 	.word	0x20002460

08017834 <rshift>:
 8017834:	6903      	ldr	r3, [r0, #16]
 8017836:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801783a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801783e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017842:	f100 0414 	add.w	r4, r0, #20
 8017846:	dd45      	ble.n	80178d4 <rshift+0xa0>
 8017848:	f011 011f 	ands.w	r1, r1, #31
 801784c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017850:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017854:	d10c      	bne.n	8017870 <rshift+0x3c>
 8017856:	f100 0710 	add.w	r7, r0, #16
 801785a:	4629      	mov	r1, r5
 801785c:	42b1      	cmp	r1, r6
 801785e:	d334      	bcc.n	80178ca <rshift+0x96>
 8017860:	1a9b      	subs	r3, r3, r2
 8017862:	009b      	lsls	r3, r3, #2
 8017864:	1eea      	subs	r2, r5, #3
 8017866:	4296      	cmp	r6, r2
 8017868:	bf38      	it	cc
 801786a:	2300      	movcc	r3, #0
 801786c:	4423      	add	r3, r4
 801786e:	e015      	b.n	801789c <rshift+0x68>
 8017870:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017874:	f1c1 0820 	rsb	r8, r1, #32
 8017878:	40cf      	lsrs	r7, r1
 801787a:	f105 0e04 	add.w	lr, r5, #4
 801787e:	46a1      	mov	r9, r4
 8017880:	4576      	cmp	r6, lr
 8017882:	46f4      	mov	ip, lr
 8017884:	d815      	bhi.n	80178b2 <rshift+0x7e>
 8017886:	1a9a      	subs	r2, r3, r2
 8017888:	0092      	lsls	r2, r2, #2
 801788a:	3a04      	subs	r2, #4
 801788c:	3501      	adds	r5, #1
 801788e:	42ae      	cmp	r6, r5
 8017890:	bf38      	it	cc
 8017892:	2200      	movcc	r2, #0
 8017894:	18a3      	adds	r3, r4, r2
 8017896:	50a7      	str	r7, [r4, r2]
 8017898:	b107      	cbz	r7, 801789c <rshift+0x68>
 801789a:	3304      	adds	r3, #4
 801789c:	1b1a      	subs	r2, r3, r4
 801789e:	42a3      	cmp	r3, r4
 80178a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80178a4:	bf08      	it	eq
 80178a6:	2300      	moveq	r3, #0
 80178a8:	6102      	str	r2, [r0, #16]
 80178aa:	bf08      	it	eq
 80178ac:	6143      	streq	r3, [r0, #20]
 80178ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178b2:	f8dc c000 	ldr.w	ip, [ip]
 80178b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80178ba:	ea4c 0707 	orr.w	r7, ip, r7
 80178be:	f849 7b04 	str.w	r7, [r9], #4
 80178c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80178c6:	40cf      	lsrs	r7, r1
 80178c8:	e7da      	b.n	8017880 <rshift+0x4c>
 80178ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80178ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80178d2:	e7c3      	b.n	801785c <rshift+0x28>
 80178d4:	4623      	mov	r3, r4
 80178d6:	e7e1      	b.n	801789c <rshift+0x68>

080178d8 <__hexdig_fun>:
 80178d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80178dc:	2b09      	cmp	r3, #9
 80178de:	d802      	bhi.n	80178e6 <__hexdig_fun+0xe>
 80178e0:	3820      	subs	r0, #32
 80178e2:	b2c0      	uxtb	r0, r0
 80178e4:	4770      	bx	lr
 80178e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80178ea:	2b05      	cmp	r3, #5
 80178ec:	d801      	bhi.n	80178f2 <__hexdig_fun+0x1a>
 80178ee:	3847      	subs	r0, #71	; 0x47
 80178f0:	e7f7      	b.n	80178e2 <__hexdig_fun+0xa>
 80178f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80178f6:	2b05      	cmp	r3, #5
 80178f8:	d801      	bhi.n	80178fe <__hexdig_fun+0x26>
 80178fa:	3827      	subs	r0, #39	; 0x27
 80178fc:	e7f1      	b.n	80178e2 <__hexdig_fun+0xa>
 80178fe:	2000      	movs	r0, #0
 8017900:	4770      	bx	lr
	...

08017904 <__gethex>:
 8017904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017908:	4617      	mov	r7, r2
 801790a:	680a      	ldr	r2, [r1, #0]
 801790c:	b085      	sub	sp, #20
 801790e:	f102 0b02 	add.w	fp, r2, #2
 8017912:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017916:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801791a:	4681      	mov	r9, r0
 801791c:	468a      	mov	sl, r1
 801791e:	9302      	str	r3, [sp, #8]
 8017920:	32fe      	adds	r2, #254	; 0xfe
 8017922:	eb02 030b 	add.w	r3, r2, fp
 8017926:	46d8      	mov	r8, fp
 8017928:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801792c:	9301      	str	r3, [sp, #4]
 801792e:	2830      	cmp	r0, #48	; 0x30
 8017930:	d0f7      	beq.n	8017922 <__gethex+0x1e>
 8017932:	f7ff ffd1 	bl	80178d8 <__hexdig_fun>
 8017936:	4604      	mov	r4, r0
 8017938:	2800      	cmp	r0, #0
 801793a:	d138      	bne.n	80179ae <__gethex+0xaa>
 801793c:	49a7      	ldr	r1, [pc, #668]	; (8017bdc <__gethex+0x2d8>)
 801793e:	2201      	movs	r2, #1
 8017940:	4640      	mov	r0, r8
 8017942:	f7fe ff62 	bl	801680a <strncmp>
 8017946:	4606      	mov	r6, r0
 8017948:	2800      	cmp	r0, #0
 801794a:	d169      	bne.n	8017a20 <__gethex+0x11c>
 801794c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8017950:	465d      	mov	r5, fp
 8017952:	f7ff ffc1 	bl	80178d8 <__hexdig_fun>
 8017956:	2800      	cmp	r0, #0
 8017958:	d064      	beq.n	8017a24 <__gethex+0x120>
 801795a:	465a      	mov	r2, fp
 801795c:	7810      	ldrb	r0, [r2, #0]
 801795e:	2830      	cmp	r0, #48	; 0x30
 8017960:	4690      	mov	r8, r2
 8017962:	f102 0201 	add.w	r2, r2, #1
 8017966:	d0f9      	beq.n	801795c <__gethex+0x58>
 8017968:	f7ff ffb6 	bl	80178d8 <__hexdig_fun>
 801796c:	2301      	movs	r3, #1
 801796e:	fab0 f480 	clz	r4, r0
 8017972:	0964      	lsrs	r4, r4, #5
 8017974:	465e      	mov	r6, fp
 8017976:	9301      	str	r3, [sp, #4]
 8017978:	4642      	mov	r2, r8
 801797a:	4615      	mov	r5, r2
 801797c:	3201      	adds	r2, #1
 801797e:	7828      	ldrb	r0, [r5, #0]
 8017980:	f7ff ffaa 	bl	80178d8 <__hexdig_fun>
 8017984:	2800      	cmp	r0, #0
 8017986:	d1f8      	bne.n	801797a <__gethex+0x76>
 8017988:	4994      	ldr	r1, [pc, #592]	; (8017bdc <__gethex+0x2d8>)
 801798a:	2201      	movs	r2, #1
 801798c:	4628      	mov	r0, r5
 801798e:	f7fe ff3c 	bl	801680a <strncmp>
 8017992:	b978      	cbnz	r0, 80179b4 <__gethex+0xb0>
 8017994:	b946      	cbnz	r6, 80179a8 <__gethex+0xa4>
 8017996:	1c6e      	adds	r6, r5, #1
 8017998:	4632      	mov	r2, r6
 801799a:	4615      	mov	r5, r2
 801799c:	3201      	adds	r2, #1
 801799e:	7828      	ldrb	r0, [r5, #0]
 80179a0:	f7ff ff9a 	bl	80178d8 <__hexdig_fun>
 80179a4:	2800      	cmp	r0, #0
 80179a6:	d1f8      	bne.n	801799a <__gethex+0x96>
 80179a8:	1b73      	subs	r3, r6, r5
 80179aa:	009e      	lsls	r6, r3, #2
 80179ac:	e004      	b.n	80179b8 <__gethex+0xb4>
 80179ae:	2400      	movs	r4, #0
 80179b0:	4626      	mov	r6, r4
 80179b2:	e7e1      	b.n	8017978 <__gethex+0x74>
 80179b4:	2e00      	cmp	r6, #0
 80179b6:	d1f7      	bne.n	80179a8 <__gethex+0xa4>
 80179b8:	782b      	ldrb	r3, [r5, #0]
 80179ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80179be:	2b50      	cmp	r3, #80	; 0x50
 80179c0:	d13d      	bne.n	8017a3e <__gethex+0x13a>
 80179c2:	786b      	ldrb	r3, [r5, #1]
 80179c4:	2b2b      	cmp	r3, #43	; 0x2b
 80179c6:	d02f      	beq.n	8017a28 <__gethex+0x124>
 80179c8:	2b2d      	cmp	r3, #45	; 0x2d
 80179ca:	d031      	beq.n	8017a30 <__gethex+0x12c>
 80179cc:	1c69      	adds	r1, r5, #1
 80179ce:	f04f 0b00 	mov.w	fp, #0
 80179d2:	7808      	ldrb	r0, [r1, #0]
 80179d4:	f7ff ff80 	bl	80178d8 <__hexdig_fun>
 80179d8:	1e42      	subs	r2, r0, #1
 80179da:	b2d2      	uxtb	r2, r2
 80179dc:	2a18      	cmp	r2, #24
 80179de:	d82e      	bhi.n	8017a3e <__gethex+0x13a>
 80179e0:	f1a0 0210 	sub.w	r2, r0, #16
 80179e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80179e8:	f7ff ff76 	bl	80178d8 <__hexdig_fun>
 80179ec:	f100 3cff 	add.w	ip, r0, #4294967295
 80179f0:	fa5f fc8c 	uxtb.w	ip, ip
 80179f4:	f1bc 0f18 	cmp.w	ip, #24
 80179f8:	d91d      	bls.n	8017a36 <__gethex+0x132>
 80179fa:	f1bb 0f00 	cmp.w	fp, #0
 80179fe:	d000      	beq.n	8017a02 <__gethex+0xfe>
 8017a00:	4252      	negs	r2, r2
 8017a02:	4416      	add	r6, r2
 8017a04:	f8ca 1000 	str.w	r1, [sl]
 8017a08:	b1dc      	cbz	r4, 8017a42 <__gethex+0x13e>
 8017a0a:	9b01      	ldr	r3, [sp, #4]
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	bf14      	ite	ne
 8017a10:	f04f 0800 	movne.w	r8, #0
 8017a14:	f04f 0806 	moveq.w	r8, #6
 8017a18:	4640      	mov	r0, r8
 8017a1a:	b005      	add	sp, #20
 8017a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a20:	4645      	mov	r5, r8
 8017a22:	4626      	mov	r6, r4
 8017a24:	2401      	movs	r4, #1
 8017a26:	e7c7      	b.n	80179b8 <__gethex+0xb4>
 8017a28:	f04f 0b00 	mov.w	fp, #0
 8017a2c:	1ca9      	adds	r1, r5, #2
 8017a2e:	e7d0      	b.n	80179d2 <__gethex+0xce>
 8017a30:	f04f 0b01 	mov.w	fp, #1
 8017a34:	e7fa      	b.n	8017a2c <__gethex+0x128>
 8017a36:	230a      	movs	r3, #10
 8017a38:	fb03 0002 	mla	r0, r3, r2, r0
 8017a3c:	e7d0      	b.n	80179e0 <__gethex+0xdc>
 8017a3e:	4629      	mov	r1, r5
 8017a40:	e7e0      	b.n	8017a04 <__gethex+0x100>
 8017a42:	eba5 0308 	sub.w	r3, r5, r8
 8017a46:	3b01      	subs	r3, #1
 8017a48:	4621      	mov	r1, r4
 8017a4a:	2b07      	cmp	r3, #7
 8017a4c:	dc0a      	bgt.n	8017a64 <__gethex+0x160>
 8017a4e:	4648      	mov	r0, r9
 8017a50:	f000 fa5a 	bl	8017f08 <_Balloc>
 8017a54:	4604      	mov	r4, r0
 8017a56:	b940      	cbnz	r0, 8017a6a <__gethex+0x166>
 8017a58:	4b61      	ldr	r3, [pc, #388]	; (8017be0 <__gethex+0x2dc>)
 8017a5a:	4602      	mov	r2, r0
 8017a5c:	21e4      	movs	r1, #228	; 0xe4
 8017a5e:	4861      	ldr	r0, [pc, #388]	; (8017be4 <__gethex+0x2e0>)
 8017a60:	f7ff f804 	bl	8016a6c <__assert_func>
 8017a64:	3101      	adds	r1, #1
 8017a66:	105b      	asrs	r3, r3, #1
 8017a68:	e7ef      	b.n	8017a4a <__gethex+0x146>
 8017a6a:	f100 0a14 	add.w	sl, r0, #20
 8017a6e:	2300      	movs	r3, #0
 8017a70:	495a      	ldr	r1, [pc, #360]	; (8017bdc <__gethex+0x2d8>)
 8017a72:	f8cd a004 	str.w	sl, [sp, #4]
 8017a76:	469b      	mov	fp, r3
 8017a78:	45a8      	cmp	r8, r5
 8017a7a:	d342      	bcc.n	8017b02 <__gethex+0x1fe>
 8017a7c:	9801      	ldr	r0, [sp, #4]
 8017a7e:	f840 bb04 	str.w	fp, [r0], #4
 8017a82:	eba0 000a 	sub.w	r0, r0, sl
 8017a86:	1080      	asrs	r0, r0, #2
 8017a88:	6120      	str	r0, [r4, #16]
 8017a8a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8017a8e:	4658      	mov	r0, fp
 8017a90:	f000 fb2c 	bl	80180ec <__hi0bits>
 8017a94:	683d      	ldr	r5, [r7, #0]
 8017a96:	eba8 0000 	sub.w	r0, r8, r0
 8017a9a:	42a8      	cmp	r0, r5
 8017a9c:	dd59      	ble.n	8017b52 <__gethex+0x24e>
 8017a9e:	eba0 0805 	sub.w	r8, r0, r5
 8017aa2:	4641      	mov	r1, r8
 8017aa4:	4620      	mov	r0, r4
 8017aa6:	f000 febb 	bl	8018820 <__any_on>
 8017aaa:	4683      	mov	fp, r0
 8017aac:	b1b8      	cbz	r0, 8017ade <__gethex+0x1da>
 8017aae:	f108 33ff 	add.w	r3, r8, #4294967295
 8017ab2:	1159      	asrs	r1, r3, #5
 8017ab4:	f003 021f 	and.w	r2, r3, #31
 8017ab8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017abc:	f04f 0b01 	mov.w	fp, #1
 8017ac0:	fa0b f202 	lsl.w	r2, fp, r2
 8017ac4:	420a      	tst	r2, r1
 8017ac6:	d00a      	beq.n	8017ade <__gethex+0x1da>
 8017ac8:	455b      	cmp	r3, fp
 8017aca:	dd06      	ble.n	8017ada <__gethex+0x1d6>
 8017acc:	f1a8 0102 	sub.w	r1, r8, #2
 8017ad0:	4620      	mov	r0, r4
 8017ad2:	f000 fea5 	bl	8018820 <__any_on>
 8017ad6:	2800      	cmp	r0, #0
 8017ad8:	d138      	bne.n	8017b4c <__gethex+0x248>
 8017ada:	f04f 0b02 	mov.w	fp, #2
 8017ade:	4641      	mov	r1, r8
 8017ae0:	4620      	mov	r0, r4
 8017ae2:	f7ff fea7 	bl	8017834 <rshift>
 8017ae6:	4446      	add	r6, r8
 8017ae8:	68bb      	ldr	r3, [r7, #8]
 8017aea:	42b3      	cmp	r3, r6
 8017aec:	da41      	bge.n	8017b72 <__gethex+0x26e>
 8017aee:	4621      	mov	r1, r4
 8017af0:	4648      	mov	r0, r9
 8017af2:	f000 fa49 	bl	8017f88 <_Bfree>
 8017af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017af8:	2300      	movs	r3, #0
 8017afa:	6013      	str	r3, [r2, #0]
 8017afc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8017b00:	e78a      	b.n	8017a18 <__gethex+0x114>
 8017b02:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8017b06:	2a2e      	cmp	r2, #46	; 0x2e
 8017b08:	d014      	beq.n	8017b34 <__gethex+0x230>
 8017b0a:	2b20      	cmp	r3, #32
 8017b0c:	d106      	bne.n	8017b1c <__gethex+0x218>
 8017b0e:	9b01      	ldr	r3, [sp, #4]
 8017b10:	f843 bb04 	str.w	fp, [r3], #4
 8017b14:	f04f 0b00 	mov.w	fp, #0
 8017b18:	9301      	str	r3, [sp, #4]
 8017b1a:	465b      	mov	r3, fp
 8017b1c:	7828      	ldrb	r0, [r5, #0]
 8017b1e:	9303      	str	r3, [sp, #12]
 8017b20:	f7ff feda 	bl	80178d8 <__hexdig_fun>
 8017b24:	9b03      	ldr	r3, [sp, #12]
 8017b26:	f000 000f 	and.w	r0, r0, #15
 8017b2a:	4098      	lsls	r0, r3
 8017b2c:	ea4b 0b00 	orr.w	fp, fp, r0
 8017b30:	3304      	adds	r3, #4
 8017b32:	e7a1      	b.n	8017a78 <__gethex+0x174>
 8017b34:	45a8      	cmp	r8, r5
 8017b36:	d8e8      	bhi.n	8017b0a <__gethex+0x206>
 8017b38:	2201      	movs	r2, #1
 8017b3a:	4628      	mov	r0, r5
 8017b3c:	9303      	str	r3, [sp, #12]
 8017b3e:	f7fe fe64 	bl	801680a <strncmp>
 8017b42:	4926      	ldr	r1, [pc, #152]	; (8017bdc <__gethex+0x2d8>)
 8017b44:	9b03      	ldr	r3, [sp, #12]
 8017b46:	2800      	cmp	r0, #0
 8017b48:	d1df      	bne.n	8017b0a <__gethex+0x206>
 8017b4a:	e795      	b.n	8017a78 <__gethex+0x174>
 8017b4c:	f04f 0b03 	mov.w	fp, #3
 8017b50:	e7c5      	b.n	8017ade <__gethex+0x1da>
 8017b52:	da0b      	bge.n	8017b6c <__gethex+0x268>
 8017b54:	eba5 0800 	sub.w	r8, r5, r0
 8017b58:	4621      	mov	r1, r4
 8017b5a:	4642      	mov	r2, r8
 8017b5c:	4648      	mov	r0, r9
 8017b5e:	f000 fc2d 	bl	80183bc <__lshift>
 8017b62:	eba6 0608 	sub.w	r6, r6, r8
 8017b66:	4604      	mov	r4, r0
 8017b68:	f100 0a14 	add.w	sl, r0, #20
 8017b6c:	f04f 0b00 	mov.w	fp, #0
 8017b70:	e7ba      	b.n	8017ae8 <__gethex+0x1e4>
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	42b3      	cmp	r3, r6
 8017b76:	dd73      	ble.n	8017c60 <__gethex+0x35c>
 8017b78:	1b9e      	subs	r6, r3, r6
 8017b7a:	42b5      	cmp	r5, r6
 8017b7c:	dc34      	bgt.n	8017be8 <__gethex+0x2e4>
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	2b02      	cmp	r3, #2
 8017b82:	d023      	beq.n	8017bcc <__gethex+0x2c8>
 8017b84:	2b03      	cmp	r3, #3
 8017b86:	d025      	beq.n	8017bd4 <__gethex+0x2d0>
 8017b88:	2b01      	cmp	r3, #1
 8017b8a:	d115      	bne.n	8017bb8 <__gethex+0x2b4>
 8017b8c:	42b5      	cmp	r5, r6
 8017b8e:	d113      	bne.n	8017bb8 <__gethex+0x2b4>
 8017b90:	2d01      	cmp	r5, #1
 8017b92:	d10b      	bne.n	8017bac <__gethex+0x2a8>
 8017b94:	9a02      	ldr	r2, [sp, #8]
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	6013      	str	r3, [r2, #0]
 8017b9a:	2301      	movs	r3, #1
 8017b9c:	6123      	str	r3, [r4, #16]
 8017b9e:	f8ca 3000 	str.w	r3, [sl]
 8017ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ba4:	f04f 0862 	mov.w	r8, #98	; 0x62
 8017ba8:	601c      	str	r4, [r3, #0]
 8017baa:	e735      	b.n	8017a18 <__gethex+0x114>
 8017bac:	1e69      	subs	r1, r5, #1
 8017bae:	4620      	mov	r0, r4
 8017bb0:	f000 fe36 	bl	8018820 <__any_on>
 8017bb4:	2800      	cmp	r0, #0
 8017bb6:	d1ed      	bne.n	8017b94 <__gethex+0x290>
 8017bb8:	4621      	mov	r1, r4
 8017bba:	4648      	mov	r0, r9
 8017bbc:	f000 f9e4 	bl	8017f88 <_Bfree>
 8017bc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	6013      	str	r3, [r2, #0]
 8017bc6:	f04f 0850 	mov.w	r8, #80	; 0x50
 8017bca:	e725      	b.n	8017a18 <__gethex+0x114>
 8017bcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d1f2      	bne.n	8017bb8 <__gethex+0x2b4>
 8017bd2:	e7df      	b.n	8017b94 <__gethex+0x290>
 8017bd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d1dc      	bne.n	8017b94 <__gethex+0x290>
 8017bda:	e7ed      	b.n	8017bb8 <__gethex+0x2b4>
 8017bdc:	0801ccf4 	.word	0x0801ccf4
 8017be0:	0801cf9c 	.word	0x0801cf9c
 8017be4:	0801cfad 	.word	0x0801cfad
 8017be8:	f106 38ff 	add.w	r8, r6, #4294967295
 8017bec:	f1bb 0f00 	cmp.w	fp, #0
 8017bf0:	d133      	bne.n	8017c5a <__gethex+0x356>
 8017bf2:	f1b8 0f00 	cmp.w	r8, #0
 8017bf6:	d004      	beq.n	8017c02 <__gethex+0x2fe>
 8017bf8:	4641      	mov	r1, r8
 8017bfa:	4620      	mov	r0, r4
 8017bfc:	f000 fe10 	bl	8018820 <__any_on>
 8017c00:	4683      	mov	fp, r0
 8017c02:	ea4f 1268 	mov.w	r2, r8, asr #5
 8017c06:	2301      	movs	r3, #1
 8017c08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017c0c:	f008 081f 	and.w	r8, r8, #31
 8017c10:	fa03 f308 	lsl.w	r3, r3, r8
 8017c14:	4213      	tst	r3, r2
 8017c16:	4631      	mov	r1, r6
 8017c18:	4620      	mov	r0, r4
 8017c1a:	bf18      	it	ne
 8017c1c:	f04b 0b02 	orrne.w	fp, fp, #2
 8017c20:	1bad      	subs	r5, r5, r6
 8017c22:	f7ff fe07 	bl	8017834 <rshift>
 8017c26:	687e      	ldr	r6, [r7, #4]
 8017c28:	f04f 0802 	mov.w	r8, #2
 8017c2c:	f1bb 0f00 	cmp.w	fp, #0
 8017c30:	d04a      	beq.n	8017cc8 <__gethex+0x3c4>
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	2b02      	cmp	r3, #2
 8017c36:	d016      	beq.n	8017c66 <__gethex+0x362>
 8017c38:	2b03      	cmp	r3, #3
 8017c3a:	d018      	beq.n	8017c6e <__gethex+0x36a>
 8017c3c:	2b01      	cmp	r3, #1
 8017c3e:	d109      	bne.n	8017c54 <__gethex+0x350>
 8017c40:	f01b 0f02 	tst.w	fp, #2
 8017c44:	d006      	beq.n	8017c54 <__gethex+0x350>
 8017c46:	f8da 3000 	ldr.w	r3, [sl]
 8017c4a:	ea4b 0b03 	orr.w	fp, fp, r3
 8017c4e:	f01b 0f01 	tst.w	fp, #1
 8017c52:	d10f      	bne.n	8017c74 <__gethex+0x370>
 8017c54:	f048 0810 	orr.w	r8, r8, #16
 8017c58:	e036      	b.n	8017cc8 <__gethex+0x3c4>
 8017c5a:	f04f 0b01 	mov.w	fp, #1
 8017c5e:	e7d0      	b.n	8017c02 <__gethex+0x2fe>
 8017c60:	f04f 0801 	mov.w	r8, #1
 8017c64:	e7e2      	b.n	8017c2c <__gethex+0x328>
 8017c66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c68:	f1c3 0301 	rsb	r3, r3, #1
 8017c6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017c6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d0ef      	beq.n	8017c54 <__gethex+0x350>
 8017c74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017c78:	f104 0214 	add.w	r2, r4, #20
 8017c7c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8017c80:	9301      	str	r3, [sp, #4]
 8017c82:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8017c86:	2300      	movs	r3, #0
 8017c88:	4694      	mov	ip, r2
 8017c8a:	f852 1b04 	ldr.w	r1, [r2], #4
 8017c8e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8017c92:	d01e      	beq.n	8017cd2 <__gethex+0x3ce>
 8017c94:	3101      	adds	r1, #1
 8017c96:	f8cc 1000 	str.w	r1, [ip]
 8017c9a:	f1b8 0f02 	cmp.w	r8, #2
 8017c9e:	f104 0214 	add.w	r2, r4, #20
 8017ca2:	d13d      	bne.n	8017d20 <__gethex+0x41c>
 8017ca4:	683b      	ldr	r3, [r7, #0]
 8017ca6:	3b01      	subs	r3, #1
 8017ca8:	42ab      	cmp	r3, r5
 8017caa:	d10b      	bne.n	8017cc4 <__gethex+0x3c0>
 8017cac:	1169      	asrs	r1, r5, #5
 8017cae:	2301      	movs	r3, #1
 8017cb0:	f005 051f 	and.w	r5, r5, #31
 8017cb4:	fa03 f505 	lsl.w	r5, r3, r5
 8017cb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017cbc:	421d      	tst	r5, r3
 8017cbe:	bf18      	it	ne
 8017cc0:	f04f 0801 	movne.w	r8, #1
 8017cc4:	f048 0820 	orr.w	r8, r8, #32
 8017cc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017cca:	601c      	str	r4, [r3, #0]
 8017ccc:	9b02      	ldr	r3, [sp, #8]
 8017cce:	601e      	str	r6, [r3, #0]
 8017cd0:	e6a2      	b.n	8017a18 <__gethex+0x114>
 8017cd2:	4290      	cmp	r0, r2
 8017cd4:	f842 3c04 	str.w	r3, [r2, #-4]
 8017cd8:	d8d6      	bhi.n	8017c88 <__gethex+0x384>
 8017cda:	68a2      	ldr	r2, [r4, #8]
 8017cdc:	4593      	cmp	fp, r2
 8017cde:	db17      	blt.n	8017d10 <__gethex+0x40c>
 8017ce0:	6861      	ldr	r1, [r4, #4]
 8017ce2:	4648      	mov	r0, r9
 8017ce4:	3101      	adds	r1, #1
 8017ce6:	f000 f90f 	bl	8017f08 <_Balloc>
 8017cea:	4682      	mov	sl, r0
 8017cec:	b918      	cbnz	r0, 8017cf6 <__gethex+0x3f2>
 8017cee:	4b1b      	ldr	r3, [pc, #108]	; (8017d5c <__gethex+0x458>)
 8017cf0:	4602      	mov	r2, r0
 8017cf2:	2184      	movs	r1, #132	; 0x84
 8017cf4:	e6b3      	b.n	8017a5e <__gethex+0x15a>
 8017cf6:	6922      	ldr	r2, [r4, #16]
 8017cf8:	3202      	adds	r2, #2
 8017cfa:	f104 010c 	add.w	r1, r4, #12
 8017cfe:	0092      	lsls	r2, r2, #2
 8017d00:	300c      	adds	r0, #12
 8017d02:	f7fe fe96 	bl	8016a32 <memcpy>
 8017d06:	4621      	mov	r1, r4
 8017d08:	4648      	mov	r0, r9
 8017d0a:	f000 f93d 	bl	8017f88 <_Bfree>
 8017d0e:	4654      	mov	r4, sl
 8017d10:	6922      	ldr	r2, [r4, #16]
 8017d12:	1c51      	adds	r1, r2, #1
 8017d14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017d18:	6121      	str	r1, [r4, #16]
 8017d1a:	2101      	movs	r1, #1
 8017d1c:	6151      	str	r1, [r2, #20]
 8017d1e:	e7bc      	b.n	8017c9a <__gethex+0x396>
 8017d20:	6921      	ldr	r1, [r4, #16]
 8017d22:	4559      	cmp	r1, fp
 8017d24:	dd0b      	ble.n	8017d3e <__gethex+0x43a>
 8017d26:	2101      	movs	r1, #1
 8017d28:	4620      	mov	r0, r4
 8017d2a:	f7ff fd83 	bl	8017834 <rshift>
 8017d2e:	68bb      	ldr	r3, [r7, #8]
 8017d30:	3601      	adds	r6, #1
 8017d32:	42b3      	cmp	r3, r6
 8017d34:	f6ff aedb 	blt.w	8017aee <__gethex+0x1ea>
 8017d38:	f04f 0801 	mov.w	r8, #1
 8017d3c:	e7c2      	b.n	8017cc4 <__gethex+0x3c0>
 8017d3e:	f015 051f 	ands.w	r5, r5, #31
 8017d42:	d0f9      	beq.n	8017d38 <__gethex+0x434>
 8017d44:	9b01      	ldr	r3, [sp, #4]
 8017d46:	441a      	add	r2, r3
 8017d48:	f1c5 0520 	rsb	r5, r5, #32
 8017d4c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8017d50:	f000 f9cc 	bl	80180ec <__hi0bits>
 8017d54:	42a8      	cmp	r0, r5
 8017d56:	dbe6      	blt.n	8017d26 <__gethex+0x422>
 8017d58:	e7ee      	b.n	8017d38 <__gethex+0x434>
 8017d5a:	bf00      	nop
 8017d5c:	0801cf9c 	.word	0x0801cf9c

08017d60 <L_shift>:
 8017d60:	f1c2 0208 	rsb	r2, r2, #8
 8017d64:	0092      	lsls	r2, r2, #2
 8017d66:	b570      	push	{r4, r5, r6, lr}
 8017d68:	f1c2 0620 	rsb	r6, r2, #32
 8017d6c:	6843      	ldr	r3, [r0, #4]
 8017d6e:	6804      	ldr	r4, [r0, #0]
 8017d70:	fa03 f506 	lsl.w	r5, r3, r6
 8017d74:	432c      	orrs	r4, r5
 8017d76:	40d3      	lsrs	r3, r2
 8017d78:	6004      	str	r4, [r0, #0]
 8017d7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8017d7e:	4288      	cmp	r0, r1
 8017d80:	d3f4      	bcc.n	8017d6c <L_shift+0xc>
 8017d82:	bd70      	pop	{r4, r5, r6, pc}

08017d84 <__match>:
 8017d84:	b530      	push	{r4, r5, lr}
 8017d86:	6803      	ldr	r3, [r0, #0]
 8017d88:	3301      	adds	r3, #1
 8017d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d8e:	b914      	cbnz	r4, 8017d96 <__match+0x12>
 8017d90:	6003      	str	r3, [r0, #0]
 8017d92:	2001      	movs	r0, #1
 8017d94:	bd30      	pop	{r4, r5, pc}
 8017d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017d9e:	2d19      	cmp	r5, #25
 8017da0:	bf98      	it	ls
 8017da2:	3220      	addls	r2, #32
 8017da4:	42a2      	cmp	r2, r4
 8017da6:	d0f0      	beq.n	8017d8a <__match+0x6>
 8017da8:	2000      	movs	r0, #0
 8017daa:	e7f3      	b.n	8017d94 <__match+0x10>

08017dac <__hexnan>:
 8017dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017db0:	680b      	ldr	r3, [r1, #0]
 8017db2:	6801      	ldr	r1, [r0, #0]
 8017db4:	115e      	asrs	r6, r3, #5
 8017db6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017dba:	f013 031f 	ands.w	r3, r3, #31
 8017dbe:	b087      	sub	sp, #28
 8017dc0:	bf18      	it	ne
 8017dc2:	3604      	addne	r6, #4
 8017dc4:	2500      	movs	r5, #0
 8017dc6:	1f37      	subs	r7, r6, #4
 8017dc8:	4682      	mov	sl, r0
 8017dca:	4690      	mov	r8, r2
 8017dcc:	9301      	str	r3, [sp, #4]
 8017dce:	f846 5c04 	str.w	r5, [r6, #-4]
 8017dd2:	46b9      	mov	r9, r7
 8017dd4:	463c      	mov	r4, r7
 8017dd6:	9502      	str	r5, [sp, #8]
 8017dd8:	46ab      	mov	fp, r5
 8017dda:	784a      	ldrb	r2, [r1, #1]
 8017ddc:	1c4b      	adds	r3, r1, #1
 8017dde:	9303      	str	r3, [sp, #12]
 8017de0:	b342      	cbz	r2, 8017e34 <__hexnan+0x88>
 8017de2:	4610      	mov	r0, r2
 8017de4:	9105      	str	r1, [sp, #20]
 8017de6:	9204      	str	r2, [sp, #16]
 8017de8:	f7ff fd76 	bl	80178d8 <__hexdig_fun>
 8017dec:	2800      	cmp	r0, #0
 8017dee:	d14f      	bne.n	8017e90 <__hexnan+0xe4>
 8017df0:	9a04      	ldr	r2, [sp, #16]
 8017df2:	9905      	ldr	r1, [sp, #20]
 8017df4:	2a20      	cmp	r2, #32
 8017df6:	d818      	bhi.n	8017e2a <__hexnan+0x7e>
 8017df8:	9b02      	ldr	r3, [sp, #8]
 8017dfa:	459b      	cmp	fp, r3
 8017dfc:	dd13      	ble.n	8017e26 <__hexnan+0x7a>
 8017dfe:	454c      	cmp	r4, r9
 8017e00:	d206      	bcs.n	8017e10 <__hexnan+0x64>
 8017e02:	2d07      	cmp	r5, #7
 8017e04:	dc04      	bgt.n	8017e10 <__hexnan+0x64>
 8017e06:	462a      	mov	r2, r5
 8017e08:	4649      	mov	r1, r9
 8017e0a:	4620      	mov	r0, r4
 8017e0c:	f7ff ffa8 	bl	8017d60 <L_shift>
 8017e10:	4544      	cmp	r4, r8
 8017e12:	d950      	bls.n	8017eb6 <__hexnan+0x10a>
 8017e14:	2300      	movs	r3, #0
 8017e16:	f1a4 0904 	sub.w	r9, r4, #4
 8017e1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8017e1e:	f8cd b008 	str.w	fp, [sp, #8]
 8017e22:	464c      	mov	r4, r9
 8017e24:	461d      	mov	r5, r3
 8017e26:	9903      	ldr	r1, [sp, #12]
 8017e28:	e7d7      	b.n	8017dda <__hexnan+0x2e>
 8017e2a:	2a29      	cmp	r2, #41	; 0x29
 8017e2c:	d155      	bne.n	8017eda <__hexnan+0x12e>
 8017e2e:	3102      	adds	r1, #2
 8017e30:	f8ca 1000 	str.w	r1, [sl]
 8017e34:	f1bb 0f00 	cmp.w	fp, #0
 8017e38:	d04f      	beq.n	8017eda <__hexnan+0x12e>
 8017e3a:	454c      	cmp	r4, r9
 8017e3c:	d206      	bcs.n	8017e4c <__hexnan+0xa0>
 8017e3e:	2d07      	cmp	r5, #7
 8017e40:	dc04      	bgt.n	8017e4c <__hexnan+0xa0>
 8017e42:	462a      	mov	r2, r5
 8017e44:	4649      	mov	r1, r9
 8017e46:	4620      	mov	r0, r4
 8017e48:	f7ff ff8a 	bl	8017d60 <L_shift>
 8017e4c:	4544      	cmp	r4, r8
 8017e4e:	d934      	bls.n	8017eba <__hexnan+0x10e>
 8017e50:	f1a8 0204 	sub.w	r2, r8, #4
 8017e54:	4623      	mov	r3, r4
 8017e56:	f853 1b04 	ldr.w	r1, [r3], #4
 8017e5a:	f842 1f04 	str.w	r1, [r2, #4]!
 8017e5e:	429f      	cmp	r7, r3
 8017e60:	d2f9      	bcs.n	8017e56 <__hexnan+0xaa>
 8017e62:	1b3b      	subs	r3, r7, r4
 8017e64:	f023 0303 	bic.w	r3, r3, #3
 8017e68:	3304      	adds	r3, #4
 8017e6a:	3e03      	subs	r6, #3
 8017e6c:	3401      	adds	r4, #1
 8017e6e:	42a6      	cmp	r6, r4
 8017e70:	bf38      	it	cc
 8017e72:	2304      	movcc	r3, #4
 8017e74:	4443      	add	r3, r8
 8017e76:	2200      	movs	r2, #0
 8017e78:	f843 2b04 	str.w	r2, [r3], #4
 8017e7c:	429f      	cmp	r7, r3
 8017e7e:	d2fb      	bcs.n	8017e78 <__hexnan+0xcc>
 8017e80:	683b      	ldr	r3, [r7, #0]
 8017e82:	b91b      	cbnz	r3, 8017e8c <__hexnan+0xe0>
 8017e84:	4547      	cmp	r7, r8
 8017e86:	d126      	bne.n	8017ed6 <__hexnan+0x12a>
 8017e88:	2301      	movs	r3, #1
 8017e8a:	603b      	str	r3, [r7, #0]
 8017e8c:	2005      	movs	r0, #5
 8017e8e:	e025      	b.n	8017edc <__hexnan+0x130>
 8017e90:	3501      	adds	r5, #1
 8017e92:	2d08      	cmp	r5, #8
 8017e94:	f10b 0b01 	add.w	fp, fp, #1
 8017e98:	dd06      	ble.n	8017ea8 <__hexnan+0xfc>
 8017e9a:	4544      	cmp	r4, r8
 8017e9c:	d9c3      	bls.n	8017e26 <__hexnan+0x7a>
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	f844 3c04 	str.w	r3, [r4, #-4]
 8017ea4:	2501      	movs	r5, #1
 8017ea6:	3c04      	subs	r4, #4
 8017ea8:	6822      	ldr	r2, [r4, #0]
 8017eaa:	f000 000f 	and.w	r0, r0, #15
 8017eae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017eb2:	6020      	str	r0, [r4, #0]
 8017eb4:	e7b7      	b.n	8017e26 <__hexnan+0x7a>
 8017eb6:	2508      	movs	r5, #8
 8017eb8:	e7b5      	b.n	8017e26 <__hexnan+0x7a>
 8017eba:	9b01      	ldr	r3, [sp, #4]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d0df      	beq.n	8017e80 <__hexnan+0xd4>
 8017ec0:	f1c3 0320 	rsb	r3, r3, #32
 8017ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8017ec8:	40da      	lsrs	r2, r3
 8017eca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017ece:	4013      	ands	r3, r2
 8017ed0:	f846 3c04 	str.w	r3, [r6, #-4]
 8017ed4:	e7d4      	b.n	8017e80 <__hexnan+0xd4>
 8017ed6:	3f04      	subs	r7, #4
 8017ed8:	e7d2      	b.n	8017e80 <__hexnan+0xd4>
 8017eda:	2004      	movs	r0, #4
 8017edc:	b007      	add	sp, #28
 8017ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017ee2 <__ascii_mbtowc>:
 8017ee2:	b082      	sub	sp, #8
 8017ee4:	b901      	cbnz	r1, 8017ee8 <__ascii_mbtowc+0x6>
 8017ee6:	a901      	add	r1, sp, #4
 8017ee8:	b142      	cbz	r2, 8017efc <__ascii_mbtowc+0x1a>
 8017eea:	b14b      	cbz	r3, 8017f00 <__ascii_mbtowc+0x1e>
 8017eec:	7813      	ldrb	r3, [r2, #0]
 8017eee:	600b      	str	r3, [r1, #0]
 8017ef0:	7812      	ldrb	r2, [r2, #0]
 8017ef2:	1e10      	subs	r0, r2, #0
 8017ef4:	bf18      	it	ne
 8017ef6:	2001      	movne	r0, #1
 8017ef8:	b002      	add	sp, #8
 8017efa:	4770      	bx	lr
 8017efc:	4610      	mov	r0, r2
 8017efe:	e7fb      	b.n	8017ef8 <__ascii_mbtowc+0x16>
 8017f00:	f06f 0001 	mvn.w	r0, #1
 8017f04:	e7f8      	b.n	8017ef8 <__ascii_mbtowc+0x16>
	...

08017f08 <_Balloc>:
 8017f08:	b570      	push	{r4, r5, r6, lr}
 8017f0a:	69c6      	ldr	r6, [r0, #28]
 8017f0c:	4604      	mov	r4, r0
 8017f0e:	460d      	mov	r5, r1
 8017f10:	b976      	cbnz	r6, 8017f30 <_Balloc+0x28>
 8017f12:	2010      	movs	r0, #16
 8017f14:	f7fc fce0 	bl	80148d8 <malloc>
 8017f18:	4602      	mov	r2, r0
 8017f1a:	61e0      	str	r0, [r4, #28]
 8017f1c:	b920      	cbnz	r0, 8017f28 <_Balloc+0x20>
 8017f1e:	4b18      	ldr	r3, [pc, #96]	; (8017f80 <_Balloc+0x78>)
 8017f20:	4818      	ldr	r0, [pc, #96]	; (8017f84 <_Balloc+0x7c>)
 8017f22:	216b      	movs	r1, #107	; 0x6b
 8017f24:	f7fe fda2 	bl	8016a6c <__assert_func>
 8017f28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017f2c:	6006      	str	r6, [r0, #0]
 8017f2e:	60c6      	str	r6, [r0, #12]
 8017f30:	69e6      	ldr	r6, [r4, #28]
 8017f32:	68f3      	ldr	r3, [r6, #12]
 8017f34:	b183      	cbz	r3, 8017f58 <_Balloc+0x50>
 8017f36:	69e3      	ldr	r3, [r4, #28]
 8017f38:	68db      	ldr	r3, [r3, #12]
 8017f3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017f3e:	b9b8      	cbnz	r0, 8017f70 <_Balloc+0x68>
 8017f40:	2101      	movs	r1, #1
 8017f42:	fa01 f605 	lsl.w	r6, r1, r5
 8017f46:	1d72      	adds	r2, r6, #5
 8017f48:	0092      	lsls	r2, r2, #2
 8017f4a:	4620      	mov	r0, r4
 8017f4c:	f000 fecf 	bl	8018cee <_calloc_r>
 8017f50:	b160      	cbz	r0, 8017f6c <_Balloc+0x64>
 8017f52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017f56:	e00e      	b.n	8017f76 <_Balloc+0x6e>
 8017f58:	2221      	movs	r2, #33	; 0x21
 8017f5a:	2104      	movs	r1, #4
 8017f5c:	4620      	mov	r0, r4
 8017f5e:	f000 fec6 	bl	8018cee <_calloc_r>
 8017f62:	69e3      	ldr	r3, [r4, #28]
 8017f64:	60f0      	str	r0, [r6, #12]
 8017f66:	68db      	ldr	r3, [r3, #12]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d1e4      	bne.n	8017f36 <_Balloc+0x2e>
 8017f6c:	2000      	movs	r0, #0
 8017f6e:	bd70      	pop	{r4, r5, r6, pc}
 8017f70:	6802      	ldr	r2, [r0, #0]
 8017f72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017f76:	2300      	movs	r3, #0
 8017f78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017f7c:	e7f7      	b.n	8017f6e <_Balloc+0x66>
 8017f7e:	bf00      	nop
 8017f80:	0801ce82 	.word	0x0801ce82
 8017f84:	0801d00d 	.word	0x0801d00d

08017f88 <_Bfree>:
 8017f88:	b570      	push	{r4, r5, r6, lr}
 8017f8a:	69c6      	ldr	r6, [r0, #28]
 8017f8c:	4605      	mov	r5, r0
 8017f8e:	460c      	mov	r4, r1
 8017f90:	b976      	cbnz	r6, 8017fb0 <_Bfree+0x28>
 8017f92:	2010      	movs	r0, #16
 8017f94:	f7fc fca0 	bl	80148d8 <malloc>
 8017f98:	4602      	mov	r2, r0
 8017f9a:	61e8      	str	r0, [r5, #28]
 8017f9c:	b920      	cbnz	r0, 8017fa8 <_Bfree+0x20>
 8017f9e:	4b09      	ldr	r3, [pc, #36]	; (8017fc4 <_Bfree+0x3c>)
 8017fa0:	4809      	ldr	r0, [pc, #36]	; (8017fc8 <_Bfree+0x40>)
 8017fa2:	218f      	movs	r1, #143	; 0x8f
 8017fa4:	f7fe fd62 	bl	8016a6c <__assert_func>
 8017fa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017fac:	6006      	str	r6, [r0, #0]
 8017fae:	60c6      	str	r6, [r0, #12]
 8017fb0:	b13c      	cbz	r4, 8017fc2 <_Bfree+0x3a>
 8017fb2:	69eb      	ldr	r3, [r5, #28]
 8017fb4:	6862      	ldr	r2, [r4, #4]
 8017fb6:	68db      	ldr	r3, [r3, #12]
 8017fb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017fbc:	6021      	str	r1, [r4, #0]
 8017fbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017fc2:	bd70      	pop	{r4, r5, r6, pc}
 8017fc4:	0801ce82 	.word	0x0801ce82
 8017fc8:	0801d00d 	.word	0x0801d00d

08017fcc <__multadd>:
 8017fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fd0:	690d      	ldr	r5, [r1, #16]
 8017fd2:	4607      	mov	r7, r0
 8017fd4:	460c      	mov	r4, r1
 8017fd6:	461e      	mov	r6, r3
 8017fd8:	f101 0c14 	add.w	ip, r1, #20
 8017fdc:	2000      	movs	r0, #0
 8017fde:	f8dc 3000 	ldr.w	r3, [ip]
 8017fe2:	b299      	uxth	r1, r3
 8017fe4:	fb02 6101 	mla	r1, r2, r1, r6
 8017fe8:	0c1e      	lsrs	r6, r3, #16
 8017fea:	0c0b      	lsrs	r3, r1, #16
 8017fec:	fb02 3306 	mla	r3, r2, r6, r3
 8017ff0:	b289      	uxth	r1, r1
 8017ff2:	3001      	adds	r0, #1
 8017ff4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017ff8:	4285      	cmp	r5, r0
 8017ffa:	f84c 1b04 	str.w	r1, [ip], #4
 8017ffe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018002:	dcec      	bgt.n	8017fde <__multadd+0x12>
 8018004:	b30e      	cbz	r6, 801804a <__multadd+0x7e>
 8018006:	68a3      	ldr	r3, [r4, #8]
 8018008:	42ab      	cmp	r3, r5
 801800a:	dc19      	bgt.n	8018040 <__multadd+0x74>
 801800c:	6861      	ldr	r1, [r4, #4]
 801800e:	4638      	mov	r0, r7
 8018010:	3101      	adds	r1, #1
 8018012:	f7ff ff79 	bl	8017f08 <_Balloc>
 8018016:	4680      	mov	r8, r0
 8018018:	b928      	cbnz	r0, 8018026 <__multadd+0x5a>
 801801a:	4602      	mov	r2, r0
 801801c:	4b0c      	ldr	r3, [pc, #48]	; (8018050 <__multadd+0x84>)
 801801e:	480d      	ldr	r0, [pc, #52]	; (8018054 <__multadd+0x88>)
 8018020:	21ba      	movs	r1, #186	; 0xba
 8018022:	f7fe fd23 	bl	8016a6c <__assert_func>
 8018026:	6922      	ldr	r2, [r4, #16]
 8018028:	3202      	adds	r2, #2
 801802a:	f104 010c 	add.w	r1, r4, #12
 801802e:	0092      	lsls	r2, r2, #2
 8018030:	300c      	adds	r0, #12
 8018032:	f7fe fcfe 	bl	8016a32 <memcpy>
 8018036:	4621      	mov	r1, r4
 8018038:	4638      	mov	r0, r7
 801803a:	f7ff ffa5 	bl	8017f88 <_Bfree>
 801803e:	4644      	mov	r4, r8
 8018040:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018044:	3501      	adds	r5, #1
 8018046:	615e      	str	r6, [r3, #20]
 8018048:	6125      	str	r5, [r4, #16]
 801804a:	4620      	mov	r0, r4
 801804c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018050:	0801cf9c 	.word	0x0801cf9c
 8018054:	0801d00d 	.word	0x0801d00d

08018058 <__s2b>:
 8018058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801805c:	460c      	mov	r4, r1
 801805e:	4615      	mov	r5, r2
 8018060:	461f      	mov	r7, r3
 8018062:	2209      	movs	r2, #9
 8018064:	3308      	adds	r3, #8
 8018066:	4606      	mov	r6, r0
 8018068:	fb93 f3f2 	sdiv	r3, r3, r2
 801806c:	2100      	movs	r1, #0
 801806e:	2201      	movs	r2, #1
 8018070:	429a      	cmp	r2, r3
 8018072:	db09      	blt.n	8018088 <__s2b+0x30>
 8018074:	4630      	mov	r0, r6
 8018076:	f7ff ff47 	bl	8017f08 <_Balloc>
 801807a:	b940      	cbnz	r0, 801808e <__s2b+0x36>
 801807c:	4602      	mov	r2, r0
 801807e:	4b19      	ldr	r3, [pc, #100]	; (80180e4 <__s2b+0x8c>)
 8018080:	4819      	ldr	r0, [pc, #100]	; (80180e8 <__s2b+0x90>)
 8018082:	21d3      	movs	r1, #211	; 0xd3
 8018084:	f7fe fcf2 	bl	8016a6c <__assert_func>
 8018088:	0052      	lsls	r2, r2, #1
 801808a:	3101      	adds	r1, #1
 801808c:	e7f0      	b.n	8018070 <__s2b+0x18>
 801808e:	9b08      	ldr	r3, [sp, #32]
 8018090:	6143      	str	r3, [r0, #20]
 8018092:	2d09      	cmp	r5, #9
 8018094:	f04f 0301 	mov.w	r3, #1
 8018098:	6103      	str	r3, [r0, #16]
 801809a:	dd16      	ble.n	80180ca <__s2b+0x72>
 801809c:	f104 0909 	add.w	r9, r4, #9
 80180a0:	46c8      	mov	r8, r9
 80180a2:	442c      	add	r4, r5
 80180a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80180a8:	4601      	mov	r1, r0
 80180aa:	3b30      	subs	r3, #48	; 0x30
 80180ac:	220a      	movs	r2, #10
 80180ae:	4630      	mov	r0, r6
 80180b0:	f7ff ff8c 	bl	8017fcc <__multadd>
 80180b4:	45a0      	cmp	r8, r4
 80180b6:	d1f5      	bne.n	80180a4 <__s2b+0x4c>
 80180b8:	f1a5 0408 	sub.w	r4, r5, #8
 80180bc:	444c      	add	r4, r9
 80180be:	1b2d      	subs	r5, r5, r4
 80180c0:	1963      	adds	r3, r4, r5
 80180c2:	42bb      	cmp	r3, r7
 80180c4:	db04      	blt.n	80180d0 <__s2b+0x78>
 80180c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180ca:	340a      	adds	r4, #10
 80180cc:	2509      	movs	r5, #9
 80180ce:	e7f6      	b.n	80180be <__s2b+0x66>
 80180d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80180d4:	4601      	mov	r1, r0
 80180d6:	3b30      	subs	r3, #48	; 0x30
 80180d8:	220a      	movs	r2, #10
 80180da:	4630      	mov	r0, r6
 80180dc:	f7ff ff76 	bl	8017fcc <__multadd>
 80180e0:	e7ee      	b.n	80180c0 <__s2b+0x68>
 80180e2:	bf00      	nop
 80180e4:	0801cf9c 	.word	0x0801cf9c
 80180e8:	0801d00d 	.word	0x0801d00d

080180ec <__hi0bits>:
 80180ec:	0c03      	lsrs	r3, r0, #16
 80180ee:	041b      	lsls	r3, r3, #16
 80180f0:	b9d3      	cbnz	r3, 8018128 <__hi0bits+0x3c>
 80180f2:	0400      	lsls	r0, r0, #16
 80180f4:	2310      	movs	r3, #16
 80180f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80180fa:	bf04      	itt	eq
 80180fc:	0200      	lsleq	r0, r0, #8
 80180fe:	3308      	addeq	r3, #8
 8018100:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018104:	bf04      	itt	eq
 8018106:	0100      	lsleq	r0, r0, #4
 8018108:	3304      	addeq	r3, #4
 801810a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801810e:	bf04      	itt	eq
 8018110:	0080      	lsleq	r0, r0, #2
 8018112:	3302      	addeq	r3, #2
 8018114:	2800      	cmp	r0, #0
 8018116:	db05      	blt.n	8018124 <__hi0bits+0x38>
 8018118:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801811c:	f103 0301 	add.w	r3, r3, #1
 8018120:	bf08      	it	eq
 8018122:	2320      	moveq	r3, #32
 8018124:	4618      	mov	r0, r3
 8018126:	4770      	bx	lr
 8018128:	2300      	movs	r3, #0
 801812a:	e7e4      	b.n	80180f6 <__hi0bits+0xa>

0801812c <__lo0bits>:
 801812c:	6803      	ldr	r3, [r0, #0]
 801812e:	f013 0207 	ands.w	r2, r3, #7
 8018132:	d00c      	beq.n	801814e <__lo0bits+0x22>
 8018134:	07d9      	lsls	r1, r3, #31
 8018136:	d422      	bmi.n	801817e <__lo0bits+0x52>
 8018138:	079a      	lsls	r2, r3, #30
 801813a:	bf49      	itett	mi
 801813c:	085b      	lsrmi	r3, r3, #1
 801813e:	089b      	lsrpl	r3, r3, #2
 8018140:	6003      	strmi	r3, [r0, #0]
 8018142:	2201      	movmi	r2, #1
 8018144:	bf5c      	itt	pl
 8018146:	6003      	strpl	r3, [r0, #0]
 8018148:	2202      	movpl	r2, #2
 801814a:	4610      	mov	r0, r2
 801814c:	4770      	bx	lr
 801814e:	b299      	uxth	r1, r3
 8018150:	b909      	cbnz	r1, 8018156 <__lo0bits+0x2a>
 8018152:	0c1b      	lsrs	r3, r3, #16
 8018154:	2210      	movs	r2, #16
 8018156:	b2d9      	uxtb	r1, r3
 8018158:	b909      	cbnz	r1, 801815e <__lo0bits+0x32>
 801815a:	3208      	adds	r2, #8
 801815c:	0a1b      	lsrs	r3, r3, #8
 801815e:	0719      	lsls	r1, r3, #28
 8018160:	bf04      	itt	eq
 8018162:	091b      	lsreq	r3, r3, #4
 8018164:	3204      	addeq	r2, #4
 8018166:	0799      	lsls	r1, r3, #30
 8018168:	bf04      	itt	eq
 801816a:	089b      	lsreq	r3, r3, #2
 801816c:	3202      	addeq	r2, #2
 801816e:	07d9      	lsls	r1, r3, #31
 8018170:	d403      	bmi.n	801817a <__lo0bits+0x4e>
 8018172:	085b      	lsrs	r3, r3, #1
 8018174:	f102 0201 	add.w	r2, r2, #1
 8018178:	d003      	beq.n	8018182 <__lo0bits+0x56>
 801817a:	6003      	str	r3, [r0, #0]
 801817c:	e7e5      	b.n	801814a <__lo0bits+0x1e>
 801817e:	2200      	movs	r2, #0
 8018180:	e7e3      	b.n	801814a <__lo0bits+0x1e>
 8018182:	2220      	movs	r2, #32
 8018184:	e7e1      	b.n	801814a <__lo0bits+0x1e>
	...

08018188 <__i2b>:
 8018188:	b510      	push	{r4, lr}
 801818a:	460c      	mov	r4, r1
 801818c:	2101      	movs	r1, #1
 801818e:	f7ff febb 	bl	8017f08 <_Balloc>
 8018192:	4602      	mov	r2, r0
 8018194:	b928      	cbnz	r0, 80181a2 <__i2b+0x1a>
 8018196:	4b05      	ldr	r3, [pc, #20]	; (80181ac <__i2b+0x24>)
 8018198:	4805      	ldr	r0, [pc, #20]	; (80181b0 <__i2b+0x28>)
 801819a:	f240 1145 	movw	r1, #325	; 0x145
 801819e:	f7fe fc65 	bl	8016a6c <__assert_func>
 80181a2:	2301      	movs	r3, #1
 80181a4:	6144      	str	r4, [r0, #20]
 80181a6:	6103      	str	r3, [r0, #16]
 80181a8:	bd10      	pop	{r4, pc}
 80181aa:	bf00      	nop
 80181ac:	0801cf9c 	.word	0x0801cf9c
 80181b0:	0801d00d 	.word	0x0801d00d

080181b4 <__multiply>:
 80181b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181b8:	4691      	mov	r9, r2
 80181ba:	690a      	ldr	r2, [r1, #16]
 80181bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80181c0:	429a      	cmp	r2, r3
 80181c2:	bfb8      	it	lt
 80181c4:	460b      	movlt	r3, r1
 80181c6:	460c      	mov	r4, r1
 80181c8:	bfbc      	itt	lt
 80181ca:	464c      	movlt	r4, r9
 80181cc:	4699      	movlt	r9, r3
 80181ce:	6927      	ldr	r7, [r4, #16]
 80181d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80181d4:	68a3      	ldr	r3, [r4, #8]
 80181d6:	6861      	ldr	r1, [r4, #4]
 80181d8:	eb07 060a 	add.w	r6, r7, sl
 80181dc:	42b3      	cmp	r3, r6
 80181de:	b085      	sub	sp, #20
 80181e0:	bfb8      	it	lt
 80181e2:	3101      	addlt	r1, #1
 80181e4:	f7ff fe90 	bl	8017f08 <_Balloc>
 80181e8:	b930      	cbnz	r0, 80181f8 <__multiply+0x44>
 80181ea:	4602      	mov	r2, r0
 80181ec:	4b44      	ldr	r3, [pc, #272]	; (8018300 <__multiply+0x14c>)
 80181ee:	4845      	ldr	r0, [pc, #276]	; (8018304 <__multiply+0x150>)
 80181f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80181f4:	f7fe fc3a 	bl	8016a6c <__assert_func>
 80181f8:	f100 0514 	add.w	r5, r0, #20
 80181fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018200:	462b      	mov	r3, r5
 8018202:	2200      	movs	r2, #0
 8018204:	4543      	cmp	r3, r8
 8018206:	d321      	bcc.n	801824c <__multiply+0x98>
 8018208:	f104 0314 	add.w	r3, r4, #20
 801820c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018210:	f109 0314 	add.w	r3, r9, #20
 8018214:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018218:	9202      	str	r2, [sp, #8]
 801821a:	1b3a      	subs	r2, r7, r4
 801821c:	3a15      	subs	r2, #21
 801821e:	f022 0203 	bic.w	r2, r2, #3
 8018222:	3204      	adds	r2, #4
 8018224:	f104 0115 	add.w	r1, r4, #21
 8018228:	428f      	cmp	r7, r1
 801822a:	bf38      	it	cc
 801822c:	2204      	movcc	r2, #4
 801822e:	9201      	str	r2, [sp, #4]
 8018230:	9a02      	ldr	r2, [sp, #8]
 8018232:	9303      	str	r3, [sp, #12]
 8018234:	429a      	cmp	r2, r3
 8018236:	d80c      	bhi.n	8018252 <__multiply+0x9e>
 8018238:	2e00      	cmp	r6, #0
 801823a:	dd03      	ble.n	8018244 <__multiply+0x90>
 801823c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018240:	2b00      	cmp	r3, #0
 8018242:	d05b      	beq.n	80182fc <__multiply+0x148>
 8018244:	6106      	str	r6, [r0, #16]
 8018246:	b005      	add	sp, #20
 8018248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801824c:	f843 2b04 	str.w	r2, [r3], #4
 8018250:	e7d8      	b.n	8018204 <__multiply+0x50>
 8018252:	f8b3 a000 	ldrh.w	sl, [r3]
 8018256:	f1ba 0f00 	cmp.w	sl, #0
 801825a:	d024      	beq.n	80182a6 <__multiply+0xf2>
 801825c:	f104 0e14 	add.w	lr, r4, #20
 8018260:	46a9      	mov	r9, r5
 8018262:	f04f 0c00 	mov.w	ip, #0
 8018266:	f85e 2b04 	ldr.w	r2, [lr], #4
 801826a:	f8d9 1000 	ldr.w	r1, [r9]
 801826e:	fa1f fb82 	uxth.w	fp, r2
 8018272:	b289      	uxth	r1, r1
 8018274:	fb0a 110b 	mla	r1, sl, fp, r1
 8018278:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801827c:	f8d9 2000 	ldr.w	r2, [r9]
 8018280:	4461      	add	r1, ip
 8018282:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018286:	fb0a c20b 	mla	r2, sl, fp, ip
 801828a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801828e:	b289      	uxth	r1, r1
 8018290:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018294:	4577      	cmp	r7, lr
 8018296:	f849 1b04 	str.w	r1, [r9], #4
 801829a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801829e:	d8e2      	bhi.n	8018266 <__multiply+0xb2>
 80182a0:	9a01      	ldr	r2, [sp, #4]
 80182a2:	f845 c002 	str.w	ip, [r5, r2]
 80182a6:	9a03      	ldr	r2, [sp, #12]
 80182a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80182ac:	3304      	adds	r3, #4
 80182ae:	f1b9 0f00 	cmp.w	r9, #0
 80182b2:	d021      	beq.n	80182f8 <__multiply+0x144>
 80182b4:	6829      	ldr	r1, [r5, #0]
 80182b6:	f104 0c14 	add.w	ip, r4, #20
 80182ba:	46ae      	mov	lr, r5
 80182bc:	f04f 0a00 	mov.w	sl, #0
 80182c0:	f8bc b000 	ldrh.w	fp, [ip]
 80182c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80182c8:	fb09 220b 	mla	r2, r9, fp, r2
 80182cc:	4452      	add	r2, sl
 80182ce:	b289      	uxth	r1, r1
 80182d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80182d4:	f84e 1b04 	str.w	r1, [lr], #4
 80182d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80182dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80182e0:	f8be 1000 	ldrh.w	r1, [lr]
 80182e4:	fb09 110a 	mla	r1, r9, sl, r1
 80182e8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80182ec:	4567      	cmp	r7, ip
 80182ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80182f2:	d8e5      	bhi.n	80182c0 <__multiply+0x10c>
 80182f4:	9a01      	ldr	r2, [sp, #4]
 80182f6:	50a9      	str	r1, [r5, r2]
 80182f8:	3504      	adds	r5, #4
 80182fa:	e799      	b.n	8018230 <__multiply+0x7c>
 80182fc:	3e01      	subs	r6, #1
 80182fe:	e79b      	b.n	8018238 <__multiply+0x84>
 8018300:	0801cf9c 	.word	0x0801cf9c
 8018304:	0801d00d 	.word	0x0801d00d

08018308 <__pow5mult>:
 8018308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801830c:	4615      	mov	r5, r2
 801830e:	f012 0203 	ands.w	r2, r2, #3
 8018312:	4606      	mov	r6, r0
 8018314:	460f      	mov	r7, r1
 8018316:	d007      	beq.n	8018328 <__pow5mult+0x20>
 8018318:	4c25      	ldr	r4, [pc, #148]	; (80183b0 <__pow5mult+0xa8>)
 801831a:	3a01      	subs	r2, #1
 801831c:	2300      	movs	r3, #0
 801831e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018322:	f7ff fe53 	bl	8017fcc <__multadd>
 8018326:	4607      	mov	r7, r0
 8018328:	10ad      	asrs	r5, r5, #2
 801832a:	d03d      	beq.n	80183a8 <__pow5mult+0xa0>
 801832c:	69f4      	ldr	r4, [r6, #28]
 801832e:	b97c      	cbnz	r4, 8018350 <__pow5mult+0x48>
 8018330:	2010      	movs	r0, #16
 8018332:	f7fc fad1 	bl	80148d8 <malloc>
 8018336:	4602      	mov	r2, r0
 8018338:	61f0      	str	r0, [r6, #28]
 801833a:	b928      	cbnz	r0, 8018348 <__pow5mult+0x40>
 801833c:	4b1d      	ldr	r3, [pc, #116]	; (80183b4 <__pow5mult+0xac>)
 801833e:	481e      	ldr	r0, [pc, #120]	; (80183b8 <__pow5mult+0xb0>)
 8018340:	f240 11b3 	movw	r1, #435	; 0x1b3
 8018344:	f7fe fb92 	bl	8016a6c <__assert_func>
 8018348:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801834c:	6004      	str	r4, [r0, #0]
 801834e:	60c4      	str	r4, [r0, #12]
 8018350:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8018354:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018358:	b94c      	cbnz	r4, 801836e <__pow5mult+0x66>
 801835a:	f240 2171 	movw	r1, #625	; 0x271
 801835e:	4630      	mov	r0, r6
 8018360:	f7ff ff12 	bl	8018188 <__i2b>
 8018364:	2300      	movs	r3, #0
 8018366:	f8c8 0008 	str.w	r0, [r8, #8]
 801836a:	4604      	mov	r4, r0
 801836c:	6003      	str	r3, [r0, #0]
 801836e:	f04f 0900 	mov.w	r9, #0
 8018372:	07eb      	lsls	r3, r5, #31
 8018374:	d50a      	bpl.n	801838c <__pow5mult+0x84>
 8018376:	4639      	mov	r1, r7
 8018378:	4622      	mov	r2, r4
 801837a:	4630      	mov	r0, r6
 801837c:	f7ff ff1a 	bl	80181b4 <__multiply>
 8018380:	4639      	mov	r1, r7
 8018382:	4680      	mov	r8, r0
 8018384:	4630      	mov	r0, r6
 8018386:	f7ff fdff 	bl	8017f88 <_Bfree>
 801838a:	4647      	mov	r7, r8
 801838c:	106d      	asrs	r5, r5, #1
 801838e:	d00b      	beq.n	80183a8 <__pow5mult+0xa0>
 8018390:	6820      	ldr	r0, [r4, #0]
 8018392:	b938      	cbnz	r0, 80183a4 <__pow5mult+0x9c>
 8018394:	4622      	mov	r2, r4
 8018396:	4621      	mov	r1, r4
 8018398:	4630      	mov	r0, r6
 801839a:	f7ff ff0b 	bl	80181b4 <__multiply>
 801839e:	6020      	str	r0, [r4, #0]
 80183a0:	f8c0 9000 	str.w	r9, [r0]
 80183a4:	4604      	mov	r4, r0
 80183a6:	e7e4      	b.n	8018372 <__pow5mult+0x6a>
 80183a8:	4638      	mov	r0, r7
 80183aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183ae:	bf00      	nop
 80183b0:	0801d158 	.word	0x0801d158
 80183b4:	0801ce82 	.word	0x0801ce82
 80183b8:	0801d00d 	.word	0x0801d00d

080183bc <__lshift>:
 80183bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183c0:	460c      	mov	r4, r1
 80183c2:	6849      	ldr	r1, [r1, #4]
 80183c4:	6923      	ldr	r3, [r4, #16]
 80183c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80183ca:	68a3      	ldr	r3, [r4, #8]
 80183cc:	4607      	mov	r7, r0
 80183ce:	4691      	mov	r9, r2
 80183d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80183d4:	f108 0601 	add.w	r6, r8, #1
 80183d8:	42b3      	cmp	r3, r6
 80183da:	db0b      	blt.n	80183f4 <__lshift+0x38>
 80183dc:	4638      	mov	r0, r7
 80183de:	f7ff fd93 	bl	8017f08 <_Balloc>
 80183e2:	4605      	mov	r5, r0
 80183e4:	b948      	cbnz	r0, 80183fa <__lshift+0x3e>
 80183e6:	4602      	mov	r2, r0
 80183e8:	4b28      	ldr	r3, [pc, #160]	; (801848c <__lshift+0xd0>)
 80183ea:	4829      	ldr	r0, [pc, #164]	; (8018490 <__lshift+0xd4>)
 80183ec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80183f0:	f7fe fb3c 	bl	8016a6c <__assert_func>
 80183f4:	3101      	adds	r1, #1
 80183f6:	005b      	lsls	r3, r3, #1
 80183f8:	e7ee      	b.n	80183d8 <__lshift+0x1c>
 80183fa:	2300      	movs	r3, #0
 80183fc:	f100 0114 	add.w	r1, r0, #20
 8018400:	f100 0210 	add.w	r2, r0, #16
 8018404:	4618      	mov	r0, r3
 8018406:	4553      	cmp	r3, sl
 8018408:	db33      	blt.n	8018472 <__lshift+0xb6>
 801840a:	6920      	ldr	r0, [r4, #16]
 801840c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018410:	f104 0314 	add.w	r3, r4, #20
 8018414:	f019 091f 	ands.w	r9, r9, #31
 8018418:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801841c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018420:	d02b      	beq.n	801847a <__lshift+0xbe>
 8018422:	f1c9 0e20 	rsb	lr, r9, #32
 8018426:	468a      	mov	sl, r1
 8018428:	2200      	movs	r2, #0
 801842a:	6818      	ldr	r0, [r3, #0]
 801842c:	fa00 f009 	lsl.w	r0, r0, r9
 8018430:	4310      	orrs	r0, r2
 8018432:	f84a 0b04 	str.w	r0, [sl], #4
 8018436:	f853 2b04 	ldr.w	r2, [r3], #4
 801843a:	459c      	cmp	ip, r3
 801843c:	fa22 f20e 	lsr.w	r2, r2, lr
 8018440:	d8f3      	bhi.n	801842a <__lshift+0x6e>
 8018442:	ebac 0304 	sub.w	r3, ip, r4
 8018446:	3b15      	subs	r3, #21
 8018448:	f023 0303 	bic.w	r3, r3, #3
 801844c:	3304      	adds	r3, #4
 801844e:	f104 0015 	add.w	r0, r4, #21
 8018452:	4584      	cmp	ip, r0
 8018454:	bf38      	it	cc
 8018456:	2304      	movcc	r3, #4
 8018458:	50ca      	str	r2, [r1, r3]
 801845a:	b10a      	cbz	r2, 8018460 <__lshift+0xa4>
 801845c:	f108 0602 	add.w	r6, r8, #2
 8018460:	3e01      	subs	r6, #1
 8018462:	4638      	mov	r0, r7
 8018464:	612e      	str	r6, [r5, #16]
 8018466:	4621      	mov	r1, r4
 8018468:	f7ff fd8e 	bl	8017f88 <_Bfree>
 801846c:	4628      	mov	r0, r5
 801846e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018472:	f842 0f04 	str.w	r0, [r2, #4]!
 8018476:	3301      	adds	r3, #1
 8018478:	e7c5      	b.n	8018406 <__lshift+0x4a>
 801847a:	3904      	subs	r1, #4
 801847c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018480:	f841 2f04 	str.w	r2, [r1, #4]!
 8018484:	459c      	cmp	ip, r3
 8018486:	d8f9      	bhi.n	801847c <__lshift+0xc0>
 8018488:	e7ea      	b.n	8018460 <__lshift+0xa4>
 801848a:	bf00      	nop
 801848c:	0801cf9c 	.word	0x0801cf9c
 8018490:	0801d00d 	.word	0x0801d00d

08018494 <__mcmp>:
 8018494:	b530      	push	{r4, r5, lr}
 8018496:	6902      	ldr	r2, [r0, #16]
 8018498:	690c      	ldr	r4, [r1, #16]
 801849a:	1b12      	subs	r2, r2, r4
 801849c:	d10e      	bne.n	80184bc <__mcmp+0x28>
 801849e:	f100 0314 	add.w	r3, r0, #20
 80184a2:	3114      	adds	r1, #20
 80184a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80184a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80184ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80184b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80184b4:	42a5      	cmp	r5, r4
 80184b6:	d003      	beq.n	80184c0 <__mcmp+0x2c>
 80184b8:	d305      	bcc.n	80184c6 <__mcmp+0x32>
 80184ba:	2201      	movs	r2, #1
 80184bc:	4610      	mov	r0, r2
 80184be:	bd30      	pop	{r4, r5, pc}
 80184c0:	4283      	cmp	r3, r0
 80184c2:	d3f3      	bcc.n	80184ac <__mcmp+0x18>
 80184c4:	e7fa      	b.n	80184bc <__mcmp+0x28>
 80184c6:	f04f 32ff 	mov.w	r2, #4294967295
 80184ca:	e7f7      	b.n	80184bc <__mcmp+0x28>

080184cc <__mdiff>:
 80184cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184d0:	460c      	mov	r4, r1
 80184d2:	4606      	mov	r6, r0
 80184d4:	4611      	mov	r1, r2
 80184d6:	4620      	mov	r0, r4
 80184d8:	4690      	mov	r8, r2
 80184da:	f7ff ffdb 	bl	8018494 <__mcmp>
 80184de:	1e05      	subs	r5, r0, #0
 80184e0:	d110      	bne.n	8018504 <__mdiff+0x38>
 80184e2:	4629      	mov	r1, r5
 80184e4:	4630      	mov	r0, r6
 80184e6:	f7ff fd0f 	bl	8017f08 <_Balloc>
 80184ea:	b930      	cbnz	r0, 80184fa <__mdiff+0x2e>
 80184ec:	4b3a      	ldr	r3, [pc, #232]	; (80185d8 <__mdiff+0x10c>)
 80184ee:	4602      	mov	r2, r0
 80184f0:	f240 2137 	movw	r1, #567	; 0x237
 80184f4:	4839      	ldr	r0, [pc, #228]	; (80185dc <__mdiff+0x110>)
 80184f6:	f7fe fab9 	bl	8016a6c <__assert_func>
 80184fa:	2301      	movs	r3, #1
 80184fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018500:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018504:	bfa4      	itt	ge
 8018506:	4643      	movge	r3, r8
 8018508:	46a0      	movge	r8, r4
 801850a:	4630      	mov	r0, r6
 801850c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018510:	bfa6      	itte	ge
 8018512:	461c      	movge	r4, r3
 8018514:	2500      	movge	r5, #0
 8018516:	2501      	movlt	r5, #1
 8018518:	f7ff fcf6 	bl	8017f08 <_Balloc>
 801851c:	b920      	cbnz	r0, 8018528 <__mdiff+0x5c>
 801851e:	4b2e      	ldr	r3, [pc, #184]	; (80185d8 <__mdiff+0x10c>)
 8018520:	4602      	mov	r2, r0
 8018522:	f240 2145 	movw	r1, #581	; 0x245
 8018526:	e7e5      	b.n	80184f4 <__mdiff+0x28>
 8018528:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801852c:	6926      	ldr	r6, [r4, #16]
 801852e:	60c5      	str	r5, [r0, #12]
 8018530:	f104 0914 	add.w	r9, r4, #20
 8018534:	f108 0514 	add.w	r5, r8, #20
 8018538:	f100 0e14 	add.w	lr, r0, #20
 801853c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018540:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018544:	f108 0210 	add.w	r2, r8, #16
 8018548:	46f2      	mov	sl, lr
 801854a:	2100      	movs	r1, #0
 801854c:	f859 3b04 	ldr.w	r3, [r9], #4
 8018550:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018554:	fa11 f88b 	uxtah	r8, r1, fp
 8018558:	b299      	uxth	r1, r3
 801855a:	0c1b      	lsrs	r3, r3, #16
 801855c:	eba8 0801 	sub.w	r8, r8, r1
 8018560:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018564:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018568:	fa1f f888 	uxth.w	r8, r8
 801856c:	1419      	asrs	r1, r3, #16
 801856e:	454e      	cmp	r6, r9
 8018570:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018574:	f84a 3b04 	str.w	r3, [sl], #4
 8018578:	d8e8      	bhi.n	801854c <__mdiff+0x80>
 801857a:	1b33      	subs	r3, r6, r4
 801857c:	3b15      	subs	r3, #21
 801857e:	f023 0303 	bic.w	r3, r3, #3
 8018582:	3304      	adds	r3, #4
 8018584:	3415      	adds	r4, #21
 8018586:	42a6      	cmp	r6, r4
 8018588:	bf38      	it	cc
 801858a:	2304      	movcc	r3, #4
 801858c:	441d      	add	r5, r3
 801858e:	4473      	add	r3, lr
 8018590:	469e      	mov	lr, r3
 8018592:	462e      	mov	r6, r5
 8018594:	4566      	cmp	r6, ip
 8018596:	d30e      	bcc.n	80185b6 <__mdiff+0xea>
 8018598:	f10c 0203 	add.w	r2, ip, #3
 801859c:	1b52      	subs	r2, r2, r5
 801859e:	f022 0203 	bic.w	r2, r2, #3
 80185a2:	3d03      	subs	r5, #3
 80185a4:	45ac      	cmp	ip, r5
 80185a6:	bf38      	it	cc
 80185a8:	2200      	movcc	r2, #0
 80185aa:	4413      	add	r3, r2
 80185ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80185b0:	b17a      	cbz	r2, 80185d2 <__mdiff+0x106>
 80185b2:	6107      	str	r7, [r0, #16]
 80185b4:	e7a4      	b.n	8018500 <__mdiff+0x34>
 80185b6:	f856 8b04 	ldr.w	r8, [r6], #4
 80185ba:	fa11 f288 	uxtah	r2, r1, r8
 80185be:	1414      	asrs	r4, r2, #16
 80185c0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80185c4:	b292      	uxth	r2, r2
 80185c6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80185ca:	f84e 2b04 	str.w	r2, [lr], #4
 80185ce:	1421      	asrs	r1, r4, #16
 80185d0:	e7e0      	b.n	8018594 <__mdiff+0xc8>
 80185d2:	3f01      	subs	r7, #1
 80185d4:	e7ea      	b.n	80185ac <__mdiff+0xe0>
 80185d6:	bf00      	nop
 80185d8:	0801cf9c 	.word	0x0801cf9c
 80185dc:	0801d00d 	.word	0x0801d00d

080185e0 <__ulp>:
 80185e0:	b082      	sub	sp, #8
 80185e2:	ed8d 0b00 	vstr	d0, [sp]
 80185e6:	9a01      	ldr	r2, [sp, #4]
 80185e8:	4b0f      	ldr	r3, [pc, #60]	; (8018628 <__ulp+0x48>)
 80185ea:	4013      	ands	r3, r2
 80185ec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	dc08      	bgt.n	8018606 <__ulp+0x26>
 80185f4:	425b      	negs	r3, r3
 80185f6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80185fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80185fe:	da04      	bge.n	801860a <__ulp+0x2a>
 8018600:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8018604:	4113      	asrs	r3, r2
 8018606:	2200      	movs	r2, #0
 8018608:	e008      	b.n	801861c <__ulp+0x3c>
 801860a:	f1a2 0314 	sub.w	r3, r2, #20
 801860e:	2b1e      	cmp	r3, #30
 8018610:	bfda      	itte	le
 8018612:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8018616:	40da      	lsrle	r2, r3
 8018618:	2201      	movgt	r2, #1
 801861a:	2300      	movs	r3, #0
 801861c:	4619      	mov	r1, r3
 801861e:	4610      	mov	r0, r2
 8018620:	ec41 0b10 	vmov	d0, r0, r1
 8018624:	b002      	add	sp, #8
 8018626:	4770      	bx	lr
 8018628:	7ff00000 	.word	0x7ff00000

0801862c <__b2d>:
 801862c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018630:	6906      	ldr	r6, [r0, #16]
 8018632:	f100 0814 	add.w	r8, r0, #20
 8018636:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801863a:	1f37      	subs	r7, r6, #4
 801863c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018640:	4610      	mov	r0, r2
 8018642:	f7ff fd53 	bl	80180ec <__hi0bits>
 8018646:	f1c0 0320 	rsb	r3, r0, #32
 801864a:	280a      	cmp	r0, #10
 801864c:	600b      	str	r3, [r1, #0]
 801864e:	491b      	ldr	r1, [pc, #108]	; (80186bc <__b2d+0x90>)
 8018650:	dc15      	bgt.n	801867e <__b2d+0x52>
 8018652:	f1c0 0c0b 	rsb	ip, r0, #11
 8018656:	fa22 f30c 	lsr.w	r3, r2, ip
 801865a:	45b8      	cmp	r8, r7
 801865c:	ea43 0501 	orr.w	r5, r3, r1
 8018660:	bf34      	ite	cc
 8018662:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018666:	2300      	movcs	r3, #0
 8018668:	3015      	adds	r0, #21
 801866a:	fa02 f000 	lsl.w	r0, r2, r0
 801866e:	fa23 f30c 	lsr.w	r3, r3, ip
 8018672:	4303      	orrs	r3, r0
 8018674:	461c      	mov	r4, r3
 8018676:	ec45 4b10 	vmov	d0, r4, r5
 801867a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801867e:	45b8      	cmp	r8, r7
 8018680:	bf3a      	itte	cc
 8018682:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018686:	f1a6 0708 	subcc.w	r7, r6, #8
 801868a:	2300      	movcs	r3, #0
 801868c:	380b      	subs	r0, #11
 801868e:	d012      	beq.n	80186b6 <__b2d+0x8a>
 8018690:	f1c0 0120 	rsb	r1, r0, #32
 8018694:	fa23 f401 	lsr.w	r4, r3, r1
 8018698:	4082      	lsls	r2, r0
 801869a:	4322      	orrs	r2, r4
 801869c:	4547      	cmp	r7, r8
 801869e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80186a2:	bf8c      	ite	hi
 80186a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80186a8:	2200      	movls	r2, #0
 80186aa:	4083      	lsls	r3, r0
 80186ac:	40ca      	lsrs	r2, r1
 80186ae:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80186b2:	4313      	orrs	r3, r2
 80186b4:	e7de      	b.n	8018674 <__b2d+0x48>
 80186b6:	ea42 0501 	orr.w	r5, r2, r1
 80186ba:	e7db      	b.n	8018674 <__b2d+0x48>
 80186bc:	3ff00000 	.word	0x3ff00000

080186c0 <__d2b>:
 80186c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80186c4:	460f      	mov	r7, r1
 80186c6:	2101      	movs	r1, #1
 80186c8:	ec59 8b10 	vmov	r8, r9, d0
 80186cc:	4616      	mov	r6, r2
 80186ce:	f7ff fc1b 	bl	8017f08 <_Balloc>
 80186d2:	4604      	mov	r4, r0
 80186d4:	b930      	cbnz	r0, 80186e4 <__d2b+0x24>
 80186d6:	4602      	mov	r2, r0
 80186d8:	4b24      	ldr	r3, [pc, #144]	; (801876c <__d2b+0xac>)
 80186da:	4825      	ldr	r0, [pc, #148]	; (8018770 <__d2b+0xb0>)
 80186dc:	f240 310f 	movw	r1, #783	; 0x30f
 80186e0:	f7fe f9c4 	bl	8016a6c <__assert_func>
 80186e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80186e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80186ec:	bb2d      	cbnz	r5, 801873a <__d2b+0x7a>
 80186ee:	9301      	str	r3, [sp, #4]
 80186f0:	f1b8 0300 	subs.w	r3, r8, #0
 80186f4:	d026      	beq.n	8018744 <__d2b+0x84>
 80186f6:	4668      	mov	r0, sp
 80186f8:	9300      	str	r3, [sp, #0]
 80186fa:	f7ff fd17 	bl	801812c <__lo0bits>
 80186fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018702:	b1e8      	cbz	r0, 8018740 <__d2b+0x80>
 8018704:	f1c0 0320 	rsb	r3, r0, #32
 8018708:	fa02 f303 	lsl.w	r3, r2, r3
 801870c:	430b      	orrs	r3, r1
 801870e:	40c2      	lsrs	r2, r0
 8018710:	6163      	str	r3, [r4, #20]
 8018712:	9201      	str	r2, [sp, #4]
 8018714:	9b01      	ldr	r3, [sp, #4]
 8018716:	61a3      	str	r3, [r4, #24]
 8018718:	2b00      	cmp	r3, #0
 801871a:	bf14      	ite	ne
 801871c:	2202      	movne	r2, #2
 801871e:	2201      	moveq	r2, #1
 8018720:	6122      	str	r2, [r4, #16]
 8018722:	b1bd      	cbz	r5, 8018754 <__d2b+0x94>
 8018724:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018728:	4405      	add	r5, r0
 801872a:	603d      	str	r5, [r7, #0]
 801872c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018730:	6030      	str	r0, [r6, #0]
 8018732:	4620      	mov	r0, r4
 8018734:	b003      	add	sp, #12
 8018736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801873a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801873e:	e7d6      	b.n	80186ee <__d2b+0x2e>
 8018740:	6161      	str	r1, [r4, #20]
 8018742:	e7e7      	b.n	8018714 <__d2b+0x54>
 8018744:	a801      	add	r0, sp, #4
 8018746:	f7ff fcf1 	bl	801812c <__lo0bits>
 801874a:	9b01      	ldr	r3, [sp, #4]
 801874c:	6163      	str	r3, [r4, #20]
 801874e:	3020      	adds	r0, #32
 8018750:	2201      	movs	r2, #1
 8018752:	e7e5      	b.n	8018720 <__d2b+0x60>
 8018754:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018758:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801875c:	6038      	str	r0, [r7, #0]
 801875e:	6918      	ldr	r0, [r3, #16]
 8018760:	f7ff fcc4 	bl	80180ec <__hi0bits>
 8018764:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018768:	e7e2      	b.n	8018730 <__d2b+0x70>
 801876a:	bf00      	nop
 801876c:	0801cf9c 	.word	0x0801cf9c
 8018770:	0801d00d 	.word	0x0801d00d

08018774 <__ratio>:
 8018774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018778:	4688      	mov	r8, r1
 801877a:	4669      	mov	r1, sp
 801877c:	4681      	mov	r9, r0
 801877e:	f7ff ff55 	bl	801862c <__b2d>
 8018782:	a901      	add	r1, sp, #4
 8018784:	4640      	mov	r0, r8
 8018786:	ec55 4b10 	vmov	r4, r5, d0
 801878a:	f7ff ff4f 	bl	801862c <__b2d>
 801878e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018792:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018796:	eba3 0c02 	sub.w	ip, r3, r2
 801879a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801879e:	1a9b      	subs	r3, r3, r2
 80187a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80187a4:	ec51 0b10 	vmov	r0, r1, d0
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	bfd6      	itet	le
 80187ac:	460a      	movle	r2, r1
 80187ae:	462a      	movgt	r2, r5
 80187b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80187b4:	468b      	mov	fp, r1
 80187b6:	462f      	mov	r7, r5
 80187b8:	bfd4      	ite	le
 80187ba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80187be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80187c2:	4620      	mov	r0, r4
 80187c4:	ee10 2a10 	vmov	r2, s0
 80187c8:	465b      	mov	r3, fp
 80187ca:	4639      	mov	r1, r7
 80187cc:	f7e8 f83e 	bl	800084c <__aeabi_ddiv>
 80187d0:	ec41 0b10 	vmov	d0, r0, r1
 80187d4:	b003      	add	sp, #12
 80187d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080187da <__copybits>:
 80187da:	3901      	subs	r1, #1
 80187dc:	b570      	push	{r4, r5, r6, lr}
 80187de:	1149      	asrs	r1, r1, #5
 80187e0:	6914      	ldr	r4, [r2, #16]
 80187e2:	3101      	adds	r1, #1
 80187e4:	f102 0314 	add.w	r3, r2, #20
 80187e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80187ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80187f0:	1f05      	subs	r5, r0, #4
 80187f2:	42a3      	cmp	r3, r4
 80187f4:	d30c      	bcc.n	8018810 <__copybits+0x36>
 80187f6:	1aa3      	subs	r3, r4, r2
 80187f8:	3b11      	subs	r3, #17
 80187fa:	f023 0303 	bic.w	r3, r3, #3
 80187fe:	3211      	adds	r2, #17
 8018800:	42a2      	cmp	r2, r4
 8018802:	bf88      	it	hi
 8018804:	2300      	movhi	r3, #0
 8018806:	4418      	add	r0, r3
 8018808:	2300      	movs	r3, #0
 801880a:	4288      	cmp	r0, r1
 801880c:	d305      	bcc.n	801881a <__copybits+0x40>
 801880e:	bd70      	pop	{r4, r5, r6, pc}
 8018810:	f853 6b04 	ldr.w	r6, [r3], #4
 8018814:	f845 6f04 	str.w	r6, [r5, #4]!
 8018818:	e7eb      	b.n	80187f2 <__copybits+0x18>
 801881a:	f840 3b04 	str.w	r3, [r0], #4
 801881e:	e7f4      	b.n	801880a <__copybits+0x30>

08018820 <__any_on>:
 8018820:	f100 0214 	add.w	r2, r0, #20
 8018824:	6900      	ldr	r0, [r0, #16]
 8018826:	114b      	asrs	r3, r1, #5
 8018828:	4298      	cmp	r0, r3
 801882a:	b510      	push	{r4, lr}
 801882c:	db11      	blt.n	8018852 <__any_on+0x32>
 801882e:	dd0a      	ble.n	8018846 <__any_on+0x26>
 8018830:	f011 011f 	ands.w	r1, r1, #31
 8018834:	d007      	beq.n	8018846 <__any_on+0x26>
 8018836:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801883a:	fa24 f001 	lsr.w	r0, r4, r1
 801883e:	fa00 f101 	lsl.w	r1, r0, r1
 8018842:	428c      	cmp	r4, r1
 8018844:	d10b      	bne.n	801885e <__any_on+0x3e>
 8018846:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801884a:	4293      	cmp	r3, r2
 801884c:	d803      	bhi.n	8018856 <__any_on+0x36>
 801884e:	2000      	movs	r0, #0
 8018850:	bd10      	pop	{r4, pc}
 8018852:	4603      	mov	r3, r0
 8018854:	e7f7      	b.n	8018846 <__any_on+0x26>
 8018856:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801885a:	2900      	cmp	r1, #0
 801885c:	d0f5      	beq.n	801884a <__any_on+0x2a>
 801885e:	2001      	movs	r0, #1
 8018860:	e7f6      	b.n	8018850 <__any_on+0x30>

08018862 <__ascii_wctomb>:
 8018862:	b149      	cbz	r1, 8018878 <__ascii_wctomb+0x16>
 8018864:	2aff      	cmp	r2, #255	; 0xff
 8018866:	bf85      	ittet	hi
 8018868:	238a      	movhi	r3, #138	; 0x8a
 801886a:	6003      	strhi	r3, [r0, #0]
 801886c:	700a      	strbls	r2, [r1, #0]
 801886e:	f04f 30ff 	movhi.w	r0, #4294967295
 8018872:	bf98      	it	ls
 8018874:	2001      	movls	r0, #1
 8018876:	4770      	bx	lr
 8018878:	4608      	mov	r0, r1
 801887a:	4770      	bx	lr

0801887c <__ssputs_r>:
 801887c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018880:	688e      	ldr	r6, [r1, #8]
 8018882:	461f      	mov	r7, r3
 8018884:	42be      	cmp	r6, r7
 8018886:	680b      	ldr	r3, [r1, #0]
 8018888:	4682      	mov	sl, r0
 801888a:	460c      	mov	r4, r1
 801888c:	4690      	mov	r8, r2
 801888e:	d82c      	bhi.n	80188ea <__ssputs_r+0x6e>
 8018890:	898a      	ldrh	r2, [r1, #12]
 8018892:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018896:	d026      	beq.n	80188e6 <__ssputs_r+0x6a>
 8018898:	6965      	ldr	r5, [r4, #20]
 801889a:	6909      	ldr	r1, [r1, #16]
 801889c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80188a0:	eba3 0901 	sub.w	r9, r3, r1
 80188a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80188a8:	1c7b      	adds	r3, r7, #1
 80188aa:	444b      	add	r3, r9
 80188ac:	106d      	asrs	r5, r5, #1
 80188ae:	429d      	cmp	r5, r3
 80188b0:	bf38      	it	cc
 80188b2:	461d      	movcc	r5, r3
 80188b4:	0553      	lsls	r3, r2, #21
 80188b6:	d527      	bpl.n	8018908 <__ssputs_r+0x8c>
 80188b8:	4629      	mov	r1, r5
 80188ba:	f7fc f83d 	bl	8014938 <_malloc_r>
 80188be:	4606      	mov	r6, r0
 80188c0:	b360      	cbz	r0, 801891c <__ssputs_r+0xa0>
 80188c2:	6921      	ldr	r1, [r4, #16]
 80188c4:	464a      	mov	r2, r9
 80188c6:	f7fe f8b4 	bl	8016a32 <memcpy>
 80188ca:	89a3      	ldrh	r3, [r4, #12]
 80188cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80188d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80188d4:	81a3      	strh	r3, [r4, #12]
 80188d6:	6126      	str	r6, [r4, #16]
 80188d8:	6165      	str	r5, [r4, #20]
 80188da:	444e      	add	r6, r9
 80188dc:	eba5 0509 	sub.w	r5, r5, r9
 80188e0:	6026      	str	r6, [r4, #0]
 80188e2:	60a5      	str	r5, [r4, #8]
 80188e4:	463e      	mov	r6, r7
 80188e6:	42be      	cmp	r6, r7
 80188e8:	d900      	bls.n	80188ec <__ssputs_r+0x70>
 80188ea:	463e      	mov	r6, r7
 80188ec:	6820      	ldr	r0, [r4, #0]
 80188ee:	4632      	mov	r2, r6
 80188f0:	4641      	mov	r1, r8
 80188f2:	f000 f9db 	bl	8018cac <memmove>
 80188f6:	68a3      	ldr	r3, [r4, #8]
 80188f8:	1b9b      	subs	r3, r3, r6
 80188fa:	60a3      	str	r3, [r4, #8]
 80188fc:	6823      	ldr	r3, [r4, #0]
 80188fe:	4433      	add	r3, r6
 8018900:	6023      	str	r3, [r4, #0]
 8018902:	2000      	movs	r0, #0
 8018904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018908:	462a      	mov	r2, r5
 801890a:	f000 fa06 	bl	8018d1a <_realloc_r>
 801890e:	4606      	mov	r6, r0
 8018910:	2800      	cmp	r0, #0
 8018912:	d1e0      	bne.n	80188d6 <__ssputs_r+0x5a>
 8018914:	6921      	ldr	r1, [r4, #16]
 8018916:	4650      	mov	r0, sl
 8018918:	f7fe ff40 	bl	801779c <_free_r>
 801891c:	230c      	movs	r3, #12
 801891e:	f8ca 3000 	str.w	r3, [sl]
 8018922:	89a3      	ldrh	r3, [r4, #12]
 8018924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018928:	81a3      	strh	r3, [r4, #12]
 801892a:	f04f 30ff 	mov.w	r0, #4294967295
 801892e:	e7e9      	b.n	8018904 <__ssputs_r+0x88>

08018930 <_svfiprintf_r>:
 8018930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018934:	4698      	mov	r8, r3
 8018936:	898b      	ldrh	r3, [r1, #12]
 8018938:	061b      	lsls	r3, r3, #24
 801893a:	b09d      	sub	sp, #116	; 0x74
 801893c:	4607      	mov	r7, r0
 801893e:	460d      	mov	r5, r1
 8018940:	4614      	mov	r4, r2
 8018942:	d50e      	bpl.n	8018962 <_svfiprintf_r+0x32>
 8018944:	690b      	ldr	r3, [r1, #16]
 8018946:	b963      	cbnz	r3, 8018962 <_svfiprintf_r+0x32>
 8018948:	2140      	movs	r1, #64	; 0x40
 801894a:	f7fb fff5 	bl	8014938 <_malloc_r>
 801894e:	6028      	str	r0, [r5, #0]
 8018950:	6128      	str	r0, [r5, #16]
 8018952:	b920      	cbnz	r0, 801895e <_svfiprintf_r+0x2e>
 8018954:	230c      	movs	r3, #12
 8018956:	603b      	str	r3, [r7, #0]
 8018958:	f04f 30ff 	mov.w	r0, #4294967295
 801895c:	e0d0      	b.n	8018b00 <_svfiprintf_r+0x1d0>
 801895e:	2340      	movs	r3, #64	; 0x40
 8018960:	616b      	str	r3, [r5, #20]
 8018962:	2300      	movs	r3, #0
 8018964:	9309      	str	r3, [sp, #36]	; 0x24
 8018966:	2320      	movs	r3, #32
 8018968:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801896c:	f8cd 800c 	str.w	r8, [sp, #12]
 8018970:	2330      	movs	r3, #48	; 0x30
 8018972:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8018b18 <_svfiprintf_r+0x1e8>
 8018976:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801897a:	f04f 0901 	mov.w	r9, #1
 801897e:	4623      	mov	r3, r4
 8018980:	469a      	mov	sl, r3
 8018982:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018986:	b10a      	cbz	r2, 801898c <_svfiprintf_r+0x5c>
 8018988:	2a25      	cmp	r2, #37	; 0x25
 801898a:	d1f9      	bne.n	8018980 <_svfiprintf_r+0x50>
 801898c:	ebba 0b04 	subs.w	fp, sl, r4
 8018990:	d00b      	beq.n	80189aa <_svfiprintf_r+0x7a>
 8018992:	465b      	mov	r3, fp
 8018994:	4622      	mov	r2, r4
 8018996:	4629      	mov	r1, r5
 8018998:	4638      	mov	r0, r7
 801899a:	f7ff ff6f 	bl	801887c <__ssputs_r>
 801899e:	3001      	adds	r0, #1
 80189a0:	f000 80a9 	beq.w	8018af6 <_svfiprintf_r+0x1c6>
 80189a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80189a6:	445a      	add	r2, fp
 80189a8:	9209      	str	r2, [sp, #36]	; 0x24
 80189aa:	f89a 3000 	ldrb.w	r3, [sl]
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	f000 80a1 	beq.w	8018af6 <_svfiprintf_r+0x1c6>
 80189b4:	2300      	movs	r3, #0
 80189b6:	f04f 32ff 	mov.w	r2, #4294967295
 80189ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80189be:	f10a 0a01 	add.w	sl, sl, #1
 80189c2:	9304      	str	r3, [sp, #16]
 80189c4:	9307      	str	r3, [sp, #28]
 80189c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80189ca:	931a      	str	r3, [sp, #104]	; 0x68
 80189cc:	4654      	mov	r4, sl
 80189ce:	2205      	movs	r2, #5
 80189d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189d4:	4850      	ldr	r0, [pc, #320]	; (8018b18 <_svfiprintf_r+0x1e8>)
 80189d6:	f7e7 fbfb 	bl	80001d0 <memchr>
 80189da:	9a04      	ldr	r2, [sp, #16]
 80189dc:	b9d8      	cbnz	r0, 8018a16 <_svfiprintf_r+0xe6>
 80189de:	06d0      	lsls	r0, r2, #27
 80189e0:	bf44      	itt	mi
 80189e2:	2320      	movmi	r3, #32
 80189e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80189e8:	0711      	lsls	r1, r2, #28
 80189ea:	bf44      	itt	mi
 80189ec:	232b      	movmi	r3, #43	; 0x2b
 80189ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80189f2:	f89a 3000 	ldrb.w	r3, [sl]
 80189f6:	2b2a      	cmp	r3, #42	; 0x2a
 80189f8:	d015      	beq.n	8018a26 <_svfiprintf_r+0xf6>
 80189fa:	9a07      	ldr	r2, [sp, #28]
 80189fc:	4654      	mov	r4, sl
 80189fe:	2000      	movs	r0, #0
 8018a00:	f04f 0c0a 	mov.w	ip, #10
 8018a04:	4621      	mov	r1, r4
 8018a06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018a0a:	3b30      	subs	r3, #48	; 0x30
 8018a0c:	2b09      	cmp	r3, #9
 8018a0e:	d94d      	bls.n	8018aac <_svfiprintf_r+0x17c>
 8018a10:	b1b0      	cbz	r0, 8018a40 <_svfiprintf_r+0x110>
 8018a12:	9207      	str	r2, [sp, #28]
 8018a14:	e014      	b.n	8018a40 <_svfiprintf_r+0x110>
 8018a16:	eba0 0308 	sub.w	r3, r0, r8
 8018a1a:	fa09 f303 	lsl.w	r3, r9, r3
 8018a1e:	4313      	orrs	r3, r2
 8018a20:	9304      	str	r3, [sp, #16]
 8018a22:	46a2      	mov	sl, r4
 8018a24:	e7d2      	b.n	80189cc <_svfiprintf_r+0x9c>
 8018a26:	9b03      	ldr	r3, [sp, #12]
 8018a28:	1d19      	adds	r1, r3, #4
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	9103      	str	r1, [sp, #12]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	bfbb      	ittet	lt
 8018a32:	425b      	neglt	r3, r3
 8018a34:	f042 0202 	orrlt.w	r2, r2, #2
 8018a38:	9307      	strge	r3, [sp, #28]
 8018a3a:	9307      	strlt	r3, [sp, #28]
 8018a3c:	bfb8      	it	lt
 8018a3e:	9204      	strlt	r2, [sp, #16]
 8018a40:	7823      	ldrb	r3, [r4, #0]
 8018a42:	2b2e      	cmp	r3, #46	; 0x2e
 8018a44:	d10c      	bne.n	8018a60 <_svfiprintf_r+0x130>
 8018a46:	7863      	ldrb	r3, [r4, #1]
 8018a48:	2b2a      	cmp	r3, #42	; 0x2a
 8018a4a:	d134      	bne.n	8018ab6 <_svfiprintf_r+0x186>
 8018a4c:	9b03      	ldr	r3, [sp, #12]
 8018a4e:	1d1a      	adds	r2, r3, #4
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	9203      	str	r2, [sp, #12]
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	bfb8      	it	lt
 8018a58:	f04f 33ff 	movlt.w	r3, #4294967295
 8018a5c:	3402      	adds	r4, #2
 8018a5e:	9305      	str	r3, [sp, #20]
 8018a60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018b28 <_svfiprintf_r+0x1f8>
 8018a64:	7821      	ldrb	r1, [r4, #0]
 8018a66:	2203      	movs	r2, #3
 8018a68:	4650      	mov	r0, sl
 8018a6a:	f7e7 fbb1 	bl	80001d0 <memchr>
 8018a6e:	b138      	cbz	r0, 8018a80 <_svfiprintf_r+0x150>
 8018a70:	9b04      	ldr	r3, [sp, #16]
 8018a72:	eba0 000a 	sub.w	r0, r0, sl
 8018a76:	2240      	movs	r2, #64	; 0x40
 8018a78:	4082      	lsls	r2, r0
 8018a7a:	4313      	orrs	r3, r2
 8018a7c:	3401      	adds	r4, #1
 8018a7e:	9304      	str	r3, [sp, #16]
 8018a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a84:	4825      	ldr	r0, [pc, #148]	; (8018b1c <_svfiprintf_r+0x1ec>)
 8018a86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018a8a:	2206      	movs	r2, #6
 8018a8c:	f7e7 fba0 	bl	80001d0 <memchr>
 8018a90:	2800      	cmp	r0, #0
 8018a92:	d038      	beq.n	8018b06 <_svfiprintf_r+0x1d6>
 8018a94:	4b22      	ldr	r3, [pc, #136]	; (8018b20 <_svfiprintf_r+0x1f0>)
 8018a96:	bb1b      	cbnz	r3, 8018ae0 <_svfiprintf_r+0x1b0>
 8018a98:	9b03      	ldr	r3, [sp, #12]
 8018a9a:	3307      	adds	r3, #7
 8018a9c:	f023 0307 	bic.w	r3, r3, #7
 8018aa0:	3308      	adds	r3, #8
 8018aa2:	9303      	str	r3, [sp, #12]
 8018aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018aa6:	4433      	add	r3, r6
 8018aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8018aaa:	e768      	b.n	801897e <_svfiprintf_r+0x4e>
 8018aac:	fb0c 3202 	mla	r2, ip, r2, r3
 8018ab0:	460c      	mov	r4, r1
 8018ab2:	2001      	movs	r0, #1
 8018ab4:	e7a6      	b.n	8018a04 <_svfiprintf_r+0xd4>
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	3401      	adds	r4, #1
 8018aba:	9305      	str	r3, [sp, #20]
 8018abc:	4619      	mov	r1, r3
 8018abe:	f04f 0c0a 	mov.w	ip, #10
 8018ac2:	4620      	mov	r0, r4
 8018ac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ac8:	3a30      	subs	r2, #48	; 0x30
 8018aca:	2a09      	cmp	r2, #9
 8018acc:	d903      	bls.n	8018ad6 <_svfiprintf_r+0x1a6>
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d0c6      	beq.n	8018a60 <_svfiprintf_r+0x130>
 8018ad2:	9105      	str	r1, [sp, #20]
 8018ad4:	e7c4      	b.n	8018a60 <_svfiprintf_r+0x130>
 8018ad6:	fb0c 2101 	mla	r1, ip, r1, r2
 8018ada:	4604      	mov	r4, r0
 8018adc:	2301      	movs	r3, #1
 8018ade:	e7f0      	b.n	8018ac2 <_svfiprintf_r+0x192>
 8018ae0:	ab03      	add	r3, sp, #12
 8018ae2:	9300      	str	r3, [sp, #0]
 8018ae4:	462a      	mov	r2, r5
 8018ae6:	4b0f      	ldr	r3, [pc, #60]	; (8018b24 <_svfiprintf_r+0x1f4>)
 8018ae8:	a904      	add	r1, sp, #16
 8018aea:	4638      	mov	r0, r7
 8018aec:	f7fc ff56 	bl	801599c <_printf_float>
 8018af0:	1c42      	adds	r2, r0, #1
 8018af2:	4606      	mov	r6, r0
 8018af4:	d1d6      	bne.n	8018aa4 <_svfiprintf_r+0x174>
 8018af6:	89ab      	ldrh	r3, [r5, #12]
 8018af8:	065b      	lsls	r3, r3, #25
 8018afa:	f53f af2d 	bmi.w	8018958 <_svfiprintf_r+0x28>
 8018afe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018b00:	b01d      	add	sp, #116	; 0x74
 8018b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b06:	ab03      	add	r3, sp, #12
 8018b08:	9300      	str	r3, [sp, #0]
 8018b0a:	462a      	mov	r2, r5
 8018b0c:	4b05      	ldr	r3, [pc, #20]	; (8018b24 <_svfiprintf_r+0x1f4>)
 8018b0e:	a904      	add	r1, sp, #16
 8018b10:	4638      	mov	r0, r7
 8018b12:	f7fd f9e7 	bl	8015ee4 <_printf_i>
 8018b16:	e7eb      	b.n	8018af0 <_svfiprintf_r+0x1c0>
 8018b18:	0801d164 	.word	0x0801d164
 8018b1c:	0801d16e 	.word	0x0801d16e
 8018b20:	0801599d 	.word	0x0801599d
 8018b24:	0801887d 	.word	0x0801887d
 8018b28:	0801d16a 	.word	0x0801d16a

08018b2c <__sflush_r>:
 8018b2c:	898a      	ldrh	r2, [r1, #12]
 8018b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b32:	4605      	mov	r5, r0
 8018b34:	0710      	lsls	r0, r2, #28
 8018b36:	460c      	mov	r4, r1
 8018b38:	d458      	bmi.n	8018bec <__sflush_r+0xc0>
 8018b3a:	684b      	ldr	r3, [r1, #4]
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	dc05      	bgt.n	8018b4c <__sflush_r+0x20>
 8018b40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	dc02      	bgt.n	8018b4c <__sflush_r+0x20>
 8018b46:	2000      	movs	r0, #0
 8018b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b4e:	2e00      	cmp	r6, #0
 8018b50:	d0f9      	beq.n	8018b46 <__sflush_r+0x1a>
 8018b52:	2300      	movs	r3, #0
 8018b54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018b58:	682f      	ldr	r7, [r5, #0]
 8018b5a:	6a21      	ldr	r1, [r4, #32]
 8018b5c:	602b      	str	r3, [r5, #0]
 8018b5e:	d032      	beq.n	8018bc6 <__sflush_r+0x9a>
 8018b60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018b62:	89a3      	ldrh	r3, [r4, #12]
 8018b64:	075a      	lsls	r2, r3, #29
 8018b66:	d505      	bpl.n	8018b74 <__sflush_r+0x48>
 8018b68:	6863      	ldr	r3, [r4, #4]
 8018b6a:	1ac0      	subs	r0, r0, r3
 8018b6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018b6e:	b10b      	cbz	r3, 8018b74 <__sflush_r+0x48>
 8018b70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018b72:	1ac0      	subs	r0, r0, r3
 8018b74:	2300      	movs	r3, #0
 8018b76:	4602      	mov	r2, r0
 8018b78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b7a:	6a21      	ldr	r1, [r4, #32]
 8018b7c:	4628      	mov	r0, r5
 8018b7e:	47b0      	blx	r6
 8018b80:	1c43      	adds	r3, r0, #1
 8018b82:	89a3      	ldrh	r3, [r4, #12]
 8018b84:	d106      	bne.n	8018b94 <__sflush_r+0x68>
 8018b86:	6829      	ldr	r1, [r5, #0]
 8018b88:	291d      	cmp	r1, #29
 8018b8a:	d82b      	bhi.n	8018be4 <__sflush_r+0xb8>
 8018b8c:	4a29      	ldr	r2, [pc, #164]	; (8018c34 <__sflush_r+0x108>)
 8018b8e:	410a      	asrs	r2, r1
 8018b90:	07d6      	lsls	r6, r2, #31
 8018b92:	d427      	bmi.n	8018be4 <__sflush_r+0xb8>
 8018b94:	2200      	movs	r2, #0
 8018b96:	6062      	str	r2, [r4, #4]
 8018b98:	04d9      	lsls	r1, r3, #19
 8018b9a:	6922      	ldr	r2, [r4, #16]
 8018b9c:	6022      	str	r2, [r4, #0]
 8018b9e:	d504      	bpl.n	8018baa <__sflush_r+0x7e>
 8018ba0:	1c42      	adds	r2, r0, #1
 8018ba2:	d101      	bne.n	8018ba8 <__sflush_r+0x7c>
 8018ba4:	682b      	ldr	r3, [r5, #0]
 8018ba6:	b903      	cbnz	r3, 8018baa <__sflush_r+0x7e>
 8018ba8:	6560      	str	r0, [r4, #84]	; 0x54
 8018baa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018bac:	602f      	str	r7, [r5, #0]
 8018bae:	2900      	cmp	r1, #0
 8018bb0:	d0c9      	beq.n	8018b46 <__sflush_r+0x1a>
 8018bb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018bb6:	4299      	cmp	r1, r3
 8018bb8:	d002      	beq.n	8018bc0 <__sflush_r+0x94>
 8018bba:	4628      	mov	r0, r5
 8018bbc:	f7fe fdee 	bl	801779c <_free_r>
 8018bc0:	2000      	movs	r0, #0
 8018bc2:	6360      	str	r0, [r4, #52]	; 0x34
 8018bc4:	e7c0      	b.n	8018b48 <__sflush_r+0x1c>
 8018bc6:	2301      	movs	r3, #1
 8018bc8:	4628      	mov	r0, r5
 8018bca:	47b0      	blx	r6
 8018bcc:	1c41      	adds	r1, r0, #1
 8018bce:	d1c8      	bne.n	8018b62 <__sflush_r+0x36>
 8018bd0:	682b      	ldr	r3, [r5, #0]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d0c5      	beq.n	8018b62 <__sflush_r+0x36>
 8018bd6:	2b1d      	cmp	r3, #29
 8018bd8:	d001      	beq.n	8018bde <__sflush_r+0xb2>
 8018bda:	2b16      	cmp	r3, #22
 8018bdc:	d101      	bne.n	8018be2 <__sflush_r+0xb6>
 8018bde:	602f      	str	r7, [r5, #0]
 8018be0:	e7b1      	b.n	8018b46 <__sflush_r+0x1a>
 8018be2:	89a3      	ldrh	r3, [r4, #12]
 8018be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018be8:	81a3      	strh	r3, [r4, #12]
 8018bea:	e7ad      	b.n	8018b48 <__sflush_r+0x1c>
 8018bec:	690f      	ldr	r7, [r1, #16]
 8018bee:	2f00      	cmp	r7, #0
 8018bf0:	d0a9      	beq.n	8018b46 <__sflush_r+0x1a>
 8018bf2:	0793      	lsls	r3, r2, #30
 8018bf4:	680e      	ldr	r6, [r1, #0]
 8018bf6:	bf08      	it	eq
 8018bf8:	694b      	ldreq	r3, [r1, #20]
 8018bfa:	600f      	str	r7, [r1, #0]
 8018bfc:	bf18      	it	ne
 8018bfe:	2300      	movne	r3, #0
 8018c00:	eba6 0807 	sub.w	r8, r6, r7
 8018c04:	608b      	str	r3, [r1, #8]
 8018c06:	f1b8 0f00 	cmp.w	r8, #0
 8018c0a:	dd9c      	ble.n	8018b46 <__sflush_r+0x1a>
 8018c0c:	6a21      	ldr	r1, [r4, #32]
 8018c0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018c10:	4643      	mov	r3, r8
 8018c12:	463a      	mov	r2, r7
 8018c14:	4628      	mov	r0, r5
 8018c16:	47b0      	blx	r6
 8018c18:	2800      	cmp	r0, #0
 8018c1a:	dc06      	bgt.n	8018c2a <__sflush_r+0xfe>
 8018c1c:	89a3      	ldrh	r3, [r4, #12]
 8018c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c22:	81a3      	strh	r3, [r4, #12]
 8018c24:	f04f 30ff 	mov.w	r0, #4294967295
 8018c28:	e78e      	b.n	8018b48 <__sflush_r+0x1c>
 8018c2a:	4407      	add	r7, r0
 8018c2c:	eba8 0800 	sub.w	r8, r8, r0
 8018c30:	e7e9      	b.n	8018c06 <__sflush_r+0xda>
 8018c32:	bf00      	nop
 8018c34:	dfbffffe 	.word	0xdfbffffe

08018c38 <_fflush_r>:
 8018c38:	b538      	push	{r3, r4, r5, lr}
 8018c3a:	690b      	ldr	r3, [r1, #16]
 8018c3c:	4605      	mov	r5, r0
 8018c3e:	460c      	mov	r4, r1
 8018c40:	b913      	cbnz	r3, 8018c48 <_fflush_r+0x10>
 8018c42:	2500      	movs	r5, #0
 8018c44:	4628      	mov	r0, r5
 8018c46:	bd38      	pop	{r3, r4, r5, pc}
 8018c48:	b118      	cbz	r0, 8018c52 <_fflush_r+0x1a>
 8018c4a:	6a03      	ldr	r3, [r0, #32]
 8018c4c:	b90b      	cbnz	r3, 8018c52 <_fflush_r+0x1a>
 8018c4e:	f7fd fd07 	bl	8016660 <__sinit>
 8018c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d0f3      	beq.n	8018c42 <_fflush_r+0xa>
 8018c5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018c5c:	07d0      	lsls	r0, r2, #31
 8018c5e:	d404      	bmi.n	8018c6a <_fflush_r+0x32>
 8018c60:	0599      	lsls	r1, r3, #22
 8018c62:	d402      	bmi.n	8018c6a <_fflush_r+0x32>
 8018c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c66:	f7fd feda 	bl	8016a1e <__retarget_lock_acquire_recursive>
 8018c6a:	4628      	mov	r0, r5
 8018c6c:	4621      	mov	r1, r4
 8018c6e:	f7ff ff5d 	bl	8018b2c <__sflush_r>
 8018c72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c74:	07da      	lsls	r2, r3, #31
 8018c76:	4605      	mov	r5, r0
 8018c78:	d4e4      	bmi.n	8018c44 <_fflush_r+0xc>
 8018c7a:	89a3      	ldrh	r3, [r4, #12]
 8018c7c:	059b      	lsls	r3, r3, #22
 8018c7e:	d4e1      	bmi.n	8018c44 <_fflush_r+0xc>
 8018c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c82:	f7fd fecd 	bl	8016a20 <__retarget_lock_release_recursive>
 8018c86:	e7dd      	b.n	8018c44 <_fflush_r+0xc>

08018c88 <fiprintf>:
 8018c88:	b40e      	push	{r1, r2, r3}
 8018c8a:	b503      	push	{r0, r1, lr}
 8018c8c:	4601      	mov	r1, r0
 8018c8e:	ab03      	add	r3, sp, #12
 8018c90:	4805      	ldr	r0, [pc, #20]	; (8018ca8 <fiprintf+0x20>)
 8018c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c96:	6800      	ldr	r0, [r0, #0]
 8018c98:	9301      	str	r3, [sp, #4]
 8018c9a:	f000 f897 	bl	8018dcc <_vfiprintf_r>
 8018c9e:	b002      	add	sp, #8
 8018ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8018ca4:	b003      	add	sp, #12
 8018ca6:	4770      	bx	lr
 8018ca8:	200002f4 	.word	0x200002f4

08018cac <memmove>:
 8018cac:	4288      	cmp	r0, r1
 8018cae:	b510      	push	{r4, lr}
 8018cb0:	eb01 0402 	add.w	r4, r1, r2
 8018cb4:	d902      	bls.n	8018cbc <memmove+0x10>
 8018cb6:	4284      	cmp	r4, r0
 8018cb8:	4623      	mov	r3, r4
 8018cba:	d807      	bhi.n	8018ccc <memmove+0x20>
 8018cbc:	1e43      	subs	r3, r0, #1
 8018cbe:	42a1      	cmp	r1, r4
 8018cc0:	d008      	beq.n	8018cd4 <memmove+0x28>
 8018cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018cca:	e7f8      	b.n	8018cbe <memmove+0x12>
 8018ccc:	4402      	add	r2, r0
 8018cce:	4601      	mov	r1, r0
 8018cd0:	428a      	cmp	r2, r1
 8018cd2:	d100      	bne.n	8018cd6 <memmove+0x2a>
 8018cd4:	bd10      	pop	{r4, pc}
 8018cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018cda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018cde:	e7f7      	b.n	8018cd0 <memmove+0x24>

08018ce0 <abort>:
 8018ce0:	b508      	push	{r3, lr}
 8018ce2:	2006      	movs	r0, #6
 8018ce4:	f000 fa4a 	bl	801917c <raise>
 8018ce8:	2001      	movs	r0, #1
 8018cea:	f7ec fdb3 	bl	8005854 <_exit>

08018cee <_calloc_r>:
 8018cee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018cf0:	fba1 2402 	umull	r2, r4, r1, r2
 8018cf4:	b94c      	cbnz	r4, 8018d0a <_calloc_r+0x1c>
 8018cf6:	4611      	mov	r1, r2
 8018cf8:	9201      	str	r2, [sp, #4]
 8018cfa:	f7fb fe1d 	bl	8014938 <_malloc_r>
 8018cfe:	9a01      	ldr	r2, [sp, #4]
 8018d00:	4605      	mov	r5, r0
 8018d02:	b930      	cbnz	r0, 8018d12 <_calloc_r+0x24>
 8018d04:	4628      	mov	r0, r5
 8018d06:	b003      	add	sp, #12
 8018d08:	bd30      	pop	{r4, r5, pc}
 8018d0a:	220c      	movs	r2, #12
 8018d0c:	6002      	str	r2, [r0, #0]
 8018d0e:	2500      	movs	r5, #0
 8018d10:	e7f8      	b.n	8018d04 <_calloc_r+0x16>
 8018d12:	4621      	mov	r1, r4
 8018d14:	f7fd fd71 	bl	80167fa <memset>
 8018d18:	e7f4      	b.n	8018d04 <_calloc_r+0x16>

08018d1a <_realloc_r>:
 8018d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d1e:	4680      	mov	r8, r0
 8018d20:	4614      	mov	r4, r2
 8018d22:	460e      	mov	r6, r1
 8018d24:	b921      	cbnz	r1, 8018d30 <_realloc_r+0x16>
 8018d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d2a:	4611      	mov	r1, r2
 8018d2c:	f7fb be04 	b.w	8014938 <_malloc_r>
 8018d30:	b92a      	cbnz	r2, 8018d3e <_realloc_r+0x24>
 8018d32:	f7fe fd33 	bl	801779c <_free_r>
 8018d36:	4625      	mov	r5, r4
 8018d38:	4628      	mov	r0, r5
 8018d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d3e:	f000 fa39 	bl	80191b4 <_malloc_usable_size_r>
 8018d42:	4284      	cmp	r4, r0
 8018d44:	4607      	mov	r7, r0
 8018d46:	d802      	bhi.n	8018d4e <_realloc_r+0x34>
 8018d48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018d4c:	d812      	bhi.n	8018d74 <_realloc_r+0x5a>
 8018d4e:	4621      	mov	r1, r4
 8018d50:	4640      	mov	r0, r8
 8018d52:	f7fb fdf1 	bl	8014938 <_malloc_r>
 8018d56:	4605      	mov	r5, r0
 8018d58:	2800      	cmp	r0, #0
 8018d5a:	d0ed      	beq.n	8018d38 <_realloc_r+0x1e>
 8018d5c:	42bc      	cmp	r4, r7
 8018d5e:	4622      	mov	r2, r4
 8018d60:	4631      	mov	r1, r6
 8018d62:	bf28      	it	cs
 8018d64:	463a      	movcs	r2, r7
 8018d66:	f7fd fe64 	bl	8016a32 <memcpy>
 8018d6a:	4631      	mov	r1, r6
 8018d6c:	4640      	mov	r0, r8
 8018d6e:	f7fe fd15 	bl	801779c <_free_r>
 8018d72:	e7e1      	b.n	8018d38 <_realloc_r+0x1e>
 8018d74:	4635      	mov	r5, r6
 8018d76:	e7df      	b.n	8018d38 <_realloc_r+0x1e>

08018d78 <__sfputc_r>:
 8018d78:	6893      	ldr	r3, [r2, #8]
 8018d7a:	3b01      	subs	r3, #1
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	b410      	push	{r4}
 8018d80:	6093      	str	r3, [r2, #8]
 8018d82:	da08      	bge.n	8018d96 <__sfputc_r+0x1e>
 8018d84:	6994      	ldr	r4, [r2, #24]
 8018d86:	42a3      	cmp	r3, r4
 8018d88:	db01      	blt.n	8018d8e <__sfputc_r+0x16>
 8018d8a:	290a      	cmp	r1, #10
 8018d8c:	d103      	bne.n	8018d96 <__sfputc_r+0x1e>
 8018d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d92:	f000 b935 	b.w	8019000 <__swbuf_r>
 8018d96:	6813      	ldr	r3, [r2, #0]
 8018d98:	1c58      	adds	r0, r3, #1
 8018d9a:	6010      	str	r0, [r2, #0]
 8018d9c:	7019      	strb	r1, [r3, #0]
 8018d9e:	4608      	mov	r0, r1
 8018da0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018da4:	4770      	bx	lr

08018da6 <__sfputs_r>:
 8018da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018da8:	4606      	mov	r6, r0
 8018daa:	460f      	mov	r7, r1
 8018dac:	4614      	mov	r4, r2
 8018dae:	18d5      	adds	r5, r2, r3
 8018db0:	42ac      	cmp	r4, r5
 8018db2:	d101      	bne.n	8018db8 <__sfputs_r+0x12>
 8018db4:	2000      	movs	r0, #0
 8018db6:	e007      	b.n	8018dc8 <__sfputs_r+0x22>
 8018db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018dbc:	463a      	mov	r2, r7
 8018dbe:	4630      	mov	r0, r6
 8018dc0:	f7ff ffda 	bl	8018d78 <__sfputc_r>
 8018dc4:	1c43      	adds	r3, r0, #1
 8018dc6:	d1f3      	bne.n	8018db0 <__sfputs_r+0xa>
 8018dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018dcc <_vfiprintf_r>:
 8018dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dd0:	460d      	mov	r5, r1
 8018dd2:	b09d      	sub	sp, #116	; 0x74
 8018dd4:	4614      	mov	r4, r2
 8018dd6:	4698      	mov	r8, r3
 8018dd8:	4606      	mov	r6, r0
 8018dda:	b118      	cbz	r0, 8018de4 <_vfiprintf_r+0x18>
 8018ddc:	6a03      	ldr	r3, [r0, #32]
 8018dde:	b90b      	cbnz	r3, 8018de4 <_vfiprintf_r+0x18>
 8018de0:	f7fd fc3e 	bl	8016660 <__sinit>
 8018de4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018de6:	07d9      	lsls	r1, r3, #31
 8018de8:	d405      	bmi.n	8018df6 <_vfiprintf_r+0x2a>
 8018dea:	89ab      	ldrh	r3, [r5, #12]
 8018dec:	059a      	lsls	r2, r3, #22
 8018dee:	d402      	bmi.n	8018df6 <_vfiprintf_r+0x2a>
 8018df0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018df2:	f7fd fe14 	bl	8016a1e <__retarget_lock_acquire_recursive>
 8018df6:	89ab      	ldrh	r3, [r5, #12]
 8018df8:	071b      	lsls	r3, r3, #28
 8018dfa:	d501      	bpl.n	8018e00 <_vfiprintf_r+0x34>
 8018dfc:	692b      	ldr	r3, [r5, #16]
 8018dfe:	b99b      	cbnz	r3, 8018e28 <_vfiprintf_r+0x5c>
 8018e00:	4629      	mov	r1, r5
 8018e02:	4630      	mov	r0, r6
 8018e04:	f000 f93a 	bl	801907c <__swsetup_r>
 8018e08:	b170      	cbz	r0, 8018e28 <_vfiprintf_r+0x5c>
 8018e0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018e0c:	07dc      	lsls	r4, r3, #31
 8018e0e:	d504      	bpl.n	8018e1a <_vfiprintf_r+0x4e>
 8018e10:	f04f 30ff 	mov.w	r0, #4294967295
 8018e14:	b01d      	add	sp, #116	; 0x74
 8018e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e1a:	89ab      	ldrh	r3, [r5, #12]
 8018e1c:	0598      	lsls	r0, r3, #22
 8018e1e:	d4f7      	bmi.n	8018e10 <_vfiprintf_r+0x44>
 8018e20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018e22:	f7fd fdfd 	bl	8016a20 <__retarget_lock_release_recursive>
 8018e26:	e7f3      	b.n	8018e10 <_vfiprintf_r+0x44>
 8018e28:	2300      	movs	r3, #0
 8018e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8018e2c:	2320      	movs	r3, #32
 8018e2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8018e36:	2330      	movs	r3, #48	; 0x30
 8018e38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018fec <_vfiprintf_r+0x220>
 8018e3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018e40:	f04f 0901 	mov.w	r9, #1
 8018e44:	4623      	mov	r3, r4
 8018e46:	469a      	mov	sl, r3
 8018e48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018e4c:	b10a      	cbz	r2, 8018e52 <_vfiprintf_r+0x86>
 8018e4e:	2a25      	cmp	r2, #37	; 0x25
 8018e50:	d1f9      	bne.n	8018e46 <_vfiprintf_r+0x7a>
 8018e52:	ebba 0b04 	subs.w	fp, sl, r4
 8018e56:	d00b      	beq.n	8018e70 <_vfiprintf_r+0xa4>
 8018e58:	465b      	mov	r3, fp
 8018e5a:	4622      	mov	r2, r4
 8018e5c:	4629      	mov	r1, r5
 8018e5e:	4630      	mov	r0, r6
 8018e60:	f7ff ffa1 	bl	8018da6 <__sfputs_r>
 8018e64:	3001      	adds	r0, #1
 8018e66:	f000 80a9 	beq.w	8018fbc <_vfiprintf_r+0x1f0>
 8018e6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018e6c:	445a      	add	r2, fp
 8018e6e:	9209      	str	r2, [sp, #36]	; 0x24
 8018e70:	f89a 3000 	ldrb.w	r3, [sl]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	f000 80a1 	beq.w	8018fbc <_vfiprintf_r+0x1f0>
 8018e7a:	2300      	movs	r3, #0
 8018e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8018e80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018e84:	f10a 0a01 	add.w	sl, sl, #1
 8018e88:	9304      	str	r3, [sp, #16]
 8018e8a:	9307      	str	r3, [sp, #28]
 8018e8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018e90:	931a      	str	r3, [sp, #104]	; 0x68
 8018e92:	4654      	mov	r4, sl
 8018e94:	2205      	movs	r2, #5
 8018e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e9a:	4854      	ldr	r0, [pc, #336]	; (8018fec <_vfiprintf_r+0x220>)
 8018e9c:	f7e7 f998 	bl	80001d0 <memchr>
 8018ea0:	9a04      	ldr	r2, [sp, #16]
 8018ea2:	b9d8      	cbnz	r0, 8018edc <_vfiprintf_r+0x110>
 8018ea4:	06d1      	lsls	r1, r2, #27
 8018ea6:	bf44      	itt	mi
 8018ea8:	2320      	movmi	r3, #32
 8018eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018eae:	0713      	lsls	r3, r2, #28
 8018eb0:	bf44      	itt	mi
 8018eb2:	232b      	movmi	r3, #43	; 0x2b
 8018eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8018ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8018ebe:	d015      	beq.n	8018eec <_vfiprintf_r+0x120>
 8018ec0:	9a07      	ldr	r2, [sp, #28]
 8018ec2:	4654      	mov	r4, sl
 8018ec4:	2000      	movs	r0, #0
 8018ec6:	f04f 0c0a 	mov.w	ip, #10
 8018eca:	4621      	mov	r1, r4
 8018ecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018ed0:	3b30      	subs	r3, #48	; 0x30
 8018ed2:	2b09      	cmp	r3, #9
 8018ed4:	d94d      	bls.n	8018f72 <_vfiprintf_r+0x1a6>
 8018ed6:	b1b0      	cbz	r0, 8018f06 <_vfiprintf_r+0x13a>
 8018ed8:	9207      	str	r2, [sp, #28]
 8018eda:	e014      	b.n	8018f06 <_vfiprintf_r+0x13a>
 8018edc:	eba0 0308 	sub.w	r3, r0, r8
 8018ee0:	fa09 f303 	lsl.w	r3, r9, r3
 8018ee4:	4313      	orrs	r3, r2
 8018ee6:	9304      	str	r3, [sp, #16]
 8018ee8:	46a2      	mov	sl, r4
 8018eea:	e7d2      	b.n	8018e92 <_vfiprintf_r+0xc6>
 8018eec:	9b03      	ldr	r3, [sp, #12]
 8018eee:	1d19      	adds	r1, r3, #4
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	9103      	str	r1, [sp, #12]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	bfbb      	ittet	lt
 8018ef8:	425b      	neglt	r3, r3
 8018efa:	f042 0202 	orrlt.w	r2, r2, #2
 8018efe:	9307      	strge	r3, [sp, #28]
 8018f00:	9307      	strlt	r3, [sp, #28]
 8018f02:	bfb8      	it	lt
 8018f04:	9204      	strlt	r2, [sp, #16]
 8018f06:	7823      	ldrb	r3, [r4, #0]
 8018f08:	2b2e      	cmp	r3, #46	; 0x2e
 8018f0a:	d10c      	bne.n	8018f26 <_vfiprintf_r+0x15a>
 8018f0c:	7863      	ldrb	r3, [r4, #1]
 8018f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8018f10:	d134      	bne.n	8018f7c <_vfiprintf_r+0x1b0>
 8018f12:	9b03      	ldr	r3, [sp, #12]
 8018f14:	1d1a      	adds	r2, r3, #4
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	9203      	str	r2, [sp, #12]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	bfb8      	it	lt
 8018f1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8018f22:	3402      	adds	r4, #2
 8018f24:	9305      	str	r3, [sp, #20]
 8018f26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018ffc <_vfiprintf_r+0x230>
 8018f2a:	7821      	ldrb	r1, [r4, #0]
 8018f2c:	2203      	movs	r2, #3
 8018f2e:	4650      	mov	r0, sl
 8018f30:	f7e7 f94e 	bl	80001d0 <memchr>
 8018f34:	b138      	cbz	r0, 8018f46 <_vfiprintf_r+0x17a>
 8018f36:	9b04      	ldr	r3, [sp, #16]
 8018f38:	eba0 000a 	sub.w	r0, r0, sl
 8018f3c:	2240      	movs	r2, #64	; 0x40
 8018f3e:	4082      	lsls	r2, r0
 8018f40:	4313      	orrs	r3, r2
 8018f42:	3401      	adds	r4, #1
 8018f44:	9304      	str	r3, [sp, #16]
 8018f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f4a:	4829      	ldr	r0, [pc, #164]	; (8018ff0 <_vfiprintf_r+0x224>)
 8018f4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018f50:	2206      	movs	r2, #6
 8018f52:	f7e7 f93d 	bl	80001d0 <memchr>
 8018f56:	2800      	cmp	r0, #0
 8018f58:	d03f      	beq.n	8018fda <_vfiprintf_r+0x20e>
 8018f5a:	4b26      	ldr	r3, [pc, #152]	; (8018ff4 <_vfiprintf_r+0x228>)
 8018f5c:	bb1b      	cbnz	r3, 8018fa6 <_vfiprintf_r+0x1da>
 8018f5e:	9b03      	ldr	r3, [sp, #12]
 8018f60:	3307      	adds	r3, #7
 8018f62:	f023 0307 	bic.w	r3, r3, #7
 8018f66:	3308      	adds	r3, #8
 8018f68:	9303      	str	r3, [sp, #12]
 8018f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f6c:	443b      	add	r3, r7
 8018f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8018f70:	e768      	b.n	8018e44 <_vfiprintf_r+0x78>
 8018f72:	fb0c 3202 	mla	r2, ip, r2, r3
 8018f76:	460c      	mov	r4, r1
 8018f78:	2001      	movs	r0, #1
 8018f7a:	e7a6      	b.n	8018eca <_vfiprintf_r+0xfe>
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	3401      	adds	r4, #1
 8018f80:	9305      	str	r3, [sp, #20]
 8018f82:	4619      	mov	r1, r3
 8018f84:	f04f 0c0a 	mov.w	ip, #10
 8018f88:	4620      	mov	r0, r4
 8018f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f8e:	3a30      	subs	r2, #48	; 0x30
 8018f90:	2a09      	cmp	r2, #9
 8018f92:	d903      	bls.n	8018f9c <_vfiprintf_r+0x1d0>
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d0c6      	beq.n	8018f26 <_vfiprintf_r+0x15a>
 8018f98:	9105      	str	r1, [sp, #20]
 8018f9a:	e7c4      	b.n	8018f26 <_vfiprintf_r+0x15a>
 8018f9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8018fa0:	4604      	mov	r4, r0
 8018fa2:	2301      	movs	r3, #1
 8018fa4:	e7f0      	b.n	8018f88 <_vfiprintf_r+0x1bc>
 8018fa6:	ab03      	add	r3, sp, #12
 8018fa8:	9300      	str	r3, [sp, #0]
 8018faa:	462a      	mov	r2, r5
 8018fac:	4b12      	ldr	r3, [pc, #72]	; (8018ff8 <_vfiprintf_r+0x22c>)
 8018fae:	a904      	add	r1, sp, #16
 8018fb0:	4630      	mov	r0, r6
 8018fb2:	f7fc fcf3 	bl	801599c <_printf_float>
 8018fb6:	4607      	mov	r7, r0
 8018fb8:	1c78      	adds	r0, r7, #1
 8018fba:	d1d6      	bne.n	8018f6a <_vfiprintf_r+0x19e>
 8018fbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018fbe:	07d9      	lsls	r1, r3, #31
 8018fc0:	d405      	bmi.n	8018fce <_vfiprintf_r+0x202>
 8018fc2:	89ab      	ldrh	r3, [r5, #12]
 8018fc4:	059a      	lsls	r2, r3, #22
 8018fc6:	d402      	bmi.n	8018fce <_vfiprintf_r+0x202>
 8018fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018fca:	f7fd fd29 	bl	8016a20 <__retarget_lock_release_recursive>
 8018fce:	89ab      	ldrh	r3, [r5, #12]
 8018fd0:	065b      	lsls	r3, r3, #25
 8018fd2:	f53f af1d 	bmi.w	8018e10 <_vfiprintf_r+0x44>
 8018fd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018fd8:	e71c      	b.n	8018e14 <_vfiprintf_r+0x48>
 8018fda:	ab03      	add	r3, sp, #12
 8018fdc:	9300      	str	r3, [sp, #0]
 8018fde:	462a      	mov	r2, r5
 8018fe0:	4b05      	ldr	r3, [pc, #20]	; (8018ff8 <_vfiprintf_r+0x22c>)
 8018fe2:	a904      	add	r1, sp, #16
 8018fe4:	4630      	mov	r0, r6
 8018fe6:	f7fc ff7d 	bl	8015ee4 <_printf_i>
 8018fea:	e7e4      	b.n	8018fb6 <_vfiprintf_r+0x1ea>
 8018fec:	0801d164 	.word	0x0801d164
 8018ff0:	0801d16e 	.word	0x0801d16e
 8018ff4:	0801599d 	.word	0x0801599d
 8018ff8:	08018da7 	.word	0x08018da7
 8018ffc:	0801d16a 	.word	0x0801d16a

08019000 <__swbuf_r>:
 8019000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019002:	460e      	mov	r6, r1
 8019004:	4614      	mov	r4, r2
 8019006:	4605      	mov	r5, r0
 8019008:	b118      	cbz	r0, 8019012 <__swbuf_r+0x12>
 801900a:	6a03      	ldr	r3, [r0, #32]
 801900c:	b90b      	cbnz	r3, 8019012 <__swbuf_r+0x12>
 801900e:	f7fd fb27 	bl	8016660 <__sinit>
 8019012:	69a3      	ldr	r3, [r4, #24]
 8019014:	60a3      	str	r3, [r4, #8]
 8019016:	89a3      	ldrh	r3, [r4, #12]
 8019018:	071a      	lsls	r2, r3, #28
 801901a:	d525      	bpl.n	8019068 <__swbuf_r+0x68>
 801901c:	6923      	ldr	r3, [r4, #16]
 801901e:	b31b      	cbz	r3, 8019068 <__swbuf_r+0x68>
 8019020:	6823      	ldr	r3, [r4, #0]
 8019022:	6922      	ldr	r2, [r4, #16]
 8019024:	1a98      	subs	r0, r3, r2
 8019026:	6963      	ldr	r3, [r4, #20]
 8019028:	b2f6      	uxtb	r6, r6
 801902a:	4283      	cmp	r3, r0
 801902c:	4637      	mov	r7, r6
 801902e:	dc04      	bgt.n	801903a <__swbuf_r+0x3a>
 8019030:	4621      	mov	r1, r4
 8019032:	4628      	mov	r0, r5
 8019034:	f7ff fe00 	bl	8018c38 <_fflush_r>
 8019038:	b9e0      	cbnz	r0, 8019074 <__swbuf_r+0x74>
 801903a:	68a3      	ldr	r3, [r4, #8]
 801903c:	3b01      	subs	r3, #1
 801903e:	60a3      	str	r3, [r4, #8]
 8019040:	6823      	ldr	r3, [r4, #0]
 8019042:	1c5a      	adds	r2, r3, #1
 8019044:	6022      	str	r2, [r4, #0]
 8019046:	701e      	strb	r6, [r3, #0]
 8019048:	6962      	ldr	r2, [r4, #20]
 801904a:	1c43      	adds	r3, r0, #1
 801904c:	429a      	cmp	r2, r3
 801904e:	d004      	beq.n	801905a <__swbuf_r+0x5a>
 8019050:	89a3      	ldrh	r3, [r4, #12]
 8019052:	07db      	lsls	r3, r3, #31
 8019054:	d506      	bpl.n	8019064 <__swbuf_r+0x64>
 8019056:	2e0a      	cmp	r6, #10
 8019058:	d104      	bne.n	8019064 <__swbuf_r+0x64>
 801905a:	4621      	mov	r1, r4
 801905c:	4628      	mov	r0, r5
 801905e:	f7ff fdeb 	bl	8018c38 <_fflush_r>
 8019062:	b938      	cbnz	r0, 8019074 <__swbuf_r+0x74>
 8019064:	4638      	mov	r0, r7
 8019066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019068:	4621      	mov	r1, r4
 801906a:	4628      	mov	r0, r5
 801906c:	f000 f806 	bl	801907c <__swsetup_r>
 8019070:	2800      	cmp	r0, #0
 8019072:	d0d5      	beq.n	8019020 <__swbuf_r+0x20>
 8019074:	f04f 37ff 	mov.w	r7, #4294967295
 8019078:	e7f4      	b.n	8019064 <__swbuf_r+0x64>
	...

0801907c <__swsetup_r>:
 801907c:	b538      	push	{r3, r4, r5, lr}
 801907e:	4b2a      	ldr	r3, [pc, #168]	; (8019128 <__swsetup_r+0xac>)
 8019080:	4605      	mov	r5, r0
 8019082:	6818      	ldr	r0, [r3, #0]
 8019084:	460c      	mov	r4, r1
 8019086:	b118      	cbz	r0, 8019090 <__swsetup_r+0x14>
 8019088:	6a03      	ldr	r3, [r0, #32]
 801908a:	b90b      	cbnz	r3, 8019090 <__swsetup_r+0x14>
 801908c:	f7fd fae8 	bl	8016660 <__sinit>
 8019090:	89a3      	ldrh	r3, [r4, #12]
 8019092:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019096:	0718      	lsls	r0, r3, #28
 8019098:	d422      	bmi.n	80190e0 <__swsetup_r+0x64>
 801909a:	06d9      	lsls	r1, r3, #27
 801909c:	d407      	bmi.n	80190ae <__swsetup_r+0x32>
 801909e:	2309      	movs	r3, #9
 80190a0:	602b      	str	r3, [r5, #0]
 80190a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80190a6:	81a3      	strh	r3, [r4, #12]
 80190a8:	f04f 30ff 	mov.w	r0, #4294967295
 80190ac:	e034      	b.n	8019118 <__swsetup_r+0x9c>
 80190ae:	0758      	lsls	r0, r3, #29
 80190b0:	d512      	bpl.n	80190d8 <__swsetup_r+0x5c>
 80190b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80190b4:	b141      	cbz	r1, 80190c8 <__swsetup_r+0x4c>
 80190b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80190ba:	4299      	cmp	r1, r3
 80190bc:	d002      	beq.n	80190c4 <__swsetup_r+0x48>
 80190be:	4628      	mov	r0, r5
 80190c0:	f7fe fb6c 	bl	801779c <_free_r>
 80190c4:	2300      	movs	r3, #0
 80190c6:	6363      	str	r3, [r4, #52]	; 0x34
 80190c8:	89a3      	ldrh	r3, [r4, #12]
 80190ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80190ce:	81a3      	strh	r3, [r4, #12]
 80190d0:	2300      	movs	r3, #0
 80190d2:	6063      	str	r3, [r4, #4]
 80190d4:	6923      	ldr	r3, [r4, #16]
 80190d6:	6023      	str	r3, [r4, #0]
 80190d8:	89a3      	ldrh	r3, [r4, #12]
 80190da:	f043 0308 	orr.w	r3, r3, #8
 80190de:	81a3      	strh	r3, [r4, #12]
 80190e0:	6923      	ldr	r3, [r4, #16]
 80190e2:	b94b      	cbnz	r3, 80190f8 <__swsetup_r+0x7c>
 80190e4:	89a3      	ldrh	r3, [r4, #12]
 80190e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80190ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80190ee:	d003      	beq.n	80190f8 <__swsetup_r+0x7c>
 80190f0:	4621      	mov	r1, r4
 80190f2:	4628      	mov	r0, r5
 80190f4:	f000 f88c 	bl	8019210 <__smakebuf_r>
 80190f8:	89a0      	ldrh	r0, [r4, #12]
 80190fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80190fe:	f010 0301 	ands.w	r3, r0, #1
 8019102:	d00a      	beq.n	801911a <__swsetup_r+0x9e>
 8019104:	2300      	movs	r3, #0
 8019106:	60a3      	str	r3, [r4, #8]
 8019108:	6963      	ldr	r3, [r4, #20]
 801910a:	425b      	negs	r3, r3
 801910c:	61a3      	str	r3, [r4, #24]
 801910e:	6923      	ldr	r3, [r4, #16]
 8019110:	b943      	cbnz	r3, 8019124 <__swsetup_r+0xa8>
 8019112:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019116:	d1c4      	bne.n	80190a2 <__swsetup_r+0x26>
 8019118:	bd38      	pop	{r3, r4, r5, pc}
 801911a:	0781      	lsls	r1, r0, #30
 801911c:	bf58      	it	pl
 801911e:	6963      	ldrpl	r3, [r4, #20]
 8019120:	60a3      	str	r3, [r4, #8]
 8019122:	e7f4      	b.n	801910e <__swsetup_r+0x92>
 8019124:	2000      	movs	r0, #0
 8019126:	e7f7      	b.n	8019118 <__swsetup_r+0x9c>
 8019128:	200002f4 	.word	0x200002f4

0801912c <_raise_r>:
 801912c:	291f      	cmp	r1, #31
 801912e:	b538      	push	{r3, r4, r5, lr}
 8019130:	4604      	mov	r4, r0
 8019132:	460d      	mov	r5, r1
 8019134:	d904      	bls.n	8019140 <_raise_r+0x14>
 8019136:	2316      	movs	r3, #22
 8019138:	6003      	str	r3, [r0, #0]
 801913a:	f04f 30ff 	mov.w	r0, #4294967295
 801913e:	bd38      	pop	{r3, r4, r5, pc}
 8019140:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019142:	b112      	cbz	r2, 801914a <_raise_r+0x1e>
 8019144:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019148:	b94b      	cbnz	r3, 801915e <_raise_r+0x32>
 801914a:	4620      	mov	r0, r4
 801914c:	f000 f830 	bl	80191b0 <_getpid_r>
 8019150:	462a      	mov	r2, r5
 8019152:	4601      	mov	r1, r0
 8019154:	4620      	mov	r0, r4
 8019156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801915a:	f000 b817 	b.w	801918c <_kill_r>
 801915e:	2b01      	cmp	r3, #1
 8019160:	d00a      	beq.n	8019178 <_raise_r+0x4c>
 8019162:	1c59      	adds	r1, r3, #1
 8019164:	d103      	bne.n	801916e <_raise_r+0x42>
 8019166:	2316      	movs	r3, #22
 8019168:	6003      	str	r3, [r0, #0]
 801916a:	2001      	movs	r0, #1
 801916c:	e7e7      	b.n	801913e <_raise_r+0x12>
 801916e:	2400      	movs	r4, #0
 8019170:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019174:	4628      	mov	r0, r5
 8019176:	4798      	blx	r3
 8019178:	2000      	movs	r0, #0
 801917a:	e7e0      	b.n	801913e <_raise_r+0x12>

0801917c <raise>:
 801917c:	4b02      	ldr	r3, [pc, #8]	; (8019188 <raise+0xc>)
 801917e:	4601      	mov	r1, r0
 8019180:	6818      	ldr	r0, [r3, #0]
 8019182:	f7ff bfd3 	b.w	801912c <_raise_r>
 8019186:	bf00      	nop
 8019188:	200002f4 	.word	0x200002f4

0801918c <_kill_r>:
 801918c:	b538      	push	{r3, r4, r5, lr}
 801918e:	4d07      	ldr	r5, [pc, #28]	; (80191ac <_kill_r+0x20>)
 8019190:	2300      	movs	r3, #0
 8019192:	4604      	mov	r4, r0
 8019194:	4608      	mov	r0, r1
 8019196:	4611      	mov	r1, r2
 8019198:	602b      	str	r3, [r5, #0]
 801919a:	f7ec fb4b 	bl	8005834 <_kill>
 801919e:	1c43      	adds	r3, r0, #1
 80191a0:	d102      	bne.n	80191a8 <_kill_r+0x1c>
 80191a2:	682b      	ldr	r3, [r5, #0]
 80191a4:	b103      	cbz	r3, 80191a8 <_kill_r+0x1c>
 80191a6:	6023      	str	r3, [r4, #0]
 80191a8:	bd38      	pop	{r3, r4, r5, pc}
 80191aa:	bf00      	nop
 80191ac:	200025a4 	.word	0x200025a4

080191b0 <_getpid_r>:
 80191b0:	f7ec bb38 	b.w	8005824 <_getpid>

080191b4 <_malloc_usable_size_r>:
 80191b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80191b8:	1f18      	subs	r0, r3, #4
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	bfbc      	itt	lt
 80191be:	580b      	ldrlt	r3, [r1, r0]
 80191c0:	18c0      	addlt	r0, r0, r3
 80191c2:	4770      	bx	lr

080191c4 <__swhatbuf_r>:
 80191c4:	b570      	push	{r4, r5, r6, lr}
 80191c6:	460c      	mov	r4, r1
 80191c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191cc:	2900      	cmp	r1, #0
 80191ce:	b096      	sub	sp, #88	; 0x58
 80191d0:	4615      	mov	r5, r2
 80191d2:	461e      	mov	r6, r3
 80191d4:	da0d      	bge.n	80191f2 <__swhatbuf_r+0x2e>
 80191d6:	89a3      	ldrh	r3, [r4, #12]
 80191d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80191dc:	f04f 0100 	mov.w	r1, #0
 80191e0:	bf0c      	ite	eq
 80191e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80191e6:	2340      	movne	r3, #64	; 0x40
 80191e8:	2000      	movs	r0, #0
 80191ea:	6031      	str	r1, [r6, #0]
 80191ec:	602b      	str	r3, [r5, #0]
 80191ee:	b016      	add	sp, #88	; 0x58
 80191f0:	bd70      	pop	{r4, r5, r6, pc}
 80191f2:	466a      	mov	r2, sp
 80191f4:	f000 f848 	bl	8019288 <_fstat_r>
 80191f8:	2800      	cmp	r0, #0
 80191fa:	dbec      	blt.n	80191d6 <__swhatbuf_r+0x12>
 80191fc:	9901      	ldr	r1, [sp, #4]
 80191fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019202:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8019206:	4259      	negs	r1, r3
 8019208:	4159      	adcs	r1, r3
 801920a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801920e:	e7eb      	b.n	80191e8 <__swhatbuf_r+0x24>

08019210 <__smakebuf_r>:
 8019210:	898b      	ldrh	r3, [r1, #12]
 8019212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019214:	079d      	lsls	r5, r3, #30
 8019216:	4606      	mov	r6, r0
 8019218:	460c      	mov	r4, r1
 801921a:	d507      	bpl.n	801922c <__smakebuf_r+0x1c>
 801921c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019220:	6023      	str	r3, [r4, #0]
 8019222:	6123      	str	r3, [r4, #16]
 8019224:	2301      	movs	r3, #1
 8019226:	6163      	str	r3, [r4, #20]
 8019228:	b002      	add	sp, #8
 801922a:	bd70      	pop	{r4, r5, r6, pc}
 801922c:	ab01      	add	r3, sp, #4
 801922e:	466a      	mov	r2, sp
 8019230:	f7ff ffc8 	bl	80191c4 <__swhatbuf_r>
 8019234:	9900      	ldr	r1, [sp, #0]
 8019236:	4605      	mov	r5, r0
 8019238:	4630      	mov	r0, r6
 801923a:	f7fb fb7d 	bl	8014938 <_malloc_r>
 801923e:	b948      	cbnz	r0, 8019254 <__smakebuf_r+0x44>
 8019240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019244:	059a      	lsls	r2, r3, #22
 8019246:	d4ef      	bmi.n	8019228 <__smakebuf_r+0x18>
 8019248:	f023 0303 	bic.w	r3, r3, #3
 801924c:	f043 0302 	orr.w	r3, r3, #2
 8019250:	81a3      	strh	r3, [r4, #12]
 8019252:	e7e3      	b.n	801921c <__smakebuf_r+0xc>
 8019254:	89a3      	ldrh	r3, [r4, #12]
 8019256:	6020      	str	r0, [r4, #0]
 8019258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801925c:	81a3      	strh	r3, [r4, #12]
 801925e:	9b00      	ldr	r3, [sp, #0]
 8019260:	6163      	str	r3, [r4, #20]
 8019262:	9b01      	ldr	r3, [sp, #4]
 8019264:	6120      	str	r0, [r4, #16]
 8019266:	b15b      	cbz	r3, 8019280 <__smakebuf_r+0x70>
 8019268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801926c:	4630      	mov	r0, r6
 801926e:	f000 f81d 	bl	80192ac <_isatty_r>
 8019272:	b128      	cbz	r0, 8019280 <__smakebuf_r+0x70>
 8019274:	89a3      	ldrh	r3, [r4, #12]
 8019276:	f023 0303 	bic.w	r3, r3, #3
 801927a:	f043 0301 	orr.w	r3, r3, #1
 801927e:	81a3      	strh	r3, [r4, #12]
 8019280:	89a3      	ldrh	r3, [r4, #12]
 8019282:	431d      	orrs	r5, r3
 8019284:	81a5      	strh	r5, [r4, #12]
 8019286:	e7cf      	b.n	8019228 <__smakebuf_r+0x18>

08019288 <_fstat_r>:
 8019288:	b538      	push	{r3, r4, r5, lr}
 801928a:	4d07      	ldr	r5, [pc, #28]	; (80192a8 <_fstat_r+0x20>)
 801928c:	2300      	movs	r3, #0
 801928e:	4604      	mov	r4, r0
 8019290:	4608      	mov	r0, r1
 8019292:	4611      	mov	r1, r2
 8019294:	602b      	str	r3, [r5, #0]
 8019296:	f7ec fb2c 	bl	80058f2 <_fstat>
 801929a:	1c43      	adds	r3, r0, #1
 801929c:	d102      	bne.n	80192a4 <_fstat_r+0x1c>
 801929e:	682b      	ldr	r3, [r5, #0]
 80192a0:	b103      	cbz	r3, 80192a4 <_fstat_r+0x1c>
 80192a2:	6023      	str	r3, [r4, #0]
 80192a4:	bd38      	pop	{r3, r4, r5, pc}
 80192a6:	bf00      	nop
 80192a8:	200025a4 	.word	0x200025a4

080192ac <_isatty_r>:
 80192ac:	b538      	push	{r3, r4, r5, lr}
 80192ae:	4d06      	ldr	r5, [pc, #24]	; (80192c8 <_isatty_r+0x1c>)
 80192b0:	2300      	movs	r3, #0
 80192b2:	4604      	mov	r4, r0
 80192b4:	4608      	mov	r0, r1
 80192b6:	602b      	str	r3, [r5, #0]
 80192b8:	f7ec fb2b 	bl	8005912 <_isatty>
 80192bc:	1c43      	adds	r3, r0, #1
 80192be:	d102      	bne.n	80192c6 <_isatty_r+0x1a>
 80192c0:	682b      	ldr	r3, [r5, #0]
 80192c2:	b103      	cbz	r3, 80192c6 <_isatty_r+0x1a>
 80192c4:	6023      	str	r3, [r4, #0]
 80192c6:	bd38      	pop	{r3, r4, r5, pc}
 80192c8:	200025a4 	.word	0x200025a4
 80192cc:	00000000 	.word	0x00000000

080192d0 <cos>:
 80192d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80192d2:	ec53 2b10 	vmov	r2, r3, d0
 80192d6:	4826      	ldr	r0, [pc, #152]	; (8019370 <cos+0xa0>)
 80192d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80192dc:	4281      	cmp	r1, r0
 80192de:	dc06      	bgt.n	80192ee <cos+0x1e>
 80192e0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8019368 <cos+0x98>
 80192e4:	b005      	add	sp, #20
 80192e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80192ea:	f000 b9b9 	b.w	8019660 <__kernel_cos>
 80192ee:	4821      	ldr	r0, [pc, #132]	; (8019374 <cos+0xa4>)
 80192f0:	4281      	cmp	r1, r0
 80192f2:	dd09      	ble.n	8019308 <cos+0x38>
 80192f4:	ee10 0a10 	vmov	r0, s0
 80192f8:	4619      	mov	r1, r3
 80192fa:	f7e6 ffc5 	bl	8000288 <__aeabi_dsub>
 80192fe:	ec41 0b10 	vmov	d0, r0, r1
 8019302:	b005      	add	sp, #20
 8019304:	f85d fb04 	ldr.w	pc, [sp], #4
 8019308:	4668      	mov	r0, sp
 801930a:	f000 fb31 	bl	8019970 <__ieee754_rem_pio2>
 801930e:	f000 0003 	and.w	r0, r0, #3
 8019312:	2801      	cmp	r0, #1
 8019314:	d00b      	beq.n	801932e <cos+0x5e>
 8019316:	2802      	cmp	r0, #2
 8019318:	d016      	beq.n	8019348 <cos+0x78>
 801931a:	b9e0      	cbnz	r0, 8019356 <cos+0x86>
 801931c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019320:	ed9d 0b00 	vldr	d0, [sp]
 8019324:	f000 f99c 	bl	8019660 <__kernel_cos>
 8019328:	ec51 0b10 	vmov	r0, r1, d0
 801932c:	e7e7      	b.n	80192fe <cos+0x2e>
 801932e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019332:	ed9d 0b00 	vldr	d0, [sp]
 8019336:	f000 fa5b 	bl	80197f0 <__kernel_sin>
 801933a:	ec53 2b10 	vmov	r2, r3, d0
 801933e:	ee10 0a10 	vmov	r0, s0
 8019342:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019346:	e7da      	b.n	80192fe <cos+0x2e>
 8019348:	ed9d 1b02 	vldr	d1, [sp, #8]
 801934c:	ed9d 0b00 	vldr	d0, [sp]
 8019350:	f000 f986 	bl	8019660 <__kernel_cos>
 8019354:	e7f1      	b.n	801933a <cos+0x6a>
 8019356:	ed9d 1b02 	vldr	d1, [sp, #8]
 801935a:	ed9d 0b00 	vldr	d0, [sp]
 801935e:	2001      	movs	r0, #1
 8019360:	f000 fa46 	bl	80197f0 <__kernel_sin>
 8019364:	e7e0      	b.n	8019328 <cos+0x58>
 8019366:	bf00      	nop
	...
 8019370:	3fe921fb 	.word	0x3fe921fb
 8019374:	7fefffff 	.word	0x7fefffff

08019378 <sin>:
 8019378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801937a:	ec53 2b10 	vmov	r2, r3, d0
 801937e:	4828      	ldr	r0, [pc, #160]	; (8019420 <sin+0xa8>)
 8019380:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019384:	4281      	cmp	r1, r0
 8019386:	dc07      	bgt.n	8019398 <sin+0x20>
 8019388:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8019418 <sin+0xa0>
 801938c:	2000      	movs	r0, #0
 801938e:	b005      	add	sp, #20
 8019390:	f85d eb04 	ldr.w	lr, [sp], #4
 8019394:	f000 ba2c 	b.w	80197f0 <__kernel_sin>
 8019398:	4822      	ldr	r0, [pc, #136]	; (8019424 <sin+0xac>)
 801939a:	4281      	cmp	r1, r0
 801939c:	dd09      	ble.n	80193b2 <sin+0x3a>
 801939e:	ee10 0a10 	vmov	r0, s0
 80193a2:	4619      	mov	r1, r3
 80193a4:	f7e6 ff70 	bl	8000288 <__aeabi_dsub>
 80193a8:	ec41 0b10 	vmov	d0, r0, r1
 80193ac:	b005      	add	sp, #20
 80193ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80193b2:	4668      	mov	r0, sp
 80193b4:	f000 fadc 	bl	8019970 <__ieee754_rem_pio2>
 80193b8:	f000 0003 	and.w	r0, r0, #3
 80193bc:	2801      	cmp	r0, #1
 80193be:	d00c      	beq.n	80193da <sin+0x62>
 80193c0:	2802      	cmp	r0, #2
 80193c2:	d011      	beq.n	80193e8 <sin+0x70>
 80193c4:	b9f0      	cbnz	r0, 8019404 <sin+0x8c>
 80193c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80193ca:	ed9d 0b00 	vldr	d0, [sp]
 80193ce:	2001      	movs	r0, #1
 80193d0:	f000 fa0e 	bl	80197f0 <__kernel_sin>
 80193d4:	ec51 0b10 	vmov	r0, r1, d0
 80193d8:	e7e6      	b.n	80193a8 <sin+0x30>
 80193da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80193de:	ed9d 0b00 	vldr	d0, [sp]
 80193e2:	f000 f93d 	bl	8019660 <__kernel_cos>
 80193e6:	e7f5      	b.n	80193d4 <sin+0x5c>
 80193e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80193ec:	ed9d 0b00 	vldr	d0, [sp]
 80193f0:	2001      	movs	r0, #1
 80193f2:	f000 f9fd 	bl	80197f0 <__kernel_sin>
 80193f6:	ec53 2b10 	vmov	r2, r3, d0
 80193fa:	ee10 0a10 	vmov	r0, s0
 80193fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019402:	e7d1      	b.n	80193a8 <sin+0x30>
 8019404:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019408:	ed9d 0b00 	vldr	d0, [sp]
 801940c:	f000 f928 	bl	8019660 <__kernel_cos>
 8019410:	e7f1      	b.n	80193f6 <sin+0x7e>
 8019412:	bf00      	nop
 8019414:	f3af 8000 	nop.w
	...
 8019420:	3fe921fb 	.word	0x3fe921fb
 8019424:	7fefffff 	.word	0x7fefffff

08019428 <expf>:
 8019428:	b508      	push	{r3, lr}
 801942a:	ed2d 8b02 	vpush	{d8}
 801942e:	eef0 8a40 	vmov.f32	s17, s0
 8019432:	f000 fce1 	bl	8019df8 <__ieee754_expf>
 8019436:	eeb0 8a40 	vmov.f32	s16, s0
 801943a:	eeb0 0a68 	vmov.f32	s0, s17
 801943e:	f000 f87b 	bl	8019538 <finitef>
 8019442:	b160      	cbz	r0, 801945e <expf+0x36>
 8019444:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8019484 <expf+0x5c>
 8019448:	eef4 8ae7 	vcmpe.f32	s17, s15
 801944c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019450:	dd0a      	ble.n	8019468 <expf+0x40>
 8019452:	f7fd fab9 	bl	80169c8 <__errno>
 8019456:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8019488 <expf+0x60>
 801945a:	2322      	movs	r3, #34	; 0x22
 801945c:	6003      	str	r3, [r0, #0]
 801945e:	eeb0 0a48 	vmov.f32	s0, s16
 8019462:	ecbd 8b02 	vpop	{d8}
 8019466:	bd08      	pop	{r3, pc}
 8019468:	eddf 7a08 	vldr	s15, [pc, #32]	; 801948c <expf+0x64>
 801946c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019474:	d5f3      	bpl.n	801945e <expf+0x36>
 8019476:	f7fd faa7 	bl	80169c8 <__errno>
 801947a:	2322      	movs	r3, #34	; 0x22
 801947c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8019490 <expf+0x68>
 8019480:	6003      	str	r3, [r0, #0]
 8019482:	e7ec      	b.n	801945e <expf+0x36>
 8019484:	42b17217 	.word	0x42b17217
 8019488:	7f800000 	.word	0x7f800000
 801948c:	c2cff1b5 	.word	0xc2cff1b5
 8019490:	00000000 	.word	0x00000000

08019494 <fmin>:
 8019494:	b508      	push	{r3, lr}
 8019496:	ed2d 8b04 	vpush	{d8-d9}
 801949a:	eeb0 8a40 	vmov.f32	s16, s0
 801949e:	eef0 8a60 	vmov.f32	s17, s1
 80194a2:	eeb0 9a41 	vmov.f32	s18, s2
 80194a6:	eef0 9a61 	vmov.f32	s19, s3
 80194aa:	f000 f81b 	bl	80194e4 <__fpclassifyd>
 80194ae:	b168      	cbz	r0, 80194cc <fmin+0x38>
 80194b0:	eeb0 0a49 	vmov.f32	s0, s18
 80194b4:	eef0 0a69 	vmov.f32	s1, s19
 80194b8:	f000 f814 	bl	80194e4 <__fpclassifyd>
 80194bc:	b150      	cbz	r0, 80194d4 <fmin+0x40>
 80194be:	ec53 2b19 	vmov	r2, r3, d9
 80194c2:	ec51 0b18 	vmov	r0, r1, d8
 80194c6:	f7e7 fb09 	bl	8000adc <__aeabi_dcmplt>
 80194ca:	b918      	cbnz	r0, 80194d4 <fmin+0x40>
 80194cc:	eeb0 8a49 	vmov.f32	s16, s18
 80194d0:	eef0 8a69 	vmov.f32	s17, s19
 80194d4:	eeb0 0a48 	vmov.f32	s0, s16
 80194d8:	eef0 0a68 	vmov.f32	s1, s17
 80194dc:	ecbd 8b04 	vpop	{d8-d9}
 80194e0:	bd08      	pop	{r3, pc}
	...

080194e4 <__fpclassifyd>:
 80194e4:	ec51 0b10 	vmov	r0, r1, d0
 80194e8:	b510      	push	{r4, lr}
 80194ea:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80194ee:	460b      	mov	r3, r1
 80194f0:	d019      	beq.n	8019526 <__fpclassifyd+0x42>
 80194f2:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 80194f6:	490e      	ldr	r1, [pc, #56]	; (8019530 <__fpclassifyd+0x4c>)
 80194f8:	428a      	cmp	r2, r1
 80194fa:	d90e      	bls.n	801951a <__fpclassifyd+0x36>
 80194fc:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8019500:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8019504:	428a      	cmp	r2, r1
 8019506:	d908      	bls.n	801951a <__fpclassifyd+0x36>
 8019508:	4a0a      	ldr	r2, [pc, #40]	; (8019534 <__fpclassifyd+0x50>)
 801950a:	4213      	tst	r3, r2
 801950c:	d007      	beq.n	801951e <__fpclassifyd+0x3a>
 801950e:	4294      	cmp	r4, r2
 8019510:	d107      	bne.n	8019522 <__fpclassifyd+0x3e>
 8019512:	fab0 f080 	clz	r0, r0
 8019516:	0940      	lsrs	r0, r0, #5
 8019518:	bd10      	pop	{r4, pc}
 801951a:	2004      	movs	r0, #4
 801951c:	e7fc      	b.n	8019518 <__fpclassifyd+0x34>
 801951e:	2003      	movs	r0, #3
 8019520:	e7fa      	b.n	8019518 <__fpclassifyd+0x34>
 8019522:	2000      	movs	r0, #0
 8019524:	e7f8      	b.n	8019518 <__fpclassifyd+0x34>
 8019526:	2800      	cmp	r0, #0
 8019528:	d1ee      	bne.n	8019508 <__fpclassifyd+0x24>
 801952a:	2002      	movs	r0, #2
 801952c:	e7f4      	b.n	8019518 <__fpclassifyd+0x34>
 801952e:	bf00      	nop
 8019530:	7fdfffff 	.word	0x7fdfffff
 8019534:	7ff00000 	.word	0x7ff00000

08019538 <finitef>:
 8019538:	b082      	sub	sp, #8
 801953a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801953e:	9801      	ldr	r0, [sp, #4]
 8019540:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019544:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019548:	bfac      	ite	ge
 801954a:	2000      	movge	r0, #0
 801954c:	2001      	movlt	r0, #1
 801954e:	b002      	add	sp, #8
 8019550:	4770      	bx	lr

08019552 <cosl>:
 8019552:	f7ff bebd 	b.w	80192d0 <cos>

08019556 <sinl>:
 8019556:	f7ff bf0f 	b.w	8019378 <sin>

0801955a <acosl>:
 801955a:	f000 bc0f 	b.w	8019d7c <acos>
	...

08019560 <floor>:
 8019560:	ec51 0b10 	vmov	r0, r1, d0
 8019564:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801956c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8019570:	2e13      	cmp	r6, #19
 8019572:	ee10 5a10 	vmov	r5, s0
 8019576:	ee10 8a10 	vmov	r8, s0
 801957a:	460c      	mov	r4, r1
 801957c:	dc31      	bgt.n	80195e2 <floor+0x82>
 801957e:	2e00      	cmp	r6, #0
 8019580:	da14      	bge.n	80195ac <floor+0x4c>
 8019582:	a333      	add	r3, pc, #204	; (adr r3, 8019650 <floor+0xf0>)
 8019584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019588:	f7e6 fe80 	bl	800028c <__adddf3>
 801958c:	2200      	movs	r2, #0
 801958e:	2300      	movs	r3, #0
 8019590:	f7e7 fac2 	bl	8000b18 <__aeabi_dcmpgt>
 8019594:	b138      	cbz	r0, 80195a6 <floor+0x46>
 8019596:	2c00      	cmp	r4, #0
 8019598:	da53      	bge.n	8019642 <floor+0xe2>
 801959a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801959e:	4325      	orrs	r5, r4
 80195a0:	d052      	beq.n	8019648 <floor+0xe8>
 80195a2:	4c2d      	ldr	r4, [pc, #180]	; (8019658 <floor+0xf8>)
 80195a4:	2500      	movs	r5, #0
 80195a6:	4621      	mov	r1, r4
 80195a8:	4628      	mov	r0, r5
 80195aa:	e024      	b.n	80195f6 <floor+0x96>
 80195ac:	4f2b      	ldr	r7, [pc, #172]	; (801965c <floor+0xfc>)
 80195ae:	4137      	asrs	r7, r6
 80195b0:	ea01 0307 	and.w	r3, r1, r7
 80195b4:	4303      	orrs	r3, r0
 80195b6:	d01e      	beq.n	80195f6 <floor+0x96>
 80195b8:	a325      	add	r3, pc, #148	; (adr r3, 8019650 <floor+0xf0>)
 80195ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195be:	f7e6 fe65 	bl	800028c <__adddf3>
 80195c2:	2200      	movs	r2, #0
 80195c4:	2300      	movs	r3, #0
 80195c6:	f7e7 faa7 	bl	8000b18 <__aeabi_dcmpgt>
 80195ca:	2800      	cmp	r0, #0
 80195cc:	d0eb      	beq.n	80195a6 <floor+0x46>
 80195ce:	2c00      	cmp	r4, #0
 80195d0:	bfbe      	ittt	lt
 80195d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80195d6:	4133      	asrlt	r3, r6
 80195d8:	18e4      	addlt	r4, r4, r3
 80195da:	ea24 0407 	bic.w	r4, r4, r7
 80195de:	2500      	movs	r5, #0
 80195e0:	e7e1      	b.n	80195a6 <floor+0x46>
 80195e2:	2e33      	cmp	r6, #51	; 0x33
 80195e4:	dd0b      	ble.n	80195fe <floor+0x9e>
 80195e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80195ea:	d104      	bne.n	80195f6 <floor+0x96>
 80195ec:	ee10 2a10 	vmov	r2, s0
 80195f0:	460b      	mov	r3, r1
 80195f2:	f7e6 fe4b 	bl	800028c <__adddf3>
 80195f6:	ec41 0b10 	vmov	d0, r0, r1
 80195fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195fe:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8019602:	f04f 37ff 	mov.w	r7, #4294967295
 8019606:	40df      	lsrs	r7, r3
 8019608:	4238      	tst	r0, r7
 801960a:	d0f4      	beq.n	80195f6 <floor+0x96>
 801960c:	a310      	add	r3, pc, #64	; (adr r3, 8019650 <floor+0xf0>)
 801960e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019612:	f7e6 fe3b 	bl	800028c <__adddf3>
 8019616:	2200      	movs	r2, #0
 8019618:	2300      	movs	r3, #0
 801961a:	f7e7 fa7d 	bl	8000b18 <__aeabi_dcmpgt>
 801961e:	2800      	cmp	r0, #0
 8019620:	d0c1      	beq.n	80195a6 <floor+0x46>
 8019622:	2c00      	cmp	r4, #0
 8019624:	da0a      	bge.n	801963c <floor+0xdc>
 8019626:	2e14      	cmp	r6, #20
 8019628:	d101      	bne.n	801962e <floor+0xce>
 801962a:	3401      	adds	r4, #1
 801962c:	e006      	b.n	801963c <floor+0xdc>
 801962e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019632:	2301      	movs	r3, #1
 8019634:	40b3      	lsls	r3, r6
 8019636:	441d      	add	r5, r3
 8019638:	45a8      	cmp	r8, r5
 801963a:	d8f6      	bhi.n	801962a <floor+0xca>
 801963c:	ea25 0507 	bic.w	r5, r5, r7
 8019640:	e7b1      	b.n	80195a6 <floor+0x46>
 8019642:	2500      	movs	r5, #0
 8019644:	462c      	mov	r4, r5
 8019646:	e7ae      	b.n	80195a6 <floor+0x46>
 8019648:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801964c:	e7ab      	b.n	80195a6 <floor+0x46>
 801964e:	bf00      	nop
 8019650:	8800759c 	.word	0x8800759c
 8019654:	7e37e43c 	.word	0x7e37e43c
 8019658:	bff00000 	.word	0xbff00000
 801965c:	000fffff 	.word	0x000fffff

08019660 <__kernel_cos>:
 8019660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019664:	ec57 6b10 	vmov	r6, r7, d0
 8019668:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801966c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8019670:	ed8d 1b00 	vstr	d1, [sp]
 8019674:	da07      	bge.n	8019686 <__kernel_cos+0x26>
 8019676:	ee10 0a10 	vmov	r0, s0
 801967a:	4639      	mov	r1, r7
 801967c:	f7e7 fa6c 	bl	8000b58 <__aeabi_d2iz>
 8019680:	2800      	cmp	r0, #0
 8019682:	f000 8088 	beq.w	8019796 <__kernel_cos+0x136>
 8019686:	4632      	mov	r2, r6
 8019688:	463b      	mov	r3, r7
 801968a:	4630      	mov	r0, r6
 801968c:	4639      	mov	r1, r7
 801968e:	f7e6 ffb3 	bl	80005f8 <__aeabi_dmul>
 8019692:	4b51      	ldr	r3, [pc, #324]	; (80197d8 <__kernel_cos+0x178>)
 8019694:	2200      	movs	r2, #0
 8019696:	4604      	mov	r4, r0
 8019698:	460d      	mov	r5, r1
 801969a:	f7e6 ffad 	bl	80005f8 <__aeabi_dmul>
 801969e:	a340      	add	r3, pc, #256	; (adr r3, 80197a0 <__kernel_cos+0x140>)
 80196a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196a4:	4682      	mov	sl, r0
 80196a6:	468b      	mov	fp, r1
 80196a8:	4620      	mov	r0, r4
 80196aa:	4629      	mov	r1, r5
 80196ac:	f7e6 ffa4 	bl	80005f8 <__aeabi_dmul>
 80196b0:	a33d      	add	r3, pc, #244	; (adr r3, 80197a8 <__kernel_cos+0x148>)
 80196b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196b6:	f7e6 fde9 	bl	800028c <__adddf3>
 80196ba:	4622      	mov	r2, r4
 80196bc:	462b      	mov	r3, r5
 80196be:	f7e6 ff9b 	bl	80005f8 <__aeabi_dmul>
 80196c2:	a33b      	add	r3, pc, #236	; (adr r3, 80197b0 <__kernel_cos+0x150>)
 80196c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196c8:	f7e6 fdde 	bl	8000288 <__aeabi_dsub>
 80196cc:	4622      	mov	r2, r4
 80196ce:	462b      	mov	r3, r5
 80196d0:	f7e6 ff92 	bl	80005f8 <__aeabi_dmul>
 80196d4:	a338      	add	r3, pc, #224	; (adr r3, 80197b8 <__kernel_cos+0x158>)
 80196d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196da:	f7e6 fdd7 	bl	800028c <__adddf3>
 80196de:	4622      	mov	r2, r4
 80196e0:	462b      	mov	r3, r5
 80196e2:	f7e6 ff89 	bl	80005f8 <__aeabi_dmul>
 80196e6:	a336      	add	r3, pc, #216	; (adr r3, 80197c0 <__kernel_cos+0x160>)
 80196e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196ec:	f7e6 fdcc 	bl	8000288 <__aeabi_dsub>
 80196f0:	4622      	mov	r2, r4
 80196f2:	462b      	mov	r3, r5
 80196f4:	f7e6 ff80 	bl	80005f8 <__aeabi_dmul>
 80196f8:	a333      	add	r3, pc, #204	; (adr r3, 80197c8 <__kernel_cos+0x168>)
 80196fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196fe:	f7e6 fdc5 	bl	800028c <__adddf3>
 8019702:	4622      	mov	r2, r4
 8019704:	462b      	mov	r3, r5
 8019706:	f7e6 ff77 	bl	80005f8 <__aeabi_dmul>
 801970a:	4622      	mov	r2, r4
 801970c:	462b      	mov	r3, r5
 801970e:	f7e6 ff73 	bl	80005f8 <__aeabi_dmul>
 8019712:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019716:	4604      	mov	r4, r0
 8019718:	460d      	mov	r5, r1
 801971a:	4630      	mov	r0, r6
 801971c:	4639      	mov	r1, r7
 801971e:	f7e6 ff6b 	bl	80005f8 <__aeabi_dmul>
 8019722:	460b      	mov	r3, r1
 8019724:	4602      	mov	r2, r0
 8019726:	4629      	mov	r1, r5
 8019728:	4620      	mov	r0, r4
 801972a:	f7e6 fdad 	bl	8000288 <__aeabi_dsub>
 801972e:	4b2b      	ldr	r3, [pc, #172]	; (80197dc <__kernel_cos+0x17c>)
 8019730:	4598      	cmp	r8, r3
 8019732:	4606      	mov	r6, r0
 8019734:	460f      	mov	r7, r1
 8019736:	dc10      	bgt.n	801975a <__kernel_cos+0xfa>
 8019738:	4602      	mov	r2, r0
 801973a:	460b      	mov	r3, r1
 801973c:	4650      	mov	r0, sl
 801973e:	4659      	mov	r1, fp
 8019740:	f7e6 fda2 	bl	8000288 <__aeabi_dsub>
 8019744:	460b      	mov	r3, r1
 8019746:	4926      	ldr	r1, [pc, #152]	; (80197e0 <__kernel_cos+0x180>)
 8019748:	4602      	mov	r2, r0
 801974a:	2000      	movs	r0, #0
 801974c:	f7e6 fd9c 	bl	8000288 <__aeabi_dsub>
 8019750:	ec41 0b10 	vmov	d0, r0, r1
 8019754:	b003      	add	sp, #12
 8019756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801975a:	4b22      	ldr	r3, [pc, #136]	; (80197e4 <__kernel_cos+0x184>)
 801975c:	4920      	ldr	r1, [pc, #128]	; (80197e0 <__kernel_cos+0x180>)
 801975e:	4598      	cmp	r8, r3
 8019760:	bfcc      	ite	gt
 8019762:	4d21      	ldrgt	r5, [pc, #132]	; (80197e8 <__kernel_cos+0x188>)
 8019764:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8019768:	2400      	movs	r4, #0
 801976a:	4622      	mov	r2, r4
 801976c:	462b      	mov	r3, r5
 801976e:	2000      	movs	r0, #0
 8019770:	f7e6 fd8a 	bl	8000288 <__aeabi_dsub>
 8019774:	4622      	mov	r2, r4
 8019776:	4680      	mov	r8, r0
 8019778:	4689      	mov	r9, r1
 801977a:	462b      	mov	r3, r5
 801977c:	4650      	mov	r0, sl
 801977e:	4659      	mov	r1, fp
 8019780:	f7e6 fd82 	bl	8000288 <__aeabi_dsub>
 8019784:	4632      	mov	r2, r6
 8019786:	463b      	mov	r3, r7
 8019788:	f7e6 fd7e 	bl	8000288 <__aeabi_dsub>
 801978c:	4602      	mov	r2, r0
 801978e:	460b      	mov	r3, r1
 8019790:	4640      	mov	r0, r8
 8019792:	4649      	mov	r1, r9
 8019794:	e7da      	b.n	801974c <__kernel_cos+0xec>
 8019796:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80197d0 <__kernel_cos+0x170>
 801979a:	e7db      	b.n	8019754 <__kernel_cos+0xf4>
 801979c:	f3af 8000 	nop.w
 80197a0:	be8838d4 	.word	0xbe8838d4
 80197a4:	bda8fae9 	.word	0xbda8fae9
 80197a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80197ac:	3e21ee9e 	.word	0x3e21ee9e
 80197b0:	809c52ad 	.word	0x809c52ad
 80197b4:	3e927e4f 	.word	0x3e927e4f
 80197b8:	19cb1590 	.word	0x19cb1590
 80197bc:	3efa01a0 	.word	0x3efa01a0
 80197c0:	16c15177 	.word	0x16c15177
 80197c4:	3f56c16c 	.word	0x3f56c16c
 80197c8:	5555554c 	.word	0x5555554c
 80197cc:	3fa55555 	.word	0x3fa55555
 80197d0:	00000000 	.word	0x00000000
 80197d4:	3ff00000 	.word	0x3ff00000
 80197d8:	3fe00000 	.word	0x3fe00000
 80197dc:	3fd33332 	.word	0x3fd33332
 80197e0:	3ff00000 	.word	0x3ff00000
 80197e4:	3fe90000 	.word	0x3fe90000
 80197e8:	3fd20000 	.word	0x3fd20000
 80197ec:	00000000 	.word	0x00000000

080197f0 <__kernel_sin>:
 80197f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197f4:	ed2d 8b04 	vpush	{d8-d9}
 80197f8:	eeb0 8a41 	vmov.f32	s16, s2
 80197fc:	eef0 8a61 	vmov.f32	s17, s3
 8019800:	ec55 4b10 	vmov	r4, r5, d0
 8019804:	b083      	sub	sp, #12
 8019806:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801980a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801980e:	9001      	str	r0, [sp, #4]
 8019810:	da06      	bge.n	8019820 <__kernel_sin+0x30>
 8019812:	ee10 0a10 	vmov	r0, s0
 8019816:	4629      	mov	r1, r5
 8019818:	f7e7 f99e 	bl	8000b58 <__aeabi_d2iz>
 801981c:	2800      	cmp	r0, #0
 801981e:	d051      	beq.n	80198c4 <__kernel_sin+0xd4>
 8019820:	4622      	mov	r2, r4
 8019822:	462b      	mov	r3, r5
 8019824:	4620      	mov	r0, r4
 8019826:	4629      	mov	r1, r5
 8019828:	f7e6 fee6 	bl	80005f8 <__aeabi_dmul>
 801982c:	4682      	mov	sl, r0
 801982e:	468b      	mov	fp, r1
 8019830:	4602      	mov	r2, r0
 8019832:	460b      	mov	r3, r1
 8019834:	4620      	mov	r0, r4
 8019836:	4629      	mov	r1, r5
 8019838:	f7e6 fede 	bl	80005f8 <__aeabi_dmul>
 801983c:	a341      	add	r3, pc, #260	; (adr r3, 8019944 <__kernel_sin+0x154>)
 801983e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019842:	4680      	mov	r8, r0
 8019844:	4689      	mov	r9, r1
 8019846:	4650      	mov	r0, sl
 8019848:	4659      	mov	r1, fp
 801984a:	f7e6 fed5 	bl	80005f8 <__aeabi_dmul>
 801984e:	a33f      	add	r3, pc, #252	; (adr r3, 801994c <__kernel_sin+0x15c>)
 8019850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019854:	f7e6 fd18 	bl	8000288 <__aeabi_dsub>
 8019858:	4652      	mov	r2, sl
 801985a:	465b      	mov	r3, fp
 801985c:	f7e6 fecc 	bl	80005f8 <__aeabi_dmul>
 8019860:	a33c      	add	r3, pc, #240	; (adr r3, 8019954 <__kernel_sin+0x164>)
 8019862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019866:	f7e6 fd11 	bl	800028c <__adddf3>
 801986a:	4652      	mov	r2, sl
 801986c:	465b      	mov	r3, fp
 801986e:	f7e6 fec3 	bl	80005f8 <__aeabi_dmul>
 8019872:	a33a      	add	r3, pc, #232	; (adr r3, 801995c <__kernel_sin+0x16c>)
 8019874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019878:	f7e6 fd06 	bl	8000288 <__aeabi_dsub>
 801987c:	4652      	mov	r2, sl
 801987e:	465b      	mov	r3, fp
 8019880:	f7e6 feba 	bl	80005f8 <__aeabi_dmul>
 8019884:	a337      	add	r3, pc, #220	; (adr r3, 8019964 <__kernel_sin+0x174>)
 8019886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801988a:	f7e6 fcff 	bl	800028c <__adddf3>
 801988e:	9b01      	ldr	r3, [sp, #4]
 8019890:	4606      	mov	r6, r0
 8019892:	460f      	mov	r7, r1
 8019894:	b9eb      	cbnz	r3, 80198d2 <__kernel_sin+0xe2>
 8019896:	4602      	mov	r2, r0
 8019898:	460b      	mov	r3, r1
 801989a:	4650      	mov	r0, sl
 801989c:	4659      	mov	r1, fp
 801989e:	f7e6 feab 	bl	80005f8 <__aeabi_dmul>
 80198a2:	a325      	add	r3, pc, #148	; (adr r3, 8019938 <__kernel_sin+0x148>)
 80198a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198a8:	f7e6 fcee 	bl	8000288 <__aeabi_dsub>
 80198ac:	4642      	mov	r2, r8
 80198ae:	464b      	mov	r3, r9
 80198b0:	f7e6 fea2 	bl	80005f8 <__aeabi_dmul>
 80198b4:	4602      	mov	r2, r0
 80198b6:	460b      	mov	r3, r1
 80198b8:	4620      	mov	r0, r4
 80198ba:	4629      	mov	r1, r5
 80198bc:	f7e6 fce6 	bl	800028c <__adddf3>
 80198c0:	4604      	mov	r4, r0
 80198c2:	460d      	mov	r5, r1
 80198c4:	ec45 4b10 	vmov	d0, r4, r5
 80198c8:	b003      	add	sp, #12
 80198ca:	ecbd 8b04 	vpop	{d8-d9}
 80198ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198d2:	4b1b      	ldr	r3, [pc, #108]	; (8019940 <__kernel_sin+0x150>)
 80198d4:	ec51 0b18 	vmov	r0, r1, d8
 80198d8:	2200      	movs	r2, #0
 80198da:	f7e6 fe8d 	bl	80005f8 <__aeabi_dmul>
 80198de:	4632      	mov	r2, r6
 80198e0:	ec41 0b19 	vmov	d9, r0, r1
 80198e4:	463b      	mov	r3, r7
 80198e6:	4640      	mov	r0, r8
 80198e8:	4649      	mov	r1, r9
 80198ea:	f7e6 fe85 	bl	80005f8 <__aeabi_dmul>
 80198ee:	4602      	mov	r2, r0
 80198f0:	460b      	mov	r3, r1
 80198f2:	ec51 0b19 	vmov	r0, r1, d9
 80198f6:	f7e6 fcc7 	bl	8000288 <__aeabi_dsub>
 80198fa:	4652      	mov	r2, sl
 80198fc:	465b      	mov	r3, fp
 80198fe:	f7e6 fe7b 	bl	80005f8 <__aeabi_dmul>
 8019902:	ec53 2b18 	vmov	r2, r3, d8
 8019906:	f7e6 fcbf 	bl	8000288 <__aeabi_dsub>
 801990a:	a30b      	add	r3, pc, #44	; (adr r3, 8019938 <__kernel_sin+0x148>)
 801990c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019910:	4606      	mov	r6, r0
 8019912:	460f      	mov	r7, r1
 8019914:	4640      	mov	r0, r8
 8019916:	4649      	mov	r1, r9
 8019918:	f7e6 fe6e 	bl	80005f8 <__aeabi_dmul>
 801991c:	4602      	mov	r2, r0
 801991e:	460b      	mov	r3, r1
 8019920:	4630      	mov	r0, r6
 8019922:	4639      	mov	r1, r7
 8019924:	f7e6 fcb2 	bl	800028c <__adddf3>
 8019928:	4602      	mov	r2, r0
 801992a:	460b      	mov	r3, r1
 801992c:	4620      	mov	r0, r4
 801992e:	4629      	mov	r1, r5
 8019930:	f7e6 fcaa 	bl	8000288 <__aeabi_dsub>
 8019934:	e7c4      	b.n	80198c0 <__kernel_sin+0xd0>
 8019936:	bf00      	nop
 8019938:	55555549 	.word	0x55555549
 801993c:	3fc55555 	.word	0x3fc55555
 8019940:	3fe00000 	.word	0x3fe00000
 8019944:	5acfd57c 	.word	0x5acfd57c
 8019948:	3de5d93a 	.word	0x3de5d93a
 801994c:	8a2b9ceb 	.word	0x8a2b9ceb
 8019950:	3e5ae5e6 	.word	0x3e5ae5e6
 8019954:	57b1fe7d 	.word	0x57b1fe7d
 8019958:	3ec71de3 	.word	0x3ec71de3
 801995c:	19c161d5 	.word	0x19c161d5
 8019960:	3f2a01a0 	.word	0x3f2a01a0
 8019964:	1110f8a6 	.word	0x1110f8a6
 8019968:	3f811111 	.word	0x3f811111
 801996c:	00000000 	.word	0x00000000

08019970 <__ieee754_rem_pio2>:
 8019970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019974:	ed2d 8b02 	vpush	{d8}
 8019978:	ec55 4b10 	vmov	r4, r5, d0
 801997c:	4bca      	ldr	r3, [pc, #808]	; (8019ca8 <__ieee754_rem_pio2+0x338>)
 801997e:	b08b      	sub	sp, #44	; 0x2c
 8019980:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8019984:	4598      	cmp	r8, r3
 8019986:	4682      	mov	sl, r0
 8019988:	9502      	str	r5, [sp, #8]
 801998a:	dc08      	bgt.n	801999e <__ieee754_rem_pio2+0x2e>
 801998c:	2200      	movs	r2, #0
 801998e:	2300      	movs	r3, #0
 8019990:	ed80 0b00 	vstr	d0, [r0]
 8019994:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019998:	f04f 0b00 	mov.w	fp, #0
 801999c:	e028      	b.n	80199f0 <__ieee754_rem_pio2+0x80>
 801999e:	4bc3      	ldr	r3, [pc, #780]	; (8019cac <__ieee754_rem_pio2+0x33c>)
 80199a0:	4598      	cmp	r8, r3
 80199a2:	dc78      	bgt.n	8019a96 <__ieee754_rem_pio2+0x126>
 80199a4:	9b02      	ldr	r3, [sp, #8]
 80199a6:	4ec2      	ldr	r6, [pc, #776]	; (8019cb0 <__ieee754_rem_pio2+0x340>)
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	ee10 0a10 	vmov	r0, s0
 80199ae:	a3b0      	add	r3, pc, #704	; (adr r3, 8019c70 <__ieee754_rem_pio2+0x300>)
 80199b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199b4:	4629      	mov	r1, r5
 80199b6:	dd39      	ble.n	8019a2c <__ieee754_rem_pio2+0xbc>
 80199b8:	f7e6 fc66 	bl	8000288 <__aeabi_dsub>
 80199bc:	45b0      	cmp	r8, r6
 80199be:	4604      	mov	r4, r0
 80199c0:	460d      	mov	r5, r1
 80199c2:	d01b      	beq.n	80199fc <__ieee754_rem_pio2+0x8c>
 80199c4:	a3ac      	add	r3, pc, #688	; (adr r3, 8019c78 <__ieee754_rem_pio2+0x308>)
 80199c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199ca:	f7e6 fc5d 	bl	8000288 <__aeabi_dsub>
 80199ce:	4602      	mov	r2, r0
 80199d0:	460b      	mov	r3, r1
 80199d2:	e9ca 2300 	strd	r2, r3, [sl]
 80199d6:	4620      	mov	r0, r4
 80199d8:	4629      	mov	r1, r5
 80199da:	f7e6 fc55 	bl	8000288 <__aeabi_dsub>
 80199de:	a3a6      	add	r3, pc, #664	; (adr r3, 8019c78 <__ieee754_rem_pio2+0x308>)
 80199e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199e4:	f7e6 fc50 	bl	8000288 <__aeabi_dsub>
 80199e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80199ec:	f04f 0b01 	mov.w	fp, #1
 80199f0:	4658      	mov	r0, fp
 80199f2:	b00b      	add	sp, #44	; 0x2c
 80199f4:	ecbd 8b02 	vpop	{d8}
 80199f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199fc:	a3a0      	add	r3, pc, #640	; (adr r3, 8019c80 <__ieee754_rem_pio2+0x310>)
 80199fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a02:	f7e6 fc41 	bl	8000288 <__aeabi_dsub>
 8019a06:	a3a0      	add	r3, pc, #640	; (adr r3, 8019c88 <__ieee754_rem_pio2+0x318>)
 8019a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a0c:	4604      	mov	r4, r0
 8019a0e:	460d      	mov	r5, r1
 8019a10:	f7e6 fc3a 	bl	8000288 <__aeabi_dsub>
 8019a14:	4602      	mov	r2, r0
 8019a16:	460b      	mov	r3, r1
 8019a18:	e9ca 2300 	strd	r2, r3, [sl]
 8019a1c:	4620      	mov	r0, r4
 8019a1e:	4629      	mov	r1, r5
 8019a20:	f7e6 fc32 	bl	8000288 <__aeabi_dsub>
 8019a24:	a398      	add	r3, pc, #608	; (adr r3, 8019c88 <__ieee754_rem_pio2+0x318>)
 8019a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a2a:	e7db      	b.n	80199e4 <__ieee754_rem_pio2+0x74>
 8019a2c:	f7e6 fc2e 	bl	800028c <__adddf3>
 8019a30:	45b0      	cmp	r8, r6
 8019a32:	4604      	mov	r4, r0
 8019a34:	460d      	mov	r5, r1
 8019a36:	d016      	beq.n	8019a66 <__ieee754_rem_pio2+0xf6>
 8019a38:	a38f      	add	r3, pc, #572	; (adr r3, 8019c78 <__ieee754_rem_pio2+0x308>)
 8019a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a3e:	f7e6 fc25 	bl	800028c <__adddf3>
 8019a42:	4602      	mov	r2, r0
 8019a44:	460b      	mov	r3, r1
 8019a46:	e9ca 2300 	strd	r2, r3, [sl]
 8019a4a:	4620      	mov	r0, r4
 8019a4c:	4629      	mov	r1, r5
 8019a4e:	f7e6 fc1b 	bl	8000288 <__aeabi_dsub>
 8019a52:	a389      	add	r3, pc, #548	; (adr r3, 8019c78 <__ieee754_rem_pio2+0x308>)
 8019a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a58:	f7e6 fc18 	bl	800028c <__adddf3>
 8019a5c:	f04f 3bff 	mov.w	fp, #4294967295
 8019a60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019a64:	e7c4      	b.n	80199f0 <__ieee754_rem_pio2+0x80>
 8019a66:	a386      	add	r3, pc, #536	; (adr r3, 8019c80 <__ieee754_rem_pio2+0x310>)
 8019a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a6c:	f7e6 fc0e 	bl	800028c <__adddf3>
 8019a70:	a385      	add	r3, pc, #532	; (adr r3, 8019c88 <__ieee754_rem_pio2+0x318>)
 8019a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a76:	4604      	mov	r4, r0
 8019a78:	460d      	mov	r5, r1
 8019a7a:	f7e6 fc07 	bl	800028c <__adddf3>
 8019a7e:	4602      	mov	r2, r0
 8019a80:	460b      	mov	r3, r1
 8019a82:	e9ca 2300 	strd	r2, r3, [sl]
 8019a86:	4620      	mov	r0, r4
 8019a88:	4629      	mov	r1, r5
 8019a8a:	f7e6 fbfd 	bl	8000288 <__aeabi_dsub>
 8019a8e:	a37e      	add	r3, pc, #504	; (adr r3, 8019c88 <__ieee754_rem_pio2+0x318>)
 8019a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a94:	e7e0      	b.n	8019a58 <__ieee754_rem_pio2+0xe8>
 8019a96:	4b87      	ldr	r3, [pc, #540]	; (8019cb4 <__ieee754_rem_pio2+0x344>)
 8019a98:	4598      	cmp	r8, r3
 8019a9a:	f300 80d8 	bgt.w	8019c4e <__ieee754_rem_pio2+0x2de>
 8019a9e:	f000 f9a1 	bl	8019de4 <fabs>
 8019aa2:	ec55 4b10 	vmov	r4, r5, d0
 8019aa6:	ee10 0a10 	vmov	r0, s0
 8019aaa:	a379      	add	r3, pc, #484	; (adr r3, 8019c90 <__ieee754_rem_pio2+0x320>)
 8019aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ab0:	4629      	mov	r1, r5
 8019ab2:	f7e6 fda1 	bl	80005f8 <__aeabi_dmul>
 8019ab6:	4b80      	ldr	r3, [pc, #512]	; (8019cb8 <__ieee754_rem_pio2+0x348>)
 8019ab8:	2200      	movs	r2, #0
 8019aba:	f7e6 fbe7 	bl	800028c <__adddf3>
 8019abe:	f7e7 f84b 	bl	8000b58 <__aeabi_d2iz>
 8019ac2:	4683      	mov	fp, r0
 8019ac4:	f7e6 fd2e 	bl	8000524 <__aeabi_i2d>
 8019ac8:	4602      	mov	r2, r0
 8019aca:	460b      	mov	r3, r1
 8019acc:	ec43 2b18 	vmov	d8, r2, r3
 8019ad0:	a367      	add	r3, pc, #412	; (adr r3, 8019c70 <__ieee754_rem_pio2+0x300>)
 8019ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ad6:	f7e6 fd8f 	bl	80005f8 <__aeabi_dmul>
 8019ada:	4602      	mov	r2, r0
 8019adc:	460b      	mov	r3, r1
 8019ade:	4620      	mov	r0, r4
 8019ae0:	4629      	mov	r1, r5
 8019ae2:	f7e6 fbd1 	bl	8000288 <__aeabi_dsub>
 8019ae6:	a364      	add	r3, pc, #400	; (adr r3, 8019c78 <__ieee754_rem_pio2+0x308>)
 8019ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019aec:	4606      	mov	r6, r0
 8019aee:	460f      	mov	r7, r1
 8019af0:	ec51 0b18 	vmov	r0, r1, d8
 8019af4:	f7e6 fd80 	bl	80005f8 <__aeabi_dmul>
 8019af8:	f1bb 0f1f 	cmp.w	fp, #31
 8019afc:	4604      	mov	r4, r0
 8019afe:	460d      	mov	r5, r1
 8019b00:	dc0d      	bgt.n	8019b1e <__ieee754_rem_pio2+0x1ae>
 8019b02:	4b6e      	ldr	r3, [pc, #440]	; (8019cbc <__ieee754_rem_pio2+0x34c>)
 8019b04:	f10b 32ff 	add.w	r2, fp, #4294967295
 8019b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019b0c:	4543      	cmp	r3, r8
 8019b0e:	d006      	beq.n	8019b1e <__ieee754_rem_pio2+0x1ae>
 8019b10:	4622      	mov	r2, r4
 8019b12:	462b      	mov	r3, r5
 8019b14:	4630      	mov	r0, r6
 8019b16:	4639      	mov	r1, r7
 8019b18:	f7e6 fbb6 	bl	8000288 <__aeabi_dsub>
 8019b1c:	e00e      	b.n	8019b3c <__ieee754_rem_pio2+0x1cc>
 8019b1e:	462b      	mov	r3, r5
 8019b20:	4622      	mov	r2, r4
 8019b22:	4630      	mov	r0, r6
 8019b24:	4639      	mov	r1, r7
 8019b26:	f7e6 fbaf 	bl	8000288 <__aeabi_dsub>
 8019b2a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019b2e:	9303      	str	r3, [sp, #12]
 8019b30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019b34:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8019b38:	2b10      	cmp	r3, #16
 8019b3a:	dc02      	bgt.n	8019b42 <__ieee754_rem_pio2+0x1d2>
 8019b3c:	e9ca 0100 	strd	r0, r1, [sl]
 8019b40:	e039      	b.n	8019bb6 <__ieee754_rem_pio2+0x246>
 8019b42:	a34f      	add	r3, pc, #316	; (adr r3, 8019c80 <__ieee754_rem_pio2+0x310>)
 8019b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b48:	ec51 0b18 	vmov	r0, r1, d8
 8019b4c:	f7e6 fd54 	bl	80005f8 <__aeabi_dmul>
 8019b50:	4604      	mov	r4, r0
 8019b52:	460d      	mov	r5, r1
 8019b54:	4602      	mov	r2, r0
 8019b56:	460b      	mov	r3, r1
 8019b58:	4630      	mov	r0, r6
 8019b5a:	4639      	mov	r1, r7
 8019b5c:	f7e6 fb94 	bl	8000288 <__aeabi_dsub>
 8019b60:	4602      	mov	r2, r0
 8019b62:	460b      	mov	r3, r1
 8019b64:	4680      	mov	r8, r0
 8019b66:	4689      	mov	r9, r1
 8019b68:	4630      	mov	r0, r6
 8019b6a:	4639      	mov	r1, r7
 8019b6c:	f7e6 fb8c 	bl	8000288 <__aeabi_dsub>
 8019b70:	4622      	mov	r2, r4
 8019b72:	462b      	mov	r3, r5
 8019b74:	f7e6 fb88 	bl	8000288 <__aeabi_dsub>
 8019b78:	a343      	add	r3, pc, #268	; (adr r3, 8019c88 <__ieee754_rem_pio2+0x318>)
 8019b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b7e:	4604      	mov	r4, r0
 8019b80:	460d      	mov	r5, r1
 8019b82:	ec51 0b18 	vmov	r0, r1, d8
 8019b86:	f7e6 fd37 	bl	80005f8 <__aeabi_dmul>
 8019b8a:	4622      	mov	r2, r4
 8019b8c:	462b      	mov	r3, r5
 8019b8e:	f7e6 fb7b 	bl	8000288 <__aeabi_dsub>
 8019b92:	4602      	mov	r2, r0
 8019b94:	460b      	mov	r3, r1
 8019b96:	4604      	mov	r4, r0
 8019b98:	460d      	mov	r5, r1
 8019b9a:	4640      	mov	r0, r8
 8019b9c:	4649      	mov	r1, r9
 8019b9e:	f7e6 fb73 	bl	8000288 <__aeabi_dsub>
 8019ba2:	9a03      	ldr	r2, [sp, #12]
 8019ba4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019ba8:	1ad3      	subs	r3, r2, r3
 8019baa:	2b31      	cmp	r3, #49	; 0x31
 8019bac:	dc24      	bgt.n	8019bf8 <__ieee754_rem_pio2+0x288>
 8019bae:	e9ca 0100 	strd	r0, r1, [sl]
 8019bb2:	4646      	mov	r6, r8
 8019bb4:	464f      	mov	r7, r9
 8019bb6:	e9da 8900 	ldrd	r8, r9, [sl]
 8019bba:	4630      	mov	r0, r6
 8019bbc:	4642      	mov	r2, r8
 8019bbe:	464b      	mov	r3, r9
 8019bc0:	4639      	mov	r1, r7
 8019bc2:	f7e6 fb61 	bl	8000288 <__aeabi_dsub>
 8019bc6:	462b      	mov	r3, r5
 8019bc8:	4622      	mov	r2, r4
 8019bca:	f7e6 fb5d 	bl	8000288 <__aeabi_dsub>
 8019bce:	9b02      	ldr	r3, [sp, #8]
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019bd6:	f6bf af0b 	bge.w	80199f0 <__ieee754_rem_pio2+0x80>
 8019bda:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019bde:	f8ca 3004 	str.w	r3, [sl, #4]
 8019be2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019be6:	f8ca 8000 	str.w	r8, [sl]
 8019bea:	f8ca 0008 	str.w	r0, [sl, #8]
 8019bee:	f8ca 300c 	str.w	r3, [sl, #12]
 8019bf2:	f1cb 0b00 	rsb	fp, fp, #0
 8019bf6:	e6fb      	b.n	80199f0 <__ieee754_rem_pio2+0x80>
 8019bf8:	a327      	add	r3, pc, #156	; (adr r3, 8019c98 <__ieee754_rem_pio2+0x328>)
 8019bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bfe:	ec51 0b18 	vmov	r0, r1, d8
 8019c02:	f7e6 fcf9 	bl	80005f8 <__aeabi_dmul>
 8019c06:	4604      	mov	r4, r0
 8019c08:	460d      	mov	r5, r1
 8019c0a:	4602      	mov	r2, r0
 8019c0c:	460b      	mov	r3, r1
 8019c0e:	4640      	mov	r0, r8
 8019c10:	4649      	mov	r1, r9
 8019c12:	f7e6 fb39 	bl	8000288 <__aeabi_dsub>
 8019c16:	4602      	mov	r2, r0
 8019c18:	460b      	mov	r3, r1
 8019c1a:	4606      	mov	r6, r0
 8019c1c:	460f      	mov	r7, r1
 8019c1e:	4640      	mov	r0, r8
 8019c20:	4649      	mov	r1, r9
 8019c22:	f7e6 fb31 	bl	8000288 <__aeabi_dsub>
 8019c26:	4622      	mov	r2, r4
 8019c28:	462b      	mov	r3, r5
 8019c2a:	f7e6 fb2d 	bl	8000288 <__aeabi_dsub>
 8019c2e:	a31c      	add	r3, pc, #112	; (adr r3, 8019ca0 <__ieee754_rem_pio2+0x330>)
 8019c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c34:	4604      	mov	r4, r0
 8019c36:	460d      	mov	r5, r1
 8019c38:	ec51 0b18 	vmov	r0, r1, d8
 8019c3c:	f7e6 fcdc 	bl	80005f8 <__aeabi_dmul>
 8019c40:	4622      	mov	r2, r4
 8019c42:	462b      	mov	r3, r5
 8019c44:	f7e6 fb20 	bl	8000288 <__aeabi_dsub>
 8019c48:	4604      	mov	r4, r0
 8019c4a:	460d      	mov	r5, r1
 8019c4c:	e760      	b.n	8019b10 <__ieee754_rem_pio2+0x1a0>
 8019c4e:	4b1c      	ldr	r3, [pc, #112]	; (8019cc0 <__ieee754_rem_pio2+0x350>)
 8019c50:	4598      	cmp	r8, r3
 8019c52:	dd37      	ble.n	8019cc4 <__ieee754_rem_pio2+0x354>
 8019c54:	ee10 2a10 	vmov	r2, s0
 8019c58:	462b      	mov	r3, r5
 8019c5a:	4620      	mov	r0, r4
 8019c5c:	4629      	mov	r1, r5
 8019c5e:	f7e6 fb13 	bl	8000288 <__aeabi_dsub>
 8019c62:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019c66:	e9ca 0100 	strd	r0, r1, [sl]
 8019c6a:	e695      	b.n	8019998 <__ieee754_rem_pio2+0x28>
 8019c6c:	f3af 8000 	nop.w
 8019c70:	54400000 	.word	0x54400000
 8019c74:	3ff921fb 	.word	0x3ff921fb
 8019c78:	1a626331 	.word	0x1a626331
 8019c7c:	3dd0b461 	.word	0x3dd0b461
 8019c80:	1a600000 	.word	0x1a600000
 8019c84:	3dd0b461 	.word	0x3dd0b461
 8019c88:	2e037073 	.word	0x2e037073
 8019c8c:	3ba3198a 	.word	0x3ba3198a
 8019c90:	6dc9c883 	.word	0x6dc9c883
 8019c94:	3fe45f30 	.word	0x3fe45f30
 8019c98:	2e000000 	.word	0x2e000000
 8019c9c:	3ba3198a 	.word	0x3ba3198a
 8019ca0:	252049c1 	.word	0x252049c1
 8019ca4:	397b839a 	.word	0x397b839a
 8019ca8:	3fe921fb 	.word	0x3fe921fb
 8019cac:	4002d97b 	.word	0x4002d97b
 8019cb0:	3ff921fb 	.word	0x3ff921fb
 8019cb4:	413921fb 	.word	0x413921fb
 8019cb8:	3fe00000 	.word	0x3fe00000
 8019cbc:	0801d178 	.word	0x0801d178
 8019cc0:	7fefffff 	.word	0x7fefffff
 8019cc4:	ea4f 5628 	mov.w	r6, r8, asr #20
 8019cc8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8019ccc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8019cd0:	4620      	mov	r0, r4
 8019cd2:	460d      	mov	r5, r1
 8019cd4:	f7e6 ff40 	bl	8000b58 <__aeabi_d2iz>
 8019cd8:	f7e6 fc24 	bl	8000524 <__aeabi_i2d>
 8019cdc:	4602      	mov	r2, r0
 8019cde:	460b      	mov	r3, r1
 8019ce0:	4620      	mov	r0, r4
 8019ce2:	4629      	mov	r1, r5
 8019ce4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019ce8:	f7e6 face 	bl	8000288 <__aeabi_dsub>
 8019cec:	4b21      	ldr	r3, [pc, #132]	; (8019d74 <__ieee754_rem_pio2+0x404>)
 8019cee:	2200      	movs	r2, #0
 8019cf0:	f7e6 fc82 	bl	80005f8 <__aeabi_dmul>
 8019cf4:	460d      	mov	r5, r1
 8019cf6:	4604      	mov	r4, r0
 8019cf8:	f7e6 ff2e 	bl	8000b58 <__aeabi_d2iz>
 8019cfc:	f7e6 fc12 	bl	8000524 <__aeabi_i2d>
 8019d00:	4602      	mov	r2, r0
 8019d02:	460b      	mov	r3, r1
 8019d04:	4620      	mov	r0, r4
 8019d06:	4629      	mov	r1, r5
 8019d08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019d0c:	f7e6 fabc 	bl	8000288 <__aeabi_dsub>
 8019d10:	4b18      	ldr	r3, [pc, #96]	; (8019d74 <__ieee754_rem_pio2+0x404>)
 8019d12:	2200      	movs	r2, #0
 8019d14:	f7e6 fc70 	bl	80005f8 <__aeabi_dmul>
 8019d18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019d1c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8019d20:	2703      	movs	r7, #3
 8019d22:	2400      	movs	r4, #0
 8019d24:	2500      	movs	r5, #0
 8019d26:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8019d2a:	4622      	mov	r2, r4
 8019d2c:	462b      	mov	r3, r5
 8019d2e:	46b9      	mov	r9, r7
 8019d30:	3f01      	subs	r7, #1
 8019d32:	f7e6 fec9 	bl	8000ac8 <__aeabi_dcmpeq>
 8019d36:	2800      	cmp	r0, #0
 8019d38:	d1f5      	bne.n	8019d26 <__ieee754_rem_pio2+0x3b6>
 8019d3a:	4b0f      	ldr	r3, [pc, #60]	; (8019d78 <__ieee754_rem_pio2+0x408>)
 8019d3c:	9301      	str	r3, [sp, #4]
 8019d3e:	2302      	movs	r3, #2
 8019d40:	9300      	str	r3, [sp, #0]
 8019d42:	4632      	mov	r2, r6
 8019d44:	464b      	mov	r3, r9
 8019d46:	4651      	mov	r1, sl
 8019d48:	a804      	add	r0, sp, #16
 8019d4a:	f000 faa1 	bl	801a290 <__kernel_rem_pio2>
 8019d4e:	9b02      	ldr	r3, [sp, #8]
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	4683      	mov	fp, r0
 8019d54:	f6bf ae4c 	bge.w	80199f0 <__ieee754_rem_pio2+0x80>
 8019d58:	e9da 2100 	ldrd	r2, r1, [sl]
 8019d5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019d60:	e9ca 2300 	strd	r2, r3, [sl]
 8019d64:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8019d68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019d6c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8019d70:	e73f      	b.n	8019bf2 <__ieee754_rem_pio2+0x282>
 8019d72:	bf00      	nop
 8019d74:	41700000 	.word	0x41700000
 8019d78:	0801d1f8 	.word	0x0801d1f8

08019d7c <acos>:
 8019d7c:	b538      	push	{r3, r4, r5, lr}
 8019d7e:	ed2d 8b02 	vpush	{d8}
 8019d82:	ec55 4b10 	vmov	r4, r5, d0
 8019d86:	f000 fdd3 	bl	801a930 <__ieee754_acos>
 8019d8a:	4622      	mov	r2, r4
 8019d8c:	462b      	mov	r3, r5
 8019d8e:	4620      	mov	r0, r4
 8019d90:	4629      	mov	r1, r5
 8019d92:	eeb0 8a40 	vmov.f32	s16, s0
 8019d96:	eef0 8a60 	vmov.f32	s17, s1
 8019d9a:	f7e6 fec7 	bl	8000b2c <__aeabi_dcmpun>
 8019d9e:	b9a8      	cbnz	r0, 8019dcc <acos+0x50>
 8019da0:	ec45 4b10 	vmov	d0, r4, r5
 8019da4:	f000 f81e 	bl	8019de4 <fabs>
 8019da8:	4b0c      	ldr	r3, [pc, #48]	; (8019ddc <acos+0x60>)
 8019daa:	ec51 0b10 	vmov	r0, r1, d0
 8019dae:	2200      	movs	r2, #0
 8019db0:	f7e6 feb2 	bl	8000b18 <__aeabi_dcmpgt>
 8019db4:	b150      	cbz	r0, 8019dcc <acos+0x50>
 8019db6:	f7fc fe07 	bl	80169c8 <__errno>
 8019dba:	ecbd 8b02 	vpop	{d8}
 8019dbe:	2321      	movs	r3, #33	; 0x21
 8019dc0:	6003      	str	r3, [r0, #0]
 8019dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019dc6:	4806      	ldr	r0, [pc, #24]	; (8019de0 <acos+0x64>)
 8019dc8:	f7fc be42 	b.w	8016a50 <nan>
 8019dcc:	eeb0 0a48 	vmov.f32	s0, s16
 8019dd0:	eef0 0a68 	vmov.f32	s1, s17
 8019dd4:	ecbd 8b02 	vpop	{d8}
 8019dd8:	bd38      	pop	{r3, r4, r5, pc}
 8019dda:	bf00      	nop
 8019ddc:	3ff00000 	.word	0x3ff00000
 8019de0:	0801cf36 	.word	0x0801cf36

08019de4 <fabs>:
 8019de4:	ec51 0b10 	vmov	r0, r1, d0
 8019de8:	ee10 2a10 	vmov	r2, s0
 8019dec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019df0:	ec43 2b10 	vmov	d0, r2, r3
 8019df4:	4770      	bx	lr
	...

08019df8 <__ieee754_expf>:
 8019df8:	ee10 2a10 	vmov	r2, s0
 8019dfc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8019e00:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019e04:	d902      	bls.n	8019e0c <__ieee754_expf+0x14>
 8019e06:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019e0a:	4770      	bx	lr
 8019e0c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8019e10:	d106      	bne.n	8019e20 <__ieee754_expf+0x28>
 8019e12:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8019f4c <__ieee754_expf+0x154>
 8019e16:	2900      	cmp	r1, #0
 8019e18:	bf18      	it	ne
 8019e1a:	eeb0 0a67 	vmovne.f32	s0, s15
 8019e1e:	4770      	bx	lr
 8019e20:	484b      	ldr	r0, [pc, #300]	; (8019f50 <__ieee754_expf+0x158>)
 8019e22:	4282      	cmp	r2, r0
 8019e24:	dd02      	ble.n	8019e2c <__ieee754_expf+0x34>
 8019e26:	2000      	movs	r0, #0
 8019e28:	f000 b950 	b.w	801a0cc <__math_oflowf>
 8019e2c:	2a00      	cmp	r2, #0
 8019e2e:	da05      	bge.n	8019e3c <__ieee754_expf+0x44>
 8019e30:	4a48      	ldr	r2, [pc, #288]	; (8019f54 <__ieee754_expf+0x15c>)
 8019e32:	4293      	cmp	r3, r2
 8019e34:	d902      	bls.n	8019e3c <__ieee754_expf+0x44>
 8019e36:	2000      	movs	r0, #0
 8019e38:	f000 b942 	b.w	801a0c0 <__math_uflowf>
 8019e3c:	4a46      	ldr	r2, [pc, #280]	; (8019f58 <__ieee754_expf+0x160>)
 8019e3e:	4293      	cmp	r3, r2
 8019e40:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8019e44:	d952      	bls.n	8019eec <__ieee754_expf+0xf4>
 8019e46:	4a45      	ldr	r2, [pc, #276]	; (8019f5c <__ieee754_expf+0x164>)
 8019e48:	4293      	cmp	r3, r2
 8019e4a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8019e4e:	d834      	bhi.n	8019eba <__ieee754_expf+0xc2>
 8019e50:	4b43      	ldr	r3, [pc, #268]	; (8019f60 <__ieee754_expf+0x168>)
 8019e52:	4413      	add	r3, r2
 8019e54:	ed93 7a00 	vldr	s14, [r3]
 8019e58:	4b42      	ldr	r3, [pc, #264]	; (8019f64 <__ieee754_expf+0x16c>)
 8019e5a:	4413      	add	r3, r2
 8019e5c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8019e60:	f1c1 0201 	rsb	r2, r1, #1
 8019e64:	edd3 7a00 	vldr	s15, [r3]
 8019e68:	1a52      	subs	r2, r2, r1
 8019e6a:	ee37 0a67 	vsub.f32	s0, s14, s15
 8019e6e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8019e72:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8019f68 <__ieee754_expf+0x170>
 8019e76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8019f6c <__ieee754_expf+0x174>
 8019e7a:	eee6 6a05 	vfma.f32	s13, s12, s10
 8019e7e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8019f70 <__ieee754_expf+0x178>
 8019e82:	eea6 5a86 	vfma.f32	s10, s13, s12
 8019e86:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8019f74 <__ieee754_expf+0x17c>
 8019e8a:	eee5 6a06 	vfma.f32	s13, s10, s12
 8019e8e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8019f78 <__ieee754_expf+0x180>
 8019e92:	eea6 5a86 	vfma.f32	s10, s13, s12
 8019e96:	eef0 6a40 	vmov.f32	s13, s0
 8019e9a:	eee5 6a46 	vfms.f32	s13, s10, s12
 8019e9e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8019ea2:	ee20 5a26 	vmul.f32	s10, s0, s13
 8019ea6:	bb92      	cbnz	r2, 8019f0e <__ieee754_expf+0x116>
 8019ea8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8019eac:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8019eb0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019eb4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8019eb8:	4770      	bx	lr
 8019eba:	4b30      	ldr	r3, [pc, #192]	; (8019f7c <__ieee754_expf+0x184>)
 8019ebc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8019f80 <__ieee754_expf+0x188>
 8019ec0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8019f84 <__ieee754_expf+0x18c>
 8019ec4:	4413      	add	r3, r2
 8019ec6:	edd3 7a00 	vldr	s15, [r3]
 8019eca:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019ece:	eeb0 7a40 	vmov.f32	s14, s0
 8019ed2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019ed6:	ee17 2a90 	vmov	r2, s15
 8019eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019ede:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019ee2:	eddf 6a29 	vldr	s13, [pc, #164]	; 8019f88 <__ieee754_expf+0x190>
 8019ee6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019eea:	e7be      	b.n	8019e6a <__ieee754_expf+0x72>
 8019eec:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8019ef0:	d20b      	bcs.n	8019f0a <__ieee754_expf+0x112>
 8019ef2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8019f8c <__ieee754_expf+0x194>
 8019ef6:	ee70 6a26 	vadd.f32	s13, s0, s13
 8019efa:	eef4 6ae5 	vcmpe.f32	s13, s11
 8019efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f02:	dd02      	ble.n	8019f0a <__ieee754_expf+0x112>
 8019f04:	ee30 0a25 	vadd.f32	s0, s0, s11
 8019f08:	4770      	bx	lr
 8019f0a:	2200      	movs	r2, #0
 8019f0c:	e7af      	b.n	8019e6e <__ieee754_expf+0x76>
 8019f0e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8019f12:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8019f16:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8019f1a:	bfb8      	it	lt
 8019f1c:	3264      	addlt	r2, #100	; 0x64
 8019f1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019f22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019f26:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8019f2a:	ee17 3a90 	vmov	r3, s15
 8019f2e:	bfab      	itete	ge
 8019f30:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8019f34:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8019f38:	ee00 3a10 	vmovge	s0, r3
 8019f3c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8019f90 <__ieee754_expf+0x198>
 8019f40:	bfbc      	itt	lt
 8019f42:	ee00 3a10 	vmovlt	s0, r3
 8019f46:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8019f4a:	4770      	bx	lr
 8019f4c:	00000000 	.word	0x00000000
 8019f50:	42b17217 	.word	0x42b17217
 8019f54:	42cff1b5 	.word	0x42cff1b5
 8019f58:	3eb17218 	.word	0x3eb17218
 8019f5c:	3f851591 	.word	0x3f851591
 8019f60:	0801d308 	.word	0x0801d308
 8019f64:	0801d310 	.word	0x0801d310
 8019f68:	3331bb4c 	.word	0x3331bb4c
 8019f6c:	b5ddea0e 	.word	0xb5ddea0e
 8019f70:	388ab355 	.word	0x388ab355
 8019f74:	bb360b61 	.word	0xbb360b61
 8019f78:	3e2aaaab 	.word	0x3e2aaaab
 8019f7c:	0801d300 	.word	0x0801d300
 8019f80:	3fb8aa3b 	.word	0x3fb8aa3b
 8019f84:	3f317180 	.word	0x3f317180
 8019f88:	3717f7d1 	.word	0x3717f7d1
 8019f8c:	7149f2ca 	.word	0x7149f2ca
 8019f90:	0d800000 	.word	0x0d800000
 8019f94:	00000000 	.word	0x00000000

08019f98 <scalbn>:
 8019f98:	b570      	push	{r4, r5, r6, lr}
 8019f9a:	ec55 4b10 	vmov	r4, r5, d0
 8019f9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8019fa2:	4606      	mov	r6, r0
 8019fa4:	462b      	mov	r3, r5
 8019fa6:	b999      	cbnz	r1, 8019fd0 <scalbn+0x38>
 8019fa8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019fac:	4323      	orrs	r3, r4
 8019fae:	d03f      	beq.n	801a030 <scalbn+0x98>
 8019fb0:	4b35      	ldr	r3, [pc, #212]	; (801a088 <scalbn+0xf0>)
 8019fb2:	4629      	mov	r1, r5
 8019fb4:	ee10 0a10 	vmov	r0, s0
 8019fb8:	2200      	movs	r2, #0
 8019fba:	f7e6 fb1d 	bl	80005f8 <__aeabi_dmul>
 8019fbe:	4b33      	ldr	r3, [pc, #204]	; (801a08c <scalbn+0xf4>)
 8019fc0:	429e      	cmp	r6, r3
 8019fc2:	4604      	mov	r4, r0
 8019fc4:	460d      	mov	r5, r1
 8019fc6:	da10      	bge.n	8019fea <scalbn+0x52>
 8019fc8:	a327      	add	r3, pc, #156	; (adr r3, 801a068 <scalbn+0xd0>)
 8019fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fce:	e01f      	b.n	801a010 <scalbn+0x78>
 8019fd0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8019fd4:	4291      	cmp	r1, r2
 8019fd6:	d10c      	bne.n	8019ff2 <scalbn+0x5a>
 8019fd8:	ee10 2a10 	vmov	r2, s0
 8019fdc:	4620      	mov	r0, r4
 8019fde:	4629      	mov	r1, r5
 8019fe0:	f7e6 f954 	bl	800028c <__adddf3>
 8019fe4:	4604      	mov	r4, r0
 8019fe6:	460d      	mov	r5, r1
 8019fe8:	e022      	b.n	801a030 <scalbn+0x98>
 8019fea:	460b      	mov	r3, r1
 8019fec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8019ff0:	3936      	subs	r1, #54	; 0x36
 8019ff2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8019ff6:	4296      	cmp	r6, r2
 8019ff8:	dd0d      	ble.n	801a016 <scalbn+0x7e>
 8019ffa:	2d00      	cmp	r5, #0
 8019ffc:	a11c      	add	r1, pc, #112	; (adr r1, 801a070 <scalbn+0xd8>)
 8019ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a002:	da02      	bge.n	801a00a <scalbn+0x72>
 801a004:	a11c      	add	r1, pc, #112	; (adr r1, 801a078 <scalbn+0xe0>)
 801a006:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a00a:	a319      	add	r3, pc, #100	; (adr r3, 801a070 <scalbn+0xd8>)
 801a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a010:	f7e6 faf2 	bl	80005f8 <__aeabi_dmul>
 801a014:	e7e6      	b.n	8019fe4 <scalbn+0x4c>
 801a016:	1872      	adds	r2, r6, r1
 801a018:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a01c:	428a      	cmp	r2, r1
 801a01e:	dcec      	bgt.n	8019ffa <scalbn+0x62>
 801a020:	2a00      	cmp	r2, #0
 801a022:	dd08      	ble.n	801a036 <scalbn+0x9e>
 801a024:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a028:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a02c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a030:	ec45 4b10 	vmov	d0, r4, r5
 801a034:	bd70      	pop	{r4, r5, r6, pc}
 801a036:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a03a:	da08      	bge.n	801a04e <scalbn+0xb6>
 801a03c:	2d00      	cmp	r5, #0
 801a03e:	a10a      	add	r1, pc, #40	; (adr r1, 801a068 <scalbn+0xd0>)
 801a040:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a044:	dac0      	bge.n	8019fc8 <scalbn+0x30>
 801a046:	a10e      	add	r1, pc, #56	; (adr r1, 801a080 <scalbn+0xe8>)
 801a048:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a04c:	e7bc      	b.n	8019fc8 <scalbn+0x30>
 801a04e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a052:	3236      	adds	r2, #54	; 0x36
 801a054:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a058:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a05c:	4620      	mov	r0, r4
 801a05e:	4b0c      	ldr	r3, [pc, #48]	; (801a090 <scalbn+0xf8>)
 801a060:	2200      	movs	r2, #0
 801a062:	e7d5      	b.n	801a010 <scalbn+0x78>
 801a064:	f3af 8000 	nop.w
 801a068:	c2f8f359 	.word	0xc2f8f359
 801a06c:	01a56e1f 	.word	0x01a56e1f
 801a070:	8800759c 	.word	0x8800759c
 801a074:	7e37e43c 	.word	0x7e37e43c
 801a078:	8800759c 	.word	0x8800759c
 801a07c:	fe37e43c 	.word	0xfe37e43c
 801a080:	c2f8f359 	.word	0xc2f8f359
 801a084:	81a56e1f 	.word	0x81a56e1f
 801a088:	43500000 	.word	0x43500000
 801a08c:	ffff3cb0 	.word	0xffff3cb0
 801a090:	3c900000 	.word	0x3c900000

0801a094 <with_errnof>:
 801a094:	b513      	push	{r0, r1, r4, lr}
 801a096:	4604      	mov	r4, r0
 801a098:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a09c:	f7fc fc94 	bl	80169c8 <__errno>
 801a0a0:	ed9d 0a01 	vldr	s0, [sp, #4]
 801a0a4:	6004      	str	r4, [r0, #0]
 801a0a6:	b002      	add	sp, #8
 801a0a8:	bd10      	pop	{r4, pc}

0801a0aa <xflowf>:
 801a0aa:	b130      	cbz	r0, 801a0ba <xflowf+0x10>
 801a0ac:	eef1 7a40 	vneg.f32	s15, s0
 801a0b0:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a0b4:	2022      	movs	r0, #34	; 0x22
 801a0b6:	f7ff bfed 	b.w	801a094 <with_errnof>
 801a0ba:	eef0 7a40 	vmov.f32	s15, s0
 801a0be:	e7f7      	b.n	801a0b0 <xflowf+0x6>

0801a0c0 <__math_uflowf>:
 801a0c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a0c8 <__math_uflowf+0x8>
 801a0c4:	f7ff bff1 	b.w	801a0aa <xflowf>
 801a0c8:	10000000 	.word	0x10000000

0801a0cc <__math_oflowf>:
 801a0cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a0d4 <__math_oflowf+0x8>
 801a0d0:	f7ff bfeb 	b.w	801a0aa <xflowf>
 801a0d4:	70000000 	.word	0x70000000

0801a0d8 <__ieee754_sqrt>:
 801a0d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0dc:	ec55 4b10 	vmov	r4, r5, d0
 801a0e0:	4e67      	ldr	r6, [pc, #412]	; (801a280 <__ieee754_sqrt+0x1a8>)
 801a0e2:	43ae      	bics	r6, r5
 801a0e4:	ee10 0a10 	vmov	r0, s0
 801a0e8:	ee10 2a10 	vmov	r2, s0
 801a0ec:	4629      	mov	r1, r5
 801a0ee:	462b      	mov	r3, r5
 801a0f0:	d10d      	bne.n	801a10e <__ieee754_sqrt+0x36>
 801a0f2:	f7e6 fa81 	bl	80005f8 <__aeabi_dmul>
 801a0f6:	4602      	mov	r2, r0
 801a0f8:	460b      	mov	r3, r1
 801a0fa:	4620      	mov	r0, r4
 801a0fc:	4629      	mov	r1, r5
 801a0fe:	f7e6 f8c5 	bl	800028c <__adddf3>
 801a102:	4604      	mov	r4, r0
 801a104:	460d      	mov	r5, r1
 801a106:	ec45 4b10 	vmov	d0, r4, r5
 801a10a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a10e:	2d00      	cmp	r5, #0
 801a110:	dc0b      	bgt.n	801a12a <__ieee754_sqrt+0x52>
 801a112:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a116:	4326      	orrs	r6, r4
 801a118:	d0f5      	beq.n	801a106 <__ieee754_sqrt+0x2e>
 801a11a:	b135      	cbz	r5, 801a12a <__ieee754_sqrt+0x52>
 801a11c:	f7e6 f8b4 	bl	8000288 <__aeabi_dsub>
 801a120:	4602      	mov	r2, r0
 801a122:	460b      	mov	r3, r1
 801a124:	f7e6 fb92 	bl	800084c <__aeabi_ddiv>
 801a128:	e7eb      	b.n	801a102 <__ieee754_sqrt+0x2a>
 801a12a:	1509      	asrs	r1, r1, #20
 801a12c:	f000 808d 	beq.w	801a24a <__ieee754_sqrt+0x172>
 801a130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a134:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801a138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a13c:	07c9      	lsls	r1, r1, #31
 801a13e:	bf5c      	itt	pl
 801a140:	005b      	lslpl	r3, r3, #1
 801a142:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801a146:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a14a:	bf58      	it	pl
 801a14c:	0052      	lslpl	r2, r2, #1
 801a14e:	2500      	movs	r5, #0
 801a150:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a154:	1076      	asrs	r6, r6, #1
 801a156:	0052      	lsls	r2, r2, #1
 801a158:	f04f 0e16 	mov.w	lr, #22
 801a15c:	46ac      	mov	ip, r5
 801a15e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a162:	eb0c 0001 	add.w	r0, ip, r1
 801a166:	4298      	cmp	r0, r3
 801a168:	bfde      	ittt	le
 801a16a:	1a1b      	suble	r3, r3, r0
 801a16c:	eb00 0c01 	addle.w	ip, r0, r1
 801a170:	186d      	addle	r5, r5, r1
 801a172:	005b      	lsls	r3, r3, #1
 801a174:	f1be 0e01 	subs.w	lr, lr, #1
 801a178:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a17c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a180:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a184:	d1ed      	bne.n	801a162 <__ieee754_sqrt+0x8a>
 801a186:	4674      	mov	r4, lr
 801a188:	2720      	movs	r7, #32
 801a18a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801a18e:	4563      	cmp	r3, ip
 801a190:	eb01 000e 	add.w	r0, r1, lr
 801a194:	dc02      	bgt.n	801a19c <__ieee754_sqrt+0xc4>
 801a196:	d113      	bne.n	801a1c0 <__ieee754_sqrt+0xe8>
 801a198:	4290      	cmp	r0, r2
 801a19a:	d811      	bhi.n	801a1c0 <__ieee754_sqrt+0xe8>
 801a19c:	2800      	cmp	r0, #0
 801a19e:	eb00 0e01 	add.w	lr, r0, r1
 801a1a2:	da57      	bge.n	801a254 <__ieee754_sqrt+0x17c>
 801a1a4:	f1be 0f00 	cmp.w	lr, #0
 801a1a8:	db54      	blt.n	801a254 <__ieee754_sqrt+0x17c>
 801a1aa:	f10c 0801 	add.w	r8, ip, #1
 801a1ae:	eba3 030c 	sub.w	r3, r3, ip
 801a1b2:	4290      	cmp	r0, r2
 801a1b4:	bf88      	it	hi
 801a1b6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801a1ba:	1a12      	subs	r2, r2, r0
 801a1bc:	440c      	add	r4, r1
 801a1be:	46c4      	mov	ip, r8
 801a1c0:	005b      	lsls	r3, r3, #1
 801a1c2:	3f01      	subs	r7, #1
 801a1c4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a1c8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a1cc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a1d0:	d1dd      	bne.n	801a18e <__ieee754_sqrt+0xb6>
 801a1d2:	4313      	orrs	r3, r2
 801a1d4:	d01b      	beq.n	801a20e <__ieee754_sqrt+0x136>
 801a1d6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801a284 <__ieee754_sqrt+0x1ac>
 801a1da:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801a288 <__ieee754_sqrt+0x1b0>
 801a1de:	e9da 0100 	ldrd	r0, r1, [sl]
 801a1e2:	e9db 2300 	ldrd	r2, r3, [fp]
 801a1e6:	f7e6 f84f 	bl	8000288 <__aeabi_dsub>
 801a1ea:	e9da 8900 	ldrd	r8, r9, [sl]
 801a1ee:	4602      	mov	r2, r0
 801a1f0:	460b      	mov	r3, r1
 801a1f2:	4640      	mov	r0, r8
 801a1f4:	4649      	mov	r1, r9
 801a1f6:	f7e6 fc7b 	bl	8000af0 <__aeabi_dcmple>
 801a1fa:	b140      	cbz	r0, 801a20e <__ieee754_sqrt+0x136>
 801a1fc:	f1b4 3fff 	cmp.w	r4, #4294967295
 801a200:	e9da 0100 	ldrd	r0, r1, [sl]
 801a204:	e9db 2300 	ldrd	r2, r3, [fp]
 801a208:	d126      	bne.n	801a258 <__ieee754_sqrt+0x180>
 801a20a:	3501      	adds	r5, #1
 801a20c:	463c      	mov	r4, r7
 801a20e:	106a      	asrs	r2, r5, #1
 801a210:	0863      	lsrs	r3, r4, #1
 801a212:	07e9      	lsls	r1, r5, #31
 801a214:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a218:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a21c:	bf48      	it	mi
 801a21e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a222:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801a226:	461c      	mov	r4, r3
 801a228:	e76d      	b.n	801a106 <__ieee754_sqrt+0x2e>
 801a22a:	0ad3      	lsrs	r3, r2, #11
 801a22c:	3815      	subs	r0, #21
 801a22e:	0552      	lsls	r2, r2, #21
 801a230:	2b00      	cmp	r3, #0
 801a232:	d0fa      	beq.n	801a22a <__ieee754_sqrt+0x152>
 801a234:	02dc      	lsls	r4, r3, #11
 801a236:	d50a      	bpl.n	801a24e <__ieee754_sqrt+0x176>
 801a238:	f1c1 0420 	rsb	r4, r1, #32
 801a23c:	fa22 f404 	lsr.w	r4, r2, r4
 801a240:	1e4d      	subs	r5, r1, #1
 801a242:	408a      	lsls	r2, r1
 801a244:	4323      	orrs	r3, r4
 801a246:	1b41      	subs	r1, r0, r5
 801a248:	e772      	b.n	801a130 <__ieee754_sqrt+0x58>
 801a24a:	4608      	mov	r0, r1
 801a24c:	e7f0      	b.n	801a230 <__ieee754_sqrt+0x158>
 801a24e:	005b      	lsls	r3, r3, #1
 801a250:	3101      	adds	r1, #1
 801a252:	e7ef      	b.n	801a234 <__ieee754_sqrt+0x15c>
 801a254:	46e0      	mov	r8, ip
 801a256:	e7aa      	b.n	801a1ae <__ieee754_sqrt+0xd6>
 801a258:	f7e6 f818 	bl	800028c <__adddf3>
 801a25c:	e9da 8900 	ldrd	r8, r9, [sl]
 801a260:	4602      	mov	r2, r0
 801a262:	460b      	mov	r3, r1
 801a264:	4640      	mov	r0, r8
 801a266:	4649      	mov	r1, r9
 801a268:	f7e6 fc38 	bl	8000adc <__aeabi_dcmplt>
 801a26c:	b120      	cbz	r0, 801a278 <__ieee754_sqrt+0x1a0>
 801a26e:	1ca0      	adds	r0, r4, #2
 801a270:	bf08      	it	eq
 801a272:	3501      	addeq	r5, #1
 801a274:	3402      	adds	r4, #2
 801a276:	e7ca      	b.n	801a20e <__ieee754_sqrt+0x136>
 801a278:	3401      	adds	r4, #1
 801a27a:	f024 0401 	bic.w	r4, r4, #1
 801a27e:	e7c6      	b.n	801a20e <__ieee754_sqrt+0x136>
 801a280:	7ff00000 	.word	0x7ff00000
 801a284:	200002f8 	.word	0x200002f8
 801a288:	20000300 	.word	0x20000300
 801a28c:	00000000 	.word	0x00000000

0801a290 <__kernel_rem_pio2>:
 801a290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a294:	ed2d 8b02 	vpush	{d8}
 801a298:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801a29c:	f112 0f14 	cmn.w	r2, #20
 801a2a0:	9306      	str	r3, [sp, #24]
 801a2a2:	9104      	str	r1, [sp, #16]
 801a2a4:	4bc2      	ldr	r3, [pc, #776]	; (801a5b0 <__kernel_rem_pio2+0x320>)
 801a2a6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801a2a8:	9009      	str	r0, [sp, #36]	; 0x24
 801a2aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a2ae:	9300      	str	r3, [sp, #0]
 801a2b0:	9b06      	ldr	r3, [sp, #24]
 801a2b2:	f103 33ff 	add.w	r3, r3, #4294967295
 801a2b6:	bfa8      	it	ge
 801a2b8:	1ed4      	subge	r4, r2, #3
 801a2ba:	9305      	str	r3, [sp, #20]
 801a2bc:	bfb2      	itee	lt
 801a2be:	2400      	movlt	r4, #0
 801a2c0:	2318      	movge	r3, #24
 801a2c2:	fb94 f4f3 	sdivge	r4, r4, r3
 801a2c6:	f06f 0317 	mvn.w	r3, #23
 801a2ca:	fb04 3303 	mla	r3, r4, r3, r3
 801a2ce:	eb03 0a02 	add.w	sl, r3, r2
 801a2d2:	9b00      	ldr	r3, [sp, #0]
 801a2d4:	9a05      	ldr	r2, [sp, #20]
 801a2d6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 801a5a0 <__kernel_rem_pio2+0x310>
 801a2da:	eb03 0802 	add.w	r8, r3, r2
 801a2de:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801a2e0:	1aa7      	subs	r7, r4, r2
 801a2e2:	ae20      	add	r6, sp, #128	; 0x80
 801a2e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a2e8:	2500      	movs	r5, #0
 801a2ea:	4545      	cmp	r5, r8
 801a2ec:	dd13      	ble.n	801a316 <__kernel_rem_pio2+0x86>
 801a2ee:	9b06      	ldr	r3, [sp, #24]
 801a2f0:	aa20      	add	r2, sp, #128	; 0x80
 801a2f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801a2f6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801a2fa:	f04f 0800 	mov.w	r8, #0
 801a2fe:	9b00      	ldr	r3, [sp, #0]
 801a300:	4598      	cmp	r8, r3
 801a302:	dc31      	bgt.n	801a368 <__kernel_rem_pio2+0xd8>
 801a304:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 801a5a0 <__kernel_rem_pio2+0x310>
 801a308:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a30c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a310:	462f      	mov	r7, r5
 801a312:	2600      	movs	r6, #0
 801a314:	e01b      	b.n	801a34e <__kernel_rem_pio2+0xbe>
 801a316:	42ef      	cmn	r7, r5
 801a318:	d407      	bmi.n	801a32a <__kernel_rem_pio2+0x9a>
 801a31a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a31e:	f7e6 f901 	bl	8000524 <__aeabi_i2d>
 801a322:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a326:	3501      	adds	r5, #1
 801a328:	e7df      	b.n	801a2ea <__kernel_rem_pio2+0x5a>
 801a32a:	ec51 0b18 	vmov	r0, r1, d8
 801a32e:	e7f8      	b.n	801a322 <__kernel_rem_pio2+0x92>
 801a330:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a334:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801a338:	f7e6 f95e 	bl	80005f8 <__aeabi_dmul>
 801a33c:	4602      	mov	r2, r0
 801a33e:	460b      	mov	r3, r1
 801a340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a344:	f7e5 ffa2 	bl	800028c <__adddf3>
 801a348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a34c:	3601      	adds	r6, #1
 801a34e:	9b05      	ldr	r3, [sp, #20]
 801a350:	429e      	cmp	r6, r3
 801a352:	f1a7 0708 	sub.w	r7, r7, #8
 801a356:	ddeb      	ble.n	801a330 <__kernel_rem_pio2+0xa0>
 801a358:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a35c:	f108 0801 	add.w	r8, r8, #1
 801a360:	ecab 7b02 	vstmia	fp!, {d7}
 801a364:	3508      	adds	r5, #8
 801a366:	e7ca      	b.n	801a2fe <__kernel_rem_pio2+0x6e>
 801a368:	9b00      	ldr	r3, [sp, #0]
 801a36a:	aa0c      	add	r2, sp, #48	; 0x30
 801a36c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a370:	930b      	str	r3, [sp, #44]	; 0x2c
 801a372:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801a374:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a378:	9c00      	ldr	r4, [sp, #0]
 801a37a:	930a      	str	r3, [sp, #40]	; 0x28
 801a37c:	00e3      	lsls	r3, r4, #3
 801a37e:	9308      	str	r3, [sp, #32]
 801a380:	ab98      	add	r3, sp, #608	; 0x260
 801a382:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a386:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801a38a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801a38e:	ab70      	add	r3, sp, #448	; 0x1c0
 801a390:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801a394:	46c3      	mov	fp, r8
 801a396:	46a1      	mov	r9, r4
 801a398:	f1b9 0f00 	cmp.w	r9, #0
 801a39c:	f1a5 0508 	sub.w	r5, r5, #8
 801a3a0:	dc77      	bgt.n	801a492 <__kernel_rem_pio2+0x202>
 801a3a2:	ec47 6b10 	vmov	d0, r6, r7
 801a3a6:	4650      	mov	r0, sl
 801a3a8:	f7ff fdf6 	bl	8019f98 <scalbn>
 801a3ac:	ec57 6b10 	vmov	r6, r7, d0
 801a3b0:	2200      	movs	r2, #0
 801a3b2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a3b6:	ee10 0a10 	vmov	r0, s0
 801a3ba:	4639      	mov	r1, r7
 801a3bc:	f7e6 f91c 	bl	80005f8 <__aeabi_dmul>
 801a3c0:	ec41 0b10 	vmov	d0, r0, r1
 801a3c4:	f7ff f8cc 	bl	8019560 <floor>
 801a3c8:	4b7a      	ldr	r3, [pc, #488]	; (801a5b4 <__kernel_rem_pio2+0x324>)
 801a3ca:	ec51 0b10 	vmov	r0, r1, d0
 801a3ce:	2200      	movs	r2, #0
 801a3d0:	f7e6 f912 	bl	80005f8 <__aeabi_dmul>
 801a3d4:	4602      	mov	r2, r0
 801a3d6:	460b      	mov	r3, r1
 801a3d8:	4630      	mov	r0, r6
 801a3da:	4639      	mov	r1, r7
 801a3dc:	f7e5 ff54 	bl	8000288 <__aeabi_dsub>
 801a3e0:	460f      	mov	r7, r1
 801a3e2:	4606      	mov	r6, r0
 801a3e4:	f7e6 fbb8 	bl	8000b58 <__aeabi_d2iz>
 801a3e8:	9002      	str	r0, [sp, #8]
 801a3ea:	f7e6 f89b 	bl	8000524 <__aeabi_i2d>
 801a3ee:	4602      	mov	r2, r0
 801a3f0:	460b      	mov	r3, r1
 801a3f2:	4630      	mov	r0, r6
 801a3f4:	4639      	mov	r1, r7
 801a3f6:	f7e5 ff47 	bl	8000288 <__aeabi_dsub>
 801a3fa:	f1ba 0f00 	cmp.w	sl, #0
 801a3fe:	4606      	mov	r6, r0
 801a400:	460f      	mov	r7, r1
 801a402:	dd6d      	ble.n	801a4e0 <__kernel_rem_pio2+0x250>
 801a404:	1e61      	subs	r1, r4, #1
 801a406:	ab0c      	add	r3, sp, #48	; 0x30
 801a408:	9d02      	ldr	r5, [sp, #8]
 801a40a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a40e:	f1ca 0018 	rsb	r0, sl, #24
 801a412:	fa43 f200 	asr.w	r2, r3, r0
 801a416:	4415      	add	r5, r2
 801a418:	4082      	lsls	r2, r0
 801a41a:	1a9b      	subs	r3, r3, r2
 801a41c:	aa0c      	add	r2, sp, #48	; 0x30
 801a41e:	9502      	str	r5, [sp, #8]
 801a420:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a424:	f1ca 0217 	rsb	r2, sl, #23
 801a428:	fa43 fb02 	asr.w	fp, r3, r2
 801a42c:	f1bb 0f00 	cmp.w	fp, #0
 801a430:	dd65      	ble.n	801a4fe <__kernel_rem_pio2+0x26e>
 801a432:	9b02      	ldr	r3, [sp, #8]
 801a434:	2200      	movs	r2, #0
 801a436:	3301      	adds	r3, #1
 801a438:	9302      	str	r3, [sp, #8]
 801a43a:	4615      	mov	r5, r2
 801a43c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a440:	4294      	cmp	r4, r2
 801a442:	f300 809f 	bgt.w	801a584 <__kernel_rem_pio2+0x2f4>
 801a446:	f1ba 0f00 	cmp.w	sl, #0
 801a44a:	dd07      	ble.n	801a45c <__kernel_rem_pio2+0x1cc>
 801a44c:	f1ba 0f01 	cmp.w	sl, #1
 801a450:	f000 80c1 	beq.w	801a5d6 <__kernel_rem_pio2+0x346>
 801a454:	f1ba 0f02 	cmp.w	sl, #2
 801a458:	f000 80c7 	beq.w	801a5ea <__kernel_rem_pio2+0x35a>
 801a45c:	f1bb 0f02 	cmp.w	fp, #2
 801a460:	d14d      	bne.n	801a4fe <__kernel_rem_pio2+0x26e>
 801a462:	4632      	mov	r2, r6
 801a464:	463b      	mov	r3, r7
 801a466:	4954      	ldr	r1, [pc, #336]	; (801a5b8 <__kernel_rem_pio2+0x328>)
 801a468:	2000      	movs	r0, #0
 801a46a:	f7e5 ff0d 	bl	8000288 <__aeabi_dsub>
 801a46e:	4606      	mov	r6, r0
 801a470:	460f      	mov	r7, r1
 801a472:	2d00      	cmp	r5, #0
 801a474:	d043      	beq.n	801a4fe <__kernel_rem_pio2+0x26e>
 801a476:	4650      	mov	r0, sl
 801a478:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 801a5a8 <__kernel_rem_pio2+0x318>
 801a47c:	f7ff fd8c 	bl	8019f98 <scalbn>
 801a480:	4630      	mov	r0, r6
 801a482:	4639      	mov	r1, r7
 801a484:	ec53 2b10 	vmov	r2, r3, d0
 801a488:	f7e5 fefe 	bl	8000288 <__aeabi_dsub>
 801a48c:	4606      	mov	r6, r0
 801a48e:	460f      	mov	r7, r1
 801a490:	e035      	b.n	801a4fe <__kernel_rem_pio2+0x26e>
 801a492:	4b4a      	ldr	r3, [pc, #296]	; (801a5bc <__kernel_rem_pio2+0x32c>)
 801a494:	2200      	movs	r2, #0
 801a496:	4630      	mov	r0, r6
 801a498:	4639      	mov	r1, r7
 801a49a:	f7e6 f8ad 	bl	80005f8 <__aeabi_dmul>
 801a49e:	f7e6 fb5b 	bl	8000b58 <__aeabi_d2iz>
 801a4a2:	f7e6 f83f 	bl	8000524 <__aeabi_i2d>
 801a4a6:	4602      	mov	r2, r0
 801a4a8:	460b      	mov	r3, r1
 801a4aa:	ec43 2b18 	vmov	d8, r2, r3
 801a4ae:	4b44      	ldr	r3, [pc, #272]	; (801a5c0 <__kernel_rem_pio2+0x330>)
 801a4b0:	2200      	movs	r2, #0
 801a4b2:	f7e6 f8a1 	bl	80005f8 <__aeabi_dmul>
 801a4b6:	4602      	mov	r2, r0
 801a4b8:	460b      	mov	r3, r1
 801a4ba:	4630      	mov	r0, r6
 801a4bc:	4639      	mov	r1, r7
 801a4be:	f7e5 fee3 	bl	8000288 <__aeabi_dsub>
 801a4c2:	f7e6 fb49 	bl	8000b58 <__aeabi_d2iz>
 801a4c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a4ca:	f84b 0b04 	str.w	r0, [fp], #4
 801a4ce:	ec51 0b18 	vmov	r0, r1, d8
 801a4d2:	f7e5 fedb 	bl	800028c <__adddf3>
 801a4d6:	f109 39ff 	add.w	r9, r9, #4294967295
 801a4da:	4606      	mov	r6, r0
 801a4dc:	460f      	mov	r7, r1
 801a4de:	e75b      	b.n	801a398 <__kernel_rem_pio2+0x108>
 801a4e0:	d106      	bne.n	801a4f0 <__kernel_rem_pio2+0x260>
 801a4e2:	1e63      	subs	r3, r4, #1
 801a4e4:	aa0c      	add	r2, sp, #48	; 0x30
 801a4e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a4ea:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801a4ee:	e79d      	b.n	801a42c <__kernel_rem_pio2+0x19c>
 801a4f0:	4b34      	ldr	r3, [pc, #208]	; (801a5c4 <__kernel_rem_pio2+0x334>)
 801a4f2:	2200      	movs	r2, #0
 801a4f4:	f7e6 fb06 	bl	8000b04 <__aeabi_dcmpge>
 801a4f8:	2800      	cmp	r0, #0
 801a4fa:	d140      	bne.n	801a57e <__kernel_rem_pio2+0x2ee>
 801a4fc:	4683      	mov	fp, r0
 801a4fe:	2200      	movs	r2, #0
 801a500:	2300      	movs	r3, #0
 801a502:	4630      	mov	r0, r6
 801a504:	4639      	mov	r1, r7
 801a506:	f7e6 fadf 	bl	8000ac8 <__aeabi_dcmpeq>
 801a50a:	2800      	cmp	r0, #0
 801a50c:	f000 80c1 	beq.w	801a692 <__kernel_rem_pio2+0x402>
 801a510:	1e65      	subs	r5, r4, #1
 801a512:	462b      	mov	r3, r5
 801a514:	2200      	movs	r2, #0
 801a516:	9900      	ldr	r1, [sp, #0]
 801a518:	428b      	cmp	r3, r1
 801a51a:	da6d      	bge.n	801a5f8 <__kernel_rem_pio2+0x368>
 801a51c:	2a00      	cmp	r2, #0
 801a51e:	f000 808a 	beq.w	801a636 <__kernel_rem_pio2+0x3a6>
 801a522:	ab0c      	add	r3, sp, #48	; 0x30
 801a524:	f1aa 0a18 	sub.w	sl, sl, #24
 801a528:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	f000 80ae 	beq.w	801a68e <__kernel_rem_pio2+0x3fe>
 801a532:	4650      	mov	r0, sl
 801a534:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801a5a8 <__kernel_rem_pio2+0x318>
 801a538:	f7ff fd2e 	bl	8019f98 <scalbn>
 801a53c:	1c6b      	adds	r3, r5, #1
 801a53e:	00da      	lsls	r2, r3, #3
 801a540:	9205      	str	r2, [sp, #20]
 801a542:	ec57 6b10 	vmov	r6, r7, d0
 801a546:	aa70      	add	r2, sp, #448	; 0x1c0
 801a548:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801a5bc <__kernel_rem_pio2+0x32c>
 801a54c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 801a550:	462c      	mov	r4, r5
 801a552:	f04f 0800 	mov.w	r8, #0
 801a556:	2c00      	cmp	r4, #0
 801a558:	f280 80d4 	bge.w	801a704 <__kernel_rem_pio2+0x474>
 801a55c:	462c      	mov	r4, r5
 801a55e:	2c00      	cmp	r4, #0
 801a560:	f2c0 8102 	blt.w	801a768 <__kernel_rem_pio2+0x4d8>
 801a564:	4b18      	ldr	r3, [pc, #96]	; (801a5c8 <__kernel_rem_pio2+0x338>)
 801a566:	461e      	mov	r6, r3
 801a568:	ab70      	add	r3, sp, #448	; 0x1c0
 801a56a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801a56e:	1b2b      	subs	r3, r5, r4
 801a570:	f04f 0900 	mov.w	r9, #0
 801a574:	f04f 0a00 	mov.w	sl, #0
 801a578:	2700      	movs	r7, #0
 801a57a:	9306      	str	r3, [sp, #24]
 801a57c:	e0e6      	b.n	801a74c <__kernel_rem_pio2+0x4bc>
 801a57e:	f04f 0b02 	mov.w	fp, #2
 801a582:	e756      	b.n	801a432 <__kernel_rem_pio2+0x1a2>
 801a584:	f8d8 3000 	ldr.w	r3, [r8]
 801a588:	bb05      	cbnz	r5, 801a5cc <__kernel_rem_pio2+0x33c>
 801a58a:	b123      	cbz	r3, 801a596 <__kernel_rem_pio2+0x306>
 801a58c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a590:	f8c8 3000 	str.w	r3, [r8]
 801a594:	2301      	movs	r3, #1
 801a596:	3201      	adds	r2, #1
 801a598:	f108 0804 	add.w	r8, r8, #4
 801a59c:	461d      	mov	r5, r3
 801a59e:	e74f      	b.n	801a440 <__kernel_rem_pio2+0x1b0>
	...
 801a5ac:	3ff00000 	.word	0x3ff00000
 801a5b0:	0801d358 	.word	0x0801d358
 801a5b4:	40200000 	.word	0x40200000
 801a5b8:	3ff00000 	.word	0x3ff00000
 801a5bc:	3e700000 	.word	0x3e700000
 801a5c0:	41700000 	.word	0x41700000
 801a5c4:	3fe00000 	.word	0x3fe00000
 801a5c8:	0801d318 	.word	0x0801d318
 801a5cc:	1acb      	subs	r3, r1, r3
 801a5ce:	f8c8 3000 	str.w	r3, [r8]
 801a5d2:	462b      	mov	r3, r5
 801a5d4:	e7df      	b.n	801a596 <__kernel_rem_pio2+0x306>
 801a5d6:	1e62      	subs	r2, r4, #1
 801a5d8:	ab0c      	add	r3, sp, #48	; 0x30
 801a5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a5de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a5e2:	a90c      	add	r1, sp, #48	; 0x30
 801a5e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a5e8:	e738      	b.n	801a45c <__kernel_rem_pio2+0x1cc>
 801a5ea:	1e62      	subs	r2, r4, #1
 801a5ec:	ab0c      	add	r3, sp, #48	; 0x30
 801a5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a5f2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a5f6:	e7f4      	b.n	801a5e2 <__kernel_rem_pio2+0x352>
 801a5f8:	a90c      	add	r1, sp, #48	; 0x30
 801a5fa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a5fe:	3b01      	subs	r3, #1
 801a600:	430a      	orrs	r2, r1
 801a602:	e788      	b.n	801a516 <__kernel_rem_pio2+0x286>
 801a604:	3301      	adds	r3, #1
 801a606:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a60a:	2900      	cmp	r1, #0
 801a60c:	d0fa      	beq.n	801a604 <__kernel_rem_pio2+0x374>
 801a60e:	9a08      	ldr	r2, [sp, #32]
 801a610:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801a614:	446a      	add	r2, sp
 801a616:	3a98      	subs	r2, #152	; 0x98
 801a618:	9208      	str	r2, [sp, #32]
 801a61a:	9a06      	ldr	r2, [sp, #24]
 801a61c:	a920      	add	r1, sp, #128	; 0x80
 801a61e:	18a2      	adds	r2, r4, r2
 801a620:	18e3      	adds	r3, r4, r3
 801a622:	f104 0801 	add.w	r8, r4, #1
 801a626:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801a62a:	9302      	str	r3, [sp, #8]
 801a62c:	9b02      	ldr	r3, [sp, #8]
 801a62e:	4543      	cmp	r3, r8
 801a630:	da04      	bge.n	801a63c <__kernel_rem_pio2+0x3ac>
 801a632:	461c      	mov	r4, r3
 801a634:	e6a2      	b.n	801a37c <__kernel_rem_pio2+0xec>
 801a636:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a638:	2301      	movs	r3, #1
 801a63a:	e7e4      	b.n	801a606 <__kernel_rem_pio2+0x376>
 801a63c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a63e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801a642:	f7e5 ff6f 	bl	8000524 <__aeabi_i2d>
 801a646:	e8e5 0102 	strd	r0, r1, [r5], #8
 801a64a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a64c:	46ab      	mov	fp, r5
 801a64e:	461c      	mov	r4, r3
 801a650:	f04f 0900 	mov.w	r9, #0
 801a654:	2600      	movs	r6, #0
 801a656:	2700      	movs	r7, #0
 801a658:	9b05      	ldr	r3, [sp, #20]
 801a65a:	4599      	cmp	r9, r3
 801a65c:	dd06      	ble.n	801a66c <__kernel_rem_pio2+0x3dc>
 801a65e:	9b08      	ldr	r3, [sp, #32]
 801a660:	e8e3 6702 	strd	r6, r7, [r3], #8
 801a664:	f108 0801 	add.w	r8, r8, #1
 801a668:	9308      	str	r3, [sp, #32]
 801a66a:	e7df      	b.n	801a62c <__kernel_rem_pio2+0x39c>
 801a66c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a670:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a674:	f7e5 ffc0 	bl	80005f8 <__aeabi_dmul>
 801a678:	4602      	mov	r2, r0
 801a67a:	460b      	mov	r3, r1
 801a67c:	4630      	mov	r0, r6
 801a67e:	4639      	mov	r1, r7
 801a680:	f7e5 fe04 	bl	800028c <__adddf3>
 801a684:	f109 0901 	add.w	r9, r9, #1
 801a688:	4606      	mov	r6, r0
 801a68a:	460f      	mov	r7, r1
 801a68c:	e7e4      	b.n	801a658 <__kernel_rem_pio2+0x3c8>
 801a68e:	3d01      	subs	r5, #1
 801a690:	e747      	b.n	801a522 <__kernel_rem_pio2+0x292>
 801a692:	ec47 6b10 	vmov	d0, r6, r7
 801a696:	f1ca 0000 	rsb	r0, sl, #0
 801a69a:	f7ff fc7d 	bl	8019f98 <scalbn>
 801a69e:	ec57 6b10 	vmov	r6, r7, d0
 801a6a2:	4ba0      	ldr	r3, [pc, #640]	; (801a924 <__kernel_rem_pio2+0x694>)
 801a6a4:	ee10 0a10 	vmov	r0, s0
 801a6a8:	2200      	movs	r2, #0
 801a6aa:	4639      	mov	r1, r7
 801a6ac:	f7e6 fa2a 	bl	8000b04 <__aeabi_dcmpge>
 801a6b0:	b1f8      	cbz	r0, 801a6f2 <__kernel_rem_pio2+0x462>
 801a6b2:	4b9d      	ldr	r3, [pc, #628]	; (801a928 <__kernel_rem_pio2+0x698>)
 801a6b4:	2200      	movs	r2, #0
 801a6b6:	4630      	mov	r0, r6
 801a6b8:	4639      	mov	r1, r7
 801a6ba:	f7e5 ff9d 	bl	80005f8 <__aeabi_dmul>
 801a6be:	f7e6 fa4b 	bl	8000b58 <__aeabi_d2iz>
 801a6c2:	4680      	mov	r8, r0
 801a6c4:	f7e5 ff2e 	bl	8000524 <__aeabi_i2d>
 801a6c8:	4b96      	ldr	r3, [pc, #600]	; (801a924 <__kernel_rem_pio2+0x694>)
 801a6ca:	2200      	movs	r2, #0
 801a6cc:	f7e5 ff94 	bl	80005f8 <__aeabi_dmul>
 801a6d0:	460b      	mov	r3, r1
 801a6d2:	4602      	mov	r2, r0
 801a6d4:	4639      	mov	r1, r7
 801a6d6:	4630      	mov	r0, r6
 801a6d8:	f7e5 fdd6 	bl	8000288 <__aeabi_dsub>
 801a6dc:	f7e6 fa3c 	bl	8000b58 <__aeabi_d2iz>
 801a6e0:	1c65      	adds	r5, r4, #1
 801a6e2:	ab0c      	add	r3, sp, #48	; 0x30
 801a6e4:	f10a 0a18 	add.w	sl, sl, #24
 801a6e8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a6ec:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801a6f0:	e71f      	b.n	801a532 <__kernel_rem_pio2+0x2a2>
 801a6f2:	4630      	mov	r0, r6
 801a6f4:	4639      	mov	r1, r7
 801a6f6:	f7e6 fa2f 	bl	8000b58 <__aeabi_d2iz>
 801a6fa:	ab0c      	add	r3, sp, #48	; 0x30
 801a6fc:	4625      	mov	r5, r4
 801a6fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a702:	e716      	b.n	801a532 <__kernel_rem_pio2+0x2a2>
 801a704:	ab0c      	add	r3, sp, #48	; 0x30
 801a706:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a70a:	f7e5 ff0b 	bl	8000524 <__aeabi_i2d>
 801a70e:	4632      	mov	r2, r6
 801a710:	463b      	mov	r3, r7
 801a712:	f7e5 ff71 	bl	80005f8 <__aeabi_dmul>
 801a716:	4642      	mov	r2, r8
 801a718:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801a71c:	464b      	mov	r3, r9
 801a71e:	4630      	mov	r0, r6
 801a720:	4639      	mov	r1, r7
 801a722:	f7e5 ff69 	bl	80005f8 <__aeabi_dmul>
 801a726:	3c01      	subs	r4, #1
 801a728:	4606      	mov	r6, r0
 801a72a:	460f      	mov	r7, r1
 801a72c:	e713      	b.n	801a556 <__kernel_rem_pio2+0x2c6>
 801a72e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801a732:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801a736:	f7e5 ff5f 	bl	80005f8 <__aeabi_dmul>
 801a73a:	4602      	mov	r2, r0
 801a73c:	460b      	mov	r3, r1
 801a73e:	4648      	mov	r0, r9
 801a740:	4651      	mov	r1, sl
 801a742:	f7e5 fda3 	bl	800028c <__adddf3>
 801a746:	3701      	adds	r7, #1
 801a748:	4681      	mov	r9, r0
 801a74a:	468a      	mov	sl, r1
 801a74c:	9b00      	ldr	r3, [sp, #0]
 801a74e:	429f      	cmp	r7, r3
 801a750:	dc02      	bgt.n	801a758 <__kernel_rem_pio2+0x4c8>
 801a752:	9b06      	ldr	r3, [sp, #24]
 801a754:	429f      	cmp	r7, r3
 801a756:	ddea      	ble.n	801a72e <__kernel_rem_pio2+0x49e>
 801a758:	9a06      	ldr	r2, [sp, #24]
 801a75a:	ab48      	add	r3, sp, #288	; 0x120
 801a75c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801a760:	e9c6 9a00 	strd	r9, sl, [r6]
 801a764:	3c01      	subs	r4, #1
 801a766:	e6fa      	b.n	801a55e <__kernel_rem_pio2+0x2ce>
 801a768:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801a76a:	2b02      	cmp	r3, #2
 801a76c:	dc0b      	bgt.n	801a786 <__kernel_rem_pio2+0x4f6>
 801a76e:	2b00      	cmp	r3, #0
 801a770:	dc39      	bgt.n	801a7e6 <__kernel_rem_pio2+0x556>
 801a772:	d05d      	beq.n	801a830 <__kernel_rem_pio2+0x5a0>
 801a774:	9b02      	ldr	r3, [sp, #8]
 801a776:	f003 0007 	and.w	r0, r3, #7
 801a77a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801a77e:	ecbd 8b02 	vpop	{d8}
 801a782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a786:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801a788:	2b03      	cmp	r3, #3
 801a78a:	d1f3      	bne.n	801a774 <__kernel_rem_pio2+0x4e4>
 801a78c:	9b05      	ldr	r3, [sp, #20]
 801a78e:	9500      	str	r5, [sp, #0]
 801a790:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801a794:	eb0d 0403 	add.w	r4, sp, r3
 801a798:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801a79c:	46a2      	mov	sl, r4
 801a79e:	9b00      	ldr	r3, [sp, #0]
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	f1aa 0a08 	sub.w	sl, sl, #8
 801a7a6:	dc69      	bgt.n	801a87c <__kernel_rem_pio2+0x5ec>
 801a7a8:	46aa      	mov	sl, r5
 801a7aa:	f1ba 0f01 	cmp.w	sl, #1
 801a7ae:	f1a4 0408 	sub.w	r4, r4, #8
 801a7b2:	f300 8083 	bgt.w	801a8bc <__kernel_rem_pio2+0x62c>
 801a7b6:	9c05      	ldr	r4, [sp, #20]
 801a7b8:	ab48      	add	r3, sp, #288	; 0x120
 801a7ba:	441c      	add	r4, r3
 801a7bc:	2000      	movs	r0, #0
 801a7be:	2100      	movs	r1, #0
 801a7c0:	2d01      	cmp	r5, #1
 801a7c2:	f300 809a 	bgt.w	801a8fa <__kernel_rem_pio2+0x66a>
 801a7c6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801a7ca:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801a7ce:	f1bb 0f00 	cmp.w	fp, #0
 801a7d2:	f040 8098 	bne.w	801a906 <__kernel_rem_pio2+0x676>
 801a7d6:	9b04      	ldr	r3, [sp, #16]
 801a7d8:	e9c3 7800 	strd	r7, r8, [r3]
 801a7dc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801a7e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a7e4:	e7c6      	b.n	801a774 <__kernel_rem_pio2+0x4e4>
 801a7e6:	9e05      	ldr	r6, [sp, #20]
 801a7e8:	ab48      	add	r3, sp, #288	; 0x120
 801a7ea:	441e      	add	r6, r3
 801a7ec:	462c      	mov	r4, r5
 801a7ee:	2000      	movs	r0, #0
 801a7f0:	2100      	movs	r1, #0
 801a7f2:	2c00      	cmp	r4, #0
 801a7f4:	da33      	bge.n	801a85e <__kernel_rem_pio2+0x5ce>
 801a7f6:	f1bb 0f00 	cmp.w	fp, #0
 801a7fa:	d036      	beq.n	801a86a <__kernel_rem_pio2+0x5da>
 801a7fc:	4602      	mov	r2, r0
 801a7fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a802:	9c04      	ldr	r4, [sp, #16]
 801a804:	e9c4 2300 	strd	r2, r3, [r4]
 801a808:	4602      	mov	r2, r0
 801a80a:	460b      	mov	r3, r1
 801a80c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801a810:	f7e5 fd3a 	bl	8000288 <__aeabi_dsub>
 801a814:	ae4a      	add	r6, sp, #296	; 0x128
 801a816:	2401      	movs	r4, #1
 801a818:	42a5      	cmp	r5, r4
 801a81a:	da29      	bge.n	801a870 <__kernel_rem_pio2+0x5e0>
 801a81c:	f1bb 0f00 	cmp.w	fp, #0
 801a820:	d002      	beq.n	801a828 <__kernel_rem_pio2+0x598>
 801a822:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a826:	4619      	mov	r1, r3
 801a828:	9b04      	ldr	r3, [sp, #16]
 801a82a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a82e:	e7a1      	b.n	801a774 <__kernel_rem_pio2+0x4e4>
 801a830:	9c05      	ldr	r4, [sp, #20]
 801a832:	ab48      	add	r3, sp, #288	; 0x120
 801a834:	441c      	add	r4, r3
 801a836:	2000      	movs	r0, #0
 801a838:	2100      	movs	r1, #0
 801a83a:	2d00      	cmp	r5, #0
 801a83c:	da09      	bge.n	801a852 <__kernel_rem_pio2+0x5c2>
 801a83e:	f1bb 0f00 	cmp.w	fp, #0
 801a842:	d002      	beq.n	801a84a <__kernel_rem_pio2+0x5ba>
 801a844:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a848:	4619      	mov	r1, r3
 801a84a:	9b04      	ldr	r3, [sp, #16]
 801a84c:	e9c3 0100 	strd	r0, r1, [r3]
 801a850:	e790      	b.n	801a774 <__kernel_rem_pio2+0x4e4>
 801a852:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a856:	f7e5 fd19 	bl	800028c <__adddf3>
 801a85a:	3d01      	subs	r5, #1
 801a85c:	e7ed      	b.n	801a83a <__kernel_rem_pio2+0x5aa>
 801a85e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801a862:	f7e5 fd13 	bl	800028c <__adddf3>
 801a866:	3c01      	subs	r4, #1
 801a868:	e7c3      	b.n	801a7f2 <__kernel_rem_pio2+0x562>
 801a86a:	4602      	mov	r2, r0
 801a86c:	460b      	mov	r3, r1
 801a86e:	e7c8      	b.n	801a802 <__kernel_rem_pio2+0x572>
 801a870:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801a874:	f7e5 fd0a 	bl	800028c <__adddf3>
 801a878:	3401      	adds	r4, #1
 801a87a:	e7cd      	b.n	801a818 <__kernel_rem_pio2+0x588>
 801a87c:	e9da 8900 	ldrd	r8, r9, [sl]
 801a880:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801a884:	9b00      	ldr	r3, [sp, #0]
 801a886:	3b01      	subs	r3, #1
 801a888:	9300      	str	r3, [sp, #0]
 801a88a:	4632      	mov	r2, r6
 801a88c:	463b      	mov	r3, r7
 801a88e:	4640      	mov	r0, r8
 801a890:	4649      	mov	r1, r9
 801a892:	f7e5 fcfb 	bl	800028c <__adddf3>
 801a896:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a89a:	4602      	mov	r2, r0
 801a89c:	460b      	mov	r3, r1
 801a89e:	4640      	mov	r0, r8
 801a8a0:	4649      	mov	r1, r9
 801a8a2:	f7e5 fcf1 	bl	8000288 <__aeabi_dsub>
 801a8a6:	4632      	mov	r2, r6
 801a8a8:	463b      	mov	r3, r7
 801a8aa:	f7e5 fcef 	bl	800028c <__adddf3>
 801a8ae:	ed9d 7b06 	vldr	d7, [sp, #24]
 801a8b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a8b6:	ed8a 7b00 	vstr	d7, [sl]
 801a8ba:	e770      	b.n	801a79e <__kernel_rem_pio2+0x50e>
 801a8bc:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a8c0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801a8c4:	4640      	mov	r0, r8
 801a8c6:	4632      	mov	r2, r6
 801a8c8:	463b      	mov	r3, r7
 801a8ca:	4649      	mov	r1, r9
 801a8cc:	f7e5 fcde 	bl	800028c <__adddf3>
 801a8d0:	e9cd 0100 	strd	r0, r1, [sp]
 801a8d4:	4602      	mov	r2, r0
 801a8d6:	460b      	mov	r3, r1
 801a8d8:	4640      	mov	r0, r8
 801a8da:	4649      	mov	r1, r9
 801a8dc:	f7e5 fcd4 	bl	8000288 <__aeabi_dsub>
 801a8e0:	4632      	mov	r2, r6
 801a8e2:	463b      	mov	r3, r7
 801a8e4:	f7e5 fcd2 	bl	800028c <__adddf3>
 801a8e8:	ed9d 7b00 	vldr	d7, [sp]
 801a8ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a8f0:	ed84 7b00 	vstr	d7, [r4]
 801a8f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a8f8:	e757      	b.n	801a7aa <__kernel_rem_pio2+0x51a>
 801a8fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a8fe:	f7e5 fcc5 	bl	800028c <__adddf3>
 801a902:	3d01      	subs	r5, #1
 801a904:	e75c      	b.n	801a7c0 <__kernel_rem_pio2+0x530>
 801a906:	9b04      	ldr	r3, [sp, #16]
 801a908:	9a04      	ldr	r2, [sp, #16]
 801a90a:	601f      	str	r7, [r3, #0]
 801a90c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801a910:	605c      	str	r4, [r3, #4]
 801a912:	609d      	str	r5, [r3, #8]
 801a914:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801a918:	60d3      	str	r3, [r2, #12]
 801a91a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a91e:	6110      	str	r0, [r2, #16]
 801a920:	6153      	str	r3, [r2, #20]
 801a922:	e727      	b.n	801a774 <__kernel_rem_pio2+0x4e4>
 801a924:	41700000 	.word	0x41700000
 801a928:	3e700000 	.word	0x3e700000
 801a92c:	00000000 	.word	0x00000000

0801a930 <__ieee754_acos>:
 801a930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a934:	ec55 4b10 	vmov	r4, r5, d0
 801a938:	49b7      	ldr	r1, [pc, #732]	; (801ac18 <__ieee754_acos+0x2e8>)
 801a93a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a93e:	428b      	cmp	r3, r1
 801a940:	dd1b      	ble.n	801a97a <__ieee754_acos+0x4a>
 801a942:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801a946:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a94a:	4323      	orrs	r3, r4
 801a94c:	d106      	bne.n	801a95c <__ieee754_acos+0x2c>
 801a94e:	2d00      	cmp	r5, #0
 801a950:	f300 8211 	bgt.w	801ad76 <__ieee754_acos+0x446>
 801a954:	ed9f 0b96 	vldr	d0, [pc, #600]	; 801abb0 <__ieee754_acos+0x280>
 801a958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a95c:	ee10 2a10 	vmov	r2, s0
 801a960:	462b      	mov	r3, r5
 801a962:	ee10 0a10 	vmov	r0, s0
 801a966:	4629      	mov	r1, r5
 801a968:	f7e5 fc8e 	bl	8000288 <__aeabi_dsub>
 801a96c:	4602      	mov	r2, r0
 801a96e:	460b      	mov	r3, r1
 801a970:	f7e5 ff6c 	bl	800084c <__aeabi_ddiv>
 801a974:	ec41 0b10 	vmov	d0, r0, r1
 801a978:	e7ee      	b.n	801a958 <__ieee754_acos+0x28>
 801a97a:	49a8      	ldr	r1, [pc, #672]	; (801ac1c <__ieee754_acos+0x2ec>)
 801a97c:	428b      	cmp	r3, r1
 801a97e:	f300 8087 	bgt.w	801aa90 <__ieee754_acos+0x160>
 801a982:	4aa7      	ldr	r2, [pc, #668]	; (801ac20 <__ieee754_acos+0x2f0>)
 801a984:	4293      	cmp	r3, r2
 801a986:	f340 81f9 	ble.w	801ad7c <__ieee754_acos+0x44c>
 801a98a:	ee10 2a10 	vmov	r2, s0
 801a98e:	ee10 0a10 	vmov	r0, s0
 801a992:	462b      	mov	r3, r5
 801a994:	4629      	mov	r1, r5
 801a996:	f7e5 fe2f 	bl	80005f8 <__aeabi_dmul>
 801a99a:	a387      	add	r3, pc, #540	; (adr r3, 801abb8 <__ieee754_acos+0x288>)
 801a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9a0:	4606      	mov	r6, r0
 801a9a2:	460f      	mov	r7, r1
 801a9a4:	f7e5 fe28 	bl	80005f8 <__aeabi_dmul>
 801a9a8:	a385      	add	r3, pc, #532	; (adr r3, 801abc0 <__ieee754_acos+0x290>)
 801a9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9ae:	f7e5 fc6d 	bl	800028c <__adddf3>
 801a9b2:	4632      	mov	r2, r6
 801a9b4:	463b      	mov	r3, r7
 801a9b6:	f7e5 fe1f 	bl	80005f8 <__aeabi_dmul>
 801a9ba:	a383      	add	r3, pc, #524	; (adr r3, 801abc8 <__ieee754_acos+0x298>)
 801a9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9c0:	f7e5 fc62 	bl	8000288 <__aeabi_dsub>
 801a9c4:	4632      	mov	r2, r6
 801a9c6:	463b      	mov	r3, r7
 801a9c8:	f7e5 fe16 	bl	80005f8 <__aeabi_dmul>
 801a9cc:	a380      	add	r3, pc, #512	; (adr r3, 801abd0 <__ieee754_acos+0x2a0>)
 801a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9d2:	f7e5 fc5b 	bl	800028c <__adddf3>
 801a9d6:	4632      	mov	r2, r6
 801a9d8:	463b      	mov	r3, r7
 801a9da:	f7e5 fe0d 	bl	80005f8 <__aeabi_dmul>
 801a9de:	a37e      	add	r3, pc, #504	; (adr r3, 801abd8 <__ieee754_acos+0x2a8>)
 801a9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9e4:	f7e5 fc50 	bl	8000288 <__aeabi_dsub>
 801a9e8:	4632      	mov	r2, r6
 801a9ea:	463b      	mov	r3, r7
 801a9ec:	f7e5 fe04 	bl	80005f8 <__aeabi_dmul>
 801a9f0:	a37b      	add	r3, pc, #492	; (adr r3, 801abe0 <__ieee754_acos+0x2b0>)
 801a9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9f6:	f7e5 fc49 	bl	800028c <__adddf3>
 801a9fa:	4632      	mov	r2, r6
 801a9fc:	463b      	mov	r3, r7
 801a9fe:	f7e5 fdfb 	bl	80005f8 <__aeabi_dmul>
 801aa02:	a379      	add	r3, pc, #484	; (adr r3, 801abe8 <__ieee754_acos+0x2b8>)
 801aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa08:	4680      	mov	r8, r0
 801aa0a:	4689      	mov	r9, r1
 801aa0c:	4630      	mov	r0, r6
 801aa0e:	4639      	mov	r1, r7
 801aa10:	f7e5 fdf2 	bl	80005f8 <__aeabi_dmul>
 801aa14:	a376      	add	r3, pc, #472	; (adr r3, 801abf0 <__ieee754_acos+0x2c0>)
 801aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa1a:	f7e5 fc35 	bl	8000288 <__aeabi_dsub>
 801aa1e:	4632      	mov	r2, r6
 801aa20:	463b      	mov	r3, r7
 801aa22:	f7e5 fde9 	bl	80005f8 <__aeabi_dmul>
 801aa26:	a374      	add	r3, pc, #464	; (adr r3, 801abf8 <__ieee754_acos+0x2c8>)
 801aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa2c:	f7e5 fc2e 	bl	800028c <__adddf3>
 801aa30:	4632      	mov	r2, r6
 801aa32:	463b      	mov	r3, r7
 801aa34:	f7e5 fde0 	bl	80005f8 <__aeabi_dmul>
 801aa38:	a371      	add	r3, pc, #452	; (adr r3, 801ac00 <__ieee754_acos+0x2d0>)
 801aa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa3e:	f7e5 fc23 	bl	8000288 <__aeabi_dsub>
 801aa42:	4632      	mov	r2, r6
 801aa44:	463b      	mov	r3, r7
 801aa46:	f7e5 fdd7 	bl	80005f8 <__aeabi_dmul>
 801aa4a:	4b76      	ldr	r3, [pc, #472]	; (801ac24 <__ieee754_acos+0x2f4>)
 801aa4c:	2200      	movs	r2, #0
 801aa4e:	f7e5 fc1d 	bl	800028c <__adddf3>
 801aa52:	4602      	mov	r2, r0
 801aa54:	460b      	mov	r3, r1
 801aa56:	4640      	mov	r0, r8
 801aa58:	4649      	mov	r1, r9
 801aa5a:	f7e5 fef7 	bl	800084c <__aeabi_ddiv>
 801aa5e:	4622      	mov	r2, r4
 801aa60:	462b      	mov	r3, r5
 801aa62:	f7e5 fdc9 	bl	80005f8 <__aeabi_dmul>
 801aa66:	4602      	mov	r2, r0
 801aa68:	460b      	mov	r3, r1
 801aa6a:	a167      	add	r1, pc, #412	; (adr r1, 801ac08 <__ieee754_acos+0x2d8>)
 801aa6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa70:	f7e5 fc0a 	bl	8000288 <__aeabi_dsub>
 801aa74:	4602      	mov	r2, r0
 801aa76:	460b      	mov	r3, r1
 801aa78:	4620      	mov	r0, r4
 801aa7a:	4629      	mov	r1, r5
 801aa7c:	f7e5 fc04 	bl	8000288 <__aeabi_dsub>
 801aa80:	4602      	mov	r2, r0
 801aa82:	460b      	mov	r3, r1
 801aa84:	a162      	add	r1, pc, #392	; (adr r1, 801ac10 <__ieee754_acos+0x2e0>)
 801aa86:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa8a:	f7e5 fbfd 	bl	8000288 <__aeabi_dsub>
 801aa8e:	e771      	b.n	801a974 <__ieee754_acos+0x44>
 801aa90:	2d00      	cmp	r5, #0
 801aa92:	f280 80cb 	bge.w	801ac2c <__ieee754_acos+0x2fc>
 801aa96:	ee10 0a10 	vmov	r0, s0
 801aa9a:	4b62      	ldr	r3, [pc, #392]	; (801ac24 <__ieee754_acos+0x2f4>)
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	4629      	mov	r1, r5
 801aaa0:	f7e5 fbf4 	bl	800028c <__adddf3>
 801aaa4:	4b60      	ldr	r3, [pc, #384]	; (801ac28 <__ieee754_acos+0x2f8>)
 801aaa6:	2200      	movs	r2, #0
 801aaa8:	f7e5 fda6 	bl	80005f8 <__aeabi_dmul>
 801aaac:	a342      	add	r3, pc, #264	; (adr r3, 801abb8 <__ieee754_acos+0x288>)
 801aaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aab2:	4604      	mov	r4, r0
 801aab4:	460d      	mov	r5, r1
 801aab6:	f7e5 fd9f 	bl	80005f8 <__aeabi_dmul>
 801aaba:	a341      	add	r3, pc, #260	; (adr r3, 801abc0 <__ieee754_acos+0x290>)
 801aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aac0:	f7e5 fbe4 	bl	800028c <__adddf3>
 801aac4:	4622      	mov	r2, r4
 801aac6:	462b      	mov	r3, r5
 801aac8:	f7e5 fd96 	bl	80005f8 <__aeabi_dmul>
 801aacc:	a33e      	add	r3, pc, #248	; (adr r3, 801abc8 <__ieee754_acos+0x298>)
 801aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aad2:	f7e5 fbd9 	bl	8000288 <__aeabi_dsub>
 801aad6:	4622      	mov	r2, r4
 801aad8:	462b      	mov	r3, r5
 801aada:	f7e5 fd8d 	bl	80005f8 <__aeabi_dmul>
 801aade:	a33c      	add	r3, pc, #240	; (adr r3, 801abd0 <__ieee754_acos+0x2a0>)
 801aae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aae4:	f7e5 fbd2 	bl	800028c <__adddf3>
 801aae8:	4622      	mov	r2, r4
 801aaea:	462b      	mov	r3, r5
 801aaec:	f7e5 fd84 	bl	80005f8 <__aeabi_dmul>
 801aaf0:	a339      	add	r3, pc, #228	; (adr r3, 801abd8 <__ieee754_acos+0x2a8>)
 801aaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaf6:	f7e5 fbc7 	bl	8000288 <__aeabi_dsub>
 801aafa:	4622      	mov	r2, r4
 801aafc:	462b      	mov	r3, r5
 801aafe:	f7e5 fd7b 	bl	80005f8 <__aeabi_dmul>
 801ab02:	a337      	add	r3, pc, #220	; (adr r3, 801abe0 <__ieee754_acos+0x2b0>)
 801ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab08:	f7e5 fbc0 	bl	800028c <__adddf3>
 801ab0c:	4622      	mov	r2, r4
 801ab0e:	462b      	mov	r3, r5
 801ab10:	f7e5 fd72 	bl	80005f8 <__aeabi_dmul>
 801ab14:	ec45 4b10 	vmov	d0, r4, r5
 801ab18:	4680      	mov	r8, r0
 801ab1a:	4689      	mov	r9, r1
 801ab1c:	f7ff fadc 	bl	801a0d8 <__ieee754_sqrt>
 801ab20:	a331      	add	r3, pc, #196	; (adr r3, 801abe8 <__ieee754_acos+0x2b8>)
 801ab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab26:	4620      	mov	r0, r4
 801ab28:	4629      	mov	r1, r5
 801ab2a:	ec57 6b10 	vmov	r6, r7, d0
 801ab2e:	f7e5 fd63 	bl	80005f8 <__aeabi_dmul>
 801ab32:	a32f      	add	r3, pc, #188	; (adr r3, 801abf0 <__ieee754_acos+0x2c0>)
 801ab34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab38:	f7e5 fba6 	bl	8000288 <__aeabi_dsub>
 801ab3c:	4622      	mov	r2, r4
 801ab3e:	462b      	mov	r3, r5
 801ab40:	f7e5 fd5a 	bl	80005f8 <__aeabi_dmul>
 801ab44:	a32c      	add	r3, pc, #176	; (adr r3, 801abf8 <__ieee754_acos+0x2c8>)
 801ab46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab4a:	f7e5 fb9f 	bl	800028c <__adddf3>
 801ab4e:	4622      	mov	r2, r4
 801ab50:	462b      	mov	r3, r5
 801ab52:	f7e5 fd51 	bl	80005f8 <__aeabi_dmul>
 801ab56:	a32a      	add	r3, pc, #168	; (adr r3, 801ac00 <__ieee754_acos+0x2d0>)
 801ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab5c:	f7e5 fb94 	bl	8000288 <__aeabi_dsub>
 801ab60:	4622      	mov	r2, r4
 801ab62:	462b      	mov	r3, r5
 801ab64:	f7e5 fd48 	bl	80005f8 <__aeabi_dmul>
 801ab68:	4b2e      	ldr	r3, [pc, #184]	; (801ac24 <__ieee754_acos+0x2f4>)
 801ab6a:	2200      	movs	r2, #0
 801ab6c:	f7e5 fb8e 	bl	800028c <__adddf3>
 801ab70:	4602      	mov	r2, r0
 801ab72:	460b      	mov	r3, r1
 801ab74:	4640      	mov	r0, r8
 801ab76:	4649      	mov	r1, r9
 801ab78:	f7e5 fe68 	bl	800084c <__aeabi_ddiv>
 801ab7c:	4632      	mov	r2, r6
 801ab7e:	463b      	mov	r3, r7
 801ab80:	f7e5 fd3a 	bl	80005f8 <__aeabi_dmul>
 801ab84:	a320      	add	r3, pc, #128	; (adr r3, 801ac08 <__ieee754_acos+0x2d8>)
 801ab86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab8a:	f7e5 fb7d 	bl	8000288 <__aeabi_dsub>
 801ab8e:	4632      	mov	r2, r6
 801ab90:	463b      	mov	r3, r7
 801ab92:	f7e5 fb7b 	bl	800028c <__adddf3>
 801ab96:	4602      	mov	r2, r0
 801ab98:	460b      	mov	r3, r1
 801ab9a:	f7e5 fb77 	bl	800028c <__adddf3>
 801ab9e:	4602      	mov	r2, r0
 801aba0:	460b      	mov	r3, r1
 801aba2:	a103      	add	r1, pc, #12	; (adr r1, 801abb0 <__ieee754_acos+0x280>)
 801aba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aba8:	e76f      	b.n	801aa8a <__ieee754_acos+0x15a>
 801abaa:	bf00      	nop
 801abac:	f3af 8000 	nop.w
 801abb0:	54442d18 	.word	0x54442d18
 801abb4:	400921fb 	.word	0x400921fb
 801abb8:	0dfdf709 	.word	0x0dfdf709
 801abbc:	3f023de1 	.word	0x3f023de1
 801abc0:	7501b288 	.word	0x7501b288
 801abc4:	3f49efe0 	.word	0x3f49efe0
 801abc8:	b5688f3b 	.word	0xb5688f3b
 801abcc:	3fa48228 	.word	0x3fa48228
 801abd0:	0e884455 	.word	0x0e884455
 801abd4:	3fc9c155 	.word	0x3fc9c155
 801abd8:	03eb6f7d 	.word	0x03eb6f7d
 801abdc:	3fd4d612 	.word	0x3fd4d612
 801abe0:	55555555 	.word	0x55555555
 801abe4:	3fc55555 	.word	0x3fc55555
 801abe8:	b12e9282 	.word	0xb12e9282
 801abec:	3fb3b8c5 	.word	0x3fb3b8c5
 801abf0:	1b8d0159 	.word	0x1b8d0159
 801abf4:	3fe6066c 	.word	0x3fe6066c
 801abf8:	9c598ac8 	.word	0x9c598ac8
 801abfc:	40002ae5 	.word	0x40002ae5
 801ac00:	1c8a2d4b 	.word	0x1c8a2d4b
 801ac04:	40033a27 	.word	0x40033a27
 801ac08:	33145c07 	.word	0x33145c07
 801ac0c:	3c91a626 	.word	0x3c91a626
 801ac10:	54442d18 	.word	0x54442d18
 801ac14:	3ff921fb 	.word	0x3ff921fb
 801ac18:	3fefffff 	.word	0x3fefffff
 801ac1c:	3fdfffff 	.word	0x3fdfffff
 801ac20:	3c600000 	.word	0x3c600000
 801ac24:	3ff00000 	.word	0x3ff00000
 801ac28:	3fe00000 	.word	0x3fe00000
 801ac2c:	ee10 2a10 	vmov	r2, s0
 801ac30:	462b      	mov	r3, r5
 801ac32:	496d      	ldr	r1, [pc, #436]	; (801ade8 <__ieee754_acos+0x4b8>)
 801ac34:	2000      	movs	r0, #0
 801ac36:	f7e5 fb27 	bl	8000288 <__aeabi_dsub>
 801ac3a:	4b6c      	ldr	r3, [pc, #432]	; (801adec <__ieee754_acos+0x4bc>)
 801ac3c:	2200      	movs	r2, #0
 801ac3e:	f7e5 fcdb 	bl	80005f8 <__aeabi_dmul>
 801ac42:	4604      	mov	r4, r0
 801ac44:	460d      	mov	r5, r1
 801ac46:	ec45 4b10 	vmov	d0, r4, r5
 801ac4a:	f7ff fa45 	bl	801a0d8 <__ieee754_sqrt>
 801ac4e:	a34e      	add	r3, pc, #312	; (adr r3, 801ad88 <__ieee754_acos+0x458>)
 801ac50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac54:	4620      	mov	r0, r4
 801ac56:	4629      	mov	r1, r5
 801ac58:	ec59 8b10 	vmov	r8, r9, d0
 801ac5c:	f7e5 fccc 	bl	80005f8 <__aeabi_dmul>
 801ac60:	a34b      	add	r3, pc, #300	; (adr r3, 801ad90 <__ieee754_acos+0x460>)
 801ac62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac66:	f7e5 fb11 	bl	800028c <__adddf3>
 801ac6a:	4622      	mov	r2, r4
 801ac6c:	462b      	mov	r3, r5
 801ac6e:	f7e5 fcc3 	bl	80005f8 <__aeabi_dmul>
 801ac72:	a349      	add	r3, pc, #292	; (adr r3, 801ad98 <__ieee754_acos+0x468>)
 801ac74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac78:	f7e5 fb06 	bl	8000288 <__aeabi_dsub>
 801ac7c:	4622      	mov	r2, r4
 801ac7e:	462b      	mov	r3, r5
 801ac80:	f7e5 fcba 	bl	80005f8 <__aeabi_dmul>
 801ac84:	a346      	add	r3, pc, #280	; (adr r3, 801ada0 <__ieee754_acos+0x470>)
 801ac86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac8a:	f7e5 faff 	bl	800028c <__adddf3>
 801ac8e:	4622      	mov	r2, r4
 801ac90:	462b      	mov	r3, r5
 801ac92:	f7e5 fcb1 	bl	80005f8 <__aeabi_dmul>
 801ac96:	a344      	add	r3, pc, #272	; (adr r3, 801ada8 <__ieee754_acos+0x478>)
 801ac98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac9c:	f7e5 faf4 	bl	8000288 <__aeabi_dsub>
 801aca0:	4622      	mov	r2, r4
 801aca2:	462b      	mov	r3, r5
 801aca4:	f7e5 fca8 	bl	80005f8 <__aeabi_dmul>
 801aca8:	a341      	add	r3, pc, #260	; (adr r3, 801adb0 <__ieee754_acos+0x480>)
 801acaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acae:	f7e5 faed 	bl	800028c <__adddf3>
 801acb2:	4622      	mov	r2, r4
 801acb4:	462b      	mov	r3, r5
 801acb6:	f7e5 fc9f 	bl	80005f8 <__aeabi_dmul>
 801acba:	a33f      	add	r3, pc, #252	; (adr r3, 801adb8 <__ieee754_acos+0x488>)
 801acbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acc0:	4682      	mov	sl, r0
 801acc2:	468b      	mov	fp, r1
 801acc4:	4620      	mov	r0, r4
 801acc6:	4629      	mov	r1, r5
 801acc8:	f7e5 fc96 	bl	80005f8 <__aeabi_dmul>
 801accc:	a33c      	add	r3, pc, #240	; (adr r3, 801adc0 <__ieee754_acos+0x490>)
 801acce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acd2:	f7e5 fad9 	bl	8000288 <__aeabi_dsub>
 801acd6:	4622      	mov	r2, r4
 801acd8:	462b      	mov	r3, r5
 801acda:	f7e5 fc8d 	bl	80005f8 <__aeabi_dmul>
 801acde:	a33a      	add	r3, pc, #232	; (adr r3, 801adc8 <__ieee754_acos+0x498>)
 801ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ace4:	f7e5 fad2 	bl	800028c <__adddf3>
 801ace8:	4622      	mov	r2, r4
 801acea:	462b      	mov	r3, r5
 801acec:	f7e5 fc84 	bl	80005f8 <__aeabi_dmul>
 801acf0:	a337      	add	r3, pc, #220	; (adr r3, 801add0 <__ieee754_acos+0x4a0>)
 801acf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acf6:	f7e5 fac7 	bl	8000288 <__aeabi_dsub>
 801acfa:	4622      	mov	r2, r4
 801acfc:	462b      	mov	r3, r5
 801acfe:	f7e5 fc7b 	bl	80005f8 <__aeabi_dmul>
 801ad02:	4b39      	ldr	r3, [pc, #228]	; (801ade8 <__ieee754_acos+0x4b8>)
 801ad04:	2200      	movs	r2, #0
 801ad06:	f7e5 fac1 	bl	800028c <__adddf3>
 801ad0a:	4602      	mov	r2, r0
 801ad0c:	460b      	mov	r3, r1
 801ad0e:	4650      	mov	r0, sl
 801ad10:	4659      	mov	r1, fp
 801ad12:	f7e5 fd9b 	bl	800084c <__aeabi_ddiv>
 801ad16:	4642      	mov	r2, r8
 801ad18:	464b      	mov	r3, r9
 801ad1a:	f7e5 fc6d 	bl	80005f8 <__aeabi_dmul>
 801ad1e:	2600      	movs	r6, #0
 801ad20:	4682      	mov	sl, r0
 801ad22:	468b      	mov	fp, r1
 801ad24:	4632      	mov	r2, r6
 801ad26:	464b      	mov	r3, r9
 801ad28:	4630      	mov	r0, r6
 801ad2a:	4649      	mov	r1, r9
 801ad2c:	f7e5 fc64 	bl	80005f8 <__aeabi_dmul>
 801ad30:	4602      	mov	r2, r0
 801ad32:	460b      	mov	r3, r1
 801ad34:	4620      	mov	r0, r4
 801ad36:	4629      	mov	r1, r5
 801ad38:	f7e5 faa6 	bl	8000288 <__aeabi_dsub>
 801ad3c:	4632      	mov	r2, r6
 801ad3e:	4604      	mov	r4, r0
 801ad40:	460d      	mov	r5, r1
 801ad42:	464b      	mov	r3, r9
 801ad44:	4640      	mov	r0, r8
 801ad46:	4649      	mov	r1, r9
 801ad48:	f7e5 faa0 	bl	800028c <__adddf3>
 801ad4c:	4602      	mov	r2, r0
 801ad4e:	460b      	mov	r3, r1
 801ad50:	4620      	mov	r0, r4
 801ad52:	4629      	mov	r1, r5
 801ad54:	f7e5 fd7a 	bl	800084c <__aeabi_ddiv>
 801ad58:	4602      	mov	r2, r0
 801ad5a:	460b      	mov	r3, r1
 801ad5c:	4650      	mov	r0, sl
 801ad5e:	4659      	mov	r1, fp
 801ad60:	f7e5 fa94 	bl	800028c <__adddf3>
 801ad64:	4632      	mov	r2, r6
 801ad66:	464b      	mov	r3, r9
 801ad68:	f7e5 fa90 	bl	800028c <__adddf3>
 801ad6c:	4602      	mov	r2, r0
 801ad6e:	460b      	mov	r3, r1
 801ad70:	f7e5 fa8c 	bl	800028c <__adddf3>
 801ad74:	e5fe      	b.n	801a974 <__ieee754_acos+0x44>
 801ad76:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801add8 <__ieee754_acos+0x4a8>
 801ad7a:	e5ed      	b.n	801a958 <__ieee754_acos+0x28>
 801ad7c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801ade0 <__ieee754_acos+0x4b0>
 801ad80:	e5ea      	b.n	801a958 <__ieee754_acos+0x28>
 801ad82:	bf00      	nop
 801ad84:	f3af 8000 	nop.w
 801ad88:	0dfdf709 	.word	0x0dfdf709
 801ad8c:	3f023de1 	.word	0x3f023de1
 801ad90:	7501b288 	.word	0x7501b288
 801ad94:	3f49efe0 	.word	0x3f49efe0
 801ad98:	b5688f3b 	.word	0xb5688f3b
 801ad9c:	3fa48228 	.word	0x3fa48228
 801ada0:	0e884455 	.word	0x0e884455
 801ada4:	3fc9c155 	.word	0x3fc9c155
 801ada8:	03eb6f7d 	.word	0x03eb6f7d
 801adac:	3fd4d612 	.word	0x3fd4d612
 801adb0:	55555555 	.word	0x55555555
 801adb4:	3fc55555 	.word	0x3fc55555
 801adb8:	b12e9282 	.word	0xb12e9282
 801adbc:	3fb3b8c5 	.word	0x3fb3b8c5
 801adc0:	1b8d0159 	.word	0x1b8d0159
 801adc4:	3fe6066c 	.word	0x3fe6066c
 801adc8:	9c598ac8 	.word	0x9c598ac8
 801adcc:	40002ae5 	.word	0x40002ae5
 801add0:	1c8a2d4b 	.word	0x1c8a2d4b
 801add4:	40033a27 	.word	0x40033a27
	...
 801ade0:	54442d18 	.word	0x54442d18
 801ade4:	3ff921fb 	.word	0x3ff921fb
 801ade8:	3ff00000 	.word	0x3ff00000
 801adec:	3fe00000 	.word	0x3fe00000

0801adf0 <_init>:
 801adf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adf2:	bf00      	nop
 801adf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801adf6:	bc08      	pop	{r3}
 801adf8:	469e      	mov	lr, r3
 801adfa:	4770      	bx	lr

0801adfc <_fini>:
 801adfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adfe:	bf00      	nop
 801ae00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ae02:	bc08      	pop	{r3}
 801ae04:	469e      	mov	lr, r3
 801ae06:	4770      	bx	lr
