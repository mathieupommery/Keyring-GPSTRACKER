
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a930  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002550  0801aac0  0801aac0  0002aac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d010  0801d010  00030308  2**0
                  CONTENTS
  4 .ARM          00000008  0801d010  0801d010  0002d010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d018  0801d018  00030308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d018  0801d018  0002d018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d01c  0801d01c  0002d01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  0801d020  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000228c  20000308  0801d328  00030308  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002594  0801d328  00032594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ca59  00000000  00000000  0003037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006268  00000000  00000000  0005cdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002300  00000000  00000000  00063040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ae6  00000000  00000000  00065340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008f66  00000000  00000000  00066e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003027b  00000000  00000000  0006fd8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8ec8  00000000  00000000  000a0007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000adfc  00000000  00000000  00188ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00193ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000308 	.word	0x20000308
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801aaa8 	.word	0x0801aaa8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000030c 	.word	0x2000030c
 80001cc:	0801aaa8 	.word	0x0801aaa8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001006:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001008:	4a38      	ldr	r2, [pc, #224]	; (80010ec <MX_ADC1_Init+0xfc>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001012:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800101e:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001020:	2201      	movs	r2, #1
 8001022:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001024:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001026:	2204      	movs	r2, #4
 8001028:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800102c:	2200      	movs	r2, #0
 800102e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001032:	2201      	movs	r2, #1
 8001034:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001036:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001038:	2203      	movs	r2, #3
 800103a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001046:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800104e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800105e:	2200      	movs	r2, #0
 8001060:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106a:	481f      	ldr	r0, [pc, #124]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800106c:	f005 fa5a 	bl	8006524 <HAL_ADC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001076:	f000 fcaa 	bl	80019ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_ADC1_Init+0x100>)
 800107c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800107e:	2306      	movs	r3, #6
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001082:	2307      	movs	r3, #7
 8001084:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001086:	237f      	movs	r3, #127	; 0x7f
 8001088:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800108a:	2304      	movs	r3, #4
 800108c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001098:	f005 fddc 	bl	8006c54 <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010a2:	f000 fc94 	bl	80019ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_ADC1_Init+0x104>)
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010aa:	230c      	movs	r3, #12
 80010ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_ADC1_Init+0xf8>)
 80010b4:	f005 fdce 	bl	8006c54 <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80010be:	f000 fc86 	bl	80019ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <MX_ADC1_Init+0x108>)
 80010c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010c6:	2312      	movs	r3, #18
 80010c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_ADC1_Init+0xf8>)
 80010d0:	f005 fdc0 	bl	8006c54 <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80010da:	f000 fc78 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000324 	.word	0x20000324
 80010ec:	50040000 	.word	0x50040000
 80010f0:	80000001 	.word	0x80000001
 80010f4:	c7520000 	.word	0xc7520000
 80010f8:	25b00200 	.word	0x25b00200

080010fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <HAL_ADC_MspInit+0xdc>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d157      	bne.n	80011ce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800111e:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a2e      	ldr	r2, [pc, #184]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001124:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b29      	ldr	r3, [pc, #164]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a28      	ldr	r2, [pc, #160]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800114e:	2310      	movs	r3, #16
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001152:	230b      	movs	r3, #11
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f006 fe38 	bl	8007dd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 800116c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800118c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001194:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001198:	2200      	movs	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011a2:	480f      	ldr	r0, [pc, #60]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011a4:	f006 fb96 	bl	80078d4 <HAL_DMA_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80011ae:	f000 fc0e 	bl	80019ce <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2012      	movs	r0, #18
 80011c4:	f006 fb4f 	bl	8007866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80011c8:	2012      	movs	r0, #18
 80011ca:	f006 fb68 	bl	800789e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	50040000 	.word	0x50040000
 80011dc:	40021000 	.word	0x40021000
 80011e0:	20000388 	.word	0x20000388
 80011e4:	40020008 	.word	0x40020008

080011e8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80011e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a54      	ldr	r2, [pc, #336]	; (8001348 <HAL_ADC_ConvCpltCallback+0x160>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	f040 8091 	bne.w	8001320 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 80011fe:	4b53      	ldr	r3, [pc, #332]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f98e 	bl	8000524 <__aeabi_i2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	a14a      	add	r1, pc, #296	; (adr r1, 8001338 <HAL_ADC_ConvCpltCallback+0x150>)
 800120e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001212:	f7ff fb1b 	bl	800084c <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fce3 	bl	8000be8 <__aeabi_d2f>
 8001222:	4603      	mov	r3, r0
 8001224:	4a4a      	ldr	r2, [pc, #296]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 8001226:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001228:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <HAL_ADC_ConvCpltCallback+0x16c>)
 800122a:	ed93 7a00 	vldr	s14, [r3]
 800122e:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <HAL_ADC_ConvCpltCallback+0x170>)
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001238:	ee17 0a90 	vmov	r0, s15
 800123c:	f7ff f984 	bl	8000548 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	f04f 0000 	mov.w	r0, #0
 8001248:	4944      	ldr	r1, [pc, #272]	; (800135c <HAL_ADC_ConvCpltCallback+0x174>)
 800124a:	f7ff faff 	bl	800084c <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4690      	mov	r8, r2
 8001254:	4699      	mov	r9, r3
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001258:	885b      	ldrh	r3, [r3, #2]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f962 	bl	8000524 <__aeabi_i2d>
 8001260:	4604      	mov	r4, r0
 8001262:	460d      	mov	r5, r1
 8001264:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f96d 	bl	8000548 <__aeabi_f2d>
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <HAL_ADC_ConvCpltCallback+0x178>)
 8001274:	f7ff faea 	bl	800084c <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff f9ba 	bl	80005f8 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4614      	mov	r4, r2
 800128a:	461d      	mov	r5, r3
 800128c:	4b32      	ldr	r3, [pc, #200]	; (8001358 <HAL_ADC_ConvCpltCallback+0x170>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f959 	bl	8000548 <__aeabi_f2d>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4620      	mov	r0, r4
 800129c:	4629      	mov	r1, r5
 800129e:	f7fe fff3 	bl	8000288 <__aeabi_dsub>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4640      	mov	r0, r8
 80012a8:	4649      	mov	r1, r9
 80012aa:	f7ff f9a5 	bl	80005f8 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc97 	bl	8000be8 <__aeabi_d2f>
 80012ba:	ee07 0a10 	vmov	s14, r0
 80012be:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80012c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <HAL_ADC_ConvCpltCallback+0x17c>)
 80012c8:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 80012ce:	889b      	ldrh	r3, [r3, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f927 	bl	8000524 <__aeabi_i2d>
 80012d6:	a31a      	add	r3, pc, #104	; (adr r3, 8001340 <HAL_ADC_ConvCpltCallback+0x158>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff fab6 	bl	800084c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	f7fe ffce 	bl	800028c <__adddf3>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	461d      	mov	r5, r3
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f923 	bl	8000548 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4620      	mov	r0, r4
 8001308:	4629      	mov	r1, r5
 800130a:	f7ff f975 	bl	80005f8 <__aeabi_dmul>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fc67 	bl	8000be8 <__aeabi_d2f>
 800131a:	4603      	mov	r3, r0
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <HAL_ADC_ConvCpltCallback+0x180>)
 800131e:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001320:	2203      	movs	r2, #3
 8001322:	490a      	ldr	r1, [pc, #40]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001324:	4811      	ldr	r0, [pc, #68]	; (800136c <HAL_ADC_ConvCpltCallback+0x184>)
 8001326:	f005 fa3f 	bl	80067a8 <HAL_ADC_Start_DMA>



}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001334:	f3af 8000 	nop.w
 8001338:	d70a3d70 	.word	0xd70a3d70
 800133c:	40b36323 	.word	0x40b36323
 8001340:	00000000 	.word	0x00000000
 8001344:	40affe00 	.word	0x40affe00
 8001348:	50040000 	.word	0x50040000
 800134c:	20000730 	.word	0x20000730
 8001350:	2000073c 	.word	0x2000073c
 8001354:	20000000 	.word	0x20000000
 8001358:	20000004 	.word	0x20000004
 800135c:	40590000 	.word	0x40590000
 8001360:	40080000 	.word	0x40080000
 8001364:	20000738 	.word	0x20000738
 8001368:	20000740 	.word	0x20000740
 800136c:	20000324 	.word	0x20000324

08001370 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001376:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <MX_DMA_Init+0x80>)
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <MX_DMA_Init+0x80>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6493      	str	r3, [r2, #72]	; 0x48
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <MX_DMA_Init+0x80>)
 8001384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <MX_DMA_Init+0x80>)
 8001390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <MX_DMA_Init+0x80>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6493      	str	r3, [r2, #72]	; 0x48
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_DMA_Init+0x80>)
 800139c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	200b      	movs	r0, #11
 80013ac:	f006 fa5b 	bl	8007866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013b0:	200b      	movs	r0, #11
 80013b2:	f006 fa74 	bl	800789e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	200c      	movs	r0, #12
 80013bc:	f006 fa53 	bl	8007866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80013c0:	200c      	movs	r0, #12
 80013c2:	f006 fa6c 	bl	800789e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	200d      	movs	r0, #13
 80013cc:	f006 fa4b 	bl	8007866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80013d0:	200d      	movs	r0, #13
 80013d2:	f006 fa64 	bl	800789e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	2045      	movs	r0, #69	; 0x45
 80013dc:	f006 fa43 	bl	8007866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80013e0:	2045      	movs	r0, #69	; 0x45
 80013e2:	f006 fa5c 	bl	800789e <HAL_NVIC_EnableIRQ>

}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000

080013f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b38      	ldr	r3, [pc, #224]	; (80014ec <MX_GPIO_Init+0xf8>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	4a37      	ldr	r2, [pc, #220]	; (80014ec <MX_GPIO_Init+0xf8>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001416:	4b35      	ldr	r3, [pc, #212]	; (80014ec <MX_GPIO_Init+0xf8>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4b32      	ldr	r3, [pc, #200]	; (80014ec <MX_GPIO_Init+0xf8>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4a31      	ldr	r2, [pc, #196]	; (80014ec <MX_GPIO_Init+0xf8>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <MX_GPIO_Init+0xf8>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2102      	movs	r1, #2
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f006 fe33 	bl	80080ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2101      	movs	r1, #1
 800144a:	4829      	ldr	r0, [pc, #164]	; (80014f0 <MX_GPIO_Init+0xfc>)
 800144c:	f006 fe2e 	bl	80080ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001450:	2302      	movs	r3, #2
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146a:	f006 fcb5 	bl	8007dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 800146e:	2301      	movs	r3, #1
 8001470:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	4619      	mov	r1, r3
 8001484:	481a      	ldr	r0, [pc, #104]	; (80014f0 <MX_GPIO_Init+0xfc>)
 8001486:	f006 fca7 	bl	8007dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800148a:	2302      	movs	r3, #2
 800148c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800148e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	4619      	mov	r1, r3
 800149e:	4814      	ldr	r0, [pc, #80]	; (80014f0 <MX_GPIO_Init+0xfc>)
 80014a0:	f006 fc9a 	bl	8007dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	4619      	mov	r1, r3
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014be:	f006 fc8b 	bl	8007dd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2101      	movs	r1, #1
 80014c6:	2007      	movs	r0, #7
 80014c8:	f006 f9cd 	bl	8007866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014cc:	2007      	movs	r0, #7
 80014ce:	f006 f9e6 	bl	800789e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2102      	movs	r1, #2
 80014d6:	2017      	movs	r0, #23
 80014d8:	f006 f9c5 	bl	8007866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014dc:	2017      	movs	r0, #23
 80014de:	f006 f9de 	bl	800789e <HAL_NVIC_EnableIRQ>

}
 80014e2:	bf00      	nop
 80014e4:	3720      	adds	r7, #32
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	48000400 	.word	0x48000400

080014f4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <MX_I2C1_Init+0x74>)
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <MX_I2C1_Init+0x78>)
 80014fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_I2C1_Init+0x74>)
 8001500:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <MX_I2C1_Init+0x7c>)
 8001502:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <MX_I2C1_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_I2C1_Init+0x74>)
 800150c:	2201      	movs	r2, #1
 800150e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_I2C1_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_I2C1_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_I2C1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_I2C1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_I2C1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800152e:	480e      	ldr	r0, [pc, #56]	; (8001568 <MX_I2C1_Init+0x74>)
 8001530:	f006 fdec 	bl	800810c <HAL_I2C_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800153a:	f000 fa48 	bl	80019ce <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800153e:	2100      	movs	r1, #0
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <MX_I2C1_Init+0x74>)
 8001542:	f007 f9f7 	bl	8008934 <HAL_I2CEx_ConfigAnalogFilter>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800154c:	f000 fa3f 	bl	80019ce <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001550:	2100      	movs	r1, #0
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_I2C1_Init+0x74>)
 8001554:	f007 fa39 	bl	80089ca <HAL_I2CEx_ConfigDigitalFilter>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800155e:	f000 fa36 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200003d0 	.word	0x200003d0
 800156c:	40005400 	.word	0x40005400
 8001570:	00202538 	.word	0x00202538

08001574 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_I2C3_Init+0x7c>)
 800157a:	4a1e      	ldr	r2, [pc, #120]	; (80015f4 <MX_I2C3_Init+0x80>)
 800157c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100618;
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <MX_I2C3_Init+0x7c>)
 8001580:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <MX_I2C3_Init+0x84>)
 8001582:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_I2C3_Init+0x7c>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <MX_I2C3_Init+0x7c>)
 800158c:	2201      	movs	r2, #1
 800158e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_I2C3_Init+0x7c>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <MX_I2C3_Init+0x7c>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_I2C3_Init+0x7c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_I2C3_Init+0x7c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_I2C3_Init+0x7c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015ae:	4810      	ldr	r0, [pc, #64]	; (80015f0 <MX_I2C3_Init+0x7c>)
 80015b0:	f006 fdac 	bl	800810c <HAL_I2C_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80015ba:	f000 fa08 	bl	80019ce <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015be:	2100      	movs	r1, #0
 80015c0:	480b      	ldr	r0, [pc, #44]	; (80015f0 <MX_I2C3_Init+0x7c>)
 80015c2:	f007 f9b7 	bl	8008934 <HAL_I2CEx_ConfigAnalogFilter>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80015cc:	f000 f9ff 	bl	80019ce <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015d0:	2100      	movs	r1, #0
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_I2C3_Init+0x7c>)
 80015d4:	f007 f9f9 	bl	80089ca <HAL_I2CEx_ConfigDigitalFilter>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80015de:	f000 f9f6 	bl	80019ce <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80015e2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80015e6:	f007 fa3d 	bl	8008a64 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000424 	.word	0x20000424
 80015f4:	40005c00 	.word	0x40005c00
 80015f8:	00100618 	.word	0x00100618

080015fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b0a2      	sub	sp, #136	; 0x88
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001614:	f107 0320 	add.w	r3, r7, #32
 8001618:	2254      	movs	r2, #84	; 0x54
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f014 ff48 	bl	80164b2 <memset>
  if(i2cHandle->Instance==I2C1)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a50      	ldr	r2, [pc, #320]	; (8001768 <HAL_I2C_MspInit+0x16c>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d13a      	bne.n	80016a2 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800162c:	2340      	movs	r3, #64	; 0x40
 800162e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001630:	2300      	movs	r3, #0
 8001632:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001634:	f107 0320 	add.w	r3, r7, #32
 8001638:	4618      	mov	r0, r3
 800163a:	f009 fe5d 	bl	800b2f8 <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001644:	f000 f9c3 	bl	80019ce <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b48      	ldr	r3, [pc, #288]	; (800176c <HAL_I2C_MspInit+0x170>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	4a47      	ldr	r2, [pc, #284]	; (800176c <HAL_I2C_MspInit+0x170>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001654:	4b45      	ldr	r3, [pc, #276]	; (800176c <HAL_I2C_MspInit+0x170>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001660:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001664:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001666:	2312      	movs	r3, #18
 8001668:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001674:	2304      	movs	r3, #4
 8001676:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800167e:	4619      	mov	r1, r3
 8001680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001684:	f006 fba8 	bl	8007dd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001688:	4b38      	ldr	r3, [pc, #224]	; (800176c <HAL_I2C_MspInit+0x170>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	4a37      	ldr	r2, [pc, #220]	; (800176c <HAL_I2C_MspInit+0x170>)
 800168e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001692:	6593      	str	r3, [r2, #88]	; 0x58
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <HAL_I2C_MspInit+0x170>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80016a0:	e05d      	b.n	800175e <HAL_I2C_MspInit+0x162>
  else if(i2cHandle->Instance==I2C3)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a32      	ldr	r2, [pc, #200]	; (8001770 <HAL_I2C_MspInit+0x174>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d158      	bne.n	800175e <HAL_I2C_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80016ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 80016b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b8:	f107 0320 	add.w	r3, r7, #32
 80016bc:	4618      	mov	r0, r3
 80016be:	f009 fe1b 	bl	800b2f8 <HAL_RCCEx_PeriphCLKConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80016c8:	f000 f981 	bl	80019ce <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	4a26      	ldr	r2, [pc, #152]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e8:	4a20      	ldr	r2, [pc, #128]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001700:	2312      	movs	r3, #18
 8001702:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800170e:	2304      	movs	r3, #4
 8001710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001718:	4619      	mov	r1, r3
 800171a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171e:	f006 fb5b 	bl	8007dd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001722:	2310      	movs	r3, #16
 8001724:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001726:	2312      	movs	r3, #18
 8001728:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001734:	2304      	movs	r3, #4
 8001736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800173e:	4619      	mov	r1, r3
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <HAL_I2C_MspInit+0x178>)
 8001742:	f006 fb49 	bl	8007dd8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_I2C_MspInit+0x170>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	4a08      	ldr	r2, [pc, #32]	; (800176c <HAL_I2C_MspInit+0x170>)
 800174c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001750:	6593      	str	r3, [r2, #88]	; 0x58
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_I2C_MspInit+0x170>)
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
}
 800175e:	bf00      	nop
 8001760:	3788      	adds	r7, #136	; 0x88
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40005400 	.word	0x40005400
 800176c:	40021000 	.word	0x40021000
 8001770:	40005c00 	.word	0x40005c00
 8001774:	48000400 	.word	0x48000400

08001778 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_8){
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001788:	d104      	bne.n	8001794 <HAL_GPIO_EXTI_Callback+0x1c>

		BTN_A++;
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_GPIO_EXTI_Callback+0x38>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3301      	adds	r3, #1
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_GPIO_EXTI_Callback+0x38>)
 8001792:	6013      	str	r3, [r2, #0]

	}
	if(GPIO_Pin==GPIO_PIN_1){
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d104      	bne.n	80017a4 <HAL_GPIO_EXTI_Callback+0x2c>

		BTN_B++;
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_GPIO_EXTI_Callback+0x3c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80017a2:	6013      	str	r3, [r2, #0]

	}
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	20000708 	.word	0x20000708
 80017b4:	2000070c 	.word	0x2000070c

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017be:	f004 fc3e 	bl	800603e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c2:	f000 f883 	bl	80018cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80017c6:	f000 f8d4 	bl	8001972 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ca:	f7ff fe13 	bl	80013f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80017ce:	f7ff fdcf 	bl	8001370 <MX_DMA_Init>
  MX_I2C3_Init();
 80017d2:	f7ff fecf 	bl	8001574 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 80017d6:	f004 fa6f 	bl	8005cb8 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80017da:	f7ff fc09 	bl	8000ff0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80017de:	f003 ff6d 	bl	80056bc <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80017e2:	f012 f939 	bl	8013a58 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80017e6:	f7ff fe85 	bl	80014f4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80017ea:	f004 fa91 	bl	8005d10 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80017ee:	f000 fd87 	bl	8002300 <MX_SPI1_Init>
  MX_TIM7_Init();
 80017f2:	f003 ffe7 	bl	80057c4 <MX_TIM7_Init>
  MX_TIM6_Init();
 80017f6:	f003 ffaf 	bl	8005758 <MX_TIM6_Init>
  MX_TIM15_Init();
 80017fa:	f004 f81b 	bl	8005834 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */



	ssd1306_Init();
 80017fe:	f001 f87f 	bl	8002900 <ssd1306_Init>

	HAL_Delay(100);
 8001802:	2064      	movs	r0, #100	; 0x64
 8001804:	f004 fc90 	bl	8006128 <HAL_Delay>
	ssd1306_Fill(Black);
 8001808:	2000      	movs	r0, #0
 800180a:	f001 f8e3 	bl	80029d4 <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);
 800180e:	2301      	movs	r3, #1
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	2340      	movs	r3, #64	; 0x40
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2340      	movs	r3, #64	; 0x40
 8001818:	4a1f      	ldr	r2, [pc, #124]	; (8001898 <main+0xe0>)
 800181a:	2120      	movs	r1, #32
 800181c:	2020      	movs	r0, #32
 800181e:	f001 fbab 	bl	8002f78 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001822:	f001 f8ef 	bl	8002a04 <ssd1306_UpdateScreen>


	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001826:	2203      	movs	r2, #3
 8001828:	491c      	ldr	r1, [pc, #112]	; (800189c <main+0xe4>)
 800182a:	481d      	ldr	r0, [pc, #116]	; (80018a0 <main+0xe8>)
 800182c:	f004 ffbc 	bl	80067a8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8001830:	481c      	ldr	r0, [pc, #112]	; (80018a4 <main+0xec>)
 8001832:	f00b f96b 	bl	800cb0c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim15);
 8001836:	481c      	ldr	r0, [pc, #112]	; (80018a8 <main+0xf0>)
 8001838:	f00b f9b4 	bl	800cba4 <HAL_TIM_Base_Start_IT>

	HAL_UART_Abort(&hlpuart1);
 800183c:	481b      	ldr	r0, [pc, #108]	; (80018ac <main+0xf4>)
 800183e:	f00b fe4d 	bl	800d4dc <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8001842:	2240      	movs	r2, #64	; 0x40
 8001844:	491a      	ldr	r1, [pc, #104]	; (80018b0 <main+0xf8>)
 8001846:	4819      	ldr	r0, [pc, #100]	; (80018ac <main+0xf4>)
 8001848:	f00b fdfc 	bl	800d444 <HAL_UART_Receive_DMA>

	memset(flashread,'1',256);
 800184c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001850:	2131      	movs	r1, #49	; 0x31
 8001852:	4818      	ldr	r0, [pc, #96]	; (80018b4 <main+0xfc>)
 8001854:	f014 fe2d 	bl	80164b2 <memset>
	memset(flashwrite,'\0',256);
 8001858:	f44f 7280 	mov.w	r2, #256	; 0x100
 800185c:	2100      	movs	r1, #0
 800185e:	4816      	ldr	r0, [pc, #88]	; (80018b8 <main+0x100>)
 8001860:	f014 fe27 	bl	80164b2 <memset>
	memset((uint8_t *)bufferscreen ,'\0',50);
 8001864:	2232      	movs	r2, #50	; 0x32
 8001866:	2100      	movs	r1, #0
 8001868:	4814      	ldr	r0, [pc, #80]	; (80018bc <main+0x104>)
 800186a:	f014 fe22 	bl	80164b2 <memset>

	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_0);
 800186e:	2301      	movs	r3, #1
 8001870:	4a13      	ldr	r2, [pc, #76]	; (80018c0 <main+0x108>)
 8001872:	4914      	ldr	r1, [pc, #80]	; (80018c4 <main+0x10c>)
 8001874:	4814      	ldr	r0, [pc, #80]	; (80018c8 <main+0x110>)
 8001876:	f011 ffd6 	bl	8013826 <SPIF_Init>



	getindex();
 800187a:	f000 ff0d 	bl	8002698 <getindex>

	ssd1306_Fill(Black);
 800187e:	2000      	movs	r0, #0
 8001880:	f001 f8a8 	bl	80029d4 <ssd1306_Fill>

	HAL_Delay(700);
 8001884:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001888:	f004 fc4e 	bl	8006128 <HAL_Delay>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		statemachine();
 800188c:	f001 fddc 	bl	8003448 <statemachine>
		ssd1306_UpdateScreen();
 8001890:	f001 f8b8 	bl	8002a04 <ssd1306_UpdateScreen>
		statemachine();
 8001894:	e7fa      	b.n	800188c <main+0xd4>
 8001896:	bf00      	nop
 8001898:	0801ad9c 	.word	0x0801ad9c
 800189c:	20000730 	.word	0x20000730
 80018a0:	20000324 	.word	0x20000324
 80018a4:	20000fc4 	.word	0x20000fc4
 80018a8:	200010a8 	.word	0x200010a8
 80018ac:	200010f4 	.word	0x200010f4
 80018b0:	20000484 	.word	0x20000484
 80018b4:	20000858 	.word	0x20000858
 80018b8:	20000758 	.word	0x20000758
 80018bc:	2000097c 	.word	0x2000097c
 80018c0:	48000400 	.word	0x48000400
 80018c4:	20000abc 	.word	0x20000abc
 80018c8:	20000710 	.word	0x20000710

080018cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b096      	sub	sp, #88	; 0x58
 80018d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	2244      	movs	r2, #68	; 0x44
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f014 fde9 	bl	80164b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018f2:	f008 fe63 	bl	800a5bc <HAL_PWREx_ControlVoltageScaling>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80018fc:	f000 f867 	bl	80019ce <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001900:	2310      	movs	r3, #16
 8001902:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001904:	2301      	movs	r3, #1
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800190c:	2360      	movs	r3, #96	; 0x60
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001910:	2302      	movs	r3, #2
 8001912:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001914:	2301      	movs	r3, #1
 8001916:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001918:	2301      	movs	r3, #1
 800191a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800191c:	2314      	movs	r3, #20
 800191e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001920:	2307      	movs	r3, #7
 8001922:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001924:	2302      	movs	r3, #2
 8001926:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001928:	2302      	movs	r3, #2
 800192a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4618      	mov	r0, r3
 8001932:	f008 fea9 	bl	800a688 <HAL_RCC_OscConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800193c:	f000 f847 	bl	80019ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001940:	230f      	movs	r3, #15
 8001942:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001944:	2303      	movs	r3, #3
 8001946:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800194c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001950:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001956:	463b      	mov	r3, r7
 8001958:	2102      	movs	r1, #2
 800195a:	4618      	mov	r0, r3
 800195c:	f009 faa8 	bl	800aeb0 <HAL_RCC_ClockConfig>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001966:	f000 f832 	bl	80019ce <Error_Handler>
  }
}
 800196a:	bf00      	nop
 800196c:	3758      	adds	r7, #88	; 0x58
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b096      	sub	sp, #88	; 0x58
 8001976:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	2254      	movs	r2, #84	; 0x54
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f014 fd97 	bl	80164b2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001984:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001988:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800198a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800198e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001990:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001994:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001996:	2301      	movs	r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800199a:	2301      	movs	r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800199e:	2318      	movs	r3, #24
 80019a0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019a2:	2307      	movs	r3, #7
 80019a4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019a6:	2302      	movs	r3, #2
 80019a8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019aa:	2302      	movs	r3, #2
 80019ac:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80019ae:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80019b2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	4618      	mov	r0, r3
 80019b8:	f009 fc9e 	bl	800b2f8 <HAL_RCCEx_PeriphCLKConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80019c2:	f000 f804 	bl	80019ce <Error_Handler>
  }
}
 80019c6:	bf00      	nop
 80019c8:	3758      	adds	r7, #88	; 0x58
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d2:	b672      	cpsid	i
}
 80019d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019d6:	e7fe      	b.n	80019d6 <Error_Handler+0x8>

080019d8 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7fe fc45 	bl	8000270 <strlen>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d801      	bhi.n	80019f0 <gps_checksum+0x18>
 80019ec:	2300      	movs	r3, #0
 80019ee:	e038      	b.n	8001a62 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7fe fc3d 	bl	8000270 <strlen>
 80019f6:	4603      	mov	r3, r0
 80019f8:	3b04      	subs	r3, #4
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7fe fc34 	bl	8000270 <strlen>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	3b03      	subs	r3, #3
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	e00a      	b.n	8001a34 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	4053      	eors	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	3301      	adds	r3, #1
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7fe fc1b 	bl	8000270 <strlen>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	1f5a      	subs	r2, r3, #5
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d8ec      	bhi.n	8001a1e <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8001a44:	f107 0308 	add.w	r3, r7, #8
 8001a48:	2210      	movs	r2, #16
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f013 fd57 	bl	8015500 <strtol>
 8001a52:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d101      	bne.n	8001a60 <gps_checksum+0x88>
        return 1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8001a60:	2300      	movs	r3, #0
    }
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b0b7      	sub	sp, #220	; 0xdc
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8001a7c:	f107 0320 	add.w	r3, r7, #32
 8001a80:	2264      	movs	r2, #100	; 0x64
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f014 fd14 	bl	80164b2 <memset>
    char *marker = strtok(inputString, ",");
 8001a8a:	49c2      	ldr	r1, [pc, #776]	; (8001d94 <nmea_GPGGA+0x328>)
 8001a8c:	6838      	ldr	r0, [r7, #0]
 8001a8e:	f014 fd2b 	bl	80164e8 <strtok>
 8001a92:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001a96:	e027      	b.n	8001ae8 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001a98:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001a9c:	f7fe fbe8 	bl	8000270 <strlen>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001aa8:	1c63      	adds	r3, r4, #1
 8001aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001aae:	4610      	mov	r0, r2
 8001ab0:	f012 fd6e 	bl	8014590 <malloc>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	00a3      	lsls	r3, r4, #2
 8001aba:	33d8      	adds	r3, #216	; 0xd8
 8001abc:	443b      	add	r3, r7
 8001abe:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	33d8      	adds	r3, #216	; 0xd8
 8001acc:	443b      	add	r3, r7
 8001ace:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001ad2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f014 fdff 	bl	80166da <strcpy>
        marker = strtok(NULL, ",");
 8001adc:	49ad      	ldr	r1, [pc, #692]	; (8001d94 <nmea_GPGGA+0x328>)
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f014 fd02 	bl	80164e8 <strtok>
 8001ae4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001ae8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1d3      	bne.n	8001a98 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8001af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8001af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	332c      	adds	r3, #44	; 0x2c
 8001b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f014 fde6 	bl	80166da <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8001b0e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001b12:	2b53      	cmp	r3, #83	; 0x53
 8001b14:	d004      	beq.n	8001b20 <nmea_GPGGA+0xb4>
 8001b16:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001b1a:	2b4e      	cmp	r3, #78	; 0x4e
 8001b1c:	f040 8159 	bne.w	8001dd2 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8001b20:	2300      	movs	r3, #0
 8001b22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b26:	e010      	b.n	8001b4a <nmea_GPGGA+0xde>
 8001b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b2e:	4413      	add	r3, r2
 8001b30:	7819      	ldrb	r1, [r3, #0]
 8001b32:	f107 021c 	add.w	r2, r7, #28
 8001b36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b3a:	4413      	add	r3, r2
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	701a      	strb	r2, [r3, #0]
 8001b40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b44:	3301      	adds	r3, #1
 8001b46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	ddea      	ble.n	8001b28 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b58:	e011      	b.n	8001b7e <nmea_GPGGA+0x112>
 8001b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b60:	3302      	adds	r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	7819      	ldrb	r1, [r3, #0]
 8001b66:	f107 0214 	add.w	r2, r7, #20
 8001b6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b6e:	4413      	add	r3, r2
 8001b70:	460a      	mov	r2, r1
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b82:	2b05      	cmp	r3, #5
 8001b84:	dde9      	ble.n	8001b5a <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	220a      	movs	r2, #10
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f013 fcb6 	bl	8015500 <strtol>
 8001b94:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f013 fbc4 	bl	801532c <strtof>
 8001ba4:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001ba8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb4:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001bb8:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8001d98 <nmea_GPGGA+0x32c>
 8001bbc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc4:	ee17 0a90 	vmov	r0, s15
 8001bc8:	f7fe fcbe 	bl	8000548 <__aeabi_f2d>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001bda:	e010      	b.n	8001bfe <nmea_GPGGA+0x192>
 8001bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001be2:	4413      	add	r3, r2
 8001be4:	7819      	ldrb	r1, [r3, #0]
 8001be6:	f107 0210 	add.w	r2, r7, #16
 8001bea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bee:	4413      	add	r3, r2
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	701a      	strb	r2, [r3, #0]
 8001bf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001bfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	ddea      	ble.n	8001bdc <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c0c:	e011      	b.n	8001c32 <nmea_GPGGA+0x1c6>
 8001c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c14:	3303      	adds	r3, #3
 8001c16:	4413      	add	r3, r2
 8001c18:	7819      	ldrb	r1, [r3, #0]
 8001c1a:	f107 0208 	add.w	r2, r7, #8
 8001c1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c22:	4413      	add	r3, r2
 8001c24:	460a      	mov	r2, r1
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c36:	2b05      	cmp	r3, #5
 8001c38:	dde9      	ble.n	8001c0e <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8001c3a:	f107 0310 	add.w	r3, r7, #16
 8001c3e:	220a      	movs	r2, #10
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f013 fc5c 	bl	8015500 <strtol>
 8001c48:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8001c4c:	f107 0308 	add.w	r3, r7, #8
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f013 fb6a 	bl	801532c <strtof>
 8001c58:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8001c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c60:	ee07 3a90 	vmov	s15, r3
 8001c64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c68:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001c6c:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001d98 <nmea_GPGGA+0x32c>
 8001c70:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c78:	ee17 0a90 	vmov	r0, s15
 8001c7c:	f7fe fc64 	bl	8000548 <__aeabi_f2d>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001c94:	f7fe ff18 	bl	8000ac8 <__aeabi_dcmpeq>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d176      	bne.n	8001d8c <nmea_GPGGA+0x320>
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001caa:	f7fe ff0d 	bl	8000ac8 <__aeabi_dcmpeq>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d16b      	bne.n	8001d8c <nmea_GPGGA+0x320>
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	4b38      	ldr	r3, [pc, #224]	; (8001d9c <nmea_GPGGA+0x330>)
 8001cba:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001cbe:	f7fe ff0d 	bl	8000adc <__aeabi_dcmplt>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d061      	beq.n	8001d8c <nmea_GPGGA+0x320>
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <nmea_GPGGA+0x334>)
 8001cce:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001cd2:	f7fe ff03 	bl	8000adc <__aeabi_dcmplt>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d057      	beq.n	8001d8c <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001ce2:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8001cec:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001cf4:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001cfe:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8001d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f013 fb11 	bl	801532c <strtof>
 8001d0a:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8001d0e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	d102      	bne.n	8001d22 <nmea_GPGGA+0x2b6>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	e001      	b.n	8001d26 <nmea_GPGGA+0x2ba>
 8001d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8001d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d2c:	220a      	movs	r2, #10
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f013 fbe5 	bl	8015500 <strtol>
 8001d36:	4602      	mov	r2, r0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8001d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d3e:	220a      	movs	r2, #10
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f013 fbdc 	bl	8015500 <strtol>
 8001d48:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8001d4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bfcc      	ite	gt
 8001d54:	2301      	movgt	r3, #1
 8001d56:	2300      	movle	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f013 fae1 	bl	801532c <strtof>
 8001d6a:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8001d6e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001d72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	d102      	bne.n	8001d82 <nmea_GPGGA+0x316>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	e001      	b.n	8001d86 <nmea_GPGGA+0x31a>
 8001d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001d8a:	e022      	b.n	8001dd2 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001d92:	e016      	b.n	8001dc2 <nmea_GPGGA+0x356>
 8001d94:	0801aac0 	.word	0x0801aac0
 8001d98:	42700000 	.word	0x42700000
 8001d9c:	40568000 	.word	0x40568000
 8001da0:	40668000 	.word	0x40668000
 8001da4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	33d8      	adds	r3, #216	; 0xd8
 8001dac:	443b      	add	r3, r7
 8001dae:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f012 fbf4 	bl	80145a0 <free>
 8001db8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001dc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	dbea      	blt.n	8001da4 <nmea_GPGGA+0x338>
            return 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e019      	b.n	8001e06 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001dd8:	e00e      	b.n	8001df8 <nmea_GPGGA+0x38c>
 8001dda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	33d8      	adds	r3, #216	; 0xd8
 8001de2:	443b      	add	r3, r7
 8001de4:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f012 fbd9 	bl	80145a0 <free>
 8001dee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001df2:	3301      	adds	r3, #1
 8001df4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001df8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001dfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e00:	429a      	cmp	r2, r3
 8001e02:	dbea      	blt.n	8001dda <nmea_GPGGA+0x36e>
    return 1;
 8001e04:	2301      	movs	r3, #1
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	37dc      	adds	r7, #220	; 0xdc
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	bf00      	nop

08001e10 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b0a3      	sub	sp, #140	; 0x8c
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	2264      	movs	r2, #100	; 0x64
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f014 fb42 	bl	80164b2 <memset>
    char *marker = strtok(inputString, ",");
 8001e2e:	493b      	ldr	r1, [pc, #236]	; (8001f1c <nmea_GPGSA+0x10c>)
 8001e30:	6838      	ldr	r0, [r7, #0]
 8001e32:	f014 fb59 	bl	80164e8 <strtok>
 8001e36:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001e3a:	e027      	b.n	8001e8c <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001e3c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001e40:	f7fe fa16 	bl	8000270 <strlen>
 8001e44:	4603      	mov	r3, r0
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8001e4c:	1c63      	adds	r3, r4, #1
 8001e4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e52:	4610      	mov	r0, r2
 8001e54:	f012 fb9c 	bl	8014590 <malloc>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	00a3      	lsls	r3, r4, #2
 8001e5e:	3388      	adds	r3, #136	; 0x88
 8001e60:	443b      	add	r3, r7
 8001e62:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8001e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	3388      	adds	r3, #136	; 0x88
 8001e70:	443b      	add	r3, r7
 8001e72:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001e76:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f014 fc2d 	bl	80166da <strcpy>
        marker = strtok(NULL, ",");
 8001e80:	4926      	ldr	r1, [pc, #152]	; (8001f1c <nmea_GPGSA+0x10c>)
 8001e82:	2000      	movs	r0, #0
 8001e84:	f014 fb30 	bl	80164e8 <strtok>
 8001e88:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1d3      	bne.n	8001e3c <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	220a      	movs	r2, #10
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f013 fb30 	bl	8015500 <strtol>
 8001ea0:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8001ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	bfcc      	ite	gt
 8001ea8:	2301      	movgt	r3, #1
 8001eaa:	2300      	movle	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001eb8:	2303      	movs	r3, #3
 8001eba:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ebc:	e00e      	b.n	8001edc <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	3388      	adds	r3, #136	; 0x88
 8001ec4:	443b      	add	r3, r7
 8001ec6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001ed0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ed8:	3301      	adds	r3, #1
 8001eda:	67bb      	str	r3, [r7, #120]	; 0x78
 8001edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ede:	2b0e      	cmp	r3, #14
 8001ee0:	dded      	ble.n	8001ebe <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8001ee8:	2300      	movs	r3, #0
 8001eea:	677b      	str	r3, [r7, #116]	; 0x74
 8001eec:	e00b      	b.n	8001f06 <nmea_GPGSA+0xf6>
 8001eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	3388      	adds	r3, #136	; 0x88
 8001ef4:	443b      	add	r3, r7
 8001ef6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f012 fb50 	bl	80145a0 <free>
 8001f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f02:	3301      	adds	r3, #1
 8001f04:	677b      	str	r3, [r7, #116]	; 0x74
 8001f06:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	dbee      	blt.n	8001eee <nmea_GPGSA+0xde>
    return 1;
 8001f10:	2301      	movs	r3, #1
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	378c      	adds	r7, #140	; 0x8c
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd90      	pop	{r4, r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	0801aac0 	.word	0x0801aac0

08001f20 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b0a1      	sub	sp, #132	; 0x84
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8001f2e:	f107 030c 	add.w	r3, r7, #12
 8001f32:	2264      	movs	r2, #100	; 0x64
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f014 fabb 	bl	80164b2 <memset>
    char *marker = strtok(inputString, ",");
 8001f3c:	4930      	ldr	r1, [pc, #192]	; (8002000 <nmea_GNRMC+0xe0>)
 8001f3e:	6838      	ldr	r0, [r7, #0]
 8001f40:	f014 fad2 	bl	80164e8 <strtok>
 8001f44:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001f46:	e021      	b.n	8001f8c <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001f48:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001f4a:	f7fe f991 	bl	8000270 <strlen>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8001f54:	1c63      	adds	r3, r4, #1
 8001f56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f58:	4610      	mov	r0, r2
 8001f5a:	f012 fb19 	bl	8014590 <malloc>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	461a      	mov	r2, r3
 8001f62:	00a3      	lsls	r3, r4, #2
 8001f64:	3380      	adds	r3, #128	; 0x80
 8001f66:	443b      	add	r3, r7
 8001f68:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8001f6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	3380      	adds	r3, #128	; 0x80
 8001f74:	443b      	add	r3, r7
 8001f76:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001f7a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f014 fbac 	bl	80166da <strcpy>
        marker = strtok(NULL, ",");
 8001f82:	491f      	ldr	r1, [pc, #124]	; (8002000 <nmea_GNRMC+0xe0>)
 8001f84:	2000      	movs	r0, #0
 8001f86:	f014 faaf 	bl	80164e8 <strtok>
 8001f8a:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1da      	bne.n	8001f48 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8001f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f013 f9c8 	bl	801532c <strtof>
 8001f9c:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8001fa0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001fa2:	f7fe fad1 	bl	8000548 <__aeabi_f2d>
 8001fa6:	a314      	add	r3, pc, #80	; (adr r3, 8001ff8 <nmea_GNRMC+0xd8>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	f7fe fc4e 	bl	800084c <__aeabi_ddiv>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f7fe fe16 	bl	8000be8 <__aeabi_d2f>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	677b      	str	r3, [r7, #116]	; 0x74
 8001fc6:	e00b      	b.n	8001fe0 <nmea_GNRMC+0xc0>
 8001fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	3380      	adds	r3, #128	; 0x80
 8001fce:	443b      	add	r3, r7
 8001fd0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f012 fae3 	bl	80145a0 <free>
 8001fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fdc:	3301      	adds	r3, #1
 8001fde:	677b      	str	r3, [r7, #116]	; 0x74
 8001fe0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fe2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	dbef      	blt.n	8001fc8 <nmea_GNRMC+0xa8>
    return 1;
 8001fe8:	2301      	movs	r3, #1
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3784      	adds	r7, #132	; 0x84
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	f3af 8000 	nop.w
 8001ff8:	be76c8b4 	.word	0xbe76c8b4
 8001ffc:	3fff1a9f 	.word	0x3fff1a9f
 8002000:	0801aac0 	.word	0x0801aac0

08002004 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 800200e:	223c      	movs	r2, #60	; 0x3c
 8002010:	2100      	movs	r1, #0
 8002012:	484e      	ldr	r0, [pc, #312]	; (800214c <nmea_parse+0x148>)
 8002014:	f014 fa4d 	bl	80164b2 <memset>
    char * token = strtok(buffer, "$");
 8002018:	494d      	ldr	r1, [pc, #308]	; (8002150 <nmea_parse+0x14c>)
 800201a:	6838      	ldr	r0, [r7, #0]
 800201c:	f014 fa64 	bl	80164e8 <strtok>
 8002020:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8002026:	e01d      	b.n	8002064 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8002028:	6978      	ldr	r0, [r7, #20]
 800202a:	f7fe f921 	bl	8000270 <strlen>
 800202e:	4603      	mov	r3, r0
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	693c      	ldr	r4, [r7, #16]
 8002034:	1c63      	adds	r3, r4, #1
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	4610      	mov	r0, r2
 800203a:	f012 faa9 	bl	8014590 <malloc>
 800203e:	4603      	mov	r3, r0
 8002040:	461a      	mov	r2, r3
 8002042:	4b42      	ldr	r3, [pc, #264]	; (800214c <nmea_parse+0x148>)
 8002044:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	3b01      	subs	r3, #1
 800204c:	4a3f      	ldr	r2, [pc, #252]	; (800214c <nmea_parse+0x148>)
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	6979      	ldr	r1, [r7, #20]
 8002054:	4618      	mov	r0, r3
 8002056:	f014 fb40 	bl	80166da <strcpy>
        token = strtok(NULL, "$");
 800205a:	493d      	ldr	r1, [pc, #244]	; (8002150 <nmea_parse+0x14c>)
 800205c:	2000      	movs	r0, #0
 800205e:	f014 fa43 	bl	80164e8 <strtok>
 8002062:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1de      	bne.n	8002028 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	e052      	b.n	8002116 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8002070:	4a36      	ldr	r2, [pc, #216]	; (800214c <nmea_parse+0x148>)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002078:	4936      	ldr	r1, [pc, #216]	; (8002154 <nmea_parse+0x150>)
 800207a:	4618      	mov	r0, r3
 800207c:	f014 fa90 	bl	80165a0 <strstr>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d044      	beq.n	8002110 <nmea_parse+0x10c>
 8002086:	4a31      	ldr	r2, [pc, #196]	; (800214c <nmea_parse+0x148>)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fca2 	bl	80019d8 <gps_checksum>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d03a      	beq.n	8002110 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 800209a:	4a2c      	ldr	r2, [pc, #176]	; (800214c <nmea_parse+0x148>)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a2:	492d      	ldr	r1, [pc, #180]	; (8002158 <nmea_parse+0x154>)
 80020a4:	4618      	mov	r0, r3
 80020a6:	f014 fa7b 	bl	80165a0 <strstr>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 80020b0:	4a26      	ldr	r2, [pc, #152]	; (800214c <nmea_parse+0x148>)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b8:	4619      	mov	r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ff30 	bl	8001f20 <nmea_GNRMC>
 80020c0:	e026      	b.n	8002110 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 80020c2:	4a22      	ldr	r2, [pc, #136]	; (800214c <nmea_parse+0x148>)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ca:	4924      	ldr	r1, [pc, #144]	; (800215c <nmea_parse+0x158>)
 80020cc:	4618      	mov	r0, r3
 80020ce:	f014 fa67 	bl	80165a0 <strstr>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 80020d8:	4a1c      	ldr	r2, [pc, #112]	; (800214c <nmea_parse+0x148>)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e0:	4619      	mov	r1, r3
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff fe94 	bl	8001e10 <nmea_GPGSA>
 80020e8:	e012      	b.n	8002110 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 80020ea:	4a18      	ldr	r2, [pc, #96]	; (800214c <nmea_parse+0x148>)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f2:	491b      	ldr	r1, [pc, #108]	; (8002160 <nmea_parse+0x15c>)
 80020f4:	4618      	mov	r0, r3
 80020f6:	f014 fa53 	bl	80165a0 <strstr>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d007      	beq.n	8002110 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8002100:	4a12      	ldr	r2, [pc, #72]	; (800214c <nmea_parse+0x148>)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	4619      	mov	r1, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff fcae 	bl	8001a6c <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	3301      	adds	r3, #1
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	429a      	cmp	r2, r3
 800211c:	dba8      	blt.n	8002070 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	e009      	b.n	8002138 <nmea_parse+0x134>
 8002124:	4a09      	ldr	r2, [pc, #36]	; (800214c <nmea_parse+0x148>)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212c:	4618      	mov	r0, r3
 800212e:	f012 fa37 	bl	80145a0 <free>
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	3301      	adds	r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	429a      	cmp	r2, r3
 800213e:	dbf1      	blt.n	8002124 <nmea_parse+0x120>


}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	371c      	adds	r7, #28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd90      	pop	{r4, r7, pc}
 800214a:	bf00      	nop
 800214c:	20000a4c 	.word	0x20000a4c
 8002150:	0801aac4 	.word	0x0801aac4
 8002154:	0801aac8 	.word	0x0801aac8
 8002158:	0801aacc 	.word	0x0801aacc
 800215c:	0801aad4 	.word	0x0801aad4
 8002160:	0801aadc 	.word	0x0801aadc
 8002164:	00000000 	.word	0x00000000

08002168 <distancecalc>:

}



double distancecalc(double lat1, double lat2, double long1, double long2){
 8002168:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800216c:	b08a      	sub	sp, #40	; 0x28
 800216e:	af00      	add	r7, sp, #0
 8002170:	ed87 0b06 	vstr	d0, [r7, #24]
 8002174:	ed87 1b04 	vstr	d1, [r7, #16]
 8002178:	ed87 2b02 	vstr	d2, [r7, #8]
 800217c:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 800218c:	a358      	add	r3, pc, #352	; (adr r3, 80022f0 <distancecalc+0x188>)
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002196:	f7fe fa2f 	bl	80005f8 <__aeabi_dmul>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	ec43 2b17 	vmov	d7, r2, r3
 80021a2:	eeb0 0a47 	vmov.f32	s0, s14
 80021a6:	eef0 0a67 	vmov.f32	s1, s15
 80021aa:	f017 f830 	bl	801920e <sinl>
 80021ae:	ec55 4b10 	vmov	r4, r5, d0
 80021b2:	a34f      	add	r3, pc, #316	; (adr r3, 80022f0 <distancecalc+0x188>)
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021bc:	f7fe fa1c 	bl	80005f8 <__aeabi_dmul>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	ec43 2b17 	vmov	d7, r2, r3
 80021c8:	eeb0 0a47 	vmov.f32	s0, s14
 80021cc:	eef0 0a67 	vmov.f32	s1, s15
 80021d0:	f017 f81d 	bl	801920e <sinl>
 80021d4:	ec53 2b10 	vmov	r2, r3, d0
 80021d8:	4620      	mov	r0, r4
 80021da:	4629      	mov	r1, r5
 80021dc:	f7fe fa0c 	bl	80005f8 <__aeabi_dmul>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4614      	mov	r4, r2
 80021e6:	461d      	mov	r5, r3
 80021e8:	a341      	add	r3, pc, #260	; (adr r3, 80022f0 <distancecalc+0x188>)
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021f2:	f7fe fa01 	bl	80005f8 <__aeabi_dmul>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	ec43 2b17 	vmov	d7, r2, r3
 80021fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002202:	eef0 0a67 	vmov.f32	s1, s15
 8002206:	f017 f800 	bl	801920a <cosl>
 800220a:	ec59 8b10 	vmov	r8, r9, d0
 800220e:	a338      	add	r3, pc, #224	; (adr r3, 80022f0 <distancecalc+0x188>)
 8002210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002214:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002218:	f7fe f9ee 	bl	80005f8 <__aeabi_dmul>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	ec43 2b17 	vmov	d7, r2, r3
 8002224:	eeb0 0a47 	vmov.f32	s0, s14
 8002228:	eef0 0a67 	vmov.f32	s1, s15
 800222c:	f016 ffed 	bl	801920a <cosl>
 8002230:	ec53 2b10 	vmov	r2, r3, d0
 8002234:	4640      	mov	r0, r8
 8002236:	4649      	mov	r1, r9
 8002238:	f7fe f9de 	bl	80005f8 <__aeabi_dmul>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4690      	mov	r8, r2
 8002242:	4699      	mov	r9, r3
 8002244:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800224c:	f7fe f81c 	bl	8000288 <__aeabi_dsub>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	a325      	add	r3, pc, #148	; (adr r3, 80022f0 <distancecalc+0x188>)
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	f7fe f9cb 	bl	80005f8 <__aeabi_dmul>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	ec43 2b17 	vmov	d7, r2, r3
 800226a:	eeb0 0a47 	vmov.f32	s0, s14
 800226e:	eef0 0a67 	vmov.f32	s1, s15
 8002272:	f016 ffca 	bl	801920a <cosl>
 8002276:	ec53 2b10 	vmov	r2, r3, d0
 800227a:	4640      	mov	r0, r8
 800227c:	4649      	mov	r1, r9
 800227e:	f7fe f9bb 	bl	80005f8 <__aeabi_dmul>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4620      	mov	r0, r4
 8002288:	4629      	mov	r1, r5
 800228a:	f7fd ffff 	bl	800028c <__adddf3>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	ec43 2b17 	vmov	d7, r2, r3
 8002296:	eeb0 1a47 	vmov.f32	s2, s14
 800229a:	eef0 1a67 	vmov.f32	s3, s15
 800229e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80022e8 <distancecalc+0x180>
 80022a2:	f016 ff53 	bl	801914c <fmin>
 80022a6:	eeb0 7a40 	vmov.f32	s14, s0
 80022aa:	eef0 7a60 	vmov.f32	s15, s1
 80022ae:	eeb0 0a47 	vmov.f32	s0, s14
 80022b2:	eef0 0a67 	vmov.f32	s1, s15
 80022b6:	f016 ffac 	bl	8019212 <acosl>
 80022ba:	ec51 0b10 	vmov	r0, r1, d0
 80022be:	a30e      	add	r3, pc, #56	; (adr r3, 80022f8 <distancecalc+0x190>)
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	f7fe f998 	bl	80005f8 <__aeabi_dmul>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 80022d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022d4:	ec43 2b17 	vmov	d7, r2, r3
}
 80022d8:	eeb0 0a47 	vmov.f32	s0, s14
 80022dc:	eef0 0a67 	vmov.f32	s1, s15
 80022e0:	3728      	adds	r7, #40	; 0x28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022e8:	00000000 	.word	0x00000000
 80022ec:	3ff00000 	.word	0x3ff00000
 80022f0:	a2529d39 	.word	0xa2529d39
 80022f4:	3f91df46 	.word	0x3f91df46
 80022f8:	00000000 	.word	0x00000000
 80022fc:	41584dae 	.word	0x41584dae

08002300 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <MX_SPI1_Init+0x74>)
 8002306:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <MX_SPI1_Init+0x78>)
 8002308:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800230a:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <MX_SPI1_Init+0x74>)
 800230c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002310:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <MX_SPI1_Init+0x74>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002318:	4b16      	ldr	r3, [pc, #88]	; (8002374 <MX_SPI1_Init+0x74>)
 800231a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800231e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002320:	4b14      	ldr	r3, [pc, #80]	; (8002374 <MX_SPI1_Init+0x74>)
 8002322:	2200      	movs	r2, #0
 8002324:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <MX_SPI1_Init+0x74>)
 8002328:	2200      	movs	r2, #0
 800232a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <MX_SPI1_Init+0x74>)
 800232e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002332:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <MX_SPI1_Init+0x74>)
 8002336:	2210      	movs	r2, #16
 8002338:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <MX_SPI1_Init+0x74>)
 800233c:	2200      	movs	r2, #0
 800233e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <MX_SPI1_Init+0x74>)
 8002342:	2200      	movs	r2, #0
 8002344:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <MX_SPI1_Init+0x74>)
 8002348:	2200      	movs	r2, #0
 800234a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <MX_SPI1_Init+0x74>)
 800234e:	2207      	movs	r2, #7
 8002350:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <MX_SPI1_Init+0x74>)
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <MX_SPI1_Init+0x74>)
 800235a:	2208      	movs	r2, #8
 800235c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800235e:	4805      	ldr	r0, [pc, #20]	; (8002374 <MX_SPI1_Init+0x74>)
 8002360:	f009 fab2 	bl	800b8c8 <HAL_SPI_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800236a:	f7ff fb30 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000abc 	.word	0x20000abc
 8002378:	40013000 	.word	0x40013000

0800237c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a53      	ldr	r2, [pc, #332]	; (80024e8 <HAL_SPI_MspInit+0x16c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	f040 809f 	bne.w	80024de <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023a0:	4b52      	ldr	r3, [pc, #328]	; (80024ec <HAL_SPI_MspInit+0x170>)
 80023a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a4:	4a51      	ldr	r2, [pc, #324]	; (80024ec <HAL_SPI_MspInit+0x170>)
 80023a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023aa:	6613      	str	r3, [r2, #96]	; 0x60
 80023ac:	4b4f      	ldr	r3, [pc, #316]	; (80024ec <HAL_SPI_MspInit+0x170>)
 80023ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b8:	4b4c      	ldr	r3, [pc, #304]	; (80024ec <HAL_SPI_MspInit+0x170>)
 80023ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023bc:	4a4b      	ldr	r2, [pc, #300]	; (80024ec <HAL_SPI_MspInit+0x170>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023c4:	4b49      	ldr	r3, [pc, #292]	; (80024ec <HAL_SPI_MspInit+0x170>)
 80023c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d0:	4b46      	ldr	r3, [pc, #280]	; (80024ec <HAL_SPI_MspInit+0x170>)
 80023d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d4:	4a45      	ldr	r2, [pc, #276]	; (80024ec <HAL_SPI_MspInit+0x170>)
 80023d6:	f043 0302 	orr.w	r3, r3, #2
 80023da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023dc:	4b43      	ldr	r3, [pc, #268]	; (80024ec <HAL_SPI_MspInit+0x170>)
 80023de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80023e8:	2360      	movs	r3, #96	; 0x60
 80023ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f4:	2303      	movs	r3, #3
 80023f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023f8:	2305      	movs	r3, #5
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	4619      	mov	r1, r3
 8002402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002406:	f005 fce7 	bl	8007dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800240a:	2320      	movs	r3, #32
 800240c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002416:	2303      	movs	r3, #3
 8002418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800241a:	2305      	movs	r3, #5
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	4832      	ldr	r0, [pc, #200]	; (80024f0 <HAL_SPI_MspInit+0x174>)
 8002426:	f005 fcd7 	bl	8007dd8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800242a:	4b32      	ldr	r3, [pc, #200]	; (80024f4 <HAL_SPI_MspInit+0x178>)
 800242c:	4a32      	ldr	r2, [pc, #200]	; (80024f8 <HAL_SPI_MspInit+0x17c>)
 800242e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8002430:	4b30      	ldr	r3, [pc, #192]	; (80024f4 <HAL_SPI_MspInit+0x178>)
 8002432:	2201      	movs	r2, #1
 8002434:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002436:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <HAL_SPI_MspInit+0x178>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800243c:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <HAL_SPI_MspInit+0x178>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002442:	4b2c      	ldr	r3, [pc, #176]	; (80024f4 <HAL_SPI_MspInit+0x178>)
 8002444:	2280      	movs	r2, #128	; 0x80
 8002446:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002448:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <HAL_SPI_MspInit+0x178>)
 800244a:	2200      	movs	r2, #0
 800244c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800244e:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <HAL_SPI_MspInit+0x178>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002454:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_SPI_MspInit+0x178>)
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_SPI_MspInit+0x178>)
 800245c:	2200      	movs	r2, #0
 800245e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002460:	4824      	ldr	r0, [pc, #144]	; (80024f4 <HAL_SPI_MspInit+0x178>)
 8002462:	f005 fa37 	bl	80078d4 <HAL_DMA_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 800246c:	f7ff faaf 	bl	80019ce <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <HAL_SPI_MspInit+0x178>)
 8002474:	659a      	str	r2, [r3, #88]	; 0x58
 8002476:	4a1f      	ldr	r2, [pc, #124]	; (80024f4 <HAL_SPI_MspInit+0x178>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800247c:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <HAL_SPI_MspInit+0x180>)
 800247e:	4a20      	ldr	r2, [pc, #128]	; (8002500 <HAL_SPI_MspInit+0x184>)
 8002480:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002482:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <HAL_SPI_MspInit+0x180>)
 8002484:	2201      	movs	r2, #1
 8002486:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002488:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <HAL_SPI_MspInit+0x180>)
 800248a:	2210      	movs	r2, #16
 800248c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800248e:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_SPI_MspInit+0x180>)
 8002490:	2200      	movs	r2, #0
 8002492:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_SPI_MspInit+0x180>)
 8002496:	2280      	movs	r2, #128	; 0x80
 8002498:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800249a:	4b18      	ldr	r3, [pc, #96]	; (80024fc <HAL_SPI_MspInit+0x180>)
 800249c:	2200      	movs	r2, #0
 800249e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024a0:	4b16      	ldr	r3, [pc, #88]	; (80024fc <HAL_SPI_MspInit+0x180>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80024a6:	4b15      	ldr	r3, [pc, #84]	; (80024fc <HAL_SPI_MspInit+0x180>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <HAL_SPI_MspInit+0x180>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80024b2:	4812      	ldr	r0, [pc, #72]	; (80024fc <HAL_SPI_MspInit+0x180>)
 80024b4:	f005 fa0e 	bl	80078d4 <HAL_DMA_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_SPI_MspInit+0x146>
    {
      Error_Handler();
 80024be:	f7ff fa86 	bl	80019ce <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a0d      	ldr	r2, [pc, #52]	; (80024fc <HAL_SPI_MspInit+0x180>)
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
 80024c8:	4a0c      	ldr	r2, [pc, #48]	; (80024fc <HAL_SPI_MspInit+0x180>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2100      	movs	r1, #0
 80024d2:	2023      	movs	r0, #35	; 0x23
 80024d4:	f005 f9c7 	bl	8007866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80024d8:	2023      	movs	r0, #35	; 0x23
 80024da:	f005 f9e0 	bl	800789e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024de:	bf00      	nop
 80024e0:	3728      	adds	r7, #40	; 0x28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40013000 	.word	0x40013000
 80024ec:	40021000 	.word	0x40021000
 80024f0:	48000400 	.word	0x48000400
 80024f4:	20000b20 	.word	0x20000b20
 80024f8:	4002001c 	.word	0x4002001c
 80024fc:	20000b68 	.word	0x20000b68
 8002500:	40020030 	.word	0x40020030
 8002504:	00000000 	.word	0x00000000

08002508 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 8002508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800250c:	ed2d 8b02 	vpush	{d8}
 8002510:	b0a7      	sub	sp, #156	; 0x9c
 8002512:	af16      	add	r7, sp, #88	; 0x58
 8002514:	6378      	str	r0, [r7, #52]	; 0x34
 8002516:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
 800251a:	edc7 0a0b 	vstr	s1, [r7, #44]	; 0x2c
 800251e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002520:	627a      	str	r2, [r7, #36]	; 0x24
 8002522:	ed87 1a08 	vstr	s2, [r7, #32]
	int framesize=0;
 8002526:	2300      	movs	r3, #0
 8002528:	63fb      	str	r3, [r7, #60]	; 0x3c
	framesize=snprintf((uint8_t*)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 800252a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800252c:	f7fe f80c 	bl	8000548 <__aeabi_f2d>
 8002530:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002536:	f7fe f807 	bl	8000548 <__aeabi_f2d>
 800253a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe f800 	bl	8000548 <__aeabi_f2d>
 8002548:	a332      	add	r3, pc, #200	; (adr r3, 8002614 <csvframe+0x10c>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	f7fe f853 	bl	80005f8 <__aeabi_dmul>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	ec43 2b18 	vmov	d8, r2, r3
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002562:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fd ffec 	bl	8000548 <__aeabi_f2d>
 8002570:	4682      	mov	sl, r0
 8002572:	468b      	mov	fp, r1
 8002574:	6a38      	ldr	r0, [r7, #32]
 8002576:	f7fd ffe7 	bl	8000548 <__aeabi_f2d>
 800257a:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <csvframe+0xf0>)
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <csvframe+0xf4>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <csvframe+0xf8>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <csvframe+0xfc>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	461e      	mov	r6, r3
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <csvframe+0x100>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	4b1c      	ldr	r3, [pc, #112]	; (800260c <csvframe+0x104>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	9315      	str	r3, [sp, #84]	; 0x54
 800259e:	9214      	str	r2, [sp, #80]	; 0x50
 80025a0:	9613      	str	r6, [sp, #76]	; 0x4c
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	9212      	str	r2, [sp, #72]	; 0x48
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	9211      	str	r2, [sp, #68]	; 0x44
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	9310      	str	r3, [sp, #64]	; 0x40
 80025ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	930c      	str	r3, [sp, #48]	; 0x30
 80025b6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80025ba:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80025be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80025c2:	ed8d 8b04 	vstr	d8, [sp, #16]
 80025c6:	ed97 7b04 	vldr	d7, [r7, #16]
 80025ca:	ed8d 7b02 	vstr	d7, [sp, #8]
 80025ce:	ed97 7b06 	vldr	d7, [r7, #24]
 80025d2:	ed8d 7b00 	vstr	d7, [sp]
 80025d6:	4a0e      	ldr	r2, [pc, #56]	; (8002610 <csvframe+0x108>)
 80025d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80025de:	f013 fed1 	bl	8016384 <sniprintf>
 80025e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	return framesize;
 80025e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3744      	adds	r7, #68	; 0x44
 80025ea:	46bd      	mov	sp, r7
 80025ec:	ecbd 8b02 	vpop	{d8}
 80025f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f4:	f3af 8000 	nop.w
 80025f8:	2000000a 	.word	0x2000000a
 80025fc:	20000009 	.word	0x20000009
 8002600:	20000008 	.word	0x20000008
 8002604:	20000a49 	.word	0x20000a49
 8002608:	20000a4a 	.word	0x20000a4a
 800260c:	20000a48 	.word	0x20000a48
 8002610:	0801aae4 	.word	0x0801aae4
 8002614:	cccccccd 	.word	0xcccccccd
 8002618:	400ccccc 	.word	0x400ccccc

0800261c <storeindex>:


void storeindex(void){
 800261c:	b580      	push	{r7, lr}
 800261e:	b09c      	sub	sp, #112	; 0x70
 8002620:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 8002622:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002626:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8002628:	463b      	mov	r3, r7
 800262a:	2264      	movs	r2, #100	; 0x64
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f013 ff3f 	bl	80164b2 <memset>
	snprintf((uint8_t*)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <storeindex+0x6c>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b14      	ldr	r3, [pc, #80]	; (800268c <storeindex+0x70>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4638      	mov	r0, r7
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	4a13      	ldr	r2, [pc, #76]	; (8002690 <storeindex+0x74>)
 8002644:	2164      	movs	r1, #100	; 0x64
 8002646:	f013 fe9d 	bl	8016384 <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 800264a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800264c:	2b00      	cmp	r3, #0
 800264e:	da00      	bge.n	8002652 <storeindex+0x36>
 8002650:	330f      	adds	r3, #15
 8002652:	111b      	asrs	r3, r3, #4
 8002654:	4618      	mov	r0, r3
 8002656:	f7fd ff65 	bl	8000524 <__aeabi_i2d>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	f7fe fa79 	bl	8000b58 <__aeabi_d2iz>
 8002666:	4603      	mov	r3, r0
 8002668:	4619      	mov	r1, r3
 800266a:	480a      	ldr	r0, [pc, #40]	; (8002694 <storeindex+0x78>)
 800266c:	f011 f927 	bl	80138be <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8002670:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002672:	463a      	mov	r2, r7
 8002674:	2300      	movs	r3, #0
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2364      	movs	r3, #100	; 0x64
 800267a:	4806      	ldr	r0, [pc, #24]	; (8002694 <storeindex+0x78>)
 800267c:	f011 f9a2 	bl	80139c4 <SPIF_WritePage>

}
 8002680:	bf00      	nop
 8002682:	3768      	adds	r7, #104	; 0x68
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000958 	.word	0x20000958
 800268c:	2000095c 	.word	0x2000095c
 8002690:	0801ab38 	.word	0x0801ab38
 8002694:	20000710 	.word	0x20000710

08002698 <getindex>:

void getindex(void){
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 800269e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80026a2:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	2300      	movs	r3, #0
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	2332      	movs	r3, #50	; 0x32
 80026ac:	4a2b      	ldr	r2, [pc, #172]	; (800275c <getindex+0xc4>)
 80026ae:	482c      	ldr	r0, [pc, #176]	; (8002760 <getindex+0xc8>)
 80026b0:	f011 f9a6 	bl	8013a00 <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 80026b4:	220a      	movs	r2, #10
 80026b6:	2124      	movs	r1, #36	; 0x24
 80026b8:	482a      	ldr	r0, [pc, #168]	; (8002764 <getindex+0xcc>)
 80026ba:	f013 fefa 	bl	80164b2 <memset>
	memset(numbuf2,'$',10);
 80026be:	220a      	movs	r2, #10
 80026c0:	2124      	movs	r1, #36	; 0x24
 80026c2:	4829      	ldr	r0, [pc, #164]	; (8002768 <getindex+0xd0>)
 80026c4:	f013 fef5 	bl	80164b2 <memset>
	int cnt=0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 80026cc:	4b23      	ldr	r3, [pc, #140]	; (800275c <getindex+0xc4>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	2b09      	cmp	r3, #9
 80026d6:	dc3a      	bgt.n	800274e <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 80026d8:	e00b      	b.n	80026f2 <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 80026da:	4a20      	ldr	r2, [pc, #128]	; (800275c <getindex+0xc4>)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	7819      	ldrb	r1, [r3, #0]
 80026e2:	4a20      	ldr	r2, [pc, #128]	; (8002764 <getindex+0xcc>)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	460a      	mov	r2, r1
 80026ea:	701a      	strb	r2, [r3, #0]
			  cnt++;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3301      	adds	r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 80026f2:	4a1a      	ldr	r2, [pc, #104]	; (800275c <getindex+0xc4>)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4413      	add	r3, r2
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b24      	cmp	r3, #36	; 0x24
 80026fc:	d1ed      	bne.n	80026da <getindex+0x42>
		  }
		  cnt++;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3301      	adds	r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 8002704:	2300      	movs	r3, #0
 8002706:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8002708:	e00e      	b.n	8002728 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 800270a:	4a14      	ldr	r2, [pc, #80]	; (800275c <getindex+0xc4>)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4413      	add	r3, r2
 8002710:	7819      	ldrb	r1, [r3, #0]
 8002712:	4a15      	ldr	r2, [pc, #84]	; (8002768 <getindex+0xd0>)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4413      	add	r3, r2
 8002718:	460a      	mov	r2, r1
 800271a:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	3301      	adds	r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3301      	adds	r3, #1
 8002726:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8002728:	4a0c      	ldr	r2, [pc, #48]	; (800275c <getindex+0xc4>)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4413      	add	r3, r2
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b24      	cmp	r3, #36	; 0x24
 8002732:	d1ea      	bne.n	800270a <getindex+0x72>
		  	  }

		 pageoffset=atoi((uint8_t*)numbuf1);
 8002734:	480b      	ldr	r0, [pc, #44]	; (8002764 <getindex+0xcc>)
 8002736:	f011 ff27 	bl	8014588 <atoi>
 800273a:	4603      	mov	r3, r0
 800273c:	4a0b      	ldr	r2, [pc, #44]	; (800276c <getindex+0xd4>)
 800273e:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((uint8_t*)numbuf2);
 8002740:	4809      	ldr	r0, [pc, #36]	; (8002768 <getindex+0xd0>)
 8002742:	f011 ff21 	bl	8014588 <atoi>
 8002746:	4603      	mov	r3, r0
 8002748:	4a09      	ldr	r2, [pc, #36]	; (8002770 <getindex+0xd8>)
 800274a:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 800274c:	e001      	b.n	8002752 <getindex+0xba>
		storeindex();
 800274e:	f7ff ff65 	bl	800261c <storeindex>
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000a88 	.word	0x20000a88
 8002760:	20000710 	.word	0x20000710
 8002764:	20000964 	.word	0x20000964
 8002768:	20000970 	.word	0x20000970
 800276c:	20000958 	.word	0x20000958
 8002770:	2000095c 	.word	0x2000095c

08002774 <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af02      	add	r7, sp, #8
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 800277e:	4b3f      	ldr	r3, [pc, #252]	; (800287c <writebuffertoflash+0x108>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3301      	adds	r3, #1
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	2b00      	cmp	r3, #0
 800278a:	d11b      	bne.n	80027c4 <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 800278c:	4b3c      	ldr	r3, [pc, #240]	; (8002880 <writebuffertoflash+0x10c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d117      	bne.n	80027c4 <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8002794:	4b39      	ldr	r3, [pc, #228]	; (800287c <writebuffertoflash+0x108>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	3301      	adds	r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	da00      	bge.n	80027a0 <writebuffertoflash+0x2c>
 800279e:	330f      	adds	r3, #15
 80027a0:	111b      	asrs	r3, r3, #4
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fd febe 	bl	8000524 <__aeabi_i2d>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f7fe f9d2 	bl	8000b58 <__aeabi_d2iz>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4619      	mov	r1, r3
 80027b8:	4832      	ldr	r0, [pc, #200]	; (8002884 <writebuffertoflash+0x110>)
 80027ba:	f011 f880 	bl	80138be <SPIF_EraseSector>
		sectoreraseen=1;
 80027be:	4b30      	ldr	r3, [pc, #192]	; (8002880 <writebuffertoflash+0x10c>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <writebuffertoflash+0x114>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	2bff      	cmp	r3, #255	; 0xff
 80027ce:	dc11      	bgt.n	80027f4 <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 80027d0:	4b2a      	ldr	r3, [pc, #168]	; (800287c <writebuffertoflash+0x108>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4619      	mov	r1, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	4a2b      	ldr	r2, [pc, #172]	; (8002888 <writebuffertoflash+0x114>)
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	9200      	str	r2, [sp, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4828      	ldr	r0, [pc, #160]	; (8002884 <writebuffertoflash+0x110>)
 80027e2:	f011 f8ef 	bl	80139c4 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 80027e6:	4b28      	ldr	r3, [pc, #160]	; (8002888 <writebuffertoflash+0x114>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	4413      	add	r3, r2
 80027ee:	4a26      	ldr	r2, [pc, #152]	; (8002888 <writebuffertoflash+0x114>)
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e03c      	b.n	800286e <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 80027f4:	4b21      	ldr	r3, [pc, #132]	; (800287c <writebuffertoflash+0x108>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4619      	mov	r1, r3
 80027fa:	4b23      	ldr	r3, [pc, #140]	; (8002888 <writebuffertoflash+0x114>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002802:	461a      	mov	r2, r3
 8002804:	4b20      	ldr	r3, [pc, #128]	; (8002888 <writebuffertoflash+0x114>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	4613      	mov	r3, r2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	481d      	ldr	r0, [pc, #116]	; (8002884 <writebuffertoflash+0x110>)
 8002810:	f011 f8d8 	bl	80139c4 <SPIF_WritePage>
		HAL_Delay(100);
 8002814:	2064      	movs	r0, #100	; 0x64
 8002816:	f003 fc87 	bl	8006128 <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <writebuffertoflash+0x108>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3301      	adds	r3, #1
 8002820:	4618      	mov	r0, r3
 8002822:	4b19      	ldr	r3, [pc, #100]	; (8002888 <writebuffertoflash+0x114>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800282a:	461a      	mov	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	1899      	adds	r1, r3, r2
 8002830:	4b15      	ldr	r3, [pc, #84]	; (8002888 <writebuffertoflash+0x114>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	461a      	mov	r2, r3
 800283e:	2300      	movs	r3, #0
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	460a      	mov	r2, r1
 8002846:	4601      	mov	r1, r0
 8002848:	480e      	ldr	r0, [pc, #56]	; (8002884 <writebuffertoflash+0x110>)
 800284a:	f011 f8bb 	bl	80139c4 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <writebuffertoflash+0x108>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3301      	adds	r3, #1
 8002854:	4a09      	ldr	r2, [pc, #36]	; (800287c <writebuffertoflash+0x108>)
 8002856:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <writebuffertoflash+0x10c>)
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <writebuffertoflash+0x114>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	4a07      	ldr	r2, [pc, #28]	; (8002888 <writebuffertoflash+0x114>)
 800286c:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 800286e:	f7ff fed5 	bl	800261c <storeindex>

}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	2000095c 	.word	0x2000095c
 8002880:	20000960 	.word	0x20000960
 8002884:	20000710 	.word	0x20000710
 8002888:	20000958 	.word	0x20000958

0800288c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern char str[20];

void ssd1306_Reset(void) {
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af04      	add	r7, sp, #16
 80028a2:	4603      	mov	r3, r0
 80028a4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295
 80028aa:	9302      	str	r3, [sp, #8]
 80028ac:	2301      	movs	r3, #1
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	1dfb      	adds	r3, r7, #7
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	2301      	movs	r3, #1
 80028b6:	2200      	movs	r2, #0
 80028b8:	2178      	movs	r1, #120	; 0x78
 80028ba:	4803      	ldr	r0, [pc, #12]	; (80028c8 <ssd1306_WriteCommand+0x2c>)
 80028bc:	f005 fcc2 	bl	8008244 <HAL_I2C_Mem_Write>
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000424 	.word	0x20000424

080028cc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af04      	add	r7, sp, #16
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	f04f 32ff 	mov.w	r2, #4294967295
 80028de:	9202      	str	r2, [sp, #8]
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	2301      	movs	r3, #1
 80028e8:	2240      	movs	r2, #64	; 0x40
 80028ea:	2178      	movs	r1, #120	; 0x78
 80028ec:	4803      	ldr	r0, [pc, #12]	; (80028fc <ssd1306_WriteData+0x30>)
 80028ee:	f005 fca9 	bl	8008244 <HAL_I2C_Mem_Write>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000424 	.word	0x20000424

08002900 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002904:	f7ff ffc2 	bl	800288c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002908:	2064      	movs	r0, #100	; 0x64
 800290a:	f003 fc0d 	bl	8006128 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800290e:	2000      	movs	r0, #0
 8002910:	f000 fba0 	bl	8003054 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002914:	2020      	movs	r0, #32
 8002916:	f7ff ffc1 	bl	800289c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800291a:	2000      	movs	r0, #0
 800291c:	f7ff ffbe 	bl	800289c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002920:	20b0      	movs	r0, #176	; 0xb0
 8002922:	f7ff ffbb 	bl	800289c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002926:	20c8      	movs	r0, #200	; 0xc8
 8002928:	f7ff ffb8 	bl	800289c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800292c:	2000      	movs	r0, #0
 800292e:	f7ff ffb5 	bl	800289c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002932:	2010      	movs	r0, #16
 8002934:	f7ff ffb2 	bl	800289c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002938:	2040      	movs	r0, #64	; 0x40
 800293a:	f7ff ffaf 	bl	800289c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800293e:	20ff      	movs	r0, #255	; 0xff
 8002940:	f000 fb75 	bl	800302e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002944:	20a1      	movs	r0, #161	; 0xa1
 8002946:	f7ff ffa9 	bl	800289c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800294a:	20a6      	movs	r0, #166	; 0xa6
 800294c:	f7ff ffa6 	bl	800289c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002950:	20a8      	movs	r0, #168	; 0xa8
 8002952:	f7ff ffa3 	bl	800289c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002956:	203f      	movs	r0, #63	; 0x3f
 8002958:	f7ff ffa0 	bl	800289c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800295c:	20a4      	movs	r0, #164	; 0xa4
 800295e:	f7ff ff9d 	bl	800289c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002962:	20d3      	movs	r0, #211	; 0xd3
 8002964:	f7ff ff9a 	bl	800289c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002968:	2000      	movs	r0, #0
 800296a:	f7ff ff97 	bl	800289c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800296e:	20d5      	movs	r0, #213	; 0xd5
 8002970:	f7ff ff94 	bl	800289c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002974:	20f0      	movs	r0, #240	; 0xf0
 8002976:	f7ff ff91 	bl	800289c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800297a:	20d9      	movs	r0, #217	; 0xd9
 800297c:	f7ff ff8e 	bl	800289c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002980:	2022      	movs	r0, #34	; 0x22
 8002982:	f7ff ff8b 	bl	800289c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002986:	20da      	movs	r0, #218	; 0xda
 8002988:	f7ff ff88 	bl	800289c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800298c:	2012      	movs	r0, #18
 800298e:	f7ff ff85 	bl	800289c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002992:	20db      	movs	r0, #219	; 0xdb
 8002994:	f7ff ff82 	bl	800289c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002998:	2020      	movs	r0, #32
 800299a:	f7ff ff7f 	bl	800289c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800299e:	208d      	movs	r0, #141	; 0x8d
 80029a0:	f7ff ff7c 	bl	800289c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80029a4:	2014      	movs	r0, #20
 80029a6:	f7ff ff79 	bl	800289c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80029aa:	2001      	movs	r0, #1
 80029ac:	f000 fb52 	bl	8003054 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80029b0:	2000      	movs	r0, #0
 80029b2:	f000 f80f 	bl	80029d4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80029b6:	f000 f825 	bl	8002a04 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <ssd1306_Init+0xd0>)
 80029bc:	2200      	movs	r2, #0
 80029be:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <ssd1306_Init+0xd0>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80029c6:	4b02      	ldr	r3, [pc, #8]	; (80029d0 <ssd1306_Init+0xd0>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	711a      	strb	r2, [r3, #4]
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000fb0 	.word	0x20000fb0

080029d4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <ssd1306_Fill+0x14>
 80029e4:	2300      	movs	r3, #0
 80029e6:	e000      	b.n	80029ea <ssd1306_Fill+0x16>
 80029e8:	23ff      	movs	r3, #255	; 0xff
 80029ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ee:	4619      	mov	r1, r3
 80029f0:	4803      	ldr	r0, [pc, #12]	; (8002a00 <ssd1306_Fill+0x2c>)
 80029f2:	f013 fd5e 	bl	80164b2 <memset>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000bb0 	.word	0x20000bb0

08002a04 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	71fb      	strb	r3, [r7, #7]
 8002a0e:	e016      	b.n	8002a3e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	3b50      	subs	r3, #80	; 0x50
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ff40 	bl	800289c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7ff ff3d 	bl	800289c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002a22:	2010      	movs	r0, #16
 8002a24:	f7ff ff3a 	bl	800289c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	01db      	lsls	r3, r3, #7
 8002a2c:	4a08      	ldr	r2, [pc, #32]	; (8002a50 <ssd1306_UpdateScreen+0x4c>)
 8002a2e:	4413      	add	r3, r2
 8002a30:	2180      	movs	r1, #128	; 0x80
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff ff4a 	bl	80028cc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	71fb      	strb	r3, [r7, #7]
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	2b07      	cmp	r3, #7
 8002a42:	d9e5      	bls.n	8002a10 <ssd1306_UpdateScreen+0xc>
    }
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000bb0 	.word	0x20000bb0

08002a54 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	71fb      	strb	r3, [r7, #7]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	71bb      	strb	r3, [r7, #6]
 8002a62:	4613      	mov	r3, r2
 8002a64:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	db3d      	blt.n	8002aea <ssd1306_DrawPixel+0x96>
 8002a6e:	79bb      	ldrb	r3, [r7, #6]
 8002a70:	2b3f      	cmp	r3, #63	; 0x3f
 8002a72:	d83a      	bhi.n	8002aea <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002a74:	797b      	ldrb	r3, [r7, #5]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d11a      	bne.n	8002ab0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002a7a:	79fa      	ldrb	r2, [r7, #7]
 8002a7c:	79bb      	ldrb	r3, [r7, #6]
 8002a7e:	08db      	lsrs	r3, r3, #3
 8002a80:	b2d8      	uxtb	r0, r3
 8002a82:	4603      	mov	r3, r0
 8002a84:	01db      	lsls	r3, r3, #7
 8002a86:	4413      	add	r3, r2
 8002a88:	4a1b      	ldr	r2, [pc, #108]	; (8002af8 <ssd1306_DrawPixel+0xa4>)
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	b25a      	sxtb	r2, r3
 8002a8e:	79bb      	ldrb	r3, [r7, #6]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	2101      	movs	r1, #1
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	b25b      	sxtb	r3, r3
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	b259      	sxtb	r1, r3
 8002aa0:	79fa      	ldrb	r2, [r7, #7]
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	01db      	lsls	r3, r3, #7
 8002aa6:	4413      	add	r3, r2
 8002aa8:	b2c9      	uxtb	r1, r1
 8002aaa:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <ssd1306_DrawPixel+0xa4>)
 8002aac:	54d1      	strb	r1, [r2, r3]
 8002aae:	e01d      	b.n	8002aec <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002ab0:	79fa      	ldrb	r2, [r7, #7]
 8002ab2:	79bb      	ldrb	r3, [r7, #6]
 8002ab4:	08db      	lsrs	r3, r3, #3
 8002ab6:	b2d8      	uxtb	r0, r3
 8002ab8:	4603      	mov	r3, r0
 8002aba:	01db      	lsls	r3, r3, #7
 8002abc:	4413      	add	r3, r2
 8002abe:	4a0e      	ldr	r2, [pc, #56]	; (8002af8 <ssd1306_DrawPixel+0xa4>)
 8002ac0:	5cd3      	ldrb	r3, [r2, r3]
 8002ac2:	b25a      	sxtb	r2, r3
 8002ac4:	79bb      	ldrb	r3, [r7, #6]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	2101      	movs	r1, #1
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	b25b      	sxtb	r3, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	b25b      	sxtb	r3, r3
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	b259      	sxtb	r1, r3
 8002ada:	79fa      	ldrb	r2, [r7, #7]
 8002adc:	4603      	mov	r3, r0
 8002ade:	01db      	lsls	r3, r3, #7
 8002ae0:	4413      	add	r3, r2
 8002ae2:	b2c9      	uxtb	r1, r1
 8002ae4:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <ssd1306_DrawPixel+0xa4>)
 8002ae6:	54d1      	strb	r1, [r2, r3]
 8002ae8:	e000      	b.n	8002aec <ssd1306_DrawPixel+0x98>
        return;
 8002aea:	bf00      	nop
    }
}
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000bb0 	.word	0x20000bb0

08002afc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4604      	mov	r4, r0
 8002b04:	1d38      	adds	r0, r7, #4
 8002b06:	e880 0006 	stmia.w	r0, {r1, r2}
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4623      	mov	r3, r4
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	4613      	mov	r3, r2
 8002b12:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b1f      	cmp	r3, #31
 8002b18:	d902      	bls.n	8002b20 <ssd1306_WriteChar+0x24>
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	2b7e      	cmp	r3, #126	; 0x7e
 8002b1e:	d901      	bls.n	8002b24 <ssd1306_WriteChar+0x28>
        return 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e06d      	b.n	8002c00 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002b24:	4b38      	ldr	r3, [pc, #224]	; (8002c08 <ssd1306_WriteChar+0x10c>)
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	793b      	ldrb	r3, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	2b80      	cmp	r3, #128	; 0x80
 8002b30:	dc06      	bgt.n	8002b40 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002b32:	4b35      	ldr	r3, [pc, #212]	; (8002c08 <ssd1306_WriteChar+0x10c>)
 8002b34:	885b      	ldrh	r3, [r3, #2]
 8002b36:	461a      	mov	r2, r3
 8002b38:	797b      	ldrb	r3, [r7, #5]
 8002b3a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002b3c:	2b40      	cmp	r3, #64	; 0x40
 8002b3e:	dd01      	ble.n	8002b44 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e05d      	b.n	8002c00 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002b44:	2300      	movs	r3, #0
 8002b46:	61fb      	str	r3, [r7, #28]
 8002b48:	e04c      	b.n	8002be4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	3b20      	subs	r3, #32
 8002b50:	7979      	ldrb	r1, [r7, #5]
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4619      	mov	r1, r3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	440b      	add	r3, r1
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	4413      	add	r3, r2
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002b64:	2300      	movs	r3, #0
 8002b66:	61bb      	str	r3, [r7, #24]
 8002b68:	e034      	b.n	8002bd4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d012      	beq.n	8002ba0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002b7a:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <ssd1306_WriteChar+0x10c>)
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	b2d8      	uxtb	r0, r3
 8002b88:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <ssd1306_WriteChar+0x10c>)
 8002b8a:	885b      	ldrh	r3, [r3, #2]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	7bba      	ldrb	r2, [r7, #14]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f7ff ff5b 	bl	8002a54 <ssd1306_DrawPixel>
 8002b9e:	e016      	b.n	8002bce <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002ba0:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <ssd1306_WriteChar+0x10c>)
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	b2d8      	uxtb	r0, r3
 8002bae:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <ssd1306_WriteChar+0x10c>)
 8002bb0:	885b      	ldrh	r3, [r3, #2]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	b2d9      	uxtb	r1, r3
 8002bbc:	7bbb      	ldrb	r3, [r7, #14]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bf0c      	ite	eq
 8002bc2:	2301      	moveq	r3, #1
 8002bc4:	2300      	movne	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f7ff ff43 	bl	8002a54 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	61bb      	str	r3, [r7, #24]
 8002bd4:	793b      	ldrb	r3, [r7, #4]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d3c5      	bcc.n	8002b6a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3301      	adds	r3, #1
 8002be2:	61fb      	str	r3, [r7, #28]
 8002be4:	797b      	ldrb	r3, [r7, #5]
 8002be6:	461a      	mov	r2, r3
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d3ad      	bcc.n	8002b4a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <ssd1306_WriteChar+0x10c>)
 8002bf0:	881a      	ldrh	r2, [r3, #0]
 8002bf2:	793b      	ldrb	r3, [r7, #4]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <ssd1306_WriteChar+0x10c>)
 8002bfc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3724      	adds	r7, #36	; 0x24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd90      	pop	{r4, r7, pc}
 8002c08:	20000fb0 	.word	0x20000fb0

08002c0c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	1d38      	adds	r0, r7, #4
 8002c16:	e880 0006 	stmia.w	r0, {r1, r2}
 8002c1a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002c1c:	e012      	b.n	8002c44 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	7818      	ldrb	r0, [r3, #0]
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	1d3a      	adds	r2, r7, #4
 8002c26:	ca06      	ldmia	r2, {r1, r2}
 8002c28:	f7ff ff68 	bl	8002afc <ssd1306_WriteChar>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d002      	beq.n	8002c3e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	e008      	b.n	8002c50 <ssd1306_WriteString+0x44>
        }
        str++;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3301      	adds	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e8      	bne.n	8002c1e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	460a      	mov	r2, r1
 8002c62:	71fb      	strb	r3, [r7, #7]
 8002c64:	4613      	mov	r3, r2
 8002c66:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <ssd1306_SetCursor+0x2c>)
 8002c6e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002c70:	79bb      	ldrb	r3, [r7, #6]
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	4b03      	ldr	r3, [pc, #12]	; (8002c84 <ssd1306_SetCursor+0x2c>)
 8002c76:	805a      	strh	r2, [r3, #2]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	20000fb0 	.word	0x20000fb0

08002c88 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4604      	mov	r4, r0
 8002c90:	4608      	mov	r0, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	461a      	mov	r2, r3
 8002c96:	4623      	mov	r3, r4
 8002c98:	71fb      	strb	r3, [r7, #7]
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71bb      	strb	r3, [r7, #6]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	717b      	strb	r3, [r7, #5]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8002ca6:	797a      	ldrb	r2, [r7, #5]
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bfb8      	it	lt
 8002cb0:	425b      	neglt	r3, r3
 8002cb2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002cb4:	793a      	ldrb	r2, [r7, #4]
 8002cb6:	79bb      	ldrb	r3, [r7, #6]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bfb8      	it	lt
 8002cbe:	425b      	neglt	r3, r3
 8002cc0:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002cc2:	79fa      	ldrb	r2, [r7, #7]
 8002cc4:	797b      	ldrb	r3, [r7, #5]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d201      	bcs.n	8002cce <ssd1306_Line+0x46>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e001      	b.n	8002cd2 <ssd1306_Line+0x4a>
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd2:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002cd4:	79ba      	ldrb	r2, [r7, #6]
 8002cd6:	793b      	ldrb	r3, [r7, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d201      	bcs.n	8002ce0 <ssd1306_Line+0x58>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e001      	b.n	8002ce4 <ssd1306_Line+0x5c>
 8002ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8002cee:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002cf2:	7939      	ldrb	r1, [r7, #4]
 8002cf4:	797b      	ldrb	r3, [r7, #5]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff feac 	bl	8002a54 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002cfc:	e024      	b.n	8002d48 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002cfe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002d02:	79b9      	ldrb	r1, [r7, #6]
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fea4 	bl	8002a54 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	425b      	negs	r3, r3
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	dd08      	ble.n	8002d2e <ssd1306_Line+0xa6>
            error -= deltaY;
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	da08      	bge.n	8002d48 <ssd1306_Line+0xc0>
            error += deltaX;
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	79bb      	ldrb	r3, [r7, #6]
 8002d44:	4413      	add	r3, r2
 8002d46:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002d48:	79fa      	ldrb	r2, [r7, #7]
 8002d4a:	797b      	ldrb	r3, [r7, #5]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d1d6      	bne.n	8002cfe <ssd1306_Line+0x76>
 8002d50:	79ba      	ldrb	r2, [r7, #6]
 8002d52:	793b      	ldrb	r3, [r7, #4]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d1d2      	bne.n	8002cfe <ssd1306_Line+0x76>
        }
    }
    return;
 8002d58:	bf00      	nop
}
 8002d5a:	3724      	adds	r7, #36	; 0x24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd90      	pop	{r4, r7, pc}

08002d60 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4604      	mov	r4, r0
 8002d68:	4608      	mov	r0, r1
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4623      	mov	r3, r4
 8002d70:	71fb      	strb	r3, [r7, #7]
 8002d72:	4603      	mov	r3, r0
 8002d74:	71bb      	strb	r3, [r7, #6]
 8002d76:	460b      	mov	r3, r1
 8002d78:	717b      	strb	r3, [r7, #5]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8002d7e:	797b      	ldrb	r3, [r7, #5]
 8002d80:	425b      	negs	r3, r3
 8002d82:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002d88:	797b      	ldrb	r3, [r7, #5]
 8002d8a:	f1c3 0301 	rsb	r3, r3, #1
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	db65      	blt.n	8002e66 <ssd1306_DrawCircle+0x106>
 8002d9a:	79bb      	ldrb	r3, [r7, #6]
 8002d9c:	2b3f      	cmp	r3, #63	; 0x3f
 8002d9e:	d862      	bhi.n	8002e66 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	79fa      	ldrb	r2, [r7, #7]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	b2d8      	uxtb	r0, r3
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	79bb      	ldrb	r3, [r7, #6]
 8002db0:	4413      	add	r3, r2
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	793a      	ldrb	r2, [r7, #4]
 8002db6:	4619      	mov	r1, r3
 8002db8:	f7ff fe4c 	bl	8002a54 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	b2d8      	uxtb	r0, r3
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	79bb      	ldrb	r3, [r7, #6]
 8002dcc:	4413      	add	r3, r2
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	793a      	ldrb	r2, [r7, #4]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f7ff fe3e 	bl	8002a54 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	4413      	add	r3, r2
 8002de0:	b2d8      	uxtb	r0, r3
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	79ba      	ldrb	r2, [r7, #6]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	793a      	ldrb	r2, [r7, #4]
 8002dee:	4619      	mov	r1, r3
 8002df0:	f7ff fe30 	bl	8002a54 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	79fa      	ldrb	r2, [r7, #7]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	b2d8      	uxtb	r0, r3
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	79ba      	ldrb	r2, [r7, #6]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	793a      	ldrb	r2, [r7, #4]
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f7ff fe22 	bl	8002a54 <ssd1306_DrawPixel>
        e2 = err;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	dc13      	bgt.n	8002e44 <ssd1306_DrawCircle+0xe4>
            y++;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	3301      	adds	r3, #1
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	425b      	negs	r3, r3
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d105      	bne.n	8002e44 <ssd1306_DrawCircle+0xe4>
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	dc01      	bgt.n	8002e44 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	dd08      	ble.n	8002e5e <ssd1306_DrawCircle+0xfe>
            x++;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	3301      	adds	r3, #1
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	dd9d      	ble.n	8002da0 <ssd1306_DrawCircle+0x40>

    return;
 8002e64:	e000      	b.n	8002e68 <ssd1306_DrawCircle+0x108>
        return;
 8002e66:	bf00      	nop
}
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd90      	pop	{r4, r7, pc}

08002e6e <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002e6e:	b590      	push	{r4, r7, lr}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af02      	add	r7, sp, #8
 8002e74:	4604      	mov	r4, r0
 8002e76:	4608      	mov	r0, r1
 8002e78:	4611      	mov	r1, r2
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	4623      	mov	r3, r4
 8002e7e:	71fb      	strb	r3, [r7, #7]
 8002e80:	4603      	mov	r3, r0
 8002e82:	71bb      	strb	r3, [r7, #6]
 8002e84:	460b      	mov	r3, r1
 8002e86:	717b      	strb	r3, [r7, #5]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8002e8c:	79bc      	ldrb	r4, [r7, #6]
 8002e8e:	797a      	ldrb	r2, [r7, #5]
 8002e90:	79b9      	ldrb	r1, [r7, #6]
 8002e92:	79f8      	ldrb	r0, [r7, #7]
 8002e94:	7e3b      	ldrb	r3, [r7, #24]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	4623      	mov	r3, r4
 8002e9a:	f7ff fef5 	bl	8002c88 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002e9e:	793c      	ldrb	r4, [r7, #4]
 8002ea0:	797a      	ldrb	r2, [r7, #5]
 8002ea2:	79b9      	ldrb	r1, [r7, #6]
 8002ea4:	7978      	ldrb	r0, [r7, #5]
 8002ea6:	7e3b      	ldrb	r3, [r7, #24]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	4623      	mov	r3, r4
 8002eac:	f7ff feec 	bl	8002c88 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8002eb0:	793c      	ldrb	r4, [r7, #4]
 8002eb2:	79fa      	ldrb	r2, [r7, #7]
 8002eb4:	7939      	ldrb	r1, [r7, #4]
 8002eb6:	7978      	ldrb	r0, [r7, #5]
 8002eb8:	7e3b      	ldrb	r3, [r7, #24]
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	4623      	mov	r3, r4
 8002ebe:	f7ff fee3 	bl	8002c88 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8002ec2:	79bc      	ldrb	r4, [r7, #6]
 8002ec4:	79fa      	ldrb	r2, [r7, #7]
 8002ec6:	7939      	ldrb	r1, [r7, #4]
 8002ec8:	79f8      	ldrb	r0, [r7, #7]
 8002eca:	7e3b      	ldrb	r3, [r7, #24]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	4623      	mov	r3, r4
 8002ed0:	f7ff feda 	bl	8002c88 <ssd1306_Line>

    return;
 8002ed4:	bf00      	nop
}
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd90      	pop	{r4, r7, pc}

08002edc <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4623      	mov	r3, r4
 8002eec:	71fb      	strb	r3, [r7, #7]
 8002eee:	4603      	mov	r3, r0
 8002ef0:	71bb      	strb	r3, [r7, #6]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	717b      	strb	r3, [r7, #5]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002efa:	79fa      	ldrb	r2, [r7, #7]
 8002efc:	797b      	ldrb	r3, [r7, #5]
 8002efe:	4293      	cmp	r3, r2
 8002f00:	bf28      	it	cs
 8002f02:	4613      	movcs	r3, r2
 8002f04:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002f06:	797a      	ldrb	r2, [r7, #5]
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	bf38      	it	cc
 8002f0e:	4613      	movcc	r3, r2
 8002f10:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002f12:	79ba      	ldrb	r2, [r7, #6]
 8002f14:	793b      	ldrb	r3, [r7, #4]
 8002f16:	4293      	cmp	r3, r2
 8002f18:	bf28      	it	cs
 8002f1a:	4613      	movcs	r3, r2
 8002f1c:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002f1e:	793a      	ldrb	r2, [r7, #4]
 8002f20:	79bb      	ldrb	r3, [r7, #6]
 8002f22:	4293      	cmp	r3, r2
 8002f24:	bf38      	it	cc
 8002f26:	4613      	movcc	r3, r2
 8002f28:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002f2a:	7afb      	ldrb	r3, [r7, #11]
 8002f2c:	73fb      	strb	r3, [r7, #15]
 8002f2e:	e017      	b.n	8002f60 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002f30:	7b7b      	ldrb	r3, [r7, #13]
 8002f32:	73bb      	strb	r3, [r7, #14]
 8002f34:	e009      	b.n	8002f4a <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002f36:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f3a:	7bf9      	ldrb	r1, [r7, #15]
 8002f3c:	7bbb      	ldrb	r3, [r7, #14]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fd88 	bl	8002a54 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002f44:	7bbb      	ldrb	r3, [r7, #14]
 8002f46:	3301      	adds	r3, #1
 8002f48:	73bb      	strb	r3, [r7, #14]
 8002f4a:	7bba      	ldrb	r2, [r7, #14]
 8002f4c:	7b3b      	ldrb	r3, [r7, #12]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d803      	bhi.n	8002f5a <ssd1306_FillRectangle+0x7e>
 8002f52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	daed      	bge.n	8002f36 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	7abb      	ldrb	r3, [r7, #10]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d803      	bhi.n	8002f70 <ssd1306_FillRectangle+0x94>
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b3f      	cmp	r3, #63	; 0x3f
 8002f6c:	d9e0      	bls.n	8002f30 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8002f6e:	bf00      	nop
 8002f70:	bf00      	nop
}
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd90      	pop	{r4, r7, pc}

08002f78 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	603a      	str	r2, [r7, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
 8002f86:	460b      	mov	r3, r1
 8002f88:	71bb      	strb	r3, [r7, #6]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002f8e:	797b      	ldrb	r3, [r7, #5]
 8002f90:	3307      	adds	r3, #7
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	da00      	bge.n	8002f98 <ssd1306_DrawBitmap+0x20>
 8002f96:	3307      	adds	r3, #7
 8002f98:	10db      	asrs	r3, r3, #3
 8002f9a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	db3e      	blt.n	8003026 <ssd1306_DrawBitmap+0xae>
 8002fa8:	79bb      	ldrb	r3, [r7, #6]
 8002faa:	2b3f      	cmp	r3, #63	; 0x3f
 8002fac:	d83b      	bhi.n	8003026 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8002fae:	2300      	movs	r3, #0
 8002fb0:	73bb      	strb	r3, [r7, #14]
 8002fb2:	e033      	b.n	800301c <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	737b      	strb	r3, [r7, #13]
 8002fb8:	e026      	b.n	8003008 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8002fba:	7b7b      	ldrb	r3, [r7, #13]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
 8002fca:	e00d      	b.n	8002fe8 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002fcc:	7bbb      	ldrb	r3, [r7, #14]
 8002fce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	7b7a      	ldrb	r2, [r7, #13]
 8002fd8:	08d2      	lsrs	r2, r2, #3
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	4413      	add	r3, r2
 8002fde:	461a      	mov	r2, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	da08      	bge.n	8003002 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8002ff0:	79fa      	ldrb	r2, [r7, #7]
 8002ff2:	7b7b      	ldrb	r3, [r7, #13]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	7f3a      	ldrb	r2, [r7, #28]
 8002ffa:	79b9      	ldrb	r1, [r7, #6]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fd29 	bl	8002a54 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8003002:	7b7b      	ldrb	r3, [r7, #13]
 8003004:	3301      	adds	r3, #1
 8003006:	737b      	strb	r3, [r7, #13]
 8003008:	7b7a      	ldrb	r2, [r7, #13]
 800300a:	797b      	ldrb	r3, [r7, #5]
 800300c:	429a      	cmp	r2, r3
 800300e:	d3d4      	bcc.n	8002fba <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8003010:	7bbb      	ldrb	r3, [r7, #14]
 8003012:	3301      	adds	r3, #1
 8003014:	73bb      	strb	r3, [r7, #14]
 8003016:	79bb      	ldrb	r3, [r7, #6]
 8003018:	3301      	adds	r3, #1
 800301a:	71bb      	strb	r3, [r7, #6]
 800301c:	7bba      	ldrb	r2, [r7, #14]
 800301e:	7e3b      	ldrb	r3, [r7, #24]
 8003020:	429a      	cmp	r2, r3
 8003022:	d3c7      	bcc.n	8002fb4 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8003024:	e000      	b.n	8003028 <ssd1306_DrawBitmap+0xb0>
        return;
 8003026:	bf00      	nop
}
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	4603      	mov	r3, r0
 8003036:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003038:	2381      	movs	r3, #129	; 0x81
 800303a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fc2c 	bl	800289c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fc28 	bl	800289c <ssd1306_WriteCommand>
}
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003064:	23af      	movs	r3, #175	; 0xaf
 8003066:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <ssd1306_SetDisplayOn+0x38>)
 800306a:	2201      	movs	r2, #1
 800306c:	715a      	strb	r2, [r3, #5]
 800306e:	e004      	b.n	800307a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003070:	23ae      	movs	r3, #174	; 0xae
 8003072:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <ssd1306_SetDisplayOn+0x38>)
 8003076:	2200      	movs	r2, #0
 8003078:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fc0d 	bl	800289c <ssd1306_WriteCommand>
}
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000fb0 	.word	0x20000fb0

08003090 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b087      	sub	sp, #28
 8003094:	af02      	add	r7, sp, #8
 8003096:	ed87 0a03 	vstr	s0, [r7, #12]
 800309a:	60b8      	str	r0, [r7, #8]
 800309c:	6079      	str	r1, [r7, #4]
 800309e:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	330f      	adds	r3, #15
 80030a6:	b2d8      	uxtb	r0, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	3301      	adds	r3, #1
 80030ae:	b2d9      	uxtb	r1, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	330f      	adds	r3, #15
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	3305      	adds	r3, #5
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2401      	movs	r4, #1
 80030c2:	9400      	str	r4, [sp, #0]
 80030c4:	f7ff fde0 	bl	8002c88 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	3310      	adds	r3, #16
 80030ce:	b2d8      	uxtb	r0, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	3301      	adds	r3, #1
 80030d6:	b2d9      	uxtb	r1, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	3310      	adds	r3, #16
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	3305      	adds	r3, #5
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2401      	movs	r4, #1
 80030ea:	9400      	str	r4, [sp, #0]
 80030ec:	f7ff fdcc 	bl	8002c88 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	b2d8      	uxtb	r0, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	b2d9      	uxtb	r1, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	330e      	adds	r3, #14
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	3306      	adds	r3, #6
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2401      	movs	r4, #1
 800310a:	9400      	str	r4, [sp, #0]
 800310c:	f7ff feaf 	bl	8002e6e <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7fd fa19 	bl	8000548 <__aeabi_f2d>
 8003116:	a396      	add	r3, pc, #600	; (adr r3, 8003370 <batterygauge+0x2e0>)
 8003118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311c:	f7fd fce8 	bl	8000af0 <__aeabi_dcmple>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d02a      	beq.n	800317c <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	3302      	adds	r3, #2
 800312c:	b2d8      	uxtb	r0, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	3302      	adds	r3, #2
 8003134:	b2d9      	uxtb	r1, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	3303      	adds	r3, #3
 800313c:	b2da      	uxtb	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	3304      	adds	r3, #4
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2401      	movs	r4, #1
 8003148:	9400      	str	r4, [sp, #0]
 800314a:	f7ff fe90 	bl	8002e6e <ssd1306_DrawRectangle>
		if(currentsquare==1){
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d113      	bne.n	800317c <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	3302      	adds	r3, #2
 800315a:	b2d8      	uxtb	r0, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	3302      	adds	r3, #2
 8003162:	b2d9      	uxtb	r1, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	3303      	adds	r3, #3
 800316a:	b2da      	uxtb	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	3304      	adds	r3, #4
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2401      	movs	r4, #1
 8003176:	9400      	str	r4, [sp, #0]
 8003178:	f7ff fe79 	bl	8002e6e <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f7fd f9e3 	bl	8000548 <__aeabi_f2d>
 8003182:	a37b      	add	r3, pc, #492	; (adr r3, 8003370 <batterygauge+0x2e0>)
 8003184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003188:	f7fd fcc6 	bl	8000b18 <__aeabi_dcmpgt>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d035      	beq.n	80031fe <batterygauge+0x16e>
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f7fd f9d8 	bl	8000548 <__aeabi_f2d>
 8003198:	a377      	add	r3, pc, #476	; (adr r3, 8003378 <batterygauge+0x2e8>)
 800319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319e:	f7fd fca7 	bl	8000af0 <__aeabi_dcmple>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d02a      	beq.n	80031fe <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	3302      	adds	r3, #2
 80031ae:	b2d8      	uxtb	r0, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	3302      	adds	r3, #2
 80031b6:	b2d9      	uxtb	r1, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	3303      	adds	r3, #3
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	3304      	adds	r3, #4
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2401      	movs	r4, #1
 80031ca:	9400      	str	r4, [sp, #0]
 80031cc:	f7ff fe4f 	bl	8002e6e <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d113      	bne.n	80031fe <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	3305      	adds	r3, #5
 80031dc:	b2d8      	uxtb	r0, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	3302      	adds	r3, #2
 80031e4:	b2d9      	uxtb	r1, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	3306      	adds	r3, #6
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	3304      	adds	r3, #4
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2401      	movs	r4, #1
 80031f8:	9400      	str	r4, [sp, #0]
 80031fa:	f7ff fe38 	bl	8002e6e <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f7fd f9a2 	bl	8000548 <__aeabi_f2d>
 8003204:	a35c      	add	r3, pc, #368	; (adr r3, 8003378 <batterygauge+0x2e8>)
 8003206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320a:	f7fd fc85 	bl	8000b18 <__aeabi_dcmpgt>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d049      	beq.n	80032a8 <batterygauge+0x218>
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f7fd f997 	bl	8000548 <__aeabi_f2d>
 800321a:	a359      	add	r3, pc, #356	; (adr r3, 8003380 <batterygauge+0x2f0>)
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f7fd fc66 	bl	8000af0 <__aeabi_dcmple>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d03e      	beq.n	80032a8 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	3302      	adds	r3, #2
 8003230:	b2d8      	uxtb	r0, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	3302      	adds	r3, #2
 8003238:	b2d9      	uxtb	r1, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	3303      	adds	r3, #3
 8003240:	b2da      	uxtb	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	3304      	adds	r3, #4
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2401      	movs	r4, #1
 800324c:	9400      	str	r4, [sp, #0]
 800324e:	f7ff fe0e 	bl	8002e6e <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	3305      	adds	r3, #5
 8003258:	b2d8      	uxtb	r0, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	3302      	adds	r3, #2
 8003260:	b2d9      	uxtb	r1, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	3306      	adds	r3, #6
 8003268:	b2da      	uxtb	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	3304      	adds	r3, #4
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2401      	movs	r4, #1
 8003274:	9400      	str	r4, [sp, #0]
 8003276:	f7ff fdfa 	bl	8002e6e <ssd1306_DrawRectangle>

		if(currentsquare==1){
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d113      	bne.n	80032a8 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	3308      	adds	r3, #8
 8003286:	b2d8      	uxtb	r0, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	3302      	adds	r3, #2
 800328e:	b2d9      	uxtb	r1, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	3309      	adds	r3, #9
 8003296:	b2da      	uxtb	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	3304      	adds	r3, #4
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2401      	movs	r4, #1
 80032a2:	9400      	str	r4, [sp, #0]
 80032a4:	f7ff fde3 	bl	8002e6e <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f7fd f94d 	bl	8000548 <__aeabi_f2d>
 80032ae:	a334      	add	r3, pc, #208	; (adr r3, 8003380 <batterygauge+0x2f0>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f7fd fc30 	bl	8000b18 <__aeabi_dcmpgt>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d100      	bne.n	80032c0 <batterygauge+0x230>
	}




}
 80032be:	e052      	b.n	8003366 <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	3302      	adds	r3, #2
 80032c6:	b2d8      	uxtb	r0, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	3302      	adds	r3, #2
 80032ce:	b2d9      	uxtb	r1, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	3303      	adds	r3, #3
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	3304      	adds	r3, #4
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2401      	movs	r4, #1
 80032e2:	9400      	str	r4, [sp, #0]
 80032e4:	f7ff fdc3 	bl	8002e6e <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	3305      	adds	r3, #5
 80032ee:	b2d8      	uxtb	r0, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	3302      	adds	r3, #2
 80032f6:	b2d9      	uxtb	r1, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	3306      	adds	r3, #6
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	3304      	adds	r3, #4
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2401      	movs	r4, #1
 800330a:	9400      	str	r4, [sp, #0]
 800330c:	f7ff fdaf 	bl	8002e6e <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	3308      	adds	r3, #8
 8003316:	b2d8      	uxtb	r0, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	3302      	adds	r3, #2
 800331e:	b2d9      	uxtb	r1, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	3309      	adds	r3, #9
 8003326:	b2da      	uxtb	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	3304      	adds	r3, #4
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2401      	movs	r4, #1
 8003332:	9400      	str	r4, [sp, #0]
 8003334:	f7ff fd9b 	bl	8002e6e <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d113      	bne.n	8003366 <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	330b      	adds	r3, #11
 8003344:	b2d8      	uxtb	r0, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	3302      	adds	r3, #2
 800334c:	b2d9      	uxtb	r1, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	330c      	adds	r3, #12
 8003354:	b2da      	uxtb	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	3304      	adds	r3, #4
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2401      	movs	r4, #1
 8003360:	9400      	str	r4, [sp, #0]
 8003362:	f7ff fd84 	bl	8002e6e <ssd1306_DrawRectangle>
}
 8003366:	bf00      	nop
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	bd90      	pop	{r4, r7, pc}
 800336e:	bf00      	nop
 8003370:	9999999a 	.word	0x9999999a
 8003374:	400d9999 	.word	0x400d9999
 8003378:	33333333 	.word	0x33333333
 800337c:	400f3333 	.word	0x400f3333
 8003380:	66666666 	.word	0x66666666
 8003384:	40106666 	.word	0x40106666

08003388 <percentage>:

void percentage(float percent){
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af02      	add	r7, sp, #8
 800338e:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 40, floor(0.64*percent+32), 56, White);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fd f8d8 	bl	8000548 <__aeabi_f2d>
 8003398:	a329      	add	r3, pc, #164	; (adr r3, 8003440 <percentage+0xb8>)
 800339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339e:	f7fd f92b 	bl	80005f8 <__aeabi_dmul>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4610      	mov	r0, r2
 80033a8:	4619      	mov	r1, r3
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	4b20      	ldr	r3, [pc, #128]	; (8003430 <percentage+0xa8>)
 80033b0:	f7fc ff6c 	bl	800028c <__adddf3>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	ec43 2b17 	vmov	d7, r2, r3
 80033bc:	eeb0 0a47 	vmov.f32	s0, s14
 80033c0:	eef0 0a67 	vmov.f32	s1, s15
 80033c4:	f015 ff28 	bl	8019218 <floor>
 80033c8:	ec53 2b10 	vmov	r2, r3, d0
 80033cc:	4610      	mov	r0, r2
 80033ce:	4619      	mov	r1, r3
 80033d0:	f7fd fbea 	bl	8000ba8 <__aeabi_d2uiz>
 80033d4:	4603      	mov	r3, r0
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	2301      	movs	r3, #1
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	2338      	movs	r3, #56	; 0x38
 80033de:	2128      	movs	r1, #40	; 0x28
 80033e0:	2020      	movs	r0, #32
 80033e2:	f7ff fd7b 	bl	8002edc <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 40, 95, 56, White);
 80033e6:	2301      	movs	r3, #1
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2338      	movs	r3, #56	; 0x38
 80033ec:	225f      	movs	r2, #95	; 0x5f
 80033ee:	2128      	movs	r1, #40	; 0x28
 80033f0:	2020      	movs	r0, #32
 80033f2:	f7ff fd3c 	bl	8002e6e <ssd1306_DrawRectangle>
	snprintf((uint8_t *)str,20,"%0.2f %%",(float) percent);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd f8a6 	bl	8000548 <__aeabi_f2d>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	e9cd 2300 	strd	r2, r3, [sp]
 8003404:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <percentage+0xac>)
 8003406:	2114      	movs	r1, #20
 8003408:	480b      	ldr	r0, [pc, #44]	; (8003438 <percentage+0xb0>)
 800340a:	f012 ffbb 	bl	8016384 <sniprintf>
	ssd1306_SetCursor(45,44);
 800340e:	212c      	movs	r1, #44	; 0x2c
 8003410:	202d      	movs	r0, #45	; 0x2d
 8003412:	f7ff fc21 	bl	8002c58 <ssd1306_SetCursor>
	ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 8003416:	4a09      	ldr	r2, [pc, #36]	; (800343c <percentage+0xb4>)
 8003418:	2301      	movs	r3, #1
 800341a:	ca06      	ldmia	r2, {r1, r2}
 800341c:	4806      	ldr	r0, [pc, #24]	; (8003438 <percentage+0xb0>)
 800341e:	f7ff fbf5 	bl	8002c0c <ssd1306_WriteString>


}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	f3af 8000 	nop.w
 8003430:	40400000 	.word	0x40400000
 8003434:	0801ab40 	.word	0x0801ab40
 8003438:	20000744 	.word	0x20000744
 800343c:	2000000c 	.word	0x2000000c
 8003440:	47ae147b 	.word	0x47ae147b
 8003444:	3fe47ae1 	.word	0x3fe47ae1

08003448 <statemachine>:





void statemachine(void){
 8003448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344a:	ed2d 8b02 	vpush	{d8}
 800344e:	b09d      	sub	sp, #116	; 0x74
 8003450:	af04      	add	r7, sp, #16
	switch(state){
 8003452:	4b99      	ldr	r3, [pc, #612]	; (80036b8 <statemachine+0x270>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b07      	cmp	r3, #7
 8003458:	f201 875e 	bhi.w	8005318 <statemachine+0x1ed0>
 800345c:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <statemachine+0x1c>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	08003485 	.word	0x08003485
 8003468:	08003919 	.word	0x08003919
 800346c:	08003e61 	.word	0x08003e61
 8003470:	080044e3 	.word	0x080044e3
 8003474:	0800469b 	.word	0x0800469b
 8003478:	080048b1 	.word	0x080048b1
 800347c:	08004d9f 	.word	0x08004d9f
 8003480:	08005275 	.word	0x08005275
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 8003484:	2000      	movs	r0, #0
 8003486:	f7ff faa5 	bl	80029d4 <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 800348a:	2120      	movs	r1, #32
 800348c:	2020      	movs	r0, #32
 800348e:	f7ff fbe3 	bl	8002c58 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 8003492:	498a      	ldr	r1, [pc, #552]	; (80036bc <statemachine+0x274>)
 8003494:	488a      	ldr	r0, [pc, #552]	; (80036c0 <statemachine+0x278>)
 8003496:	f7fe fdb5 	bl	8002004 <nmea_parse>
				 if(myData.speed>=vitmax){
 800349a:	4b89      	ldr	r3, [pc, #548]	; (80036c0 <statemachine+0x278>)
 800349c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80034a0:	4b88      	ldr	r3, [pc, #544]	; (80036c4 <statemachine+0x27c>)
 80034a2:	edd3 7a00 	vldr	s15, [r3]
 80034a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ae:	db03      	blt.n	80034b8 <statemachine+0x70>
									 vitmax=myData.speed;
 80034b0:	4b83      	ldr	r3, [pc, #524]	; (80036c0 <statemachine+0x278>)
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	4a83      	ldr	r2, [pc, #524]	; (80036c4 <statemachine+0x27c>)
 80034b6:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	65fb      	str	r3, [r7, #92]	; 0x5c
								 float sec=0;
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	65bb      	str	r3, [r7, #88]	; 0x58
								 if (myData.speed!=0){
 80034c4:	4b7e      	ldr	r3, [pc, #504]	; (80036c0 <statemachine+0x278>)
 80034c6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80034ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d2:	d032      	beq.n	800353a <statemachine+0xf2>
									 pace=1000/(60*myData.speed);
 80034d4:	4b7a      	ldr	r3, [pc, #488]	; (80036c0 <statemachine+0x278>)
 80034d6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80034da:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80036c8 <statemachine+0x280>
 80034de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034e2:	eddf 6a7a 	vldr	s13, [pc, #488]	; 80036cc <statemachine+0x284>
 80034e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034ea:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
									 sec=(pace-floor(pace))*60;
 80034ee:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80034f0:	f7fd f82a 	bl	8000548 <__aeabi_f2d>
 80034f4:	4604      	mov	r4, r0
 80034f6:	460d      	mov	r5, r1
 80034f8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80034fa:	f7fd f825 	bl	8000548 <__aeabi_f2d>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	ec43 2b10 	vmov	d0, r2, r3
 8003506:	f015 fe87 	bl	8019218 <floor>
 800350a:	ec53 2b10 	vmov	r2, r3, d0
 800350e:	4620      	mov	r0, r4
 8003510:	4629      	mov	r1, r5
 8003512:	f7fc feb9 	bl	8000288 <__aeabi_dsub>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	4b6b      	ldr	r3, [pc, #428]	; (80036d0 <statemachine+0x288>)
 8003524:	f7fd f868 	bl	80005f8 <__aeabi_dmul>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	f7fd fb5a 	bl	8000be8 <__aeabi_d2f>
 8003534:	4603      	mov	r3, r0
 8003536:	65bb      	str	r3, [r7, #88]	; 0x58
 8003538:	e001      	b.n	800353e <statemachine+0xf6>
								 }
								 else {
									 pace=9999;
 800353a:	4b66      	ldr	r3, [pc, #408]	; (80036d4 <statemachine+0x28c>)
 800353c:	65fb      	str	r3, [r7, #92]	; 0x5c
								 }


				  switch(spdstate){
 800353e:	4b66      	ldr	r3, [pc, #408]	; (80036d8 <statemachine+0x290>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b02      	cmp	r3, #2
 8003544:	f000 8162 	beq.w	800380c <statemachine+0x3c4>
 8003548:	2b02      	cmp	r3, #2
 800354a:	f300 81d2 	bgt.w	80038f2 <statemachine+0x4aa>
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <statemachine+0x112>
 8003552:	2b01      	cmp	r3, #1
 8003554:	f000 80d2 	beq.w	80036fc <statemachine+0x2b4>
 8003558:	e1cb      	b.n	80038f2 <statemachine+0x4aa>


				 case STATE_SUMMARY:
					 if(myData.fix == 1){
 800355a:	4b59      	ldr	r3, [pc, #356]	; (80036c0 <statemachine+0x278>)
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	2b01      	cmp	r3, #1
 8003560:	d16f      	bne.n	8003642 <statemachine+0x1fa>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 8003562:	2014      	movs	r0, #20
 8003564:	f011 f814 	bl	8014590 <malloc>
 8003568:	4603      	mov	r3, r0
 800356a:	603b      	str	r3, [r7, #0]
					 				 						snprintf(str,15, "MaxV=%.1f",vitmax*3.6);
 800356c:	4b55      	ldr	r3, [pc, #340]	; (80036c4 <statemachine+0x27c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7fc ffe9 	bl	8000548 <__aeabi_f2d>
 8003576:	a34e      	add	r3, pc, #312	; (adr r3, 80036b0 <statemachine+0x268>)
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	f7fd f83c 	bl	80005f8 <__aeabi_dmul>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	e9cd 2300 	strd	r2, r3, [sp]
 8003588:	4a54      	ldr	r2, [pc, #336]	; (80036dc <statemachine+0x294>)
 800358a:	210f      	movs	r1, #15
 800358c:	6838      	ldr	r0, [r7, #0]
 800358e:	f012 fef9 	bl	8016384 <sniprintf>
					 				 						ssd1306_SetCursor(32, 32);
 8003592:	2120      	movs	r1, #32
 8003594:	2020      	movs	r0, #32
 8003596:	f7ff fb5f 	bl	8002c58 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 800359a:	4a51      	ldr	r2, [pc, #324]	; (80036e0 <statemachine+0x298>)
 800359c:	2301      	movs	r3, #1
 800359e:	ca06      	ldmia	r2, {r1, r2}
 80035a0:	6838      	ldr	r0, [r7, #0]
 80035a2:	f7ff fb33 	bl	8002c0c <ssd1306_WriteString>
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 80035a6:	4b46      	ldr	r3, [pc, #280]	; (80036c0 <statemachine+0x278>)
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fc ffcc 	bl	8000548 <__aeabi_f2d>
 80035b0:	a33f      	add	r3, pc, #252	; (adr r3, 80036b0 <statemachine+0x268>)
 80035b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b6:	f7fd f81f 	bl	80005f8 <__aeabi_dmul>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	e9cd 2300 	strd	r2, r3, [sp]
 80035c2:	4a48      	ldr	r2, [pc, #288]	; (80036e4 <statemachine+0x29c>)
 80035c4:	210f      	movs	r1, #15
 80035c6:	6838      	ldr	r0, [r7, #0]
 80035c8:	f012 fedc 	bl	8016384 <sniprintf>
					 				 						ssd1306_SetCursor(32, 42);
 80035cc:	212a      	movs	r1, #42	; 0x2a
 80035ce:	2020      	movs	r0, #32
 80035d0:	f7ff fb42 	bl	8002c58 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 80035d4:	4a42      	ldr	r2, [pc, #264]	; (80036e0 <statemachine+0x298>)
 80035d6:	2301      	movs	r3, #1
 80035d8:	ca06      	ldmia	r2, {r1, r2}
 80035da:	6838      	ldr	r0, [r7, #0]
 80035dc:	f7ff fb16 	bl	8002c0c <ssd1306_WriteString>
					 				 						snprintf(str,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));
 80035e0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80035e2:	f7fc ffb1 	bl	8000548 <__aeabi_f2d>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	ec43 2b10 	vmov	d0, r2, r3
 80035ee:	f015 fe13 	bl	8019218 <floor>
 80035f2:	eeb0 8a40 	vmov.f32	s16, s0
 80035f6:	eef0 8a60 	vmov.f32	s17, s1
 80035fa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80035fc:	f7fc ffa4 	bl	8000548 <__aeabi_f2d>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	ec43 2b10 	vmov	d0, r2, r3
 8003608:	f015 fe06 	bl	8019218 <floor>
 800360c:	eeb0 7a40 	vmov.f32	s14, s0
 8003610:	eef0 7a60 	vmov.f32	s15, s1
 8003614:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003618:	ed8d 8b00 	vstr	d8, [sp]
 800361c:	4a32      	ldr	r2, [pc, #200]	; (80036e8 <statemachine+0x2a0>)
 800361e:	210f      	movs	r1, #15
 8003620:	6838      	ldr	r0, [r7, #0]
 8003622:	f012 feaf 	bl	8016384 <sniprintf>
					 				 						ssd1306_SetCursor(32, 52);
 8003626:	2134      	movs	r1, #52	; 0x34
 8003628:	2020      	movs	r0, #32
 800362a:	f7ff fb15 	bl	8002c58 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 800362e:	4a2c      	ldr	r2, [pc, #176]	; (80036e0 <statemachine+0x298>)
 8003630:	2301      	movs	r3, #1
 8003632:	ca06      	ldmia	r2, {r1, r2}
 8003634:	6838      	ldr	r0, [r7, #0]
 8003636:	f7ff fae9 	bl	8002c0c <ssd1306_WriteString>
					 				 						free(str);
 800363a:	6838      	ldr	r0, [r7, #0]
 800363c:	f010 ffb0 	bl	80145a0 <free>
 8003640:	e025      	b.n	800368e <statemachine+0x246>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);
 8003642:	2014      	movs	r0, #20
 8003644:	f010 ffa4 	bl	8014590 <malloc>
 8003648:	4603      	mov	r3, r0
 800364a:	607b      	str	r3, [r7, #4]
					 				 						ssd1306_SetCursor(32, 32);
 800364c:	2120      	movs	r1, #32
 800364e:	2020      	movs	r0, #32
 8003650:	f7ff fb02 	bl	8002c58 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 1", Font_6x8, White);
 8003654:	4a22      	ldr	r2, [pc, #136]	; (80036e0 <statemachine+0x298>)
 8003656:	2301      	movs	r3, #1
 8003658:	ca06      	ldmia	r2, {r1, r2}
 800365a:	4824      	ldr	r0, [pc, #144]	; (80036ec <statemachine+0x2a4>)
 800365c:	f7ff fad6 	bl	8002c0c <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8003660:	212c      	movs	r1, #44	; 0x2c
 8003662:	2020      	movs	r0, #32
 8003664:	f7ff faf8 	bl	8002c58 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003668:	4a1d      	ldr	r2, [pc, #116]	; (80036e0 <statemachine+0x298>)
 800366a:	2301      	movs	r3, #1
 800366c:	ca06      	ldmia	r2, {r1, r2}
 800366e:	4820      	ldr	r0, [pc, #128]	; (80036f0 <statemachine+0x2a8>)
 8003670:	f7ff facc 	bl	8002c0c <ssd1306_WriteString>
					 				 						batterygauge(vbat,35, 54,1);
 8003674:	4b1f      	ldr	r3, [pc, #124]	; (80036f4 <statemachine+0x2ac>)
 8003676:	edd3 7a00 	vldr	s15, [r3]
 800367a:	2201      	movs	r2, #1
 800367c:	2136      	movs	r1, #54	; 0x36
 800367e:	2023      	movs	r0, #35	; 0x23
 8003680:	eeb0 0a67 	vmov.f32	s0, s15
 8003684:	f7ff fd04 	bl	8003090 <batterygauge>
					 				 						free(str);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f010 ff89 	bl	80145a0 <free>
					 				 					}
					 if(BTN_B>=1){
 800368e:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <statemachine+0x2b0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f340 8128 	ble.w	80038e8 <statemachine+0x4a0>
					 					 				 					spdstate++;
 8003698:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <statemachine+0x290>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	3301      	adds	r3, #1
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <statemachine+0x290>)
 80036a2:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 80036a4:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <statemachine+0x2b0>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
					 					 				  	}



					 break;
 80036aa:	e11d      	b.n	80038e8 <statemachine+0x4a0>
 80036ac:	f3af 8000 	nop.w
 80036b0:	cccccccd 	.word	0xcccccccd
 80036b4:	400ccccc 	.word	0x400ccccc
 80036b8:	20000478 	.word	0x20000478
 80036bc:	200004c4 	.word	0x200004c4
 80036c0:	200006c8 	.word	0x200006c8
 80036c4:	200009f0 	.word	0x200009f0
 80036c8:	42700000 	.word	0x42700000
 80036cc:	447a0000 	.word	0x447a0000
 80036d0:	404e0000 	.word	0x404e0000
 80036d4:	461c3c00 	.word	0x461c3c00
 80036d8:	2000047a 	.word	0x2000047a
 80036dc:	0801ab4c 	.word	0x0801ab4c
 80036e0:	2000000c 	.word	0x2000000c
 80036e4:	0801ab58 	.word	0x0801ab58
 80036e8:	0801ab60 	.word	0x0801ab60
 80036ec:	0801ab74 	.word	0x0801ab74
 80036f0:	0801ab7c 	.word	0x0801ab7c
 80036f4:	20000740 	.word	0x20000740
 80036f8:	2000070c 	.word	0x2000070c
				 case STATE_COMPTEUR:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 80036fc:	4b96      	ldr	r3, [pc, #600]	; (8003958 <statemachine+0x510>)
 80036fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003700:	2b01      	cmp	r3, #1
 8003702:	d159      	bne.n	80037b8 <statemachine+0x370>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 8003704:	2014      	movs	r0, #20
 8003706:	f010 ff43 	bl	8014590 <malloc>
 800370a:	4603      	mov	r3, r0
 800370c:	60bb      	str	r3, [r7, #8]
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 800370e:	4b92      	ldr	r3, [pc, #584]	; (8003958 <statemachine+0x510>)
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	4618      	mov	r0, r3
 8003714:	f7fc ff18 	bl	8000548 <__aeabi_f2d>
 8003718:	a38b      	add	r3, pc, #556	; (adr r3, 8003948 <statemachine+0x500>)
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	f7fc ff6b 	bl	80005f8 <__aeabi_dmul>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	e9cd 2300 	strd	r2, r3, [sp]
 800372a:	4a8c      	ldr	r2, [pc, #560]	; (800395c <statemachine+0x514>)
 800372c:	210f      	movs	r1, #15
 800372e:	68b8      	ldr	r0, [r7, #8]
 8003730:	f012 fe28 	bl	8016384 <sniprintf>
					 				 						ssd1306_SetCursor(32, 54);
 8003734:	2136      	movs	r1, #54	; 0x36
 8003736:	2020      	movs	r0, #32
 8003738:	f7ff fa8e 	bl	8002c58 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 800373c:	4a88      	ldr	r2, [pc, #544]	; (8003960 <statemachine+0x518>)
 800373e:	2301      	movs	r3, #1
 8003740:	ca06      	ldmia	r2, {r1, r2}
 8003742:	68b8      	ldr	r0, [r7, #8]
 8003744:	f7ff fa62 	bl	8002c0c <ssd1306_WriteString>
					 				 						ssd1306_DrawRectangle(32, 38, 95, 53, White);
 8003748:	2301      	movs	r3, #1
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	2335      	movs	r3, #53	; 0x35
 800374e:	225f      	movs	r2, #95	; 0x5f
 8003750:	2126      	movs	r1, #38	; 0x26
 8003752:	2020      	movs	r0, #32
 8003754:	f7ff fb8b 	bl	8002e6e <ssd1306_DrawRectangle>
					 				 						ssd1306_FillRectangle(32, 38,(int) floor(32+(myData.speed*0.63)), 53, White);
 8003758:	4b7f      	ldr	r3, [pc, #508]	; (8003958 <statemachine+0x510>)
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	4618      	mov	r0, r3
 800375e:	f7fc fef3 	bl	8000548 <__aeabi_f2d>
 8003762:	a37b      	add	r3, pc, #492	; (adr r3, 8003950 <statemachine+0x508>)
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f7fc ff46 	bl	80005f8 <__aeabi_dmul>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	4b7a      	ldr	r3, [pc, #488]	; (8003964 <statemachine+0x51c>)
 800377a:	f7fc fd87 	bl	800028c <__adddf3>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	ec43 2b17 	vmov	d7, r2, r3
 8003786:	eeb0 0a47 	vmov.f32	s0, s14
 800378a:	eef0 0a67 	vmov.f32	s1, s15
 800378e:	f015 fd43 	bl	8019218 <floor>
 8003792:	ec53 2b10 	vmov	r2, r3, d0
 8003796:	4610      	mov	r0, r2
 8003798:	4619      	mov	r1, r3
 800379a:	f7fd f9dd 	bl	8000b58 <__aeabi_d2iz>
 800379e:	4603      	mov	r3, r0
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	2301      	movs	r3, #1
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	2335      	movs	r3, #53	; 0x35
 80037a8:	2126      	movs	r1, #38	; 0x26
 80037aa:	2020      	movs	r0, #32
 80037ac:	f7ff fb96 	bl	8002edc <ssd1306_FillRectangle>

					 				 						free(str);
 80037b0:	68b8      	ldr	r0, [r7, #8]
 80037b2:	f010 fef5 	bl	80145a0 <free>
 80037b6:	e01b      	b.n	80037f0 <statemachine+0x3a8>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 80037b8:	2014      	movs	r0, #20
 80037ba:	f010 fee9 	bl	8014590 <malloc>
 80037be:	4603      	mov	r3, r0
 80037c0:	60fb      	str	r3, [r7, #12]
					 				 						ssd1306_SetCursor(32, 32);
 80037c2:	2120      	movs	r1, #32
 80037c4:	2020      	movs	r0, #32
 80037c6:	f7ff fa47 	bl	8002c58 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 2", Font_6x8, White);
 80037ca:	4a65      	ldr	r2, [pc, #404]	; (8003960 <statemachine+0x518>)
 80037cc:	2301      	movs	r3, #1
 80037ce:	ca06      	ldmia	r2, {r1, r2}
 80037d0:	4865      	ldr	r0, [pc, #404]	; (8003968 <statemachine+0x520>)
 80037d2:	f7ff fa1b 	bl	8002c0c <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 80037d6:	212c      	movs	r1, #44	; 0x2c
 80037d8:	2020      	movs	r0, #32
 80037da:	f7ff fa3d 	bl	8002c58 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80037de:	4a60      	ldr	r2, [pc, #384]	; (8003960 <statemachine+0x518>)
 80037e0:	2301      	movs	r3, #1
 80037e2:	ca06      	ldmia	r2, {r1, r2}
 80037e4:	4861      	ldr	r0, [pc, #388]	; (800396c <statemachine+0x524>)
 80037e6:	f7ff fa11 	bl	8002c0c <ssd1306_WriteString>
					 				 						free(str);
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f010 fed8 	bl	80145a0 <free>
					 				 					}
					 if(BTN_B>=1){
 80037f0:	4b5f      	ldr	r3, [pc, #380]	; (8003970 <statemachine+0x528>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	dd79      	ble.n	80038ec <statemachine+0x4a4>
					 				 					spdstate++;
 80037f8:	4b5e      	ldr	r3, [pc, #376]	; (8003974 <statemachine+0x52c>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	3301      	adds	r3, #1
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	4b5c      	ldr	r3, [pc, #368]	; (8003974 <statemachine+0x52c>)
 8003802:	701a      	strb	r2, [r3, #0]
					 				 					BTN_B=0;
 8003804:	4b5a      	ldr	r3, [pc, #360]	; (8003970 <statemachine+0x528>)
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 800380a:	e06f      	b.n	80038ec <statemachine+0x4a4>
				 case STATE_GRAPH:
					 if(myData.fix == 1){
 800380c:	4b52      	ldr	r3, [pc, #328]	; (8003958 <statemachine+0x510>)
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	2b01      	cmp	r3, #1
 8003812:	d12f      	bne.n	8003874 <statemachine+0x42c>
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8003814:	2014      	movs	r0, #20
 8003816:	f010 febb 	bl	8014590 <malloc>
 800381a:	4603      	mov	r3, r0
 800381c:	613b      	str	r3, [r7, #16]

					 				 						ssd1306_SetCursor(32, 32);
 800381e:	2120      	movs	r1, #32
 8003820:	2020      	movs	r0, #32
 8003822:	f7ff fa19 	bl	8002c58 <ssd1306_SetCursor>
					 				 						snprintf(str,15, "%0.1f",(myData.speed)*3.6);
 8003826:	4b4c      	ldr	r3, [pc, #304]	; (8003958 <statemachine+0x510>)
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	4618      	mov	r0, r3
 800382c:	f7fc fe8c 	bl	8000548 <__aeabi_f2d>
 8003830:	a345      	add	r3, pc, #276	; (adr r3, 8003948 <statemachine+0x500>)
 8003832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003836:	f7fc fedf 	bl	80005f8 <__aeabi_dmul>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	e9cd 2300 	strd	r2, r3, [sp]
 8003842:	4a4d      	ldr	r2, [pc, #308]	; (8003978 <statemachine+0x530>)
 8003844:	210f      	movs	r1, #15
 8003846:	6938      	ldr	r0, [r7, #16]
 8003848:	f012 fd9c 	bl	8016384 <sniprintf>
					 				 						ssd1306_WriteString(str, Font_11x18, White);
 800384c:	4a4b      	ldr	r2, [pc, #300]	; (800397c <statemachine+0x534>)
 800384e:	2301      	movs	r3, #1
 8003850:	ca06      	ldmia	r2, {r1, r2}
 8003852:	6938      	ldr	r0, [r7, #16]
 8003854:	f7ff f9da 	bl	8002c0c <ssd1306_WriteString>
					 				 						batterygauge(vbat,35, 54,1);
 8003858:	4b49      	ldr	r3, [pc, #292]	; (8003980 <statemachine+0x538>)
 800385a:	edd3 7a00 	vldr	s15, [r3]
 800385e:	2201      	movs	r2, #1
 8003860:	2136      	movs	r1, #54	; 0x36
 8003862:	2023      	movs	r0, #35	; 0x23
 8003864:	eeb0 0a67 	vmov.f32	s0, s15
 8003868:	f7ff fc12 	bl	8003090 <batterygauge>

					 				 						free(str);
 800386c:	6938      	ldr	r0, [r7, #16]
 800386e:	f010 fe97 	bl	80145a0 <free>
 8003872:	e025      	b.n	80038c0 <statemachine+0x478>
					 }
					 else{
						 char *str = (char*)malloc(sizeof(char)*20);
 8003874:	2014      	movs	r0, #20
 8003876:	f010 fe8b 	bl	8014590 <malloc>
 800387a:	4603      	mov	r3, r0
 800387c:	617b      	str	r3, [r7, #20]
						 ssd1306_SetCursor(32, 32);
 800387e:	2120      	movs	r1, #32
 8003880:	2020      	movs	r0, #32
 8003882:	f7ff f9e9 	bl	8002c58 <ssd1306_SetCursor>
						 ssd1306_WriteString("Speed 3", Font_6x8, White);
 8003886:	4a36      	ldr	r2, [pc, #216]	; (8003960 <statemachine+0x518>)
 8003888:	2301      	movs	r3, #1
 800388a:	ca06      	ldmia	r2, {r1, r2}
 800388c:	483d      	ldr	r0, [pc, #244]	; (8003984 <statemachine+0x53c>)
 800388e:	f7ff f9bd 	bl	8002c0c <ssd1306_WriteString>
						 ssd1306_SetCursor(32, 44);
 8003892:	212c      	movs	r1, #44	; 0x2c
 8003894:	2020      	movs	r0, #32
 8003896:	f7ff f9df 	bl	8002c58 <ssd1306_SetCursor>
						 ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800389a:	4a31      	ldr	r2, [pc, #196]	; (8003960 <statemachine+0x518>)
 800389c:	2301      	movs	r3, #1
 800389e:	ca06      	ldmia	r2, {r1, r2}
 80038a0:	4832      	ldr	r0, [pc, #200]	; (800396c <statemachine+0x524>)
 80038a2:	f7ff f9b3 	bl	8002c0c <ssd1306_WriteString>
						 batterygauge(vbat,35, 54,1);
 80038a6:	4b36      	ldr	r3, [pc, #216]	; (8003980 <statemachine+0x538>)
 80038a8:	edd3 7a00 	vldr	s15, [r3]
 80038ac:	2201      	movs	r2, #1
 80038ae:	2136      	movs	r1, #54	; 0x36
 80038b0:	2023      	movs	r0, #35	; 0x23
 80038b2:	eeb0 0a67 	vmov.f32	s0, s15
 80038b6:	f7ff fbeb 	bl	8003090 <batterygauge>
						 free(str);
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f010 fe70 	bl	80145a0 <free>
					 }

					 if(BTN_B>=1){
 80038c0:	4b2b      	ldr	r3, [pc, #172]	; (8003970 <statemachine+0x528>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	dd13      	ble.n	80038f0 <statemachine+0x4a8>
					 					 				 					spdstate--;
 80038c8:	4b2a      	ldr	r3, [pc, #168]	; (8003974 <statemachine+0x52c>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	4b28      	ldr	r3, [pc, #160]	; (8003974 <statemachine+0x52c>)
 80038d2:	701a      	strb	r2, [r3, #0]
					 					 				 					spdstate--;
 80038d4:	4b27      	ldr	r3, [pc, #156]	; (8003974 <statemachine+0x52c>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	3b01      	subs	r3, #1
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	4b25      	ldr	r3, [pc, #148]	; (8003974 <statemachine+0x52c>)
 80038de:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 80038e0:	4b23      	ldr	r3, [pc, #140]	; (8003970 <statemachine+0x528>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 80038e6:	e003      	b.n	80038f0 <statemachine+0x4a8>
					 break;
 80038e8:	bf00      	nop
 80038ea:	e002      	b.n	80038f2 <statemachine+0x4aa>
					 break;
 80038ec:	bf00      	nop
 80038ee:	e000      	b.n	80038f2 <statemachine+0x4aa>
					 break;
 80038f0:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 80038f2:	4b25      	ldr	r3, [pc, #148]	; (8003988 <statemachine+0x540>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f341 84fe 	ble.w	80052f8 <statemachine+0x1eb0>
				 					state++;
 80038fc:	4b23      	ldr	r3, [pc, #140]	; (800398c <statemachine+0x544>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	3301      	adds	r3, #1
 8003902:	b2da      	uxtb	r2, r3
 8003904:	4b21      	ldr	r3, [pc, #132]	; (800398c <statemachine+0x544>)
 8003906:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 8003908:	4b1f      	ldr	r3, [pc, #124]	; (8003988 <statemachine+0x540>)
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
				 					BTN_B=0;
 800390e:	4b18      	ldr	r3, [pc, #96]	; (8003970 <statemachine+0x528>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
				  	}
				  break;
 8003914:	f001 bcf0 	b.w	80052f8 <statemachine+0x1eb0>


	case STATE_POS:
			  ssd1306_Fill(Black);
 8003918:	2000      	movs	r0, #0
 800391a:	f7ff f85b 	bl	80029d4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 800391e:	491c      	ldr	r1, [pc, #112]	; (8003990 <statemachine+0x548>)
 8003920:	480d      	ldr	r0, [pc, #52]	; (8003958 <statemachine+0x510>)
 8003922:	f7fe fb6f 	bl	8002004 <nmea_parse>
			  switch(posstate){
 8003926:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <statemachine+0x54c>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b03      	cmp	r3, #3
 800392c:	f200 8285 	bhi.w	8003e3a <statemachine+0x9f2>
 8003930:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <statemachine+0x4f0>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	08003999 	.word	0x08003999
 800393c:	08003ab1 	.word	0x08003ab1
 8003940:	08003ba7 	.word	0x08003ba7
 8003944:	08003cd7 	.word	0x08003cd7
 8003948:	cccccccd 	.word	0xcccccccd
 800394c:	400ccccc 	.word	0x400ccccc
 8003950:	c28f5c29 	.word	0xc28f5c29
 8003954:	3fe428f5 	.word	0x3fe428f5
 8003958:	200006c8 	.word	0x200006c8
 800395c:	0801ab58 	.word	0x0801ab58
 8003960:	2000000c 	.word	0x2000000c
 8003964:	40400000 	.word	0x40400000
 8003968:	0801ab88 	.word	0x0801ab88
 800396c:	0801ab7c 	.word	0x0801ab7c
 8003970:	2000070c 	.word	0x2000070c
 8003974:	2000047a 	.word	0x2000047a
 8003978:	0801ab90 	.word	0x0801ab90
 800397c:	2000001c 	.word	0x2000001c
 8003980:	20000740 	.word	0x20000740
 8003984:	0801ab98 	.word	0x0801ab98
 8003988:	20000708 	.word	0x20000708
 800398c:	20000478 	.word	0x20000478
 8003990:	200004c4 	.word	0x200004c4
 8003994:	2000047b 	.word	0x2000047b

			  case STATE_SUMMARY1:
				  if(myData.fix == 1){
 8003998:	4bab      	ldr	r3, [pc, #684]	; (8003c48 <statemachine+0x800>)
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	2b01      	cmp	r3, #1
 800399e:	d14e      	bne.n	8003a3e <statemachine+0x5f6>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 80039a0:	2014      	movs	r0, #20
 80039a2:	f010 fdf5 	bl	8014590 <malloc>
 80039a6:	4603      	mov	r3, r0
 80039a8:	61bb      	str	r3, [r7, #24]
				  						ssd1306_SetCursor(32, 32);
 80039aa:	2120      	movs	r1, #32
 80039ac:	2020      	movs	r0, #32
 80039ae:	f7ff f953 	bl	8002c58 <ssd1306_SetCursor>
				  						snprintf(str,15, "Latitude:");
 80039b2:	4aa6      	ldr	r2, [pc, #664]	; (8003c4c <statemachine+0x804>)
 80039b4:	210f      	movs	r1, #15
 80039b6:	69b8      	ldr	r0, [r7, #24]
 80039b8:	f012 fce4 	bl	8016384 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80039bc:	4aa4      	ldr	r2, [pc, #656]	; (8003c50 <statemachine+0x808>)
 80039be:	2301      	movs	r3, #1
 80039c0:	ca06      	ldmia	r2, {r1, r2}
 80039c2:	69b8      	ldr	r0, [r7, #24]
 80039c4:	f7ff f922 	bl	8002c0c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80039c8:	4b9f      	ldr	r3, [pc, #636]	; (8003c48 <statemachine+0x800>)
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	e9cd 2300 	strd	r2, r3, [sp]
 80039d2:	4aa0      	ldr	r2, [pc, #640]	; (8003c54 <statemachine+0x80c>)
 80039d4:	210f      	movs	r1, #15
 80039d6:	69b8      	ldr	r0, [r7, #24]
 80039d8:	f012 fcd4 	bl	8016384 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 80039dc:	2128      	movs	r1, #40	; 0x28
 80039de:	2020      	movs	r0, #32
 80039e0:	f7ff f93a 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80039e4:	4a9a      	ldr	r2, [pc, #616]	; (8003c50 <statemachine+0x808>)
 80039e6:	2301      	movs	r3, #1
 80039e8:	ca06      	ldmia	r2, {r1, r2}
 80039ea:	69b8      	ldr	r0, [r7, #24]
 80039ec:	f7ff f90e 	bl	8002c0c <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 80039f0:	4a99      	ldr	r2, [pc, #612]	; (8003c58 <statemachine+0x810>)
 80039f2:	210f      	movs	r1, #15
 80039f4:	69b8      	ldr	r0, [r7, #24]
 80039f6:	f012 fcc5 	bl	8016384 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 80039fa:	2130      	movs	r1, #48	; 0x30
 80039fc:	2020      	movs	r0, #32
 80039fe:	f7ff f92b 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003a02:	4a93      	ldr	r2, [pc, #588]	; (8003c50 <statemachine+0x808>)
 8003a04:	2301      	movs	r3, #1
 8003a06:	ca06      	ldmia	r2, {r1, r2}
 8003a08:	69b8      	ldr	r0, [r7, #24]
 8003a0a:	f7ff f8ff 	bl	8002c0c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8003a0e:	4b8e      	ldr	r3, [pc, #568]	; (8003c48 <statemachine+0x800>)
 8003a10:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003a14:	e9cd 2300 	strd	r2, r3, [sp]
 8003a18:	4a8e      	ldr	r2, [pc, #568]	; (8003c54 <statemachine+0x80c>)
 8003a1a:	210f      	movs	r1, #15
 8003a1c:	69b8      	ldr	r0, [r7, #24]
 8003a1e:	f012 fcb1 	bl	8016384 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003a22:	2138      	movs	r1, #56	; 0x38
 8003a24:	2020      	movs	r0, #32
 8003a26:	f7ff f917 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003a2a:	4a89      	ldr	r2, [pc, #548]	; (8003c50 <statemachine+0x808>)
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	ca06      	ldmia	r2, {r1, r2}
 8003a30:	69b8      	ldr	r0, [r7, #24]
 8003a32:	f7ff f8eb 	bl	8002c0c <ssd1306_WriteString>
				  						free(str);
 8003a36:	69b8      	ldr	r0, [r7, #24]
 8003a38:	f010 fdb2 	bl	80145a0 <free>
 8003a3c:	e029      	b.n	8003a92 <statemachine+0x64a>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003a3e:	2014      	movs	r0, #20
 8003a40:	f010 fda6 	bl	8014590 <malloc>
 8003a44:	4603      	mov	r3, r0
 8003a46:	61fb      	str	r3, [r7, #28]
				  						ssd1306_SetCursor(32, 32);
 8003a48:	2120      	movs	r1, #32
 8003a4a:	2020      	movs	r0, #32
 8003a4c:	f7ff f904 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos1", Font_6x8, White);
 8003a50:	4a7f      	ldr	r2, [pc, #508]	; (8003c50 <statemachine+0x808>)
 8003a52:	2301      	movs	r3, #1
 8003a54:	ca06      	ldmia	r2, {r1, r2}
 8003a56:	4881      	ldr	r0, [pc, #516]	; (8003c5c <statemachine+0x814>)
 8003a58:	f7ff f8d8 	bl	8002c0c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003a5c:	212c      	movs	r1, #44	; 0x2c
 8003a5e:	2020      	movs	r0, #32
 8003a60:	f7ff f8fa 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003a64:	4a7a      	ldr	r2, [pc, #488]	; (8003c50 <statemachine+0x808>)
 8003a66:	2301      	movs	r3, #1
 8003a68:	ca06      	ldmia	r2, {r1, r2}
 8003a6a:	487d      	ldr	r0, [pc, #500]	; (8003c60 <statemachine+0x818>)
 8003a6c:	f7ff f8ce 	bl	8002c0c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 54);
 8003a70:	2136      	movs	r1, #54	; 0x36
 8003a72:	2020      	movs	r0, #32
 8003a74:	f7ff f8f0 	bl	8002c58 <ssd1306_SetCursor>
				  						batterygauge(vbat,35, 54,1);
 8003a78:	4b7a      	ldr	r3, [pc, #488]	; (8003c64 <statemachine+0x81c>)
 8003a7a:	edd3 7a00 	vldr	s15, [r3]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	2136      	movs	r1, #54	; 0x36
 8003a82:	2023      	movs	r0, #35	; 0x23
 8003a84:	eeb0 0a67 	vmov.f32	s0, s15
 8003a88:	f7ff fb02 	bl	8003090 <batterygauge>
				  						free(str);
 8003a8c:	69f8      	ldr	r0, [r7, #28]
 8003a8e:	f010 fd87 	bl	80145a0 <free>
				  					}
				  if(BTN_B>=1){
 8003a92:	4b75      	ldr	r3, [pc, #468]	; (8003c68 <statemachine+0x820>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f340 81c8 	ble.w	8003e2c <statemachine+0x9e4>
					  posstate++;
 8003a9c:	4b73      	ldr	r3, [pc, #460]	; (8003c6c <statemachine+0x824>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	4b71      	ldr	r3, [pc, #452]	; (8003c6c <statemachine+0x824>)
 8003aa6:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8003aa8:	4b6f      	ldr	r3, [pc, #444]	; (8003c68 <statemachine+0x820>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]





				  break;
 8003aae:	e1bd      	b.n	8003e2c <statemachine+0x9e4>
			  case STATE_LAT:
				  if(myData.fix == 1){
 8003ab0:	4b65      	ldr	r3, [pc, #404]	; (8003c48 <statemachine+0x800>)
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d14b      	bne.n	8003b50 <statemachine+0x708>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003ab8:	2014      	movs	r0, #20
 8003aba:	f010 fd69 	bl	8014590 <malloc>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	623b      	str	r3, [r7, #32]
				  						ssd1306_SetCursor(32, 32);
 8003ac2:	2120      	movs	r1, #32
 8003ac4:	2020      	movs	r0, #32
 8003ac6:	f7ff f8c7 	bl	8002c58 <ssd1306_SetCursor>
				  						snprintf(str,15, "LatSide:");
 8003aca:	4a69      	ldr	r2, [pc, #420]	; (8003c70 <statemachine+0x828>)
 8003acc:	210f      	movs	r1, #15
 8003ace:	6a38      	ldr	r0, [r7, #32]
 8003ad0:	f012 fc58 	bl	8016384 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003ad4:	4a5e      	ldr	r2, [pc, #376]	; (8003c50 <statemachine+0x808>)
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	ca06      	ldmia	r2, {r1, r2}
 8003ada:	6a38      	ldr	r0, [r7, #32]
 8003adc:	f7ff f896 	bl	8002c0c <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003ae0:	4b59      	ldr	r3, [pc, #356]	; (8003c48 <statemachine+0x800>)
 8003ae2:	7a1b      	ldrb	r3, [r3, #8]
 8003ae4:	4a63      	ldr	r2, [pc, #396]	; (8003c74 <statemachine+0x82c>)
 8003ae6:	210f      	movs	r1, #15
 8003ae8:	6a38      	ldr	r0, [r7, #32]
 8003aea:	f012 fc4b 	bl	8016384 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003aee:	2128      	movs	r1, #40	; 0x28
 8003af0:	2020      	movs	r0, #32
 8003af2:	f7ff f8b1 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003af6:	4a56      	ldr	r2, [pc, #344]	; (8003c50 <statemachine+0x808>)
 8003af8:	2301      	movs	r3, #1
 8003afa:	ca06      	ldmia	r2, {r1, r2}
 8003afc:	6a38      	ldr	r0, [r7, #32]
 8003afe:	f7ff f885 	bl	8002c0c <ssd1306_WriteString>
				  						snprintf(str,15, "Latitude:");
 8003b02:	4a52      	ldr	r2, [pc, #328]	; (8003c4c <statemachine+0x804>)
 8003b04:	210f      	movs	r1, #15
 8003b06:	6a38      	ldr	r0, [r7, #32]
 8003b08:	f012 fc3c 	bl	8016384 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003b0c:	2130      	movs	r1, #48	; 0x30
 8003b0e:	2020      	movs	r0, #32
 8003b10:	f7ff f8a2 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003b14:	4a4e      	ldr	r2, [pc, #312]	; (8003c50 <statemachine+0x808>)
 8003b16:	2301      	movs	r3, #1
 8003b18:	ca06      	ldmia	r2, {r1, r2}
 8003b1a:	6a38      	ldr	r0, [r7, #32]
 8003b1c:	f7ff f876 	bl	8002c0c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);
 8003b20:	4b49      	ldr	r3, [pc, #292]	; (8003c48 <statemachine+0x800>)
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	e9cd 2300 	strd	r2, r3, [sp]
 8003b2a:	4a4a      	ldr	r2, [pc, #296]	; (8003c54 <statemachine+0x80c>)
 8003b2c:	210f      	movs	r1, #15
 8003b2e:	6a38      	ldr	r0, [r7, #32]
 8003b30:	f012 fc28 	bl	8016384 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003b34:	2138      	movs	r1, #56	; 0x38
 8003b36:	2020      	movs	r0, #32
 8003b38:	f7ff f88e 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003b3c:	4a44      	ldr	r2, [pc, #272]	; (8003c50 <statemachine+0x808>)
 8003b3e:	2301      	movs	r3, #1
 8003b40:	ca06      	ldmia	r2, {r1, r2}
 8003b42:	6a38      	ldr	r0, [r7, #32]
 8003b44:	f7ff f862 	bl	8002c0c <ssd1306_WriteString>
				  						free(str);
 8003b48:	6a38      	ldr	r0, [r7, #32]
 8003b4a:	f010 fd29 	bl	80145a0 <free>
 8003b4e:	e01b      	b.n	8003b88 <statemachine+0x740>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003b50:	2014      	movs	r0, #20
 8003b52:	f010 fd1d 	bl	8014590 <malloc>
 8003b56:	4603      	mov	r3, r0
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
				  						ssd1306_SetCursor(32, 32);
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	2020      	movs	r0, #32
 8003b5e:	f7ff f87b 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos2", Font_6x8, White);
 8003b62:	4a3b      	ldr	r2, [pc, #236]	; (8003c50 <statemachine+0x808>)
 8003b64:	2301      	movs	r3, #1
 8003b66:	ca06      	ldmia	r2, {r1, r2}
 8003b68:	4843      	ldr	r0, [pc, #268]	; (8003c78 <statemachine+0x830>)
 8003b6a:	f7ff f84f 	bl	8002c0c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003b6e:	212c      	movs	r1, #44	; 0x2c
 8003b70:	2020      	movs	r0, #32
 8003b72:	f7ff f871 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003b76:	4a36      	ldr	r2, [pc, #216]	; (8003c50 <statemachine+0x808>)
 8003b78:	2301      	movs	r3, #1
 8003b7a:	ca06      	ldmia	r2, {r1, r2}
 8003b7c:	4838      	ldr	r0, [pc, #224]	; (8003c60 <statemachine+0x818>)
 8003b7e:	f7ff f845 	bl	8002c0c <ssd1306_WriteString>
				  						free(str);
 8003b82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b84:	f010 fd0c 	bl	80145a0 <free>
				  					}
				  if(BTN_B>=1){
 8003b88:	4b37      	ldr	r3, [pc, #220]	; (8003c68 <statemachine+0x820>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f340 814f 	ble.w	8003e30 <statemachine+0x9e8>
				  					  posstate++;
 8003b92:	4b36      	ldr	r3, [pc, #216]	; (8003c6c <statemachine+0x824>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	3301      	adds	r3, #1
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	4b34      	ldr	r3, [pc, #208]	; (8003c6c <statemachine+0x824>)
 8003b9c:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8003b9e:	4b32      	ldr	r3, [pc, #200]	; (8003c68 <statemachine+0x820>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
				  				  }



				  break;
 8003ba4:	e144      	b.n	8003e30 <statemachine+0x9e8>
			  case STATE_LONG:
				  if(myData.fix == 1){
 8003ba6:	4b28      	ldr	r3, [pc, #160]	; (8003c48 <statemachine+0x800>)
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d168      	bne.n	8003c80 <statemachine+0x838>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003bae:	2014      	movs	r0, #20
 8003bb0:	f010 fcee 	bl	8014590 <malloc>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	62bb      	str	r3, [r7, #40]	; 0x28
				  						ssd1306_SetCursor(32, 32);
 8003bb8:	2120      	movs	r1, #32
 8003bba:	2020      	movs	r0, #32
 8003bbc:	f7ff f84c 	bl	8002c58 <ssd1306_SetCursor>
				  						snprintf(str,15, "LonSide:");
 8003bc0:	4a2e      	ldr	r2, [pc, #184]	; (8003c7c <statemachine+0x834>)
 8003bc2:	210f      	movs	r1, #15
 8003bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bc6:	f012 fbdd 	bl	8016384 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003bca:	4a21      	ldr	r2, [pc, #132]	; (8003c50 <statemachine+0x808>)
 8003bcc:	2301      	movs	r3, #1
 8003bce:	ca06      	ldmia	r2, {r1, r2}
 8003bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bd2:	f7ff f81b 	bl	8002c0c <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003bd6:	4b1c      	ldr	r3, [pc, #112]	; (8003c48 <statemachine+0x800>)
 8003bd8:	7e1b      	ldrb	r3, [r3, #24]
 8003bda:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <statemachine+0x82c>)
 8003bdc:	210f      	movs	r1, #15
 8003bde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003be0:	f012 fbd0 	bl	8016384 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003be4:	2128      	movs	r1, #40	; 0x28
 8003be6:	2020      	movs	r0, #32
 8003be8:	f7ff f836 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003bec:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <statemachine+0x808>)
 8003bee:	2301      	movs	r3, #1
 8003bf0:	ca06      	ldmia	r2, {r1, r2}
 8003bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bf4:	f7ff f80a 	bl	8002c0c <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8003bf8:	4a17      	ldr	r2, [pc, #92]	; (8003c58 <statemachine+0x810>)
 8003bfa:	210f      	movs	r1, #15
 8003bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bfe:	f012 fbc1 	bl	8016384 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003c02:	2130      	movs	r1, #48	; 0x30
 8003c04:	2020      	movs	r0, #32
 8003c06:	f7ff f827 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003c0a:	4a11      	ldr	r2, [pc, #68]	; (8003c50 <statemachine+0x808>)
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	ca06      	ldmia	r2, {r1, r2}
 8003c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c12:	f7fe fffb 	bl	8002c0c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8003c16:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <statemachine+0x800>)
 8003c18:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003c1c:	e9cd 2300 	strd	r2, r3, [sp]
 8003c20:	4a0c      	ldr	r2, [pc, #48]	; (8003c54 <statemachine+0x80c>)
 8003c22:	210f      	movs	r1, #15
 8003c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c26:	f012 fbad 	bl	8016384 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003c2a:	2138      	movs	r1, #56	; 0x38
 8003c2c:	2020      	movs	r0, #32
 8003c2e:	f7ff f813 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003c32:	4a07      	ldr	r2, [pc, #28]	; (8003c50 <statemachine+0x808>)
 8003c34:	2301      	movs	r3, #1
 8003c36:	ca06      	ldmia	r2, {r1, r2}
 8003c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c3a:	f7fe ffe7 	bl	8002c0c <ssd1306_WriteString>
				  						free(str);
 8003c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c40:	f010 fcae 	bl	80145a0 <free>
 8003c44:	e038      	b.n	8003cb8 <statemachine+0x870>
 8003c46:	bf00      	nop
 8003c48:	200006c8 	.word	0x200006c8
 8003c4c:	0801aba0 	.word	0x0801aba0
 8003c50:	2000000c 	.word	0x2000000c
 8003c54:	0801abac 	.word	0x0801abac
 8003c58:	0801abb4 	.word	0x0801abb4
 8003c5c:	0801abc0 	.word	0x0801abc0
 8003c60:	0801ab7c 	.word	0x0801ab7c
 8003c64:	20000740 	.word	0x20000740
 8003c68:	2000070c 	.word	0x2000070c
 8003c6c:	2000047b 	.word	0x2000047b
 8003c70:	0801abc8 	.word	0x0801abc8
 8003c74:	0801abd4 	.word	0x0801abd4
 8003c78:	0801abd8 	.word	0x0801abd8
 8003c7c:	0801abe0 	.word	0x0801abe0
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003c80:	2014      	movs	r0, #20
 8003c82:	f010 fc85 	bl	8014590 <malloc>
 8003c86:	4603      	mov	r3, r0
 8003c88:	62fb      	str	r3, [r7, #44]	; 0x2c
				  						ssd1306_SetCursor(32, 32);
 8003c8a:	2120      	movs	r1, #32
 8003c8c:	2020      	movs	r0, #32
 8003c8e:	f7fe ffe3 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos3", Font_6x8, White);
 8003c92:	4aaf      	ldr	r2, [pc, #700]	; (8003f50 <statemachine+0xb08>)
 8003c94:	2301      	movs	r3, #1
 8003c96:	ca06      	ldmia	r2, {r1, r2}
 8003c98:	48ae      	ldr	r0, [pc, #696]	; (8003f54 <statemachine+0xb0c>)
 8003c9a:	f7fe ffb7 	bl	8002c0c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003c9e:	212c      	movs	r1, #44	; 0x2c
 8003ca0:	2020      	movs	r0, #32
 8003ca2:	f7fe ffd9 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003ca6:	4aaa      	ldr	r2, [pc, #680]	; (8003f50 <statemachine+0xb08>)
 8003ca8:	2301      	movs	r3, #1
 8003caa:	ca06      	ldmia	r2, {r1, r2}
 8003cac:	48aa      	ldr	r0, [pc, #680]	; (8003f58 <statemachine+0xb10>)
 8003cae:	f7fe ffad 	bl	8002c0c <ssd1306_WriteString>
				  						free(str);
 8003cb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cb4:	f010 fc74 	bl	80145a0 <free>
				  					}
				  if(BTN_B>=1){
 8003cb8:	4ba8      	ldr	r3, [pc, #672]	; (8003f5c <statemachine+0xb14>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f340 80b9 	ble.w	8003e34 <statemachine+0x9ec>
				  					  posstate++;
 8003cc2:	4ba7      	ldr	r3, [pc, #668]	; (8003f60 <statemachine+0xb18>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	4ba5      	ldr	r3, [pc, #660]	; (8003f60 <statemachine+0xb18>)
 8003ccc:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8003cce:	4ba3      	ldr	r3, [pc, #652]	; (8003f5c <statemachine+0xb14>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
				  				  }

				  break;
 8003cd4:	e0ae      	b.n	8003e34 <statemachine+0x9ec>
			  case STATE_ALT:
				  if(myData.fix == 1){
 8003cd6:	4ba3      	ldr	r3, [pc, #652]	; (8003f64 <statemachine+0xb1c>)
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d170      	bne.n	8003dc0 <statemachine+0x978>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003cde:	2014      	movs	r0, #20
 8003ce0:	f010 fc56 	bl	8014590 <malloc>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	633b      	str	r3, [r7, #48]	; 0x30
				  						ssd1306_SetCursor(32, 32);
 8003ce8:	2120      	movs	r1, #32
 8003cea:	2020      	movs	r0, #32
 8003cec:	f7fe ffb4 	bl	8002c58 <ssd1306_SetCursor>
				  						snprintf(str,15, "altitude:");
 8003cf0:	4a9d      	ldr	r2, [pc, #628]	; (8003f68 <statemachine+0xb20>)
 8003cf2:	210f      	movs	r1, #15
 8003cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cf6:	f012 fb45 	bl	8016384 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003cfa:	4a95      	ldr	r2, [pc, #596]	; (8003f50 <statemachine+0xb08>)
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	ca06      	ldmia	r2, {r1, r2}
 8003d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d02:	f7fe ff83 	bl	8002c0c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003d06:	4b97      	ldr	r3, [pc, #604]	; (8003f64 <statemachine+0xb1c>)
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fc fc1c 	bl	8000548 <__aeabi_f2d>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	e9cd 2300 	strd	r2, r3, [sp]
 8003d18:	4a94      	ldr	r2, [pc, #592]	; (8003f6c <statemachine+0xb24>)
 8003d1a:	210f      	movs	r1, #15
 8003d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d1e:	f012 fb31 	bl	8016384 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003d22:	2128      	movs	r1, #40	; 0x28
 8003d24:	2020      	movs	r0, #32
 8003d26:	f7fe ff97 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003d2a:	4a89      	ldr	r2, [pc, #548]	; (8003f50 <statemachine+0xb08>)
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	ca06      	ldmia	r2, {r1, r2}
 8003d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d32:	f7fe ff6b 	bl	8002c0c <ssd1306_WriteString>
				  						snprintf(str,15, "Pressure:");
 8003d36:	4a8e      	ldr	r2, [pc, #568]	; (8003f70 <statemachine+0xb28>)
 8003d38:	210f      	movs	r1, #15
 8003d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d3c:	f012 fb22 	bl	8016384 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003d40:	2130      	movs	r1, #48	; 0x30
 8003d42:	2020      	movs	r0, #32
 8003d44:	f7fe ff88 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003d48:	4a81      	ldr	r2, [pc, #516]	; (8003f50 <statemachine+0xb08>)
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	ca06      	ldmia	r2, {r1, r2}
 8003d4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d50:	f7fe ff5c 	bl	8002c0c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 8003d54:	4b83      	ldr	r3, [pc, #524]	; (8003f64 <statemachine+0xb1c>)
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fc fbf5 	bl	8000548 <__aeabi_f2d>
 8003d5e:	a37a      	add	r3, pc, #488	; (adr r3, 8003f48 <statemachine+0xb00>)
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f7fc fc48 	bl	80005f8 <__aeabi_dmul>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	f7fc ff3a 	bl	8000be8 <__aeabi_d2f>
 8003d74:	4603      	mov	r3, r0
 8003d76:	ee00 3a10 	vmov	s0, r3
 8003d7a:	f015 f9b1 	bl	80190e0 <expf>
 8003d7e:	eef0 7a40 	vmov.f32	s15, s0
 8003d82:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8003f74 <statemachine+0xb2c>
 8003d86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d8a:	ee17 0a90 	vmov	r0, s15
 8003d8e:	f7fc fbdb 	bl	8000548 <__aeabi_f2d>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	e9cd 2300 	strd	r2, r3, [sp]
 8003d9a:	4a77      	ldr	r2, [pc, #476]	; (8003f78 <statemachine+0xb30>)
 8003d9c:	210f      	movs	r1, #15
 8003d9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003da0:	f012 faf0 	bl	8016384 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003da4:	2138      	movs	r1, #56	; 0x38
 8003da6:	2020      	movs	r0, #32
 8003da8:	f7fe ff56 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003dac:	4a68      	ldr	r2, [pc, #416]	; (8003f50 <statemachine+0xb08>)
 8003dae:	2301      	movs	r3, #1
 8003db0:	ca06      	ldmia	r2, {r1, r2}
 8003db2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003db4:	f7fe ff2a 	bl	8002c0c <ssd1306_WriteString>
				  						free(str);
 8003db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dba:	f010 fbf1 	bl	80145a0 <free>
 8003dbe:	e01b      	b.n	8003df8 <statemachine+0x9b0>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003dc0:	2014      	movs	r0, #20
 8003dc2:	f010 fbe5 	bl	8014590 <malloc>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	637b      	str	r3, [r7, #52]	; 0x34
				  						ssd1306_SetCursor(32, 32);
 8003dca:	2120      	movs	r1, #32
 8003dcc:	2020      	movs	r0, #32
 8003dce:	f7fe ff43 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos4", Font_6x8, White);
 8003dd2:	4a5f      	ldr	r2, [pc, #380]	; (8003f50 <statemachine+0xb08>)
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	ca06      	ldmia	r2, {r1, r2}
 8003dd8:	4868      	ldr	r0, [pc, #416]	; (8003f7c <statemachine+0xb34>)
 8003dda:	f7fe ff17 	bl	8002c0c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003dde:	212c      	movs	r1, #44	; 0x2c
 8003de0:	2020      	movs	r0, #32
 8003de2:	f7fe ff39 	bl	8002c58 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003de6:	4a5a      	ldr	r2, [pc, #360]	; (8003f50 <statemachine+0xb08>)
 8003de8:	2301      	movs	r3, #1
 8003dea:	ca06      	ldmia	r2, {r1, r2}
 8003dec:	485a      	ldr	r0, [pc, #360]	; (8003f58 <statemachine+0xb10>)
 8003dee:	f7fe ff0d 	bl	8002c0c <ssd1306_WriteString>
				  						free(str);
 8003df2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003df4:	f010 fbd4 	bl	80145a0 <free>
				  					}
				  if(BTN_B>=1){
 8003df8:	4b58      	ldr	r3, [pc, #352]	; (8003f5c <statemachine+0xb14>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	dd1b      	ble.n	8003e38 <statemachine+0x9f0>
				  					posstate--;
 8003e00:	4b57      	ldr	r3, [pc, #348]	; (8003f60 <statemachine+0xb18>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	4b55      	ldr	r3, [pc, #340]	; (8003f60 <statemachine+0xb18>)
 8003e0a:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003e0c:	4b54      	ldr	r3, [pc, #336]	; (8003f60 <statemachine+0xb18>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	4b52      	ldr	r3, [pc, #328]	; (8003f60 <statemachine+0xb18>)
 8003e16:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003e18:	4b51      	ldr	r3, [pc, #324]	; (8003f60 <statemachine+0xb18>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	4b4f      	ldr	r3, [pc, #316]	; (8003f60 <statemachine+0xb18>)
 8003e22:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 8003e24:	4b4d      	ldr	r3, [pc, #308]	; (8003f5c <statemachine+0xb14>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
				  				  }
				  break;
 8003e2a:	e005      	b.n	8003e38 <statemachine+0x9f0>
				  break;
 8003e2c:	bf00      	nop
 8003e2e:	e004      	b.n	8003e3a <statemachine+0x9f2>
				  break;
 8003e30:	bf00      	nop
 8003e32:	e002      	b.n	8003e3a <statemachine+0x9f2>
				  break;
 8003e34:	bf00      	nop
 8003e36:	e000      	b.n	8003e3a <statemachine+0x9f2>
				  break;
 8003e38:	bf00      	nop
			  }

					if(BTN_A>=1){
 8003e3a:	4b51      	ldr	r3, [pc, #324]	; (8003f80 <statemachine+0xb38>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f341 825c 	ble.w	80052fc <statemachine+0x1eb4>
							state++;
 8003e44:	4b4f      	ldr	r3, [pc, #316]	; (8003f84 <statemachine+0xb3c>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	4b4d      	ldr	r3, [pc, #308]	; (8003f84 <statemachine+0xb3c>)
 8003e4e:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8003e50:	4b4b      	ldr	r3, [pc, #300]	; (8003f80 <statemachine+0xb38>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8003e56:	4b41      	ldr	r3, [pc, #260]	; (8003f5c <statemachine+0xb14>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]


						}
			  break;
 8003e5c:	f001 ba4e 	b.w	80052fc <statemachine+0x1eb4>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 8003e60:	2000      	movs	r0, #0
 8003e62:	f7fe fdb7 	bl	80029d4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8003e66:	4948      	ldr	r1, [pc, #288]	; (8003f88 <statemachine+0xb40>)
 8003e68:	483e      	ldr	r0, [pc, #248]	; (8003f64 <statemachine+0xb1c>)
 8003e6a:	f7fe f8cb 	bl	8002004 <nmea_parse>
			  if(settimeen==0){
 8003e6e:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <statemachine+0xb44>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d145      	bne.n	8003f02 <statemachine+0xaba>

						  if(myData.fix==1){
 8003e76:	4b3b      	ldr	r3, [pc, #236]	; (8003f64 <statemachine+0xb1c>)
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d141      	bne.n	8003f02 <statemachine+0xaba>
							settimeen=1;
 8003e7e:	4b43      	ldr	r3, [pc, #268]	; (8003f8c <statemachine+0xb44>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8003e84:	4b37      	ldr	r3, [pc, #220]	; (8003f64 <statemachine+0xb1c>)
 8003e86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	0092      	lsls	r2, r2, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	4b32      	ldr	r3, [pc, #200]	; (8003f64 <statemachine+0xb1c>)
 8003e9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <statemachine+0xb48>)
 8003eac:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8003eae:	4b2d      	ldr	r3, [pc, #180]	; (8003f64 <statemachine+0xb1c>)
 8003eb0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	461a      	mov	r2, r3
 8003ebc:	0092      	lsls	r2, r2, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	4b27      	ldr	r3, [pc, #156]	; (8003f64 <statemachine+0xb1c>)
 8003ec6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	4b2f      	ldr	r3, [pc, #188]	; (8003f94 <statemachine+0xb4c>)
 8003ed6:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8003ed8:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <statemachine+0xb1c>)
 8003eda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	0092      	lsls	r2, r2, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	4b1d      	ldr	r3, [pc, #116]	; (8003f64 <statemachine+0xb1c>)
 8003ef0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	4413      	add	r3, r2
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	4b26      	ldr	r3, [pc, #152]	; (8003f98 <statemachine+0xb50>)
 8003f00:	701a      	strb	r2, [r3, #0]

					  }



			  if(myData.fix == 0){
 8003f02:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <statemachine+0xb1c>)
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <statemachine+0xad8>
				  ssd1306_SetCursor(32, 32);
 8003f0a:	2120      	movs	r1, #32
 8003f0c:	2020      	movs	r0, #32
 8003f0e:	f7fe fea3 	bl	8002c58 <ssd1306_SetCursor>
				  ssd1306_WriteString("no fix", Font_6x8, White);
 8003f12:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <statemachine+0xb08>)
 8003f14:	2301      	movs	r3, #1
 8003f16:	ca06      	ldmia	r2, {r1, r2}
 8003f18:	4820      	ldr	r0, [pc, #128]	; (8003f9c <statemachine+0xb54>)
 8003f1a:	f7fe fe77 	bl	8002c0c <ssd1306_WriteString>
 8003f1e:	e009      	b.n	8003f34 <statemachine+0xaec>

			  }
			  else{

				  ssd1306_SetCursor(32, 32);
 8003f20:	2120      	movs	r1, #32
 8003f22:	2020      	movs	r0, #32
 8003f24:	f7fe fe98 	bl	8002c58 <ssd1306_SetCursor>
				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 8003f28:	4a09      	ldr	r2, [pc, #36]	; (8003f50 <statemachine+0xb08>)
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	ca06      	ldmia	r2, {r1, r2}
 8003f2e:	481c      	ldr	r0, [pc, #112]	; (8003fa0 <statemachine+0xb58>)
 8003f30:	f7fe fe6c 	bl	8002c0c <ssd1306_WriteString>

			  }



				  switch(hrstate){
 8003f34:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <statemachine+0xb5c>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d035      	beq.n	8003fa8 <statemachine+0xb60>
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d071      	beq.n	8004024 <statemachine+0xbdc>
 8003f40:	e2b9      	b.n	80044b6 <statemachine+0x106e>
 8003f42:	bf00      	nop
 8003f44:	f3af 8000 	nop.w
 8003f48:	fb798882 	.word	0xfb798882
 8003f4c:	bf1e1818 	.word	0xbf1e1818
 8003f50:	2000000c 	.word	0x2000000c
 8003f54:	0801abec 	.word	0x0801abec
 8003f58:	0801ab7c 	.word	0x0801ab7c
 8003f5c:	2000070c 	.word	0x2000070c
 8003f60:	2000047b 	.word	0x2000047b
 8003f64:	200006c8 	.word	0x200006c8
 8003f68:	0801abf4 	.word	0x0801abf4
 8003f6c:	0801ac00 	.word	0x0801ac00
 8003f70:	0801ac08 	.word	0x0801ac08
 8003f74:	447a0000 	.word	0x447a0000
 8003f78:	0801ac14 	.word	0x0801ac14
 8003f7c:	0801ac20 	.word	0x0801ac20
 8003f80:	20000708 	.word	0x20000708
 8003f84:	20000478 	.word	0x20000478
 8003f88:	200004c4 	.word	0x200004c4
 8003f8c:	20000fbc 	.word	0x20000fbc
 8003f90:	20000a49 	.word	0x20000a49
 8003f94:	20000a4a 	.word	0x20000a4a
 8003f98:	20000a48 	.word	0x20000a48
 8003f9c:	0801ac28 	.word	0x0801ac28
 8003fa0:	0801ac30 	.word	0x0801ac30
 8003fa4:	20000479 	.word	0x20000479
				  case STATE_DIGIT:
					  char * str = (char*)malloc(sizeof(char)*20);
 8003fa8:	2014      	movs	r0, #20
 8003faa:	f010 faf1 	bl	8014590 <malloc>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	63bb      	str	r3, [r7, #56]	; 0x38


					 ssd1306_SetCursor(32, 42);
 8003fb2:	212a      	movs	r1, #42	; 0x2a
 8003fb4:	2020      	movs	r0, #32
 8003fb6:	f7fe fe4f 	bl	8002c58 <ssd1306_SetCursor>
					 snprintf(str,15, "%02d:%02d",HR,MINUTE);
 8003fba:	4bab      	ldr	r3, [pc, #684]	; (8004268 <statemachine+0xe20>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4baa      	ldr	r3, [pc, #680]	; (800426c <statemachine+0xe24>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	4aa9      	ldr	r2, [pc, #676]	; (8004270 <statemachine+0xe28>)
 8003fca:	210f      	movs	r1, #15
 8003fcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003fce:	f012 f9d9 	bl	8016384 <sniprintf>
					ssd1306_WriteString(str, Font_7x10, White);
 8003fd2:	4aa8      	ldr	r2, [pc, #672]	; (8004274 <statemachine+0xe2c>)
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	ca06      	ldmia	r2, {r1, r2}
 8003fd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003fda:	f7fe fe17 	bl	8002c0c <ssd1306_WriteString>
					ssd1306_SetCursor(32, 50);
 8003fde:	2132      	movs	r1, #50	; 0x32
 8003fe0:	2020      	movs	r0, #32
 8003fe2:	f7fe fe39 	bl	8002c58 <ssd1306_SetCursor>
					snprintf(str,15, "%02d sec",SEC);
 8003fe6:	4ba4      	ldr	r3, [pc, #656]	; (8004278 <statemachine+0xe30>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	4aa4      	ldr	r2, [pc, #656]	; (800427c <statemachine+0xe34>)
 8003fec:	210f      	movs	r1, #15
 8003fee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ff0:	f012 f9c8 	bl	8016384 <sniprintf>
					ssd1306_WriteString(str, Font_6x8, White);
 8003ff4:	4aa2      	ldr	r2, [pc, #648]	; (8004280 <statemachine+0xe38>)
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	ca06      	ldmia	r2, {r1, r2}
 8003ffa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ffc:	f7fe fe06 	bl	8002c0c <ssd1306_WriteString>
					free(str);
 8004000:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004002:	f010 facd 	bl	80145a0 <free>
					if(BTN_B>=1){
 8004006:	4b9f      	ldr	r3, [pc, #636]	; (8004284 <statemachine+0xe3c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f340 8250 	ble.w	80044b0 <statemachine+0x1068>
												hrstate++;
 8004010:	4b9d      	ldr	r3, [pc, #628]	; (8004288 <statemachine+0xe40>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	3301      	adds	r3, #1
 8004016:	b2da      	uxtb	r2, r3
 8004018:	4b9b      	ldr	r3, [pc, #620]	; (8004288 <statemachine+0xe40>)
 800401a:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 800401c:	4b99      	ldr	r3, [pc, #612]	; (8004284 <statemachine+0xe3c>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
											}




					  break;
 8004022:	e245      	b.n	80044b0 <statemachine+0x1068>
				  case STATE_OLD:
					  if(HR>12){
 8004024:	4b90      	ldr	r3, [pc, #576]	; (8004268 <statemachine+0xe20>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b0c      	cmp	r3, #12
 800402a:	d905      	bls.n	8004038 <statemachine+0xbf0>
						  HR=HR-12;
 800402c:	4b8e      	ldr	r3, [pc, #568]	; (8004268 <statemachine+0xe20>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	3b0c      	subs	r3, #12
 8004032:	b2da      	uxtb	r2, r3
 8004034:	4b8c      	ldr	r3, [pc, #560]	; (8004268 <statemachine+0xe20>)
 8004036:	701a      	strb	r2, [r3, #0]
					  }
					  ssd1306_DrawCircle(64, 48, 12, White);
 8004038:	2301      	movs	r3, #1
 800403a:	220c      	movs	r2, #12
 800403c:	2130      	movs	r1, #48	; 0x30
 800403e:	2040      	movs	r0, #64	; 0x40
 8004040:	f7fe fe8e 	bl	8002d60 <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-HR)*M_PI/6)),48-floor(6*sin((3-HR)*M_PI/6)),White);
 8004044:	4b88      	ldr	r3, [pc, #544]	; (8004268 <statemachine+0xe20>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	f1c3 0303 	rsb	r3, r3, #3
 800404c:	4618      	mov	r0, r3
 800404e:	f7fc fa69 	bl	8000524 <__aeabi_i2d>
 8004052:	a383      	add	r3, pc, #524	; (adr r3, 8004260 <statemachine+0xe18>)
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	f7fc face 	bl	80005f8 <__aeabi_dmul>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4610      	mov	r0, r2
 8004062:	4619      	mov	r1, r3
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	4b88      	ldr	r3, [pc, #544]	; (800428c <statemachine+0xe44>)
 800406a:	f7fc fbef 	bl	800084c <__aeabi_ddiv>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	ec43 2b17 	vmov	d7, r2, r3
 8004076:	eeb0 0a47 	vmov.f32	s0, s14
 800407a:	eef0 0a67 	vmov.f32	s1, s15
 800407e:	f014 ff83 	bl	8018f88 <cos>
 8004082:	ec51 0b10 	vmov	r0, r1, d0
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	4b80      	ldr	r3, [pc, #512]	; (800428c <statemachine+0xe44>)
 800408c:	f7fc fab4 	bl	80005f8 <__aeabi_dmul>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	ec43 2b17 	vmov	d7, r2, r3
 8004098:	eeb0 0a47 	vmov.f32	s0, s14
 800409c:	eef0 0a67 	vmov.f32	s1, s15
 80040a0:	f015 f8ba 	bl	8019218 <floor>
 80040a4:	ec51 0b10 	vmov	r0, r1, d0
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	4b78      	ldr	r3, [pc, #480]	; (8004290 <statemachine+0xe48>)
 80040ae:	f7fc f8ed 	bl	800028c <__adddf3>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4610      	mov	r0, r2
 80040b8:	4619      	mov	r1, r3
 80040ba:	f7fc fd75 	bl	8000ba8 <__aeabi_d2uiz>
 80040be:	4603      	mov	r3, r0
 80040c0:	b2dc      	uxtb	r4, r3
 80040c2:	4b69      	ldr	r3, [pc, #420]	; (8004268 <statemachine+0xe20>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	f1c3 0303 	rsb	r3, r3, #3
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc fa2a 	bl	8000524 <__aeabi_i2d>
 80040d0:	a363      	add	r3, pc, #396	; (adr r3, 8004260 <statemachine+0xe18>)
 80040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d6:	f7fc fa8f 	bl	80005f8 <__aeabi_dmul>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	4b69      	ldr	r3, [pc, #420]	; (800428c <statemachine+0xe44>)
 80040e8:	f7fc fbb0 	bl	800084c <__aeabi_ddiv>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	ec43 2b17 	vmov	d7, r2, r3
 80040f4:	eeb0 0a47 	vmov.f32	s0, s14
 80040f8:	eef0 0a67 	vmov.f32	s1, s15
 80040fc:	f014 ff98 	bl	8019030 <sin>
 8004100:	ec51 0b10 	vmov	r0, r1, d0
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	4b60      	ldr	r3, [pc, #384]	; (800428c <statemachine+0xe44>)
 800410a:	f7fc fa75 	bl	80005f8 <__aeabi_dmul>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	ec43 2b17 	vmov	d7, r2, r3
 8004116:	eeb0 0a47 	vmov.f32	s0, s14
 800411a:	eef0 0a67 	vmov.f32	s1, s15
 800411e:	f015 f87b 	bl	8019218 <floor>
 8004122:	ec53 2b10 	vmov	r2, r3, d0
 8004126:	f04f 0000 	mov.w	r0, #0
 800412a:	495a      	ldr	r1, [pc, #360]	; (8004294 <statemachine+0xe4c>)
 800412c:	f7fc f8ac 	bl	8000288 <__aeabi_dsub>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4610      	mov	r0, r2
 8004136:	4619      	mov	r1, r3
 8004138:	f7fc fd36 	bl	8000ba8 <__aeabi_d2uiz>
 800413c:	4603      	mov	r3, r0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2201      	movs	r2, #1
 8004142:	9200      	str	r2, [sp, #0]
 8004144:	4622      	mov	r2, r4
 8004146:	2130      	movs	r1, #48	; 0x30
 8004148:	2040      	movs	r0, #64	; 0x40
 800414a:	f7fe fd9d 	bl	8002c88 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-MINUTE)*M_PI/30)),48-floor(12*sin((15-MINUTE)*M_PI/30)),White);
 800414e:	4b47      	ldr	r3, [pc, #284]	; (800426c <statemachine+0xe24>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	f1c3 030f 	rsb	r3, r3, #15
 8004156:	4618      	mov	r0, r3
 8004158:	f7fc f9e4 	bl	8000524 <__aeabi_i2d>
 800415c:	a340      	add	r3, pc, #256	; (adr r3, 8004260 <statemachine+0xe18>)
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f7fc fa49 	bl	80005f8 <__aeabi_dmul>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	4b49      	ldr	r3, [pc, #292]	; (8004298 <statemachine+0xe50>)
 8004174:	f7fc fb6a 	bl	800084c <__aeabi_ddiv>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	ec43 2b17 	vmov	d7, r2, r3
 8004180:	eeb0 0a47 	vmov.f32	s0, s14
 8004184:	eef0 0a67 	vmov.f32	s1, s15
 8004188:	f014 fefe 	bl	8018f88 <cos>
 800418c:	ec51 0b10 	vmov	r0, r1, d0
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	4b41      	ldr	r3, [pc, #260]	; (800429c <statemachine+0xe54>)
 8004196:	f7fc fa2f 	bl	80005f8 <__aeabi_dmul>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	ec43 2b17 	vmov	d7, r2, r3
 80041a2:	eeb0 0a47 	vmov.f32	s0, s14
 80041a6:	eef0 0a67 	vmov.f32	s1, s15
 80041aa:	f015 f835 	bl	8019218 <floor>
 80041ae:	ec51 0b10 	vmov	r0, r1, d0
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	4b36      	ldr	r3, [pc, #216]	; (8004290 <statemachine+0xe48>)
 80041b8:	f7fc f868 	bl	800028c <__adddf3>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4610      	mov	r0, r2
 80041c2:	4619      	mov	r1, r3
 80041c4:	f7fc fcf0 	bl	8000ba8 <__aeabi_d2uiz>
 80041c8:	4603      	mov	r3, r0
 80041ca:	b2dc      	uxtb	r4, r3
 80041cc:	4b27      	ldr	r3, [pc, #156]	; (800426c <statemachine+0xe24>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	f1c3 030f 	rsb	r3, r3, #15
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fc f9a5 	bl	8000524 <__aeabi_i2d>
 80041da:	a321      	add	r3, pc, #132	; (adr r3, 8004260 <statemachine+0xe18>)
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f7fc fa0a 	bl	80005f8 <__aeabi_dmul>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	4b29      	ldr	r3, [pc, #164]	; (8004298 <statemachine+0xe50>)
 80041f2:	f7fc fb2b 	bl	800084c <__aeabi_ddiv>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	ec43 2b17 	vmov	d7, r2, r3
 80041fe:	eeb0 0a47 	vmov.f32	s0, s14
 8004202:	eef0 0a67 	vmov.f32	s1, s15
 8004206:	f014 ff13 	bl	8019030 <sin>
 800420a:	ec51 0b10 	vmov	r0, r1, d0
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	4b22      	ldr	r3, [pc, #136]	; (800429c <statemachine+0xe54>)
 8004214:	f7fc f9f0 	bl	80005f8 <__aeabi_dmul>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	ec43 2b17 	vmov	d7, r2, r3
 8004220:	eeb0 0a47 	vmov.f32	s0, s14
 8004224:	eef0 0a67 	vmov.f32	s1, s15
 8004228:	f014 fff6 	bl	8019218 <floor>
 800422c:	ec53 2b10 	vmov	r2, r3, d0
 8004230:	f04f 0000 	mov.w	r0, #0
 8004234:	4917      	ldr	r1, [pc, #92]	; (8004294 <statemachine+0xe4c>)
 8004236:	f7fc f827 	bl	8000288 <__aeabi_dsub>
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	f7fc fcb1 	bl	8000ba8 <__aeabi_d2uiz>
 8004246:	4603      	mov	r3, r0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2201      	movs	r2, #1
 800424c:	9200      	str	r2, [sp, #0]
 800424e:	4622      	mov	r2, r4
 8004250:	2130      	movs	r1, #48	; 0x30
 8004252:	2040      	movs	r0, #64	; 0x40
 8004254:	f7fe fd18 	bl	8002c88 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8004258:	2300      	movs	r3, #0
 800425a:	657b      	str	r3, [r7, #84]	; 0x54
 800425c:	e116      	b.n	800448c <statemachine+0x1044>
 800425e:	bf00      	nop
 8004260:	54442d18 	.word	0x54442d18
 8004264:	400921fb 	.word	0x400921fb
 8004268:	20000a49 	.word	0x20000a49
 800426c:	20000a4a 	.word	0x20000a4a
 8004270:	0801ac38 	.word	0x0801ac38
 8004274:	20000014 	.word	0x20000014
 8004278:	20000a48 	.word	0x20000a48
 800427c:	0801ac44 	.word	0x0801ac44
 8004280:	2000000c 	.word	0x2000000c
 8004284:	2000070c 	.word	0x2000070c
 8004288:	20000479 	.word	0x20000479
 800428c:	40180000 	.word	0x40180000
 8004290:	40500000 	.word	0x40500000
 8004294:	40480000 	.word	0x40480000
 8004298:	403e0000 	.word	0x403e0000
 800429c:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 80042a0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80042a2:	f7fc f93f 	bl	8000524 <__aeabi_i2d>
 80042a6:	a3be      	add	r3, pc, #760	; (adr r3, 80045a0 <statemachine+0x1158>)
 80042a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ac:	f7fc f9a4 	bl	80005f8 <__aeabi_dmul>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	4bba      	ldr	r3, [pc, #744]	; (80045a8 <statemachine+0x1160>)
 80042be:	f7fc fac5 	bl	800084c <__aeabi_ddiv>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	ec43 2b17 	vmov	d7, r2, r3
 80042ca:	eeb0 0a47 	vmov.f32	s0, s14
 80042ce:	eef0 0a67 	vmov.f32	s1, s15
 80042d2:	f014 fe59 	bl	8018f88 <cos>
 80042d6:	ec51 0b10 	vmov	r0, r1, d0
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	4bb3      	ldr	r3, [pc, #716]	; (80045ac <statemachine+0x1164>)
 80042e0:	f7fc f98a 	bl	80005f8 <__aeabi_dmul>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	ec43 2b17 	vmov	d7, r2, r3
 80042ec:	eeb0 0a47 	vmov.f32	s0, s14
 80042f0:	eef0 0a67 	vmov.f32	s1, s15
 80042f4:	f014 ff90 	bl	8019218 <floor>
 80042f8:	ec51 0b10 	vmov	r0, r1, d0
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	4bab      	ldr	r3, [pc, #684]	; (80045b0 <statemachine+0x1168>)
 8004302:	f7fb ffc3 	bl	800028c <__adddf3>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4610      	mov	r0, r2
 800430c:	4619      	mov	r1, r3
 800430e:	f7fc fc4b 	bl	8000ba8 <__aeabi_d2uiz>
 8004312:	4603      	mov	r3, r0
 8004314:	b2dc      	uxtb	r4, r3
 8004316:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004318:	f7fc f904 	bl	8000524 <__aeabi_i2d>
 800431c:	a3a0      	add	r3, pc, #640	; (adr r3, 80045a0 <statemachine+0x1158>)
 800431e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004322:	f7fc f969 	bl	80005f8 <__aeabi_dmul>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	4b9d      	ldr	r3, [pc, #628]	; (80045a8 <statemachine+0x1160>)
 8004334:	f7fc fa8a 	bl	800084c <__aeabi_ddiv>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	ec43 2b17 	vmov	d7, r2, r3
 8004340:	eeb0 0a47 	vmov.f32	s0, s14
 8004344:	eef0 0a67 	vmov.f32	s1, s15
 8004348:	f014 fe72 	bl	8019030 <sin>
 800434c:	ec51 0b10 	vmov	r0, r1, d0
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	4b95      	ldr	r3, [pc, #596]	; (80045ac <statemachine+0x1164>)
 8004356:	f7fc f94f 	bl	80005f8 <__aeabi_dmul>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	ec43 2b17 	vmov	d7, r2, r3
 8004362:	eeb0 0a47 	vmov.f32	s0, s14
 8004366:	eef0 0a67 	vmov.f32	s1, s15
 800436a:	f014 ff55 	bl	8019218 <floor>
 800436e:	ec51 0b10 	vmov	r0, r1, d0
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	4b8f      	ldr	r3, [pc, #572]	; (80045b4 <statemachine+0x116c>)
 8004378:	f7fb ff88 	bl	800028c <__adddf3>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	f7fc fc10 	bl	8000ba8 <__aeabi_d2uiz>
 8004388:	4603      	mov	r3, r0
 800438a:	b2dd      	uxtb	r5, r3
 800438c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800438e:	f7fc f8c9 	bl	8000524 <__aeabi_i2d>
 8004392:	a383      	add	r3, pc, #524	; (adr r3, 80045a0 <statemachine+0x1158>)
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f7fc f92e 	bl	80005f8 <__aeabi_dmul>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	4b7f      	ldr	r3, [pc, #508]	; (80045a8 <statemachine+0x1160>)
 80043aa:	f7fc fa4f 	bl	800084c <__aeabi_ddiv>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	ec43 2b17 	vmov	d7, r2, r3
 80043b6:	eeb0 0a47 	vmov.f32	s0, s14
 80043ba:	eef0 0a67 	vmov.f32	s1, s15
 80043be:	f014 fde3 	bl	8018f88 <cos>
 80043c2:	ec51 0b10 	vmov	r0, r1, d0
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	4b7b      	ldr	r3, [pc, #492]	; (80045b8 <statemachine+0x1170>)
 80043cc:	f7fc f914 	bl	80005f8 <__aeabi_dmul>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	ec43 2b17 	vmov	d7, r2, r3
 80043d8:	eeb0 0a47 	vmov.f32	s0, s14
 80043dc:	eef0 0a67 	vmov.f32	s1, s15
 80043e0:	f014 ff1a 	bl	8019218 <floor>
 80043e4:	ec51 0b10 	vmov	r0, r1, d0
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	4b70      	ldr	r3, [pc, #448]	; (80045b0 <statemachine+0x1168>)
 80043ee:	f7fb ff4d 	bl	800028c <__adddf3>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4610      	mov	r0, r2
 80043f8:	4619      	mov	r1, r3
 80043fa:	f7fc fbd5 	bl	8000ba8 <__aeabi_d2uiz>
 80043fe:	4603      	mov	r3, r0
 8004400:	b2de      	uxtb	r6, r3
 8004402:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004404:	f7fc f88e 	bl	8000524 <__aeabi_i2d>
 8004408:	a365      	add	r3, pc, #404	; (adr r3, 80045a0 <statemachine+0x1158>)
 800440a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440e:	f7fc f8f3 	bl	80005f8 <__aeabi_dmul>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4610      	mov	r0, r2
 8004418:	4619      	mov	r1, r3
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	4b62      	ldr	r3, [pc, #392]	; (80045a8 <statemachine+0x1160>)
 8004420:	f7fc fa14 	bl	800084c <__aeabi_ddiv>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	ec43 2b17 	vmov	d7, r2, r3
 800442c:	eeb0 0a47 	vmov.f32	s0, s14
 8004430:	eef0 0a67 	vmov.f32	s1, s15
 8004434:	f014 fdfc 	bl	8019030 <sin>
 8004438:	ec51 0b10 	vmov	r0, r1, d0
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	4b5d      	ldr	r3, [pc, #372]	; (80045b8 <statemachine+0x1170>)
 8004442:	f7fc f8d9 	bl	80005f8 <__aeabi_dmul>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	ec43 2b17 	vmov	d7, r2, r3
 800444e:	eeb0 0a47 	vmov.f32	s0, s14
 8004452:	eef0 0a67 	vmov.f32	s1, s15
 8004456:	f014 fedf 	bl	8019218 <floor>
 800445a:	ec51 0b10 	vmov	r0, r1, d0
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	4b54      	ldr	r3, [pc, #336]	; (80045b4 <statemachine+0x116c>)
 8004464:	f7fb ff12 	bl	800028c <__adddf3>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4610      	mov	r0, r2
 800446e:	4619      	mov	r1, r3
 8004470:	f7fc fb9a 	bl	8000ba8 <__aeabi_d2uiz>
 8004474:	4603      	mov	r3, r0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2201      	movs	r2, #1
 800447a:	9200      	str	r2, [sp, #0]
 800447c:	4632      	mov	r2, r6
 800447e:	4629      	mov	r1, r5
 8004480:	4620      	mov	r0, r4
 8004482:	f7fe fc01 	bl	8002c88 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8004486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004488:	3301      	adds	r3, #1
 800448a:	657b      	str	r3, [r7, #84]	; 0x54
 800448c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800448e:	2b0c      	cmp	r3, #12
 8004490:	f77f af06 	ble.w	80042a0 <statemachine+0xe58>
					  }
					  if(BTN_B>=1){
 8004494:	4b49      	ldr	r3, [pc, #292]	; (80045bc <statemachine+0x1174>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	dd0b      	ble.n	80044b4 <statemachine+0x106c>
					  	hrstate--;
 800449c:	4b48      	ldr	r3, [pc, #288]	; (80045c0 <statemachine+0x1178>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	4b46      	ldr	r3, [pc, #280]	; (80045c0 <statemachine+0x1178>)
 80044a6:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 80044a8:	4b44      	ldr	r3, [pc, #272]	; (80045bc <statemachine+0x1174>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
					  }


					  break;
 80044ae:	e001      	b.n	80044b4 <statemachine+0x106c>
					  break;
 80044b0:	bf00      	nop
 80044b2:	e000      	b.n	80044b6 <statemachine+0x106e>
					  break;
 80044b4:	bf00      	nop

				  }

				  if(BTN_A>=1){
 80044b6:	4b43      	ldr	r3, [pc, #268]	; (80045c4 <statemachine+0x117c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f340 8720 	ble.w	8005300 <statemachine+0x1eb8>
			  		state++;
 80044c0:	4b41      	ldr	r3, [pc, #260]	; (80045c8 <statemachine+0x1180>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	3301      	adds	r3, #1
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	4b3f      	ldr	r3, [pc, #252]	; (80045c8 <statemachine+0x1180>)
 80044ca:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 80044cc:	4b3d      	ldr	r3, [pc, #244]	; (80045c4 <statemachine+0x117c>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 80044d2:	4b3a      	ldr	r3, [pc, #232]	; (80045bc <statemachine+0x1174>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
			  		settimeen=0;
 80044d8:	4b3c      	ldr	r3, [pc, #240]	; (80045cc <statemachine+0x1184>)
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 80044de:	f000 bf0f 	b.w	8005300 <statemachine+0x1eb8>
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 80044e2:	2000      	movs	r0, #0
 80044e4:	f7fe fa76 	bl	80029d4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 80044e8:	4939      	ldr	r1, [pc, #228]	; (80045d0 <statemachine+0x1188>)
 80044ea:	483a      	ldr	r0, [pc, #232]	; (80045d4 <statemachine+0x118c>)
 80044ec:	f7fd fd8a 	bl	8002004 <nmea_parse>
			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 80044f0:	4b38      	ldr	r3, [pc, #224]	; (80045d4 <statemachine+0x118c>)
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d17b      	bne.n	80045f0 <statemachine+0x11a8>
			 			 						char * str = (char*)malloc(sizeof(char)*20);
 80044f8:	2014      	movs	r0, #20
 80044fa:	f010 f849 	bl	8014590 <malloc>
 80044fe:	4603      	mov	r3, r0
 8004500:	63fb      	str	r3, [r7, #60]	; 0x3c
			 			 						snprintf(str,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8004502:	4b34      	ldr	r3, [pc, #208]	; (80045d4 <statemachine+0x118c>)
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fc f81e 	bl	8000548 <__aeabi_f2d>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	e9cd 2300 	strd	r2, r3, [sp]
 8004514:	4a30      	ldr	r2, [pc, #192]	; (80045d8 <statemachine+0x1190>)
 8004516:	210f      	movs	r1, #15
 8004518:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800451a:	f011 ff33 	bl	8016384 <sniprintf>
			 			 						ssd1306_SetCursor(32, 32);
 800451e:	2120      	movs	r1, #32
 8004520:	2020      	movs	r0, #32
 8004522:	f7fe fb99 	bl	8002c58 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004526:	4a2d      	ldr	r2, [pc, #180]	; (80045dc <statemachine+0x1194>)
 8004528:	2301      	movs	r3, #1
 800452a:	ca06      	ldmia	r2, {r1, r2}
 800452c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800452e:	f7fe fb6d 	bl	8002c0c <ssd1306_WriteString>
			 			 						snprintf(str,20, "v=%0.2fV",vbat);
 8004532:	4b2b      	ldr	r3, [pc, #172]	; (80045e0 <statemachine+0x1198>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fc f806 	bl	8000548 <__aeabi_f2d>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	e9cd 2300 	strd	r2, r3, [sp]
 8004544:	4a27      	ldr	r2, [pc, #156]	; (80045e4 <statemachine+0x119c>)
 8004546:	2114      	movs	r1, #20
 8004548:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800454a:	f011 ff1b 	bl	8016384 <sniprintf>
			 			 						ssd1306_SetCursor(32, 42);
 800454e:	212a      	movs	r1, #42	; 0x2a
 8004550:	2020      	movs	r0, #32
 8004552:	f7fe fb81 	bl	8002c58 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004556:	4a21      	ldr	r2, [pc, #132]	; (80045dc <statemachine+0x1194>)
 8004558:	2301      	movs	r3, #1
 800455a:	ca06      	ldmia	r2, {r1, r2}
 800455c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800455e:	f7fe fb55 	bl	8002c0c <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 8004562:	2132      	movs	r1, #50	; 0x32
 8004564:	2020      	movs	r0, #32
 8004566:	f7fe fb77 	bl	8002c58 <ssd1306_SetCursor>
			 			 						snprintf(str,15,  "T=%0.2fC",temp);
 800456a:	4b1f      	ldr	r3, [pc, #124]	; (80045e8 <statemachine+0x11a0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fb ffea 	bl	8000548 <__aeabi_f2d>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	e9cd 2300 	strd	r2, r3, [sp]
 800457c:	4a1b      	ldr	r2, [pc, #108]	; (80045ec <statemachine+0x11a4>)
 800457e:	210f      	movs	r1, #15
 8004580:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004582:	f011 feff 	bl	8016384 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004586:	4a15      	ldr	r2, [pc, #84]	; (80045dc <statemachine+0x1194>)
 8004588:	2301      	movs	r3, #1
 800458a:	ca06      	ldmia	r2, {r1, r2}
 800458c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800458e:	f7fe fb3d 	bl	8002c0c <ssd1306_WriteString>
			 			 						free(str);
 8004592:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004594:	f010 f804 	bl	80145a0 <free>
 8004598:	e06c      	b.n	8004674 <statemachine+0x122c>
 800459a:	bf00      	nop
 800459c:	f3af 8000 	nop.w
 80045a0:	54442d18 	.word	0x54442d18
 80045a4:	400921fb 	.word	0x400921fb
 80045a8:	40180000 	.word	0x40180000
 80045ac:	40240000 	.word	0x40240000
 80045b0:	40500000 	.word	0x40500000
 80045b4:	40480000 	.word	0x40480000
 80045b8:	40280000 	.word	0x40280000
 80045bc:	2000070c 	.word	0x2000070c
 80045c0:	20000479 	.word	0x20000479
 80045c4:	20000708 	.word	0x20000708
 80045c8:	20000478 	.word	0x20000478
 80045cc:	20000fbc 	.word	0x20000fbc
 80045d0:	200004c4 	.word	0x200004c4
 80045d4:	200006c8 	.word	0x200006c8
 80045d8:	0801ac50 	.word	0x0801ac50
 80045dc:	2000000c 	.word	0x2000000c
 80045e0:	20000740 	.word	0x20000740
 80045e4:	0801ac5c 	.word	0x0801ac5c
 80045e8:	20000738 	.word	0x20000738
 80045ec:	0801ac68 	.word	0x0801ac68
			 			 					}
			 			 	else{ //if the GPS doesn't have a fix, print a message
			 			 						char *str = (char*)malloc(sizeof(char)*20);
 80045f0:	2014      	movs	r0, #20
 80045f2:	f00f ffcd 	bl	8014590 <malloc>
 80045f6:	4603      	mov	r3, r0
 80045f8:	643b      	str	r3, [r7, #64]	; 0x40
			 			 						ssd1306_SetCursor(32, 32);
 80045fa:	2120      	movs	r1, #32
 80045fc:	2020      	movs	r0, #32
 80045fe:	f7fe fb2b 	bl	8002c58 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("INFO", Font_6x8, White);
 8004602:	4a96      	ldr	r2, [pc, #600]	; (800485c <statemachine+0x1414>)
 8004604:	2301      	movs	r3, #1
 8004606:	ca06      	ldmia	r2, {r1, r2}
 8004608:	4895      	ldr	r0, [pc, #596]	; (8004860 <statemachine+0x1418>)
 800460a:	f7fe faff 	bl	8002c0c <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 41);
 800460e:	2129      	movs	r1, #41	; 0x29
 8004610:	2020      	movs	r0, #32
 8004612:	f7fe fb21 	bl	8002c58 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "vbat=%0.2fV",vbat);
 8004616:	4b93      	ldr	r3, [pc, #588]	; (8004864 <statemachine+0x141c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7fb ff94 	bl	8000548 <__aeabi_f2d>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	e9cd 2300 	strd	r2, r3, [sp]
 8004628:	4a8f      	ldr	r2, [pc, #572]	; (8004868 <statemachine+0x1420>)
 800462a:	210f      	movs	r1, #15
 800462c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800462e:	f011 fea9 	bl	8016384 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004632:	4a8a      	ldr	r2, [pc, #552]	; (800485c <statemachine+0x1414>)
 8004634:	2301      	movs	r3, #1
 8004636:	ca06      	ldmia	r2, {r1, r2}
 8004638:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800463a:	f7fe fae7 	bl	8002c0c <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 800463e:	2132      	movs	r1, #50	; 0x32
 8004640:	2020      	movs	r0, #32
 8004642:	f7fe fb09 	bl	8002c58 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "T=%0.2fC",temp);
 8004646:	4b89      	ldr	r3, [pc, #548]	; (800486c <statemachine+0x1424>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7fb ff7c 	bl	8000548 <__aeabi_f2d>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	e9cd 2300 	strd	r2, r3, [sp]
 8004658:	4a85      	ldr	r2, [pc, #532]	; (8004870 <statemachine+0x1428>)
 800465a:	210f      	movs	r1, #15
 800465c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800465e:	f011 fe91 	bl	8016384 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004662:	4a7e      	ldr	r2, [pc, #504]	; (800485c <statemachine+0x1414>)
 8004664:	2301      	movs	r3, #1
 8004666:	ca06      	ldmia	r2, {r1, r2}
 8004668:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800466a:	f7fe facf 	bl	8002c0c <ssd1306_WriteString>
			 			 						free(str);
 800466e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004670:	f00f ff96 	bl	80145a0 <free>
			 			 					}
			  if(BTN_A>=1){
 8004674:	4b7f      	ldr	r3, [pc, #508]	; (8004874 <statemachine+0x142c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f340 8643 	ble.w	8005304 <statemachine+0x1ebc>
			  		state++;
 800467e:	4b7e      	ldr	r3, [pc, #504]	; (8004878 <statemachine+0x1430>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	3301      	adds	r3, #1
 8004684:	b2da      	uxtb	r2, r3
 8004686:	4b7c      	ldr	r3, [pc, #496]	; (8004878 <statemachine+0x1430>)
 8004688:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 800468a:	4b7a      	ldr	r3, [pc, #488]	; (8004874 <statemachine+0x142c>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8004690:	4b7a      	ldr	r3, [pc, #488]	; (800487c <statemachine+0x1434>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8004696:	f000 be35 	b.w	8005304 <statemachine+0x1ebc>

		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 800469a:	2000      	movs	r0, #0
 800469c:	f7fe f99a 	bl	80029d4 <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 80046a0:	2120      	movs	r1, #32
 80046a2:	2020      	movs	r0, #32
 80046a4:	f7fe fad8 	bl	8002c58 <ssd1306_SetCursor>
			  char *str = (char*)malloc(sizeof(char)*20);
 80046a8:	2014      	movs	r0, #20
 80046aa:	f00f ff71 	bl	8014590 <malloc>
 80046ae:	4603      	mov	r3, r0
 80046b0:	647b      	str	r3, [r7, #68]	; 0x44
			  ssd1306_WriteString("chrono", Font_6x8, White);
 80046b2:	4a6a      	ldr	r2, [pc, #424]	; (800485c <statemachine+0x1414>)
 80046b4:	2301      	movs	r3, #1
 80046b6:	ca06      	ldmia	r2, {r1, r2}
 80046b8:	4871      	ldr	r0, [pc, #452]	; (8004880 <statemachine+0x1438>)
 80046ba:	f7fe faa7 	bl	8002c0c <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 40);
 80046be:	2128      	movs	r1, #40	; 0x28
 80046c0:	2020      	movs	r0, #32
 80046c2:	f7fe fac9 	bl	8002c58 <ssd1306_SetCursor>

			  switch(chronostate){
 80046c6:	4b6f      	ldr	r3, [pc, #444]	; (8004884 <statemachine+0x143c>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d038      	beq.n	8004740 <statemachine+0x12f8>
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	dc4f      	bgt.n	8004772 <statemachine+0x132a>
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <statemachine+0x1294>
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d01d      	beq.n	8004716 <statemachine+0x12ce>
 80046da:	e04a      	b.n	8004772 <statemachine+0x132a>
			  case STATE_RESET:
				  min=0;
 80046dc:	4b6a      	ldr	r3, [pc, #424]	; (8004888 <statemachine+0x1440>)
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
				  seconde=0;
 80046e4:	4b69      	ldr	r3, [pc, #420]	; (800488c <statemachine+0x1444>)
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
				  calctime=0;
 80046ec:	4b68      	ldr	r3, [pc, #416]	; (8004890 <statemachine+0x1448>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]
				  	 if(BTN_B>=1){
 80046f2:	4b62      	ldr	r3, [pc, #392]	; (800487c <statemachine+0x1434>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	dd36      	ble.n	8004768 <statemachine+0x1320>
				  		chronostate++;
 80046fa:	4b62      	ldr	r3, [pc, #392]	; (8004884 <statemachine+0x143c>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	3301      	adds	r3, #1
 8004700:	b2da      	uxtb	r2, r3
 8004702:	4b60      	ldr	r3, [pc, #384]	; (8004884 <statemachine+0x143c>)
 8004704:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8004706:	4b5d      	ldr	r3, [pc, #372]	; (800487c <statemachine+0x1434>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 800470c:	4b61      	ldr	r3, [pc, #388]	; (8004894 <statemachine+0x144c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a61      	ldr	r2, [pc, #388]	; (8004898 <statemachine+0x1450>)
 8004712:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8004714:	e028      	b.n	8004768 <statemachine+0x1320>
			  case STATE_RUN:
				  calctime=uwTick-starttime;
 8004716:	4b5f      	ldr	r3, [pc, #380]	; (8004894 <statemachine+0x144c>)
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4b5f      	ldr	r3, [pc, #380]	; (8004898 <statemachine+0x1450>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	4a5b      	ldr	r2, [pc, #364]	; (8004890 <statemachine+0x1448>)
 8004722:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8004724:	4b55      	ldr	r3, [pc, #340]	; (800487c <statemachine+0x1434>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	dd1f      	ble.n	800476c <statemachine+0x1324>
				  		chronostate++;
 800472c:	4b55      	ldr	r3, [pc, #340]	; (8004884 <statemachine+0x143c>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	3301      	adds	r3, #1
 8004732:	b2da      	uxtb	r2, r3
 8004734:	4b53      	ldr	r3, [pc, #332]	; (8004884 <statemachine+0x143c>)
 8004736:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8004738:	4b50      	ldr	r3, [pc, #320]	; (800487c <statemachine+0x1434>)
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
			  }


				  break;
 800473e:	e015      	b.n	800476c <statemachine+0x1324>
			  case STATE_PAUSE:
				  if(BTN_B>=1){
 8004740:	4b4e      	ldr	r3, [pc, #312]	; (800487c <statemachine+0x1434>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	dd13      	ble.n	8004770 <statemachine+0x1328>
				  			chronostate--;
 8004748:	4b4e      	ldr	r3, [pc, #312]	; (8004884 <statemachine+0x143c>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	3b01      	subs	r3, #1
 800474e:	b2da      	uxtb	r2, r3
 8004750:	4b4c      	ldr	r3, [pc, #304]	; (8004884 <statemachine+0x143c>)
 8004752:	701a      	strb	r2, [r3, #0]
				  			chronostate--;
 8004754:	4b4b      	ldr	r3, [pc, #300]	; (8004884 <statemachine+0x143c>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	3b01      	subs	r3, #1
 800475a:	b2da      	uxtb	r2, r3
 800475c:	4b49      	ldr	r3, [pc, #292]	; (8004884 <statemachine+0x143c>)
 800475e:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8004760:	4b46      	ldr	r3, [pc, #280]	; (800487c <statemachine+0x1434>)
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]
			 }

				  break;
 8004766:	e003      	b.n	8004770 <statemachine+0x1328>
				  break;
 8004768:	bf00      	nop
 800476a:	e002      	b.n	8004772 <statemachine+0x132a>
				  break;
 800476c:	bf00      	nop
 800476e:	e000      	b.n	8004772 <statemachine+0x132a>
				  break;
 8004770:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8004772:	4b47      	ldr	r3, [pc, #284]	; (8004890 <statemachine+0x1448>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800489c <statemachine+0x1454>
 8004782:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004786:	ee16 0a90 	vmov	r0, s13
 800478a:	f7fb fedd 	bl	8000548 <__aeabi_f2d>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	ec43 2b10 	vmov	d0, r2, r3
 8004796:	f014 fd3f 	bl	8019218 <floor>
 800479a:	ec53 2b10 	vmov	r2, r3, d0
 800479e:	4610      	mov	r0, r2
 80047a0:	4619      	mov	r1, r3
 80047a2:	f7fc fa21 	bl	8000be8 <__aeabi_d2f>
 80047a6:	4603      	mov	r3, r0
 80047a8:	4a37      	ldr	r2, [pc, #220]	; (8004888 <statemachine+0x1440>)
 80047aa:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 80047ac:	4b38      	ldr	r3, [pc, #224]	; (8004890 <statemachine+0x1448>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	ee07 3a90 	vmov	s15, r3
 80047b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047b8:	4b33      	ldr	r3, [pc, #204]	; (8004888 <statemachine+0x1440>)
 80047ba:	edd3 7a00 	vldr	s15, [r3]
 80047be:	eddf 6a37 	vldr	s13, [pc, #220]	; 800489c <statemachine+0x1454>
 80047c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80047c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047ca:	eddf 6a35 	vldr	s13, [pc, #212]	; 80048a0 <statemachine+0x1458>
 80047ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047d2:	4b2e      	ldr	r3, [pc, #184]	; (800488c <statemachine+0x1444>)
 80047d4:	edc3 7a00 	vstr	s15, [r3]
			  snprintf(str,15, "%0.0fmin",min);
 80047d8:	4b2b      	ldr	r3, [pc, #172]	; (8004888 <statemachine+0x1440>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fb feb3 	bl	8000548 <__aeabi_f2d>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	e9cd 2300 	strd	r2, r3, [sp]
 80047ea:	4a2e      	ldr	r2, [pc, #184]	; (80048a4 <statemachine+0x145c>)
 80047ec:	210f      	movs	r1, #15
 80047ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80047f0:	f011 fdc8 	bl	8016384 <sniprintf>
			  ssd1306_WriteString(str, Font_7x10, White);
 80047f4:	4a2c      	ldr	r2, [pc, #176]	; (80048a8 <statemachine+0x1460>)
 80047f6:	2301      	movs	r3, #1
 80047f8:	ca06      	ldmia	r2, {r1, r2}
 80047fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80047fc:	f7fe fa06 	bl	8002c0c <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8004800:	2132      	movs	r1, #50	; 0x32
 8004802:	2020      	movs	r0, #32
 8004804:	f7fe fa28 	bl	8002c58 <ssd1306_SetCursor>
			  snprintf(str,15, "%0.3fsec",seconde);
 8004808:	4b20      	ldr	r3, [pc, #128]	; (800488c <statemachine+0x1444>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7fb fe9b 	bl	8000548 <__aeabi_f2d>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	e9cd 2300 	strd	r2, r3, [sp]
 800481a:	4a24      	ldr	r2, [pc, #144]	; (80048ac <statemachine+0x1464>)
 800481c:	210f      	movs	r1, #15
 800481e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004820:	f011 fdb0 	bl	8016384 <sniprintf>
			  ssd1306_WriteString(str, Font_6x8, White);
 8004824:	4a0d      	ldr	r2, [pc, #52]	; (800485c <statemachine+0x1414>)
 8004826:	2301      	movs	r3, #1
 8004828:	ca06      	ldmia	r2, {r1, r2}
 800482a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800482c:	f7fe f9ee 	bl	8002c0c <ssd1306_WriteString>
			  free(str);
 8004830:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004832:	f00f feb5 	bl	80145a0 <free>


			  if(BTN_A>=1){
 8004836:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <statemachine+0x142c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	f340 8564 	ble.w	8005308 <statemachine+0x1ec0>
			 	state++;
 8004840:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <statemachine+0x1430>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	3301      	adds	r3, #1
 8004846:	b2da      	uxtb	r2, r3
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <statemachine+0x1430>)
 800484a:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <statemachine+0x142c>)
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8004852:	4b0a      	ldr	r3, [pc, #40]	; (800487c <statemachine+0x1434>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]


	}
			  break;
 8004858:	f000 bd56 	b.w	8005308 <statemachine+0x1ec0>
 800485c:	2000000c 	.word	0x2000000c
 8004860:	0801ac74 	.word	0x0801ac74
 8004864:	20000740 	.word	0x20000740
 8004868:	0801ac7c 	.word	0x0801ac7c
 800486c:	20000738 	.word	0x20000738
 8004870:	0801ac68 	.word	0x0801ac68
 8004874:	20000708 	.word	0x20000708
 8004878:	20000478 	.word	0x20000478
 800487c:	2000070c 	.word	0x2000070c
 8004880:	0801ac88 	.word	0x0801ac88
 8004884:	2000047c 	.word	0x2000047c
 8004888:	200009f8 	.word	0x200009f8
 800488c:	200009f4 	.word	0x200009f4
 8004890:	20000a00 	.word	0x20000a00
 8004894:	2000124c 	.word	0x2000124c
 8004898:	200009fc 	.word	0x200009fc
 800489c:	476a6000 	.word	0x476a6000
 80048a0:	447a0000 	.word	0x447a0000
 80048a4:	0801ac90 	.word	0x0801ac90
 80048a8:	20000014 	.word	0x20000014
 80048ac:	0801ac9c 	.word	0x0801ac9c


			  case STATE_BALISE:
				  ssd1306_Fill(Black);
 80048b0:	2000      	movs	r0, #0
 80048b2:	f7fe f88f 	bl	80029d4 <ssd1306_Fill>

				  if(settimeen==0){
 80048b6:	4b9a      	ldr	r3, [pc, #616]	; (8004b20 <statemachine+0x16d8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d145      	bne.n	800494a <statemachine+0x1502>

					  if(myData.fix==1){
 80048be:	4b99      	ldr	r3, [pc, #612]	; (8004b24 <statemachine+0x16dc>)
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d141      	bne.n	800494a <statemachine+0x1502>
						settimeen=1;
 80048c6:	4b96      	ldr	r3, [pc, #600]	; (8004b20 <statemachine+0x16d8>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
						HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 80048cc:	4b95      	ldr	r3, [pc, #596]	; (8004b24 <statemachine+0x16dc>)
 80048ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	0092      	lsls	r2, r2, #2
 80048dc:	4413      	add	r3, r2
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	4b90      	ldr	r3, [pc, #576]	; (8004b24 <statemachine+0x16dc>)
 80048e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	4413      	add	r3, r2
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	4b8d      	ldr	r3, [pc, #564]	; (8004b28 <statemachine+0x16e0>)
 80048f4:	701a      	strb	r2, [r3, #0]
						MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 80048f6:	4b8b      	ldr	r3, [pc, #556]	; (8004b24 <statemachine+0x16dc>)
 80048f8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	b2db      	uxtb	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	0092      	lsls	r2, r2, #2
 8004906:	4413      	add	r3, r2
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	b2da      	uxtb	r2, r3
 800490c:	4b85      	ldr	r3, [pc, #532]	; (8004b24 <statemachine+0x16dc>)
 800490e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	b2db      	uxtb	r3, r3
 8004918:	4413      	add	r3, r2
 800491a:	b2da      	uxtb	r2, r3
 800491c:	4b83      	ldr	r3, [pc, #524]	; (8004b2c <statemachine+0x16e4>)
 800491e:	701a      	strb	r2, [r3, #0]
						SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004920:	4b80      	ldr	r3, [pc, #512]	; (8004b24 <statemachine+0x16dc>)
 8004922:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	b2db      	uxtb	r3, r3
 800492c:	461a      	mov	r2, r3
 800492e:	0092      	lsls	r2, r2, #2
 8004930:	4413      	add	r3, r2
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	b2da      	uxtb	r2, r3
 8004936:	4b7b      	ldr	r3, [pc, #492]	; (8004b24 <statemachine+0x16dc>)
 8004938:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	b2db      	uxtb	r3, r3
 8004942:	4413      	add	r3, r2
 8004944:	b2da      	uxtb	r2, r3
 8004946:	4b7a      	ldr	r3, [pc, #488]	; (8004b30 <statemachine+0x16e8>)
 8004948:	701a      	strb	r2, [r3, #0]





				  switch(balisestate){
 800494a:	4b7a      	ldr	r3, [pc, #488]	; (8004b34 <statemachine+0x16ec>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b02      	cmp	r3, #2
 8004950:	f000 81e3 	beq.w	8004d1a <statemachine+0x18d2>
 8004954:	2b02      	cmp	r3, #2
 8004956:	f300 84d9 	bgt.w	800530c <statemachine+0x1ec4>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <statemachine+0x151e>
 800495e:	2b01      	cmp	r3, #1
 8004960:	d055      	beq.n	8004a0e <statemachine+0x15c6>
					  				  	}

				  }


				  break;
 8004962:	f000 bcd3 	b.w	800530c <statemachine+0x1ec4>
					  ssd1306_SetCursor(32,32);
 8004966:	2120      	movs	r1, #32
 8004968:	2020      	movs	r0, #32
 800496a:	f7fe f975 	bl	8002c58 <ssd1306_SetCursor>
					  ssd1306_WriteString("Tracker",Font_6x8,White);
 800496e:	4a72      	ldr	r2, [pc, #456]	; (8004b38 <statemachine+0x16f0>)
 8004970:	2301      	movs	r3, #1
 8004972:	ca06      	ldmia	r2, {r1, r2}
 8004974:	4871      	ldr	r0, [pc, #452]	; (8004b3c <statemachine+0x16f4>)
 8004976:	f7fe f949 	bl	8002c0c <ssd1306_WriteString>
					  snprintf((uint8_t*)bufferscreen,50, "off=%d",pageoffset);
 800497a:	4b71      	ldr	r3, [pc, #452]	; (8004b40 <statemachine+0x16f8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a71      	ldr	r2, [pc, #452]	; (8004b44 <statemachine+0x16fc>)
 8004980:	2132      	movs	r1, #50	; 0x32
 8004982:	4871      	ldr	r0, [pc, #452]	; (8004b48 <statemachine+0x1700>)
 8004984:	f011 fcfe 	bl	8016384 <sniprintf>
					  ssd1306_SetCursor(32,40);
 8004988:	2128      	movs	r1, #40	; 0x28
 800498a:	2020      	movs	r0, #32
 800498c:	f7fe f964 	bl	8002c58 <ssd1306_SetCursor>
					  ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 8004990:	4a69      	ldr	r2, [pc, #420]	; (8004b38 <statemachine+0x16f0>)
 8004992:	2301      	movs	r3, #1
 8004994:	ca06      	ldmia	r2, {r1, r2}
 8004996:	486c      	ldr	r0, [pc, #432]	; (8004b48 <statemachine+0x1700>)
 8004998:	f7fe f938 	bl	8002c0c <ssd1306_WriteString>
					  snprintf((uint8_t*)bufferscreen,50, "page=%d",pagenumber);
 800499c:	4b6b      	ldr	r3, [pc, #428]	; (8004b4c <statemachine+0x1704>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a6b      	ldr	r2, [pc, #428]	; (8004b50 <statemachine+0x1708>)
 80049a2:	2132      	movs	r1, #50	; 0x32
 80049a4:	4868      	ldr	r0, [pc, #416]	; (8004b48 <statemachine+0x1700>)
 80049a6:	f011 fced 	bl	8016384 <sniprintf>
					  ssd1306_SetCursor(32,48);
 80049aa:	2130      	movs	r1, #48	; 0x30
 80049ac:	2020      	movs	r0, #32
 80049ae:	f7fe f953 	bl	8002c58 <ssd1306_SetCursor>
					  ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 80049b2:	4a61      	ldr	r2, [pc, #388]	; (8004b38 <statemachine+0x16f0>)
 80049b4:	2301      	movs	r3, #1
 80049b6:	ca06      	ldmia	r2, {r1, r2}
 80049b8:	4863      	ldr	r0, [pc, #396]	; (8004b48 <statemachine+0x1700>)
 80049ba:	f7fe f927 	bl	8002c0c <ssd1306_WriteString>
					  if(BTN_B>=1){
 80049be:	4b65      	ldr	r3, [pc, #404]	; (8004b54 <statemachine+0x170c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	dd0e      	ble.n	80049e4 <statemachine+0x159c>
						balisestate++;
 80049c6:	4b5b      	ldr	r3, [pc, #364]	; (8004b34 <statemachine+0x16ec>)
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	3301      	adds	r3, #1
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	4b59      	ldr	r3, [pc, #356]	; (8004b34 <statemachine+0x16ec>)
 80049d0:	701a      	strb	r2, [r3, #0]
						BTN_B=0;
 80049d2:	4b60      	ldr	r3, [pc, #384]	; (8004b54 <statemachine+0x170c>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
						BTN_A=0;
 80049d8:	4b5f      	ldr	r3, [pc, #380]	; (8004b58 <statemachine+0x1710>)
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim7);
 80049de:	485f      	ldr	r0, [pc, #380]	; (8004b5c <statemachine+0x1714>)
 80049e0:	f008 f8e0 	bl	800cba4 <HAL_TIM_Base_Start_IT>
					  if(BTN_A>=1){
 80049e4:	4b5c      	ldr	r3, [pc, #368]	; (8004b58 <statemachine+0x1710>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f340 81d4 	ble.w	8004d96 <statemachine+0x194e>
					  				  			 	state++;
 80049ee:	4b5c      	ldr	r3, [pc, #368]	; (8004b60 <statemachine+0x1718>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	3301      	adds	r3, #1
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	4b5a      	ldr	r3, [pc, #360]	; (8004b60 <statemachine+0x1718>)
 80049f8:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 80049fa:	4b57      	ldr	r3, [pc, #348]	; (8004b58 <statemachine+0x1710>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 8004a00:	4b54      	ldr	r3, [pc, #336]	; (8004b54 <statemachine+0x170c>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
					  				  			 	settimeen=0;
 8004a06:	4b46      	ldr	r3, [pc, #280]	; (8004b20 <statemachine+0x16d8>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
					  break;
 8004a0c:	e1c3      	b.n	8004d96 <statemachine+0x194e>
					  erasetime=HAL_GetTick();
 8004a0e:	f001 fb7f 	bl	8006110 <HAL_GetTick>
 8004a12:	4603      	mov	r3, r0
 8004a14:	461a      	mov	r2, r3
 8004a16:	4b53      	ldr	r3, [pc, #332]	; (8004b64 <statemachine+0x171c>)
 8004a18:	601a      	str	r2, [r3, #0]
					  if(pagenumber+1>=MAX_WRITE_PAGE){
 8004a1a:	4b4c      	ldr	r3, [pc, #304]	; (8004b4c <statemachine+0x1704>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f246 32fd 	movw	r2, #25597	; 0x63fd
 8004a22:	4293      	cmp	r3, r2
 8004a24:	dd05      	ble.n	8004a32 <statemachine+0x15ea>
						  HAL_TIM_Base_Stop_IT(&htim7);
 8004a26:	484d      	ldr	r0, [pc, #308]	; (8004b5c <statemachine+0x1714>)
 8004a28:	f008 f910 	bl	800cc4c <HAL_TIM_Base_Stop_IT>
						  balisestate=2;
 8004a2c:	4b41      	ldr	r3, [pc, #260]	; (8004b34 <statemachine+0x16ec>)
 8004a2e:	2202      	movs	r2, #2
 8004a30:	701a      	strb	r2, [r3, #0]
					  if(enablewrite==1){
 8004a32:	4b4d      	ldr	r3, [pc, #308]	; (8004b68 <statemachine+0x1720>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	f040 80d7 	bne.w	8004bea <statemachine+0x17a2>
						  oldlat=myData.latitude;
 8004a3c:	4b39      	ldr	r3, [pc, #228]	; (8004b24 <statemachine+0x16dc>)
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	494a      	ldr	r1, [pc, #296]	; (8004b6c <statemachine+0x1724>)
 8004a44:	e9c1 2300 	strd	r2, r3, [r1]
						  oldlong=myData.longitude;
 8004a48:	4b36      	ldr	r3, [pc, #216]	; (8004b24 <statemachine+0x16dc>)
 8004a4a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004a4e:	4948      	ldr	r1, [pc, #288]	; (8004b70 <statemachine+0x1728>)
 8004a50:	e9c1 2300 	strd	r2, r3, [r1]
						  nmea_parse(&myData, DataBuffer);
 8004a54:	4947      	ldr	r1, [pc, #284]	; (8004b74 <statemachine+0x172c>)
 8004a56:	4833      	ldr	r0, [pc, #204]	; (8004b24 <statemachine+0x16dc>)
 8004a58:	f7fd fad4 	bl	8002004 <nmea_parse>
						  distance1sec=distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 8004a5c:	4b43      	ldr	r3, [pc, #268]	; (8004b6c <statemachine+0x1724>)
 8004a5e:	ed93 7b00 	vldr	d7, [r3]
 8004a62:	4b30      	ldr	r3, [pc, #192]	; (8004b24 <statemachine+0x16dc>)
 8004a64:	ed93 6b00 	vldr	d6, [r3]
 8004a68:	4b41      	ldr	r3, [pc, #260]	; (8004b70 <statemachine+0x1728>)
 8004a6a:	ed93 5b00 	vldr	d5, [r3]
 8004a6e:	4b2d      	ldr	r3, [pc, #180]	; (8004b24 <statemachine+0x16dc>)
 8004a70:	ed93 4b04 	vldr	d4, [r3, #16]
 8004a74:	eeb0 3a44 	vmov.f32	s6, s8
 8004a78:	eef0 3a64 	vmov.f32	s7, s9
 8004a7c:	eeb0 2a45 	vmov.f32	s4, s10
 8004a80:	eef0 2a65 	vmov.f32	s5, s11
 8004a84:	eeb0 1a46 	vmov.f32	s2, s12
 8004a88:	eef0 1a66 	vmov.f32	s3, s13
 8004a8c:	eeb0 0a47 	vmov.f32	s0, s14
 8004a90:	eef0 0a67 	vmov.f32	s1, s15
 8004a94:	f7fd fb68 	bl	8002168 <distancecalc>
 8004a98:	eeb0 7a40 	vmov.f32	s14, s0
 8004a9c:	eef0 7a60 	vmov.f32	s15, s1
 8004aa0:	4b35      	ldr	r3, [pc, #212]	; (8004b78 <statemachine+0x1730>)
 8004aa2:	ed83 7b00 	vstr	d7, [r3]
						  if(distance1sec>=139){//correspond à 500kmh pendant 1sec
 8004aa6:	4b34      	ldr	r3, [pc, #208]	; (8004b78 <statemachine+0x1730>)
 8004aa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004aac:	a31a      	add	r3, pc, #104	; (adr r3, 8004b18 <statemachine+0x16d0>)
 8004aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab2:	f7fc f827 	bl	8000b04 <__aeabi_dcmpge>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d067      	beq.n	8004b8c <statemachine+0x1744>
							  myData.latitude=oldlat;
 8004abc:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <statemachine+0x1724>)
 8004abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac2:	4918      	ldr	r1, [pc, #96]	; (8004b24 <statemachine+0x16dc>)
 8004ac4:	e9c1 2300 	strd	r2, r3, [r1]
							  myData.longitude=oldlong;
 8004ac8:	4b29      	ldr	r3, [pc, #164]	; (8004b70 <statemachine+0x1728>)
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	4915      	ldr	r1, [pc, #84]	; (8004b24 <statemachine+0x16dc>)
 8004ad0:	e9c1 2304 	strd	r2, r3, [r1, #16]
							  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004ad4:	4b29      	ldr	r3, [pc, #164]	; (8004b7c <statemachine+0x1734>)
 8004ad6:	edd3 7a00 	vldr	s15, [r3]
 8004ada:	4b29      	ldr	r3, [pc, #164]	; (8004b80 <statemachine+0x1738>)
 8004adc:	ed93 7a00 	vldr	s14, [r3]
 8004ae0:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <statemachine+0x16dc>)
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	4a0f      	ldr	r2, [pc, #60]	; (8004b24 <statemachine+0x16dc>)
 8004ae6:	edd2 6a08 	vldr	s13, [r2, #32]
 8004aea:	eeb0 1a66 	vmov.f32	s2, s13
 8004aee:	461a      	mov	r2, r3
 8004af0:	490c      	ldr	r1, [pc, #48]	; (8004b24 <statemachine+0x16dc>)
 8004af2:	eef0 0a47 	vmov.f32	s1, s14
 8004af6:	eeb0 0a67 	vmov.f32	s0, s15
 8004afa:	4822      	ldr	r0, [pc, #136]	; (8004b84 <statemachine+0x173c>)
 8004afc:	f7fd fd04 	bl	8002508 <csvframe>
 8004b00:	4603      	mov	r3, r0
 8004b02:	4a21      	ldr	r2, [pc, #132]	; (8004b88 <statemachine+0x1740>)
 8004b04:	6013      	str	r3, [r2, #0]
							  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004b06:	4b20      	ldr	r3, [pc, #128]	; (8004b88 <statemachine+0x1740>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	481d      	ldr	r0, [pc, #116]	; (8004b84 <statemachine+0x173c>)
 8004b0e:	f7fd fe31 	bl	8002774 <writebuffertoflash>
 8004b12:	e067      	b.n	8004be4 <statemachine+0x179c>
 8004b14:	f3af 8000 	nop.w
 8004b18:	00000000 	.word	0x00000000
 8004b1c:	40616000 	.word	0x40616000
 8004b20:	20000fbc 	.word	0x20000fbc
 8004b24:	200006c8 	.word	0x200006c8
 8004b28:	20000a49 	.word	0x20000a49
 8004b2c:	20000a4a 	.word	0x20000a4a
 8004b30:	20000a48 	.word	0x20000a48
 8004b34:	2000047e 	.word	0x2000047e
 8004b38:	2000000c 	.word	0x2000000c
 8004b3c:	0801aca8 	.word	0x0801aca8
 8004b40:	20000958 	.word	0x20000958
 8004b44:	0801acb0 	.word	0x0801acb0
 8004b48:	2000097c 	.word	0x2000097c
 8004b4c:	2000095c 	.word	0x2000095c
 8004b50:	0801acb8 	.word	0x0801acb8
 8004b54:	2000070c 	.word	0x2000070c
 8004b58:	20000708 	.word	0x20000708
 8004b5c:	2000105c 	.word	0x2000105c
 8004b60:	20000478 	.word	0x20000478
 8004b64:	20000a08 	.word	0x20000a08
 8004b68:	20000a38 	.word	0x20000a38
 8004b6c:	20000a28 	.word	0x20000a28
 8004b70:	20000a30 	.word	0x20000a30
 8004b74:	200004c4 	.word	0x200004c4
 8004b78:	20000a40 	.word	0x20000a40
 8004b7c:	20000738 	.word	0x20000738
 8004b80:	20000740 	.word	0x20000740
 8004b84:	20000758 	.word	0x20000758
 8004b88:	20000a04 	.word	0x20000a04
							  distanceparcouru=distanceparcouru + distance1sec;
 8004b8c:	4b91      	ldr	r3, [pc, #580]	; (8004dd4 <statemachine+0x198c>)
 8004b8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b92:	4b91      	ldr	r3, [pc, #580]	; (8004dd8 <statemachine+0x1990>)
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	f7fb fb78 	bl	800028c <__adddf3>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	498c      	ldr	r1, [pc, #560]	; (8004dd4 <statemachine+0x198c>)
 8004ba2:	e9c1 2300 	strd	r2, r3, [r1]
							  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004ba6:	4b8d      	ldr	r3, [pc, #564]	; (8004ddc <statemachine+0x1994>)
 8004ba8:	edd3 7a00 	vldr	s15, [r3]
 8004bac:	4b8c      	ldr	r3, [pc, #560]	; (8004de0 <statemachine+0x1998>)
 8004bae:	ed93 7a00 	vldr	s14, [r3]
 8004bb2:	4b8c      	ldr	r3, [pc, #560]	; (8004de4 <statemachine+0x199c>)
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	4a8b      	ldr	r2, [pc, #556]	; (8004de4 <statemachine+0x199c>)
 8004bb8:	edd2 6a08 	vldr	s13, [r2, #32]
 8004bbc:	eeb0 1a66 	vmov.f32	s2, s13
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4988      	ldr	r1, [pc, #544]	; (8004de4 <statemachine+0x199c>)
 8004bc4:	eef0 0a47 	vmov.f32	s1, s14
 8004bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8004bcc:	4886      	ldr	r0, [pc, #536]	; (8004de8 <statemachine+0x19a0>)
 8004bce:	f7fd fc9b 	bl	8002508 <csvframe>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4a85      	ldr	r2, [pc, #532]	; (8004dec <statemachine+0x19a4>)
 8004bd6:	6013      	str	r3, [r2, #0]
							  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004bd8:	4b84      	ldr	r3, [pc, #528]	; (8004dec <statemachine+0x19a4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4882      	ldr	r0, [pc, #520]	; (8004de8 <statemachine+0x19a0>)
 8004be0:	f7fd fdc8 	bl	8002774 <writebuffertoflash>
						  enablewrite=0;
 8004be4:	4b82      	ldr	r3, [pc, #520]	; (8004df0 <statemachine+0x19a8>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
					  if(doubledonnee==0){
 8004bea:	4b82      	ldr	r3, [pc, #520]	; (8004df4 <statemachine+0x19ac>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d111      	bne.n	8004c16 <statemachine+0x17ce>
					 	ssd1306_SetCursor(32,32);
 8004bf2:	2120      	movs	r1, #32
 8004bf4:	2020      	movs	r0, #32
 8004bf6:	f7fe f82f 	bl	8002c58 <ssd1306_SetCursor>
					 	snprintf((uint8_t *)bufferscreen,50,"p=%d",pagenumber);
 8004bfa:	4b7f      	ldr	r3, [pc, #508]	; (8004df8 <statemachine+0x19b0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a7f      	ldr	r2, [pc, #508]	; (8004dfc <statemachine+0x19b4>)
 8004c00:	2132      	movs	r1, #50	; 0x32
 8004c02:	487f      	ldr	r0, [pc, #508]	; (8004e00 <statemachine+0x19b8>)
 8004c04:	f011 fbbe 	bl	8016384 <sniprintf>
					 	ssd1306_WriteString((uint8_t*)bufferscreen,Font_7x10,White);
 8004c08:	4a7e      	ldr	r2, [pc, #504]	; (8004e04 <statemachine+0x19bc>)
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	ca06      	ldmia	r2, {r1, r2}
 8004c0e:	487c      	ldr	r0, [pc, #496]	; (8004e00 <statemachine+0x19b8>)
 8004c10:	f7fd fffc 	bl	8002c0c <ssd1306_WriteString>
 8004c14:	e013      	b.n	8004c3e <statemachine+0x17f6>
					 	ssd1306_SetCursor(32,32);
 8004c16:	2120      	movs	r1, #32
 8004c18:	2020      	movs	r0, #32
 8004c1a:	f7fe f81d 	bl	8002c58 <ssd1306_SetCursor>
					 	snprintf((uint8_t *)bufferscreen,50,"d=%0.1lfm",distanceparcouru);
 8004c1e:	4b6d      	ldr	r3, [pc, #436]	; (8004dd4 <statemachine+0x198c>)
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	e9cd 2300 	strd	r2, r3, [sp]
 8004c28:	4a77      	ldr	r2, [pc, #476]	; (8004e08 <statemachine+0x19c0>)
 8004c2a:	2132      	movs	r1, #50	; 0x32
 8004c2c:	4874      	ldr	r0, [pc, #464]	; (8004e00 <statemachine+0x19b8>)
 8004c2e:	f011 fba9 	bl	8016384 <sniprintf>
					 	ssd1306_WriteString((uint8_t*)bufferscreen,Font_7x10,White);
 8004c32:	4a74      	ldr	r2, [pc, #464]	; (8004e04 <statemachine+0x19bc>)
 8004c34:	2301      	movs	r3, #1
 8004c36:	ca06      	ldmia	r2, {r1, r2}
 8004c38:	4871      	ldr	r0, [pc, #452]	; (8004e00 <statemachine+0x19b8>)
 8004c3a:	f7fd ffe7 	bl	8002c0c <ssd1306_WriteString>
					 	ssd1306_SetCursor(32,42);
 8004c3e:	212a      	movs	r1, #42	; 0x2a
 8004c40:	2020      	movs	r0, #32
 8004c42:	f7fe f809 	bl	8002c58 <ssd1306_SetCursor>
					 	snprintf((uint8_t *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 8004c46:	4b67      	ldr	r3, [pc, #412]	; (8004de4 <statemachine+0x199c>)
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	4a70      	ldr	r2, [pc, #448]	; (8004e0c <statemachine+0x19c4>)
 8004c4c:	2132      	movs	r1, #50	; 0x32
 8004c4e:	486c      	ldr	r0, [pc, #432]	; (8004e00 <statemachine+0x19b8>)
 8004c50:	f011 fb98 	bl	8016384 <sniprintf>
					 	ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 8004c54:	4a6e      	ldr	r2, [pc, #440]	; (8004e10 <statemachine+0x19c8>)
 8004c56:	2301      	movs	r3, #1
 8004c58:	ca06      	ldmia	r2, {r1, r2}
 8004c5a:	4869      	ldr	r0, [pc, #420]	; (8004e00 <statemachine+0x19b8>)
 8004c5c:	f7fd ffd6 	bl	8002c0c <ssd1306_WriteString>
					 	batterygauge(vbat,34, 50,1);
 8004c60:	4b5f      	ldr	r3, [pc, #380]	; (8004de0 <statemachine+0x1998>)
 8004c62:	edd3 7a00 	vldr	s15, [r3]
 8004c66:	2201      	movs	r2, #1
 8004c68:	2132      	movs	r1, #50	; 0x32
 8004c6a:	2022      	movs	r0, #34	; 0x22
 8004c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c70:	f7fe fa0e 	bl	8003090 <batterygauge>
					 	ssd1306_SetCursor(60,50);
 8004c74:	2132      	movs	r1, #50	; 0x32
 8004c76:	203c      	movs	r0, #60	; 0x3c
 8004c78:	f7fd ffee 	bl	8002c58 <ssd1306_SetCursor>
					 	snprintf((uint8_t *)bufferscreen,50, "%0.2fV",vbat);
 8004c7c:	4b58      	ldr	r3, [pc, #352]	; (8004de0 <statemachine+0x1998>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fb fc61 	bl	8000548 <__aeabi_f2d>
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	e9cd 2300 	strd	r2, r3, [sp]
 8004c8e:	4a61      	ldr	r2, [pc, #388]	; (8004e14 <statemachine+0x19cc>)
 8004c90:	2132      	movs	r1, #50	; 0x32
 8004c92:	485b      	ldr	r0, [pc, #364]	; (8004e00 <statemachine+0x19b8>)
 8004c94:	f011 fb76 	bl	8016384 <sniprintf>
					 	if(cptdoubledonnee==3){
 8004c98:	4b5f      	ldr	r3, [pc, #380]	; (8004e18 <statemachine+0x19d0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d108      	bne.n	8004cb2 <statemachine+0x186a>
					 	  		doubledonnee=1-doubledonnee;
 8004ca0:	4b54      	ldr	r3, [pc, #336]	; (8004df4 <statemachine+0x19ac>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f1c3 0301 	rsb	r3, r3, #1
 8004ca8:	4a52      	ldr	r2, [pc, #328]	; (8004df4 <statemachine+0x19ac>)
 8004caa:	6013      	str	r3, [r2, #0]
					 	  		cptdoubledonnee=0;
 8004cac:	4b5a      	ldr	r3, [pc, #360]	; (8004e18 <statemachine+0x19d0>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
					 	erasetime=HAL_GetTick()-erasetime;
 8004cb2:	f001 fa2d 	bl	8006110 <HAL_GetTick>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4a58      	ldr	r2, [pc, #352]	; (8004e1c <statemachine+0x19d4>)
 8004cba:	6812      	ldr	r2, [r2, #0]
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	4b56      	ldr	r3, [pc, #344]	; (8004e1c <statemachine+0x19d4>)
 8004cc2:	601a      	str	r2, [r3, #0]
					 	if(maxtesttime<=erasetime){
 8004cc4:	4b56      	ldr	r3, [pc, #344]	; (8004e20 <statemachine+0x19d8>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	4b54      	ldr	r3, [pc, #336]	; (8004e1c <statemachine+0x19d4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	dc03      	bgt.n	8004cd8 <statemachine+0x1890>
					 		maxtesttime=erasetime;
 8004cd0:	4b52      	ldr	r3, [pc, #328]	; (8004e1c <statemachine+0x19d4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a52      	ldr	r2, [pc, #328]	; (8004e20 <statemachine+0x19d8>)
 8004cd6:	6013      	str	r3, [r2, #0]
					 	snprintf((uint8_t *)bufferscreen,50,"%d",maxtesttime);
 8004cd8:	4b51      	ldr	r3, [pc, #324]	; (8004e20 <statemachine+0x19d8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a51      	ldr	r2, [pc, #324]	; (8004e24 <statemachine+0x19dc>)
 8004cde:	2132      	movs	r1, #50	; 0x32
 8004ce0:	4847      	ldr	r0, [pc, #284]	; (8004e00 <statemachine+0x19b8>)
 8004ce2:	f011 fb4f 	bl	8016384 <sniprintf>
					 	ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 8004ce6:	4a4a      	ldr	r2, [pc, #296]	; (8004e10 <statemachine+0x19c8>)
 8004ce8:	2301      	movs	r3, #1
 8004cea:	ca06      	ldmia	r2, {r1, r2}
 8004cec:	4844      	ldr	r0, [pc, #272]	; (8004e00 <statemachine+0x19b8>)
 8004cee:	f7fd ff8d 	bl	8002c0c <ssd1306_WriteString>
					  if(BTN_B>=1){
 8004cf2:	4b4d      	ldr	r3, [pc, #308]	; (8004e28 <statemachine+0x19e0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	dd4f      	ble.n	8004d9a <statemachine+0x1952>
					  						  balisestate--;
 8004cfa:	4b4c      	ldr	r3, [pc, #304]	; (8004e2c <statemachine+0x19e4>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	4b4a      	ldr	r3, [pc, #296]	; (8004e2c <statemachine+0x19e4>)
 8004d04:	701a      	strb	r2, [r3, #0]
					  						  BTN_B=0;
 8004d06:	4b48      	ldr	r3, [pc, #288]	; (8004e28 <statemachine+0x19e0>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
					  						  BTN_A=0;
 8004d0c:	4b48      	ldr	r3, [pc, #288]	; (8004e30 <statemachine+0x19e8>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
					  						  HAL_TIM_Base_Stop_IT(&htim7);
 8004d12:	4848      	ldr	r0, [pc, #288]	; (8004e34 <statemachine+0x19ec>)
 8004d14:	f007 ff9a 	bl	800cc4c <HAL_TIM_Base_Stop_IT>
					  break;
 8004d18:	e03f      	b.n	8004d9a <statemachine+0x1952>
					  ssd1306_SetCursor(32,32);
 8004d1a:	2120      	movs	r1, #32
 8004d1c:	2020      	movs	r0, #32
 8004d1e:	f7fd ff9b 	bl	8002c58 <ssd1306_SetCursor>
					  ssd1306_WriteString("fin de",Font_6x8,White);
 8004d22:	4a3b      	ldr	r2, [pc, #236]	; (8004e10 <statemachine+0x19c8>)
 8004d24:	2301      	movs	r3, #1
 8004d26:	ca06      	ldmia	r2, {r1, r2}
 8004d28:	4843      	ldr	r0, [pc, #268]	; (8004e38 <statemachine+0x19f0>)
 8004d2a:	f7fd ff6f 	bl	8002c0c <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 8004d2e:	2128      	movs	r1, #40	; 0x28
 8004d30:	2020      	movs	r0, #32
 8004d32:	f7fd ff91 	bl	8002c58 <ssd1306_SetCursor>
					  ssd1306_WriteString("memoire",Font_6x8,White);
 8004d36:	4a36      	ldr	r2, [pc, #216]	; (8004e10 <statemachine+0x19c8>)
 8004d38:	2301      	movs	r3, #1
 8004d3a:	ca06      	ldmia	r2, {r1, r2}
 8004d3c:	483f      	ldr	r0, [pc, #252]	; (8004e3c <statemachine+0x19f4>)
 8004d3e:	f7fd ff65 	bl	8002c0c <ssd1306_WriteString>
					  ssd1306_SetCursor(32,48);
 8004d42:	2130      	movs	r1, #48	; 0x30
 8004d44:	2020      	movs	r0, #32
 8004d46:	f7fd ff87 	bl	8002c58 <ssd1306_SetCursor>
					  snprintf((uint8_t *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 8004d4a:	4b3d      	ldr	r3, [pc, #244]	; (8004e40 <statemachine+0x19f8>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	4b2a      	ldr	r3, [pc, #168]	; (8004df8 <statemachine+0x19b0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	4a3b      	ldr	r2, [pc, #236]	; (8004e44 <statemachine+0x19fc>)
 8004d58:	2132      	movs	r1, #50	; 0x32
 8004d5a:	4829      	ldr	r0, [pc, #164]	; (8004e00 <statemachine+0x19b8>)
 8004d5c:	f011 fb12 	bl	8016384 <sniprintf>
					  ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 8004d60:	4a2b      	ldr	r2, [pc, #172]	; (8004e10 <statemachine+0x19c8>)
 8004d62:	2301      	movs	r3, #1
 8004d64:	ca06      	ldmia	r2, {r1, r2}
 8004d66:	4826      	ldr	r0, [pc, #152]	; (8004e00 <statemachine+0x19b8>)
 8004d68:	f7fd ff50 	bl	8002c0c <ssd1306_WriteString>
					  if(BTN_A>=1){
 8004d6c:	4b30      	ldr	r3, [pc, #192]	; (8004e30 <statemachine+0x19e8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f340 82cb 	ble.w	800530c <statemachine+0x1ec4>
					  				  			 	state++;
 8004d76:	4b34      	ldr	r3, [pc, #208]	; (8004e48 <statemachine+0x1a00>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	4b32      	ldr	r3, [pc, #200]	; (8004e48 <statemachine+0x1a00>)
 8004d80:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 8004d82:	4b2b      	ldr	r3, [pc, #172]	; (8004e30 <statemachine+0x19e8>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 8004d88:	4b27      	ldr	r3, [pc, #156]	; (8004e28 <statemachine+0x19e0>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
					  				  			settimeen=0;
 8004d8e:	4b2f      	ldr	r3, [pc, #188]	; (8004e4c <statemachine+0x1a04>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
				  break;
 8004d94:	e2ba      	b.n	800530c <statemachine+0x1ec4>
					  break;
 8004d96:	bf00      	nop
 8004d98:	e2b8      	b.n	800530c <statemachine+0x1ec4>
					  break;
 8004d9a:	bf00      	nop
				  break;
 8004d9c:	e2b6      	b.n	800530c <statemachine+0x1ec4>


			  case STATE_USB:
				  ssd1306_Fill(Black);
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f7fd fe18 	bl	80029d4 <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 8004da4:	2120      	movs	r1, #32
 8004da6:	2020      	movs	r0, #32
 8004da8:	f7fd ff56 	bl	8002c58 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8004dac:	4a18      	ldr	r2, [pc, #96]	; (8004e10 <statemachine+0x19c8>)
 8004dae:	2301      	movs	r3, #1
 8004db0:	ca06      	ldmia	r2, {r1, r2}
 8004db2:	4827      	ldr	r0, [pc, #156]	; (8004e50 <statemachine+0x1a08>)
 8004db4:	f7fd ff2a 	bl	8002c0c <ssd1306_WriteString>
				  switch(usbstate){
 8004db8:	4b26      	ldr	r3, [pc, #152]	; (8004e54 <statemachine+0x1a0c>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	f000 815b 	beq.w	8005078 <statemachine+0x1c30>
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	f300 82a4 	bgt.w	8005310 <statemachine+0x1ec8>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d045      	beq.n	8004e58 <statemachine+0x1a10>
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d072      	beq.n	8004eb6 <statemachine+0x1a6e>
				 									  			 	BTN_A=0;
				 									  			 	BTN_B=0;
				 									  	}
				 					 break;
				 				  }
				  break;
 8004dd0:	e29e      	b.n	8005310 <statemachine+0x1ec8>
 8004dd2:	bf00      	nop
 8004dd4:	20000a20 	.word	0x20000a20
 8004dd8:	20000a40 	.word	0x20000a40
 8004ddc:	20000738 	.word	0x20000738
 8004de0:	20000740 	.word	0x20000740
 8004de4:	200006c8 	.word	0x200006c8
 8004de8:	20000758 	.word	0x20000758
 8004dec:	20000a04 	.word	0x20000a04
 8004df0:	20000a38 	.word	0x20000a38
 8004df4:	20000a18 	.word	0x20000a18
 8004df8:	2000095c 	.word	0x2000095c
 8004dfc:	0801acc0 	.word	0x0801acc0
 8004e00:	2000097c 	.word	0x2000097c
 8004e04:	20000014 	.word	0x20000014
 8004e08:	0801acc8 	.word	0x0801acc8
 8004e0c:	0801acd4 	.word	0x0801acd4
 8004e10:	2000000c 	.word	0x2000000c
 8004e14:	0801acdc 	.word	0x0801acdc
 8004e18:	20000a1c 	.word	0x20000a1c
 8004e1c:	20000a08 	.word	0x20000a08
 8004e20:	20000fb8 	.word	0x20000fb8
 8004e24:	0801ace4 	.word	0x0801ace4
 8004e28:	2000070c 	.word	0x2000070c
 8004e2c:	2000047e 	.word	0x2000047e
 8004e30:	20000708 	.word	0x20000708
 8004e34:	2000105c 	.word	0x2000105c
 8004e38:	0801ace8 	.word	0x0801ace8
 8004e3c:	0801acf0 	.word	0x0801acf0
 8004e40:	20000958 	.word	0x20000958
 8004e44:	0801acf8 	.word	0x0801acf8
 8004e48:	20000478 	.word	0x20000478
 8004e4c:	20000fbc 	.word	0x20000fbc
 8004e50:	0801ad00 	.word	0x0801ad00
 8004e54:	2000047d 	.word	0x2000047d
				 					  ssd1306_SetCursor(32,40);
 8004e58:	2128      	movs	r1, #40	; 0x28
 8004e5a:	2020      	movs	r0, #32
 8004e5c:	f7fd fefc 	bl	8002c58 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8004e60:	4a92      	ldr	r2, [pc, #584]	; (80050ac <statemachine+0x1c64>)
 8004e62:	2301      	movs	r3, #1
 8004e64:	ca06      	ldmia	r2, {r1, r2}
 8004e66:	4892      	ldr	r0, [pc, #584]	; (80050b0 <statemachine+0x1c68>)
 8004e68:	f7fd fed0 	bl	8002c0c <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8004e6c:	4b91      	ldr	r3, [pc, #580]	; (80050b4 <statemachine+0x1c6c>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 8004e72:	4b91      	ldr	r3, [pc, #580]	; (80050b8 <statemachine+0x1c70>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	dd0b      	ble.n	8004e92 <statemachine+0x1a4a>
				 						  usbstate++;
 8004e7a:	4b90      	ldr	r3, [pc, #576]	; (80050bc <statemachine+0x1c74>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	4b8e      	ldr	r3, [pc, #568]	; (80050bc <statemachine+0x1c74>)
 8004e84:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 8004e86:	4b8c      	ldr	r3, [pc, #560]	; (80050b8 <statemachine+0x1c70>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 8004e8c:	4b8c      	ldr	r3, [pc, #560]	; (80050c0 <statemachine+0x1c78>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8004e92:	4b8b      	ldr	r3, [pc, #556]	; (80050c0 <statemachine+0x1c78>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f340 81e6 	ble.w	8005268 <statemachine+0x1e20>
				 						 state++;
 8004e9c:	4b89      	ldr	r3, [pc, #548]	; (80050c4 <statemachine+0x1c7c>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	4b87      	ldr	r3, [pc, #540]	; (80050c4 <statemachine+0x1c7c>)
 8004ea6:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8004ea8:	4b85      	ldr	r3, [pc, #532]	; (80050c0 <statemachine+0x1c78>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8004eae:	4b82      	ldr	r3, [pc, #520]	; (80050b8 <statemachine+0x1c70>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
				 					  break;
 8004eb4:	e1d8      	b.n	8005268 <statemachine+0x1e20>
				 					 ssd1306_SetCursor(32,40);
 8004eb6:	2128      	movs	r1, #40	; 0x28
 8004eb8:	2020      	movs	r0, #32
 8004eba:	f7fd fecd 	bl	8002c58 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8004ebe:	4a7b      	ldr	r2, [pc, #492]	; (80050ac <statemachine+0x1c64>)
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	ca06      	ldmia	r2, {r1, r2}
 8004ec4:	4880      	ldr	r0, [pc, #512]	; (80050c8 <statemachine+0x1c80>)
 8004ec6:	f7fd fea1 	bl	8002c0c <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,48);
 8004eca:	2130      	movs	r1, #48	; 0x30
 8004ecc:	2020      	movs	r0, #32
 8004ece:	f7fd fec3 	bl	8002c58 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8004ed2:	4a76      	ldr	r2, [pc, #472]	; (80050ac <statemachine+0x1c64>)
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	ca06      	ldmia	r2, {r1, r2}
 8004ed8:	487c      	ldr	r0, [pc, #496]	; (80050cc <statemachine+0x1c84>)
 8004eda:	f7fd fe97 	bl	8002c0c <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8004ede:	4b7c      	ldr	r3, [pc, #496]	; (80050d0 <statemachine+0x1c88>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d137      	bne.n	8004f56 <statemachine+0x1b0e>
					 					 ssd1306_Fill(Black);
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f7fd fd74 	bl	80029d4 <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,32);
 8004eec:	2120      	movs	r1, #32
 8004eee:	2020      	movs	r0, #32
 8004ef0:	f7fd feb2 	bl	8002c58 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 8004ef4:	4a6d      	ldr	r2, [pc, #436]	; (80050ac <statemachine+0x1c64>)
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	ca06      	ldmia	r2, {r1, r2}
 8004efa:	4876      	ldr	r0, [pc, #472]	; (80050d4 <statemachine+0x1c8c>)
 8004efc:	f7fd fe86 	bl	8002c0c <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,40);
 8004f00:	2128      	movs	r1, #40	; 0x28
 8004f02:	2020      	movs	r0, #32
 8004f04:	f7fd fea8 	bl	8002c58 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 8004f08:	4a73      	ldr	r2, [pc, #460]	; (80050d8 <statemachine+0x1c90>)
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	ca06      	ldmia	r2, {r1, r2}
 8004f0e:	4873      	ldr	r0, [pc, #460]	; (80050dc <statemachine+0x1c94>)
 8004f10:	f7fd fe7c 	bl	8002c0c <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,56);
 8004f14:	2138      	movs	r1, #56	; 0x38
 8004f16:	2020      	movs	r0, #32
 8004f18:	f7fd fe9e 	bl	8002c58 <ssd1306_SetCursor>
				 						snprintf((uint8_t *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 8004f1c:	4b70      	ldr	r3, [pc, #448]	; (80050e0 <statemachine+0x1c98>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	ee07 3a90 	vmov	s15, r3
 8004f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f28:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80050e4 <statemachine+0x1c9c>
 8004f2c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004f30:	ee16 0a90 	vmov	r0, s13
 8004f34:	f7fb fb08 	bl	8000548 <__aeabi_f2d>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	e9cd 2300 	strd	r2, r3, [sp]
 8004f40:	4a69      	ldr	r2, [pc, #420]	; (80050e8 <statemachine+0x1ca0>)
 8004f42:	2132      	movs	r1, #50	; 0x32
 8004f44:	4869      	ldr	r0, [pc, #420]	; (80050ec <statemachine+0x1ca4>)
 8004f46:	f011 fa1d 	bl	8016384 <sniprintf>
				 						ssd1306_WriteString((uint8_t*)bufferscreen,Font_6x8,White);
 8004f4a:	4a58      	ldr	r2, [pc, #352]	; (80050ac <statemachine+0x1c64>)
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	ca06      	ldmia	r2, {r1, r2}
 8004f50:	4866      	ldr	r0, [pc, #408]	; (80050ec <statemachine+0x1ca4>)
 8004f52:	f7fd fe5b 	bl	8002c0c <ssd1306_WriteString>
				 					if(BTN_A>=1){
 8004f56:	4b5a      	ldr	r3, [pc, #360]	; (80050c0 <statemachine+0x1c78>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	dd7a      	ble.n	8005054 <statemachine+0x1c0c>
				 						erasetime=HAL_GetTick();
 8004f5e:	f001 f8d7 	bl	8006110 <HAL_GetTick>
 8004f62:	4603      	mov	r3, r0
 8004f64:	461a      	mov	r2, r3
 8004f66:	4b5e      	ldr	r3, [pc, #376]	; (80050e0 <statemachine+0x1c98>)
 8004f68:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	653b      	str	r3, [r7, #80]	; 0x50
 8004f6e:	e03f      	b.n	8004ff0 <statemachine+0x1ba8>
				 							ssd1306_Fill(Black);
 8004f70:	2000      	movs	r0, #0
 8004f72:	f7fd fd2f 	bl	80029d4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8004f76:	2120      	movs	r1, #32
 8004f78:	2020      	movs	r0, #32
 8004f7a:	f7fd fe6d 	bl	8002c58 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 8004f7e:	4a4b      	ldr	r2, [pc, #300]	; (80050ac <statemachine+0x1c64>)
 8004f80:	2301      	movs	r3, #1
 8004f82:	ca06      	ldmia	r2, {r1, r2}
 8004f84:	4853      	ldr	r0, [pc, #332]	; (80050d4 <statemachine+0x1c8c>)
 8004f86:	f7fd fe41 	bl	8002c0c <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 8004f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4858      	ldr	r0, [pc, #352]	; (80050f0 <statemachine+0x1ca8>)
 8004f90:	f00e fc95 	bl	80138be <SPIF_EraseSector>
				 							if(i>=1){
 8004f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	dd21      	ble.n	8004fde <statemachine+0x1b96>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 8004f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f9c:	2264      	movs	r2, #100	; 0x64
 8004f9e:	fb02 f303 	mul.w	r3, r2, r3
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8004faa:	4b52      	ldr	r3, [pc, #328]	; (80050f4 <statemachine+0x1cac>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	da00      	bge.n	8004fb4 <statemachine+0x1b6c>
 8004fb2:	330f      	adds	r3, #15
 8004fb4:	111b      	asrs	r3, r3, #4
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fb fab4 	bl	8000524 <__aeabi_i2d>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	f7fb fdc8 	bl	8000b58 <__aeabi_d2iz>
 8004fc8:	ee07 0a90 	vmov	s15, r0
 8004fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fd0:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8004fd4:	eeb0 0a47 	vmov.f32	s0, s14
 8004fd8:	f7fe f9d6 	bl	8003388 <percentage>
 8004fdc:	e003      	b.n	8004fe6 <statemachine+0x1b9e>
				 								percentage((float) 0);
 8004fde:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80050f8 <statemachine+0x1cb0>
 8004fe2:	f7fe f9d1 	bl	8003388 <percentage>
				 							ssd1306_UpdateScreen();
 8004fe6:	f7fd fd0d 	bl	8002a04 <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8004fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fec:	3301      	adds	r3, #1
 8004fee:	653b      	str	r3, [r7, #80]	; 0x50
 8004ff0:	4b40      	ldr	r3, [pc, #256]	; (80050f4 <statemachine+0x1cac>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	da00      	bge.n	8004ffa <statemachine+0x1bb2>
 8004ff8:	330f      	adds	r3, #15
 8004ffa:	111b      	asrs	r3, r3, #4
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fb fa91 	bl	8000524 <__aeabi_i2d>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4610      	mov	r0, r2
 8005008:	4619      	mov	r1, r3
 800500a:	f7fb fda5 	bl	8000b58 <__aeabi_d2iz>
 800500e:	4602      	mov	r2, r0
 8005010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005012:	4293      	cmp	r3, r2
 8005014:	ddac      	ble.n	8004f70 <statemachine+0x1b28>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 8005016:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800501a:	4835      	ldr	r0, [pc, #212]	; (80050f0 <statemachine+0x1ca8>)
 800501c:	f00e fc4f 	bl	80138be <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 8005020:	f001 f876 	bl	8006110 <HAL_GetTick>
 8005024:	4603      	mov	r3, r0
 8005026:	4a2e      	ldr	r2, [pc, #184]	; (80050e0 <statemachine+0x1c98>)
 8005028:	6812      	ldr	r2, [r2, #0]
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	461a      	mov	r2, r3
 800502e:	4b2c      	ldr	r3, [pc, #176]	; (80050e0 <statemachine+0x1c98>)
 8005030:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 8005032:	4b27      	ldr	r3, [pc, #156]	; (80050d0 <statemachine+0x1c88>)
 8005034:	2201      	movs	r2, #1
 8005036:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 8005038:	4b30      	ldr	r3, [pc, #192]	; (80050fc <statemachine+0x1cb4>)
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 800503e:	4b2d      	ldr	r3, [pc, #180]	; (80050f4 <statemachine+0x1cac>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
				 						storeindex();
 8005044:	f7fd faea 	bl	800261c <storeindex>
				 						BTN_A=0;
 8005048:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <statemachine+0x1c78>)
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 800504e:	4b1a      	ldr	r3, [pc, #104]	; (80050b8 <statemachine+0x1c70>)
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 8005054:	4b18      	ldr	r3, [pc, #96]	; (80050b8 <statemachine+0x1c70>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f340 8107 	ble.w	800526c <statemachine+0x1e24>
					 						usbstate++;
 800505e:	4b17      	ldr	r3, [pc, #92]	; (80050bc <statemachine+0x1c74>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	3301      	adds	r3, #1
 8005064:	b2da      	uxtb	r2, r3
 8005066:	4b15      	ldr	r3, [pc, #84]	; (80050bc <statemachine+0x1c74>)
 8005068:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 800506a:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <statemachine+0x1c70>)
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 8005070:	4b13      	ldr	r3, [pc, #76]	; (80050c0 <statemachine+0x1c78>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
				 			  break;
 8005076:	e0f9      	b.n	800526c <statemachine+0x1e24>
				 					ssd1306_Fill(Black);
 8005078:	2000      	movs	r0, #0
 800507a:	f7fd fcab 	bl	80029d4 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,40);
 800507e:	2128      	movs	r1, #40	; 0x28
 8005080:	2020      	movs	r0, #32
 8005082:	f7fd fde9 	bl	8002c58 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8005086:	4a09      	ldr	r2, [pc, #36]	; (80050ac <statemachine+0x1c64>)
 8005088:	2301      	movs	r3, #1
 800508a:	ca06      	ldmia	r2, {r1, r2}
 800508c:	481c      	ldr	r0, [pc, #112]	; (8005100 <statemachine+0x1cb8>)
 800508e:	f7fd fdbd 	bl	8002c0c <ssd1306_WriteString>
				 					if(pagenumber>0){
 8005092:	4b18      	ldr	r3, [pc, #96]	; (80050f4 <statemachine+0x1cac>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f340 80a8 	ble.w	80051ec <statemachine+0x1da4>
				 					int i=0;
 800509c:	2300      	movs	r3, #0
 800509e:	64fb      	str	r3, [r7, #76]	; 0x4c
				 					if(usbtransmiten==0){
 80050a0:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <statemachine+0x1c6c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f040 808f 	bne.w	80051c8 <statemachine+0x1d80>
				 						while(i<pagenumber){
 80050aa:	e062      	b.n	8005172 <statemachine+0x1d2a>
 80050ac:	2000000c 	.word	0x2000000c
 80050b0:	0801ad04 	.word	0x0801ad04
 80050b4:	20000a10 	.word	0x20000a10
 80050b8:	2000070c 	.word	0x2000070c
 80050bc:	2000047d 	.word	0x2000047d
 80050c0:	20000708 	.word	0x20000708
 80050c4:	20000478 	.word	0x20000478
 80050c8:	0801ad10 	.word	0x0801ad10
 80050cc:	0801ad18 	.word	0x0801ad18
 80050d0:	20000a0c 	.word	0x20000a0c
 80050d4:	0801ad00 	.word	0x0801ad00
 80050d8:	20000014 	.word	0x20000014
 80050dc:	0801ad24 	.word	0x0801ad24
 80050e0:	20000a08 	.word	0x20000a08
 80050e4:	447a0000 	.word	0x447a0000
 80050e8:	0801ad28 	.word	0x0801ad28
 80050ec:	2000097c 	.word	0x2000097c
 80050f0:	20000710 	.word	0x20000710
 80050f4:	2000095c 	.word	0x2000095c
 80050f8:	00000000 	.word	0x00000000
 80050fc:	20000958 	.word	0x20000958
 8005100:	0801ad30 	.word	0x0801ad30
				 							ssd1306_Fill(Black);
 8005104:	2000      	movs	r0, #0
 8005106:	f7fd fc65 	bl	80029d4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 800510a:	2120      	movs	r1, #32
 800510c:	2020      	movs	r0, #32
 800510e:	f7fd fda3 	bl	8002c58 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8005112:	4a84      	ldr	r2, [pc, #528]	; (8005324 <statemachine+0x1edc>)
 8005114:	2301      	movs	r3, #1
 8005116:	ca06      	ldmia	r2, {r1, r2}
 8005118:	4883      	ldr	r0, [pc, #524]	; (8005328 <statemachine+0x1ee0>)
 800511a:	f7fd fd77 	bl	8002c0c <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t *)flashread, 256, 0);
 800511e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005120:	2300      	movs	r3, #0
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005128:	4a80      	ldr	r2, [pc, #512]	; (800532c <statemachine+0x1ee4>)
 800512a:	4881      	ldr	r0, [pc, #516]	; (8005330 <statemachine+0x1ee8>)
 800512c:	f00e fc68 	bl	8013a00 <SPIF_ReadPage>
				 							CDC_Transmit_FS((uint8_t * )flashread,256);
 8005130:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005134:	487d      	ldr	r0, [pc, #500]	; (800532c <statemachine+0x1ee4>)
 8005136:	f00e fd4d 	bl	8013bd4 <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 800513a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800513c:	2264      	movs	r2, #100	; 0x64
 800513e:	fb02 f303 	mul.w	r3, r2, r3
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800514a:	4b7a      	ldr	r3, [pc, #488]	; (8005334 <statemachine+0x1eec>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005156:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800515a:	eeb0 0a66 	vmov.f32	s0, s13
 800515e:	f7fe f913 	bl	8003388 <percentage>
				 							ssd1306_UpdateScreen();
 8005162:	f7fd fc4f 	bl	8002a04 <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 8005166:	207d      	movs	r0, #125	; 0x7d
 8005168:	f000 ffde 	bl	8006128 <HAL_Delay>
				 							i++;
 800516c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800516e:	3301      	adds	r3, #1
 8005170:	64fb      	str	r3, [r7, #76]	; 0x4c
				 						while(i<pagenumber){
 8005172:	4b70      	ldr	r3, [pc, #448]	; (8005334 <statemachine+0x1eec>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005178:	429a      	cmp	r2, r3
 800517a:	dbc3      	blt.n	8005104 <statemachine+0x1cbc>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t *)flashread, pageoffset, 0);
 800517c:	4b6d      	ldr	r3, [pc, #436]	; (8005334 <statemachine+0x1eec>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4619      	mov	r1, r3
 8005182:	4b6d      	ldr	r3, [pc, #436]	; (8005338 <statemachine+0x1ef0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	2300      	movs	r3, #0
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	4a67      	ldr	r2, [pc, #412]	; (800532c <statemachine+0x1ee4>)
 8005190:	4867      	ldr	r0, [pc, #412]	; (8005330 <statemachine+0x1ee8>)
 8005192:	f00e fc35 	bl	8013a00 <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t * )flashread,pageoffset);
 8005196:	4b68      	ldr	r3, [pc, #416]	; (8005338 <statemachine+0x1ef0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4619      	mov	r1, r3
 800519c:	4863      	ldr	r0, [pc, #396]	; (800532c <statemachine+0x1ee4>)
 800519e:	f00e fd19 	bl	8013bd4 <CDC_Transmit_FS>
				 						HAL_Delay(125);
 80051a2:	207d      	movs	r0, #125	; 0x7d
 80051a4:	f000 ffc0 	bl	8006128 <HAL_Delay>
				 						int taillefin=0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	64bb      	str	r3, [r7, #72]	; 0x48
										taillefin = snprintf((uint8_t *)usbbuffer,64,"kawakobeme\n\r");
 80051ac:	4a63      	ldr	r2, [pc, #396]	; (800533c <statemachine+0x1ef4>)
 80051ae:	2140      	movs	r1, #64	; 0x40
 80051b0:	4863      	ldr	r0, [pc, #396]	; (8005340 <statemachine+0x1ef8>)
 80051b2:	f011 f8e7 	bl	8016384 <sniprintf>
 80051b6:	64b8      	str	r0, [r7, #72]	; 0x48
				 						CDC_Transmit_FS((uint8_t *)usbbuffer,taillefin);
 80051b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80051ba:	4861      	ldr	r0, [pc, #388]	; (8005340 <statemachine+0x1ef8>)
 80051bc:	f00e fd0a 	bl	8013bd4 <CDC_Transmit_FS>
				 						usbtransmiten=1;
 80051c0:	4b60      	ldr	r3, [pc, #384]	; (8005344 <statemachine+0x1efc>)
 80051c2:	2201      	movs	r2, #1
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e003      	b.n	80051d0 <statemachine+0x1d88>
				 						usbpercent=1;
 80051c8:	4b5f      	ldr	r3, [pc, #380]	; (8005348 <statemachine+0x1f00>)
 80051ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80051ce:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 80051d0:	2000      	movs	r0, #0
 80051d2:	f7fd fbff 	bl	80029d4 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,45);
 80051d6:	212d      	movs	r1, #45	; 0x2d
 80051d8:	2020      	movs	r0, #32
 80051da:	f7fd fd3d 	bl	8002c58 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 80051de:	4a5b      	ldr	r2, [pc, #364]	; (800534c <statemachine+0x1f04>)
 80051e0:	2301      	movs	r3, #1
 80051e2:	ca06      	ldmia	r2, {r1, r2}
 80051e4:	485a      	ldr	r0, [pc, #360]	; (8005350 <statemachine+0x1f08>)
 80051e6:	f7fd fd11 	bl	8002c0c <ssd1306_WriteString>
 80051ea:	e016      	b.n	800521a <statemachine+0x1dd2>
				 							ssd1306_Fill(Black);
 80051ec:	2000      	movs	r0, #0
 80051ee:	f7fd fbf1 	bl	80029d4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,40);
 80051f2:	2128      	movs	r1, #40	; 0x28
 80051f4:	2020      	movs	r0, #32
 80051f6:	f7fd fd2f 	bl	8002c58 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 80051fa:	4a4a      	ldr	r2, [pc, #296]	; (8005324 <statemachine+0x1edc>)
 80051fc:	2301      	movs	r3, #1
 80051fe:	ca06      	ldmia	r2, {r1, r2}
 8005200:	4849      	ldr	r0, [pc, #292]	; (8005328 <statemachine+0x1ee0>)
 8005202:	f7fd fd03 	bl	8002c0c <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,48);
 8005206:	2130      	movs	r1, #48	; 0x30
 8005208:	2020      	movs	r0, #32
 800520a:	f7fd fd25 	bl	8002c58 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_6x8,White);
 800520e:	4a45      	ldr	r2, [pc, #276]	; (8005324 <statemachine+0x1edc>)
 8005210:	2301      	movs	r3, #1
 8005212:	ca06      	ldmia	r2, {r1, r2}
 8005214:	484f      	ldr	r0, [pc, #316]	; (8005354 <statemachine+0x1f0c>)
 8005216:	f7fd fcf9 	bl	8002c0c <ssd1306_WriteString>
				 					if(BTN_B>=1){
 800521a:	4b4f      	ldr	r3, [pc, #316]	; (8005358 <statemachine+0x1f10>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	dd11      	ble.n	8005246 <statemachine+0x1dfe>
				 									 						usbstate--;
 8005222:	4b4e      	ldr	r3, [pc, #312]	; (800535c <statemachine+0x1f14>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	3b01      	subs	r3, #1
 8005228:	b2da      	uxtb	r2, r3
 800522a:	4b4c      	ldr	r3, [pc, #304]	; (800535c <statemachine+0x1f14>)
 800522c:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 800522e:	4b4b      	ldr	r3, [pc, #300]	; (800535c <statemachine+0x1f14>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	3b01      	subs	r3, #1
 8005234:	b2da      	uxtb	r2, r3
 8005236:	4b49      	ldr	r3, [pc, #292]	; (800535c <statemachine+0x1f14>)
 8005238:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 800523a:	4b47      	ldr	r3, [pc, #284]	; (8005358 <statemachine+0x1f10>)
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 8005240:	4b47      	ldr	r3, [pc, #284]	; (8005360 <statemachine+0x1f18>)
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8005246:	4b46      	ldr	r3, [pc, #280]	; (8005360 <statemachine+0x1f18>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	dd10      	ble.n	8005270 <statemachine+0x1e28>
				 									  			 	state++;
 800524e:	4b45      	ldr	r3, [pc, #276]	; (8005364 <statemachine+0x1f1c>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	3301      	adds	r3, #1
 8005254:	b2da      	uxtb	r2, r3
 8005256:	4b43      	ldr	r3, [pc, #268]	; (8005364 <statemachine+0x1f1c>)
 8005258:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 800525a:	4b41      	ldr	r3, [pc, #260]	; (8005360 <statemachine+0x1f18>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005260:	4b3d      	ldr	r3, [pc, #244]	; (8005358 <statemachine+0x1f10>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
				 					 break;
 8005266:	e003      	b.n	8005270 <statemachine+0x1e28>
				 					  break;
 8005268:	bf00      	nop
 800526a:	e051      	b.n	8005310 <statemachine+0x1ec8>
				 			  break;
 800526c:	bf00      	nop
 800526e:	e04f      	b.n	8005310 <statemachine+0x1ec8>
				 					 break;
 8005270:	bf00      	nop
				  break;
 8005272:	e04d      	b.n	8005310 <statemachine+0x1ec8>

				  case STATE_TEST:
					  ssd1306_Fill(Black);
 8005274:	2000      	movs	r0, #0
 8005276:	f7fd fbad 	bl	80029d4 <ssd1306_Fill>
					  ssd1306_SetCursor(32,32);
 800527a:	2120      	movs	r1, #32
 800527c:	2020      	movs	r0, #32
 800527e:	f7fd fceb 	bl	8002c58 <ssd1306_SetCursor>
					  ssd1306_WriteString("test",Font_6x8,White);
 8005282:	4a28      	ldr	r2, [pc, #160]	; (8005324 <statemachine+0x1edc>)
 8005284:	2301      	movs	r3, #1
 8005286:	ca06      	ldmia	r2, {r1, r2}
 8005288:	4837      	ldr	r0, [pc, #220]	; (8005368 <statemachine+0x1f20>)
 800528a:	f7fd fcbf 	bl	8002c0c <ssd1306_WriteString>





					  if(BTN_A>=1){
 800528e:	4b34      	ldr	r3, [pc, #208]	; (8005360 <statemachine+0x1f18>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	dd3e      	ble.n	8005314 <statemachine+0x1ecc>
					 				 									state--;
 8005296:	4b33      	ldr	r3, [pc, #204]	; (8005364 <statemachine+0x1f1c>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	3b01      	subs	r3, #1
 800529c:	b2da      	uxtb	r2, r3
 800529e:	4b31      	ldr	r3, [pc, #196]	; (8005364 <statemachine+0x1f1c>)
 80052a0:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80052a2:	4b30      	ldr	r3, [pc, #192]	; (8005364 <statemachine+0x1f1c>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	4b2e      	ldr	r3, [pc, #184]	; (8005364 <statemachine+0x1f1c>)
 80052ac:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80052ae:	4b2d      	ldr	r3, [pc, #180]	; (8005364 <statemachine+0x1f1c>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	4b2b      	ldr	r3, [pc, #172]	; (8005364 <statemachine+0x1f1c>)
 80052b8:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80052ba:	4b2a      	ldr	r3, [pc, #168]	; (8005364 <statemachine+0x1f1c>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	3b01      	subs	r3, #1
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	4b28      	ldr	r3, [pc, #160]	; (8005364 <statemachine+0x1f1c>)
 80052c4:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80052c6:	4b27      	ldr	r3, [pc, #156]	; (8005364 <statemachine+0x1f1c>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	4b25      	ldr	r3, [pc, #148]	; (8005364 <statemachine+0x1f1c>)
 80052d0:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80052d2:	4b24      	ldr	r3, [pc, #144]	; (8005364 <statemachine+0x1f1c>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	4b22      	ldr	r3, [pc, #136]	; (8005364 <statemachine+0x1f1c>)
 80052dc:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80052de:	4b21      	ldr	r3, [pc, #132]	; (8005364 <statemachine+0x1f1c>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	4b1f      	ldr	r3, [pc, #124]	; (8005364 <statemachine+0x1f1c>)
 80052e8:	701a      	strb	r2, [r3, #0]
					 				 									  			 	BTN_A=0;
 80052ea:	4b1d      	ldr	r3, [pc, #116]	; (8005360 <statemachine+0x1f18>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
					 				 									  			 	BTN_B=0;
 80052f0:	4b19      	ldr	r3, [pc, #100]	; (8005358 <statemachine+0x1f10>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
					 				 									  	}



					  break;
 80052f6:	e00d      	b.n	8005314 <statemachine+0x1ecc>
				  break;
 80052f8:	bf00      	nop
 80052fa:	e00c      	b.n	8005316 <statemachine+0x1ece>
			  break;
 80052fc:	bf00      	nop
 80052fe:	e00a      	b.n	8005316 <statemachine+0x1ece>
			  break;
 8005300:	bf00      	nop
 8005302:	e008      	b.n	8005316 <statemachine+0x1ece>
			  break;
 8005304:	bf00      	nop
 8005306:	e006      	b.n	8005316 <statemachine+0x1ece>
			  break;
 8005308:	bf00      	nop
 800530a:	e004      	b.n	8005316 <statemachine+0x1ece>
				  break;
 800530c:	bf00      	nop
 800530e:	e002      	b.n	8005316 <statemachine+0x1ece>
				  break;
 8005310:	bf00      	nop
 8005312:	e000      	b.n	8005316 <statemachine+0x1ece>
					  break;
 8005314:	bf00      	nop
	}
return ;
 8005316:	bf00      	nop
 8005318:	bf00      	nop
}
 800531a:	3764      	adds	r7, #100	; 0x64
 800531c:	46bd      	mov	sp, r7
 800531e:	ecbd 8b02 	vpop	{d8}
 8005322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005324:	2000000c 	.word	0x2000000c
 8005328:	0801ad30 	.word	0x0801ad30
 800532c:	20000858 	.word	0x20000858
 8005330:	20000710 	.word	0x20000710
 8005334:	2000095c 	.word	0x2000095c
 8005338:	20000958 	.word	0x20000958
 800533c:	0801ad38 	.word	0x0801ad38
 8005340:	200009b0 	.word	0x200009b0
 8005344:	20000a10 	.word	0x20000a10
 8005348:	20000a14 	.word	0x20000a14
 800534c:	20000014 	.word	0x20000014
 8005350:	0801ad48 	.word	0x0801ad48
 8005354:	0801ad50 	.word	0x0801ad50
 8005358:	2000070c 	.word	0x2000070c
 800535c:	2000047d 	.word	0x2000047d
 8005360:	20000708 	.word	0x20000708
 8005364:	20000478 	.word	0x20000478
 8005368:	0801ad58 	.word	0x0801ad58

0800536c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005372:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <HAL_MspInit+0x44>)
 8005374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005376:	4a0e      	ldr	r2, [pc, #56]	; (80053b0 <HAL_MspInit+0x44>)
 8005378:	f043 0301 	orr.w	r3, r3, #1
 800537c:	6613      	str	r3, [r2, #96]	; 0x60
 800537e:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <HAL_MspInit+0x44>)
 8005380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	607b      	str	r3, [r7, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800538a:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <HAL_MspInit+0x44>)
 800538c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538e:	4a08      	ldr	r2, [pc, #32]	; (80053b0 <HAL_MspInit+0x44>)
 8005390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005394:	6593      	str	r3, [r2, #88]	; 0x58
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <HAL_MspInit+0x44>)
 8005398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40021000 	.word	0x40021000

080053b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80053b8:	e7fe      	b.n	80053b8 <NMI_Handler+0x4>

080053ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053ba:	b480      	push	{r7}
 80053bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053be:	e7fe      	b.n	80053be <HardFault_Handler+0x4>

080053c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053c4:	e7fe      	b.n	80053c4 <MemManage_Handler+0x4>

080053c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053c6:	b480      	push	{r7}
 80053c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053ca:	e7fe      	b.n	80053ca <BusFault_Handler+0x4>

080053cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053d0:	e7fe      	b.n	80053d0 <UsageFault_Handler+0x4>

080053d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80053d2:	b480      	push	{r7}
 80053d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80053d6:	bf00      	nop
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053e4:	bf00      	nop
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053ee:	b480      	push	{r7}
 80053f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053f2:	bf00      	nop
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005400:	f000 fe72 	bl	80060e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005404:	bf00      	nop
 8005406:	bd80      	pop	{r7, pc}

08005408 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800540c:	2002      	movs	r0, #2
 800540e:	f002 fe65 	bl	80080dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005412:	bf00      	nop
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800541c:	4802      	ldr	r0, [pc, #8]	; (8005428 <DMA1_Channel1_IRQHandler+0x10>)
 800541e:	f002 fbf0 	bl	8007c02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005422:	bf00      	nop
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000388 	.word	0x20000388

0800542c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005430:	4802      	ldr	r0, [pc, #8]	; (800543c <DMA1_Channel2_IRQHandler+0x10>)
 8005432:	f002 fbe6 	bl	8007c02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005436:	bf00      	nop
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20000b20 	.word	0x20000b20

08005440 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005444:	4802      	ldr	r0, [pc, #8]	; (8005450 <DMA1_Channel3_IRQHandler+0x10>)
 8005446:	f002 fbdc 	bl	8007c02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800544a:	bf00      	nop
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20000b68 	.word	0x20000b68

08005454 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005458:	4802      	ldr	r0, [pc, #8]	; (8005464 <ADC1_IRQHandler+0x10>)
 800545a:	f001 fa29 	bl	80068b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800545e:	bf00      	nop
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000324 	.word	0x20000324

08005468 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800546c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005470:	f002 fe34 	bl	80080dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005474:	bf00      	nop
 8005476:	bd80      	pop	{r7, pc}

08005478 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800547c:	4803      	ldr	r0, [pc, #12]	; (800548c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800547e:	f007 fc14 	bl	800ccaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  updatedate();
 8005482:	f000 fa91 	bl	80059a8 <updatedate>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8005486:	bf00      	nop
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	200010a8 	.word	0x200010a8

08005490 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005494:	4802      	ldr	r0, [pc, #8]	; (80054a0 <SPI1_IRQHandler+0x10>)
 8005496:	f006 fe8f 	bl	800c1b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800549a:	bf00      	nop
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000abc 	.word	0x20000abc

080054a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  	cptdoubledonnee+=1;
 80054a8:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <TIM7_IRQHandler+0x20>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3301      	adds	r3, #1
 80054ae:	4a05      	ldr	r2, [pc, #20]	; (80054c4 <TIM7_IRQHandler+0x20>)
 80054b0:	6013      	str	r3, [r2, #0]
  	enablewrite=1;
 80054b2:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <TIM7_IRQHandler+0x24>)
 80054b4:	2201      	movs	r2, #1
 80054b6:	601a      	str	r2, [r3, #0]



  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80054b8:	4804      	ldr	r0, [pc, #16]	; (80054cc <TIM7_IRQHandler+0x28>)
 80054ba:	f007 fbf6 	bl	800ccaa <HAL_TIM_IRQHandler>




  /* USER CODE END TIM7_IRQn 1 */
}
 80054be:	bf00      	nop
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000a1c 	.word	0x20000a1c
 80054c8:	20000a38 	.word	0x20000a38
 80054cc:	2000105c 	.word	0x2000105c

080054d0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80054d4:	4802      	ldr	r0, [pc, #8]	; (80054e0 <USB_IRQHandler+0x10>)
 80054d6:	f003 fc0d 	bl	8008cf4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80054da:	bf00      	nop
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20001f30 	.word	0x20001f30

080054e4 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 80054e8:	4802      	ldr	r0, [pc, #8]	; (80054f4 <DMA2_Channel7_IRQHandler+0x10>)
 80054ea:	f002 fb8a 	bl	8007c02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 80054ee:	bf00      	nop
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20001204 	.word	0x20001204

080054f8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80054fc:	4802      	ldr	r0, [pc, #8]	; (8005508 <LPUART1_IRQHandler+0x10>)
 80054fe:	f008 f8e9 	bl	800d6d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8005502:	bf00      	nop
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	200010f4 	.word	0x200010f4

0800550c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  return 1;
 8005510:	2301      	movs	r3, #1
}
 8005512:	4618      	mov	r0, r3
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <_kill>:

int _kill(int pid, int sig)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005526:	f011 f8ab 	bl	8016680 <__errno>
 800552a:	4603      	mov	r3, r0
 800552c:	2216      	movs	r2, #22
 800552e:	601a      	str	r2, [r3, #0]
  return -1;
 8005530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005534:	4618      	mov	r0, r3
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <_exit>:

void _exit (int status)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005544:	f04f 31ff 	mov.w	r1, #4294967295
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff ffe7 	bl	800551c <_kill>
  while (1) {}    /* Make sure we hang here */
 800554e:	e7fe      	b.n	800554e <_exit+0x12>

08005550 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800555c:	2300      	movs	r3, #0
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	e00a      	b.n	8005578 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005562:	f3af 8000 	nop.w
 8005566:	4601      	mov	r1, r0
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	60ba      	str	r2, [r7, #8]
 800556e:	b2ca      	uxtb	r2, r1
 8005570:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	3301      	adds	r3, #1
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	429a      	cmp	r2, r3
 800557e:	dbf0      	blt.n	8005562 <_read+0x12>
  }

  return len;
 8005580:	687b      	ldr	r3, [r7, #4]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b086      	sub	sp, #24
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	e009      	b.n	80055b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	60ba      	str	r2, [r7, #8]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	3301      	adds	r3, #1
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	dbf1      	blt.n	800559c <_write+0x12>
  }
  return len;
 80055b8:	687b      	ldr	r3, [r7, #4]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <_close>:

int _close(int file)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80055ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055ea:	605a      	str	r2, [r3, #4]
  return 0;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <_isatty>:

int _isatty(int file)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005602:	2301      	movs	r3, #1
}
 8005604:	4618      	mov	r0, r3
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
	...

0800562c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005634:	4a14      	ldr	r2, [pc, #80]	; (8005688 <_sbrk+0x5c>)
 8005636:	4b15      	ldr	r3, [pc, #84]	; (800568c <_sbrk+0x60>)
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005640:	4b13      	ldr	r3, [pc, #76]	; (8005690 <_sbrk+0x64>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d102      	bne.n	800564e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005648:	4b11      	ldr	r3, [pc, #68]	; (8005690 <_sbrk+0x64>)
 800564a:	4a12      	ldr	r2, [pc, #72]	; (8005694 <_sbrk+0x68>)
 800564c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800564e:	4b10      	ldr	r3, [pc, #64]	; (8005690 <_sbrk+0x64>)
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4413      	add	r3, r2
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	429a      	cmp	r2, r3
 800565a:	d207      	bcs.n	800566c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800565c:	f011 f810 	bl	8016680 <__errno>
 8005660:	4603      	mov	r3, r0
 8005662:	220c      	movs	r2, #12
 8005664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005666:	f04f 33ff 	mov.w	r3, #4294967295
 800566a:	e009      	b.n	8005680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800566c:	4b08      	ldr	r3, [pc, #32]	; (8005690 <_sbrk+0x64>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005672:	4b07      	ldr	r3, [pc, #28]	; (8005690 <_sbrk+0x64>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4413      	add	r3, r2
 800567a:	4a05      	ldr	r2, [pc, #20]	; (8005690 <_sbrk+0x64>)
 800567c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800567e:	68fb      	ldr	r3, [r7, #12]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20010000 	.word	0x20010000
 800568c:	00000400 	.word	0x00000400
 8005690:	20000fc0 	.word	0x20000fc0
 8005694:	20002598 	.word	0x20002598

08005698 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <SystemInit+0x20>)
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a2:	4a05      	ldr	r2, [pc, #20]	; (80056b8 <SystemInit+0x20>)
 80056a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80056ac:	bf00      	nop
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	e000ed00 	.word	0xe000ed00

080056bc <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056c2:	f107 0310 	add.w	r3, r7, #16
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	605a      	str	r2, [r3, #4]
 80056cc:	609a      	str	r2, [r3, #8]
 80056ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056d0:	1d3b      	adds	r3, r7, #4
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	605a      	str	r2, [r3, #4]
 80056d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80056da:	4b1e      	ldr	r3, [pc, #120]	; (8005754 <MX_TIM2_Init+0x98>)
 80056dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80056e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 80056e2:	4b1c      	ldr	r3, [pc, #112]	; (8005754 <MX_TIM2_Init+0x98>)
 80056e4:	f240 128f 	movw	r2, #399	; 0x18f
 80056e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056ea:	4b1a      	ldr	r3, [pc, #104]	; (8005754 <MX_TIM2_Init+0x98>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80056f0:	4b18      	ldr	r3, [pc, #96]	; (8005754 <MX_TIM2_Init+0x98>)
 80056f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80056f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056f8:	4b16      	ldr	r3, [pc, #88]	; (8005754 <MX_TIM2_Init+0x98>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056fe:	4b15      	ldr	r3, [pc, #84]	; (8005754 <MX_TIM2_Init+0x98>)
 8005700:	2200      	movs	r2, #0
 8005702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005704:	4813      	ldr	r0, [pc, #76]	; (8005754 <MX_TIM2_Init+0x98>)
 8005706:	f007 f9a9 	bl	800ca5c <HAL_TIM_Base_Init>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8005710:	f7fc f95d 	bl	80019ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005718:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800571a:	f107 0310 	add.w	r3, r7, #16
 800571e:	4619      	mov	r1, r3
 8005720:	480c      	ldr	r0, [pc, #48]	; (8005754 <MX_TIM2_Init+0x98>)
 8005722:	f007 fbc4 	bl	800ceae <HAL_TIM_ConfigClockSource>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800572c:	f7fc f94f 	bl	80019ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005730:	2320      	movs	r3, #32
 8005732:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005734:	2300      	movs	r3, #0
 8005736:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005738:	1d3b      	adds	r3, r7, #4
 800573a:	4619      	mov	r1, r3
 800573c:	4805      	ldr	r0, [pc, #20]	; (8005754 <MX_TIM2_Init+0x98>)
 800573e:	f007 fdaf 	bl	800d2a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8005748:	f7fc f941 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800574c:	bf00      	nop
 800574e:	3720      	adds	r7, #32
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000fc4 	.word	0x20000fc4

08005758 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800575e:	1d3b      	adds	r3, r7, #4
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	605a      	str	r2, [r3, #4]
 8005766:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005768:	4b14      	ldr	r3, [pc, #80]	; (80057bc <MX_TIM6_Init+0x64>)
 800576a:	4a15      	ldr	r2, [pc, #84]	; (80057c0 <MX_TIM6_Init+0x68>)
 800576c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800576e:	4b13      	ldr	r3, [pc, #76]	; (80057bc <MX_TIM6_Init+0x64>)
 8005770:	2200      	movs	r2, #0
 8005772:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005774:	4b11      	ldr	r3, [pc, #68]	; (80057bc <MX_TIM6_Init+0x64>)
 8005776:	2200      	movs	r2, #0
 8005778:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800577a:	4b10      	ldr	r3, [pc, #64]	; (80057bc <MX_TIM6_Init+0x64>)
 800577c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005780:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005782:	4b0e      	ldr	r3, [pc, #56]	; (80057bc <MX_TIM6_Init+0x64>)
 8005784:	2200      	movs	r2, #0
 8005786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005788:	480c      	ldr	r0, [pc, #48]	; (80057bc <MX_TIM6_Init+0x64>)
 800578a:	f007 f967 	bl	800ca5c <HAL_TIM_Base_Init>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005794:	f7fc f91b 	bl	80019ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005798:	2300      	movs	r3, #0
 800579a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800579c:	2300      	movs	r3, #0
 800579e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80057a0:	1d3b      	adds	r3, r7, #4
 80057a2:	4619      	mov	r1, r3
 80057a4:	4805      	ldr	r0, [pc, #20]	; (80057bc <MX_TIM6_Init+0x64>)
 80057a6:	f007 fd7b 	bl	800d2a0 <HAL_TIMEx_MasterConfigSynchronization>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80057b0:	f7fc f90d 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80057b4:	bf00      	nop
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	20001010 	.word	0x20001010
 80057c0:	40001000 	.word	0x40001000

080057c4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057ca:	1d3b      	adds	r3, r7, #4
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	605a      	str	r2, [r3, #4]
 80057d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80057d4:	4b15      	ldr	r3, [pc, #84]	; (800582c <MX_TIM7_Init+0x68>)
 80057d6:	4a16      	ldr	r2, [pc, #88]	; (8005830 <MX_TIM7_Init+0x6c>)
 80057d8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 20000-1;
 80057da:	4b14      	ldr	r3, [pc, #80]	; (800582c <MX_TIM7_Init+0x68>)
 80057dc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80057e0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057e2:	4b12      	ldr	r3, [pc, #72]	; (800582c <MX_TIM7_Init+0x68>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80057e8:	4b10      	ldr	r3, [pc, #64]	; (800582c <MX_TIM7_Init+0x68>)
 80057ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80057ee:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057f0:	4b0e      	ldr	r3, [pc, #56]	; (800582c <MX_TIM7_Init+0x68>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80057f6:	480d      	ldr	r0, [pc, #52]	; (800582c <MX_TIM7_Init+0x68>)
 80057f8:	f007 f930 	bl	800ca5c <HAL_TIM_Base_Init>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8005802:	f7fc f8e4 	bl	80019ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005806:	2300      	movs	r3, #0
 8005808:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800580e:	1d3b      	adds	r3, r7, #4
 8005810:	4619      	mov	r1, r3
 8005812:	4806      	ldr	r0, [pc, #24]	; (800582c <MX_TIM7_Init+0x68>)
 8005814:	f007 fd44 	bl	800d2a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800581e:	f7fc f8d6 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	2000105c 	.word	0x2000105c
 8005830:	40001400 	.word	0x40001400

08005834 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800583a:	f107 0310 	add.w	r3, r7, #16
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	605a      	str	r2, [r3, #4]
 8005844:	609a      	str	r2, [r3, #8]
 8005846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005848:	1d3b      	adds	r3, r7, #4
 800584a:	2200      	movs	r2, #0
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	605a      	str	r2, [r3, #4]
 8005850:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005852:	4b1f      	ldr	r3, [pc, #124]	; (80058d0 <MX_TIM15_Init+0x9c>)
 8005854:	4a1f      	ldr	r2, [pc, #124]	; (80058d4 <MX_TIM15_Init+0xa0>)
 8005856:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 39999;
 8005858:	4b1d      	ldr	r3, [pc, #116]	; (80058d0 <MX_TIM15_Init+0x9c>)
 800585a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800585e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005860:	4b1b      	ldr	r3, [pc, #108]	; (80058d0 <MX_TIM15_Init+0x9c>)
 8005862:	2200      	movs	r2, #0
 8005864:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8005866:	4b1a      	ldr	r3, [pc, #104]	; (80058d0 <MX_TIM15_Init+0x9c>)
 8005868:	f240 32e7 	movw	r2, #999	; 0x3e7
 800586c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800586e:	4b18      	ldr	r3, [pc, #96]	; (80058d0 <MX_TIM15_Init+0x9c>)
 8005870:	2200      	movs	r2, #0
 8005872:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005874:	4b16      	ldr	r3, [pc, #88]	; (80058d0 <MX_TIM15_Init+0x9c>)
 8005876:	2200      	movs	r2, #0
 8005878:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800587a:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <MX_TIM15_Init+0x9c>)
 800587c:	2200      	movs	r2, #0
 800587e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005880:	4813      	ldr	r0, [pc, #76]	; (80058d0 <MX_TIM15_Init+0x9c>)
 8005882:	f007 f8eb 	bl	800ca5c <HAL_TIM_Base_Init>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 800588c:	f7fc f89f 	bl	80019ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005894:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005896:	f107 0310 	add.w	r3, r7, #16
 800589a:	4619      	mov	r1, r3
 800589c:	480c      	ldr	r0, [pc, #48]	; (80058d0 <MX_TIM15_Init+0x9c>)
 800589e:	f007 fb06 	bl	800ceae <HAL_TIM_ConfigClockSource>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80058a8:	f7fc f891 	bl	80019ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058ac:	2300      	movs	r3, #0
 80058ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80058b4:	1d3b      	adds	r3, r7, #4
 80058b6:	4619      	mov	r1, r3
 80058b8:	4805      	ldr	r0, [pc, #20]	; (80058d0 <MX_TIM15_Init+0x9c>)
 80058ba:	f007 fcf1 	bl	800d2a0 <HAL_TIMEx_MasterConfigSynchronization>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80058c4:	f7fc f883 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80058c8:	bf00      	nop
 80058ca:	3720      	adds	r7, #32
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	200010a8 	.word	0x200010a8
 80058d4:	40014000 	.word	0x40014000

080058d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e8:	d10c      	bne.n	8005904 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80058ea:	4b2b      	ldr	r3, [pc, #172]	; (8005998 <HAL_TIM_Base_MspInit+0xc0>)
 80058ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ee:	4a2a      	ldr	r2, [pc, #168]	; (8005998 <HAL_TIM_Base_MspInit+0xc0>)
 80058f0:	f043 0301 	orr.w	r3, r3, #1
 80058f4:	6593      	str	r3, [r2, #88]	; 0x58
 80058f6:	4b28      	ldr	r3, [pc, #160]	; (8005998 <HAL_TIM_Base_MspInit+0xc0>)
 80058f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8005902:	e044      	b.n	800598e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM6)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a24      	ldr	r2, [pc, #144]	; (800599c <HAL_TIM_Base_MspInit+0xc4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d10c      	bne.n	8005928 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800590e:	4b22      	ldr	r3, [pc, #136]	; (8005998 <HAL_TIM_Base_MspInit+0xc0>)
 8005910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005912:	4a21      	ldr	r2, [pc, #132]	; (8005998 <HAL_TIM_Base_MspInit+0xc0>)
 8005914:	f043 0310 	orr.w	r3, r3, #16
 8005918:	6593      	str	r3, [r2, #88]	; 0x58
 800591a:	4b1f      	ldr	r3, [pc, #124]	; (8005998 <HAL_TIM_Base_MspInit+0xc0>)
 800591c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591e:	f003 0310 	and.w	r3, r3, #16
 8005922:	613b      	str	r3, [r7, #16]
 8005924:	693b      	ldr	r3, [r7, #16]
}
 8005926:	e032      	b.n	800598e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM7)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1c      	ldr	r2, [pc, #112]	; (80059a0 <HAL_TIM_Base_MspInit+0xc8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d114      	bne.n	800595c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005932:	4b19      	ldr	r3, [pc, #100]	; (8005998 <HAL_TIM_Base_MspInit+0xc0>)
 8005934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005936:	4a18      	ldr	r2, [pc, #96]	; (8005998 <HAL_TIM_Base_MspInit+0xc0>)
 8005938:	f043 0320 	orr.w	r3, r3, #32
 800593c:	6593      	str	r3, [r2, #88]	; 0x58
 800593e:	4b16      	ldr	r3, [pc, #88]	; (8005998 <HAL_TIM_Base_MspInit+0xc0>)
 8005940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800594a:	2200      	movs	r2, #0
 800594c:	2100      	movs	r1, #0
 800594e:	2037      	movs	r0, #55	; 0x37
 8005950:	f001 ff89 	bl	8007866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005954:	2037      	movs	r0, #55	; 0x37
 8005956:	f001 ffa2 	bl	800789e <HAL_NVIC_EnableIRQ>
}
 800595a:	e018      	b.n	800598e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM15)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a10      	ldr	r2, [pc, #64]	; (80059a4 <HAL_TIM_Base_MspInit+0xcc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d113      	bne.n	800598e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005966:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <HAL_TIM_Base_MspInit+0xc0>)
 8005968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800596a:	4a0b      	ldr	r2, [pc, #44]	; (8005998 <HAL_TIM_Base_MspInit+0xc0>)
 800596c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005970:	6613      	str	r3, [r2, #96]	; 0x60
 8005972:	4b09      	ldr	r3, [pc, #36]	; (8005998 <HAL_TIM_Base_MspInit+0xc0>)
 8005974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800597a:	60bb      	str	r3, [r7, #8]
 800597c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800597e:	2200      	movs	r2, #0
 8005980:	2100      	movs	r1, #0
 8005982:	2018      	movs	r0, #24
 8005984:	f001 ff6f 	bl	8007866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005988:	2018      	movs	r0, #24
 800598a:	f001 ff88 	bl	800789e <HAL_NVIC_EnableIRQ>
}
 800598e:	bf00      	nop
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	40021000 	.word	0x40021000
 800599c:	40001000 	.word	0x40001000
 80059a0:	40001400 	.word	0x40001400
 80059a4:	40014000 	.word	0x40014000

080059a8 <updatedate>:
  /* USER CODE END TIM15_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0

	SEC+=1;
 80059ac:	4b98      	ldr	r3, [pc, #608]	; (8005c10 <updatedate+0x268>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	3301      	adds	r3, #1
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	4b96      	ldr	r3, [pc, #600]	; (8005c10 <updatedate+0x268>)
 80059b6:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 80059b8:	4b95      	ldr	r3, [pc, #596]	; (8005c10 <updatedate+0x268>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b3b      	cmp	r3, #59	; 0x3b
 80059be:	d908      	bls.n	80059d2 <updatedate+0x2a>
		SEC=0;
 80059c0:	4b93      	ldr	r3, [pc, #588]	; (8005c10 <updatedate+0x268>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 80059c6:	4b93      	ldr	r3, [pc, #588]	; (8005c14 <updatedate+0x26c>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	3301      	adds	r3, #1
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	4b91      	ldr	r3, [pc, #580]	; (8005c14 <updatedate+0x26c>)
 80059d0:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 80059d2:	4b90      	ldr	r3, [pc, #576]	; (8005c14 <updatedate+0x26c>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b3b      	cmp	r3, #59	; 0x3b
 80059d8:	d908      	bls.n	80059ec <updatedate+0x44>

		MINUTE=0;
 80059da:	4b8e      	ldr	r3, [pc, #568]	; (8005c14 <updatedate+0x26c>)
 80059dc:	2200      	movs	r2, #0
 80059de:	701a      	strb	r2, [r3, #0]
		HR+=1;
 80059e0:	4b8d      	ldr	r3, [pc, #564]	; (8005c18 <updatedate+0x270>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	3301      	adds	r3, #1
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	4b8b      	ldr	r3, [pc, #556]	; (8005c18 <updatedate+0x270>)
 80059ea:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 80059ec:	4b8a      	ldr	r3, [pc, #552]	; (8005c18 <updatedate+0x270>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b17      	cmp	r3, #23
 80059f2:	d908      	bls.n	8005a06 <updatedate+0x5e>
		HR=0;
 80059f4:	4b88      	ldr	r3, [pc, #544]	; (8005c18 <updatedate+0x270>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 80059fa:	4b88      	ldr	r3, [pc, #544]	; (8005c1c <updatedate+0x274>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	3301      	adds	r3, #1
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	4b86      	ldr	r3, [pc, #536]	; (8005c1c <updatedate+0x274>)
 8005a04:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 8005a06:	4b86      	ldr	r3, [pc, #536]	; (8005c20 <updatedate+0x278>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b0b      	cmp	r3, #11
 8005a0c:	f200 8137 	bhi.w	8005c7e <updatedate+0x2d6>
 8005a10:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <updatedate+0x70>)
 8005a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a16:	bf00      	nop
 8005a18:	08005a49 	.word	0x08005a49
 8005a1c:	08005a73 	.word	0x08005a73
 8005a20:	08005a9d 	.word	0x08005a9d
 8005a24:	08005ac7 	.word	0x08005ac7
 8005a28:	08005af1 	.word	0x08005af1
 8005a2c:	08005b1b 	.word	0x08005b1b
 8005a30:	08005b45 	.word	0x08005b45
 8005a34:	08005b6f 	.word	0x08005b6f
 8005a38:	08005b97 	.word	0x08005b97
 8005a3c:	08005bbf 	.word	0x08005bbf
 8005a40:	08005be7 	.word	0x08005be7
 8005a44:	08005c29 	.word	0x08005c29

	case JANVIER:
		if(JOURS>31){
 8005a48:	4b74      	ldr	r3, [pc, #464]	; (8005c1c <updatedate+0x274>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b1f      	cmp	r3, #31
 8005a4e:	f240 80ff 	bls.w	8005c50 <updatedate+0x2a8>
			JOURS=1;
 8005a52:	4b72      	ldr	r3, [pc, #456]	; (8005c1c <updatedate+0x274>)
 8005a54:	2201      	movs	r2, #1
 8005a56:	701a      	strb	r2, [r3, #0]
			mois++;
 8005a58:	4b71      	ldr	r3, [pc, #452]	; (8005c20 <updatedate+0x278>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	4b6f      	ldr	r3, [pc, #444]	; (8005c20 <updatedate+0x278>)
 8005a62:	701a      	strb	r2, [r3, #0]
			MOIS++;
 8005a64:	4b6f      	ldr	r3, [pc, #444]	; (8005c24 <updatedate+0x27c>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	4b6d      	ldr	r3, [pc, #436]	; (8005c24 <updatedate+0x27c>)
 8005a6e:	701a      	strb	r2, [r3, #0]
		}

		break;
 8005a70:	e0ee      	b.n	8005c50 <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 8005a72:	4b6a      	ldr	r3, [pc, #424]	; (8005c1c <updatedate+0x274>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b1d      	cmp	r3, #29
 8005a78:	f240 80ec 	bls.w	8005c54 <updatedate+0x2ac>
					JOURS=1;
 8005a7c:	4b67      	ldr	r3, [pc, #412]	; (8005c1c <updatedate+0x274>)
 8005a7e:	2201      	movs	r2, #1
 8005a80:	701a      	strb	r2, [r3, #0]
					mois++;
 8005a82:	4b67      	ldr	r3, [pc, #412]	; (8005c20 <updatedate+0x278>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	3301      	adds	r3, #1
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	4b65      	ldr	r3, [pc, #404]	; (8005c20 <updatedate+0x278>)
 8005a8c:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005a8e:	4b65      	ldr	r3, [pc, #404]	; (8005c24 <updatedate+0x27c>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	3301      	adds	r3, #1
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	4b63      	ldr	r3, [pc, #396]	; (8005c24 <updatedate+0x27c>)
 8005a98:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005a9a:	e0db      	b.n	8005c54 <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 8005a9c:	4b5f      	ldr	r3, [pc, #380]	; (8005c1c <updatedate+0x274>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b1f      	cmp	r3, #31
 8005aa2:	f240 80d9 	bls.w	8005c58 <updatedate+0x2b0>
					JOURS=1;
 8005aa6:	4b5d      	ldr	r3, [pc, #372]	; (8005c1c <updatedate+0x274>)
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	701a      	strb	r2, [r3, #0]
					mois++;
 8005aac:	4b5c      	ldr	r3, [pc, #368]	; (8005c20 <updatedate+0x278>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	4b5a      	ldr	r3, [pc, #360]	; (8005c20 <updatedate+0x278>)
 8005ab6:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005ab8:	4b5a      	ldr	r3, [pc, #360]	; (8005c24 <updatedate+0x27c>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	3301      	adds	r3, #1
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	4b58      	ldr	r3, [pc, #352]	; (8005c24 <updatedate+0x27c>)
 8005ac2:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005ac4:	e0c8      	b.n	8005c58 <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 8005ac6:	4b55      	ldr	r3, [pc, #340]	; (8005c1c <updatedate+0x274>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b1e      	cmp	r3, #30
 8005acc:	f240 80c6 	bls.w	8005c5c <updatedate+0x2b4>
					JOURS=1;
 8005ad0:	4b52      	ldr	r3, [pc, #328]	; (8005c1c <updatedate+0x274>)
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	701a      	strb	r2, [r3, #0]
					mois++;
 8005ad6:	4b52      	ldr	r3, [pc, #328]	; (8005c20 <updatedate+0x278>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	3301      	adds	r3, #1
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	4b50      	ldr	r3, [pc, #320]	; (8005c20 <updatedate+0x278>)
 8005ae0:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005ae2:	4b50      	ldr	r3, [pc, #320]	; (8005c24 <updatedate+0x27c>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	4b4e      	ldr	r3, [pc, #312]	; (8005c24 <updatedate+0x27c>)
 8005aec:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005aee:	e0b5      	b.n	8005c5c <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 8005af0:	4b4a      	ldr	r3, [pc, #296]	; (8005c1c <updatedate+0x274>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	2b1f      	cmp	r3, #31
 8005af6:	f240 80b3 	bls.w	8005c60 <updatedate+0x2b8>
					JOURS=1;
 8005afa:	4b48      	ldr	r3, [pc, #288]	; (8005c1c <updatedate+0x274>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	701a      	strb	r2, [r3, #0]
					mois++;
 8005b00:	4b47      	ldr	r3, [pc, #284]	; (8005c20 <updatedate+0x278>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	3301      	adds	r3, #1
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	4b45      	ldr	r3, [pc, #276]	; (8005c20 <updatedate+0x278>)
 8005b0a:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005b0c:	4b45      	ldr	r3, [pc, #276]	; (8005c24 <updatedate+0x27c>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	3301      	adds	r3, #1
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	4b43      	ldr	r3, [pc, #268]	; (8005c24 <updatedate+0x27c>)
 8005b16:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005b18:	e0a2      	b.n	8005c60 <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 8005b1a:	4b40      	ldr	r3, [pc, #256]	; (8005c1c <updatedate+0x274>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b1e      	cmp	r3, #30
 8005b20:	f240 80a0 	bls.w	8005c64 <updatedate+0x2bc>
					JOURS=1;
 8005b24:	4b3d      	ldr	r3, [pc, #244]	; (8005c1c <updatedate+0x274>)
 8005b26:	2201      	movs	r2, #1
 8005b28:	701a      	strb	r2, [r3, #0]
					mois++;
 8005b2a:	4b3d      	ldr	r3, [pc, #244]	; (8005c20 <updatedate+0x278>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	4b3b      	ldr	r3, [pc, #236]	; (8005c20 <updatedate+0x278>)
 8005b34:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005b36:	4b3b      	ldr	r3, [pc, #236]	; (8005c24 <updatedate+0x27c>)
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	4b39      	ldr	r3, [pc, #228]	; (8005c24 <updatedate+0x27c>)
 8005b40:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005b42:	e08f      	b.n	8005c64 <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 8005b44:	4b35      	ldr	r3, [pc, #212]	; (8005c1c <updatedate+0x274>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b1f      	cmp	r3, #31
 8005b4a:	f240 808d 	bls.w	8005c68 <updatedate+0x2c0>
					JOURS=1;
 8005b4e:	4b33      	ldr	r3, [pc, #204]	; (8005c1c <updatedate+0x274>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	701a      	strb	r2, [r3, #0]
					mois++;
 8005b54:	4b32      	ldr	r3, [pc, #200]	; (8005c20 <updatedate+0x278>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	4b30      	ldr	r3, [pc, #192]	; (8005c20 <updatedate+0x278>)
 8005b5e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005b60:	4b30      	ldr	r3, [pc, #192]	; (8005c24 <updatedate+0x27c>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	3301      	adds	r3, #1
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	4b2e      	ldr	r3, [pc, #184]	; (8005c24 <updatedate+0x27c>)
 8005b6a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005b6c:	e07c      	b.n	8005c68 <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 8005b6e:	4b2b      	ldr	r3, [pc, #172]	; (8005c1c <updatedate+0x274>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b1f      	cmp	r3, #31
 8005b74:	d97a      	bls.n	8005c6c <updatedate+0x2c4>
					JOURS=1;
 8005b76:	4b29      	ldr	r3, [pc, #164]	; (8005c1c <updatedate+0x274>)
 8005b78:	2201      	movs	r2, #1
 8005b7a:	701a      	strb	r2, [r3, #0]
					mois++;
 8005b7c:	4b28      	ldr	r3, [pc, #160]	; (8005c20 <updatedate+0x278>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	3301      	adds	r3, #1
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	4b26      	ldr	r3, [pc, #152]	; (8005c20 <updatedate+0x278>)
 8005b86:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005b88:	4b26      	ldr	r3, [pc, #152]	; (8005c24 <updatedate+0x27c>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	4b24      	ldr	r3, [pc, #144]	; (8005c24 <updatedate+0x27c>)
 8005b92:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005b94:	e06a      	b.n	8005c6c <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 8005b96:	4b21      	ldr	r3, [pc, #132]	; (8005c1c <updatedate+0x274>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	2b1e      	cmp	r3, #30
 8005b9c:	d968      	bls.n	8005c70 <updatedate+0x2c8>
					JOURS=1;
 8005b9e:	4b1f      	ldr	r3, [pc, #124]	; (8005c1c <updatedate+0x274>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	701a      	strb	r2, [r3, #0]
					mois++;
 8005ba4:	4b1e      	ldr	r3, [pc, #120]	; (8005c20 <updatedate+0x278>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	4b1c      	ldr	r3, [pc, #112]	; (8005c20 <updatedate+0x278>)
 8005bae:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005bb0:	4b1c      	ldr	r3, [pc, #112]	; (8005c24 <updatedate+0x27c>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	4b1a      	ldr	r3, [pc, #104]	; (8005c24 <updatedate+0x27c>)
 8005bba:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005bbc:	e058      	b.n	8005c70 <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 8005bbe:	4b17      	ldr	r3, [pc, #92]	; (8005c1c <updatedate+0x274>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b1f      	cmp	r3, #31
 8005bc4:	d956      	bls.n	8005c74 <updatedate+0x2cc>
					JOURS=1;
 8005bc6:	4b15      	ldr	r3, [pc, #84]	; (8005c1c <updatedate+0x274>)
 8005bc8:	2201      	movs	r2, #1
 8005bca:	701a      	strb	r2, [r3, #0]
					mois++;
 8005bcc:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <updatedate+0x278>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	4b12      	ldr	r3, [pc, #72]	; (8005c20 <updatedate+0x278>)
 8005bd6:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005bd8:	4b12      	ldr	r3, [pc, #72]	; (8005c24 <updatedate+0x27c>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	4b10      	ldr	r3, [pc, #64]	; (8005c24 <updatedate+0x27c>)
 8005be2:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005be4:	e046      	b.n	8005c74 <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 8005be6:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <updatedate+0x274>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b1e      	cmp	r3, #30
 8005bec:	d944      	bls.n	8005c78 <updatedate+0x2d0>
					JOURS=1;
 8005bee:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <updatedate+0x274>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	701a      	strb	r2, [r3, #0]
					mois++;
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <updatedate+0x278>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	4b08      	ldr	r3, [pc, #32]	; (8005c20 <updatedate+0x278>)
 8005bfe:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005c00:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <updatedate+0x27c>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	3301      	adds	r3, #1
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <updatedate+0x27c>)
 8005c0a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005c0c:	e034      	b.n	8005c78 <updatedate+0x2d0>
 8005c0e:	bf00      	nop
 8005c10:	20000a48 	.word	0x20000a48
 8005c14:	20000a4a 	.word	0x20000a4a
 8005c18:	20000a49 	.word	0x20000a49
 8005c1c:	20000008 	.word	0x20000008
 8005c20:	20000a4b 	.word	0x20000a4b
 8005c24:	20000009 	.word	0x20000009
	case DECEMBRE:
		if(JOURS>31){
 8005c28:	4b1f      	ldr	r3, [pc, #124]	; (8005ca8 <updatedate+0x300>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b1f      	cmp	r3, #31
 8005c2e:	d925      	bls.n	8005c7c <updatedate+0x2d4>
					JOURS=1;
 8005c30:	4b1d      	ldr	r3, [pc, #116]	; (8005ca8 <updatedate+0x300>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	701a      	strb	r2, [r3, #0]
					mois++;
 8005c36:	4b1d      	ldr	r3, [pc, #116]	; (8005cac <updatedate+0x304>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	4b1b      	ldr	r3, [pc, #108]	; (8005cac <updatedate+0x304>)
 8005c40:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005c42:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <updatedate+0x308>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	3301      	adds	r3, #1
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	4b19      	ldr	r3, [pc, #100]	; (8005cb0 <updatedate+0x308>)
 8005c4c:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005c4e:	e015      	b.n	8005c7c <updatedate+0x2d4>
		break;
 8005c50:	bf00      	nop
 8005c52:	e014      	b.n	8005c7e <updatedate+0x2d6>
		break;
 8005c54:	bf00      	nop
 8005c56:	e012      	b.n	8005c7e <updatedate+0x2d6>
		break;
 8005c58:	bf00      	nop
 8005c5a:	e010      	b.n	8005c7e <updatedate+0x2d6>
		break;
 8005c5c:	bf00      	nop
 8005c5e:	e00e      	b.n	8005c7e <updatedate+0x2d6>
		break;
 8005c60:	bf00      	nop
 8005c62:	e00c      	b.n	8005c7e <updatedate+0x2d6>
		break;
 8005c64:	bf00      	nop
 8005c66:	e00a      	b.n	8005c7e <updatedate+0x2d6>
		break;
 8005c68:	bf00      	nop
 8005c6a:	e008      	b.n	8005c7e <updatedate+0x2d6>
		break;
 8005c6c:	bf00      	nop
 8005c6e:	e006      	b.n	8005c7e <updatedate+0x2d6>
		break;
 8005c70:	bf00      	nop
 8005c72:	e004      	b.n	8005c7e <updatedate+0x2d6>
		break;
 8005c74:	bf00      	nop
 8005c76:	e002      	b.n	8005c7e <updatedate+0x2d6>
		break;
 8005c78:	bf00      	nop
 8005c7a:	e000      	b.n	8005c7e <updatedate+0x2d6>
		break;
 8005c7c:	bf00      	nop

	}

	if(MOIS>12){
 8005c7e:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <updatedate+0x308>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b0c      	cmp	r3, #12
 8005c84:	d90b      	bls.n	8005c9e <updatedate+0x2f6>
		mois=JANVIER;
 8005c86:	4b09      	ldr	r3, [pc, #36]	; (8005cac <updatedate+0x304>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 8005c8c:	4b08      	ldr	r3, [pc, #32]	; (8005cb0 <updatedate+0x308>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 8005c92:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <updatedate+0x30c>)
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	3301      	adds	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	4b06      	ldr	r3, [pc, #24]	; (8005cb4 <updatedate+0x30c>)
 8005c9c:	801a      	strh	r2, [r3, #0]
	}
}
 8005c9e:	bf00      	nop
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	20000008 	.word	0x20000008
 8005cac:	20000a4b 	.word	0x20000a4b
 8005cb0:	20000009 	.word	0x20000009
 8005cb4:	2000000a 	.word	0x2000000a

08005cb8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005cbc:	4b12      	ldr	r3, [pc, #72]	; (8005d08 <MX_LPUART1_UART_Init+0x50>)
 8005cbe:	4a13      	ldr	r2, [pc, #76]	; (8005d0c <MX_LPUART1_UART_Init+0x54>)
 8005cc0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8005cc2:	4b11      	ldr	r3, [pc, #68]	; (8005d08 <MX_LPUART1_UART_Init+0x50>)
 8005cc4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005cc8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005cca:	4b0f      	ldr	r3, [pc, #60]	; (8005d08 <MX_LPUART1_UART_Init+0x50>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005cd0:	4b0d      	ldr	r3, [pc, #52]	; (8005d08 <MX_LPUART1_UART_Init+0x50>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005cd6:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <MX_LPUART1_UART_Init+0x50>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <MX_LPUART1_UART_Init+0x50>)
 8005cde:	220c      	movs	r2, #12
 8005ce0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ce2:	4b09      	ldr	r3, [pc, #36]	; (8005d08 <MX_LPUART1_UART_Init+0x50>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ce8:	4b07      	ldr	r3, [pc, #28]	; (8005d08 <MX_LPUART1_UART_Init+0x50>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005cee:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <MX_LPUART1_UART_Init+0x50>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005cf4:	4804      	ldr	r0, [pc, #16]	; (8005d08 <MX_LPUART1_UART_Init+0x50>)
 8005cf6:	f007 fb57 	bl	800d3a8 <HAL_UART_Init>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8005d00:	f7fb fe65 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005d04:	bf00      	nop
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	200010f4 	.word	0x200010f4
 8005d0c:	40008000 	.word	0x40008000

08005d10 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005d14:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <MX_USART1_UART_Init+0x58>)
 8005d16:	4a15      	ldr	r2, [pc, #84]	; (8005d6c <MX_USART1_UART_Init+0x5c>)
 8005d18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005d1a:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <MX_USART1_UART_Init+0x58>)
 8005d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d22:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <MX_USART1_UART_Init+0x58>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005d28:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <MX_USART1_UART_Init+0x58>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005d2e:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <MX_USART1_UART_Init+0x58>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005d34:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <MX_USART1_UART_Init+0x58>)
 8005d36:	220c      	movs	r2, #12
 8005d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d3a:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <MX_USART1_UART_Init+0x58>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d40:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <MX_USART1_UART_Init+0x58>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d46:	4b08      	ldr	r3, [pc, #32]	; (8005d68 <MX_USART1_UART_Init+0x58>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d4c:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <MX_USART1_UART_Init+0x58>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d52:	4805      	ldr	r0, [pc, #20]	; (8005d68 <MX_USART1_UART_Init+0x58>)
 8005d54:	f007 fb28 	bl	800d3a8 <HAL_UART_Init>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005d5e:	f7fb fe36 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005d62:	bf00      	nop
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	2000117c 	.word	0x2000117c
 8005d6c:	40013800 	.word	0x40013800

08005d70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b0a0      	sub	sp, #128	; 0x80
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	609a      	str	r2, [r3, #8]
 8005d84:	60da      	str	r2, [r3, #12]
 8005d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005d88:	f107 0318 	add.w	r3, r7, #24
 8005d8c:	2254      	movs	r2, #84	; 0x54
 8005d8e:	2100      	movs	r1, #0
 8005d90:	4618      	mov	r0, r3
 8005d92:	f010 fb8e 	bl	80164b2 <memset>
  if(uartHandle->Instance==LPUART1)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a55      	ldr	r2, [pc, #340]	; (8005ef0 <HAL_UART_MspInit+0x180>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d168      	bne.n	8005e72 <HAL_UART_MspInit+0x102>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005da0:	2320      	movs	r3, #32
 8005da2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8005da4:	2300      	movs	r3, #0
 8005da6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005da8:	f107 0318 	add.w	r3, r7, #24
 8005dac:	4618      	mov	r0, r3
 8005dae:	f005 faa3 	bl	800b2f8 <HAL_RCCEx_PeriphCLKConfig>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005db8:	f7fb fe09 	bl	80019ce <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005dbc:	4b4d      	ldr	r3, [pc, #308]	; (8005ef4 <HAL_UART_MspInit+0x184>)
 8005dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc0:	4a4c      	ldr	r2, [pc, #304]	; (8005ef4 <HAL_UART_MspInit+0x184>)
 8005dc2:	f043 0301 	orr.w	r3, r3, #1
 8005dc6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8005dc8:	4b4a      	ldr	r3, [pc, #296]	; (8005ef4 <HAL_UART_MspInit+0x184>)
 8005dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dd4:	4b47      	ldr	r3, [pc, #284]	; (8005ef4 <HAL_UART_MspInit+0x184>)
 8005dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd8:	4a46      	ldr	r2, [pc, #280]	; (8005ef4 <HAL_UART_MspInit+0x184>)
 8005dda:	f043 0301 	orr.w	r3, r3, #1
 8005dde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005de0:	4b44      	ldr	r3, [pc, #272]	; (8005ef4 <HAL_UART_MspInit+0x184>)
 8005de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005dec:	230c      	movs	r3, #12
 8005dee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005df0:	2302      	movs	r3, #2
 8005df2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df4:	2300      	movs	r3, #0
 8005df6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005dfc:	2308      	movs	r3, #8
 8005dfe:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e04:	4619      	mov	r1, r3
 8005e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e0a:	f001 ffe5 	bl	8007dd8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 8005e0e:	4b3a      	ldr	r3, [pc, #232]	; (8005ef8 <HAL_UART_MspInit+0x188>)
 8005e10:	4a3a      	ldr	r2, [pc, #232]	; (8005efc <HAL_UART_MspInit+0x18c>)
 8005e12:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 8005e14:	4b38      	ldr	r3, [pc, #224]	; (8005ef8 <HAL_UART_MspInit+0x188>)
 8005e16:	2204      	movs	r2, #4
 8005e18:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e1a:	4b37      	ldr	r3, [pc, #220]	; (8005ef8 <HAL_UART_MspInit+0x188>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e20:	4b35      	ldr	r3, [pc, #212]	; (8005ef8 <HAL_UART_MspInit+0x188>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e26:	4b34      	ldr	r3, [pc, #208]	; (8005ef8 <HAL_UART_MspInit+0x188>)
 8005e28:	2280      	movs	r2, #128	; 0x80
 8005e2a:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e2c:	4b32      	ldr	r3, [pc, #200]	; (8005ef8 <HAL_UART_MspInit+0x188>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e32:	4b31      	ldr	r3, [pc, #196]	; (8005ef8 <HAL_UART_MspInit+0x188>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_NORMAL;
 8005e38:	4b2f      	ldr	r3, [pc, #188]	; (8005ef8 <HAL_UART_MspInit+0x188>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e3e:	4b2e      	ldr	r3, [pc, #184]	; (8005ef8 <HAL_UART_MspInit+0x188>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 8005e44:	482c      	ldr	r0, [pc, #176]	; (8005ef8 <HAL_UART_MspInit+0x188>)
 8005e46:	f001 fd45 	bl	80078d4 <HAL_DMA_Init>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8005e50:	f7fb fdbd 	bl	80019ce <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart_rx);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a28      	ldr	r2, [pc, #160]	; (8005ef8 <HAL_UART_MspInit+0x188>)
 8005e58:	675a      	str	r2, [r3, #116]	; 0x74
 8005e5a:	4a27      	ldr	r2, [pc, #156]	; (8005ef8 <HAL_UART_MspInit+0x188>)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8005e60:	2200      	movs	r2, #0
 8005e62:	2100      	movs	r1, #0
 8005e64:	2046      	movs	r0, #70	; 0x46
 8005e66:	f001 fcfe 	bl	8007866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005e6a:	2046      	movs	r0, #70	; 0x46
 8005e6c:	f001 fd17 	bl	800789e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005e70:	e03a      	b.n	8005ee8 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART1)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a22      	ldr	r2, [pc, #136]	; (8005f00 <HAL_UART_MspInit+0x190>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d135      	bne.n	8005ee8 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005e80:	2300      	movs	r3, #0
 8005e82:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e84:	f107 0318 	add.w	r3, r7, #24
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f005 fa35 	bl	800b2f8 <HAL_RCCEx_PeriphCLKConfig>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8005e94:	f7fb fd9b 	bl	80019ce <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e98:	4b16      	ldr	r3, [pc, #88]	; (8005ef4 <HAL_UART_MspInit+0x184>)
 8005e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e9c:	4a15      	ldr	r2, [pc, #84]	; (8005ef4 <HAL_UART_MspInit+0x184>)
 8005e9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ea2:	6613      	str	r3, [r2, #96]	; 0x60
 8005ea4:	4b13      	ldr	r3, [pc, #76]	; (8005ef4 <HAL_UART_MspInit+0x184>)
 8005ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eb0:	4b10      	ldr	r3, [pc, #64]	; (8005ef4 <HAL_UART_MspInit+0x184>)
 8005eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb4:	4a0f      	ldr	r2, [pc, #60]	; (8005ef4 <HAL_UART_MspInit+0x184>)
 8005eb6:	f043 0302 	orr.w	r3, r3, #2
 8005eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ebc:	4b0d      	ldr	r3, [pc, #52]	; (8005ef4 <HAL_UART_MspInit+0x184>)
 8005ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	60bb      	str	r3, [r7, #8]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005ec8:	23c0      	movs	r3, #192	; 0xc0
 8005eca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ecc:	2302      	movs	r3, #2
 8005ece:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005ed8:	2307      	movs	r3, #7
 8005eda:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005edc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4808      	ldr	r0, [pc, #32]	; (8005f04 <HAL_UART_MspInit+0x194>)
 8005ee4:	f001 ff78 	bl	8007dd8 <HAL_GPIO_Init>
}
 8005ee8:	bf00      	nop
 8005eea:	3780      	adds	r7, #128	; 0x80
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40008000 	.word	0x40008000
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	20001204 	.word	0x20001204
 8005efc:	40020480 	.word	0x40020480
 8005f00:	40013800 	.word	0x40013800
 8005f04:	48000400 	.word	0x48000400

08005f08 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8005f10:	4b30      	ldr	r3, [pc, #192]	; (8005fd4 <HAL_UART_RxCpltCallback+0xcc>)
 8005f12:	881a      	ldrh	r2, [r3, #0]
 8005f14:	4b30      	ldr	r3, [pc, #192]	; (8005fd8 <HAL_UART_RxCpltCallback+0xd0>)
 8005f16:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8005f18:	4b2f      	ldr	r3, [pc, #188]	; (8005fd8 <HAL_UART_RxCpltCallback+0xd0>)
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8005f20:	d922      	bls.n	8005f68 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 8005f22:	4b2d      	ldr	r3, [pc, #180]	; (8005fd8 <HAL_UART_RxCpltCallback+0xd0>)
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005f2a:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8005f2c:	4b2a      	ldr	r3, [pc, #168]	; (8005fd8 <HAL_UART_RxCpltCallback+0xd0>)
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	461a      	mov	r2, r3
 8005f32:	4b2a      	ldr	r3, [pc, #168]	; (8005fdc <HAL_UART_RxCpltCallback+0xd4>)
 8005f34:	4413      	add	r3, r2
 8005f36:	89fa      	ldrh	r2, [r7, #14]
 8005f38:	4929      	ldr	r1, [pc, #164]	; (8005fe0 <HAL_UART_RxCpltCallback+0xd8>)
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f010 fbd5 	bl	80166ea <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8005f40:	4b25      	ldr	r3, [pc, #148]	; (8005fd8 <HAL_UART_RxCpltCallback+0xd0>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8005f46:	89fb      	ldrh	r3, [r7, #14]
 8005f48:	4a25      	ldr	r2, [pc, #148]	; (8005fe0 <HAL_UART_RxCpltCallback+0xd8>)
 8005f4a:	1899      	adds	r1, r3, r2
 8005f4c:	89fb      	ldrh	r3, [r7, #14]
 8005f4e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005f52:	461a      	mov	r2, r3
 8005f54:	4821      	ldr	r0, [pc, #132]	; (8005fdc <HAL_UART_RxCpltCallback+0xd4>)
 8005f56:	f010 fbc8 	bl	80166ea <memcpy>
				newPos = (64-datatocopy);  // update the position
 8005f5a:	89fb      	ldrh	r3, [r7, #14]
 8005f5c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	4b1c      	ldr	r3, [pc, #112]	; (8005fd4 <HAL_UART_RxCpltCallback+0xcc>)
 8005f64:	801a      	strh	r2, [r3, #0]
 8005f66:	e01e      	b.n	8005fa6 <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8005f68:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <HAL_UART_RxCpltCallback+0xd0>)
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <HAL_UART_RxCpltCallback+0xd4>)
 8005f70:	441a      	add	r2, r3
 8005f72:	4b1b      	ldr	r3, [pc, #108]	; (8005fe0 <HAL_UART_RxCpltCallback+0xd8>)
 8005f74:	4610      	mov	r0, r2
 8005f76:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	f8d1 c000 	ldr.w	ip, [r1]
 8005f82:	684e      	ldr	r6, [r1, #4]
 8005f84:	688d      	ldr	r5, [r1, #8]
 8005f86:	68c9      	ldr	r1, [r1, #12]
 8005f88:	f8c2 c000 	str.w	ip, [r2]
 8005f8c:	6056      	str	r6, [r2, #4]
 8005f8e:	6095      	str	r5, [r2, #8]
 8005f90:	60d1      	str	r1, [r2, #12]
 8005f92:	3310      	adds	r3, #16
 8005f94:	3010      	adds	r0, #16
 8005f96:	42a3      	cmp	r3, r4
 8005f98:	d1ef      	bne.n	8005f7a <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 8005f9a:	4b0f      	ldr	r3, [pc, #60]	; (8005fd8 <HAL_UART_RxCpltCallback+0xd0>)
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	3340      	adds	r3, #64	; 0x40
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	4b0c      	ldr	r3, [pc, #48]	; (8005fd4 <HAL_UART_RxCpltCallback+0xcc>)
 8005fa4:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 8005fa6:	2240      	movs	r2, #64	; 0x40
 8005fa8:	490d      	ldr	r1, [pc, #52]	; (8005fe0 <HAL_UART_RxCpltCallback+0xd8>)
 8005faa:	480e      	ldr	r0, [pc, #56]	; (8005fe4 <HAL_UART_RxCpltCallback+0xdc>)
 8005fac:	f007 fa4a 	bl	800d444 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8005fb0:	4b0d      	ldr	r3, [pc, #52]	; (8005fe8 <HAL_UART_RxCpltCallback+0xe0>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <HAL_UART_RxCpltCallback+0xe0>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0204 	bic.w	r2, r2, #4
 8005fbe:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 8005fc0:	2240      	movs	r2, #64	; 0x40
 8005fc2:	4907      	ldr	r1, [pc, #28]	; (8005fe0 <HAL_UART_RxCpltCallback+0xd8>)
 8005fc4:	4807      	ldr	r0, [pc, #28]	; (8005fe4 <HAL_UART_RxCpltCallback+0xdc>)
 8005fc6:	f007 fa3d 	bl	800d444 <HAL_UART_Receive_DMA>
}
 8005fca:	bf00      	nop
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000482 	.word	0x20000482
 8005fd8:	20000480 	.word	0x20000480
 8005fdc:	200004c4 	.word	0x200004c4
 8005fe0:	20000484 	.word	0x20000484
 8005fe4:	200010f4 	.word	0x200010f4
 8005fe8:	20001204 	.word	0x20001204

08005fec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006024 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005ff0:	f7ff fb52 	bl	8005698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ff4:	480c      	ldr	r0, [pc, #48]	; (8006028 <LoopForever+0x6>)
  ldr r1, =_edata
 8005ff6:	490d      	ldr	r1, [pc, #52]	; (800602c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005ff8:	4a0d      	ldr	r2, [pc, #52]	; (8006030 <LoopForever+0xe>)
  movs r3, #0
 8005ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ffc:	e002      	b.n	8006004 <LoopCopyDataInit>

08005ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006002:	3304      	adds	r3, #4

08006004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006008:	d3f9      	bcc.n	8005ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800600a:	4a0a      	ldr	r2, [pc, #40]	; (8006034 <LoopForever+0x12>)
  ldr r4, =_ebss
 800600c:	4c0a      	ldr	r4, [pc, #40]	; (8006038 <LoopForever+0x16>)
  movs r3, #0
 800600e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006010:	e001      	b.n	8006016 <LoopFillZerobss>

08006012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006014:	3204      	adds	r2, #4

08006016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006018:	d3fb      	bcc.n	8006012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800601a:	f010 fb37 	bl	801668c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800601e:	f7fb fbcb 	bl	80017b8 <main>

08006022 <LoopForever>:

LoopForever:
    b LoopForever
 8006022:	e7fe      	b.n	8006022 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006024:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8006028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800602c:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8006030:	0801d020 	.word	0x0801d020
  ldr r2, =_sbss
 8006034:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8006038:	20002594 	.word	0x20002594

0800603c <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800603c:	e7fe      	b.n	800603c <CAN1_RX0_IRQHandler>

0800603e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006048:	2003      	movs	r0, #3
 800604a:	f001 fc01 	bl	8007850 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800604e:	200f      	movs	r0, #15
 8006050:	f000 f80e 	bl	8006070 <HAL_InitTick>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	71fb      	strb	r3, [r7, #7]
 800605e:	e001      	b.n	8006064 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006060:	f7ff f984 	bl	800536c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006064:	79fb      	ldrb	r3, [r7, #7]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800607c:	4b17      	ldr	r3, [pc, #92]	; (80060dc <HAL_InitTick+0x6c>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d023      	beq.n	80060cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006084:	4b16      	ldr	r3, [pc, #88]	; (80060e0 <HAL_InitTick+0x70>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	4b14      	ldr	r3, [pc, #80]	; (80060dc <HAL_InitTick+0x6c>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	4619      	mov	r1, r3
 800608e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006092:	fbb3 f3f1 	udiv	r3, r3, r1
 8006096:	fbb2 f3f3 	udiv	r3, r2, r3
 800609a:	4618      	mov	r0, r3
 800609c:	f001 fc0d 	bl	80078ba <HAL_SYSTICK_Config>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10f      	bne.n	80060c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b0f      	cmp	r3, #15
 80060aa:	d809      	bhi.n	80060c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80060ac:	2200      	movs	r2, #0
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	f04f 30ff 	mov.w	r0, #4294967295
 80060b4:	f001 fbd7 	bl	8007866 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80060b8:	4a0a      	ldr	r2, [pc, #40]	; (80060e4 <HAL_InitTick+0x74>)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	e007      	b.n	80060d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	73fb      	strb	r3, [r7, #15]
 80060c4:	e004      	b.n	80060d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	73fb      	strb	r3, [r7, #15]
 80060ca:	e001      	b.n	80060d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	2000002c 	.word	0x2000002c
 80060e0:	20000024 	.word	0x20000024
 80060e4:	20000028 	.word	0x20000028

080060e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80060ec:	4b06      	ldr	r3, [pc, #24]	; (8006108 <HAL_IncTick+0x20>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	461a      	mov	r2, r3
 80060f2:	4b06      	ldr	r3, [pc, #24]	; (800610c <HAL_IncTick+0x24>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4413      	add	r3, r2
 80060f8:	4a04      	ldr	r2, [pc, #16]	; (800610c <HAL_IncTick+0x24>)
 80060fa:	6013      	str	r3, [r2, #0]
}
 80060fc:	bf00      	nop
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	2000002c 	.word	0x2000002c
 800610c:	2000124c 	.word	0x2000124c

08006110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
  return uwTick;
 8006114:	4b03      	ldr	r3, [pc, #12]	; (8006124 <HAL_GetTick+0x14>)
 8006116:	681b      	ldr	r3, [r3, #0]
}
 8006118:	4618      	mov	r0, r3
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	2000124c 	.word	0x2000124c

08006128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006130:	f7ff ffee 	bl	8006110 <HAL_GetTick>
 8006134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006140:	d005      	beq.n	800614e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006142:	4b0a      	ldr	r3, [pc, #40]	; (800616c <HAL_Delay+0x44>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800614e:	bf00      	nop
 8006150:	f7ff ffde 	bl	8006110 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	429a      	cmp	r2, r3
 800615e:	d8f7      	bhi.n	8006150 <HAL_Delay+0x28>
  {
  }
}
 8006160:	bf00      	nop
 8006162:	bf00      	nop
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	2000002c 	.word	0x2000002c

08006170 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	609a      	str	r2, [r3, #8]
}
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	609a      	str	r2, [r3, #8]
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3360      	adds	r3, #96	; 0x60
 80061ea:	461a      	mov	r2, r3
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	4b08      	ldr	r3, [pc, #32]	; (800621c <LL_ADC_SetOffset+0x44>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	4313      	orrs	r3, r2
 8006208:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006210:	bf00      	nop
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	03fff000 	.word	0x03fff000

08006220 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3360      	adds	r3, #96	; 0x60
 800622e:	461a      	mov	r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3360      	adds	r3, #96	; 0x60
 800625c:	461a      	mov	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	431a      	orrs	r2, r3
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006276:	bf00      	nop
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3330      	adds	r3, #48	; 0x30
 80062b8:	461a      	mov	r2, r3
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	0a1b      	lsrs	r3, r3, #8
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	f003 030c 	and.w	r3, r3, #12
 80062c4:	4413      	add	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f003 031f 	and.w	r3, r3, #31
 80062d2:	211f      	movs	r1, #31
 80062d4:	fa01 f303 	lsl.w	r3, r1, r3
 80062d8:	43db      	mvns	r3, r3
 80062da:	401a      	ands	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	0e9b      	lsrs	r3, r3, #26
 80062e0:	f003 011f 	and.w	r1, r3, #31
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f003 031f 	and.w	r3, r3, #31
 80062ea:	fa01 f303 	lsl.w	r3, r1, r3
 80062ee:	431a      	orrs	r2, r3
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80062f4:	bf00      	nop
 80062f6:	371c      	adds	r7, #28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800630c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006314:	2301      	movs	r3, #1
 8006316:	e000      	b.n	800631a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006326:	b480      	push	{r7}
 8006328:	b087      	sub	sp, #28
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3314      	adds	r3, #20
 8006336:	461a      	mov	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	0e5b      	lsrs	r3, r3, #25
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	f003 0304 	and.w	r3, r3, #4
 8006342:	4413      	add	r3, r2
 8006344:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	0d1b      	lsrs	r3, r3, #20
 800634e:	f003 031f 	and.w	r3, r3, #31
 8006352:	2107      	movs	r1, #7
 8006354:	fa01 f303 	lsl.w	r3, r1, r3
 8006358:	43db      	mvns	r3, r3
 800635a:	401a      	ands	r2, r3
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	0d1b      	lsrs	r3, r3, #20
 8006360:	f003 031f 	and.w	r3, r3, #31
 8006364:	6879      	ldr	r1, [r7, #4]
 8006366:	fa01 f303 	lsl.w	r3, r1, r3
 800636a:	431a      	orrs	r2, r3
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006370:	bf00      	nop
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006394:	43db      	mvns	r3, r3
 8006396:	401a      	ands	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f003 0318 	and.w	r3, r3, #24
 800639e:	4908      	ldr	r1, [pc, #32]	; (80063c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80063a0:	40d9      	lsrs	r1, r3
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	400b      	ands	r3, r1
 80063a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063aa:	431a      	orrs	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80063b2:	bf00      	nop
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	0007ffff 	.word	0x0007ffff

080063c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80063d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6093      	str	r3, [r2, #8]
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063fc:	d101      	bne.n	8006402 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006420:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006424:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800644c:	d101      	bne.n	8006452 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006470:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006474:	f043 0201 	orr.w	r2, r3, #1
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <LL_ADC_IsEnabled+0x18>
 800649c:	2301      	movs	r3, #1
 800649e:	e000      	b.n	80064a2 <LL_ADC_IsEnabled+0x1a>
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80064c2:	f043 0204 	orr.w	r2, r3, #4
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b04      	cmp	r3, #4
 80064e8:	d101      	bne.n	80064ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 0308 	and.w	r3, r3, #8
 800650c:	2b08      	cmp	r3, #8
 800650e:	d101      	bne.n	8006514 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006510:	2301      	movs	r3, #1
 8006512:	e000      	b.n	8006516 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
	...

08006524 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b088      	sub	sp, #32
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e126      	b.n	800678c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006548:	2b00      	cmp	r3, #0
 800654a:	d109      	bne.n	8006560 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7fa fdd5 	bl	80010fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff ff3f 	bl	80063e8 <LL_ADC_IsDeepPowerDownEnabled>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d004      	beq.n	800657a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4618      	mov	r0, r3
 8006576:	f7ff ff25 	bl	80063c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff ff5a 	bl	8006438 <LL_ADC_IsInternalRegulatorEnabled>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d115      	bne.n	80065b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f7ff ff3e 	bl	8006410 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006594:	4b7f      	ldr	r3, [pc, #508]	; (8006794 <HAL_ADC_Init+0x270>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	099b      	lsrs	r3, r3, #6
 800659a:	4a7f      	ldr	r2, [pc, #508]	; (8006798 <HAL_ADC_Init+0x274>)
 800659c:	fba2 2303 	umull	r2, r3, r2, r3
 80065a0:	099b      	lsrs	r3, r3, #6
 80065a2:	3301      	adds	r3, #1
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80065a8:	e002      	b.n	80065b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3b01      	subs	r3, #1
 80065ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f9      	bne.n	80065aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff ff3c 	bl	8006438 <LL_ADC_IsInternalRegulatorEnabled>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10d      	bne.n	80065e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ca:	f043 0210 	orr.w	r2, r3, #16
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d6:	f043 0201 	orr.w	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff ff75 	bl	80064d6 <LL_ADC_REG_IsConversionOngoing>
 80065ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f2:	f003 0310 	and.w	r3, r3, #16
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f040 80bf 	bne.w	800677a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f040 80bb 	bne.w	800677a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006608:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800660c:	f043 0202 	orr.w	r2, r3, #2
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f7ff ff35 	bl	8006488 <LL_ADC_IsEnabled>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10b      	bne.n	800663c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006624:	485d      	ldr	r0, [pc, #372]	; (800679c <HAL_ADC_Init+0x278>)
 8006626:	f7ff ff2f 	bl	8006488 <LL_ADC_IsEnabled>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d105      	bne.n	800663c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	4619      	mov	r1, r3
 8006636:	485a      	ldr	r0, [pc, #360]	; (80067a0 <HAL_ADC_Init+0x27c>)
 8006638:	f7ff fd9a 	bl	8006170 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	7e5b      	ldrb	r3, [r3, #25]
 8006640:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006646:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800664c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006652:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 3020 	ldrb.w	r3, [r3, #32]
 800665a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800665c:	4313      	orrs	r3, r2
 800665e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d106      	bne.n	8006678 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666e:	3b01      	subs	r3, #1
 8006670:	045b      	lsls	r3, r3, #17
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	4313      	orrs	r3, r2
 8006676:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667c:	2b00      	cmp	r3, #0
 800667e:	d009      	beq.n	8006694 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	4313      	orrs	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	4b42      	ldr	r3, [pc, #264]	; (80067a4 <HAL_ADC_Init+0x280>)
 800669c:	4013      	ands	r3, r2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6812      	ldr	r2, [r2, #0]
 80066a2:	69b9      	ldr	r1, [r7, #24]
 80066a4:	430b      	orrs	r3, r1
 80066a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff ff25 	bl	80064fc <LL_ADC_INJ_IsConversionOngoing>
 80066b2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d13d      	bne.n	8006736 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d13a      	bne.n	8006736 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80066c4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066cc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80066ce:	4313      	orrs	r3, r2
 80066d0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066dc:	f023 0302 	bic.w	r3, r3, #2
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	69b9      	ldr	r1, [r7, #24]
 80066e6:	430b      	orrs	r3, r1
 80066e8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d118      	bne.n	8006726 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80066fe:	f023 0304 	bic.w	r3, r3, #4
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800670a:	4311      	orrs	r1, r2
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006710:	4311      	orrs	r1, r2
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006716:	430a      	orrs	r2, r1
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0201 	orr.w	r2, r2, #1
 8006722:	611a      	str	r2, [r3, #16]
 8006724:	e007      	b.n	8006736 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0201 	bic.w	r2, r2, #1
 8006734:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d10c      	bne.n	8006758 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006744:	f023 010f 	bic.w	r1, r3, #15
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	1e5a      	subs	r2, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	631a      	str	r2, [r3, #48]	; 0x30
 8006756:	e007      	b.n	8006768 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 020f 	bic.w	r2, r2, #15
 8006766:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676c:	f023 0303 	bic.w	r3, r3, #3
 8006770:	f043 0201 	orr.w	r2, r3, #1
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	655a      	str	r2, [r3, #84]	; 0x54
 8006778:	e007      	b.n	800678a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677e:	f043 0210 	orr.w	r2, r3, #16
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800678a:	7ffb      	ldrb	r3, [r7, #31]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3720      	adds	r7, #32
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	20000024 	.word	0x20000024
 8006798:	053e2d63 	.word	0x053e2d63
 800679c:	50040000 	.word	0x50040000
 80067a0:	50040300 	.word	0x50040300
 80067a4:	fff0c007 	.word	0xfff0c007

080067a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff fe8c 	bl	80064d6 <LL_ADC_REG_IsConversionOngoing>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d167      	bne.n	8006894 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d101      	bne.n	80067d2 <HAL_ADC_Start_DMA+0x2a>
 80067ce:	2302      	movs	r3, #2
 80067d0:	e063      	b.n	800689a <HAL_ADC_Start_DMA+0xf2>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 fe1c 	bl	8007418 <ADC_Enable>
 80067e0:	4603      	mov	r3, r0
 80067e2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80067e4:	7dfb      	ldrb	r3, [r7, #23]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d14f      	bne.n	800688a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80067f2:	f023 0301 	bic.w	r3, r3, #1
 80067f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d006      	beq.n	8006818 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680e:	f023 0206 	bic.w	r2, r3, #6
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	659a      	str	r2, [r3, #88]	; 0x58
 8006816:	e002      	b.n	800681e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006822:	4a20      	ldr	r2, [pc, #128]	; (80068a4 <HAL_ADC_Start_DMA+0xfc>)
 8006824:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800682a:	4a1f      	ldr	r2, [pc, #124]	; (80068a8 <HAL_ADC_Start_DMA+0x100>)
 800682c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006832:	4a1e      	ldr	r2, [pc, #120]	; (80068ac <HAL_ADC_Start_DMA+0x104>)
 8006834:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	221c      	movs	r2, #28
 800683c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 0210 	orr.w	r2, r2, #16
 8006854:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f042 0201 	orr.w	r2, r2, #1
 8006864:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3340      	adds	r3, #64	; 0x40
 8006870:	4619      	mov	r1, r3
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f001 f8e5 	bl	8007a44 <HAL_DMA_Start_IT>
 800687a:	4603      	mov	r3, r0
 800687c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff fe13 	bl	80064ae <LL_ADC_REG_StartConversion>
 8006888:	e006      	b.n	8006898 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006892:	e001      	b.n	8006898 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006894:	2302      	movs	r3, #2
 8006896:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006898:	7dfb      	ldrb	r3, [r7, #23]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	08007525 	.word	0x08007525
 80068a8:	080075fd 	.word	0x080075fd
 80068ac:	08007619 	.word	0x08007619

080068b0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80068b8:	2300      	movs	r3, #0
 80068ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d017      	beq.n	8006906 <HAL_ADC_IRQHandler+0x56>
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d012      	beq.n	8006906 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e4:	f003 0310 	and.w	r3, r3, #16
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d105      	bne.n	80068f8 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fecf 	bl	800769c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2202      	movs	r2, #2
 8006904:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b00      	cmp	r3, #0
 800690e:	d004      	beq.n	800691a <HAL_ADC_IRQHandler+0x6a>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b00      	cmp	r3, #0
 8006918:	d109      	bne.n	800692e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006920:	2b00      	cmp	r3, #0
 8006922:	d05e      	beq.n	80069e2 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f003 0308 	and.w	r3, r3, #8
 800692a:	2b00      	cmp	r3, #0
 800692c:	d059      	beq.n	80069e2 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006932:	f003 0310 	and.w	r3, r3, #16
 8006936:	2b00      	cmp	r3, #0
 8006938:	d105      	bne.n	8006946 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff fc99 	bl	8006282 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d03e      	beq.n	80069d4 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d135      	bne.n	80069d4 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0308 	and.w	r3, r3, #8
 8006972:	2b08      	cmp	r3, #8
 8006974:	d12e      	bne.n	80069d4 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff fdab 	bl	80064d6 <LL_ADC_REG_IsConversionOngoing>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d11a      	bne.n	80069bc <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 020c 	bic.w	r2, r2, #12
 8006994:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d112      	bne.n	80069d4 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b2:	f043 0201 	orr.w	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	655a      	str	r2, [r3, #84]	; 0x54
 80069ba:	e00b      	b.n	80069d4 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c0:	f043 0210 	orr.w	r2, r3, #16
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069cc:	f043 0201 	orr.w	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7fa fc07 	bl	80011e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	220c      	movs	r2, #12
 80069e0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	f003 0320 	and.w	r3, r3, #32
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d004      	beq.n	80069f6 <HAL_ADC_IRQHandler+0x146>
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f003 0320 	and.w	r3, r3, #32
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d109      	bne.n	8006a0a <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d072      	beq.n	8006ae6 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d06d      	beq.n	8006ae6 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0e:	f003 0310 	and.w	r3, r3, #16
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d105      	bne.n	8006a22 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7ff fc6a 	bl	8006300 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006a2c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff fc25 	bl	8006282 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a38:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d047      	beq.n	8006ad8 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <HAL_ADC_IRQHandler+0x1b2>
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d03f      	beq.n	8006ad8 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d13a      	bne.n	8006ad8 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6c:	2b40      	cmp	r3, #64	; 0x40
 8006a6e:	d133      	bne.n	8006ad8 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d12e      	bne.n	8006ad8 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff fd3c 	bl	80064fc <LL_ADC_INJ_IsConversionOngoing>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d11a      	bne.n	8006ac0 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a98:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d112      	bne.n	8006ad8 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab6:	f043 0201 	orr.w	r2, r3, #1
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	655a      	str	r2, [r3, #84]	; 0x54
 8006abe:	e00b      	b.n	8006ad8 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac4:	f043 0210 	orr.w	r2, r3, #16
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad0:	f043 0201 	orr.w	r2, r3, #1
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fdb7 	bl	800764c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2260      	movs	r2, #96	; 0x60
 8006ae4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d011      	beq.n	8006b14 <HAL_ADC_IRQHandler+0x264>
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00c      	beq.n	8006b14 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f890 	bl	8006c2c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2280      	movs	r2, #128	; 0x80
 8006b12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d012      	beq.n	8006b44 <HAL_ADC_IRQHandler+0x294>
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00d      	beq.n	8006b44 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fd9d 	bl	8007674 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d012      	beq.n	8006b74 <HAL_ADC_IRQHandler+0x2c4>
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00d      	beq.n	8006b74 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fd8f 	bl	8007688 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	f003 0310 	and.w	r3, r3, #16
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d02a      	beq.n	8006bd4 <HAL_ADC_IRQHandler+0x324>
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f003 0310 	and.w	r3, r3, #16
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d025      	beq.n	8006bd4 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d102      	bne.n	8006b96 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8006b90:	2301      	movs	r3, #1
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	e008      	b.n	8006ba8 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d10e      	bne.n	8006bcc <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bbe:	f043 0202 	orr.w	r2, r3, #2
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f83a 	bl	8006c40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2210      	movs	r2, #16
 8006bd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d018      	beq.n	8006c10 <HAL_ADC_IRQHandler+0x360>
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d013      	beq.n	8006c10 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bec:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf8:	f043 0208 	orr.w	r2, r3, #8
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c08:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fd28 	bl	8007660 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006c10:	bf00      	nop
 8006c12:	3720      	adds	r7, #32
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b0b6      	sub	sp, #216	; 0xd8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006c64:	2300      	movs	r3, #0
 8006c66:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d101      	bne.n	8006c76 <HAL_ADC_ConfigChannel+0x22>
 8006c72:	2302      	movs	r3, #2
 8006c74:	e3bb      	b.n	80073ee <HAL_ADC_ConfigChannel+0x79a>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff fc27 	bl	80064d6 <LL_ADC_REG_IsConversionOngoing>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f040 83a0 	bne.w	80073d0 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	2b05      	cmp	r3, #5
 8006c9e:	d824      	bhi.n	8006cea <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	3b02      	subs	r3, #2
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d81b      	bhi.n	8006ce2 <HAL_ADC_ConfigChannel+0x8e>
 8006caa:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <HAL_ADC_ConfigChannel+0x5c>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006cc1 	.word	0x08006cc1
 8006cb4:	08006cc9 	.word	0x08006cc9
 8006cb8:	08006cd1 	.word	0x08006cd1
 8006cbc:	08006cd9 	.word	0x08006cd9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8006cc0:	230c      	movs	r3, #12
 8006cc2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006cc6:	e010      	b.n	8006cea <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8006cc8:	2312      	movs	r3, #18
 8006cca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006cce:	e00c      	b.n	8006cea <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8006cd0:	2318      	movs	r3, #24
 8006cd2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006cd6:	e008      	b.n	8006cea <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8006cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006ce0:	e003      	b.n	8006cea <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8006ce2:	2306      	movs	r3, #6
 8006ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006ce8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6818      	ldr	r0, [r3, #0]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006cf8:	f7ff fad6 	bl	80062a8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff fbe8 	bl	80064d6 <LL_ADC_REG_IsConversionOngoing>
 8006d06:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7ff fbf4 	bl	80064fc <LL_ADC_INJ_IsConversionOngoing>
 8006d14:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006d18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f040 81a4 	bne.w	800706a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006d22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f040 819f 	bne.w	800706a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	6819      	ldr	r1, [r3, #0]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	f7ff faf4 	bl	8006326 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	695a      	ldr	r2, [r3, #20]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	08db      	lsrs	r3, r3, #3
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	fa02 f303 	lsl.w	r3, r2, r3
 8006d54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	d00a      	beq.n	8006d76 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	6919      	ldr	r1, [r3, #16]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d70:	f7ff fa32 	bl	80061d8 <LL_ADC_SetOffset>
 8006d74:	e179      	b.n	800706a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7ff fa4f 	bl	8006220 <LL_ADC_GetOffsetChannel>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10a      	bne.n	8006da2 <HAL_ADC_ConfigChannel+0x14e>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2100      	movs	r1, #0
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fa44 	bl	8006220 <LL_ADC_GetOffsetChannel>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	0e9b      	lsrs	r3, r3, #26
 8006d9c:	f003 021f 	and.w	r2, r3, #31
 8006da0:	e01e      	b.n	8006de0 <HAL_ADC_ConfigChannel+0x18c>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2100      	movs	r1, #0
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7ff fa39 	bl	8006220 <LL_ADC_GetOffsetChannel>
 8006dae:	4603      	mov	r3, r0
 8006db0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006db8:	fa93 f3a3 	rbit	r3, r3
 8006dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006dc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006dc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8006dd0:	2320      	movs	r3, #32
 8006dd2:	e004      	b.n	8006dde <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8006dd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006dd8:	fab3 f383 	clz	r3, r3
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d105      	bne.n	8006df8 <HAL_ADC_ConfigChannel+0x1a4>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	0e9b      	lsrs	r3, r3, #26
 8006df2:	f003 031f 	and.w	r3, r3, #31
 8006df6:	e018      	b.n	8006e2a <HAL_ADC_ConfigChannel+0x1d6>
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e04:	fa93 f3a3 	rbit	r3, r3
 8006e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8006e0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8006e14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8006e1c:	2320      	movs	r3, #32
 8006e1e:	e004      	b.n	8006e2a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8006e20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e24:	fab3 f383 	clz	r3, r3
 8006e28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d106      	bne.n	8006e3c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2200      	movs	r2, #0
 8006e34:	2100      	movs	r1, #0
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff fa08 	bl	800624c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2101      	movs	r1, #1
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff f9ec 	bl	8006220 <LL_ADC_GetOffsetChannel>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10a      	bne.n	8006e68 <HAL_ADC_ConfigChannel+0x214>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2101      	movs	r1, #1
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7ff f9e1 	bl	8006220 <LL_ADC_GetOffsetChannel>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	0e9b      	lsrs	r3, r3, #26
 8006e62:	f003 021f 	and.w	r2, r3, #31
 8006e66:	e01e      	b.n	8006ea6 <HAL_ADC_ConfigChannel+0x252>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff f9d6 	bl	8006220 <LL_ADC_GetOffsetChannel>
 8006e74:	4603      	mov	r3, r0
 8006e76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e7e:	fa93 f3a3 	rbit	r3, r3
 8006e82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8006e86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8006e8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8006e96:	2320      	movs	r3, #32
 8006e98:	e004      	b.n	8006ea4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8006e9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e9e:	fab3 f383 	clz	r3, r3
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d105      	bne.n	8006ebe <HAL_ADC_ConfigChannel+0x26a>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	0e9b      	lsrs	r3, r3, #26
 8006eb8:	f003 031f 	and.w	r3, r3, #31
 8006ebc:	e018      	b.n	8006ef0 <HAL_ADC_ConfigChannel+0x29c>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006eca:	fa93 f3a3 	rbit	r3, r3
 8006ece:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8006ed2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ed6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8006eda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8006ee2:	2320      	movs	r3, #32
 8006ee4:	e004      	b.n	8006ef0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8006ee6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006eea:	fab3 f383 	clz	r3, r3
 8006eee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d106      	bne.n	8006f02 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	2101      	movs	r1, #1
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff f9a5 	bl	800624c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2102      	movs	r1, #2
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff f989 	bl	8006220 <LL_ADC_GetOffsetChannel>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <HAL_ADC_ConfigChannel+0x2da>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2102      	movs	r1, #2
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7ff f97e 	bl	8006220 <LL_ADC_GetOffsetChannel>
 8006f24:	4603      	mov	r3, r0
 8006f26:	0e9b      	lsrs	r3, r3, #26
 8006f28:	f003 021f 	and.w	r2, r3, #31
 8006f2c:	e01e      	b.n	8006f6c <HAL_ADC_ConfigChannel+0x318>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2102      	movs	r1, #2
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff f973 	bl	8006220 <LL_ADC_GetOffsetChannel>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f44:	fa93 f3a3 	rbit	r3, r3
 8006f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8006f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8006f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8006f5c:	2320      	movs	r3, #32
 8006f5e:	e004      	b.n	8006f6a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8006f60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f64:	fab3 f383 	clz	r3, r3
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d105      	bne.n	8006f84 <HAL_ADC_ConfigChannel+0x330>
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	0e9b      	lsrs	r3, r3, #26
 8006f7e:	f003 031f 	and.w	r3, r3, #31
 8006f82:	e014      	b.n	8006fae <HAL_ADC_ConfigChannel+0x35a>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f8c:	fa93 f3a3 	rbit	r3, r3
 8006f90:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8006f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8006f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8006fa0:	2320      	movs	r3, #32
 8006fa2:	e004      	b.n	8006fae <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8006fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006fa8:	fab3 f383 	clz	r3, r3
 8006fac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d106      	bne.n	8006fc0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	2102      	movs	r1, #2
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7ff f946 	bl	800624c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2103      	movs	r1, #3
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff f92a 	bl	8006220 <LL_ADC_GetOffsetChannel>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10a      	bne.n	8006fec <HAL_ADC_ConfigChannel+0x398>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2103      	movs	r1, #3
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff f91f 	bl	8006220 <LL_ADC_GetOffsetChannel>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	0e9b      	lsrs	r3, r3, #26
 8006fe6:	f003 021f 	and.w	r2, r3, #31
 8006fea:	e017      	b.n	800701c <HAL_ADC_ConfigChannel+0x3c8>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2103      	movs	r1, #3
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff f914 	bl	8006220 <LL_ADC_GetOffsetChannel>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ffc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ffe:	fa93 f3a3 	rbit	r3, r3
 8007002:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007006:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8007008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800700e:	2320      	movs	r3, #32
 8007010:	e003      	b.n	800701a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8007012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007014:	fab3 f383 	clz	r3, r3
 8007018:	b2db      	uxtb	r3, r3
 800701a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007024:	2b00      	cmp	r3, #0
 8007026:	d105      	bne.n	8007034 <HAL_ADC_ConfigChannel+0x3e0>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	0e9b      	lsrs	r3, r3, #26
 800702e:	f003 031f 	and.w	r3, r3, #31
 8007032:	e011      	b.n	8007058 <HAL_ADC_ConfigChannel+0x404>
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800703a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800703c:	fa93 f3a3 	rbit	r3, r3
 8007040:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8007042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007044:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8007046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800704c:	2320      	movs	r3, #32
 800704e:	e003      	b.n	8007058 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8007050:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007052:	fab3 f383 	clz	r3, r3
 8007056:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007058:	429a      	cmp	r2, r3
 800705a:	d106      	bne.n	800706a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2200      	movs	r2, #0
 8007062:	2103      	movs	r1, #3
 8007064:	4618      	mov	r0, r3
 8007066:	f7ff f8f1 	bl	800624c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff fa0a 	bl	8006488 <LL_ADC_IsEnabled>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	f040 8140 	bne.w	80072fc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6818      	ldr	r0, [r3, #0]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	6819      	ldr	r1, [r3, #0]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	461a      	mov	r2, r3
 800708a:	f7ff f977 	bl	800637c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	4a8f      	ldr	r2, [pc, #572]	; (80072d0 <HAL_ADC_ConfigChannel+0x67c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	f040 8131 	bne.w	80072fc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10b      	bne.n	80070c2 <HAL_ADC_ConfigChannel+0x46e>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	0e9b      	lsrs	r3, r3, #26
 80070b0:	3301      	adds	r3, #1
 80070b2:	f003 031f 	and.w	r3, r3, #31
 80070b6:	2b09      	cmp	r3, #9
 80070b8:	bf94      	ite	ls
 80070ba:	2301      	movls	r3, #1
 80070bc:	2300      	movhi	r3, #0
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	e019      	b.n	80070f6 <HAL_ADC_ConfigChannel+0x4a2>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070ca:	fa93 f3a3 	rbit	r3, r3
 80070ce:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80070d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80070d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80070da:	2320      	movs	r3, #32
 80070dc:	e003      	b.n	80070e6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80070de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070e0:	fab3 f383 	clz	r3, r3
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	3301      	adds	r3, #1
 80070e8:	f003 031f 	and.w	r3, r3, #31
 80070ec:	2b09      	cmp	r3, #9
 80070ee:	bf94      	ite	ls
 80070f0:	2301      	movls	r3, #1
 80070f2:	2300      	movhi	r3, #0
 80070f4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d079      	beq.n	80071ee <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007102:	2b00      	cmp	r3, #0
 8007104:	d107      	bne.n	8007116 <HAL_ADC_ConfigChannel+0x4c2>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	0e9b      	lsrs	r3, r3, #26
 800710c:	3301      	adds	r3, #1
 800710e:	069b      	lsls	r3, r3, #26
 8007110:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007114:	e015      	b.n	8007142 <HAL_ADC_ConfigChannel+0x4ee>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800711c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800711e:	fa93 f3a3 	rbit	r3, r3
 8007122:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8007124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007126:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8007128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800712e:	2320      	movs	r3, #32
 8007130:	e003      	b.n	800713a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8007132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007134:	fab3 f383 	clz	r3, r3
 8007138:	b2db      	uxtb	r3, r3
 800713a:	3301      	adds	r3, #1
 800713c:	069b      	lsls	r3, r3, #26
 800713e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800714a:	2b00      	cmp	r3, #0
 800714c:	d109      	bne.n	8007162 <HAL_ADC_ConfigChannel+0x50e>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	0e9b      	lsrs	r3, r3, #26
 8007154:	3301      	adds	r3, #1
 8007156:	f003 031f 	and.w	r3, r3, #31
 800715a:	2101      	movs	r1, #1
 800715c:	fa01 f303 	lsl.w	r3, r1, r3
 8007160:	e017      	b.n	8007192 <HAL_ADC_ConfigChannel+0x53e>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800716a:	fa93 f3a3 	rbit	r3, r3
 800716e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8007170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007172:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8007174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800717a:	2320      	movs	r3, #32
 800717c:	e003      	b.n	8007186 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800717e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007180:	fab3 f383 	clz	r3, r3
 8007184:	b2db      	uxtb	r3, r3
 8007186:	3301      	adds	r3, #1
 8007188:	f003 031f 	and.w	r3, r3, #31
 800718c:	2101      	movs	r1, #1
 800718e:	fa01 f303 	lsl.w	r3, r1, r3
 8007192:	ea42 0103 	orr.w	r1, r2, r3
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10a      	bne.n	80071b8 <HAL_ADC_ConfigChannel+0x564>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	0e9b      	lsrs	r3, r3, #26
 80071a8:	3301      	adds	r3, #1
 80071aa:	f003 021f 	and.w	r2, r3, #31
 80071ae:	4613      	mov	r3, r2
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	4413      	add	r3, r2
 80071b4:	051b      	lsls	r3, r3, #20
 80071b6:	e018      	b.n	80071ea <HAL_ADC_ConfigChannel+0x596>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c0:	fa93 f3a3 	rbit	r3, r3
 80071c4:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80071d0:	2320      	movs	r3, #32
 80071d2:	e003      	b.n	80071dc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80071d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d6:	fab3 f383 	clz	r3, r3
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	3301      	adds	r3, #1
 80071de:	f003 021f 	and.w	r2, r3, #31
 80071e2:	4613      	mov	r3, r2
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	4413      	add	r3, r2
 80071e8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80071ea:	430b      	orrs	r3, r1
 80071ec:	e081      	b.n	80072f2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d107      	bne.n	800720a <HAL_ADC_ConfigChannel+0x5b6>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	0e9b      	lsrs	r3, r3, #26
 8007200:	3301      	adds	r3, #1
 8007202:	069b      	lsls	r3, r3, #26
 8007204:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007208:	e015      	b.n	8007236 <HAL_ADC_ConfigChannel+0x5e2>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007212:	fa93 f3a3 	rbit	r3, r3
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8007222:	2320      	movs	r3, #32
 8007224:	e003      	b.n	800722e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	fab3 f383 	clz	r3, r3
 800722c:	b2db      	uxtb	r3, r3
 800722e:	3301      	adds	r3, #1
 8007230:	069b      	lsls	r3, r3, #26
 8007232:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800723e:	2b00      	cmp	r3, #0
 8007240:	d109      	bne.n	8007256 <HAL_ADC_ConfigChannel+0x602>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	0e9b      	lsrs	r3, r3, #26
 8007248:	3301      	adds	r3, #1
 800724a:	f003 031f 	and.w	r3, r3, #31
 800724e:	2101      	movs	r1, #1
 8007250:	fa01 f303 	lsl.w	r3, r1, r3
 8007254:	e017      	b.n	8007286 <HAL_ADC_ConfigChannel+0x632>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	fa93 f3a3 	rbit	r3, r3
 8007262:	61bb      	str	r3, [r7, #24]
  return result;
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800726e:	2320      	movs	r3, #32
 8007270:	e003      	b.n	800727a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	fab3 f383 	clz	r3, r3
 8007278:	b2db      	uxtb	r3, r3
 800727a:	3301      	adds	r3, #1
 800727c:	f003 031f 	and.w	r3, r3, #31
 8007280:	2101      	movs	r1, #1
 8007282:	fa01 f303 	lsl.w	r3, r1, r3
 8007286:	ea42 0103 	orr.w	r1, r2, r3
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10d      	bne.n	80072b2 <HAL_ADC_ConfigChannel+0x65e>
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	0e9b      	lsrs	r3, r3, #26
 800729c:	3301      	adds	r3, #1
 800729e:	f003 021f 	and.w	r2, r3, #31
 80072a2:	4613      	mov	r3, r2
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	4413      	add	r3, r2
 80072a8:	3b1e      	subs	r3, #30
 80072aa:	051b      	lsls	r3, r3, #20
 80072ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80072b0:	e01e      	b.n	80072f0 <HAL_ADC_ConfigChannel+0x69c>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	fa93 f3a3 	rbit	r3, r3
 80072be:	60fb      	str	r3, [r7, #12]
  return result;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d104      	bne.n	80072d4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80072ca:	2320      	movs	r3, #32
 80072cc:	e006      	b.n	80072dc <HAL_ADC_ConfigChannel+0x688>
 80072ce:	bf00      	nop
 80072d0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	fab3 f383 	clz	r3, r3
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	3301      	adds	r3, #1
 80072de:	f003 021f 	and.w	r2, r3, #31
 80072e2:	4613      	mov	r3, r2
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	4413      	add	r3, r2
 80072e8:	3b1e      	subs	r3, #30
 80072ea:	051b      	lsls	r3, r3, #20
 80072ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80072f0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80072f6:	4619      	mov	r1, r3
 80072f8:	f7ff f815 	bl	8006326 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	4b3d      	ldr	r3, [pc, #244]	; (80073f8 <HAL_ADC_ConfigChannel+0x7a4>)
 8007302:	4013      	ands	r3, r2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d06c      	beq.n	80073e2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007308:	483c      	ldr	r0, [pc, #240]	; (80073fc <HAL_ADC_ConfigChannel+0x7a8>)
 800730a:	f7fe ff57 	bl	80061bc <LL_ADC_GetCommonPathInternalCh>
 800730e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a3a      	ldr	r2, [pc, #232]	; (8007400 <HAL_ADC_ConfigChannel+0x7ac>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d127      	bne.n	800736c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800731c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007320:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d121      	bne.n	800736c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a35      	ldr	r2, [pc, #212]	; (8007404 <HAL_ADC_ConfigChannel+0x7b0>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d157      	bne.n	80073e2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007332:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007336:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800733a:	4619      	mov	r1, r3
 800733c:	482f      	ldr	r0, [pc, #188]	; (80073fc <HAL_ADC_ConfigChannel+0x7a8>)
 800733e:	f7fe ff2a 	bl	8006196 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007342:	4b31      	ldr	r3, [pc, #196]	; (8007408 <HAL_ADC_ConfigChannel+0x7b4>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	099b      	lsrs	r3, r3, #6
 8007348:	4a30      	ldr	r2, [pc, #192]	; (800740c <HAL_ADC_ConfigChannel+0x7b8>)
 800734a:	fba2 2303 	umull	r2, r3, r2, r3
 800734e:	099b      	lsrs	r3, r3, #6
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	4613      	mov	r3, r2
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800735c:	e002      	b.n	8007364 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	3b01      	subs	r3, #1
 8007362:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1f9      	bne.n	800735e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800736a:	e03a      	b.n	80073e2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a27      	ldr	r2, [pc, #156]	; (8007410 <HAL_ADC_ConfigChannel+0x7bc>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d113      	bne.n	800739e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007376:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800737a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10d      	bne.n	800739e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a1f      	ldr	r2, [pc, #124]	; (8007404 <HAL_ADC_ConfigChannel+0x7b0>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d12a      	bne.n	80073e2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800738c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007394:	4619      	mov	r1, r3
 8007396:	4819      	ldr	r0, [pc, #100]	; (80073fc <HAL_ADC_ConfigChannel+0x7a8>)
 8007398:	f7fe fefd 	bl	8006196 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800739c:	e021      	b.n	80073e2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a1c      	ldr	r2, [pc, #112]	; (8007414 <HAL_ADC_ConfigChannel+0x7c0>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d11c      	bne.n	80073e2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80073a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d116      	bne.n	80073e2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a12      	ldr	r2, [pc, #72]	; (8007404 <HAL_ADC_ConfigChannel+0x7b0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d111      	bne.n	80073e2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80073be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80073c6:	4619      	mov	r1, r3
 80073c8:	480c      	ldr	r0, [pc, #48]	; (80073fc <HAL_ADC_ConfigChannel+0x7a8>)
 80073ca:	f7fe fee4 	bl	8006196 <LL_ADC_SetCommonPathInternalCh>
 80073ce:	e008      	b.n	80073e2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d4:	f043 0220 	orr.w	r2, r3, #32
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80073ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	37d8      	adds	r7, #216	; 0xd8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	80080000 	.word	0x80080000
 80073fc:	50040300 	.word	0x50040300
 8007400:	c7520000 	.word	0xc7520000
 8007404:	50040000 	.word	0x50040000
 8007408:	20000024 	.word	0x20000024
 800740c:	053e2d63 	.word	0x053e2d63
 8007410:	cb840000 	.word	0xcb840000
 8007414:	80000001 	.word	0x80000001

08007418 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007420:	2300      	movs	r3, #0
 8007422:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4618      	mov	r0, r3
 800742a:	f7ff f82d 	bl	8006488 <LL_ADC_IsEnabled>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d169      	bne.n	8007508 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689a      	ldr	r2, [r3, #8]
 800743a:	4b36      	ldr	r3, [pc, #216]	; (8007514 <ADC_Enable+0xfc>)
 800743c:	4013      	ands	r3, r2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00d      	beq.n	800745e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007446:	f043 0210 	orr.w	r2, r3, #16
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007452:	f043 0201 	orr.w	r2, r3, #1
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e055      	b.n	800750a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4618      	mov	r0, r3
 8007464:	f7fe fffc 	bl	8006460 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007468:	482b      	ldr	r0, [pc, #172]	; (8007518 <ADC_Enable+0x100>)
 800746a:	f7fe fea7 	bl	80061bc <LL_ADC_GetCommonPathInternalCh>
 800746e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007474:	2b00      	cmp	r3, #0
 8007476:	d013      	beq.n	80074a0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007478:	4b28      	ldr	r3, [pc, #160]	; (800751c <ADC_Enable+0x104>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	099b      	lsrs	r3, r3, #6
 800747e:	4a28      	ldr	r2, [pc, #160]	; (8007520 <ADC_Enable+0x108>)
 8007480:	fba2 2303 	umull	r2, r3, r2, r3
 8007484:	099b      	lsrs	r3, r3, #6
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	4613      	mov	r3, r2
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	4413      	add	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007492:	e002      	b.n	800749a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	3b01      	subs	r3, #1
 8007498:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1f9      	bne.n	8007494 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80074a0:	f7fe fe36 	bl	8006110 <HAL_GetTick>
 80074a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80074a6:	e028      	b.n	80074fa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fe ffeb 	bl	8006488 <LL_ADC_IsEnabled>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d104      	bne.n	80074c2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fe ffcf 	bl	8006460 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80074c2:	f7fe fe25 	bl	8006110 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d914      	bls.n	80074fa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d00d      	beq.n	80074fa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e2:	f043 0210 	orr.w	r2, r3, #16
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ee:	f043 0201 	orr.w	r2, r3, #1
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e007      	b.n	800750a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b01      	cmp	r3, #1
 8007506:	d1cf      	bne.n	80074a8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	8000003f 	.word	0x8000003f
 8007518:	50040300 	.word	0x50040300
 800751c:	20000024 	.word	0x20000024
 8007520:	053e2d63 	.word	0x053e2d63

08007524 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007530:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007536:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800753a:	2b00      	cmp	r3, #0
 800753c:	d14b      	bne.n	80075d6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007542:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0308 	and.w	r3, r3, #8
 8007554:	2b00      	cmp	r3, #0
 8007556:	d021      	beq.n	800759c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4618      	mov	r0, r3
 800755e:	f7fe fe90 	bl	8006282 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d032      	beq.n	80075ce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d12b      	bne.n	80075ce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d11f      	bne.n	80075ce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007592:	f043 0201 	orr.w	r2, r3, #1
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	655a      	str	r2, [r3, #84]	; 0x54
 800759a:	e018      	b.n	80075ce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d111      	bne.n	80075ce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d105      	bne.n	80075ce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c6:	f043 0201 	orr.w	r2, r3, #1
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f7f9 fe0a 	bl	80011e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80075d4:	e00e      	b.n	80075f4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075da:	f003 0310 	and.w	r3, r3, #16
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff fb2c 	bl	8006c40 <HAL_ADC_ErrorCallback>
}
 80075e8:	e004      	b.n	80075f4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	4798      	blx	r3
}
 80075f4:	bf00      	nop
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007608:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f7ff fb04 	bl	8006c18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007610:	bf00      	nop
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007624:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007636:	f043 0204 	orr.w	r2, r3, #4
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f7ff fafe 	bl	8006c40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007644:	bf00      	nop
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f003 0307 	and.w	r3, r3, #7
 80076be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80076c0:	4b0c      	ldr	r3, [pc, #48]	; (80076f4 <__NVIC_SetPriorityGrouping+0x44>)
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80076cc:	4013      	ands	r3, r2
 80076ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80076d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80076dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80076e2:	4a04      	ldr	r2, [pc, #16]	; (80076f4 <__NVIC_SetPriorityGrouping+0x44>)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	60d3      	str	r3, [r2, #12]
}
 80076e8:	bf00      	nop
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	e000ed00 	.word	0xe000ed00

080076f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076fc:	4b04      	ldr	r3, [pc, #16]	; (8007710 <__NVIC_GetPriorityGrouping+0x18>)
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	0a1b      	lsrs	r3, r3, #8
 8007702:	f003 0307 	and.w	r3, r3, #7
}
 8007706:	4618      	mov	r0, r3
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	e000ed00 	.word	0xe000ed00

08007714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	4603      	mov	r3, r0
 800771c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800771e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007722:	2b00      	cmp	r3, #0
 8007724:	db0b      	blt.n	800773e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007726:	79fb      	ldrb	r3, [r7, #7]
 8007728:	f003 021f 	and.w	r2, r3, #31
 800772c:	4907      	ldr	r1, [pc, #28]	; (800774c <__NVIC_EnableIRQ+0x38>)
 800772e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007732:	095b      	lsrs	r3, r3, #5
 8007734:	2001      	movs	r0, #1
 8007736:	fa00 f202 	lsl.w	r2, r0, r2
 800773a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	e000e100 	.word	0xe000e100

08007750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	4603      	mov	r3, r0
 8007758:	6039      	str	r1, [r7, #0]
 800775a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800775c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007760:	2b00      	cmp	r3, #0
 8007762:	db0a      	blt.n	800777a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	b2da      	uxtb	r2, r3
 8007768:	490c      	ldr	r1, [pc, #48]	; (800779c <__NVIC_SetPriority+0x4c>)
 800776a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800776e:	0112      	lsls	r2, r2, #4
 8007770:	b2d2      	uxtb	r2, r2
 8007772:	440b      	add	r3, r1
 8007774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007778:	e00a      	b.n	8007790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	b2da      	uxtb	r2, r3
 800777e:	4908      	ldr	r1, [pc, #32]	; (80077a0 <__NVIC_SetPriority+0x50>)
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	f003 030f 	and.w	r3, r3, #15
 8007786:	3b04      	subs	r3, #4
 8007788:	0112      	lsls	r2, r2, #4
 800778a:	b2d2      	uxtb	r2, r2
 800778c:	440b      	add	r3, r1
 800778e:	761a      	strb	r2, [r3, #24]
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	e000e100 	.word	0xe000e100
 80077a0:	e000ed00 	.word	0xe000ed00

080077a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b089      	sub	sp, #36	; 0x24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	f1c3 0307 	rsb	r3, r3, #7
 80077be:	2b04      	cmp	r3, #4
 80077c0:	bf28      	it	cs
 80077c2:	2304      	movcs	r3, #4
 80077c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	3304      	adds	r3, #4
 80077ca:	2b06      	cmp	r3, #6
 80077cc:	d902      	bls.n	80077d4 <NVIC_EncodePriority+0x30>
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	3b03      	subs	r3, #3
 80077d2:	e000      	b.n	80077d6 <NVIC_EncodePriority+0x32>
 80077d4:	2300      	movs	r3, #0
 80077d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077d8:	f04f 32ff 	mov.w	r2, #4294967295
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	fa02 f303 	lsl.w	r3, r2, r3
 80077e2:	43da      	mvns	r2, r3
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	401a      	ands	r2, r3
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077ec:	f04f 31ff 	mov.w	r1, #4294967295
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	fa01 f303 	lsl.w	r3, r1, r3
 80077f6:	43d9      	mvns	r1, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077fc:	4313      	orrs	r3, r2
         );
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3724      	adds	r7, #36	; 0x24
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
	...

0800780c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3b01      	subs	r3, #1
 8007818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800781c:	d301      	bcc.n	8007822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800781e:	2301      	movs	r3, #1
 8007820:	e00f      	b.n	8007842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007822:	4a0a      	ldr	r2, [pc, #40]	; (800784c <SysTick_Config+0x40>)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3b01      	subs	r3, #1
 8007828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800782a:	210f      	movs	r1, #15
 800782c:	f04f 30ff 	mov.w	r0, #4294967295
 8007830:	f7ff ff8e 	bl	8007750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007834:	4b05      	ldr	r3, [pc, #20]	; (800784c <SysTick_Config+0x40>)
 8007836:	2200      	movs	r2, #0
 8007838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800783a:	4b04      	ldr	r3, [pc, #16]	; (800784c <SysTick_Config+0x40>)
 800783c:	2207      	movs	r2, #7
 800783e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	e000e010 	.word	0xe000e010

08007850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff ff29 	bl	80076b0 <__NVIC_SetPriorityGrouping>
}
 800785e:	bf00      	nop
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b086      	sub	sp, #24
 800786a:	af00      	add	r7, sp, #0
 800786c:	4603      	mov	r3, r0
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	607a      	str	r2, [r7, #4]
 8007872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007874:	2300      	movs	r3, #0
 8007876:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007878:	f7ff ff3e 	bl	80076f8 <__NVIC_GetPriorityGrouping>
 800787c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	68b9      	ldr	r1, [r7, #8]
 8007882:	6978      	ldr	r0, [r7, #20]
 8007884:	f7ff ff8e 	bl	80077a4 <NVIC_EncodePriority>
 8007888:	4602      	mov	r2, r0
 800788a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800788e:	4611      	mov	r1, r2
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff ff5d 	bl	8007750 <__NVIC_SetPriority>
}
 8007896:	bf00      	nop
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b082      	sub	sp, #8
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	4603      	mov	r3, r0
 80078a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80078a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff ff31 	bl	8007714 <__NVIC_EnableIRQ>
}
 80078b2:	bf00      	nop
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff ffa2 	bl	800780c <SysTick_Config>
 80078c8:	4603      	mov	r3, r0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
	...

080078d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e098      	b.n	8007a18 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	4b4d      	ldr	r3, [pc, #308]	; (8007a24 <HAL_DMA_Init+0x150>)
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d80f      	bhi.n	8007912 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	4b4b      	ldr	r3, [pc, #300]	; (8007a28 <HAL_DMA_Init+0x154>)
 80078fa:	4413      	add	r3, r2
 80078fc:	4a4b      	ldr	r2, [pc, #300]	; (8007a2c <HAL_DMA_Init+0x158>)
 80078fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007902:	091b      	lsrs	r3, r3, #4
 8007904:	009a      	lsls	r2, r3, #2
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a48      	ldr	r2, [pc, #288]	; (8007a30 <HAL_DMA_Init+0x15c>)
 800790e:	641a      	str	r2, [r3, #64]	; 0x40
 8007910:	e00e      	b.n	8007930 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	461a      	mov	r2, r3
 8007918:	4b46      	ldr	r3, [pc, #280]	; (8007a34 <HAL_DMA_Init+0x160>)
 800791a:	4413      	add	r3, r2
 800791c:	4a43      	ldr	r2, [pc, #268]	; (8007a2c <HAL_DMA_Init+0x158>)
 800791e:	fba2 2303 	umull	r2, r3, r2, r3
 8007922:	091b      	lsrs	r3, r3, #4
 8007924:	009a      	lsls	r2, r3, #2
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a42      	ldr	r2, [pc, #264]	; (8007a38 <HAL_DMA_Init+0x164>)
 800792e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800794a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007954:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007960:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800796c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	4313      	orrs	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800798a:	d039      	beq.n	8007a00 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007990:	4a27      	ldr	r2, [pc, #156]	; (8007a30 <HAL_DMA_Init+0x15c>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d11a      	bne.n	80079cc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007996:	4b29      	ldr	r3, [pc, #164]	; (8007a3c <HAL_DMA_Init+0x168>)
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800799e:	f003 031c 	and.w	r3, r3, #28
 80079a2:	210f      	movs	r1, #15
 80079a4:	fa01 f303 	lsl.w	r3, r1, r3
 80079a8:	43db      	mvns	r3, r3
 80079aa:	4924      	ldr	r1, [pc, #144]	; (8007a3c <HAL_DMA_Init+0x168>)
 80079ac:	4013      	ands	r3, r2
 80079ae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80079b0:	4b22      	ldr	r3, [pc, #136]	; (8007a3c <HAL_DMA_Init+0x168>)
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6859      	ldr	r1, [r3, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079bc:	f003 031c 	and.w	r3, r3, #28
 80079c0:	fa01 f303 	lsl.w	r3, r1, r3
 80079c4:	491d      	ldr	r1, [pc, #116]	; (8007a3c <HAL_DMA_Init+0x168>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	600b      	str	r3, [r1, #0]
 80079ca:	e019      	b.n	8007a00 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80079cc:	4b1c      	ldr	r3, [pc, #112]	; (8007a40 <HAL_DMA_Init+0x16c>)
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d4:	f003 031c 	and.w	r3, r3, #28
 80079d8:	210f      	movs	r1, #15
 80079da:	fa01 f303 	lsl.w	r3, r1, r3
 80079de:	43db      	mvns	r3, r3
 80079e0:	4917      	ldr	r1, [pc, #92]	; (8007a40 <HAL_DMA_Init+0x16c>)
 80079e2:	4013      	ands	r3, r2
 80079e4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80079e6:	4b16      	ldr	r3, [pc, #88]	; (8007a40 <HAL_DMA_Init+0x16c>)
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6859      	ldr	r1, [r3, #4]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f2:	f003 031c 	and.w	r3, r3, #28
 80079f6:	fa01 f303 	lsl.w	r3, r1, r3
 80079fa:	4911      	ldr	r1, [pc, #68]	; (8007a40 <HAL_DMA_Init+0x16c>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	40020407 	.word	0x40020407
 8007a28:	bffdfff8 	.word	0xbffdfff8
 8007a2c:	cccccccd 	.word	0xcccccccd
 8007a30:	40020000 	.word	0x40020000
 8007a34:	bffdfbf8 	.word	0xbffdfbf8
 8007a38:	40020400 	.word	0x40020400
 8007a3c:	400200a8 	.word	0x400200a8
 8007a40:	400204a8 	.word	0x400204a8

08007a44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d101      	bne.n	8007a64 <HAL_DMA_Start_IT+0x20>
 8007a60:	2302      	movs	r3, #2
 8007a62:	e04b      	b.n	8007afc <HAL_DMA_Start_IT+0xb8>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d13a      	bne.n	8007aee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f022 0201 	bic.w	r2, r2, #1
 8007a94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	68b9      	ldr	r1, [r7, #8]
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 f96b 	bl	8007d78 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d008      	beq.n	8007abc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f042 020e 	orr.w	r2, r2, #14
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	e00f      	b.n	8007adc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 0204 	bic.w	r2, r2, #4
 8007aca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f042 020a 	orr.w	r2, r2, #10
 8007ada:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f042 0201 	orr.w	r2, r2, #1
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	e005      	b.n	8007afa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007af6:	2302      	movs	r3, #2
 8007af8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d008      	beq.n	8007b2e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2204      	movs	r2, #4
 8007b20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e022      	b.n	8007b74 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f022 020e 	bic.w	r2, r2, #14
 8007b3c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0201 	bic.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b52:	f003 021c 	and.w	r2, r3, #28
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8007b60:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d005      	beq.n	8007ba4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2204      	movs	r2, #4
 8007b9c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	73fb      	strb	r3, [r7, #15]
 8007ba2:	e029      	b.n	8007bf8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 020e 	bic.w	r2, r2, #14
 8007bb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0201 	bic.w	r2, r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc8:	f003 021c 	and.w	r2, r3, #28
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8007bd6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	4798      	blx	r3
    }
  }
  return status;
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c1e:	f003 031c 	and.w	r3, r3, #28
 8007c22:	2204      	movs	r2, #4
 8007c24:	409a      	lsls	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	4013      	ands	r3, r2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d026      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x7a>
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f003 0304 	and.w	r3, r3, #4
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d021      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0320 	and.w	r3, r3, #32
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d107      	bne.n	8007c56 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0204 	bic.w	r2, r2, #4
 8007c54:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c5a:	f003 021c 	and.w	r2, r3, #28
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c62:	2104      	movs	r1, #4
 8007c64:	fa01 f202 	lsl.w	r2, r1, r2
 8007c68:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d071      	beq.n	8007d56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007c7a:	e06c      	b.n	8007d56 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c80:	f003 031c 	and.w	r3, r3, #28
 8007c84:	2202      	movs	r2, #2
 8007c86:	409a      	lsls	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d02e      	beq.n	8007cee <HAL_DMA_IRQHandler+0xec>
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d029      	beq.n	8007cee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0320 	and.w	r3, r3, #32
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10b      	bne.n	8007cc0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 020a 	bic.w	r2, r2, #10
 8007cb6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc4:	f003 021c 	and.w	r2, r3, #28
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ccc:	2102      	movs	r1, #2
 8007cce:	fa01 f202 	lsl.w	r2, r1, r2
 8007cd2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d038      	beq.n	8007d56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007cec:	e033      	b.n	8007d56 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf2:	f003 031c 	and.w	r3, r3, #28
 8007cf6:	2208      	movs	r2, #8
 8007cf8:	409a      	lsls	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d02a      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x156>
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f003 0308 	and.w	r3, r3, #8
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d025      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 020e 	bic.w	r2, r2, #14
 8007d1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d20:	f003 021c 	and.w	r2, r3, #28
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d28:	2101      	movs	r1, #1
 8007d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8007d2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d004      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007d56:	bf00      	nop
 8007d58:	bf00      	nop
}
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
 8007d84:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d8a:	f003 021c 	and.w	r2, r3, #28
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d92:	2101      	movs	r1, #1
 8007d94:	fa01 f202 	lsl.w	r2, r1, r2
 8007d98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	2b10      	cmp	r3, #16
 8007da8:	d108      	bne.n	8007dbc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007dba:	e007      	b.n	8007dcc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	60da      	str	r2, [r3, #12]
}
 8007dcc:	bf00      	nop
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b087      	sub	sp, #28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007de2:	2300      	movs	r3, #0
 8007de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007de6:	e148      	b.n	800807a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	2101      	movs	r1, #1
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	fa01 f303 	lsl.w	r3, r1, r3
 8007df4:	4013      	ands	r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 813a 	beq.w	8008074 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	f003 0303 	and.w	r3, r3, #3
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d005      	beq.n	8007e18 <HAL_GPIO_Init+0x40>
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f003 0303 	and.w	r3, r3, #3
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d130      	bne.n	8007e7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	005b      	lsls	r3, r3, #1
 8007e22:	2203      	movs	r2, #3
 8007e24:	fa02 f303 	lsl.w	r3, r2, r3
 8007e28:	43db      	mvns	r3, r3
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	68da      	ldr	r2, [r3, #12]
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e4e:	2201      	movs	r2, #1
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	fa02 f303 	lsl.w	r3, r2, r3
 8007e56:	43db      	mvns	r3, r3
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	091b      	lsrs	r3, r3, #4
 8007e64:	f003 0201 	and.w	r2, r3, #1
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f003 0303 	and.w	r3, r3, #3
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d017      	beq.n	8007eb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	2203      	movs	r2, #3
 8007e92:	fa02 f303 	lsl.w	r3, r2, r3
 8007e96:	43db      	mvns	r3, r3
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	689a      	ldr	r2, [r3, #8]
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f003 0303 	and.w	r3, r3, #3
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d123      	bne.n	8007f0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	08da      	lsrs	r2, r3, #3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	3208      	adds	r2, #8
 8007eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ece:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f003 0307 	and.w	r3, r3, #7
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	220f      	movs	r2, #15
 8007eda:	fa02 f303 	lsl.w	r3, r2, r3
 8007ede:	43db      	mvns	r3, r3
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	691a      	ldr	r2, [r3, #16]
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	08da      	lsrs	r2, r3, #3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3208      	adds	r2, #8
 8007f04:	6939      	ldr	r1, [r7, #16]
 8007f06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	2203      	movs	r2, #3
 8007f16:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1a:	43db      	mvns	r3, r3
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f003 0203 	and.w	r2, r3, #3
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 8094 	beq.w	8008074 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f4c:	4b52      	ldr	r3, [pc, #328]	; (8008098 <HAL_GPIO_Init+0x2c0>)
 8007f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f50:	4a51      	ldr	r2, [pc, #324]	; (8008098 <HAL_GPIO_Init+0x2c0>)
 8007f52:	f043 0301 	orr.w	r3, r3, #1
 8007f56:	6613      	str	r3, [r2, #96]	; 0x60
 8007f58:	4b4f      	ldr	r3, [pc, #316]	; (8008098 <HAL_GPIO_Init+0x2c0>)
 8007f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	60bb      	str	r3, [r7, #8]
 8007f62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007f64:	4a4d      	ldr	r2, [pc, #308]	; (800809c <HAL_GPIO_Init+0x2c4>)
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	089b      	lsrs	r3, r3, #2
 8007f6a:	3302      	adds	r3, #2
 8007f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	220f      	movs	r2, #15
 8007f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f80:	43db      	mvns	r3, r3
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	4013      	ands	r3, r2
 8007f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007f8e:	d00d      	beq.n	8007fac <HAL_GPIO_Init+0x1d4>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a43      	ldr	r2, [pc, #268]	; (80080a0 <HAL_GPIO_Init+0x2c8>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d007      	beq.n	8007fa8 <HAL_GPIO_Init+0x1d0>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a42      	ldr	r2, [pc, #264]	; (80080a4 <HAL_GPIO_Init+0x2cc>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d101      	bne.n	8007fa4 <HAL_GPIO_Init+0x1cc>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e004      	b.n	8007fae <HAL_GPIO_Init+0x1d6>
 8007fa4:	2307      	movs	r3, #7
 8007fa6:	e002      	b.n	8007fae <HAL_GPIO_Init+0x1d6>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e000      	b.n	8007fae <HAL_GPIO_Init+0x1d6>
 8007fac:	2300      	movs	r3, #0
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	f002 0203 	and.w	r2, r2, #3
 8007fb4:	0092      	lsls	r2, r2, #2
 8007fb6:	4093      	lsls	r3, r2
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007fbe:	4937      	ldr	r1, [pc, #220]	; (800809c <HAL_GPIO_Init+0x2c4>)
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	089b      	lsrs	r3, r3, #2
 8007fc4:	3302      	adds	r3, #2
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007fcc:	4b36      	ldr	r3, [pc, #216]	; (80080a8 <HAL_GPIO_Init+0x2d0>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	43db      	mvns	r3, r3
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d003      	beq.n	8007ff0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007ff0:	4a2d      	ldr	r2, [pc, #180]	; (80080a8 <HAL_GPIO_Init+0x2d0>)
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007ff6:	4b2c      	ldr	r3, [pc, #176]	; (80080a8 <HAL_GPIO_Init+0x2d0>)
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	43db      	mvns	r3, r3
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	4013      	ands	r3, r2
 8008004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d003      	beq.n	800801a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4313      	orrs	r3, r2
 8008018:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800801a:	4a23      	ldr	r2, [pc, #140]	; (80080a8 <HAL_GPIO_Init+0x2d0>)
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008020:	4b21      	ldr	r3, [pc, #132]	; (80080a8 <HAL_GPIO_Init+0x2d0>)
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	43db      	mvns	r3, r3
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	4013      	ands	r3, r2
 800802e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d003      	beq.n	8008044 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	4313      	orrs	r3, r2
 8008042:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008044:	4a18      	ldr	r2, [pc, #96]	; (80080a8 <HAL_GPIO_Init+0x2d0>)
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800804a:	4b17      	ldr	r3, [pc, #92]	; (80080a8 <HAL_GPIO_Init+0x2d0>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	43db      	mvns	r3, r3
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	4013      	ands	r3, r2
 8008058:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008062:	2b00      	cmp	r3, #0
 8008064:	d003      	beq.n	800806e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4313      	orrs	r3, r2
 800806c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800806e:	4a0e      	ldr	r2, [pc, #56]	; (80080a8 <HAL_GPIO_Init+0x2d0>)
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	3301      	adds	r3, #1
 8008078:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	fa22 f303 	lsr.w	r3, r2, r3
 8008084:	2b00      	cmp	r3, #0
 8008086:	f47f aeaf 	bne.w	8007de8 <HAL_GPIO_Init+0x10>
  }
}
 800808a:	bf00      	nop
 800808c:	bf00      	nop
 800808e:	371c      	adds	r7, #28
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr
 8008098:	40021000 	.word	0x40021000
 800809c:	40010000 	.word	0x40010000
 80080a0:	48000400 	.word	0x48000400
 80080a4:	48000800 	.word	0x48000800
 80080a8:	40010400 	.word	0x40010400

080080ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	460b      	mov	r3, r1
 80080b6:	807b      	strh	r3, [r7, #2]
 80080b8:	4613      	mov	r3, r2
 80080ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80080bc:	787b      	ldrb	r3, [r7, #1]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80080c2:	887a      	ldrh	r2, [r7, #2]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80080c8:	e002      	b.n	80080d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80080ca:	887a      	ldrh	r2, [r7, #2]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4603      	mov	r3, r0
 80080e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80080e6:	4b08      	ldr	r3, [pc, #32]	; (8008108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080e8:	695a      	ldr	r2, [r3, #20]
 80080ea:	88fb      	ldrh	r3, [r7, #6]
 80080ec:	4013      	ands	r3, r2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d006      	beq.n	8008100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80080f2:	4a05      	ldr	r2, [pc, #20]	; (8008108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080f4:	88fb      	ldrh	r3, [r7, #6]
 80080f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80080f8:	88fb      	ldrh	r3, [r7, #6]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7f9 fb3c 	bl	8001778 <HAL_GPIO_EXTI_Callback>
  }
}
 8008100:	bf00      	nop
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	40010400 	.word	0x40010400

0800810c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e08d      	b.n	800823a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d106      	bne.n	8008138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7f9 fa62 	bl	80015fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2224      	movs	r2, #36	; 0x24
 800813c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 0201 	bic.w	r2, r2, #1
 800814e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800815c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	689a      	ldr	r2, [r3, #8]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800816c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d107      	bne.n	8008186 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	689a      	ldr	r2, [r3, #8]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008182:	609a      	str	r2, [r3, #8]
 8008184:	e006      	b.n	8008194 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	689a      	ldr	r2, [r3, #8]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008192:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	2b02      	cmp	r3, #2
 800819a:	d108      	bne.n	80081ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081aa:	605a      	str	r2, [r3, #4]
 80081ac:	e007      	b.n	80081be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	6812      	ldr	r2, [r2, #0]
 80081c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80081cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68da      	ldr	r2, [r3, #12]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691a      	ldr	r2, [r3, #16]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	430a      	orrs	r2, r1
 80081fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	69d9      	ldr	r1, [r3, #28]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a1a      	ldr	r2, [r3, #32]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f042 0201 	orr.w	r2, r2, #1
 800821a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2220      	movs	r2, #32
 8008226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af02      	add	r7, sp, #8
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	4608      	mov	r0, r1
 800824e:	4611      	mov	r1, r2
 8008250:	461a      	mov	r2, r3
 8008252:	4603      	mov	r3, r0
 8008254:	817b      	strh	r3, [r7, #10]
 8008256:	460b      	mov	r3, r1
 8008258:	813b      	strh	r3, [r7, #8]
 800825a:	4613      	mov	r3, r2
 800825c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b20      	cmp	r3, #32
 8008268:	f040 80f9 	bne.w	800845e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <HAL_I2C_Mem_Write+0x34>
 8008272:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008274:	2b00      	cmp	r3, #0
 8008276:	d105      	bne.n	8008284 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800827e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e0ed      	b.n	8008460 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800828a:	2b01      	cmp	r3, #1
 800828c:	d101      	bne.n	8008292 <HAL_I2C_Mem_Write+0x4e>
 800828e:	2302      	movs	r3, #2
 8008290:	e0e6      	b.n	8008460 <HAL_I2C_Mem_Write+0x21c>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800829a:	f7fd ff39 	bl	8006110 <HAL_GetTick>
 800829e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	2319      	movs	r3, #25
 80082a6:	2201      	movs	r2, #1
 80082a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 f955 	bl	800855c <I2C_WaitOnFlagUntilTimeout>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e0d1      	b.n	8008460 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2221      	movs	r2, #33	; 0x21
 80082c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2240      	movs	r2, #64	; 0x40
 80082c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6a3a      	ldr	r2, [r7, #32]
 80082d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80082dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80082e4:	88f8      	ldrh	r0, [r7, #6]
 80082e6:	893a      	ldrh	r2, [r7, #8]
 80082e8:	8979      	ldrh	r1, [r7, #10]
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	4603      	mov	r3, r0
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f000 f8b9 	bl	800846c <I2C_RequestMemoryWrite>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e0a9      	b.n	8008460 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008310:	b29b      	uxth	r3, r3
 8008312:	2bff      	cmp	r3, #255	; 0xff
 8008314:	d90e      	bls.n	8008334 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	22ff      	movs	r2, #255	; 0xff
 800831a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008320:	b2da      	uxtb	r2, r3
 8008322:	8979      	ldrh	r1, [r7, #10]
 8008324:	2300      	movs	r3, #0
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 facf 	bl	80088d0 <I2C_TransferConfig>
 8008332:	e00f      	b.n	8008354 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008338:	b29a      	uxth	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008342:	b2da      	uxtb	r2, r3
 8008344:	8979      	ldrh	r1, [r7, #10]
 8008346:	2300      	movs	r3, #0
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 fabe 	bl	80088d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 f94e 	bl	80085fa <I2C_WaitOnTXISFlagUntilTimeout>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e07b      	b.n	8008460 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	781a      	ldrb	r2, [r3, #0]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	1c5a      	adds	r2, r3, #1
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008382:	b29b      	uxth	r3, r3
 8008384:	3b01      	subs	r3, #1
 8008386:	b29a      	uxth	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008390:	3b01      	subs	r3, #1
 8008392:	b29a      	uxth	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800839c:	b29b      	uxth	r3, r3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d034      	beq.n	800840c <HAL_I2C_Mem_Write+0x1c8>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d130      	bne.n	800840c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	2200      	movs	r2, #0
 80083b2:	2180      	movs	r1, #128	; 0x80
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 f8d1 	bl	800855c <I2C_WaitOnFlagUntilTimeout>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e04d      	b.n	8008460 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	2bff      	cmp	r3, #255	; 0xff
 80083cc:	d90e      	bls.n	80083ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	22ff      	movs	r2, #255	; 0xff
 80083d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	8979      	ldrh	r1, [r7, #10]
 80083dc:	2300      	movs	r3, #0
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 fa73 	bl	80088d0 <I2C_TransferConfig>
 80083ea:	e00f      	b.n	800840c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	8979      	ldrh	r1, [r7, #10]
 80083fe:	2300      	movs	r3, #0
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f000 fa62 	bl	80088d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008410:	b29b      	uxth	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d19e      	bne.n	8008354 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 f934 	bl	8008688 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e01a      	b.n	8008460 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2220      	movs	r2, #32
 8008430:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6859      	ldr	r1, [r3, #4]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	4b0a      	ldr	r3, [pc, #40]	; (8008468 <HAL_I2C_Mem_Write+0x224>)
 800843e:	400b      	ands	r3, r1
 8008440:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2220      	movs	r2, #32
 8008446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	e000      	b.n	8008460 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800845e:	2302      	movs	r3, #2
  }
}
 8008460:	4618      	mov	r0, r3
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	fe00e800 	.word	0xfe00e800

0800846c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af02      	add	r7, sp, #8
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	4608      	mov	r0, r1
 8008476:	4611      	mov	r1, r2
 8008478:	461a      	mov	r2, r3
 800847a:	4603      	mov	r3, r0
 800847c:	817b      	strh	r3, [r7, #10]
 800847e:	460b      	mov	r3, r1
 8008480:	813b      	strh	r3, [r7, #8]
 8008482:	4613      	mov	r3, r2
 8008484:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008486:	88fb      	ldrh	r3, [r7, #6]
 8008488:	b2da      	uxtb	r2, r3
 800848a:	8979      	ldrh	r1, [r7, #10]
 800848c:	4b20      	ldr	r3, [pc, #128]	; (8008510 <I2C_RequestMemoryWrite+0xa4>)
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 fa1b 	bl	80088d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800849a:	69fa      	ldr	r2, [r7, #28]
 800849c:	69b9      	ldr	r1, [r7, #24]
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f000 f8ab 	bl	80085fa <I2C_WaitOnTXISFlagUntilTimeout>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e02c      	b.n	8008508 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084ae:	88fb      	ldrh	r3, [r7, #6]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d105      	bne.n	80084c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084b4:	893b      	ldrh	r3, [r7, #8]
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	629a      	str	r2, [r3, #40]	; 0x28
 80084be:	e015      	b.n	80084ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80084c0:	893b      	ldrh	r3, [r7, #8]
 80084c2:	0a1b      	lsrs	r3, r3, #8
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084ce:	69fa      	ldr	r2, [r7, #28]
 80084d0:	69b9      	ldr	r1, [r7, #24]
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 f891 	bl	80085fa <I2C_WaitOnTXISFlagUntilTimeout>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e012      	b.n	8008508 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084e2:	893b      	ldrh	r3, [r7, #8]
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	2200      	movs	r2, #0
 80084f4:	2180      	movs	r1, #128	; 0x80
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 f830 	bl	800855c <I2C_WaitOnFlagUntilTimeout>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e000      	b.n	8008508 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	80002000 	.word	0x80002000

08008514 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	f003 0302 	and.w	r3, r3, #2
 8008526:	2b02      	cmp	r3, #2
 8008528:	d103      	bne.n	8008532 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2200      	movs	r2, #0
 8008530:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	2b01      	cmp	r3, #1
 800853e:	d007      	beq.n	8008550 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f042 0201 	orr.w	r2, r2, #1
 800854e:	619a      	str	r2, [r3, #24]
  }
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	603b      	str	r3, [r7, #0]
 8008568:	4613      	mov	r3, r2
 800856a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800856c:	e031      	b.n	80085d2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008574:	d02d      	beq.n	80085d2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008576:	f7fd fdcb 	bl	8006110 <HAL_GetTick>
 800857a:	4602      	mov	r2, r0
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	429a      	cmp	r2, r3
 8008584:	d302      	bcc.n	800858c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d122      	bne.n	80085d2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	699a      	ldr	r2, [r3, #24]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	4013      	ands	r3, r2
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	429a      	cmp	r2, r3
 800859a:	bf0c      	ite	eq
 800859c:	2301      	moveq	r3, #1
 800859e:	2300      	movne	r3, #0
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	461a      	mov	r2, r3
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d113      	bne.n	80085d2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ae:	f043 0220 	orr.w	r2, r3, #32
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e00f      	b.n	80085f2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	699a      	ldr	r2, [r3, #24]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	4013      	ands	r3, r2
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	429a      	cmp	r2, r3
 80085e0:	bf0c      	ite	eq
 80085e2:	2301      	moveq	r3, #1
 80085e4:	2300      	movne	r3, #0
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	461a      	mov	r2, r3
 80085ea:	79fb      	ldrb	r3, [r7, #7]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d0be      	beq.n	800856e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b084      	sub	sp, #16
 80085fe:	af00      	add	r7, sp, #0
 8008600:	60f8      	str	r0, [r7, #12]
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008606:	e033      	b.n	8008670 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	68b9      	ldr	r1, [r7, #8]
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f000 f87f 	bl	8008710 <I2C_IsErrorOccurred>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e031      	b.n	8008680 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008622:	d025      	beq.n	8008670 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008624:	f7fd fd74 	bl	8006110 <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	429a      	cmp	r2, r3
 8008632:	d302      	bcc.n	800863a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d11a      	bne.n	8008670 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b02      	cmp	r3, #2
 8008646:	d013      	beq.n	8008670 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800864c:	f043 0220 	orr.w	r2, r3, #32
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2220      	movs	r2, #32
 8008658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e007      	b.n	8008680 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b02      	cmp	r3, #2
 800867c:	d1c4      	bne.n	8008608 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008694:	e02f      	b.n	80086f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	68b9      	ldr	r1, [r7, #8]
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 f838 	bl	8008710 <I2C_IsErrorOccurred>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e02d      	b.n	8008706 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086aa:	f7fd fd31 	bl	8006110 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d302      	bcc.n	80086c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d11a      	bne.n	80086f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	f003 0320 	and.w	r3, r3, #32
 80086ca:	2b20      	cmp	r3, #32
 80086cc:	d013      	beq.n	80086f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d2:	f043 0220 	orr.w	r2, r3, #32
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2220      	movs	r2, #32
 80086de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e007      	b.n	8008706 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	f003 0320 	and.w	r3, r3, #32
 8008700:	2b20      	cmp	r3, #32
 8008702:	d1c8      	bne.n	8008696 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
	...

08008710 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b08a      	sub	sp, #40	; 0x28
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800872a:	2300      	movs	r3, #0
 800872c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	f003 0310 	and.w	r3, r3, #16
 8008738:	2b00      	cmp	r3, #0
 800873a:	d068      	beq.n	800880e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2210      	movs	r2, #16
 8008742:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008744:	e049      	b.n	80087da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874c:	d045      	beq.n	80087da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800874e:	f7fd fcdf 	bl	8006110 <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	429a      	cmp	r2, r3
 800875c:	d302      	bcc.n	8008764 <I2C_IsErrorOccurred+0x54>
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d13a      	bne.n	80087da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800876e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008776:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008786:	d121      	bne.n	80087cc <I2C_IsErrorOccurred+0xbc>
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800878e:	d01d      	beq.n	80087cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008790:	7cfb      	ldrb	r3, [r7, #19]
 8008792:	2b20      	cmp	r3, #32
 8008794:	d01a      	beq.n	80087cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80087a6:	f7fd fcb3 	bl	8006110 <HAL_GetTick>
 80087aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087ac:	e00e      	b.n	80087cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80087ae:	f7fd fcaf 	bl	8006110 <HAL_GetTick>
 80087b2:	4602      	mov	r2, r0
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	2b19      	cmp	r3, #25
 80087ba:	d907      	bls.n	80087cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	f043 0320 	orr.w	r3, r3, #32
 80087c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80087ca:	e006      	b.n	80087da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	f003 0320 	and.w	r3, r3, #32
 80087d6:	2b20      	cmp	r3, #32
 80087d8:	d1e9      	bne.n	80087ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	f003 0320 	and.w	r3, r3, #32
 80087e4:	2b20      	cmp	r3, #32
 80087e6:	d003      	beq.n	80087f0 <I2C_IsErrorOccurred+0xe0>
 80087e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d0aa      	beq.n	8008746 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80087f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d103      	bne.n	8008800 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2220      	movs	r2, #32
 80087fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	f043 0304 	orr.w	r3, r3, #4
 8008806:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00b      	beq.n	8008838 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	f043 0301 	orr.w	r3, r3, #1
 8008826:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008830:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00b      	beq.n	800885a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	f043 0308 	orr.w	r3, r3, #8
 8008848:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008852:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00b      	beq.n	800887c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	f043 0302 	orr.w	r3, r3, #2
 800886a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008874:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800887c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008880:	2b00      	cmp	r3, #0
 8008882:	d01c      	beq.n	80088be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f7ff fe45 	bl	8008514 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	6859      	ldr	r1, [r3, #4]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	4b0d      	ldr	r3, [pc, #52]	; (80088cc <I2C_IsErrorOccurred+0x1bc>)
 8008896:	400b      	ands	r3, r1
 8008898:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	431a      	orrs	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2220      	movs	r2, #32
 80088aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80088be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3728      	adds	r7, #40	; 0x28
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	fe00e800 	.word	0xfe00e800

080088d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b087      	sub	sp, #28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	607b      	str	r3, [r7, #4]
 80088da:	460b      	mov	r3, r1
 80088dc:	817b      	strh	r3, [r7, #10]
 80088de:	4613      	mov	r3, r2
 80088e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088e2:	897b      	ldrh	r3, [r7, #10]
 80088e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80088e8:	7a7b      	ldrb	r3, [r7, #9]
 80088ea:	041b      	lsls	r3, r3, #16
 80088ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	0d5b      	lsrs	r3, r3, #21
 800890a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800890e:	4b08      	ldr	r3, [pc, #32]	; (8008930 <I2C_TransferConfig+0x60>)
 8008910:	430b      	orrs	r3, r1
 8008912:	43db      	mvns	r3, r3
 8008914:	ea02 0103 	and.w	r1, r2, r3
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	430a      	orrs	r2, r1
 8008920:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008922:	bf00      	nop
 8008924:	371c      	adds	r7, #28
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	03ff63ff 	.word	0x03ff63ff

08008934 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b20      	cmp	r3, #32
 8008948:	d138      	bne.n	80089bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008950:	2b01      	cmp	r3, #1
 8008952:	d101      	bne.n	8008958 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008954:	2302      	movs	r3, #2
 8008956:	e032      	b.n	80089be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2224      	movs	r2, #36	; 0x24
 8008964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f022 0201 	bic.w	r2, r2, #1
 8008976:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008986:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6819      	ldr	r1, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	430a      	orrs	r2, r1
 8008996:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0201 	orr.w	r2, r2, #1
 80089a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2220      	movs	r2, #32
 80089ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	e000      	b.n	80089be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80089bc:	2302      	movs	r3, #2
  }
}
 80089be:	4618      	mov	r0, r3
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b085      	sub	sp, #20
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b20      	cmp	r3, #32
 80089de:	d139      	bne.n	8008a54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d101      	bne.n	80089ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80089ea:	2302      	movs	r3, #2
 80089ec:	e033      	b.n	8008a56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2224      	movs	r2, #36	; 0x24
 80089fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f022 0201 	bic.w	r2, r2, #1
 8008a0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008a1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	021b      	lsls	r3, r3, #8
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f042 0201 	orr.w	r2, r2, #1
 8008a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2220      	movs	r2, #32
 8008a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	e000      	b.n	8008a56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008a54:	2302      	movs	r3, #2
  }
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
	...

08008a64 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a6c:	4b0b      	ldr	r3, [pc, #44]	; (8008a9c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a70:	4a0a      	ldr	r2, [pc, #40]	; (8008a9c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008a72:	f043 0301 	orr.w	r3, r3, #1
 8008a76:	6613      	str	r3, [r2, #96]	; 0x60
 8008a78:	4b08      	ldr	r3, [pc, #32]	; (8008a9c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	60fb      	str	r3, [r7, #12]
 8008a82:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8008a84:	4b06      	ldr	r3, [pc, #24]	; (8008aa0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	4905      	ldr	r1, [pc, #20]	; (8008aa0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	604b      	str	r3, [r1, #4]
}
 8008a90:	bf00      	nop
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr
 8008a9c:	40021000 	.word	0x40021000
 8008aa0:	40010000 	.word	0x40010000

08008aa4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aa6:	b08b      	sub	sp, #44	; 0x2c
 8008aa8:	af06      	add	r7, sp, #24
 8008aaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e0f8      	b.n	8008ca8 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d106      	bne.n	8008ad0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f00b f9dc 	bl	8013e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2203      	movs	r2, #3
 8008ad4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f005 ff7b 	bl	800e9d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	603b      	str	r3, [r7, #0]
 8008ae8:	687e      	ldr	r6, [r7, #4]
 8008aea:	466d      	mov	r5, sp
 8008aec:	f106 0410 	add.w	r4, r6, #16
 8008af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	602b      	str	r3, [r5, #0]
 8008af8:	1d33      	adds	r3, r6, #4
 8008afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008afc:	6838      	ldr	r0, [r7, #0]
 8008afe:	f005 ff43 	bl	800e988 <USB_CoreInit>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d005      	beq.n	8008b14 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e0c9      	b.n	8008ca8 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2100      	movs	r1, #0
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f005 ff77 	bl	800ea0e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b20:	2300      	movs	r3, #0
 8008b22:	73fb      	strb	r3, [r7, #15]
 8008b24:	e040      	b.n	8008ba8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008b26:	7bfb      	ldrb	r3, [r7, #15]
 8008b28:	6879      	ldr	r1, [r7, #4]
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	00db      	lsls	r3, r3, #3
 8008b34:	440b      	add	r3, r1
 8008b36:	3301      	adds	r3, #1
 8008b38:	2201      	movs	r2, #1
 8008b3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	1c5a      	adds	r2, r3, #1
 8008b42:	4613      	mov	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	00db      	lsls	r3, r3, #3
 8008b4a:	440b      	add	r3, r1
 8008b4c:	7bfa      	ldrb	r2, [r7, #15]
 8008b4e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	1c5a      	adds	r2, r3, #1
 8008b56:	4613      	mov	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	440b      	add	r3, r1
 8008b60:	3303      	adds	r3, #3
 8008b62:	2200      	movs	r2, #0
 8008b64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008b66:	7bfa      	ldrb	r2, [r7, #15]
 8008b68:	6879      	ldr	r1, [r7, #4]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	00db      	lsls	r3, r3, #3
 8008b72:	440b      	add	r3, r1
 8008b74:	3338      	adds	r3, #56	; 0x38
 8008b76:	2200      	movs	r2, #0
 8008b78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008b7a:	7bfa      	ldrb	r2, [r7, #15]
 8008b7c:	6879      	ldr	r1, [r7, #4]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	440b      	add	r3, r1
 8008b88:	333c      	adds	r3, #60	; 0x3c
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008b8e:	7bfa      	ldrb	r2, [r7, #15]
 8008b90:	6879      	ldr	r1, [r7, #4]
 8008b92:	4613      	mov	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	00db      	lsls	r3, r3, #3
 8008b9a:	440b      	add	r3, r1
 8008b9c:	3340      	adds	r3, #64	; 0x40
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	73fb      	strb	r3, [r7, #15]
 8008ba8:	7bfa      	ldrb	r2, [r7, #15]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d3b9      	bcc.n	8008b26 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]
 8008bb6:	e044      	b.n	8008c42 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008bb8:	7bfa      	ldrb	r2, [r7, #15]
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	00db      	lsls	r3, r3, #3
 8008bc4:	440b      	add	r3, r1
 8008bc6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8008bca:	2200      	movs	r2, #0
 8008bcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008bce:	7bfa      	ldrb	r2, [r7, #15]
 8008bd0:	6879      	ldr	r1, [r7, #4]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	00db      	lsls	r3, r3, #3
 8008bda:	440b      	add	r3, r1
 8008bdc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008be0:	7bfa      	ldrb	r2, [r7, #15]
 8008be2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008be4:	7bfa      	ldrb	r2, [r7, #15]
 8008be6:	6879      	ldr	r1, [r7, #4]
 8008be8:	4613      	mov	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4413      	add	r3, r2
 8008bee:	00db      	lsls	r3, r3, #3
 8008bf0:	440b      	add	r3, r1
 8008bf2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008bfa:	7bfa      	ldrb	r2, [r7, #15]
 8008bfc:	6879      	ldr	r1, [r7, #4]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	00db      	lsls	r3, r3, #3
 8008c06:	440b      	add	r3, r1
 8008c08:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008c10:	7bfa      	ldrb	r2, [r7, #15]
 8008c12:	6879      	ldr	r1, [r7, #4]
 8008c14:	4613      	mov	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4413      	add	r3, r2
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	440b      	add	r3, r1
 8008c1e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008c22:	2200      	movs	r2, #0
 8008c24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008c26:	7bfa      	ldrb	r2, [r7, #15]
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	440b      	add	r3, r1
 8008c34:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008c38:	2200      	movs	r2, #0
 8008c3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	73fb      	strb	r3, [r7, #15]
 8008c42:	7bfa      	ldrb	r2, [r7, #15]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d3b5      	bcc.n	8008bb8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	603b      	str	r3, [r7, #0]
 8008c52:	687e      	ldr	r6, [r7, #4]
 8008c54:	466d      	mov	r5, sp
 8008c56:	f106 0410 	add.w	r4, r6, #16
 8008c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	602b      	str	r3, [r5, #0]
 8008c62:	1d33      	adds	r3, r6, #4
 8008c64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c66:	6838      	ldr	r0, [r7, #0]
 8008c68:	f005 fede 	bl	800ea28 <USB_DevInit>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d005      	beq.n	8008c7e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2202      	movs	r2, #2
 8008c76:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e014      	b.n	8008ca8 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d102      	bne.n	8008c9c <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f001 fc58 	bl	800a54c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f008 f96f 	bl	8010f84 <USB_DevDisconnect>

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3714      	adds	r7, #20
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008cb0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d101      	bne.n	8008cc6 <HAL_PCD_Start+0x16>
 8008cc2:	2302      	movs	r3, #2
 8008cc4:	e012      	b.n	8008cec <HAL_PCD_Start+0x3c>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f005 fe69 	bl	800e9aa <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f008 f93a 	bl	8010f56 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f008 f954 	bl	8010fae <USB_ReadInterrupts>
 8008d06:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fb13 	bl	800933e <PCD_EP_ISR_Handler>

    return;
 8008d18:	e110      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d013      	beq.n	8008d4c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d36:	b292      	uxth	r2, r2
 8008d38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f00b f91e 	bl	8013f7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8008d42:	2100      	movs	r1, #0
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f8fc 	bl	8008f42 <HAL_PCD_SetAddress>

    return;
 8008d4a:	e0f7      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00c      	beq.n	8008d70 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d68:	b292      	uxth	r2, r2
 8008d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008d6e:	e0e5      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00c      	beq.n	8008d94 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d8c:	b292      	uxth	r2, r2
 8008d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008d92:	e0d3      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d034      	beq.n	8008e08 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f022 0204 	bic.w	r2, r2, #4
 8008db0:	b292      	uxth	r2, r2
 8008db2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f022 0208 	bic.w	r2, r2, #8
 8008dc8:	b292      	uxth	r2, r2
 8008dca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d107      	bne.n	8008de8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008de0:	2100      	movs	r1, #0
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f00b fb7c 	bl	80144e0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f00b f901 	bl	8013ff0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e00:	b292      	uxth	r2, r2
 8008e02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008e06:	e099      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d027      	beq.n	8008e62 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f042 0208 	orr.w	r2, r2, #8
 8008e24:	b292      	uxth	r2, r2
 8008e26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e3c:	b292      	uxth	r2, r2
 8008e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f042 0204 	orr.w	r2, r2, #4
 8008e54:	b292      	uxth	r2, r2
 8008e56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f00b f8ae 	bl	8013fbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008e60:	e06c      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d040      	beq.n	8008eee <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e7e:	b292      	uxth	r2, r2
 8008e80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d12b      	bne.n	8008ee6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f042 0204 	orr.w	r2, r2, #4
 8008ea0:	b292      	uxth	r2, r2
 8008ea2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f042 0208 	orr.w	r2, r2, #8
 8008eb8:	b292      	uxth	r2, r2
 8008eba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	089b      	lsrs	r3, r3, #2
 8008ed2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008edc:	2101      	movs	r1, #1
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f00b fafe 	bl	80144e0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008ee4:	e02a      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f00b f868 	bl	8013fbc <HAL_PCD_SuspendCallback>
    return;
 8008eec:	e026      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00f      	beq.n	8008f18 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f0a:	b292      	uxth	r2, r2
 8008f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f00b f826 	bl	8013f62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008f16:	e011      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00c      	beq.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f34:	b292      	uxth	r2, r2
 8008f36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008f3a:	bf00      	nop
  }
}
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b082      	sub	sp, #8
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d101      	bne.n	8008f5c <HAL_PCD_SetAddress+0x1a>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	e013      	b.n	8008f84 <HAL_PCD_SetAddress+0x42>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	78fa      	ldrb	r2, [r7, #3]
 8008f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	78fa      	ldrb	r2, [r7, #3]
 8008f72:	4611      	mov	r1, r2
 8008f74:	4618      	mov	r0, r3
 8008f76:	f007 ffda 	bl	8010f2e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	4608      	mov	r0, r1
 8008f96:	4611      	mov	r1, r2
 8008f98:	461a      	mov	r2, r3
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	70fb      	strb	r3, [r7, #3]
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	803b      	strh	r3, [r7, #0]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008faa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	da0e      	bge.n	8008fd0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fb2:	78fb      	ldrb	r3, [r7, #3]
 8008fb4:	f003 0307 	and.w	r3, r3, #7
 8008fb8:	1c5a      	adds	r2, r3, #1
 8008fba:	4613      	mov	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4413      	add	r3, r2
 8008fc0:	00db      	lsls	r3, r3, #3
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	705a      	strb	r2, [r3, #1]
 8008fce:	e00e      	b.n	8008fee <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fd0:	78fb      	ldrb	r3, [r7, #3]
 8008fd2:	f003 0207 	and.w	r2, r3, #7
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	00db      	lsls	r3, r3, #3
 8008fde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008fee:	78fb      	ldrb	r3, [r7, #3]
 8008ff0:	f003 0307 	and.w	r3, r3, #7
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008ffa:	883a      	ldrh	r2, [r7, #0]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	78ba      	ldrb	r2, [r7, #2]
 8009004:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009006:	78bb      	ldrb	r3, [r7, #2]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d102      	bne.n	8009012 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009018:	2b01      	cmp	r3, #1
 800901a:	d101      	bne.n	8009020 <HAL_PCD_EP_Open+0x94>
 800901c:	2302      	movs	r3, #2
 800901e:	e00e      	b.n	800903e <HAL_PCD_EP_Open+0xb2>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68f9      	ldr	r1, [r7, #12]
 800902e:	4618      	mov	r0, r3
 8009030:	f005 fd1c 	bl	800ea6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800903c:	7afb      	ldrb	r3, [r7, #11]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b084      	sub	sp, #16
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	460b      	mov	r3, r1
 8009050:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009056:	2b00      	cmp	r3, #0
 8009058:	da0e      	bge.n	8009078 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800905a:	78fb      	ldrb	r3, [r7, #3]
 800905c:	f003 0307 	and.w	r3, r3, #7
 8009060:	1c5a      	adds	r2, r3, #1
 8009062:	4613      	mov	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4413      	add	r3, r2
 8009068:	00db      	lsls	r3, r3, #3
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	4413      	add	r3, r2
 800906e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2201      	movs	r2, #1
 8009074:	705a      	strb	r2, [r3, #1]
 8009076:	e00e      	b.n	8009096 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009078:	78fb      	ldrb	r3, [r7, #3]
 800907a:	f003 0207 	and.w	r2, r3, #7
 800907e:	4613      	mov	r3, r2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	4413      	add	r3, r2
 8009084:	00db      	lsls	r3, r3, #3
 8009086:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	4413      	add	r3, r2
 800908e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009096:	78fb      	ldrb	r3, [r7, #3]
 8009098:	f003 0307 	and.w	r3, r3, #7
 800909c:	b2da      	uxtb	r2, r3
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d101      	bne.n	80090b0 <HAL_PCD_EP_Close+0x6a>
 80090ac:	2302      	movs	r3, #2
 80090ae:	e00e      	b.n	80090ce <HAL_PCD_EP_Close+0x88>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68f9      	ldr	r1, [r7, #12]
 80090be:	4618      	mov	r0, r3
 80090c0:	f006 f898 	bl	800f1f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b086      	sub	sp, #24
 80090da:	af00      	add	r7, sp, #0
 80090dc:	60f8      	str	r0, [r7, #12]
 80090de:	607a      	str	r2, [r7, #4]
 80090e0:	603b      	str	r3, [r7, #0]
 80090e2:	460b      	mov	r3, r1
 80090e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090e6:	7afb      	ldrb	r3, [r7, #11]
 80090e8:	f003 0207 	and.w	r2, r3, #7
 80090ec:	4613      	mov	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	00db      	lsls	r3, r3, #3
 80090f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	4413      	add	r3, r2
 80090fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	2200      	movs	r2, #0
 800910e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	2200      	movs	r2, #0
 8009114:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009116:	7afb      	ldrb	r3, [r7, #11]
 8009118:	f003 0307 	and.w	r3, r3, #7
 800911c:	b2da      	uxtb	r2, r3
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6979      	ldr	r1, [r7, #20]
 8009128:	4618      	mov	r0, r3
 800912a:	f006 fa50 	bl	800f5ce <USB_EPStartXfer>

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	460b      	mov	r3, r1
 8009142:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	f003 0207 	and.w	r2, r3, #7
 800914a:	6879      	ldr	r1, [r7, #4]
 800914c:	4613      	mov	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	00db      	lsls	r3, r3, #3
 8009154:	440b      	add	r3, r1
 8009156:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800915a:	681b      	ldr	r3, [r3, #0]
}
 800915c:	4618      	mov	r0, r3
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	607a      	str	r2, [r7, #4]
 8009172:	603b      	str	r3, [r7, #0]
 8009174:	460b      	mov	r3, r1
 8009176:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009178:	7afb      	ldrb	r3, [r7, #11]
 800917a:	f003 0307 	and.w	r3, r3, #7
 800917e:	1c5a      	adds	r2, r3, #1
 8009180:	4613      	mov	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	4413      	add	r3, r2
 800918c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2200      	movs	r2, #0
 80091ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2201      	movs	r2, #1
 80091b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091b4:	7afb      	ldrb	r3, [r7, #11]
 80091b6:	f003 0307 	and.w	r3, r3, #7
 80091ba:	b2da      	uxtb	r2, r3
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6979      	ldr	r1, [r7, #20]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f006 fa01 	bl	800f5ce <USB_EPStartXfer>

  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3718      	adds	r7, #24
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b084      	sub	sp, #16
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	460b      	mov	r3, r1
 80091e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80091e2:	78fb      	ldrb	r3, [r7, #3]
 80091e4:	f003 0207 	and.w	r2, r3, #7
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d901      	bls.n	80091f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e04c      	b.n	800928e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80091f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	da0e      	bge.n	800921a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	f003 0307 	and.w	r3, r3, #7
 8009202:	1c5a      	adds	r2, r3, #1
 8009204:	4613      	mov	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	00db      	lsls	r3, r3, #3
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	4413      	add	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2201      	movs	r2, #1
 8009216:	705a      	strb	r2, [r3, #1]
 8009218:	e00c      	b.n	8009234 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800921a:	78fa      	ldrb	r2, [r7, #3]
 800921c:	4613      	mov	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	00db      	lsls	r3, r3, #3
 8009224:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	4413      	add	r3, r2
 800922c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2201      	movs	r2, #1
 8009238:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800923a:	78fb      	ldrb	r3, [r7, #3]
 800923c:	f003 0307 	and.w	r3, r3, #7
 8009240:	b2da      	uxtb	r2, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800924c:	2b01      	cmp	r3, #1
 800924e:	d101      	bne.n	8009254 <HAL_PCD_EP_SetStall+0x7e>
 8009250:	2302      	movs	r3, #2
 8009252:	e01c      	b.n	800928e <HAL_PCD_EP_SetStall+0xb8>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68f9      	ldr	r1, [r7, #12]
 8009262:	4618      	mov	r0, r3
 8009264:	f007 fd64 	bl	8010d30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009268:	78fb      	ldrb	r3, [r7, #3]
 800926a:	f003 0307 	and.w	r3, r3, #7
 800926e:	2b00      	cmp	r3, #0
 8009270:	d108      	bne.n	8009284 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800927c:	4619      	mov	r1, r3
 800927e:	4610      	mov	r0, r2
 8009280:	f007 fea5 	bl	8010fce <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b084      	sub	sp, #16
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	460b      	mov	r3, r1
 80092a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80092a2:	78fb      	ldrb	r3, [r7, #3]
 80092a4:	f003 020f 	and.w	r2, r3, #15
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d901      	bls.n	80092b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e040      	b.n	8009336 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80092b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	da0e      	bge.n	80092da <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092bc:	78fb      	ldrb	r3, [r7, #3]
 80092be:	f003 0307 	and.w	r3, r3, #7
 80092c2:	1c5a      	adds	r2, r3, #1
 80092c4:	4613      	mov	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	00db      	lsls	r3, r3, #3
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	4413      	add	r3, r2
 80092d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	705a      	strb	r2, [r3, #1]
 80092d8:	e00e      	b.n	80092f8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092da:	78fb      	ldrb	r3, [r7, #3]
 80092dc:	f003 0207 	and.w	r2, r3, #7
 80092e0:	4613      	mov	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4413      	add	r3, r2
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	4413      	add	r3, r2
 80092f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092fe:	78fb      	ldrb	r3, [r7, #3]
 8009300:	f003 0307 	and.w	r3, r3, #7
 8009304:	b2da      	uxtb	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009310:	2b01      	cmp	r3, #1
 8009312:	d101      	bne.n	8009318 <HAL_PCD_EP_ClrStall+0x82>
 8009314:	2302      	movs	r3, #2
 8009316:	e00e      	b.n	8009336 <HAL_PCD_EP_ClrStall+0xa0>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68f9      	ldr	r1, [r7, #12]
 8009326:	4618      	mov	r0, r3
 8009328:	f007 fd53 	bl	8010dd2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b096      	sub	sp, #88	; 0x58
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009346:	e3b1      	b.n	8009aac <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009350:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009354:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009358:	b2db      	uxtb	r3, r3
 800935a:	f003 030f 	and.w	r3, r3, #15
 800935e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8009362:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009366:	2b00      	cmp	r3, #0
 8009368:	f040 8173 	bne.w	8009652 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800936c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009370:	f003 0310 	and.w	r3, r3, #16
 8009374:	2b00      	cmp	r3, #0
 8009376:	d150      	bne.n	800941a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	881b      	ldrh	r3, [r3, #0]
 800937e:	b29b      	uxth	r3, r3
 8009380:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009388:	81fb      	strh	r3, [r7, #14]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	89fb      	ldrh	r3, [r7, #14]
 8009390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009398:	b29b      	uxth	r3, r3
 800939a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	3328      	adds	r3, #40	; 0x28
 80093a0:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	461a      	mov	r2, r3
 80093ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	00db      	lsls	r3, r3, #3
 80093b4:	4413      	add	r3, r2
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	6812      	ldr	r2, [r2, #0]
 80093ba:	4413      	add	r3, r2
 80093bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80093c0:	881b      	ldrh	r3, [r3, #0]
 80093c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80093c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80093ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093cc:	695a      	ldr	r2, [r3, #20]
 80093ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093d0:	69db      	ldr	r3, [r3, #28]
 80093d2:	441a      	add	r2, r3
 80093d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80093d8:	2100      	movs	r1, #0
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f00a fda7 	bl	8013f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 835f 	beq.w	8009aac <PCD_EP_ISR_Handler+0x76e>
 80093ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f040 835a 	bne.w	8009aac <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009404:	b2da      	uxtb	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	b292      	uxth	r2, r2
 800940c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009418:	e348      	b.n	8009aac <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009420:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	881b      	ldrh	r3, [r3, #0]
 8009428:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800942c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009434:	2b00      	cmp	r3, #0
 8009436:	d032      	beq.n	800949e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009440:	b29b      	uxth	r3, r3
 8009442:	461a      	mov	r2, r3
 8009444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	00db      	lsls	r3, r3, #3
 800944a:	4413      	add	r3, r2
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	6812      	ldr	r2, [r2, #0]
 8009450:	4413      	add	r3, r2
 8009452:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009456:	881b      	ldrh	r3, [r3, #0]
 8009458:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800945c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800945e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6818      	ldr	r0, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800946a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800946c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800946e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009470:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009472:	b29b      	uxth	r3, r3
 8009474:	f007 fdf9 	bl	801106a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	b29a      	uxth	r2, r3
 8009480:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009484:	4013      	ands	r3, r2
 8009486:	823b      	strh	r3, [r7, #16]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	8a3a      	ldrh	r2, [r7, #16]
 800948e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009492:	b292      	uxth	r2, r2
 8009494:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f00a fd1c 	bl	8013ed4 <HAL_PCD_SetupStageCallback>
 800949c:	e306      	b.n	8009aac <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800949e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f280 8302 	bge.w	8009aac <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80094b4:	4013      	ands	r3, r2
 80094b6:	83fb      	strh	r3, [r7, #30]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	8bfa      	ldrh	r2, [r7, #30]
 80094be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80094c2:	b292      	uxth	r2, r2
 80094c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	461a      	mov	r2, r3
 80094d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	00db      	lsls	r3, r3, #3
 80094d8:	4413      	add	r3, r2
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	6812      	ldr	r2, [r2, #0]
 80094de:	4413      	add	r3, r2
 80094e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80094ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094ec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80094ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d019      	beq.n	800952a <PCD_EP_ISR_Handler+0x1ec>
 80094f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094f8:	695b      	ldr	r3, [r3, #20]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d015      	beq.n	800952a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6818      	ldr	r0, [r3, #0]
 8009502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009504:	6959      	ldr	r1, [r3, #20]
 8009506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009508:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800950a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800950c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800950e:	b29b      	uxth	r3, r3
 8009510:	f007 fdab 	bl	801106a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009516:	695a      	ldr	r2, [r3, #20]
 8009518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800951a:	69db      	ldr	r3, [r3, #28]
 800951c:	441a      	add	r2, r3
 800951e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009520:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009522:	2100      	movs	r1, #0
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f00a fce7 	bl	8013ef8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009534:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800953c:	2b00      	cmp	r3, #0
 800953e:	f040 82b5 	bne.w	8009aac <PCD_EP_ISR_Handler+0x76e>
 8009542:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009546:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800954a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800954e:	f000 82ad 	beq.w	8009aac <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	61bb      	str	r3, [r7, #24]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009560:	b29b      	uxth	r3, r3
 8009562:	461a      	mov	r2, r3
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	4413      	add	r3, r2
 8009568:	61bb      	str	r3, [r7, #24]
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009570:	617b      	str	r3, [r7, #20]
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	b29b      	uxth	r3, r3
 8009578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800957c:	b29a      	uxth	r2, r3
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	801a      	strh	r2, [r3, #0]
 8009582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	2b3e      	cmp	r3, #62	; 0x3e
 8009588:	d91d      	bls.n	80095c6 <PCD_EP_ISR_Handler+0x288>
 800958a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	095b      	lsrs	r3, r3, #5
 8009590:	647b      	str	r3, [r7, #68]	; 0x44
 8009592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	f003 031f 	and.w	r3, r3, #31
 800959a:	2b00      	cmp	r3, #0
 800959c:	d102      	bne.n	80095a4 <PCD_EP_ISR_Handler+0x266>
 800959e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095a0:	3b01      	subs	r3, #1
 80095a2:	647b      	str	r3, [r7, #68]	; 0x44
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	029b      	lsls	r3, r3, #10
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	4313      	orrs	r3, r2
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095be:	b29a      	uxth	r2, r3
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	801a      	strh	r2, [r3, #0]
 80095c4:	e026      	b.n	8009614 <PCD_EP_ISR_Handler+0x2d6>
 80095c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10a      	bne.n	80095e4 <PCD_EP_ISR_Handler+0x2a6>
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095dc:	b29a      	uxth	r2, r3
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	801a      	strh	r2, [r3, #0]
 80095e2:	e017      	b.n	8009614 <PCD_EP_ISR_Handler+0x2d6>
 80095e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	085b      	lsrs	r3, r3, #1
 80095ea:	647b      	str	r3, [r7, #68]	; 0x44
 80095ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	f003 0301 	and.w	r3, r3, #1
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <PCD_EP_ISR_Handler+0x2c0>
 80095f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095fa:	3301      	adds	r3, #1
 80095fc:	647b      	str	r3, [r7, #68]	; 0x44
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	881b      	ldrh	r3, [r3, #0]
 8009602:	b29a      	uxth	r2, r3
 8009604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009606:	b29b      	uxth	r3, r3
 8009608:	029b      	lsls	r3, r3, #10
 800960a:	b29b      	uxth	r3, r3
 800960c:	4313      	orrs	r3, r2
 800960e:	b29a      	uxth	r2, r3
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	b29b      	uxth	r3, r3
 800961c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009624:	827b      	strh	r3, [r7, #18]
 8009626:	8a7b      	ldrh	r3, [r7, #18]
 8009628:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800962c:	827b      	strh	r3, [r7, #18]
 800962e:	8a7b      	ldrh	r3, [r7, #18]
 8009630:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009634:	827b      	strh	r3, [r7, #18]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	8a7b      	ldrh	r3, [r7, #18]
 800963c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800964c:	b29b      	uxth	r3, r3
 800964e:	8013      	strh	r3, [r2, #0]
 8009650:	e22c      	b.n	8009aac <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4413      	add	r3, r2
 8009660:	881b      	ldrh	r3, [r3, #0]
 8009662:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009666:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800966a:	2b00      	cmp	r3, #0
 800966c:	f280 80f6 	bge.w	800985c <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	461a      	mov	r2, r3
 8009676:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4413      	add	r3, r2
 800967e:	881b      	ldrh	r3, [r3, #0]
 8009680:	b29a      	uxth	r2, r3
 8009682:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009686:	4013      	ands	r3, r2
 8009688:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	461a      	mov	r2, r3
 8009692:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800969e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80096a2:	b292      	uxth	r2, r2
 80096a4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80096a6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	00db      	lsls	r3, r3, #3
 80096b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	4413      	add	r3, r2
 80096ba:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80096bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096be:	7b1b      	ldrb	r3, [r3, #12]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d123      	bne.n	800970c <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	461a      	mov	r2, r3
 80096d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	00db      	lsls	r3, r3, #3
 80096d6:	4413      	add	r3, r2
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	6812      	ldr	r2, [r2, #0]
 80096dc:	4413      	add	r3, r2
 80096de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80096e2:	881b      	ldrh	r3, [r3, #0]
 80096e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096e8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80096ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f000 808e 	beq.w	8009812 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6818      	ldr	r0, [r3, #0]
 80096fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096fc:	6959      	ldr	r1, [r3, #20]
 80096fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009700:	88da      	ldrh	r2, [r3, #6]
 8009702:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009706:	f007 fcb0 	bl	801106a <USB_ReadPMA>
 800970a:	e082      	b.n	8009812 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800970c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800970e:	78db      	ldrb	r3, [r3, #3]
 8009710:	2b02      	cmp	r3, #2
 8009712:	d10a      	bne.n	800972a <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009714:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009718:	461a      	mov	r2, r3
 800971a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 f9d3 	bl	8009ac8 <HAL_PCD_EP_DB_Receive>
 8009722:	4603      	mov	r3, r0
 8009724:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8009728:	e073      	b.n	8009812 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	461a      	mov	r2, r3
 8009730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	881b      	ldrh	r3, [r3, #0]
 800973a:	b29b      	uxth	r3, r3
 800973c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009744:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	461a      	mov	r2, r3
 800974e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	441a      	add	r2, r3
 8009756:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800975a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800975e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009766:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800976a:	b29b      	uxth	r3, r3
 800976c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	881b      	ldrh	r3, [r3, #0]
 800977e:	b29b      	uxth	r3, r3
 8009780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009784:	2b00      	cmp	r3, #0
 8009786:	d022      	beq.n	80097ce <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009790:	b29b      	uxth	r3, r3
 8009792:	461a      	mov	r2, r3
 8009794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	00db      	lsls	r3, r3, #3
 800979a:	4413      	add	r3, r2
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	6812      	ldr	r2, [r2, #0]
 80097a0:	4413      	add	r3, r2
 80097a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80097a6:	881b      	ldrh	r3, [r3, #0]
 80097a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097ac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80097b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d02c      	beq.n	8009812 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6818      	ldr	r0, [r3, #0]
 80097bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097be:	6959      	ldr	r1, [r3, #20]
 80097c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097c2:	891a      	ldrh	r2, [r3, #8]
 80097c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80097c8:	f007 fc4f 	bl	801106a <USB_ReadPMA>
 80097cc:	e021      	b.n	8009812 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	461a      	mov	r2, r3
 80097da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	00db      	lsls	r3, r3, #3
 80097e0:	4413      	add	r3, r2
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	6812      	ldr	r2, [r2, #0]
 80097e6:	4413      	add	r3, r2
 80097e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80097ec:	881b      	ldrh	r3, [r3, #0]
 80097ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097f2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80097f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d009      	beq.n	8009812 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6818      	ldr	r0, [r3, #0]
 8009802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009804:	6959      	ldr	r1, [r3, #20]
 8009806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009808:	895a      	ldrh	r2, [r3, #10]
 800980a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800980e:	f007 fc2c 	bl	801106a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8009812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009814:	69da      	ldr	r2, [r3, #28]
 8009816:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800981a:	441a      	add	r2, r3
 800981c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800981e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009822:	695a      	ldr	r2, [r3, #20]
 8009824:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009828:	441a      	add	r2, r3
 800982a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800982c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800982e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d005      	beq.n	8009842 <PCD_EP_ISR_Handler+0x504>
 8009836:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800983a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	429a      	cmp	r2, r3
 8009840:	d206      	bcs.n	8009850 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	4619      	mov	r1, r3
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f00a fb55 	bl	8013ef8 <HAL_PCD_DataOutStageCallback>
 800984e:	e005      	b.n	800985c <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009856:	4618      	mov	r0, r3
 8009858:	f005 feb9 	bl	800f5ce <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800985c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 8121 	beq.w	8009aac <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 800986a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800986e:	1c5a      	adds	r2, r3, #1
 8009870:	4613      	mov	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	00db      	lsls	r3, r3, #3
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	4413      	add	r3, r2
 800987c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	461a      	mov	r2, r3
 8009884:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	881b      	ldrh	r3, [r3, #0]
 800988e:	b29b      	uxth	r3, r3
 8009890:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009898:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	461a      	mov	r2, r3
 80098a2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	441a      	add	r2, r3
 80098aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80098ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80098ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098bc:	78db      	ldrb	r3, [r3, #3]
 80098be:	2b01      	cmp	r3, #1
 80098c0:	f040 80a2 	bne.w	8009a08 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 80098c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098c6:	2200      	movs	r2, #0
 80098c8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80098ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098cc:	7b1b      	ldrb	r3, [r3, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f000 8093 	beq.w	80099fa <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80098d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80098d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d046      	beq.n	800996e <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80098e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098e2:	785b      	ldrb	r3, [r3, #1]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d126      	bne.n	8009936 <PCD_EP_ISR_Handler+0x5f8>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	627b      	str	r3, [r7, #36]	; 0x24
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	461a      	mov	r2, r3
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	4413      	add	r3, r2
 80098fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	00da      	lsls	r2, r3, #3
 8009906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009908:	4413      	add	r3, r2
 800990a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800990e:	623b      	str	r3, [r7, #32]
 8009910:	6a3b      	ldr	r3, [r7, #32]
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	b29b      	uxth	r3, r3
 8009916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800991a:	b29a      	uxth	r2, r3
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	801a      	strh	r2, [r3, #0]
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	881b      	ldrh	r3, [r3, #0]
 8009924:	b29b      	uxth	r3, r3
 8009926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800992a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800992e:	b29a      	uxth	r2, r3
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	801a      	strh	r2, [r3, #0]
 8009934:	e061      	b.n	80099fa <PCD_EP_ISR_Handler+0x6bc>
 8009936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009938:	785b      	ldrb	r3, [r3, #1]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d15d      	bne.n	80099fa <PCD_EP_ISR_Handler+0x6bc>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800994c:	b29b      	uxth	r3, r3
 800994e:	461a      	mov	r2, r3
 8009950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009952:	4413      	add	r3, r2
 8009954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	00da      	lsls	r2, r3, #3
 800995c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995e:	4413      	add	r3, r2
 8009960:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009964:	62bb      	str	r3, [r7, #40]	; 0x28
 8009966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009968:	2200      	movs	r2, #0
 800996a:	801a      	strh	r2, [r3, #0]
 800996c:	e045      	b.n	80099fa <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009976:	785b      	ldrb	r3, [r3, #1]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d126      	bne.n	80099ca <PCD_EP_ISR_Handler+0x68c>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	637b      	str	r3, [r7, #52]	; 0x34
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800998a:	b29b      	uxth	r3, r3
 800998c:	461a      	mov	r2, r3
 800998e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009990:	4413      	add	r3, r2
 8009992:	637b      	str	r3, [r7, #52]	; 0x34
 8009994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	00da      	lsls	r2, r3, #3
 800999a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800999c:	4413      	add	r3, r2
 800999e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80099a2:	633b      	str	r3, [r7, #48]	; 0x30
 80099a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a6:	881b      	ldrh	r3, [r3, #0]
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b2:	801a      	strh	r2, [r3, #0]
 80099b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b6:	881b      	ldrh	r3, [r3, #0]
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c6:	801a      	strh	r2, [r3, #0]
 80099c8:	e017      	b.n	80099fa <PCD_EP_ISR_Handler+0x6bc>
 80099ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099cc:	785b      	ldrb	r3, [r3, #1]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d113      	bne.n	80099fa <PCD_EP_ISR_Handler+0x6bc>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099da:	b29b      	uxth	r3, r3
 80099dc:	461a      	mov	r2, r3
 80099de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099e0:	4413      	add	r3, r2
 80099e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	00da      	lsls	r2, r3, #3
 80099ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ec:	4413      	add	r3, r2
 80099ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80099f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80099f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f6:	2200      	movs	r2, #0
 80099f8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80099fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f00a fa94 	bl	8013f2e <HAL_PCD_DataInStageCallback>
 8009a06:	e051      	b.n	8009aac <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8009a08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d144      	bne.n	8009a9e <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	461a      	mov	r2, r3
 8009a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	00db      	lsls	r3, r3, #3
 8009a26:	4413      	add	r3, r2
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	6812      	ldr	r2, [r2, #0]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a38:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8009a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a3e:	699a      	ldr	r2, [r3, #24]
 8009a40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d907      	bls.n	8009a58 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8009a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a4a:	699a      	ldr	r2, [r3, #24]
 8009a4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009a50:	1ad2      	subs	r2, r2, r3
 8009a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a54:	619a      	str	r2, [r3, #24]
 8009a56:	e002      	b.n	8009a5e <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8009a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8009a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a60:	699b      	ldr	r3, [r3, #24]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d106      	bne.n	8009a74 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f00a fa5e 	bl	8013f2e <HAL_PCD_DataInStageCallback>
 8009a72:	e01b      	b.n	8009aac <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a76:	695a      	ldr	r2, [r3, #20]
 8009a78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009a7c:	441a      	add	r2, r3
 8009a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a80:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a84:	69da      	ldr	r2, [r3, #28]
 8009a86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009a8a:	441a      	add	r2, r3
 8009a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a8e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a96:	4618      	mov	r0, r3
 8009a98:	f005 fd99 	bl	800f5ce <USB_EPStartXfer>
 8009a9c:	e006      	b.n	8009aac <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009a9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f917 	bl	8009cda <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	b21b      	sxth	r3, r3
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f6ff ac45 	blt.w	8009348 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3758      	adds	r7, #88	; 0x58
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b088      	sub	sp, #32
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009ad6:	88fb      	ldrh	r3, [r7, #6]
 8009ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d07c      	beq.n	8009bda <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	461a      	mov	r2, r3
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	00db      	lsls	r3, r3, #3
 8009af2:	4413      	add	r3, r2
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	6812      	ldr	r2, [r2, #0]
 8009af8:	4413      	add	r3, r2
 8009afa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b04:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	699a      	ldr	r2, [r3, #24]
 8009b0a:	8b7b      	ldrh	r3, [r7, #26]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d306      	bcc.n	8009b1e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	699a      	ldr	r2, [r3, #24]
 8009b14:	8b7b      	ldrh	r3, [r7, #26]
 8009b16:	1ad2      	subs	r2, r2, r3
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	619a      	str	r2, [r3, #24]
 8009b1c:	e002      	b.n	8009b24 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	2200      	movs	r2, #0
 8009b22:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d123      	bne.n	8009b74 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	461a      	mov	r2, r3
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4413      	add	r3, r2
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b46:	833b      	strh	r3, [r7, #24]
 8009b48:	8b3b      	ldrh	r3, [r7, #24]
 8009b4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b4e:	833b      	strh	r3, [r7, #24]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	461a      	mov	r2, r3
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	441a      	add	r2, r3
 8009b5e:	8b3b      	ldrh	r3, [r7, #24]
 8009b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009b74:	88fb      	ldrh	r3, [r7, #6]
 8009b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d01f      	beq.n	8009bbe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	461a      	mov	r2, r3
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	881b      	ldrh	r3, [r3, #0]
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b98:	82fb      	strh	r3, [r7, #22]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	441a      	add	r2, r3
 8009ba8:	8afb      	ldrh	r3, [r7, #22]
 8009baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009bbe:	8b7b      	ldrh	r3, [r7, #26]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 8085 	beq.w	8009cd0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6818      	ldr	r0, [r3, #0]
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	6959      	ldr	r1, [r3, #20]
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	891a      	ldrh	r2, [r3, #8]
 8009bd2:	8b7b      	ldrh	r3, [r7, #26]
 8009bd4:	f007 fa49 	bl	801106a <USB_ReadPMA>
 8009bd8:	e07a      	b.n	8009cd0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	461a      	mov	r2, r3
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	00db      	lsls	r3, r3, #3
 8009bec:	4413      	add	r3, r2
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	6812      	ldr	r2, [r2, #0]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009bf8:	881b      	ldrh	r3, [r3, #0]
 8009bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bfe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	699a      	ldr	r2, [r3, #24]
 8009c04:	8b7b      	ldrh	r3, [r7, #26]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d306      	bcc.n	8009c18 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	699a      	ldr	r2, [r3, #24]
 8009c0e:	8b7b      	ldrh	r3, [r7, #26]
 8009c10:	1ad2      	subs	r2, r2, r3
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	619a      	str	r2, [r3, #24]
 8009c16:	e002      	b.n	8009c1e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d123      	bne.n	8009c6e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4413      	add	r3, r2
 8009c34:	881b      	ldrh	r3, [r3, #0]
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c40:	83fb      	strh	r3, [r7, #30]
 8009c42:	8bfb      	ldrh	r3, [r7, #30]
 8009c44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c48:	83fb      	strh	r3, [r7, #30]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	441a      	add	r2, r3
 8009c58:	8bfb      	ldrh	r3, [r7, #30]
 8009c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009c6e:	88fb      	ldrh	r3, [r7, #6]
 8009c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d11f      	bne.n	8009cb8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c92:	83bb      	strh	r3, [r7, #28]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	461a      	mov	r2, r3
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	441a      	add	r2, r3
 8009ca2:	8bbb      	ldrh	r3, [r7, #28]
 8009ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009cb8:	8b7b      	ldrh	r3, [r7, #26]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d008      	beq.n	8009cd0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6818      	ldr	r0, [r3, #0]
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	6959      	ldr	r1, [r3, #20]
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	895a      	ldrh	r2, [r3, #10]
 8009cca:	8b7b      	ldrh	r3, [r7, #26]
 8009ccc:	f007 f9cd 	bl	801106a <USB_ReadPMA>
    }
  }

  return count;
 8009cd0:	8b7b      	ldrh	r3, [r7, #26]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3720      	adds	r7, #32
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b0a4      	sub	sp, #144	; 0x90
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	60b9      	str	r1, [r7, #8]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009ce8:	88fb      	ldrh	r3, [r7, #6]
 8009cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f000 81db 	beq.w	800a0aa <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	461a      	mov	r2, r3
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	00db      	lsls	r3, r3, #3
 8009d06:	4413      	add	r3, r2
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	6812      	ldr	r2, [r2, #0]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d12:	881b      	ldrh	r3, [r3, #0]
 8009d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d18:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	699a      	ldr	r2, [r3, #24]
 8009d20:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d907      	bls.n	8009d38 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	699a      	ldr	r2, [r3, #24]
 8009d2c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009d30:	1ad2      	subs	r2, r2, r3
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	619a      	str	r2, [r3, #24]
 8009d36:	e002      	b.n	8009d3e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	f040 80b9 	bne.w	8009eba <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	785b      	ldrb	r3, [r3, #1]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d126      	bne.n	8009d9e <HAL_PCD_EP_DB_Transmit+0xc4>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	461a      	mov	r2, r3
 8009d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d64:	4413      	add	r3, r2
 8009d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	00da      	lsls	r2, r3, #3
 8009d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d70:	4413      	add	r3, r2
 8009d72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	881b      	ldrh	r3, [r3, #0]
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d86:	801a      	strh	r2, [r3, #0]
 8009d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8a:	881b      	ldrh	r3, [r3, #0]
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9a:	801a      	strh	r2, [r3, #0]
 8009d9c:	e01a      	b.n	8009dd4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	785b      	ldrb	r3, [r3, #1]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d116      	bne.n	8009dd4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	637b      	str	r3, [r7, #52]	; 0x34
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	461a      	mov	r2, r3
 8009db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dba:	4413      	add	r3, r2
 8009dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	00da      	lsls	r2, r3, #3
 8009dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	785b      	ldrb	r3, [r3, #1]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d126      	bne.n	8009e30 <HAL_PCD_EP_DB_Transmit+0x156>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	61fb      	str	r3, [r7, #28]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	461a      	mov	r2, r3
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	4413      	add	r3, r2
 8009df8:	61fb      	str	r3, [r7, #28]
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	00da      	lsls	r2, r3, #3
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	4413      	add	r3, r2
 8009e04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e08:	61bb      	str	r3, [r7, #24]
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	881b      	ldrh	r3, [r3, #0]
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	801a      	strh	r2, [r3, #0]
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	801a      	strh	r2, [r3, #0]
 8009e2e:	e017      	b.n	8009e60 <HAL_PCD_EP_DB_Transmit+0x186>
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	785b      	ldrb	r3, [r3, #1]
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d113      	bne.n	8009e60 <HAL_PCD_EP_DB_Transmit+0x186>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	461a      	mov	r2, r3
 8009e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e46:	4413      	add	r3, r2
 8009e48:	627b      	str	r3, [r7, #36]	; 0x24
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	00da      	lsls	r2, r3, #3
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	4413      	add	r3, r2
 8009e54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e58:	623b      	str	r3, [r7, #32]
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	4619      	mov	r1, r3
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f00a f861 	bl	8013f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009e6c:	88fb      	ldrh	r3, [r7, #6]
 8009e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f000 82fa 	beq.w	800a46c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	881b      	ldrh	r3, [r3, #0]
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e92:	82fb      	strh	r3, [r7, #22]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	461a      	mov	r2, r3
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	441a      	add	r2, r3
 8009ea2:	8afb      	ldrh	r3, [r7, #22]
 8009ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	8013      	strh	r3, [r2, #0]
 8009eb8:	e2d8      	b.n	800a46c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009eba:	88fb      	ldrh	r3, [r7, #6]
 8009ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d021      	beq.n	8009f08 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	881b      	ldrh	r3, [r3, #0]
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ede:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	441a      	add	r2, r3
 8009ef0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	f040 82ac 	bne.w	800a46c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	695a      	ldr	r2, [r3, #20]
 8009f18:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009f1c:	441a      	add	r2, r3
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	69da      	ldr	r2, [r3, #28]
 8009f26:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009f2a:	441a      	add	r2, r3
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	6a1a      	ldr	r2, [r3, #32]
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	691b      	ldr	r3, [r3, #16]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d30b      	bcc.n	8009f54 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	6a1a      	ldr	r2, [r3, #32]
 8009f48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f4c:	1ad2      	subs	r2, r2, r3
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	621a      	str	r2, [r3, #32]
 8009f52:	e017      	b.n	8009f84 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	6a1b      	ldr	r3, [r3, #32]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d108      	bne.n	8009f6e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8009f5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009f60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009f6c:	e00a      	b.n	8009f84 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	2200      	movs	r2, #0
 8009f82:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	785b      	ldrb	r3, [r3, #1]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d165      	bne.n	800a058 <HAL_PCD_EP_DB_Transmit+0x37e>
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fa0:	4413      	add	r3, r2
 8009fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	00da      	lsls	r2, r3, #3
 8009faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fac:	4413      	add	r3, r2
 8009fae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc2:	801a      	strh	r2, [r3, #0]
 8009fc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009fc8:	2b3e      	cmp	r3, #62	; 0x3e
 8009fca:	d91d      	bls.n	800a008 <HAL_PCD_EP_DB_Transmit+0x32e>
 8009fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009fd0:	095b      	lsrs	r3, r3, #5
 8009fd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009fd8:	f003 031f 	and.w	r3, r3, #31
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d102      	bne.n	8009fe6 <HAL_PCD_EP_DB_Transmit+0x30c>
 8009fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe8:	881b      	ldrh	r3, [r3, #0]
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	029b      	lsls	r3, r3, #10
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a000:	b29a      	uxth	r2, r3
 800a002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a004:	801a      	strh	r2, [r3, #0]
 800a006:	e044      	b.n	800a092 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a008:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10a      	bne.n	800a026 <HAL_PCD_EP_DB_Transmit+0x34c>
 800a010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a012:	881b      	ldrh	r3, [r3, #0]
 800a014:	b29b      	uxth	r3, r3
 800a016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a01a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a01e:	b29a      	uxth	r2, r3
 800a020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a022:	801a      	strh	r2, [r3, #0]
 800a024:	e035      	b.n	800a092 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a02a:	085b      	lsrs	r3, r3, #1
 800a02c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a02e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b00      	cmp	r3, #0
 800a038:	d002      	beq.n	800a040 <HAL_PCD_EP_DB_Transmit+0x366>
 800a03a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a03c:	3301      	adds	r3, #1
 800a03e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a042:	881b      	ldrh	r3, [r3, #0]
 800a044:	b29a      	uxth	r2, r3
 800a046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a048:	b29b      	uxth	r3, r3
 800a04a:	029b      	lsls	r3, r3, #10
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	4313      	orrs	r3, r2
 800a050:	b29a      	uxth	r2, r3
 800a052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a054:	801a      	strh	r2, [r3, #0]
 800a056:	e01c      	b.n	800a092 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	785b      	ldrb	r3, [r3, #1]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d118      	bne.n	800a092 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	647b      	str	r3, [r7, #68]	; 0x44
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a06e:	b29b      	uxth	r3, r3
 800a070:	461a      	mov	r2, r3
 800a072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a074:	4413      	add	r3, r2
 800a076:	647b      	str	r3, [r7, #68]	; 0x44
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	00da      	lsls	r2, r3, #3
 800a07e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a080:	4413      	add	r3, r2
 800a082:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a086:	643b      	str	r3, [r7, #64]	; 0x40
 800a088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a090:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6818      	ldr	r0, [r3, #0]
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	6959      	ldr	r1, [r3, #20]
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	891a      	ldrh	r2, [r3, #8]
 800a09e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	f006 ff9f 	bl	8010fe6 <USB_WritePMA>
 800a0a8:	e1e0      	b.n	800a46c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	00db      	lsls	r3, r3, #3
 800a0bc:	4413      	add	r3, r2
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	6812      	ldr	r2, [r2, #0]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a0c8:	881b      	ldrh	r3, [r3, #0]
 800a0ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0ce:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	699a      	ldr	r2, [r3, #24]
 800a0d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d307      	bcc.n	800a0ee <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	699a      	ldr	r2, [r3, #24]
 800a0e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a0e6:	1ad2      	subs	r2, r2, r3
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	619a      	str	r2, [r3, #24]
 800a0ec:	e002      	b.n	800a0f4 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f040 80c0 	bne.w	800a27e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	785b      	ldrb	r3, [r3, #1]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d126      	bne.n	800a154 <HAL_PCD_EP_DB_Transmit+0x47a>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a114:	b29b      	uxth	r3, r3
 800a116:	461a      	mov	r2, r3
 800a118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a11a:	4413      	add	r3, r2
 800a11c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	00da      	lsls	r2, r3, #3
 800a124:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a126:	4413      	add	r3, r2
 800a128:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a12c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a12e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a130:	881b      	ldrh	r3, [r3, #0]
 800a132:	b29b      	uxth	r3, r3
 800a134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a138:	b29a      	uxth	r2, r3
 800a13a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a13c:	801a      	strh	r2, [r3, #0]
 800a13e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a140:	881b      	ldrh	r3, [r3, #0]
 800a142:	b29b      	uxth	r3, r3
 800a144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a150:	801a      	strh	r2, [r3, #0]
 800a152:	e01a      	b.n	800a18a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	785b      	ldrb	r3, [r3, #1]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d116      	bne.n	800a18a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	667b      	str	r3, [r7, #100]	; 0x64
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	461a      	mov	r2, r3
 800a16e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a170:	4413      	add	r3, r2
 800a172:	667b      	str	r3, [r7, #100]	; 0x64
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	00da      	lsls	r2, r3, #3
 800a17a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a17c:	4413      	add	r3, r2
 800a17e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a182:	663b      	str	r3, [r7, #96]	; 0x60
 800a184:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a186:	2200      	movs	r2, #0
 800a188:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	677b      	str	r3, [r7, #116]	; 0x74
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	785b      	ldrb	r3, [r3, #1]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d12b      	bne.n	800a1f0 <HAL_PCD_EP_DB_Transmit+0x516>
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ac:	4413      	add	r3, r2
 800a1ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	00da      	lsls	r2, r3, #3
 800a1b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a1be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1c6:	881b      	ldrh	r3, [r3, #0]
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1d4:	801a      	strh	r2, [r3, #0]
 800a1d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1ec:	801a      	strh	r2, [r3, #0]
 800a1ee:	e017      	b.n	800a220 <HAL_PCD_EP_DB_Transmit+0x546>
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	785b      	ldrb	r3, [r3, #1]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d113      	bne.n	800a220 <HAL_PCD_EP_DB_Transmit+0x546>
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a200:	b29b      	uxth	r3, r3
 800a202:	461a      	mov	r2, r3
 800a204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a206:	4413      	add	r3, r2
 800a208:	677b      	str	r3, [r7, #116]	; 0x74
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	00da      	lsls	r2, r3, #3
 800a210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a212:	4413      	add	r3, r2
 800a214:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a218:	673b      	str	r3, [r7, #112]	; 0x70
 800a21a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a21c:	2200      	movs	r2, #0
 800a21e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	4619      	mov	r1, r3
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f009 fe81 	bl	8013f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a22c:	88fb      	ldrh	r3, [r7, #6]
 800a22e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a232:	2b00      	cmp	r3, #0
 800a234:	f040 811a 	bne.w	800a46c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	461a      	mov	r2, r3
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	881b      	ldrh	r3, [r3, #0]
 800a248:	b29b      	uxth	r3, r3
 800a24a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a24e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a252:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	461a      	mov	r2, r3
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	441a      	add	r2, r3
 800a264:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800a268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a26c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a278:	b29b      	uxth	r3, r3
 800a27a:	8013      	strh	r3, [r2, #0]
 800a27c:	e0f6      	b.n	800a46c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a27e:	88fb      	ldrh	r3, [r7, #6]
 800a280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d121      	bne.n	800a2cc <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	461a      	mov	r2, r3
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4413      	add	r3, r2
 800a296:	881b      	ldrh	r3, [r3, #0]
 800a298:	b29b      	uxth	r3, r3
 800a29a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a29e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	441a      	add	r2, r3
 800a2b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a2b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a2c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	f040 80ca 	bne.w	800a46c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	695a      	ldr	r2, [r3, #20]
 800a2dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a2e0:	441a      	add	r2, r3
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	69da      	ldr	r2, [r3, #28]
 800a2ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a2ee:	441a      	add	r2, r3
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	6a1a      	ldr	r2, [r3, #32]
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d30b      	bcc.n	800a318 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	6a1a      	ldr	r2, [r3, #32]
 800a30c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a310:	1ad2      	subs	r2, r2, r3
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	621a      	str	r2, [r3, #32]
 800a316:	e017      	b.n	800a348 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	6a1b      	ldr	r3, [r3, #32]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d108      	bne.n	800a332 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800a320:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a324:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a330:	e00a      	b.n	800a348 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	6a1b      	ldr	r3, [r3, #32]
 800a336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	2200      	movs	r2, #0
 800a33e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	657b      	str	r3, [r7, #84]	; 0x54
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	785b      	ldrb	r3, [r3, #1]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d165      	bne.n	800a422 <HAL_PCD_EP_DB_Transmit+0x748>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a364:	b29b      	uxth	r3, r3
 800a366:	461a      	mov	r2, r3
 800a368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a36a:	4413      	add	r3, r2
 800a36c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	00da      	lsls	r2, r3, #3
 800a374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a376:	4413      	add	r3, r2
 800a378:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a37c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a37e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a380:	881b      	ldrh	r3, [r3, #0]
 800a382:	b29b      	uxth	r3, r3
 800a384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a388:	b29a      	uxth	r2, r3
 800a38a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a38c:	801a      	strh	r2, [r3, #0]
 800a38e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a392:	2b3e      	cmp	r3, #62	; 0x3e
 800a394:	d91d      	bls.n	800a3d2 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800a396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a39a:	095b      	lsrs	r3, r3, #5
 800a39c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a39e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3a2:	f003 031f 	and.w	r3, r3, #31
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d102      	bne.n	800a3b0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800a3aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	029b      	lsls	r3, r3, #10
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3ce:	801a      	strh	r2, [r3, #0]
 800a3d0:	e041      	b.n	800a456 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a3d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10a      	bne.n	800a3f0 <HAL_PCD_EP_DB_Transmit+0x716>
 800a3da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3dc:	881b      	ldrh	r3, [r3, #0]
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3ec:	801a      	strh	r2, [r3, #0]
 800a3ee:	e032      	b.n	800a456 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a3f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3f4:	085b      	lsrs	r3, r3, #1
 800a3f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	2b00      	cmp	r3, #0
 800a402:	d002      	beq.n	800a40a <HAL_PCD_EP_DB_Transmit+0x730>
 800a404:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a406:	3301      	adds	r3, #1
 800a408:	66bb      	str	r3, [r7, #104]	; 0x68
 800a40a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a40c:	881b      	ldrh	r3, [r3, #0]
 800a40e:	b29a      	uxth	r2, r3
 800a410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a412:	b29b      	uxth	r3, r3
 800a414:	029b      	lsls	r3, r3, #10
 800a416:	b29b      	uxth	r3, r3
 800a418:	4313      	orrs	r3, r2
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a41e:	801a      	strh	r2, [r3, #0]
 800a420:	e019      	b.n	800a456 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	785b      	ldrb	r3, [r3, #1]
 800a426:	2b01      	cmp	r3, #1
 800a428:	d115      	bne.n	800a456 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a432:	b29b      	uxth	r3, r3
 800a434:	461a      	mov	r2, r3
 800a436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a438:	4413      	add	r3, r2
 800a43a:	657b      	str	r3, [r7, #84]	; 0x54
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	00da      	lsls	r2, r3, #3
 800a442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a444:	4413      	add	r3, r2
 800a446:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a44a:	653b      	str	r3, [r7, #80]	; 0x50
 800a44c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a450:	b29a      	uxth	r2, r3
 800a452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a454:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	6959      	ldr	r1, [r3, #20]
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	895a      	ldrh	r2, [r3, #10]
 800a462:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a466:	b29b      	uxth	r3, r3
 800a468:	f006 fdbd 	bl	8010fe6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	461a      	mov	r2, r3
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4413      	add	r3, r2
 800a47a:	881b      	ldrh	r3, [r3, #0]
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a486:	82bb      	strh	r3, [r7, #20]
 800a488:	8abb      	ldrh	r3, [r7, #20]
 800a48a:	f083 0310 	eor.w	r3, r3, #16
 800a48e:	82bb      	strh	r3, [r7, #20]
 800a490:	8abb      	ldrh	r3, [r7, #20]
 800a492:	f083 0320 	eor.w	r3, r3, #32
 800a496:	82bb      	strh	r3, [r7, #20]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	461a      	mov	r2, r3
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	441a      	add	r2, r3
 800a4a6:	8abb      	ldrh	r3, [r7, #20]
 800a4a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3790      	adds	r7, #144	; 0x90
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b087      	sub	sp, #28
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	60f8      	str	r0, [r7, #12]
 800a4ce:	607b      	str	r3, [r7, #4]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	817b      	strh	r3, [r7, #10]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a4d8:	897b      	ldrh	r3, [r7, #10]
 800a4da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00b      	beq.n	800a4fc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4e4:	897b      	ldrh	r3, [r7, #10]
 800a4e6:	f003 0307 	and.w	r3, r3, #7
 800a4ea:	1c5a      	adds	r2, r3, #1
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	4413      	add	r3, r2
 800a4f2:	00db      	lsls	r3, r3, #3
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	617b      	str	r3, [r7, #20]
 800a4fa:	e009      	b.n	800a510 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a4fc:	897a      	ldrh	r2, [r7, #10]
 800a4fe:	4613      	mov	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	00db      	lsls	r3, r3, #3
 800a506:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	4413      	add	r3, r2
 800a50e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a510:	893b      	ldrh	r3, [r7, #8]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d107      	bne.n	800a526 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	2200      	movs	r2, #0
 800a51a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	b29a      	uxth	r2, r3
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	80da      	strh	r2, [r3, #6]
 800a524:	e00b      	b.n	800a53e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	2201      	movs	r2, #1
 800a52a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	b29a      	uxth	r2, r3
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	0c1b      	lsrs	r3, r3, #16
 800a538:	b29a      	uxth	r2, r3
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	371c      	adds	r7, #28
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2201      	movs	r2, #1
 800a55e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a570:	b29b      	uxth	r3, r3
 800a572:	f043 0301 	orr.w	r3, r3, #1
 800a576:	b29a      	uxth	r2, r3
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a584:	b29b      	uxth	r3, r3
 800a586:	f043 0302 	orr.w	r3, r3, #2
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a5a4:	4b04      	ldr	r3, [pc, #16]	; (800a5b8 <HAL_PWREx_GetVoltageRange+0x18>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	40007000 	.word	0x40007000

0800a5bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5ca:	d130      	bne.n	800a62e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a5cc:	4b23      	ldr	r3, [pc, #140]	; (800a65c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a5d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5d8:	d038      	beq.n	800a64c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a5da:	4b20      	ldr	r3, [pc, #128]	; (800a65c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a5e2:	4a1e      	ldr	r2, [pc, #120]	; (800a65c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a5e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a5e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a5ea:	4b1d      	ldr	r3, [pc, #116]	; (800a660 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2232      	movs	r2, #50	; 0x32
 800a5f0:	fb02 f303 	mul.w	r3, r2, r3
 800a5f4:	4a1b      	ldr	r2, [pc, #108]	; (800a664 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a5f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5fa:	0c9b      	lsrs	r3, r3, #18
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a600:	e002      	b.n	800a608 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	3b01      	subs	r3, #1
 800a606:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a608:	4b14      	ldr	r3, [pc, #80]	; (800a65c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a60a:	695b      	ldr	r3, [r3, #20]
 800a60c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a614:	d102      	bne.n	800a61c <HAL_PWREx_ControlVoltageScaling+0x60>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1f2      	bne.n	800a602 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a61c:	4b0f      	ldr	r3, [pc, #60]	; (800a65c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a61e:	695b      	ldr	r3, [r3, #20]
 800a620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a628:	d110      	bne.n	800a64c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a62a:	2303      	movs	r3, #3
 800a62c:	e00f      	b.n	800a64e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a62e:	4b0b      	ldr	r3, [pc, #44]	; (800a65c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a63a:	d007      	beq.n	800a64c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a63c:	4b07      	ldr	r3, [pc, #28]	; (800a65c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a644:	4a05      	ldr	r2, [pc, #20]	; (800a65c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a64a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	40007000 	.word	0x40007000
 800a660:	20000024 	.word	0x20000024
 800a664:	431bde83 	.word	0x431bde83

0800a668 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a668:	b480      	push	{r7}
 800a66a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800a66c:	4b05      	ldr	r3, [pc, #20]	; (800a684 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	4a04      	ldr	r2, [pc, #16]	; (800a684 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a676:	6053      	str	r3, [r2, #4]
}
 800a678:	bf00      	nop
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	40007000 	.word	0x40007000

0800a688 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b088      	sub	sp, #32
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d102      	bne.n	800a69c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	f000 bc02 	b.w	800aea0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a69c:	4b96      	ldr	r3, [pc, #600]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	f003 030c 	and.w	r3, r3, #12
 800a6a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a6a6:	4b94      	ldr	r3, [pc, #592]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	f003 0303 	and.w	r3, r3, #3
 800a6ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0310 	and.w	r3, r3, #16
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 80e4 	beq.w	800a886 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d007      	beq.n	800a6d4 <HAL_RCC_OscConfig+0x4c>
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	2b0c      	cmp	r3, #12
 800a6c8:	f040 808b 	bne.w	800a7e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	f040 8087 	bne.w	800a7e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a6d4:	4b88      	ldr	r3, [pc, #544]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 0302 	and.w	r3, r3, #2
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d005      	beq.n	800a6ec <HAL_RCC_OscConfig+0x64>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	699b      	ldr	r3, [r3, #24]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d101      	bne.n	800a6ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e3d9      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a1a      	ldr	r2, [r3, #32]
 800a6f0:	4b81      	ldr	r3, [pc, #516]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 0308 	and.w	r3, r3, #8
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d004      	beq.n	800a706 <HAL_RCC_OscConfig+0x7e>
 800a6fc:	4b7e      	ldr	r3, [pc, #504]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a704:	e005      	b.n	800a712 <HAL_RCC_OscConfig+0x8a>
 800a706:	4b7c      	ldr	r3, [pc, #496]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a70c:	091b      	lsrs	r3, r3, #4
 800a70e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a712:	4293      	cmp	r3, r2
 800a714:	d223      	bcs.n	800a75e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a1b      	ldr	r3, [r3, #32]
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 fd8c 	bl	800b238 <RCC_SetFlashLatencyFromMSIRange>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	e3ba      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a72a:	4b73      	ldr	r3, [pc, #460]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a72      	ldr	r2, [pc, #456]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a730:	f043 0308 	orr.w	r3, r3, #8
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	4b70      	ldr	r3, [pc, #448]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a1b      	ldr	r3, [r3, #32]
 800a742:	496d      	ldr	r1, [pc, #436]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a744:	4313      	orrs	r3, r2
 800a746:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a748:	4b6b      	ldr	r3, [pc, #428]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	69db      	ldr	r3, [r3, #28]
 800a754:	021b      	lsls	r3, r3, #8
 800a756:	4968      	ldr	r1, [pc, #416]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a758:	4313      	orrs	r3, r2
 800a75a:	604b      	str	r3, [r1, #4]
 800a75c:	e025      	b.n	800a7aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a75e:	4b66      	ldr	r3, [pc, #408]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a65      	ldr	r2, [pc, #404]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a764:	f043 0308 	orr.w	r3, r3, #8
 800a768:	6013      	str	r3, [r2, #0]
 800a76a:	4b63      	ldr	r3, [pc, #396]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	4960      	ldr	r1, [pc, #384]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a778:	4313      	orrs	r3, r2
 800a77a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a77c:	4b5e      	ldr	r3, [pc, #376]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	69db      	ldr	r3, [r3, #28]
 800a788:	021b      	lsls	r3, r3, #8
 800a78a:	495b      	ldr	r1, [pc, #364]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a78c:	4313      	orrs	r3, r2
 800a78e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d109      	bne.n	800a7aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6a1b      	ldr	r3, [r3, #32]
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 fd4c 	bl	800b238 <RCC_SetFlashLatencyFromMSIRange>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d001      	beq.n	800a7aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e37a      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a7aa:	f000 fc81 	bl	800b0b0 <HAL_RCC_GetSysClockFreq>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	4b51      	ldr	r3, [pc, #324]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	091b      	lsrs	r3, r3, #4
 800a7b6:	f003 030f 	and.w	r3, r3, #15
 800a7ba:	4950      	ldr	r1, [pc, #320]	; (800a8fc <HAL_RCC_OscConfig+0x274>)
 800a7bc:	5ccb      	ldrb	r3, [r1, r3]
 800a7be:	f003 031f 	and.w	r3, r3, #31
 800a7c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7c6:	4a4e      	ldr	r2, [pc, #312]	; (800a900 <HAL_RCC_OscConfig+0x278>)
 800a7c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a7ca:	4b4e      	ldr	r3, [pc, #312]	; (800a904 <HAL_RCC_OscConfig+0x27c>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fb fc4e 	bl	8006070 <HAL_InitTick>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a7d8:	7bfb      	ldrb	r3, [r7, #15]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d052      	beq.n	800a884 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a7de:	7bfb      	ldrb	r3, [r7, #15]
 800a7e0:	e35e      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	699b      	ldr	r3, [r3, #24]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d032      	beq.n	800a850 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a7ea:	4b43      	ldr	r3, [pc, #268]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a42      	ldr	r2, [pc, #264]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a7f0:	f043 0301 	orr.w	r3, r3, #1
 800a7f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a7f6:	f7fb fc8b 	bl	8006110 <HAL_GetTick>
 800a7fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a7fc:	e008      	b.n	800a810 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a7fe:	f7fb fc87 	bl	8006110 <HAL_GetTick>
 800a802:	4602      	mov	r2, r0
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	2b02      	cmp	r3, #2
 800a80a:	d901      	bls.n	800a810 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a80c:	2303      	movs	r3, #3
 800a80e:	e347      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a810:	4b39      	ldr	r3, [pc, #228]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 0302 	and.w	r3, r3, #2
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d0f0      	beq.n	800a7fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a81c:	4b36      	ldr	r3, [pc, #216]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a35      	ldr	r2, [pc, #212]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a822:	f043 0308 	orr.w	r3, r3, #8
 800a826:	6013      	str	r3, [r2, #0]
 800a828:	4b33      	ldr	r3, [pc, #204]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a1b      	ldr	r3, [r3, #32]
 800a834:	4930      	ldr	r1, [pc, #192]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a836:	4313      	orrs	r3, r2
 800a838:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a83a:	4b2f      	ldr	r3, [pc, #188]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	69db      	ldr	r3, [r3, #28]
 800a846:	021b      	lsls	r3, r3, #8
 800a848:	492b      	ldr	r1, [pc, #172]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a84a:	4313      	orrs	r3, r2
 800a84c:	604b      	str	r3, [r1, #4]
 800a84e:	e01a      	b.n	800a886 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a850:	4b29      	ldr	r3, [pc, #164]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a28      	ldr	r2, [pc, #160]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a856:	f023 0301 	bic.w	r3, r3, #1
 800a85a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a85c:	f7fb fc58 	bl	8006110 <HAL_GetTick>
 800a860:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a862:	e008      	b.n	800a876 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a864:	f7fb fc54 	bl	8006110 <HAL_GetTick>
 800a868:	4602      	mov	r2, r0
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	1ad3      	subs	r3, r2, r3
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d901      	bls.n	800a876 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a872:	2303      	movs	r3, #3
 800a874:	e314      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a876:	4b20      	ldr	r3, [pc, #128]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f003 0302 	and.w	r3, r3, #2
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1f0      	bne.n	800a864 <HAL_RCC_OscConfig+0x1dc>
 800a882:	e000      	b.n	800a886 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a884:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 0301 	and.w	r3, r3, #1
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d073      	beq.n	800a97a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	2b08      	cmp	r3, #8
 800a896:	d005      	beq.n	800a8a4 <HAL_RCC_OscConfig+0x21c>
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	2b0c      	cmp	r3, #12
 800a89c:	d10e      	bne.n	800a8bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	2b03      	cmp	r3, #3
 800a8a2:	d10b      	bne.n	800a8bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8a4:	4b14      	ldr	r3, [pc, #80]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d063      	beq.n	800a978 <HAL_RCC_OscConfig+0x2f0>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d15f      	bne.n	800a978 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e2f1      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8c4:	d106      	bne.n	800a8d4 <HAL_RCC_OscConfig+0x24c>
 800a8c6:	4b0c      	ldr	r3, [pc, #48]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a0b      	ldr	r2, [pc, #44]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a8cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8d0:	6013      	str	r3, [r2, #0]
 800a8d2:	e025      	b.n	800a920 <HAL_RCC_OscConfig+0x298>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8dc:	d114      	bne.n	800a908 <HAL_RCC_OscConfig+0x280>
 800a8de:	4b06      	ldr	r3, [pc, #24]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a05      	ldr	r2, [pc, #20]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a8e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a8e8:	6013      	str	r3, [r2, #0]
 800a8ea:	4b03      	ldr	r3, [pc, #12]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a02      	ldr	r2, [pc, #8]	; (800a8f8 <HAL_RCC_OscConfig+0x270>)
 800a8f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8f4:	6013      	str	r3, [r2, #0]
 800a8f6:	e013      	b.n	800a920 <HAL_RCC_OscConfig+0x298>
 800a8f8:	40021000 	.word	0x40021000
 800a8fc:	0801c954 	.word	0x0801c954
 800a900:	20000024 	.word	0x20000024
 800a904:	20000028 	.word	0x20000028
 800a908:	4ba0      	ldr	r3, [pc, #640]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a9f      	ldr	r2, [pc, #636]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800a90e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a912:	6013      	str	r3, [r2, #0]
 800a914:	4b9d      	ldr	r3, [pc, #628]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a9c      	ldr	r2, [pc, #624]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800a91a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a91e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d013      	beq.n	800a950 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a928:	f7fb fbf2 	bl	8006110 <HAL_GetTick>
 800a92c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a92e:	e008      	b.n	800a942 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a930:	f7fb fbee 	bl	8006110 <HAL_GetTick>
 800a934:	4602      	mov	r2, r0
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	1ad3      	subs	r3, r2, r3
 800a93a:	2b64      	cmp	r3, #100	; 0x64
 800a93c:	d901      	bls.n	800a942 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a93e:	2303      	movs	r3, #3
 800a940:	e2ae      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a942:	4b92      	ldr	r3, [pc, #584]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d0f0      	beq.n	800a930 <HAL_RCC_OscConfig+0x2a8>
 800a94e:	e014      	b.n	800a97a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a950:	f7fb fbde 	bl	8006110 <HAL_GetTick>
 800a954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a956:	e008      	b.n	800a96a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a958:	f7fb fbda 	bl	8006110 <HAL_GetTick>
 800a95c:	4602      	mov	r2, r0
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	2b64      	cmp	r3, #100	; 0x64
 800a964:	d901      	bls.n	800a96a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a966:	2303      	movs	r3, #3
 800a968:	e29a      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a96a:	4b88      	ldr	r3, [pc, #544]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1f0      	bne.n	800a958 <HAL_RCC_OscConfig+0x2d0>
 800a976:	e000      	b.n	800a97a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f003 0302 	and.w	r3, r3, #2
 800a982:	2b00      	cmp	r3, #0
 800a984:	d060      	beq.n	800aa48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	2b04      	cmp	r3, #4
 800a98a:	d005      	beq.n	800a998 <HAL_RCC_OscConfig+0x310>
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	2b0c      	cmp	r3, #12
 800a990:	d119      	bne.n	800a9c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	2b02      	cmp	r3, #2
 800a996:	d116      	bne.n	800a9c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a998:	4b7c      	ldr	r3, [pc, #496]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d005      	beq.n	800a9b0 <HAL_RCC_OscConfig+0x328>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d101      	bne.n	800a9b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e277      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9b0:	4b76      	ldr	r3, [pc, #472]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	061b      	lsls	r3, r3, #24
 800a9be:	4973      	ldr	r1, [pc, #460]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9c4:	e040      	b.n	800aa48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d023      	beq.n	800aa16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a9ce:	4b6f      	ldr	r3, [pc, #444]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a6e      	ldr	r2, [pc, #440]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800a9d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9da:	f7fb fb99 	bl	8006110 <HAL_GetTick>
 800a9de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a9e0:	e008      	b.n	800a9f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9e2:	f7fb fb95 	bl	8006110 <HAL_GetTick>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d901      	bls.n	800a9f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e255      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a9f4:	4b65      	ldr	r3, [pc, #404]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d0f0      	beq.n	800a9e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa00:	4b62      	ldr	r3, [pc, #392]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	061b      	lsls	r3, r3, #24
 800aa0e:	495f      	ldr	r1, [pc, #380]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800aa10:	4313      	orrs	r3, r2
 800aa12:	604b      	str	r3, [r1, #4]
 800aa14:	e018      	b.n	800aa48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa16:	4b5d      	ldr	r3, [pc, #372]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a5c      	ldr	r2, [pc, #368]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800aa1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa22:	f7fb fb75 	bl	8006110 <HAL_GetTick>
 800aa26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800aa28:	e008      	b.n	800aa3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa2a:	f7fb fb71 	bl	8006110 <HAL_GetTick>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d901      	bls.n	800aa3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	e231      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800aa3c:	4b53      	ldr	r3, [pc, #332]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1f0      	bne.n	800aa2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f003 0308 	and.w	r3, r3, #8
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d03c      	beq.n	800aace <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	695b      	ldr	r3, [r3, #20]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d01c      	beq.n	800aa96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa5c:	4b4b      	ldr	r3, [pc, #300]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800aa5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa62:	4a4a      	ldr	r2, [pc, #296]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800aa64:	f043 0301 	orr.w	r3, r3, #1
 800aa68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa6c:	f7fb fb50 	bl	8006110 <HAL_GetTick>
 800aa70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800aa72:	e008      	b.n	800aa86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa74:	f7fb fb4c 	bl	8006110 <HAL_GetTick>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d901      	bls.n	800aa86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800aa82:	2303      	movs	r3, #3
 800aa84:	e20c      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800aa86:	4b41      	ldr	r3, [pc, #260]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800aa88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa8c:	f003 0302 	and.w	r3, r3, #2
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d0ef      	beq.n	800aa74 <HAL_RCC_OscConfig+0x3ec>
 800aa94:	e01b      	b.n	800aace <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa96:	4b3d      	ldr	r3, [pc, #244]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800aa98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa9c:	4a3b      	ldr	r2, [pc, #236]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800aa9e:	f023 0301 	bic.w	r3, r3, #1
 800aaa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aaa6:	f7fb fb33 	bl	8006110 <HAL_GetTick>
 800aaaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aaac:	e008      	b.n	800aac0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aaae:	f7fb fb2f 	bl	8006110 <HAL_GetTick>
 800aab2:	4602      	mov	r2, r0
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d901      	bls.n	800aac0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800aabc:	2303      	movs	r3, #3
 800aabe:	e1ef      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aac0:	4b32      	ldr	r3, [pc, #200]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800aac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aac6:	f003 0302 	and.w	r3, r3, #2
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1ef      	bne.n	800aaae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 0304 	and.w	r3, r3, #4
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	f000 80a6 	beq.w	800ac28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aadc:	2300      	movs	r3, #0
 800aade:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800aae0:	4b2a      	ldr	r3, [pc, #168]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800aae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10d      	bne.n	800ab08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aaec:	4b27      	ldr	r3, [pc, #156]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800aaee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaf0:	4a26      	ldr	r2, [pc, #152]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800aaf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaf6:	6593      	str	r3, [r2, #88]	; 0x58
 800aaf8:	4b24      	ldr	r3, [pc, #144]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800aafa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aafc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab00:	60bb      	str	r3, [r7, #8]
 800ab02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab04:	2301      	movs	r3, #1
 800ab06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab08:	4b21      	ldr	r3, [pc, #132]	; (800ab90 <HAL_RCC_OscConfig+0x508>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d118      	bne.n	800ab46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ab14:	4b1e      	ldr	r3, [pc, #120]	; (800ab90 <HAL_RCC_OscConfig+0x508>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a1d      	ldr	r2, [pc, #116]	; (800ab90 <HAL_RCC_OscConfig+0x508>)
 800ab1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab20:	f7fb faf6 	bl	8006110 <HAL_GetTick>
 800ab24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab26:	e008      	b.n	800ab3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab28:	f7fb faf2 	bl	8006110 <HAL_GetTick>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d901      	bls.n	800ab3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e1b2      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab3a:	4b15      	ldr	r3, [pc, #84]	; (800ab90 <HAL_RCC_OscConfig+0x508>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d0f0      	beq.n	800ab28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d108      	bne.n	800ab60 <HAL_RCC_OscConfig+0x4d8>
 800ab4e:	4b0f      	ldr	r3, [pc, #60]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800ab50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab54:	4a0d      	ldr	r2, [pc, #52]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800ab56:	f043 0301 	orr.w	r3, r3, #1
 800ab5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ab5e:	e029      	b.n	800abb4 <HAL_RCC_OscConfig+0x52c>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	2b05      	cmp	r3, #5
 800ab66:	d115      	bne.n	800ab94 <HAL_RCC_OscConfig+0x50c>
 800ab68:	4b08      	ldr	r3, [pc, #32]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800ab6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab6e:	4a07      	ldr	r2, [pc, #28]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800ab70:	f043 0304 	orr.w	r3, r3, #4
 800ab74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ab78:	4b04      	ldr	r3, [pc, #16]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800ab7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab7e:	4a03      	ldr	r2, [pc, #12]	; (800ab8c <HAL_RCC_OscConfig+0x504>)
 800ab80:	f043 0301 	orr.w	r3, r3, #1
 800ab84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ab88:	e014      	b.n	800abb4 <HAL_RCC_OscConfig+0x52c>
 800ab8a:	bf00      	nop
 800ab8c:	40021000 	.word	0x40021000
 800ab90:	40007000 	.word	0x40007000
 800ab94:	4b9a      	ldr	r3, [pc, #616]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800ab96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab9a:	4a99      	ldr	r2, [pc, #612]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800ab9c:	f023 0301 	bic.w	r3, r3, #1
 800aba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aba4:	4b96      	ldr	r3, [pc, #600]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800aba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abaa:	4a95      	ldr	r2, [pc, #596]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800abac:	f023 0304 	bic.w	r3, r3, #4
 800abb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d016      	beq.n	800abea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abbc:	f7fb faa8 	bl	8006110 <HAL_GetTick>
 800abc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800abc2:	e00a      	b.n	800abda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abc4:	f7fb faa4 	bl	8006110 <HAL_GetTick>
 800abc8:	4602      	mov	r2, r0
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	1ad3      	subs	r3, r2, r3
 800abce:	f241 3288 	movw	r2, #5000	; 0x1388
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d901      	bls.n	800abda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800abd6:	2303      	movs	r3, #3
 800abd8:	e162      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800abda:	4b89      	ldr	r3, [pc, #548]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800abdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abe0:	f003 0302 	and.w	r3, r3, #2
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d0ed      	beq.n	800abc4 <HAL_RCC_OscConfig+0x53c>
 800abe8:	e015      	b.n	800ac16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abea:	f7fb fa91 	bl	8006110 <HAL_GetTick>
 800abee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800abf0:	e00a      	b.n	800ac08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abf2:	f7fb fa8d 	bl	8006110 <HAL_GetTick>
 800abf6:	4602      	mov	r2, r0
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d901      	bls.n	800ac08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800ac04:	2303      	movs	r3, #3
 800ac06:	e14b      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ac08:	4b7d      	ldr	r3, [pc, #500]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800ac0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac0e:	f003 0302 	and.w	r3, r3, #2
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d1ed      	bne.n	800abf2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ac16:	7ffb      	ldrb	r3, [r7, #31]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d105      	bne.n	800ac28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac1c:	4b78      	ldr	r3, [pc, #480]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800ac1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac20:	4a77      	ldr	r2, [pc, #476]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800ac22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac26:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f003 0320 	and.w	r3, r3, #32
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d03c      	beq.n	800acae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d01c      	beq.n	800ac76 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ac3c:	4b70      	ldr	r3, [pc, #448]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800ac3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ac42:	4a6f      	ldr	r2, [pc, #444]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800ac44:	f043 0301 	orr.w	r3, r3, #1
 800ac48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac4c:	f7fb fa60 	bl	8006110 <HAL_GetTick>
 800ac50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ac52:	e008      	b.n	800ac66 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac54:	f7fb fa5c 	bl	8006110 <HAL_GetTick>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	1ad3      	subs	r3, r2, r3
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d901      	bls.n	800ac66 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800ac62:	2303      	movs	r3, #3
 800ac64:	e11c      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ac66:	4b66      	ldr	r3, [pc, #408]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800ac68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ac6c:	f003 0302 	and.w	r3, r3, #2
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d0ef      	beq.n	800ac54 <HAL_RCC_OscConfig+0x5cc>
 800ac74:	e01b      	b.n	800acae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ac76:	4b62      	ldr	r3, [pc, #392]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800ac78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ac7c:	4a60      	ldr	r2, [pc, #384]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800ac7e:	f023 0301 	bic.w	r3, r3, #1
 800ac82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac86:	f7fb fa43 	bl	8006110 <HAL_GetTick>
 800ac8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ac8c:	e008      	b.n	800aca0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac8e:	f7fb fa3f 	bl	8006110 <HAL_GetTick>
 800ac92:	4602      	mov	r2, r0
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	d901      	bls.n	800aca0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	e0ff      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800aca0:	4b57      	ldr	r3, [pc, #348]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800aca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aca6:	f003 0302 	and.w	r3, r3, #2
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d1ef      	bne.n	800ac8e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	f000 80f3 	beq.w	800ae9e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acbc:	2b02      	cmp	r3, #2
 800acbe:	f040 80c9 	bne.w	800ae54 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800acc2:	4b4f      	ldr	r3, [pc, #316]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	f003 0203 	and.w	r2, r3, #3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d12c      	bne.n	800ad30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace0:	3b01      	subs	r3, #1
 800ace2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d123      	bne.n	800ad30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acf2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d11b      	bne.n	800ad30 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad02:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d113      	bne.n	800ad30 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad12:	085b      	lsrs	r3, r3, #1
 800ad14:	3b01      	subs	r3, #1
 800ad16:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d109      	bne.n	800ad30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad26:	085b      	lsrs	r3, r3, #1
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d06b      	beq.n	800ae08 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	2b0c      	cmp	r3, #12
 800ad34:	d062      	beq.n	800adfc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ad36:	4b32      	ldr	r3, [pc, #200]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e0ac      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ad46:	4b2e      	ldr	r3, [pc, #184]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a2d      	ldr	r2, [pc, #180]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800ad4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ad52:	f7fb f9dd 	bl	8006110 <HAL_GetTick>
 800ad56:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad58:	e008      	b.n	800ad6c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad5a:	f7fb f9d9 	bl	8006110 <HAL_GetTick>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	1ad3      	subs	r3, r2, r3
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	d901      	bls.n	800ad6c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800ad68:	2303      	movs	r3, #3
 800ad6a:	e099      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad6c:	4b24      	ldr	r3, [pc, #144]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d1f0      	bne.n	800ad5a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad78:	4b21      	ldr	r3, [pc, #132]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800ad7a:	68da      	ldr	r2, [r3, #12]
 800ad7c:	4b21      	ldr	r3, [pc, #132]	; (800ae04 <HAL_RCC_OscConfig+0x77c>)
 800ad7e:	4013      	ands	r3, r2
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ad88:	3a01      	subs	r2, #1
 800ad8a:	0112      	lsls	r2, r2, #4
 800ad8c:	4311      	orrs	r1, r2
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ad92:	0212      	lsls	r2, r2, #8
 800ad94:	4311      	orrs	r1, r2
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ad9a:	0852      	lsrs	r2, r2, #1
 800ad9c:	3a01      	subs	r2, #1
 800ad9e:	0552      	lsls	r2, r2, #21
 800ada0:	4311      	orrs	r1, r2
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ada6:	0852      	lsrs	r2, r2, #1
 800ada8:	3a01      	subs	r2, #1
 800adaa:	0652      	lsls	r2, r2, #25
 800adac:	4311      	orrs	r1, r2
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800adb2:	06d2      	lsls	r2, r2, #27
 800adb4:	430a      	orrs	r2, r1
 800adb6:	4912      	ldr	r1, [pc, #72]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800adb8:	4313      	orrs	r3, r2
 800adba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800adbc:	4b10      	ldr	r3, [pc, #64]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a0f      	ldr	r2, [pc, #60]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800adc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800adc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800adc8:	4b0d      	ldr	r3, [pc, #52]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	4a0c      	ldr	r2, [pc, #48]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800adce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800add2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800add4:	f7fb f99c 	bl	8006110 <HAL_GetTick>
 800add8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800adda:	e008      	b.n	800adee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800addc:	f7fb f998 	bl	8006110 <HAL_GetTick>
 800ade0:	4602      	mov	r2, r0
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d901      	bls.n	800adee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800adea:	2303      	movs	r3, #3
 800adec:	e058      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800adee:	4b04      	ldr	r3, [pc, #16]	; (800ae00 <HAL_RCC_OscConfig+0x778>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d0f0      	beq.n	800addc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800adfa:	e050      	b.n	800ae9e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	e04f      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
 800ae00:	40021000 	.word	0x40021000
 800ae04:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae08:	4b27      	ldr	r3, [pc, #156]	; (800aea8 <HAL_RCC_OscConfig+0x820>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d144      	bne.n	800ae9e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ae14:	4b24      	ldr	r3, [pc, #144]	; (800aea8 <HAL_RCC_OscConfig+0x820>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a23      	ldr	r2, [pc, #140]	; (800aea8 <HAL_RCC_OscConfig+0x820>)
 800ae1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ae20:	4b21      	ldr	r3, [pc, #132]	; (800aea8 <HAL_RCC_OscConfig+0x820>)
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	4a20      	ldr	r2, [pc, #128]	; (800aea8 <HAL_RCC_OscConfig+0x820>)
 800ae26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ae2c:	f7fb f970 	bl	8006110 <HAL_GetTick>
 800ae30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae32:	e008      	b.n	800ae46 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae34:	f7fb f96c 	bl	8006110 <HAL_GetTick>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d901      	bls.n	800ae46 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e02c      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae46:	4b18      	ldr	r3, [pc, #96]	; (800aea8 <HAL_RCC_OscConfig+0x820>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d0f0      	beq.n	800ae34 <HAL_RCC_OscConfig+0x7ac>
 800ae52:	e024      	b.n	800ae9e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	2b0c      	cmp	r3, #12
 800ae58:	d01f      	beq.n	800ae9a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae5a:	4b13      	ldr	r3, [pc, #76]	; (800aea8 <HAL_RCC_OscConfig+0x820>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a12      	ldr	r2, [pc, #72]	; (800aea8 <HAL_RCC_OscConfig+0x820>)
 800ae60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae66:	f7fb f953 	bl	8006110 <HAL_GetTick>
 800ae6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae6c:	e008      	b.n	800ae80 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae6e:	f7fb f94f 	bl	8006110 <HAL_GetTick>
 800ae72:	4602      	mov	r2, r0
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	d901      	bls.n	800ae80 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	e00f      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae80:	4b09      	ldr	r3, [pc, #36]	; (800aea8 <HAL_RCC_OscConfig+0x820>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1f0      	bne.n	800ae6e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800ae8c:	4b06      	ldr	r3, [pc, #24]	; (800aea8 <HAL_RCC_OscConfig+0x820>)
 800ae8e:	68da      	ldr	r2, [r3, #12]
 800ae90:	4905      	ldr	r1, [pc, #20]	; (800aea8 <HAL_RCC_OscConfig+0x820>)
 800ae92:	4b06      	ldr	r3, [pc, #24]	; (800aeac <HAL_RCC_OscConfig+0x824>)
 800ae94:	4013      	ands	r3, r2
 800ae96:	60cb      	str	r3, [r1, #12]
 800ae98:	e001      	b.n	800ae9e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e000      	b.n	800aea0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800ae9e:	2300      	movs	r3, #0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3720      	adds	r7, #32
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	40021000 	.word	0x40021000
 800aeac:	feeefffc 	.word	0xfeeefffc

0800aeb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d101      	bne.n	800aec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	e0e7      	b.n	800b094 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aec4:	4b75      	ldr	r3, [pc, #468]	; (800b09c <HAL_RCC_ClockConfig+0x1ec>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 0307 	and.w	r3, r3, #7
 800aecc:	683a      	ldr	r2, [r7, #0]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d910      	bls.n	800aef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aed2:	4b72      	ldr	r3, [pc, #456]	; (800b09c <HAL_RCC_ClockConfig+0x1ec>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f023 0207 	bic.w	r2, r3, #7
 800aeda:	4970      	ldr	r1, [pc, #448]	; (800b09c <HAL_RCC_ClockConfig+0x1ec>)
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	4313      	orrs	r3, r2
 800aee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aee2:	4b6e      	ldr	r3, [pc, #440]	; (800b09c <HAL_RCC_ClockConfig+0x1ec>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f003 0307 	and.w	r3, r3, #7
 800aeea:	683a      	ldr	r2, [r7, #0]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d001      	beq.n	800aef4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	e0cf      	b.n	800b094 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f003 0302 	and.w	r3, r3, #2
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d010      	beq.n	800af22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	689a      	ldr	r2, [r3, #8]
 800af04:	4b66      	ldr	r3, [pc, #408]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d908      	bls.n	800af22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af10:	4b63      	ldr	r3, [pc, #396]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	4960      	ldr	r1, [pc, #384]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800af1e:	4313      	orrs	r3, r2
 800af20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f003 0301 	and.w	r3, r3, #1
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d04c      	beq.n	800afc8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	2b03      	cmp	r3, #3
 800af34:	d107      	bne.n	800af46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af36:	4b5a      	ldr	r3, [pc, #360]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d121      	bne.n	800af86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	e0a6      	b.n	800b094 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d107      	bne.n	800af5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af4e:	4b54      	ldr	r3, [pc, #336]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d115      	bne.n	800af86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	e09a      	b.n	800b094 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d107      	bne.n	800af76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800af66:	4b4e      	ldr	r3, [pc, #312]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 0302 	and.w	r3, r3, #2
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d109      	bne.n	800af86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e08e      	b.n	800b094 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800af76:	4b4a      	ldr	r3, [pc, #296]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e086      	b.n	800b094 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800af86:	4b46      	ldr	r3, [pc, #280]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	f023 0203 	bic.w	r2, r3, #3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	4943      	ldr	r1, [pc, #268]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800af94:	4313      	orrs	r3, r2
 800af96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af98:	f7fb f8ba 	bl	8006110 <HAL_GetTick>
 800af9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af9e:	e00a      	b.n	800afb6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800afa0:	f7fb f8b6 	bl	8006110 <HAL_GetTick>
 800afa4:	4602      	mov	r2, r0
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	1ad3      	subs	r3, r2, r3
 800afaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800afae:	4293      	cmp	r3, r2
 800afb0:	d901      	bls.n	800afb6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e06e      	b.n	800b094 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afb6:	4b3a      	ldr	r3, [pc, #232]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	f003 020c 	and.w	r2, r3, #12
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d1eb      	bne.n	800afa0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f003 0302 	and.w	r3, r3, #2
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d010      	beq.n	800aff6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	689a      	ldr	r2, [r3, #8]
 800afd8:	4b31      	ldr	r3, [pc, #196]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d208      	bcs.n	800aff6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afe4:	4b2e      	ldr	r3, [pc, #184]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	492b      	ldr	r1, [pc, #172]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800aff2:	4313      	orrs	r3, r2
 800aff4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aff6:	4b29      	ldr	r3, [pc, #164]	; (800b09c <HAL_RCC_ClockConfig+0x1ec>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f003 0307 	and.w	r3, r3, #7
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	429a      	cmp	r2, r3
 800b002:	d210      	bcs.n	800b026 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b004:	4b25      	ldr	r3, [pc, #148]	; (800b09c <HAL_RCC_ClockConfig+0x1ec>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f023 0207 	bic.w	r2, r3, #7
 800b00c:	4923      	ldr	r1, [pc, #140]	; (800b09c <HAL_RCC_ClockConfig+0x1ec>)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	4313      	orrs	r3, r2
 800b012:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b014:	4b21      	ldr	r3, [pc, #132]	; (800b09c <HAL_RCC_ClockConfig+0x1ec>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 0307 	and.w	r3, r3, #7
 800b01c:	683a      	ldr	r2, [r7, #0]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d001      	beq.n	800b026 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	e036      	b.n	800b094 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f003 0304 	and.w	r3, r3, #4
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d008      	beq.n	800b044 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b032:	4b1b      	ldr	r3, [pc, #108]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	4918      	ldr	r1, [pc, #96]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800b040:	4313      	orrs	r3, r2
 800b042:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 0308 	and.w	r3, r3, #8
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d009      	beq.n	800b064 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b050:	4b13      	ldr	r3, [pc, #76]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	00db      	lsls	r3, r3, #3
 800b05e:	4910      	ldr	r1, [pc, #64]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800b060:	4313      	orrs	r3, r2
 800b062:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b064:	f000 f824 	bl	800b0b0 <HAL_RCC_GetSysClockFreq>
 800b068:	4602      	mov	r2, r0
 800b06a:	4b0d      	ldr	r3, [pc, #52]	; (800b0a0 <HAL_RCC_ClockConfig+0x1f0>)
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	091b      	lsrs	r3, r3, #4
 800b070:	f003 030f 	and.w	r3, r3, #15
 800b074:	490b      	ldr	r1, [pc, #44]	; (800b0a4 <HAL_RCC_ClockConfig+0x1f4>)
 800b076:	5ccb      	ldrb	r3, [r1, r3]
 800b078:	f003 031f 	and.w	r3, r3, #31
 800b07c:	fa22 f303 	lsr.w	r3, r2, r3
 800b080:	4a09      	ldr	r2, [pc, #36]	; (800b0a8 <HAL_RCC_ClockConfig+0x1f8>)
 800b082:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b084:	4b09      	ldr	r3, [pc, #36]	; (800b0ac <HAL_RCC_ClockConfig+0x1fc>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4618      	mov	r0, r3
 800b08a:	f7fa fff1 	bl	8006070 <HAL_InitTick>
 800b08e:	4603      	mov	r3, r0
 800b090:	72fb      	strb	r3, [r7, #11]

  return status;
 800b092:	7afb      	ldrb	r3, [r7, #11]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	40022000 	.word	0x40022000
 800b0a0:	40021000 	.word	0x40021000
 800b0a4:	0801c954 	.word	0x0801c954
 800b0a8:	20000024 	.word	0x20000024
 800b0ac:	20000028 	.word	0x20000028

0800b0b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b089      	sub	sp, #36	; 0x24
 800b0b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	61fb      	str	r3, [r7, #28]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b0be:	4b3e      	ldr	r3, [pc, #248]	; (800b1b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	f003 030c 	and.w	r3, r3, #12
 800b0c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b0c8:	4b3b      	ldr	r3, [pc, #236]	; (800b1b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	f003 0303 	and.w	r3, r3, #3
 800b0d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d005      	beq.n	800b0e4 <HAL_RCC_GetSysClockFreq+0x34>
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	2b0c      	cmp	r3, #12
 800b0dc:	d121      	bne.n	800b122 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d11e      	bne.n	800b122 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b0e4:	4b34      	ldr	r3, [pc, #208]	; (800b1b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 0308 	and.w	r3, r3, #8
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d107      	bne.n	800b100 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b0f0:	4b31      	ldr	r3, [pc, #196]	; (800b1b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b0f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0f6:	0a1b      	lsrs	r3, r3, #8
 800b0f8:	f003 030f 	and.w	r3, r3, #15
 800b0fc:	61fb      	str	r3, [r7, #28]
 800b0fe:	e005      	b.n	800b10c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b100:	4b2d      	ldr	r3, [pc, #180]	; (800b1b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	091b      	lsrs	r3, r3, #4
 800b106:	f003 030f 	and.w	r3, r3, #15
 800b10a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b10c:	4a2b      	ldr	r2, [pc, #172]	; (800b1bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b114:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10d      	bne.n	800b138 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b120:	e00a      	b.n	800b138 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	2b04      	cmp	r3, #4
 800b126:	d102      	bne.n	800b12e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b128:	4b25      	ldr	r3, [pc, #148]	; (800b1c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800b12a:	61bb      	str	r3, [r7, #24]
 800b12c:	e004      	b.n	800b138 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	2b08      	cmp	r3, #8
 800b132:	d101      	bne.n	800b138 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b134:	4b23      	ldr	r3, [pc, #140]	; (800b1c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800b136:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	2b0c      	cmp	r3, #12
 800b13c:	d134      	bne.n	800b1a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b13e:	4b1e      	ldr	r3, [pc, #120]	; (800b1b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	f003 0303 	and.w	r3, r3, #3
 800b146:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d003      	beq.n	800b156 <HAL_RCC_GetSysClockFreq+0xa6>
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	2b03      	cmp	r3, #3
 800b152:	d003      	beq.n	800b15c <HAL_RCC_GetSysClockFreq+0xac>
 800b154:	e005      	b.n	800b162 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b156:	4b1a      	ldr	r3, [pc, #104]	; (800b1c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800b158:	617b      	str	r3, [r7, #20]
      break;
 800b15a:	e005      	b.n	800b168 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b15c:	4b19      	ldr	r3, [pc, #100]	; (800b1c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800b15e:	617b      	str	r3, [r7, #20]
      break;
 800b160:	e002      	b.n	800b168 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	617b      	str	r3, [r7, #20]
      break;
 800b166:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b168:	4b13      	ldr	r3, [pc, #76]	; (800b1b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	091b      	lsrs	r3, r3, #4
 800b16e:	f003 0307 	and.w	r3, r3, #7
 800b172:	3301      	adds	r3, #1
 800b174:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b176:	4b10      	ldr	r3, [pc, #64]	; (800b1b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	0a1b      	lsrs	r3, r3, #8
 800b17c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	fb03 f202 	mul.w	r2, r3, r2
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	fbb2 f3f3 	udiv	r3, r2, r3
 800b18c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b18e:	4b0a      	ldr	r3, [pc, #40]	; (800b1b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	0e5b      	lsrs	r3, r3, #25
 800b194:	f003 0303 	and.w	r3, r3, #3
 800b198:	3301      	adds	r3, #1
 800b19a:	005b      	lsls	r3, r3, #1
 800b19c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b1a8:	69bb      	ldr	r3, [r7, #24]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3724      	adds	r7, #36	; 0x24
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	40021000 	.word	0x40021000
 800b1bc:	0801c96c 	.word	0x0801c96c
 800b1c0:	00f42400 	.word	0x00f42400
 800b1c4:	007a1200 	.word	0x007a1200

0800b1c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b1cc:	4b03      	ldr	r3, [pc, #12]	; (800b1dc <HAL_RCC_GetHCLKFreq+0x14>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	20000024 	.word	0x20000024

0800b1e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b1e4:	f7ff fff0 	bl	800b1c8 <HAL_RCC_GetHCLKFreq>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	4b06      	ldr	r3, [pc, #24]	; (800b204 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	0a1b      	lsrs	r3, r3, #8
 800b1f0:	f003 0307 	and.w	r3, r3, #7
 800b1f4:	4904      	ldr	r1, [pc, #16]	; (800b208 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b1f6:	5ccb      	ldrb	r3, [r1, r3]
 800b1f8:	f003 031f 	and.w	r3, r3, #31
 800b1fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b200:	4618      	mov	r0, r3
 800b202:	bd80      	pop	{r7, pc}
 800b204:	40021000 	.word	0x40021000
 800b208:	0801c964 	.word	0x0801c964

0800b20c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b210:	f7ff ffda 	bl	800b1c8 <HAL_RCC_GetHCLKFreq>
 800b214:	4602      	mov	r2, r0
 800b216:	4b06      	ldr	r3, [pc, #24]	; (800b230 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	0adb      	lsrs	r3, r3, #11
 800b21c:	f003 0307 	and.w	r3, r3, #7
 800b220:	4904      	ldr	r1, [pc, #16]	; (800b234 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b222:	5ccb      	ldrb	r3, [r1, r3]
 800b224:	f003 031f 	and.w	r3, r3, #31
 800b228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	40021000 	.word	0x40021000
 800b234:	0801c964 	.word	0x0801c964

0800b238 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b086      	sub	sp, #24
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b240:	2300      	movs	r3, #0
 800b242:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b244:	4b2a      	ldr	r3, [pc, #168]	; (800b2f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d003      	beq.n	800b258 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b250:	f7ff f9a6 	bl	800a5a0 <HAL_PWREx_GetVoltageRange>
 800b254:	6178      	str	r0, [r7, #20]
 800b256:	e014      	b.n	800b282 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b258:	4b25      	ldr	r3, [pc, #148]	; (800b2f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b25a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b25c:	4a24      	ldr	r2, [pc, #144]	; (800b2f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b25e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b262:	6593      	str	r3, [r2, #88]	; 0x58
 800b264:	4b22      	ldr	r3, [pc, #136]	; (800b2f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b26c:	60fb      	str	r3, [r7, #12]
 800b26e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b270:	f7ff f996 	bl	800a5a0 <HAL_PWREx_GetVoltageRange>
 800b274:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b276:	4b1e      	ldr	r3, [pc, #120]	; (800b2f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b27a:	4a1d      	ldr	r2, [pc, #116]	; (800b2f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b27c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b280:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b288:	d10b      	bne.n	800b2a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2b80      	cmp	r3, #128	; 0x80
 800b28e:	d919      	bls.n	800b2c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2ba0      	cmp	r3, #160	; 0xa0
 800b294:	d902      	bls.n	800b29c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b296:	2302      	movs	r3, #2
 800b298:	613b      	str	r3, [r7, #16]
 800b29a:	e013      	b.n	800b2c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b29c:	2301      	movs	r3, #1
 800b29e:	613b      	str	r3, [r7, #16]
 800b2a0:	e010      	b.n	800b2c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2b80      	cmp	r3, #128	; 0x80
 800b2a6:	d902      	bls.n	800b2ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b2a8:	2303      	movs	r3, #3
 800b2aa:	613b      	str	r3, [r7, #16]
 800b2ac:	e00a      	b.n	800b2c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2b80      	cmp	r3, #128	; 0x80
 800b2b2:	d102      	bne.n	800b2ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b2b4:	2302      	movs	r3, #2
 800b2b6:	613b      	str	r3, [r7, #16]
 800b2b8:	e004      	b.n	800b2c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2b70      	cmp	r3, #112	; 0x70
 800b2be:	d101      	bne.n	800b2c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b2c4:	4b0b      	ldr	r3, [pc, #44]	; (800b2f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f023 0207 	bic.w	r2, r3, #7
 800b2cc:	4909      	ldr	r1, [pc, #36]	; (800b2f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b2d4:	4b07      	ldr	r3, [pc, #28]	; (800b2f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 0307 	and.w	r3, r3, #7
 800b2dc:	693a      	ldr	r2, [r7, #16]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d001      	beq.n	800b2e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e000      	b.n	800b2e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3718      	adds	r7, #24
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	40021000 	.word	0x40021000
 800b2f4:	40022000 	.word	0x40022000

0800b2f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b300:	2300      	movs	r3, #0
 800b302:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b304:	2300      	movs	r3, #0
 800b306:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b310:	2b00      	cmp	r3, #0
 800b312:	d031      	beq.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b318:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b31c:	d01a      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800b31e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b322:	d814      	bhi.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b324:	2b00      	cmp	r3, #0
 800b326:	d009      	beq.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b328:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b32c:	d10f      	bne.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800b32e:	4b5d      	ldr	r3, [pc, #372]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	4a5c      	ldr	r2, [pc, #368]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b338:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b33a:	e00c      	b.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	3304      	adds	r3, #4
 800b340:	2100      	movs	r1, #0
 800b342:	4618      	mov	r0, r3
 800b344:	f000 f9ce 	bl	800b6e4 <RCCEx_PLLSAI1_Config>
 800b348:	4603      	mov	r3, r0
 800b34a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b34c:	e003      	b.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	74fb      	strb	r3, [r7, #19]
      break;
 800b352:	e000      	b.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800b354:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b356:	7cfb      	ldrb	r3, [r7, #19]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10b      	bne.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b35c:	4b51      	ldr	r3, [pc, #324]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b35e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b362:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b36a:	494e      	ldr	r1, [pc, #312]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b36c:	4313      	orrs	r3, r2
 800b36e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b372:	e001      	b.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b374:	7cfb      	ldrb	r3, [r7, #19]
 800b376:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b380:	2b00      	cmp	r3, #0
 800b382:	f000 809e 	beq.w	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b386:	2300      	movs	r3, #0
 800b388:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b38a:	4b46      	ldr	r3, [pc, #280]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b38c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b38e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d101      	bne.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800b396:	2301      	movs	r3, #1
 800b398:	e000      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800b39a:	2300      	movs	r3, #0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00d      	beq.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b3a0:	4b40      	ldr	r3, [pc, #256]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b3a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3a4:	4a3f      	ldr	r2, [pc, #252]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b3a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3aa:	6593      	str	r3, [r2, #88]	; 0x58
 800b3ac:	4b3d      	ldr	r3, [pc, #244]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b3ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3b4:	60bb      	str	r3, [r7, #8]
 800b3b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b3bc:	4b3a      	ldr	r3, [pc, #232]	; (800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a39      	ldr	r2, [pc, #228]	; (800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b3c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b3c8:	f7fa fea2 	bl	8006110 <HAL_GetTick>
 800b3cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b3ce:	e009      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3d0:	f7fa fe9e 	bl	8006110 <HAL_GetTick>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	1ad3      	subs	r3, r2, r3
 800b3da:	2b02      	cmp	r3, #2
 800b3dc:	d902      	bls.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	74fb      	strb	r3, [r7, #19]
        break;
 800b3e2:	e005      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b3e4:	4b30      	ldr	r3, [pc, #192]	; (800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d0ef      	beq.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800b3f0:	7cfb      	ldrb	r3, [r7, #19]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d15a      	bne.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b3f6:	4b2b      	ldr	r3, [pc, #172]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b3f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b400:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d01e      	beq.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b40c:	697a      	ldr	r2, [r7, #20]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d019      	beq.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b412:	4b24      	ldr	r3, [pc, #144]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b41c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b41e:	4b21      	ldr	r3, [pc, #132]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b424:	4a1f      	ldr	r2, [pc, #124]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b42a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b42e:	4b1d      	ldr	r3, [pc, #116]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b434:	4a1b      	ldr	r2, [pc, #108]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b43a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b43e:	4a19      	ldr	r2, [pc, #100]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f003 0301 	and.w	r3, r3, #1
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d016      	beq.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b450:	f7fa fe5e 	bl	8006110 <HAL_GetTick>
 800b454:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b456:	e00b      	b.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b458:	f7fa fe5a 	bl	8006110 <HAL_GetTick>
 800b45c:	4602      	mov	r2, r0
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	f241 3288 	movw	r2, #5000	; 0x1388
 800b466:	4293      	cmp	r3, r2
 800b468:	d902      	bls.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800b46a:	2303      	movs	r3, #3
 800b46c:	74fb      	strb	r3, [r7, #19]
            break;
 800b46e:	e006      	b.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b470:	4b0c      	ldr	r3, [pc, #48]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b476:	f003 0302 	and.w	r3, r3, #2
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d0ec      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800b47e:	7cfb      	ldrb	r3, [r7, #19]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10b      	bne.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b484:	4b07      	ldr	r3, [pc, #28]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b48a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b492:	4904      	ldr	r1, [pc, #16]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b494:	4313      	orrs	r3, r2
 800b496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b49a:	e009      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b49c:	7cfb      	ldrb	r3, [r7, #19]
 800b49e:	74bb      	strb	r3, [r7, #18]
 800b4a0:	e006      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800b4a2:	bf00      	nop
 800b4a4:	40021000 	.word	0x40021000
 800b4a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ac:	7cfb      	ldrb	r3, [r7, #19]
 800b4ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b4b0:	7c7b      	ldrb	r3, [r7, #17]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d105      	bne.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b4b6:	4b8a      	ldr	r3, [pc, #552]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b4b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ba:	4a89      	ldr	r2, [pc, #548]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b4bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f003 0301 	and.w	r3, r3, #1
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00a      	beq.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b4ce:	4b84      	ldr	r3, [pc, #528]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b4d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4d4:	f023 0203 	bic.w	r2, r3, #3
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6a1b      	ldr	r3, [r3, #32]
 800b4dc:	4980      	ldr	r1, [pc, #512]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 0302 	and.w	r3, r3, #2
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00a      	beq.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b4f0:	4b7b      	ldr	r3, [pc, #492]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4f6:	f023 020c 	bic.w	r2, r3, #12
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fe:	4978      	ldr	r1, [pc, #480]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b500:	4313      	orrs	r3, r2
 800b502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 0320 	and.w	r3, r3, #32
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00a      	beq.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b512:	4b73      	ldr	r3, [pc, #460]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b518:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b520:	496f      	ldr	r1, [pc, #444]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b522:	4313      	orrs	r3, r2
 800b524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00a      	beq.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b534:	4b6a      	ldr	r3, [pc, #424]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b53a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b542:	4967      	ldr	r1, [pc, #412]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b544:	4313      	orrs	r3, r2
 800b546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00a      	beq.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b556:	4b62      	ldr	r3, [pc, #392]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b55c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b564:	495e      	ldr	r1, [pc, #376]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b566:	4313      	orrs	r3, r2
 800b568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00a      	beq.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b578:	4b59      	ldr	r3, [pc, #356]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b57e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b586:	4956      	ldr	r1, [pc, #344]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b588:	4313      	orrs	r3, r2
 800b58a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00a      	beq.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b59a:	4b51      	ldr	r3, [pc, #324]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b59c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a8:	494d      	ldr	r1, [pc, #308]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d028      	beq.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b5bc:	4b48      	ldr	r3, [pc, #288]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b5be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ca:	4945      	ldr	r1, [pc, #276]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5da:	d106      	bne.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b5dc:	4b40      	ldr	r3, [pc, #256]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	4a3f      	ldr	r2, [pc, #252]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b5e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5e6:	60d3      	str	r3, [r2, #12]
 800b5e8:	e011      	b.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b5f2:	d10c      	bne.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	3304      	adds	r3, #4
 800b5f8:	2101      	movs	r1, #1
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f000 f872 	bl	800b6e4 <RCCEx_PLLSAI1_Config>
 800b600:	4603      	mov	r3, r0
 800b602:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b604:	7cfb      	ldrb	r3, [r7, #19]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d001      	beq.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800b60a:	7cfb      	ldrb	r3, [r7, #19]
 800b60c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b616:	2b00      	cmp	r3, #0
 800b618:	d028      	beq.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b61a:	4b31      	ldr	r3, [pc, #196]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b61c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b620:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b628:	492d      	ldr	r1, [pc, #180]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b62a:	4313      	orrs	r3, r2
 800b62c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b638:	d106      	bne.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b63a:	4b29      	ldr	r3, [pc, #164]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	4a28      	ldr	r2, [pc, #160]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b644:	60d3      	str	r3, [r2, #12]
 800b646:	e011      	b.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b64c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b650:	d10c      	bne.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	3304      	adds	r3, #4
 800b656:	2101      	movs	r1, #1
 800b658:	4618      	mov	r0, r3
 800b65a:	f000 f843 	bl	800b6e4 <RCCEx_PLLSAI1_Config>
 800b65e:	4603      	mov	r3, r0
 800b660:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b662:	7cfb      	ldrb	r3, [r7, #19]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d001      	beq.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800b668:	7cfb      	ldrb	r3, [r7, #19]
 800b66a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b674:	2b00      	cmp	r3, #0
 800b676:	d01c      	beq.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b678:	4b19      	ldr	r3, [pc, #100]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b67e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b686:	4916      	ldr	r1, [pc, #88]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b688:	4313      	orrs	r3, r2
 800b68a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b696:	d10c      	bne.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	3304      	adds	r3, #4
 800b69c:	2102      	movs	r1, #2
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f000 f820 	bl	800b6e4 <RCCEx_PLLSAI1_Config>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b6a8:	7cfb      	ldrb	r3, [r7, #19]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d001      	beq.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800b6ae:	7cfb      	ldrb	r3, [r7, #19]
 800b6b0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00a      	beq.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b6be:	4b08      	ldr	r3, [pc, #32]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b6c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6c4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6cc:	4904      	ldr	r1, [pc, #16]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b6d4:	7cbb      	ldrb	r3, [r7, #18]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3718      	adds	r7, #24
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	40021000 	.word	0x40021000

0800b6e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b6f2:	4b74      	ldr	r3, [pc, #464]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	f003 0303 	and.w	r3, r3, #3
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d018      	beq.n	800b730 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b6fe:	4b71      	ldr	r3, [pc, #452]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	f003 0203 	and.w	r2, r3, #3
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d10d      	bne.n	800b72a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
       ||
 800b712:	2b00      	cmp	r3, #0
 800b714:	d009      	beq.n	800b72a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b716:	4b6b      	ldr	r3, [pc, #428]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	091b      	lsrs	r3, r3, #4
 800b71c:	f003 0307 	and.w	r3, r3, #7
 800b720:	1c5a      	adds	r2, r3, #1
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	685b      	ldr	r3, [r3, #4]
       ||
 800b726:	429a      	cmp	r2, r3
 800b728:	d047      	beq.n	800b7ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	73fb      	strb	r3, [r7, #15]
 800b72e:	e044      	b.n	800b7ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2b03      	cmp	r3, #3
 800b736:	d018      	beq.n	800b76a <RCCEx_PLLSAI1_Config+0x86>
 800b738:	2b03      	cmp	r3, #3
 800b73a:	d825      	bhi.n	800b788 <RCCEx_PLLSAI1_Config+0xa4>
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d002      	beq.n	800b746 <RCCEx_PLLSAI1_Config+0x62>
 800b740:	2b02      	cmp	r3, #2
 800b742:	d009      	beq.n	800b758 <RCCEx_PLLSAI1_Config+0x74>
 800b744:	e020      	b.n	800b788 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b746:	4b5f      	ldr	r3, [pc, #380]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f003 0302 	and.w	r3, r3, #2
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d11d      	bne.n	800b78e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b752:	2301      	movs	r3, #1
 800b754:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b756:	e01a      	b.n	800b78e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b758:	4b5a      	ldr	r3, [pc, #360]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b760:	2b00      	cmp	r3, #0
 800b762:	d116      	bne.n	800b792 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b768:	e013      	b.n	800b792 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b76a:	4b56      	ldr	r3, [pc, #344]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10f      	bne.n	800b796 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b776:	4b53      	ldr	r3, [pc, #332]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d109      	bne.n	800b796 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b782:	2301      	movs	r3, #1
 800b784:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b786:	e006      	b.n	800b796 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b788:	2301      	movs	r3, #1
 800b78a:	73fb      	strb	r3, [r7, #15]
      break;
 800b78c:	e004      	b.n	800b798 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b78e:	bf00      	nop
 800b790:	e002      	b.n	800b798 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b792:	bf00      	nop
 800b794:	e000      	b.n	800b798 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b796:	bf00      	nop
    }

    if(status == HAL_OK)
 800b798:	7bfb      	ldrb	r3, [r7, #15]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d10d      	bne.n	800b7ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b79e:	4b49      	ldr	r3, [pc, #292]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6819      	ldr	r1, [r3, #0]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	011b      	lsls	r3, r3, #4
 800b7b2:	430b      	orrs	r3, r1
 800b7b4:	4943      	ldr	r1, [pc, #268]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b7ba:	7bfb      	ldrb	r3, [r7, #15]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d17c      	bne.n	800b8ba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b7c0:	4b40      	ldr	r3, [pc, #256]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a3f      	ldr	r2, [pc, #252]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b7c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b7ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7cc:	f7fa fca0 	bl	8006110 <HAL_GetTick>
 800b7d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b7d2:	e009      	b.n	800b7e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b7d4:	f7fa fc9c 	bl	8006110 <HAL_GetTick>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	1ad3      	subs	r3, r2, r3
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d902      	bls.n	800b7e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b7e2:	2303      	movs	r3, #3
 800b7e4:	73fb      	strb	r3, [r7, #15]
        break;
 800b7e6:	e005      	b.n	800b7f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b7e8:	4b36      	ldr	r3, [pc, #216]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1ef      	bne.n	800b7d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b7f4:	7bfb      	ldrb	r3, [r7, #15]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d15f      	bne.n	800b8ba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d110      	bne.n	800b822 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b800:	4b30      	ldr	r3, [pc, #192]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800b808:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	6892      	ldr	r2, [r2, #8]
 800b810:	0211      	lsls	r1, r2, #8
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	68d2      	ldr	r2, [r2, #12]
 800b816:	06d2      	lsls	r2, r2, #27
 800b818:	430a      	orrs	r2, r1
 800b81a:	492a      	ldr	r1, [pc, #168]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b81c:	4313      	orrs	r3, r2
 800b81e:	610b      	str	r3, [r1, #16]
 800b820:	e027      	b.n	800b872 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	2b01      	cmp	r3, #1
 800b826:	d112      	bne.n	800b84e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b828:	4b26      	ldr	r3, [pc, #152]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b82a:	691b      	ldr	r3, [r3, #16]
 800b82c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b830:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	6892      	ldr	r2, [r2, #8]
 800b838:	0211      	lsls	r1, r2, #8
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	6912      	ldr	r2, [r2, #16]
 800b83e:	0852      	lsrs	r2, r2, #1
 800b840:	3a01      	subs	r2, #1
 800b842:	0552      	lsls	r2, r2, #21
 800b844:	430a      	orrs	r2, r1
 800b846:	491f      	ldr	r1, [pc, #124]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b848:	4313      	orrs	r3, r2
 800b84a:	610b      	str	r3, [r1, #16]
 800b84c:	e011      	b.n	800b872 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b84e:	4b1d      	ldr	r3, [pc, #116]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b856:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	6892      	ldr	r2, [r2, #8]
 800b85e:	0211      	lsls	r1, r2, #8
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	6952      	ldr	r2, [r2, #20]
 800b864:	0852      	lsrs	r2, r2, #1
 800b866:	3a01      	subs	r2, #1
 800b868:	0652      	lsls	r2, r2, #25
 800b86a:	430a      	orrs	r2, r1
 800b86c:	4915      	ldr	r1, [pc, #84]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b86e:	4313      	orrs	r3, r2
 800b870:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b872:	4b14      	ldr	r3, [pc, #80]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a13      	ldr	r2, [pc, #76]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b878:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b87c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b87e:	f7fa fc47 	bl	8006110 <HAL_GetTick>
 800b882:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b884:	e009      	b.n	800b89a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b886:	f7fa fc43 	bl	8006110 <HAL_GetTick>
 800b88a:	4602      	mov	r2, r0
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	2b02      	cmp	r3, #2
 800b892:	d902      	bls.n	800b89a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800b894:	2303      	movs	r3, #3
 800b896:	73fb      	strb	r3, [r7, #15]
          break;
 800b898:	e005      	b.n	800b8a6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b89a:	4b0a      	ldr	r3, [pc, #40]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d0ef      	beq.n	800b886 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800b8a6:	7bfb      	ldrb	r3, [r7, #15]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d106      	bne.n	800b8ba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b8ac:	4b05      	ldr	r3, [pc, #20]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b8ae:	691a      	ldr	r2, [r3, #16]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	699b      	ldr	r3, [r3, #24]
 800b8b4:	4903      	ldr	r1, [pc, #12]	; (800b8c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	40021000 	.word	0x40021000

0800b8c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d101      	bne.n	800b8da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e095      	b.n	800ba06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d108      	bne.n	800b8f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b8ea:	d009      	beq.n	800b900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	61da      	str	r2, [r3, #28]
 800b8f2:	e005      	b.n	800b900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d106      	bne.n	800b920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f7f6 fd2e 	bl	800237c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2202      	movs	r2, #2
 800b924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b936:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b940:	d902      	bls.n	800b948 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b942:	2300      	movs	r3, #0
 800b944:	60fb      	str	r3, [r7, #12]
 800b946:	e002      	b.n	800b94e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b94c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b956:	d007      	beq.n	800b968 <HAL_SPI_Init+0xa0>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b960:	d002      	beq.n	800b968 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b978:	431a      	orrs	r2, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	691b      	ldr	r3, [r3, #16]
 800b97e:	f003 0302 	and.w	r3, r3, #2
 800b982:	431a      	orrs	r2, r3
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	695b      	ldr	r3, [r3, #20]
 800b988:	f003 0301 	and.w	r3, r3, #1
 800b98c:	431a      	orrs	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b996:	431a      	orrs	r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	69db      	ldr	r3, [r3, #28]
 800b99c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b9a0:	431a      	orrs	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6a1b      	ldr	r3, [r3, #32]
 800b9a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9aa:	ea42 0103 	orr.w	r1, r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	430a      	orrs	r2, r1
 800b9bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	699b      	ldr	r3, [r3, #24]
 800b9c2:	0c1b      	lsrs	r3, r3, #16
 800b9c4:	f003 0204 	and.w	r2, r3, #4
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9cc:	f003 0310 	and.w	r3, r3, #16
 800b9d0:	431a      	orrs	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9d6:	f003 0308 	and.w	r3, r3, #8
 800b9da:	431a      	orrs	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b9e4:	ea42 0103 	orr.w	r1, r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	430a      	orrs	r2, r1
 800b9f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
	...

0800ba10 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d101      	bne.n	800ba30 <HAL_SPI_Transmit_DMA+0x20>
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	e0d4      	b.n	800bbda <HAL_SPI_Transmit_DMA+0x1ca>
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d002      	beq.n	800ba4a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800ba44:	2302      	movs	r3, #2
 800ba46:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ba48:	e0c2      	b.n	800bbd0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d002      	beq.n	800ba56 <HAL_SPI_Transmit_DMA+0x46>
 800ba50:	88fb      	ldrh	r3, [r7, #6]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d102      	bne.n	800ba5c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ba5a:	e0b9      	b.n	800bbd0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2203      	movs	r2, #3
 800ba60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2200      	movs	r2, #0
 800ba68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	68ba      	ldr	r2, [r7, #8]
 800ba6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	88fa      	ldrh	r2, [r7, #6]
 800ba74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	88fa      	ldrh	r2, [r7, #6]
 800ba7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2200      	movs	r2, #0
 800ba86:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2200      	movs	r2, #0
 800ba92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800baa6:	d10f      	bne.n	800bac8 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	681a      	ldr	r2, [r3, #0]
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bab6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bac6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bacc:	4a45      	ldr	r2, [pc, #276]	; (800bbe4 <HAL_SPI_Transmit_DMA+0x1d4>)
 800bace:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bad4:	4a44      	ldr	r2, [pc, #272]	; (800bbe8 <HAL_SPI_Transmit_DMA+0x1d8>)
 800bad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800badc:	4a43      	ldr	r2, [pc, #268]	; (800bbec <HAL_SPI_Transmit_DMA+0x1dc>)
 800bade:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bae4:	2200      	movs	r2, #0
 800bae6:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	685a      	ldr	r2, [r3, #4]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800baf6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb00:	d82d      	bhi.n	800bb5e <HAL_SPI_Transmit_DMA+0x14e>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb06:	699b      	ldr	r3, [r3, #24]
 800bb08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb0c:	d127      	bne.n	800bb5e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	f003 0301 	and.w	r3, r3, #1
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10f      	bne.n	800bb3c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	685a      	ldr	r2, [r3, #4]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bb2a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	085b      	lsrs	r3, r3, #1
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bb3a:	e010      	b.n	800bb5e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	685a      	ldr	r2, [r3, #4]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb4a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	085b      	lsrs	r3, r3, #1
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	3301      	adds	r3, #1
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb66:	4619      	mov	r1, r3
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	330c      	adds	r3, #12
 800bb6e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb74:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bb76:	f7fb ff65 	bl	8007a44 <HAL_DMA_Start_IT>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d008      	beq.n	800bb92 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb84:	f043 0210 	orr.w	r2, r3, #16
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	75fb      	strb	r3, [r7, #23]

    goto error;
 800bb90:	e01e      	b.n	800bbd0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9c:	2b40      	cmp	r3, #64	; 0x40
 800bb9e:	d007      	beq.n	800bbb0 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bbae:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	685a      	ldr	r2, [r3, #4]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f042 0220 	orr.w	r2, r2, #32
 800bbbe:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	685a      	ldr	r2, [r3, #4]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f042 0202 	orr.w	r2, r2, #2
 800bbce:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bbd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3718      	adds	r7, #24
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	0800c627 	.word	0x0800c627
 800bbe8:	0800c449 	.word	0x0800c449
 800bbec:	0800c67b 	.word	0x0800c67b

0800bbf0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d002      	beq.n	800bc14 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800bc0e:	2302      	movs	r3, #2
 800bc10:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bc12:	e0fe      	b.n	800be12 <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d110      	bne.n	800bc3e <HAL_SPI_Receive_DMA+0x4e>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc24:	d10b      	bne.n	800bc3e <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2204      	movs	r2, #4
 800bc2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800bc2e:	88fb      	ldrh	r3, [r7, #6]
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	68b9      	ldr	r1, [r7, #8]
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f000 f8fb 	bl	800be30 <HAL_SPI_TransmitReceive_DMA>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	e0ee      	b.n	800be1c <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d101      	bne.n	800bc4c <HAL_SPI_Receive_DMA+0x5c>
 800bc48:	2302      	movs	r3, #2
 800bc4a:	e0e7      	b.n	800be1c <HAL_SPI_Receive_DMA+0x22c>
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d002      	beq.n	800bc60 <HAL_SPI_Receive_DMA+0x70>
 800bc5a:	88fb      	ldrh	r3, [r7, #6]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d102      	bne.n	800bc66 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bc64:	e0d5      	b.n	800be12 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2204      	movs	r2, #4
 800bc6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2200      	movs	r2, #0
 800bc72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	88fa      	ldrh	r2, [r7, #6]
 800bc7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	88fa      	ldrh	r2, [r7, #6]
 800bc86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2200      	movs	r2, #0
 800bc94:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcaa:	d10f      	bne.n	800bccc <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bcca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	685a      	ldr	r2, [r3, #4]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bcda:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bce4:	d908      	bls.n	800bcf8 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	685a      	ldr	r2, [r3, #4]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bcf4:	605a      	str	r2, [r3, #4]
 800bcf6:	e042      	b.n	800bd7e <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	685a      	ldr	r2, [r3, #4]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bd06:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd0c:	699b      	ldr	r3, [r3, #24]
 800bd0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd12:	d134      	bne.n	800bd7e <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	685a      	ldr	r2, [r3, #4]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bd22:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	f003 0301 	and.w	r3, r3, #1
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d111      	bne.n	800bd58 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	685a      	ldr	r2, [r3, #4]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd42:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	085b      	lsrs	r3, r3, #1
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800bd56:	e012      	b.n	800bd7e <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	685a      	ldr	r2, [r3, #4]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd66:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	085b      	lsrs	r3, r3, #1
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	3301      	adds	r3, #1
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd82:	4a28      	ldr	r2, [pc, #160]	; (800be24 <HAL_SPI_Receive_DMA+0x234>)
 800bd84:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd8a:	4a27      	ldr	r2, [pc, #156]	; (800be28 <HAL_SPI_Receive_DMA+0x238>)
 800bd8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd92:	4a26      	ldr	r2, [pc, #152]	; (800be2c <HAL_SPI_Receive_DMA+0x23c>)
 800bd94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	330c      	adds	r3, #12
 800bda8:	4619      	mov	r1, r3
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdae:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bdb6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800bdb8:	f7fb fe44 	bl	8007a44 <HAL_DMA_Start_IT>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d008      	beq.n	800bdd4 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdc6:	f043 0210 	orr.w	r2, r3, #16
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	75fb      	strb	r3, [r7, #23]

    goto error;
 800bdd2:	e01e      	b.n	800be12 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdde:	2b40      	cmp	r3, #64	; 0x40
 800bde0:	d007      	beq.n	800bdf2 <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdf0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	685a      	ldr	r2, [r3, #4]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f042 0220 	orr.w	r2, r2, #32
 800be00:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	685a      	ldr	r2, [r3, #4]
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f042 0201 	orr.w	r2, r2, #1
 800be10:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2200      	movs	r2, #0
 800be16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800be1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3718      	adds	r7, #24
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	0800c643 	.word	0x0800c643
 800be28:	0800c4ef 	.word	0x0800c4ef
 800be2c:	0800c67b 	.word	0x0800c67b

0800be30 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
 800be3c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be3e:	2300      	movs	r3, #0
 800be40:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d101      	bne.n	800be50 <HAL_SPI_TransmitReceive_DMA+0x20>
 800be4c:	2302      	movs	r3, #2
 800be4e:	e164      	b.n	800c11a <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2201      	movs	r2, #1
 800be54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800be5e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800be66:	7dbb      	ldrb	r3, [r7, #22]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d00d      	beq.n	800be88 <HAL_SPI_TransmitReceive_DMA+0x58>
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be72:	d106      	bne.n	800be82 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	689b      	ldr	r3, [r3, #8]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d102      	bne.n	800be82 <HAL_SPI_TransmitReceive_DMA+0x52>
 800be7c:	7dbb      	ldrb	r3, [r7, #22]
 800be7e:	2b04      	cmp	r3, #4
 800be80:	d002      	beq.n	800be88 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800be82:	2302      	movs	r3, #2
 800be84:	75fb      	strb	r3, [r7, #23]
    goto error;
 800be86:	e143      	b.n	800c110 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d005      	beq.n	800be9a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800be94:	887b      	ldrh	r3, [r7, #2]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d102      	bne.n	800bea0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800be9e:	e137      	b.n	800c110 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	2b04      	cmp	r3, #4
 800beaa:	d003      	beq.n	800beb4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2205      	movs	r2, #5
 800beb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2200      	movs	r2, #0
 800beb8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	887a      	ldrh	r2, [r7, #2]
 800bec4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	887a      	ldrh	r2, [r7, #2]
 800beca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	887a      	ldrh	r2, [r7, #2]
 800bed6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	887a      	ldrh	r2, [r7, #2]
 800bede:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2200      	movs	r2, #0
 800bee6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2200      	movs	r2, #0
 800beec:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	685a      	ldr	r2, [r3, #4]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800befc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf06:	d908      	bls.n	800bf1a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	685a      	ldr	r2, [r3, #4]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bf16:	605a      	str	r2, [r3, #4]
 800bf18:	e06f      	b.n	800bffa <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	685a      	ldr	r2, [r3, #4]
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bf28:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf2e:	699b      	ldr	r3, [r3, #24]
 800bf30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf34:	d126      	bne.n	800bf84 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bf3a:	f003 0301 	and.w	r3, r3, #1
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d10f      	bne.n	800bf62 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	685a      	ldr	r2, [r3, #4]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bf50:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	085b      	lsrs	r3, r3, #1
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bf60:	e010      	b.n	800bf84 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	685a      	ldr	r2, [r3, #4]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf70:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	085b      	lsrs	r3, r3, #1
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	b29a      	uxth	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf88:	699b      	ldr	r3, [r3, #24]
 800bf8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf8e:	d134      	bne.n	800bffa <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	685a      	ldr	r2, [r3, #4]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bf9e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	f003 0301 	and.w	r3, r3, #1
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d111      	bne.n	800bfd4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	685a      	ldr	r2, [r3, #4]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bfbe:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	085b      	lsrs	r3, r3, #1
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800bfd2:	e012      	b.n	800bffa <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	685a      	ldr	r2, [r3, #4]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bfe2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	085b      	lsrs	r3, r3, #1
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	3301      	adds	r3, #1
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c000:	b2db      	uxtb	r3, r3
 800c002:	2b04      	cmp	r3, #4
 800c004:	d108      	bne.n	800c018 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c00a:	4a46      	ldr	r2, [pc, #280]	; (800c124 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 800c00c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c012:	4a45      	ldr	r2, [pc, #276]	; (800c128 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800c014:	62da      	str	r2, [r3, #44]	; 0x2c
 800c016:	e007      	b.n	800c028 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c01c:	4a43      	ldr	r2, [pc, #268]	; (800c12c <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800c01e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c024:	4a42      	ldr	r2, [pc, #264]	; (800c130 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800c026:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c02c:	4a41      	ldr	r2, [pc, #260]	; (800c134 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800c02e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c034:	2200      	movs	r2, #0
 800c036:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	330c      	adds	r3, #12
 800c042:	4619      	mov	r1, r3
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c048:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c050:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c052:	f7fb fcf7 	bl	8007a44 <HAL_DMA_Start_IT>
 800c056:	4603      	mov	r3, r0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d008      	beq.n	800c06e <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c060:	f043 0210 	orr.w	r2, r3, #16
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c068:	2301      	movs	r3, #1
 800c06a:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c06c:	e050      	b.n	800c110 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	685a      	ldr	r2, [r3, #4]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f042 0201 	orr.w	r2, r2, #1
 800c07c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c082:	2200      	movs	r2, #0
 800c084:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c08a:	2200      	movs	r2, #0
 800c08c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c092:	2200      	movs	r2, #0
 800c094:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c09a:	2200      	movs	r2, #0
 800c09c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	330c      	adds	r3, #12
 800c0ae:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0b4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c0b6:	f7fb fcc5 	bl	8007a44 <HAL_DMA_Start_IT>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d008      	beq.n	800c0d2 <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0c4:	f043 0210 	orr.w	r2, r3, #16
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c0d0:	e01e      	b.n	800c110 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0dc:	2b40      	cmp	r3, #64	; 0x40
 800c0de:	d007      	beq.n	800c0f0 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0ee:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	685a      	ldr	r2, [r3, #4]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f042 0220 	orr.w	r2, r2, #32
 800c0fe:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	685a      	ldr	r2, [r3, #4]
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f042 0202 	orr.w	r2, r2, #2
 800c10e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2200      	movs	r2, #0
 800c114:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c118:	7dfb      	ldrb	r3, [r7, #23]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3718      	adds	r7, #24
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	0800c643 	.word	0x0800c643
 800c128:	0800c4ef 	.word	0x0800c4ef
 800c12c:	0800c65f 	.word	0x0800c65f
 800c130:	0800c597 	.word	0x0800c597
 800c134:	0800c67b 	.word	0x0800c67b

0800c138 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c140:	2300      	movs	r3, #0
 800c142:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d00f      	beq.n	800c16c <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c150:	4618      	mov	r0, r3
 800c152:	f7fb fcd7 	bl	8007b04 <HAL_DMA_Abort>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d007      	beq.n	800c16c <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c160:	f043 0210 	orr.w	r2, r3, #16
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800c168:	2301      	movs	r3, #1
 800c16a:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00f      	beq.n	800c194 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fb fcc3 	bl	8007b04 <HAL_DMA_Abort>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	d007      	beq.n	800c194 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c188:	f043 0210 	orr.w	r2, r3, #16
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800c190:	2301      	movs	r3, #1
 800c192:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	685a      	ldr	r2, [r3, #4]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f022 0203 	bic.w	r2, r2, #3
 800c1a2:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
	...

0800c1b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b088      	sub	sp, #32
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10e      	bne.n	800c1f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d009      	beq.n	800c1f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c1e4:	69fb      	ldr	r3, [r7, #28]
 800c1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d004      	beq.n	800c1f8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	4798      	blx	r3
    return;
 800c1f6:	e0ce      	b.n	800c396 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	f003 0302 	and.w	r3, r3, #2
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d009      	beq.n	800c216 <HAL_SPI_IRQHandler+0x5e>
 800c202:	69fb      	ldr	r3, [r7, #28]
 800c204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d004      	beq.n	800c216 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	4798      	blx	r3
    return;
 800c214:	e0bf      	b.n	800c396 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	f003 0320 	and.w	r3, r3, #32
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d10a      	bne.n	800c236 <HAL_SPI_IRQHandler+0x7e>
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c226:	2b00      	cmp	r3, #0
 800c228:	d105      	bne.n	800c236 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c230:	2b00      	cmp	r3, #0
 800c232:	f000 80b0 	beq.w	800c396 <HAL_SPI_IRQHandler+0x1de>
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	f003 0320 	and.w	r3, r3, #32
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f000 80aa 	beq.w	800c396 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d023      	beq.n	800c294 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c252:	b2db      	uxtb	r3, r3
 800c254:	2b03      	cmp	r3, #3
 800c256:	d011      	beq.n	800c27c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c25c:	f043 0204 	orr.w	r2, r3, #4
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c264:	2300      	movs	r3, #0
 800c266:	617b      	str	r3, [r7, #20]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	617b      	str	r3, [r7, #20]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	617b      	str	r3, [r7, #20]
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	e00b      	b.n	800c294 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c27c:	2300      	movs	r3, #0
 800c27e:	613b      	str	r3, [r7, #16]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	68db      	ldr	r3, [r3, #12]
 800c286:	613b      	str	r3, [r7, #16]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	613b      	str	r3, [r7, #16]
 800c290:	693b      	ldr	r3, [r7, #16]
        return;
 800c292:	e080      	b.n	800c396 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	f003 0320 	and.w	r3, r3, #32
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d014      	beq.n	800c2c8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2a2:	f043 0201 	orr.w	r2, r3, #1
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	60fb      	str	r3, [r7, #12]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	60fb      	str	r3, [r7, #12]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2c4:	601a      	str	r2, [r3, #0]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d00c      	beq.n	800c2ec <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2d6:	f043 0208 	orr.w	r2, r3, #8
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c2de:	2300      	movs	r3, #0
 800c2e0:	60bb      	str	r3, [r7, #8]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	60bb      	str	r3, [r7, #8]
 800c2ea:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d04f      	beq.n	800c394 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	685a      	ldr	r2, [r3, #4]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c302:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2201      	movs	r2, #1
 800c308:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	f003 0302 	and.w	r3, r3, #2
 800c312:	2b00      	cmp	r3, #0
 800c314:	d104      	bne.n	800c320 <HAL_SPI_IRQHandler+0x168>
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	f003 0301 	and.w	r3, r3, #1
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d034      	beq.n	800c38a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	685a      	ldr	r2, [r3, #4]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f022 0203 	bic.w	r2, r2, #3
 800c32e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c334:	2b00      	cmp	r3, #0
 800c336:	d011      	beq.n	800c35c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c33c:	4a17      	ldr	r2, [pc, #92]	; (800c39c <HAL_SPI_IRQHandler+0x1e4>)
 800c33e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c344:	4618      	mov	r0, r3
 800c346:	f7fb fc1b 	bl	8007b80 <HAL_DMA_Abort_IT>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d005      	beq.n	800c35c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c354:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c360:	2b00      	cmp	r3, #0
 800c362:	d016      	beq.n	800c392 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c368:	4a0c      	ldr	r2, [pc, #48]	; (800c39c <HAL_SPI_IRQHandler+0x1e4>)
 800c36a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c370:	4618      	mov	r0, r3
 800c372:	f7fb fc05 	bl	8007b80 <HAL_DMA_Abort_IT>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00a      	beq.n	800c392 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c380:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800c388:	e003      	b.n	800c392 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 f844 	bl	800c418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c390:	e000      	b.n	800c394 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800c392:	bf00      	nop
    return;
 800c394:	bf00      	nop
  }
}
 800c396:	3720      	adds	r7, #32
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	0800c6bb 	.word	0x0800c6bb

0800c3a0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c3bc:	bf00      	nop
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c3d0:	bf00      	nop
 800c3d2:	370c      	adds	r7, #12
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800c3e4:	bf00      	nop
 800c3e6:	370c      	adds	r7, #12
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr

0800c3f0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800c3f8:	bf00      	nop
 800c3fa:	370c      	adds	r7, #12
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800c40c:	bf00      	nop
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c420:	bf00      	nop
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c43a:	b2db      	uxtb	r3, r3
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b086      	sub	sp, #24
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c454:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c456:	f7f9 fe5b 	bl	8006110 <HAL_GetTick>
 800c45a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f003 0320 	and.w	r3, r3, #32
 800c466:	2b20      	cmp	r3, #32
 800c468:	d03b      	beq.n	800c4e2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	685a      	ldr	r2, [r3, #4]
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f022 0220 	bic.w	r2, r2, #32
 800c478:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	685a      	ldr	r2, [r3, #4]
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f022 0202 	bic.w	r2, r2, #2
 800c488:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c48a:	693a      	ldr	r2, [r7, #16]
 800c48c:	2164      	movs	r1, #100	; 0x64
 800c48e:	6978      	ldr	r0, [r7, #20]
 800c490:	f000 fa9e 	bl	800c9d0 <SPI_EndRxTxTransaction>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d005      	beq.n	800c4a6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c49e:	f043 0220 	orr.w	r2, r3, #32
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10a      	bne.n	800c4c4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	60fb      	str	r3, [r7, #12]
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	68db      	ldr	r3, [r3, #12]
 800c4b8:	60fb      	str	r3, [r7, #12]
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	60fb      	str	r3, [r7, #12]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d003      	beq.n	800c4e2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c4da:	6978      	ldr	r0, [r7, #20]
 800c4dc:	f7ff ff9c 	bl	800c418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c4e0:	e002      	b.n	800c4e8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800c4e2:	6978      	ldr	r0, [r7, #20]
 800c4e4:	f7ff ff5c 	bl	800c3a0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c4e8:	3718      	adds	r7, #24
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b084      	sub	sp, #16
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4fa:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c4fc:	f7f9 fe08 	bl	8006110 <HAL_GetTick>
 800c500:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f003 0320 	and.w	r3, r3, #32
 800c50c:	2b20      	cmp	r3, #32
 800c50e:	d03c      	beq.n	800c58a <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	685a      	ldr	r2, [r3, #4]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f022 0220 	bic.w	r2, r2, #32
 800c51e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d10d      	bne.n	800c544 <SPI_DMAReceiveCplt+0x56>
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c530:	d108      	bne.n	800c544 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	685a      	ldr	r2, [r3, #4]
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f022 0203 	bic.w	r2, r2, #3
 800c540:	605a      	str	r2, [r3, #4]
 800c542:	e007      	b.n	800c554 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	685a      	ldr	r2, [r3, #4]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f022 0201 	bic.w	r2, r2, #1
 800c552:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c554:	68ba      	ldr	r2, [r7, #8]
 800c556:	2164      	movs	r1, #100	; 0x64
 800c558:	68f8      	ldr	r0, [r7, #12]
 800c55a:	f000 f9e1 	bl	800c920 <SPI_EndRxTransaction>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d002      	beq.n	800c56a <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2220      	movs	r2, #32
 800c568:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2200      	movs	r2, #0
 800c56e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2201      	movs	r2, #1
 800c576:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d003      	beq.n	800c58a <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c582:	68f8      	ldr	r0, [r7, #12]
 800c584:	f7ff ff48 	bl	800c418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c588:	e002      	b.n	800c590 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800c58a:	68f8      	ldr	r0, [r7, #12]
 800c58c:	f7ff ff12 	bl	800c3b4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b084      	sub	sp, #16
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5a2:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c5a4:	f7f9 fdb4 	bl	8006110 <HAL_GetTick>
 800c5a8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f003 0320 	and.w	r3, r3, #32
 800c5b4:	2b20      	cmp	r3, #32
 800c5b6:	d030      	beq.n	800c61a <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	685a      	ldr	r2, [r3, #4]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f022 0220 	bic.w	r2, r2, #32
 800c5c6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	2164      	movs	r1, #100	; 0x64
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f000 f9ff 	bl	800c9d0 <SPI_EndRxTxTransaction>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d005      	beq.n	800c5e4 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5dc:	f043 0220 	orr.w	r2, r3, #32
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	685a      	ldr	r2, [r3, #4]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f022 0203 	bic.w	r2, r2, #3
 800c5f2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2201      	movs	r2, #1
 800c606:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d003      	beq.n	800c61a <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f7ff ff00 	bl	800c418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c618:	e002      	b.n	800c620 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f7ff fed4 	bl	800c3c8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c626:	b580      	push	{r7, lr}
 800c628:	b084      	sub	sp, #16
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c632:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f7ff fed1 	bl	800c3dc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c63a:	bf00      	nop
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b084      	sub	sp, #16
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c64e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f7ff fecd 	bl	800c3f0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c656:	bf00      	nop
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c65e:	b580      	push	{r7, lr}
 800c660:	b084      	sub	sp, #16
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c66a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f7ff fec9 	bl	800c404 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c672:	bf00      	nop
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b084      	sub	sp, #16
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c686:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	685a      	ldr	r2, [r3, #4]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f022 0203 	bic.w	r2, r2, #3
 800c696:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c69c:	f043 0210 	orr.w	r2, r3, #16
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	f7ff feb3 	bl	800c418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c6b2:	bf00      	nop
 800c6b4:	3710      	adds	r7, #16
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b084      	sub	sp, #16
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6c6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c6d6:	68f8      	ldr	r0, [r7, #12]
 800c6d8:	f7ff fe9e 	bl	800c418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c6dc:	bf00      	nop
 800c6de:	3710      	adds	r7, #16
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b088      	sub	sp, #32
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	603b      	str	r3, [r7, #0]
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c6f4:	f7f9 fd0c 	bl	8006110 <HAL_GetTick>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fc:	1a9b      	subs	r3, r3, r2
 800c6fe:	683a      	ldr	r2, [r7, #0]
 800c700:	4413      	add	r3, r2
 800c702:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c704:	f7f9 fd04 	bl	8006110 <HAL_GetTick>
 800c708:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c70a:	4b39      	ldr	r3, [pc, #228]	; (800c7f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	015b      	lsls	r3, r3, #5
 800c710:	0d1b      	lsrs	r3, r3, #20
 800c712:	69fa      	ldr	r2, [r7, #28]
 800c714:	fb02 f303 	mul.w	r3, r2, r3
 800c718:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c71a:	e054      	b.n	800c7c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c722:	d050      	beq.n	800c7c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c724:	f7f9 fcf4 	bl	8006110 <HAL_GetTick>
 800c728:	4602      	mov	r2, r0
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	69fa      	ldr	r2, [r7, #28]
 800c730:	429a      	cmp	r2, r3
 800c732:	d902      	bls.n	800c73a <SPI_WaitFlagStateUntilTimeout+0x56>
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d13d      	bne.n	800c7b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	685a      	ldr	r2, [r3, #4]
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c748:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c752:	d111      	bne.n	800c778 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	689b      	ldr	r3, [r3, #8]
 800c758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c75c:	d004      	beq.n	800c768 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c766:	d107      	bne.n	800c778 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c776:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c77c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c780:	d10f      	bne.n	800c7a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	681a      	ldr	r2, [r3, #0]
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c790:	601a      	str	r2, [r3, #0]
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c7a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c7b2:	2303      	movs	r3, #3
 800c7b4:	e017      	b.n	800c7e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d101      	bne.n	800c7c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	689a      	ldr	r2, [r3, #8]
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	4013      	ands	r3, r2
 800c7d0:	68ba      	ldr	r2, [r7, #8]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	bf0c      	ite	eq
 800c7d6:	2301      	moveq	r3, #1
 800c7d8:	2300      	movne	r3, #0
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	461a      	mov	r2, r3
 800c7de:	79fb      	ldrb	r3, [r7, #7]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d19b      	bne.n	800c71c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3720      	adds	r7, #32
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	20000024 	.word	0x20000024

0800c7f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b08a      	sub	sp, #40	; 0x28
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
 800c800:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c802:	2300      	movs	r3, #0
 800c804:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c806:	f7f9 fc83 	bl	8006110 <HAL_GetTick>
 800c80a:	4602      	mov	r2, r0
 800c80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80e:	1a9b      	subs	r3, r3, r2
 800c810:	683a      	ldr	r2, [r7, #0]
 800c812:	4413      	add	r3, r2
 800c814:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c816:	f7f9 fc7b 	bl	8006110 <HAL_GetTick>
 800c81a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	330c      	adds	r3, #12
 800c822:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c824:	4b3d      	ldr	r3, [pc, #244]	; (800c91c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	4613      	mov	r3, r2
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	4413      	add	r3, r2
 800c82e:	00da      	lsls	r2, r3, #3
 800c830:	1ad3      	subs	r3, r2, r3
 800c832:	0d1b      	lsrs	r3, r3, #20
 800c834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c836:	fb02 f303 	mul.w	r3, r2, r3
 800c83a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c83c:	e060      	b.n	800c900 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c844:	d107      	bne.n	800c856 <SPI_WaitFifoStateUntilTimeout+0x62>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d104      	bne.n	800c856 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	b2db      	uxtb	r3, r3
 800c852:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c854:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c85c:	d050      	beq.n	800c900 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c85e:	f7f9 fc57 	bl	8006110 <HAL_GetTick>
 800c862:	4602      	mov	r2, r0
 800c864:	6a3b      	ldr	r3, [r7, #32]
 800c866:	1ad3      	subs	r3, r2, r3
 800c868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d902      	bls.n	800c874 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c870:	2b00      	cmp	r3, #0
 800c872:	d13d      	bne.n	800c8f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	685a      	ldr	r2, [r3, #4]
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c882:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c88c:	d111      	bne.n	800c8b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c896:	d004      	beq.n	800c8a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8a0:	d107      	bne.n	800c8b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8ba:	d10f      	bne.n	800c8dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c8ca:	601a      	str	r2, [r3, #0]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c8da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c8ec:	2303      	movs	r3, #3
 800c8ee:	e010      	b.n	800c912 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d101      	bne.n	800c8fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	689a      	ldr	r2, [r3, #8]
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	4013      	ands	r3, r2
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d196      	bne.n	800c83e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c910:	2300      	movs	r3, #0
}
 800c912:	4618      	mov	r0, r3
 800c914:	3728      	adds	r7, #40	; 0x28
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	20000024 	.word	0x20000024

0800c920 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b086      	sub	sp, #24
 800c924:	af02      	add	r7, sp, #8
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c934:	d111      	bne.n	800c95a <SPI_EndRxTransaction+0x3a>
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c93e:	d004      	beq.n	800c94a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	689b      	ldr	r3, [r3, #8]
 800c944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c948:	d107      	bne.n	800c95a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c958:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	2200      	movs	r2, #0
 800c962:	2180      	movs	r1, #128	; 0x80
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f7ff febd 	bl	800c6e4 <SPI_WaitFlagStateUntilTimeout>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d007      	beq.n	800c980 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c974:	f043 0220 	orr.w	r2, r3, #32
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c97c:	2303      	movs	r3, #3
 800c97e:	e023      	b.n	800c9c8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c988:	d11d      	bne.n	800c9c6 <SPI_EndRxTransaction+0xa6>
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c992:	d004      	beq.n	800c99e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c99c:	d113      	bne.n	800c9c6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	9300      	str	r3, [sp, #0]
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f7ff ff22 	bl	800c7f4 <SPI_WaitFifoStateUntilTimeout>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d007      	beq.n	800c9c6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9ba:	f043 0220 	orr.w	r2, r3, #32
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800c9c2:	2303      	movs	r3, #3
 800c9c4:	e000      	b.n	800c9c8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3710      	adds	r7, #16
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b086      	sub	sp, #24
 800c9d4:	af02      	add	r7, sp, #8
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	9300      	str	r3, [sp, #0]
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	f7ff ff03 	bl	800c7f4 <SPI_WaitFifoStateUntilTimeout>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d007      	beq.n	800ca04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9f8:	f043 0220 	orr.w	r2, r3, #32
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ca00:	2303      	movs	r3, #3
 800ca02:	e027      	b.n	800ca54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	9300      	str	r3, [sp, #0]
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	2180      	movs	r1, #128	; 0x80
 800ca0e:	68f8      	ldr	r0, [r7, #12]
 800ca10:	f7ff fe68 	bl	800c6e4 <SPI_WaitFlagStateUntilTimeout>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d007      	beq.n	800ca2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca1e:	f043 0220 	orr.w	r2, r3, #32
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ca26:	2303      	movs	r3, #3
 800ca28:	e014      	b.n	800ca54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	9300      	str	r3, [sp, #0]
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	2200      	movs	r2, #0
 800ca32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	f7ff fedc 	bl	800c7f4 <SPI_WaitFifoStateUntilTimeout>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d007      	beq.n	800ca52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca46:	f043 0220 	orr.w	r2, r3, #32
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ca4e:	2303      	movs	r3, #3
 800ca50:	e000      	b.n	800ca54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ca52:	2300      	movs	r3, #0
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3710      	adds	r7, #16
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d101      	bne.n	800ca6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e049      	b.n	800cb02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d106      	bne.n	800ca88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f7f8 ff28 	bl	80058d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2202      	movs	r2, #2
 800ca8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	3304      	adds	r3, #4
 800ca98:	4619      	mov	r1, r3
 800ca9a:	4610      	mov	r0, r2
 800ca9c:	f000 fb02 	bl	800d0a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2201      	movs	r2, #1
 800caac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2201      	movs	r2, #1
 800cab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2201      	movs	r2, #1
 800cabc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2201      	movs	r2, #1
 800cacc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2201      	movs	r2, #1
 800cad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2201      	movs	r2, #1
 800cae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2201      	movs	r2, #1
 800caec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2201      	movs	r2, #1
 800caf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3708      	adds	r7, #8
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
	...

0800cb0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b085      	sub	sp, #20
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d001      	beq.n	800cb24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800cb20:	2301      	movs	r3, #1
 800cb22:	e033      	b.n	800cb8c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2202      	movs	r2, #2
 800cb28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a19      	ldr	r2, [pc, #100]	; (800cb98 <HAL_TIM_Base_Start+0x8c>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d009      	beq.n	800cb4a <HAL_TIM_Base_Start+0x3e>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb3e:	d004      	beq.n	800cb4a <HAL_TIM_Base_Start+0x3e>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a15      	ldr	r2, [pc, #84]	; (800cb9c <HAL_TIM_Base_Start+0x90>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d115      	bne.n	800cb76 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	689a      	ldr	r2, [r3, #8]
 800cb50:	4b13      	ldr	r3, [pc, #76]	; (800cba0 <HAL_TIM_Base_Start+0x94>)
 800cb52:	4013      	ands	r3, r2
 800cb54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2b06      	cmp	r3, #6
 800cb5a:	d015      	beq.n	800cb88 <HAL_TIM_Base_Start+0x7c>
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb62:	d011      	beq.n	800cb88 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f042 0201 	orr.w	r2, r2, #1
 800cb72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb74:	e008      	b.n	800cb88 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f042 0201 	orr.w	r2, r2, #1
 800cb84:	601a      	str	r2, [r3, #0]
 800cb86:	e000      	b.n	800cb8a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cb8a:	2300      	movs	r3, #0
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3714      	adds	r7, #20
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr
 800cb98:	40012c00 	.word	0x40012c00
 800cb9c:	40014000 	.word	0x40014000
 800cba0:	00010007 	.word	0x00010007

0800cba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d001      	beq.n	800cbbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	e03b      	b.n	800cc34 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2202      	movs	r2, #2
 800cbc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	68da      	ldr	r2, [r3, #12]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f042 0201 	orr.w	r2, r2, #1
 800cbd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a19      	ldr	r2, [pc, #100]	; (800cc40 <HAL_TIM_Base_Start_IT+0x9c>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d009      	beq.n	800cbf2 <HAL_TIM_Base_Start_IT+0x4e>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbe6:	d004      	beq.n	800cbf2 <HAL_TIM_Base_Start_IT+0x4e>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a15      	ldr	r2, [pc, #84]	; (800cc44 <HAL_TIM_Base_Start_IT+0xa0>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d115      	bne.n	800cc1e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	689a      	ldr	r2, [r3, #8]
 800cbf8:	4b13      	ldr	r3, [pc, #76]	; (800cc48 <HAL_TIM_Base_Start_IT+0xa4>)
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2b06      	cmp	r3, #6
 800cc02:	d015      	beq.n	800cc30 <HAL_TIM_Base_Start_IT+0x8c>
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc0a:	d011      	beq.n	800cc30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f042 0201 	orr.w	r2, r2, #1
 800cc1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc1c:	e008      	b.n	800cc30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f042 0201 	orr.w	r2, r2, #1
 800cc2c:	601a      	str	r2, [r3, #0]
 800cc2e:	e000      	b.n	800cc32 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cc32:	2300      	movs	r3, #0
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3714      	adds	r7, #20
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr
 800cc40:	40012c00 	.word	0x40012c00
 800cc44:	40014000 	.word	0x40014000
 800cc48:	00010007 	.word	0x00010007

0800cc4c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	68da      	ldr	r2, [r3, #12]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f022 0201 	bic.w	r2, r2, #1
 800cc62:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	6a1a      	ldr	r2, [r3, #32]
 800cc6a:	f241 1311 	movw	r3, #4369	; 0x1111
 800cc6e:	4013      	ands	r3, r2
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d10f      	bne.n	800cc94 <HAL_TIM_Base_Stop_IT+0x48>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	6a1a      	ldr	r2, [r3, #32]
 800cc7a:	f240 4344 	movw	r3, #1092	; 0x444
 800cc7e:	4013      	ands	r3, r2
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d107      	bne.n	800cc94 <HAL_TIM_Base_Stop_IT+0x48>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f022 0201 	bic.w	r2, r2, #1
 800cc92:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2201      	movs	r2, #1
 800cc98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cc9c:	2300      	movs	r3, #0
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	370c      	adds	r7, #12
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr

0800ccaa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b084      	sub	sp, #16
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	691b      	ldr	r3, [r3, #16]
 800ccc0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	f003 0302 	and.w	r3, r3, #2
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d020      	beq.n	800cd0e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f003 0302 	and.w	r3, r3, #2
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d01b      	beq.n	800cd0e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f06f 0202 	mvn.w	r2, #2
 800ccde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2201      	movs	r2, #1
 800cce4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	699b      	ldr	r3, [r3, #24]
 800ccec:	f003 0303 	and.w	r3, r3, #3
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d003      	beq.n	800ccfc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 f9b7 	bl	800d068 <HAL_TIM_IC_CaptureCallback>
 800ccfa:	e005      	b.n	800cd08 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 f9a9 	bl	800d054 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 f9ba 	bl	800d07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	f003 0304 	and.w	r3, r3, #4
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d020      	beq.n	800cd5a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f003 0304 	and.w	r3, r3, #4
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d01b      	beq.n	800cd5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f06f 0204 	mvn.w	r2, #4
 800cd2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2202      	movs	r2, #2
 800cd30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	699b      	ldr	r3, [r3, #24]
 800cd38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d003      	beq.n	800cd48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 f991 	bl	800d068 <HAL_TIM_IC_CaptureCallback>
 800cd46:	e005      	b.n	800cd54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 f983 	bl	800d054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 f994 	bl	800d07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	f003 0308 	and.w	r3, r3, #8
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d020      	beq.n	800cda6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f003 0308 	and.w	r3, r3, #8
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d01b      	beq.n	800cda6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f06f 0208 	mvn.w	r2, #8
 800cd76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2204      	movs	r2, #4
 800cd7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	69db      	ldr	r3, [r3, #28]
 800cd84:	f003 0303 	and.w	r3, r3, #3
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d003      	beq.n	800cd94 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 f96b 	bl	800d068 <HAL_TIM_IC_CaptureCallback>
 800cd92:	e005      	b.n	800cda0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 f95d 	bl	800d054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 f96e 	bl	800d07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	f003 0310 	and.w	r3, r3, #16
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d020      	beq.n	800cdf2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f003 0310 	and.w	r3, r3, #16
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d01b      	beq.n	800cdf2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f06f 0210 	mvn.w	r2, #16
 800cdc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2208      	movs	r2, #8
 800cdc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	69db      	ldr	r3, [r3, #28]
 800cdd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d003      	beq.n	800cde0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 f945 	bl	800d068 <HAL_TIM_IC_CaptureCallback>
 800cdde:	e005      	b.n	800cdec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 f937 	bl	800d054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 f948 	bl	800d07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	f003 0301 	and.w	r3, r3, #1
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00c      	beq.n	800ce16 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f003 0301 	and.w	r3, r3, #1
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d007      	beq.n	800ce16 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f06f 0201 	mvn.w	r2, #1
 800ce0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 f915 	bl	800d040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00c      	beq.n	800ce3a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d007      	beq.n	800ce3a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ce32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f000 faa3 	bl	800d380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d00c      	beq.n	800ce5e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d007      	beq.n	800ce5e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ce56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f000 fa9b 	bl	800d394 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00c      	beq.n	800ce82 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d007      	beq.n	800ce82 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ce7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 f907 	bl	800d090 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	f003 0320 	and.w	r3, r3, #32
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00c      	beq.n	800cea6 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f003 0320 	and.w	r3, r3, #32
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d007      	beq.n	800cea6 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f06f 0220 	mvn.w	r2, #32
 800ce9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 fa63 	bl	800d36c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cea6:	bf00      	nop
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}

0800ceae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ceae:	b580      	push	{r7, lr}
 800ceb0:	b084      	sub	sp, #16
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	6078      	str	r0, [r7, #4]
 800ceb6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d101      	bne.n	800ceca <HAL_TIM_ConfigClockSource+0x1c>
 800cec6:	2302      	movs	r3, #2
 800cec8:	e0b6      	b.n	800d038 <HAL_TIM_ConfigClockSource+0x18a>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2201      	movs	r2, #1
 800cece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2202      	movs	r2, #2
 800ced6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cee8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ceec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cef4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	68ba      	ldr	r2, [r7, #8]
 800cefc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf06:	d03e      	beq.n	800cf86 <HAL_TIM_ConfigClockSource+0xd8>
 800cf08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf0c:	f200 8087 	bhi.w	800d01e <HAL_TIM_ConfigClockSource+0x170>
 800cf10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf14:	f000 8086 	beq.w	800d024 <HAL_TIM_ConfigClockSource+0x176>
 800cf18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf1c:	d87f      	bhi.n	800d01e <HAL_TIM_ConfigClockSource+0x170>
 800cf1e:	2b70      	cmp	r3, #112	; 0x70
 800cf20:	d01a      	beq.n	800cf58 <HAL_TIM_ConfigClockSource+0xaa>
 800cf22:	2b70      	cmp	r3, #112	; 0x70
 800cf24:	d87b      	bhi.n	800d01e <HAL_TIM_ConfigClockSource+0x170>
 800cf26:	2b60      	cmp	r3, #96	; 0x60
 800cf28:	d050      	beq.n	800cfcc <HAL_TIM_ConfigClockSource+0x11e>
 800cf2a:	2b60      	cmp	r3, #96	; 0x60
 800cf2c:	d877      	bhi.n	800d01e <HAL_TIM_ConfigClockSource+0x170>
 800cf2e:	2b50      	cmp	r3, #80	; 0x50
 800cf30:	d03c      	beq.n	800cfac <HAL_TIM_ConfigClockSource+0xfe>
 800cf32:	2b50      	cmp	r3, #80	; 0x50
 800cf34:	d873      	bhi.n	800d01e <HAL_TIM_ConfigClockSource+0x170>
 800cf36:	2b40      	cmp	r3, #64	; 0x40
 800cf38:	d058      	beq.n	800cfec <HAL_TIM_ConfigClockSource+0x13e>
 800cf3a:	2b40      	cmp	r3, #64	; 0x40
 800cf3c:	d86f      	bhi.n	800d01e <HAL_TIM_ConfigClockSource+0x170>
 800cf3e:	2b30      	cmp	r3, #48	; 0x30
 800cf40:	d064      	beq.n	800d00c <HAL_TIM_ConfigClockSource+0x15e>
 800cf42:	2b30      	cmp	r3, #48	; 0x30
 800cf44:	d86b      	bhi.n	800d01e <HAL_TIM_ConfigClockSource+0x170>
 800cf46:	2b20      	cmp	r3, #32
 800cf48:	d060      	beq.n	800d00c <HAL_TIM_ConfigClockSource+0x15e>
 800cf4a:	2b20      	cmp	r3, #32
 800cf4c:	d867      	bhi.n	800d01e <HAL_TIM_ConfigClockSource+0x170>
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d05c      	beq.n	800d00c <HAL_TIM_ConfigClockSource+0x15e>
 800cf52:	2b10      	cmp	r3, #16
 800cf54:	d05a      	beq.n	800d00c <HAL_TIM_ConfigClockSource+0x15e>
 800cf56:	e062      	b.n	800d01e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cf68:	f000 f97a 	bl	800d260 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cf7a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	68ba      	ldr	r2, [r7, #8]
 800cf82:	609a      	str	r2, [r3, #8]
      break;
 800cf84:	e04f      	b.n	800d026 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cf96:	f000 f963 	bl	800d260 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	689a      	ldr	r2, [r3, #8]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cfa8:	609a      	str	r2, [r3, #8]
      break;
 800cfaa:	e03c      	b.n	800d026 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfb8:	461a      	mov	r2, r3
 800cfba:	f000 f8d7 	bl	800d16c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2150      	movs	r1, #80	; 0x50
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f000 f930 	bl	800d22a <TIM_ITRx_SetConfig>
      break;
 800cfca:	e02c      	b.n	800d026 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cfd8:	461a      	mov	r2, r3
 800cfda:	f000 f8f6 	bl	800d1ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2160      	movs	r1, #96	; 0x60
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f000 f920 	bl	800d22a <TIM_ITRx_SetConfig>
      break;
 800cfea:	e01c      	b.n	800d026 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cff8:	461a      	mov	r2, r3
 800cffa:	f000 f8b7 	bl	800d16c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	2140      	movs	r1, #64	; 0x40
 800d004:	4618      	mov	r0, r3
 800d006:	f000 f910 	bl	800d22a <TIM_ITRx_SetConfig>
      break;
 800d00a:	e00c      	b.n	800d026 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4619      	mov	r1, r3
 800d016:	4610      	mov	r0, r2
 800d018:	f000 f907 	bl	800d22a <TIM_ITRx_SetConfig>
      break;
 800d01c:	e003      	b.n	800d026 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800d01e:	2301      	movs	r3, #1
 800d020:	73fb      	strb	r3, [r7, #15]
      break;
 800d022:	e000      	b.n	800d026 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800d024:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2201      	movs	r2, #1
 800d02a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d036:	7bfb      	ldrb	r3, [r7, #15]
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d048:	bf00      	nop
 800d04a:	370c      	adds	r7, #12
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d070:	bf00      	nop
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d098:	bf00      	nop
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	4a2a      	ldr	r2, [pc, #168]	; (800d160 <TIM_Base_SetConfig+0xbc>)
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d003      	beq.n	800d0c4 <TIM_Base_SetConfig+0x20>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0c2:	d108      	bne.n	800d0d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4a21      	ldr	r2, [pc, #132]	; (800d160 <TIM_Base_SetConfig+0xbc>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d00b      	beq.n	800d0f6 <TIM_Base_SetConfig+0x52>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0e4:	d007      	beq.n	800d0f6 <TIM_Base_SetConfig+0x52>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4a1e      	ldr	r2, [pc, #120]	; (800d164 <TIM_Base_SetConfig+0xc0>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d003      	beq.n	800d0f6 <TIM_Base_SetConfig+0x52>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4a1d      	ldr	r2, [pc, #116]	; (800d168 <TIM_Base_SetConfig+0xc4>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d108      	bne.n	800d108 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	4313      	orrs	r3, r2
 800d106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	695b      	ldr	r3, [r3, #20]
 800d112:	4313      	orrs	r3, r2
 800d114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	68fa      	ldr	r2, [r7, #12]
 800d11a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	689a      	ldr	r2, [r3, #8]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	4a0c      	ldr	r2, [pc, #48]	; (800d160 <TIM_Base_SetConfig+0xbc>)
 800d130:	4293      	cmp	r3, r2
 800d132:	d007      	beq.n	800d144 <TIM_Base_SetConfig+0xa0>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	4a0b      	ldr	r2, [pc, #44]	; (800d164 <TIM_Base_SetConfig+0xc0>)
 800d138:	4293      	cmp	r3, r2
 800d13a:	d003      	beq.n	800d144 <TIM_Base_SetConfig+0xa0>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	4a0a      	ldr	r2, [pc, #40]	; (800d168 <TIM_Base_SetConfig+0xc4>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d103      	bne.n	800d14c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	691a      	ldr	r2, [r3, #16]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2201      	movs	r2, #1
 800d150:	615a      	str	r2, [r3, #20]
}
 800d152:	bf00      	nop
 800d154:	3714      	adds	r7, #20
 800d156:	46bd      	mov	sp, r7
 800d158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15c:	4770      	bx	lr
 800d15e:	bf00      	nop
 800d160:	40012c00 	.word	0x40012c00
 800d164:	40014000 	.word	0x40014000
 800d168:	40014400 	.word	0x40014400

0800d16c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b087      	sub	sp, #28
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	6a1b      	ldr	r3, [r3, #32]
 800d17c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	6a1b      	ldr	r3, [r3, #32]
 800d182:	f023 0201 	bic.w	r2, r3, #1
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	699b      	ldr	r3, [r3, #24]
 800d18e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	011b      	lsls	r3, r3, #4
 800d19c:	693a      	ldr	r2, [r7, #16]
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	f023 030a 	bic.w	r3, r3, #10
 800d1a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d1aa:	697a      	ldr	r2, [r7, #20]
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	4313      	orrs	r3, r2
 800d1b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	693a      	ldr	r2, [r7, #16]
 800d1b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	697a      	ldr	r2, [r7, #20]
 800d1bc:	621a      	str	r2, [r3, #32]
}
 800d1be:	bf00      	nop
 800d1c0:	371c      	adds	r7, #28
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr

0800d1ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d1ca:	b480      	push	{r7}
 800d1cc:	b087      	sub	sp, #28
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	60f8      	str	r0, [r7, #12]
 800d1d2:	60b9      	str	r1, [r7, #8]
 800d1d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	6a1b      	ldr	r3, [r3, #32]
 800d1da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6a1b      	ldr	r3, [r3, #32]
 800d1e0:	f023 0210 	bic.w	r2, r3, #16
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	699b      	ldr	r3, [r3, #24]
 800d1ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d1f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	031b      	lsls	r3, r3, #12
 800d1fa:	693a      	ldr	r2, [r7, #16]
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d206:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	011b      	lsls	r3, r3, #4
 800d20c:	697a      	ldr	r2, [r7, #20]
 800d20e:	4313      	orrs	r3, r2
 800d210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	693a      	ldr	r2, [r7, #16]
 800d216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	621a      	str	r2, [r3, #32]
}
 800d21e:	bf00      	nop
 800d220:	371c      	adds	r7, #28
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr

0800d22a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d22a:	b480      	push	{r7}
 800d22c:	b085      	sub	sp, #20
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
 800d232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d242:	683a      	ldr	r2, [r7, #0]
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	4313      	orrs	r3, r2
 800d248:	f043 0307 	orr.w	r3, r3, #7
 800d24c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	609a      	str	r2, [r3, #8]
}
 800d254:	bf00      	nop
 800d256:	3714      	adds	r7, #20
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d260:	b480      	push	{r7}
 800d262:	b087      	sub	sp, #28
 800d264:	af00      	add	r7, sp, #0
 800d266:	60f8      	str	r0, [r7, #12]
 800d268:	60b9      	str	r1, [r7, #8]
 800d26a:	607a      	str	r2, [r7, #4]
 800d26c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	689b      	ldr	r3, [r3, #8]
 800d272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d27a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	021a      	lsls	r2, r3, #8
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	431a      	orrs	r2, r3
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	4313      	orrs	r3, r2
 800d288:	697a      	ldr	r2, [r7, #20]
 800d28a:	4313      	orrs	r3, r2
 800d28c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	697a      	ldr	r2, [r7, #20]
 800d292:	609a      	str	r2, [r3, #8]
}
 800d294:	bf00      	nop
 800d296:	371c      	adds	r7, #28
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d101      	bne.n	800d2b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d2b4:	2302      	movs	r3, #2
 800d2b6:	e04f      	b.n	800d358 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2202      	movs	r2, #2
 800d2c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a21      	ldr	r2, [pc, #132]	; (800d364 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d108      	bne.n	800d2f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d2e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68fa      	ldr	r2, [r7, #12]
 800d302:	4313      	orrs	r3, r2
 800d304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	68fa      	ldr	r2, [r7, #12]
 800d30c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4a14      	ldr	r2, [pc, #80]	; (800d364 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d009      	beq.n	800d32c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d320:	d004      	beq.n	800d32c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4a10      	ldr	r2, [pc, #64]	; (800d368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d10c      	bne.n	800d346 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d332:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	689b      	ldr	r3, [r3, #8]
 800d338:	68ba      	ldr	r2, [r7, #8]
 800d33a:	4313      	orrs	r3, r2
 800d33c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	68ba      	ldr	r2, [r7, #8]
 800d344:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2201      	movs	r2, #1
 800d34a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d356:	2300      	movs	r3, #0
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3714      	adds	r7, #20
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr
 800d364:	40012c00 	.word	0x40012c00
 800d368:	40014000 	.word	0x40014000

0800d36c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b083      	sub	sp, #12
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d374:	bf00      	nop
 800d376:	370c      	adds	r7, #12
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d380:	b480      	push	{r7}
 800d382:	b083      	sub	sp, #12
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d388:	bf00      	nop
 800d38a:	370c      	adds	r7, #12
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d394:	b480      	push	{r7}
 800d396:	b083      	sub	sp, #12
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d39c:	bf00      	nop
 800d39e:	370c      	adds	r7, #12
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr

0800d3a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d101      	bne.n	800d3ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e040      	b.n	800d43c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d106      	bne.n	800d3d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f7f8 fcd0 	bl	8005d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2224      	movs	r2, #36	; 0x24
 800d3d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f022 0201 	bic.w	r2, r2, #1
 800d3e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d002      	beq.n	800d3f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f000 feb0 	bl	800e154 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 fc81 	bl	800dcfc <UART_SetConfig>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d101      	bne.n	800d404 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800d400:	2301      	movs	r3, #1
 800d402:	e01b      	b.n	800d43c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	685a      	ldr	r2, [r3, #4]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	689a      	ldr	r2, [r3, #8]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f042 0201 	orr.w	r2, r2, #1
 800d432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f000 ff2f 	bl	800e298 <UART_CheckIdleState>
 800d43a:	4603      	mov	r3, r0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3708      	adds	r7, #8
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b08a      	sub	sp, #40	; 0x28
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	4613      	mov	r3, r2
 800d450:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d458:	2b20      	cmp	r3, #32
 800d45a:	d137      	bne.n	800d4cc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d002      	beq.n	800d468 <HAL_UART_Receive_DMA+0x24>
 800d462:	88fb      	ldrh	r3, [r7, #6]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d101      	bne.n	800d46c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d468:	2301      	movs	r3, #1
 800d46a:	e030      	b.n	800d4ce <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	2200      	movs	r2, #0
 800d470:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4a18      	ldr	r2, [pc, #96]	; (800d4d8 <HAL_UART_Receive_DMA+0x94>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d01f      	beq.n	800d4bc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d486:	2b00      	cmp	r3, #0
 800d488:	d018      	beq.n	800d4bc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	e853 3f00 	ldrex	r3, [r3]
 800d496:	613b      	str	r3, [r7, #16]
   return(result);
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d49e:	627b      	str	r3, [r7, #36]	; 0x24
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a8:	623b      	str	r3, [r7, #32]
 800d4aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ac:	69f9      	ldr	r1, [r7, #28]
 800d4ae:	6a3a      	ldr	r2, [r7, #32]
 800d4b0:	e841 2300 	strex	r3, r2, [r1]
 800d4b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d1e6      	bne.n	800d48a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d4bc:	88fb      	ldrh	r3, [r7, #6]
 800d4be:	461a      	mov	r2, r3
 800d4c0:	68b9      	ldr	r1, [r7, #8]
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f000 fff8 	bl	800e4b8 <UART_Start_Receive_DMA>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	e000      	b.n	800d4ce <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d4cc:	2302      	movs	r3, #2
  }
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3728      	adds	r7, #40	; 0x28
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	40008000 	.word	0x40008000

0800d4dc <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b0a0      	sub	sp, #128	; 0x80
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4ec:	e853 3f00 	ldrex	r3, [r3]
 800d4f0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d4f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4f4:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800d4f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	461a      	mov	r2, r3
 800d500:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d502:	66bb      	str	r3, [r7, #104]	; 0x68
 800d504:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d506:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d508:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d50a:	e841 2300 	strex	r3, r2, [r1]
 800d50e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d512:	2b00      	cmp	r3, #0
 800d514:	d1e6      	bne.n	800d4e4 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	3308      	adds	r3, #8
 800d51c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d51e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d520:	e853 3f00 	ldrex	r3, [r3]
 800d524:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d528:	f023 0301 	bic.w	r3, r3, #1
 800d52c:	67bb      	str	r3, [r7, #120]	; 0x78
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	3308      	adds	r3, #8
 800d534:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d536:	657a      	str	r2, [r7, #84]	; 0x54
 800d538:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d53a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d53c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d53e:	e841 2300 	strex	r3, r2, [r1]
 800d542:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1e5      	bne.n	800d516 <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d54e:	2b01      	cmp	r3, #1
 800d550:	d118      	bne.n	800d584 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d55a:	e853 3f00 	ldrex	r3, [r3]
 800d55e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d562:	f023 0310 	bic.w	r3, r3, #16
 800d566:	677b      	str	r3, [r7, #116]	; 0x74
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	461a      	mov	r2, r3
 800d56e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d570:	643b      	str	r3, [r7, #64]	; 0x40
 800d572:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d574:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d576:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d578:	e841 2300 	strex	r3, r2, [r1]
 800d57c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d580:	2b00      	cmp	r3, #0
 800d582:	d1e6      	bne.n	800d552 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	689b      	ldr	r3, [r3, #8]
 800d58a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d58e:	2b80      	cmp	r3, #128	; 0x80
 800d590:	d137      	bne.n	800d602 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	3308      	adds	r3, #8
 800d598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d59a:	6a3b      	ldr	r3, [r7, #32]
 800d59c:	e853 3f00 	ldrex	r3, [r3]
 800d5a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5a8:	673b      	str	r3, [r7, #112]	; 0x70
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	3308      	adds	r3, #8
 800d5b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d5b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d5b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5ba:	e841 2300 	strex	r3, r2, [r1]
 800d5be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1e5      	bne.n	800d592 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d019      	beq.n	800d602 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7fa fa92 	bl	8007b04 <HAL_DMA_Abort>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d00d      	beq.n	800d602 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7fa fbb8 	bl	8007d60 <HAL_DMA_GetError>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	2b20      	cmp	r3, #32
 800d5f4:	d105      	bne.n	800d602 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2210      	movs	r2, #16
 800d5fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d5fe:	2303      	movs	r3, #3
 800d600:	e063      	b.n	800d6ca <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d60c:	2b40      	cmp	r3, #64	; 0x40
 800d60e:	d137      	bne.n	800d680 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	3308      	adds	r3, #8
 800d616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	e853 3f00 	ldrex	r3, [r3]
 800d61e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d626:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	3308      	adds	r3, #8
 800d62e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d630:	61ba      	str	r2, [r7, #24]
 800d632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d634:	6979      	ldr	r1, [r7, #20]
 800d636:	69ba      	ldr	r2, [r7, #24]
 800d638:	e841 2300 	strex	r3, r2, [r1]
 800d63c:	613b      	str	r3, [r7, #16]
   return(result);
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d1e5      	bne.n	800d610 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d019      	beq.n	800d680 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d650:	2200      	movs	r2, #0
 800d652:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d658:	4618      	mov	r0, r3
 800d65a:	f7fa fa53 	bl	8007b04 <HAL_DMA_Abort>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00d      	beq.n	800d680 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fa fb79 	bl	8007d60 <HAL_DMA_GetError>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b20      	cmp	r3, #32
 800d672:	d105      	bne.n	800d680 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2210      	movs	r2, #16
 800d678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d67c:	2303      	movs	r3, #3
 800d67e:	e024      	b.n	800d6ca <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	220f      	movs	r2, #15
 800d696:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	8b1b      	ldrh	r3, [r3, #24]
 800d69e:	b29a      	uxth	r2, r3
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f042 0208 	orr.w	r2, r2, #8
 800d6a8:	b292      	uxth	r2, r2
 800d6aa:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2220      	movs	r2, #32
 800d6b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2220      	movs	r2, #32
 800d6b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d6c8:	2300      	movs	r3, #0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3780      	adds	r7, #128	; 0x80
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
	...

0800d6d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b0ba      	sub	sp, #232	; 0xe8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	69db      	ldr	r3, [r3, #28]
 800d6e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d6fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d6fe:	f640 030f 	movw	r3, #2063	; 0x80f
 800d702:	4013      	ands	r3, r2
 800d704:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d115      	bne.n	800d73c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d714:	f003 0320 	and.w	r3, r3, #32
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d00f      	beq.n	800d73c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d71c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d720:	f003 0320 	and.w	r3, r3, #32
 800d724:	2b00      	cmp	r3, #0
 800d726:	d009      	beq.n	800d73c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	f000 82ae 	beq.w	800dc8e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	4798      	blx	r3
      }
      return;
 800d73a:	e2a8      	b.n	800dc8e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800d73c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d740:	2b00      	cmp	r3, #0
 800d742:	f000 8117 	beq.w	800d974 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800d746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d74a:	f003 0301 	and.w	r3, r3, #1
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d106      	bne.n	800d760 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800d752:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d756:	4b85      	ldr	r3, [pc, #532]	; (800d96c <HAL_UART_IRQHandler+0x298>)
 800d758:	4013      	ands	r3, r2
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	f000 810a 	beq.w	800d974 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d764:	f003 0301 	and.w	r3, r3, #1
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d011      	beq.n	800d790 <HAL_UART_IRQHandler+0xbc>
 800d76c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d774:	2b00      	cmp	r3, #0
 800d776:	d00b      	beq.n	800d790 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2201      	movs	r2, #1
 800d77e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d786:	f043 0201 	orr.w	r2, r3, #1
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d794:	f003 0302 	and.w	r3, r3, #2
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d011      	beq.n	800d7c0 <HAL_UART_IRQHandler+0xec>
 800d79c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7a0:	f003 0301 	and.w	r3, r3, #1
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d00b      	beq.n	800d7c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	2202      	movs	r2, #2
 800d7ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7b6:	f043 0204 	orr.w	r2, r3, #4
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d7c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7c4:	f003 0304 	and.w	r3, r3, #4
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d011      	beq.n	800d7f0 <HAL_UART_IRQHandler+0x11c>
 800d7cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7d0:	f003 0301 	and.w	r3, r3, #1
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d00b      	beq.n	800d7f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2204      	movs	r2, #4
 800d7de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7e6:	f043 0202 	orr.w	r2, r3, #2
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d7f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7f4:	f003 0308 	and.w	r3, r3, #8
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d017      	beq.n	800d82c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d7fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d800:	f003 0320 	and.w	r3, r3, #32
 800d804:	2b00      	cmp	r3, #0
 800d806:	d105      	bne.n	800d814 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800d808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d80c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d810:	2b00      	cmp	r3, #0
 800d812:	d00b      	beq.n	800d82c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2208      	movs	r2, #8
 800d81a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d822:	f043 0208 	orr.w	r2, r3, #8
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d82c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d834:	2b00      	cmp	r3, #0
 800d836:	d012      	beq.n	800d85e <HAL_UART_IRQHandler+0x18a>
 800d838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d83c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d840:	2b00      	cmp	r3, #0
 800d842:	d00c      	beq.n	800d85e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d84c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d854:	f043 0220 	orr.w	r2, r3, #32
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d864:	2b00      	cmp	r3, #0
 800d866:	f000 8214 	beq.w	800dc92 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800d86a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d86e:	f003 0320 	and.w	r3, r3, #32
 800d872:	2b00      	cmp	r3, #0
 800d874:	d00d      	beq.n	800d892 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d87a:	f003 0320 	and.w	r3, r3, #32
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d007      	beq.n	800d892 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d886:	2b00      	cmp	r3, #0
 800d888:	d003      	beq.n	800d892 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d898:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	689b      	ldr	r3, [r3, #8]
 800d8a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8a6:	2b40      	cmp	r3, #64	; 0x40
 800d8a8:	d005      	beq.n	800d8b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d8aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d8ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d04f      	beq.n	800d956 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 fec4 	bl	800e644 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	689b      	ldr	r3, [r3, #8]
 800d8c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8c6:	2b40      	cmp	r3, #64	; 0x40
 800d8c8:	d141      	bne.n	800d94e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	3308      	adds	r3, #8
 800d8d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d8d8:	e853 3f00 	ldrex	r3, [r3]
 800d8dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d8e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d8e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	3308      	adds	r3, #8
 800d8f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d8f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d8fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d906:	e841 2300 	strex	r3, r2, [r1]
 800d90a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d90e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d912:	2b00      	cmp	r3, #0
 800d914:	d1d9      	bne.n	800d8ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d013      	beq.n	800d946 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d922:	4a13      	ldr	r2, [pc, #76]	; (800d970 <HAL_UART_IRQHandler+0x29c>)
 800d924:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7fa f928 	bl	8007b80 <HAL_DMA_Abort_IT>
 800d930:	4603      	mov	r3, r0
 800d932:	2b00      	cmp	r3, #0
 800d934:	d017      	beq.n	800d966 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d93c:	687a      	ldr	r2, [r7, #4]
 800d93e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d940:	4610      	mov	r0, r2
 800d942:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d944:	e00f      	b.n	800d966 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 f9c2 	bl	800dcd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d94c:	e00b      	b.n	800d966 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 f9be 	bl	800dcd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d954:	e007      	b.n	800d966 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 f9ba 	bl	800dcd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2200      	movs	r2, #0
 800d960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800d964:	e195      	b.n	800dc92 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d966:	bf00      	nop
    return;
 800d968:	e193      	b.n	800dc92 <HAL_UART_IRQHandler+0x5be>
 800d96a:	bf00      	nop
 800d96c:	04000120 	.word	0x04000120
 800d970:	0800e8f5 	.word	0x0800e8f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d978:	2b01      	cmp	r3, #1
 800d97a:	f040 814e 	bne.w	800dc1a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d97e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d982:	f003 0310 	and.w	r3, r3, #16
 800d986:	2b00      	cmp	r3, #0
 800d988:	f000 8147 	beq.w	800dc1a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d98c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d990:	f003 0310 	and.w	r3, r3, #16
 800d994:	2b00      	cmp	r3, #0
 800d996:	f000 8140 	beq.w	800dc1a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	2210      	movs	r2, #16
 800d9a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9ac:	2b40      	cmp	r3, #64	; 0x40
 800d9ae:	f040 80b8 	bne.w	800db22 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d9be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	f000 8167 	beq.w	800dc96 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d9ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	f080 815f 	bcs.w	800dc96 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d9de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f003 0320 	and.w	r3, r3, #32
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	f040 8086 	bne.w	800db00 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da00:	e853 3f00 	ldrex	r3, [r3]
 800da04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800da08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	461a      	mov	r2, r3
 800da1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800da1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800da22:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800da2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800da2e:	e841 2300 	strex	r3, r2, [r1]
 800da32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800da36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d1da      	bne.n	800d9f4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	3308      	adds	r3, #8
 800da44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da48:	e853 3f00 	ldrex	r3, [r3]
 800da4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800da4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da50:	f023 0301 	bic.w	r3, r3, #1
 800da54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	3308      	adds	r3, #8
 800da5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800da62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800da66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800da6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800da6e:	e841 2300 	strex	r3, r2, [r1]
 800da72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800da74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da76:	2b00      	cmp	r3, #0
 800da78:	d1e1      	bne.n	800da3e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	3308      	adds	r3, #8
 800da80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da84:	e853 3f00 	ldrex	r3, [r3]
 800da88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800da8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	3308      	adds	r3, #8
 800da9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800da9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800daa0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800daa4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800daa6:	e841 2300 	strex	r3, r2, [r1]
 800daaa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800daac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d1e3      	bne.n	800da7a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2220      	movs	r2, #32
 800dab6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2200      	movs	r2, #0
 800dabe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dac8:	e853 3f00 	ldrex	r3, [r3]
 800dacc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dad0:	f023 0310 	bic.w	r3, r3, #16
 800dad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	461a      	mov	r2, r3
 800dade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dae2:	65bb      	str	r3, [r7, #88]	; 0x58
 800dae4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dae8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800daea:	e841 2300 	strex	r3, r2, [r1]
 800daee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800daf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d1e4      	bne.n	800dac0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fa f802 	bl	8007b04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2202      	movs	r2, #2
 800db04:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800db12:	b29b      	uxth	r3, r3
 800db14:	1ad3      	subs	r3, r2, r3
 800db16:	b29b      	uxth	r3, r3
 800db18:	4619      	mov	r1, r3
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f000 f8e2 	bl	800dce4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800db20:	e0b9      	b.n	800dc96 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800db2e:	b29b      	uxth	r3, r3
 800db30:	1ad3      	subs	r3, r2, r3
 800db32:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	2b00      	cmp	r3, #0
 800db40:	f000 80ab 	beq.w	800dc9a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800db44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800db48:	2b00      	cmp	r3, #0
 800db4a:	f000 80a6 	beq.w	800dc9a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db56:	e853 3f00 	ldrex	r3, [r3]
 800db5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800db5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800db62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	461a      	mov	r2, r3
 800db6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800db70:	647b      	str	r3, [r7, #68]	; 0x44
 800db72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800db76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db78:	e841 2300 	strex	r3, r2, [r1]
 800db7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800db7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db80:	2b00      	cmp	r3, #0
 800db82:	d1e4      	bne.n	800db4e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	3308      	adds	r3, #8
 800db8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8e:	e853 3f00 	ldrex	r3, [r3]
 800db92:	623b      	str	r3, [r7, #32]
   return(result);
 800db94:	6a3b      	ldr	r3, [r7, #32]
 800db96:	f023 0301 	bic.w	r3, r3, #1
 800db9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	3308      	adds	r3, #8
 800dba4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dba8:	633a      	str	r2, [r7, #48]	; 0x30
 800dbaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbb0:	e841 2300 	strex	r3, r2, [r1]
 800dbb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d1e3      	bne.n	800db84 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2220      	movs	r2, #32
 800dbc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	e853 3f00 	ldrex	r3, [r3]
 800dbdc:	60fb      	str	r3, [r7, #12]
   return(result);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f023 0310 	bic.w	r3, r3, #16
 800dbe4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	461a      	mov	r2, r3
 800dbee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dbf2:	61fb      	str	r3, [r7, #28]
 800dbf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf6:	69b9      	ldr	r1, [r7, #24]
 800dbf8:	69fa      	ldr	r2, [r7, #28]
 800dbfa:	e841 2300 	strex	r3, r2, [r1]
 800dbfe:	617b      	str	r3, [r7, #20]
   return(result);
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d1e4      	bne.n	800dbd0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2202      	movs	r2, #2
 800dc0a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dc0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dc10:	4619      	mov	r1, r3
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 f866 	bl	800dce4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dc18:	e03f      	b.n	800dc9a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dc1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d00e      	beq.n	800dc44 <HAL_UART_IRQHandler+0x570>
 800dc26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d008      	beq.n	800dc44 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dc3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f000 fe99 	bl	800e974 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dc42:	e02d      	b.n	800dca0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800dc44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00e      	beq.n	800dc6e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800dc50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d008      	beq.n	800dc6e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d01c      	beq.n	800dc9e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	4798      	blx	r3
    }
    return;
 800dc6c:	e017      	b.n	800dc9e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dc6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d012      	beq.n	800dca0 <HAL_UART_IRQHandler+0x5cc>
 800dc7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d00c      	beq.n	800dca0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 fe4a 	bl	800e920 <UART_EndTransmit_IT>
    return;
 800dc8c:	e008      	b.n	800dca0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800dc8e:	bf00      	nop
 800dc90:	e006      	b.n	800dca0 <HAL_UART_IRQHandler+0x5cc>
    return;
 800dc92:	bf00      	nop
 800dc94:	e004      	b.n	800dca0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800dc96:	bf00      	nop
 800dc98:	e002      	b.n	800dca0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800dc9a:	bf00      	nop
 800dc9c:	e000      	b.n	800dca0 <HAL_UART_IRQHandler+0x5cc>
    return;
 800dc9e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800dca0:	37e8      	adds	r7, #232	; 0xe8
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop

0800dca8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dcb0:	bf00      	nop
 800dcb2:	370c      	adds	r7, #12
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800dcc4:	bf00      	nop
 800dcc6:	370c      	adds	r7, #12
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dcd8:	bf00      	nop
 800dcda:	370c      	adds	r7, #12
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr

0800dce4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	460b      	mov	r3, r1
 800dcee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dcf0:	bf00      	nop
 800dcf2:	370c      	adds	r7, #12
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dcfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd00:	b08a      	sub	sp, #40	; 0x28
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dd06:	2300      	movs	r3, #0
 800dd08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	689a      	ldr	r2, [r3, #8]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	691b      	ldr	r3, [r3, #16]
 800dd14:	431a      	orrs	r2, r3
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	695b      	ldr	r3, [r3, #20]
 800dd1a:	431a      	orrs	r2, r3
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	69db      	ldr	r3, [r3, #28]
 800dd20:	4313      	orrs	r3, r2
 800dd22:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	4bb4      	ldr	r3, [pc, #720]	; (800dffc <UART_SetConfig+0x300>)
 800dd2c:	4013      	ands	r3, r2
 800dd2e:	68fa      	ldr	r2, [r7, #12]
 800dd30:	6812      	ldr	r2, [r2, #0]
 800dd32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd34:	430b      	orrs	r3, r1
 800dd36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	68da      	ldr	r2, [r3, #12]
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	430a      	orrs	r2, r1
 800dd4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	699b      	ldr	r3, [r3, #24]
 800dd52:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4aa9      	ldr	r2, [pc, #676]	; (800e000 <UART_SetConfig+0x304>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d004      	beq.n	800dd68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	6a1b      	ldr	r3, [r3, #32]
 800dd62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd64:	4313      	orrs	r3, r2
 800dd66:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	689b      	ldr	r3, [r3, #8]
 800dd6e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd78:	430a      	orrs	r2, r1
 800dd7a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4aa0      	ldr	r2, [pc, #640]	; (800e004 <UART_SetConfig+0x308>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d126      	bne.n	800ddd4 <UART_SetConfig+0xd8>
 800dd86:	4ba0      	ldr	r3, [pc, #640]	; (800e008 <UART_SetConfig+0x30c>)
 800dd88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd8c:	f003 0303 	and.w	r3, r3, #3
 800dd90:	2b03      	cmp	r3, #3
 800dd92:	d81b      	bhi.n	800ddcc <UART_SetConfig+0xd0>
 800dd94:	a201      	add	r2, pc, #4	; (adr r2, 800dd9c <UART_SetConfig+0xa0>)
 800dd96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd9a:	bf00      	nop
 800dd9c:	0800ddad 	.word	0x0800ddad
 800dda0:	0800ddbd 	.word	0x0800ddbd
 800dda4:	0800ddb5 	.word	0x0800ddb5
 800dda8:	0800ddc5 	.word	0x0800ddc5
 800ddac:	2301      	movs	r3, #1
 800ddae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ddb2:	e080      	b.n	800deb6 <UART_SetConfig+0x1ba>
 800ddb4:	2302      	movs	r3, #2
 800ddb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ddba:	e07c      	b.n	800deb6 <UART_SetConfig+0x1ba>
 800ddbc:	2304      	movs	r3, #4
 800ddbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ddc2:	e078      	b.n	800deb6 <UART_SetConfig+0x1ba>
 800ddc4:	2308      	movs	r3, #8
 800ddc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ddca:	e074      	b.n	800deb6 <UART_SetConfig+0x1ba>
 800ddcc:	2310      	movs	r3, #16
 800ddce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ddd2:	e070      	b.n	800deb6 <UART_SetConfig+0x1ba>
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a8c      	ldr	r2, [pc, #560]	; (800e00c <UART_SetConfig+0x310>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d138      	bne.n	800de50 <UART_SetConfig+0x154>
 800ddde:	4b8a      	ldr	r3, [pc, #552]	; (800e008 <UART_SetConfig+0x30c>)
 800dde0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dde4:	f003 030c 	and.w	r3, r3, #12
 800dde8:	2b0c      	cmp	r3, #12
 800ddea:	d82d      	bhi.n	800de48 <UART_SetConfig+0x14c>
 800ddec:	a201      	add	r2, pc, #4	; (adr r2, 800ddf4 <UART_SetConfig+0xf8>)
 800ddee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddf2:	bf00      	nop
 800ddf4:	0800de29 	.word	0x0800de29
 800ddf8:	0800de49 	.word	0x0800de49
 800ddfc:	0800de49 	.word	0x0800de49
 800de00:	0800de49 	.word	0x0800de49
 800de04:	0800de39 	.word	0x0800de39
 800de08:	0800de49 	.word	0x0800de49
 800de0c:	0800de49 	.word	0x0800de49
 800de10:	0800de49 	.word	0x0800de49
 800de14:	0800de31 	.word	0x0800de31
 800de18:	0800de49 	.word	0x0800de49
 800de1c:	0800de49 	.word	0x0800de49
 800de20:	0800de49 	.word	0x0800de49
 800de24:	0800de41 	.word	0x0800de41
 800de28:	2300      	movs	r3, #0
 800de2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de2e:	e042      	b.n	800deb6 <UART_SetConfig+0x1ba>
 800de30:	2302      	movs	r3, #2
 800de32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de36:	e03e      	b.n	800deb6 <UART_SetConfig+0x1ba>
 800de38:	2304      	movs	r3, #4
 800de3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de3e:	e03a      	b.n	800deb6 <UART_SetConfig+0x1ba>
 800de40:	2308      	movs	r3, #8
 800de42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de46:	e036      	b.n	800deb6 <UART_SetConfig+0x1ba>
 800de48:	2310      	movs	r3, #16
 800de4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de4e:	e032      	b.n	800deb6 <UART_SetConfig+0x1ba>
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	4a6a      	ldr	r2, [pc, #424]	; (800e000 <UART_SetConfig+0x304>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d12a      	bne.n	800deb0 <UART_SetConfig+0x1b4>
 800de5a:	4b6b      	ldr	r3, [pc, #428]	; (800e008 <UART_SetConfig+0x30c>)
 800de5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800de64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800de68:	d01a      	beq.n	800dea0 <UART_SetConfig+0x1a4>
 800de6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800de6e:	d81b      	bhi.n	800dea8 <UART_SetConfig+0x1ac>
 800de70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de74:	d00c      	beq.n	800de90 <UART_SetConfig+0x194>
 800de76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de7a:	d815      	bhi.n	800dea8 <UART_SetConfig+0x1ac>
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d003      	beq.n	800de88 <UART_SetConfig+0x18c>
 800de80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de84:	d008      	beq.n	800de98 <UART_SetConfig+0x19c>
 800de86:	e00f      	b.n	800dea8 <UART_SetConfig+0x1ac>
 800de88:	2300      	movs	r3, #0
 800de8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de8e:	e012      	b.n	800deb6 <UART_SetConfig+0x1ba>
 800de90:	2302      	movs	r3, #2
 800de92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de96:	e00e      	b.n	800deb6 <UART_SetConfig+0x1ba>
 800de98:	2304      	movs	r3, #4
 800de9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de9e:	e00a      	b.n	800deb6 <UART_SetConfig+0x1ba>
 800dea0:	2308      	movs	r3, #8
 800dea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dea6:	e006      	b.n	800deb6 <UART_SetConfig+0x1ba>
 800dea8:	2310      	movs	r3, #16
 800deaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800deae:	e002      	b.n	800deb6 <UART_SetConfig+0x1ba>
 800deb0:	2310      	movs	r3, #16
 800deb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4a51      	ldr	r2, [pc, #324]	; (800e000 <UART_SetConfig+0x304>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d17a      	bne.n	800dfb6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dec0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dec4:	2b08      	cmp	r3, #8
 800dec6:	d824      	bhi.n	800df12 <UART_SetConfig+0x216>
 800dec8:	a201      	add	r2, pc, #4	; (adr r2, 800ded0 <UART_SetConfig+0x1d4>)
 800deca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dece:	bf00      	nop
 800ded0:	0800def5 	.word	0x0800def5
 800ded4:	0800df13 	.word	0x0800df13
 800ded8:	0800defd 	.word	0x0800defd
 800dedc:	0800df13 	.word	0x0800df13
 800dee0:	0800df03 	.word	0x0800df03
 800dee4:	0800df13 	.word	0x0800df13
 800dee8:	0800df13 	.word	0x0800df13
 800deec:	0800df13 	.word	0x0800df13
 800def0:	0800df0b 	.word	0x0800df0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800def4:	f7fd f974 	bl	800b1e0 <HAL_RCC_GetPCLK1Freq>
 800def8:	61f8      	str	r0, [r7, #28]
        break;
 800defa:	e010      	b.n	800df1e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800defc:	4b44      	ldr	r3, [pc, #272]	; (800e010 <UART_SetConfig+0x314>)
 800defe:	61fb      	str	r3, [r7, #28]
        break;
 800df00:	e00d      	b.n	800df1e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800df02:	f7fd f8d5 	bl	800b0b0 <HAL_RCC_GetSysClockFreq>
 800df06:	61f8      	str	r0, [r7, #28]
        break;
 800df08:	e009      	b.n	800df1e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df0e:	61fb      	str	r3, [r7, #28]
        break;
 800df10:	e005      	b.n	800df1e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800df12:	2300      	movs	r3, #0
 800df14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800df16:	2301      	movs	r3, #1
 800df18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800df1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	2b00      	cmp	r3, #0
 800df22:	f000 8107 	beq.w	800e134 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	685a      	ldr	r2, [r3, #4]
 800df2a:	4613      	mov	r3, r2
 800df2c:	005b      	lsls	r3, r3, #1
 800df2e:	4413      	add	r3, r2
 800df30:	69fa      	ldr	r2, [r7, #28]
 800df32:	429a      	cmp	r2, r3
 800df34:	d305      	bcc.n	800df42 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800df3c:	69fa      	ldr	r2, [r7, #28]
 800df3e:	429a      	cmp	r2, r3
 800df40:	d903      	bls.n	800df4a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800df42:	2301      	movs	r3, #1
 800df44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800df48:	e0f4      	b.n	800e134 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	2200      	movs	r2, #0
 800df4e:	461c      	mov	r4, r3
 800df50:	4615      	mov	r5, r2
 800df52:	f04f 0200 	mov.w	r2, #0
 800df56:	f04f 0300 	mov.w	r3, #0
 800df5a:	022b      	lsls	r3, r5, #8
 800df5c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800df60:	0222      	lsls	r2, r4, #8
 800df62:	68f9      	ldr	r1, [r7, #12]
 800df64:	6849      	ldr	r1, [r1, #4]
 800df66:	0849      	lsrs	r1, r1, #1
 800df68:	2000      	movs	r0, #0
 800df6a:	4688      	mov	r8, r1
 800df6c:	4681      	mov	r9, r0
 800df6e:	eb12 0a08 	adds.w	sl, r2, r8
 800df72:	eb43 0b09 	adc.w	fp, r3, r9
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	2200      	movs	r2, #0
 800df7c:	603b      	str	r3, [r7, #0]
 800df7e:	607a      	str	r2, [r7, #4]
 800df80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df84:	4650      	mov	r0, sl
 800df86:	4659      	mov	r1, fp
 800df88:	f7f2 fe7e 	bl	8000c88 <__aeabi_uldivmod>
 800df8c:	4602      	mov	r2, r0
 800df8e:	460b      	mov	r3, r1
 800df90:	4613      	mov	r3, r2
 800df92:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df9a:	d308      	bcc.n	800dfae <UART_SetConfig+0x2b2>
 800df9c:	69bb      	ldr	r3, [r7, #24]
 800df9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfa2:	d204      	bcs.n	800dfae <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	69ba      	ldr	r2, [r7, #24]
 800dfaa:	60da      	str	r2, [r3, #12]
 800dfac:	e0c2      	b.n	800e134 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800dfb4:	e0be      	b.n	800e134 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	69db      	ldr	r3, [r3, #28]
 800dfba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfbe:	d16a      	bne.n	800e096 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800dfc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dfc4:	2b08      	cmp	r3, #8
 800dfc6:	d834      	bhi.n	800e032 <UART_SetConfig+0x336>
 800dfc8:	a201      	add	r2, pc, #4	; (adr r2, 800dfd0 <UART_SetConfig+0x2d4>)
 800dfca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfce:	bf00      	nop
 800dfd0:	0800dff5 	.word	0x0800dff5
 800dfd4:	0800e015 	.word	0x0800e015
 800dfd8:	0800e01d 	.word	0x0800e01d
 800dfdc:	0800e033 	.word	0x0800e033
 800dfe0:	0800e023 	.word	0x0800e023
 800dfe4:	0800e033 	.word	0x0800e033
 800dfe8:	0800e033 	.word	0x0800e033
 800dfec:	0800e033 	.word	0x0800e033
 800dff0:	0800e02b 	.word	0x0800e02b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dff4:	f7fd f8f4 	bl	800b1e0 <HAL_RCC_GetPCLK1Freq>
 800dff8:	61f8      	str	r0, [r7, #28]
        break;
 800dffa:	e020      	b.n	800e03e <UART_SetConfig+0x342>
 800dffc:	efff69f3 	.word	0xefff69f3
 800e000:	40008000 	.word	0x40008000
 800e004:	40013800 	.word	0x40013800
 800e008:	40021000 	.word	0x40021000
 800e00c:	40004400 	.word	0x40004400
 800e010:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e014:	f7fd f8fa 	bl	800b20c <HAL_RCC_GetPCLK2Freq>
 800e018:	61f8      	str	r0, [r7, #28]
        break;
 800e01a:	e010      	b.n	800e03e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e01c:	4b4c      	ldr	r3, [pc, #304]	; (800e150 <UART_SetConfig+0x454>)
 800e01e:	61fb      	str	r3, [r7, #28]
        break;
 800e020:	e00d      	b.n	800e03e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e022:	f7fd f845 	bl	800b0b0 <HAL_RCC_GetSysClockFreq>
 800e026:	61f8      	str	r0, [r7, #28]
        break;
 800e028:	e009      	b.n	800e03e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e02a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e02e:	61fb      	str	r3, [r7, #28]
        break;
 800e030:	e005      	b.n	800e03e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800e032:	2300      	movs	r3, #0
 800e034:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e036:	2301      	movs	r3, #1
 800e038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e03c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e03e:	69fb      	ldr	r3, [r7, #28]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d077      	beq.n	800e134 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e044:	69fb      	ldr	r3, [r7, #28]
 800e046:	005a      	lsls	r2, r3, #1
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	085b      	lsrs	r3, r3, #1
 800e04e:	441a      	add	r2, r3
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	fbb2 f3f3 	udiv	r3, r2, r3
 800e058:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e05a:	69bb      	ldr	r3, [r7, #24]
 800e05c:	2b0f      	cmp	r3, #15
 800e05e:	d916      	bls.n	800e08e <UART_SetConfig+0x392>
 800e060:	69bb      	ldr	r3, [r7, #24]
 800e062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e066:	d212      	bcs.n	800e08e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e068:	69bb      	ldr	r3, [r7, #24]
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	f023 030f 	bic.w	r3, r3, #15
 800e070:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e072:	69bb      	ldr	r3, [r7, #24]
 800e074:	085b      	lsrs	r3, r3, #1
 800e076:	b29b      	uxth	r3, r3
 800e078:	f003 0307 	and.w	r3, r3, #7
 800e07c:	b29a      	uxth	r2, r3
 800e07e:	8afb      	ldrh	r3, [r7, #22]
 800e080:	4313      	orrs	r3, r2
 800e082:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	8afa      	ldrh	r2, [r7, #22]
 800e08a:	60da      	str	r2, [r3, #12]
 800e08c:	e052      	b.n	800e134 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800e08e:	2301      	movs	r3, #1
 800e090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e094:	e04e      	b.n	800e134 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e09a:	2b08      	cmp	r3, #8
 800e09c:	d827      	bhi.n	800e0ee <UART_SetConfig+0x3f2>
 800e09e:	a201      	add	r2, pc, #4	; (adr r2, 800e0a4 <UART_SetConfig+0x3a8>)
 800e0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a4:	0800e0c9 	.word	0x0800e0c9
 800e0a8:	0800e0d1 	.word	0x0800e0d1
 800e0ac:	0800e0d9 	.word	0x0800e0d9
 800e0b0:	0800e0ef 	.word	0x0800e0ef
 800e0b4:	0800e0df 	.word	0x0800e0df
 800e0b8:	0800e0ef 	.word	0x0800e0ef
 800e0bc:	0800e0ef 	.word	0x0800e0ef
 800e0c0:	0800e0ef 	.word	0x0800e0ef
 800e0c4:	0800e0e7 	.word	0x0800e0e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e0c8:	f7fd f88a 	bl	800b1e0 <HAL_RCC_GetPCLK1Freq>
 800e0cc:	61f8      	str	r0, [r7, #28]
        break;
 800e0ce:	e014      	b.n	800e0fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e0d0:	f7fd f89c 	bl	800b20c <HAL_RCC_GetPCLK2Freq>
 800e0d4:	61f8      	str	r0, [r7, #28]
        break;
 800e0d6:	e010      	b.n	800e0fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e0d8:	4b1d      	ldr	r3, [pc, #116]	; (800e150 <UART_SetConfig+0x454>)
 800e0da:	61fb      	str	r3, [r7, #28]
        break;
 800e0dc:	e00d      	b.n	800e0fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e0de:	f7fc ffe7 	bl	800b0b0 <HAL_RCC_GetSysClockFreq>
 800e0e2:	61f8      	str	r0, [r7, #28]
        break;
 800e0e4:	e009      	b.n	800e0fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0ea:	61fb      	str	r3, [r7, #28]
        break;
 800e0ec:	e005      	b.n	800e0fa <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e0f8:	bf00      	nop
    }

    if (pclk != 0U)
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d019      	beq.n	800e134 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	085a      	lsrs	r2, r3, #1
 800e106:	69fb      	ldr	r3, [r7, #28]
 800e108:	441a      	add	r2, r3
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e112:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e114:	69bb      	ldr	r3, [r7, #24]
 800e116:	2b0f      	cmp	r3, #15
 800e118:	d909      	bls.n	800e12e <UART_SetConfig+0x432>
 800e11a:	69bb      	ldr	r3, [r7, #24]
 800e11c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e120:	d205      	bcs.n	800e12e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e122:	69bb      	ldr	r3, [r7, #24]
 800e124:	b29a      	uxth	r2, r3
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	60da      	str	r2, [r3, #12]
 800e12c:	e002      	b.n	800e134 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800e12e:	2301      	movs	r3, #1
 800e130:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2200      	movs	r2, #0
 800e138:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2200      	movs	r2, #0
 800e13e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800e140:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800e144:	4618      	mov	r0, r3
 800e146:	3728      	adds	r7, #40	; 0x28
 800e148:	46bd      	mov	sp, r7
 800e14a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e14e:	bf00      	nop
 800e150:	00f42400 	.word	0x00f42400

0800e154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e160:	f003 0308 	and.w	r3, r3, #8
 800e164:	2b00      	cmp	r3, #0
 800e166:	d00a      	beq.n	800e17e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	430a      	orrs	r2, r1
 800e17c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e182:	f003 0301 	and.w	r3, r3, #1
 800e186:	2b00      	cmp	r3, #0
 800e188:	d00a      	beq.n	800e1a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	430a      	orrs	r2, r1
 800e19e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a4:	f003 0302 	and.w	r3, r3, #2
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d00a      	beq.n	800e1c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	430a      	orrs	r2, r1
 800e1c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c6:	f003 0304 	and.w	r3, r3, #4
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00a      	beq.n	800e1e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	430a      	orrs	r2, r1
 800e1e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e8:	f003 0310 	and.w	r3, r3, #16
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00a      	beq.n	800e206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	689b      	ldr	r3, [r3, #8]
 800e1f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	430a      	orrs	r2, r1
 800e204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e20a:	f003 0320 	and.w	r3, r3, #32
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d00a      	beq.n	800e228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	689b      	ldr	r3, [r3, #8]
 800e218:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	430a      	orrs	r2, r1
 800e226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e22c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e230:	2b00      	cmp	r3, #0
 800e232:	d01a      	beq.n	800e26a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	430a      	orrs	r2, r1
 800e248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e24e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e252:	d10a      	bne.n	800e26a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	430a      	orrs	r2, r1
 800e268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e272:	2b00      	cmp	r3, #0
 800e274:	d00a      	beq.n	800e28c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	430a      	orrs	r2, r1
 800e28a:	605a      	str	r2, [r3, #4]
  }
}
 800e28c:	bf00      	nop
 800e28e:	370c      	adds	r7, #12
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	4770      	bx	lr

0800e298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b098      	sub	sp, #96	; 0x60
 800e29c:	af02      	add	r7, sp, #8
 800e29e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e2a8:	f7f7 ff32 	bl	8006110 <HAL_GetTick>
 800e2ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f003 0308 	and.w	r3, r3, #8
 800e2b8:	2b08      	cmp	r3, #8
 800e2ba:	d12e      	bne.n	800e31a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e2bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e2c0:	9300      	str	r3, [sp, #0]
 800e2c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f000 f88c 	bl	800e3e8 <UART_WaitOnFlagUntilTimeout>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d021      	beq.n	800e31a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2de:	e853 3f00 	ldrex	r3, [r3]
 800e2e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2ea:	653b      	str	r3, [r7, #80]	; 0x50
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2f4:	647b      	str	r3, [r7, #68]	; 0x44
 800e2f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e2fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e2fc:	e841 2300 	strex	r3, r2, [r1]
 800e300:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e304:	2b00      	cmp	r3, #0
 800e306:	d1e6      	bne.n	800e2d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2220      	movs	r2, #32
 800e30c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2200      	movs	r2, #0
 800e312:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e316:	2303      	movs	r3, #3
 800e318:	e062      	b.n	800e3e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f003 0304 	and.w	r3, r3, #4
 800e324:	2b04      	cmp	r3, #4
 800e326:	d149      	bne.n	800e3bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e32c:	9300      	str	r3, [sp, #0]
 800e32e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e330:	2200      	movs	r2, #0
 800e332:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 f856 	bl	800e3e8 <UART_WaitOnFlagUntilTimeout>
 800e33c:	4603      	mov	r3, r0
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d03c      	beq.n	800e3bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34a:	e853 3f00 	ldrex	r3, [r3]
 800e34e:	623b      	str	r3, [r7, #32]
   return(result);
 800e350:	6a3b      	ldr	r3, [r7, #32]
 800e352:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e356:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	461a      	mov	r2, r3
 800e35e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e360:	633b      	str	r3, [r7, #48]	; 0x30
 800e362:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e368:	e841 2300 	strex	r3, r2, [r1]
 800e36c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e370:	2b00      	cmp	r3, #0
 800e372:	d1e6      	bne.n	800e342 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	3308      	adds	r3, #8
 800e37a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	e853 3f00 	ldrex	r3, [r3]
 800e382:	60fb      	str	r3, [r7, #12]
   return(result);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f023 0301 	bic.w	r3, r3, #1
 800e38a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	3308      	adds	r3, #8
 800e392:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e394:	61fa      	str	r2, [r7, #28]
 800e396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e398:	69b9      	ldr	r1, [r7, #24]
 800e39a:	69fa      	ldr	r2, [r7, #28]
 800e39c:	e841 2300 	strex	r3, r2, [r1]
 800e3a0:	617b      	str	r3, [r7, #20]
   return(result);
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d1e5      	bne.n	800e374 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2220      	movs	r2, #32
 800e3ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e3b8:	2303      	movs	r3, #3
 800e3ba:	e011      	b.n	800e3e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2220      	movs	r2, #32
 800e3c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2220      	movs	r2, #32
 800e3c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800e3de:	2300      	movs	r3, #0
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3758      	adds	r7, #88	; 0x58
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b084      	sub	sp, #16
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	60f8      	str	r0, [r7, #12]
 800e3f0:	60b9      	str	r1, [r7, #8]
 800e3f2:	603b      	str	r3, [r7, #0]
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e3f8:	e049      	b.n	800e48e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3fa:	69bb      	ldr	r3, [r7, #24]
 800e3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e400:	d045      	beq.n	800e48e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e402:	f7f7 fe85 	bl	8006110 <HAL_GetTick>
 800e406:	4602      	mov	r2, r0
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	1ad3      	subs	r3, r2, r3
 800e40c:	69ba      	ldr	r2, [r7, #24]
 800e40e:	429a      	cmp	r2, r3
 800e410:	d302      	bcc.n	800e418 <UART_WaitOnFlagUntilTimeout+0x30>
 800e412:	69bb      	ldr	r3, [r7, #24]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d101      	bne.n	800e41c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e418:	2303      	movs	r3, #3
 800e41a:	e048      	b.n	800e4ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f003 0304 	and.w	r3, r3, #4
 800e426:	2b00      	cmp	r3, #0
 800e428:	d031      	beq.n	800e48e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	69db      	ldr	r3, [r3, #28]
 800e430:	f003 0308 	and.w	r3, r3, #8
 800e434:	2b08      	cmp	r3, #8
 800e436:	d110      	bne.n	800e45a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	2208      	movs	r2, #8
 800e43e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e440:	68f8      	ldr	r0, [r7, #12]
 800e442:	f000 f8ff 	bl	800e644 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2208      	movs	r2, #8
 800e44a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2200      	movs	r2, #0
 800e452:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	e029      	b.n	800e4ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	69db      	ldr	r3, [r3, #28]
 800e460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e468:	d111      	bne.n	800e48e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	f000 f8e5 	bl	800e644 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2220      	movs	r2, #32
 800e47e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2200      	movs	r2, #0
 800e486:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800e48a:	2303      	movs	r3, #3
 800e48c:	e00f      	b.n	800e4ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	69da      	ldr	r2, [r3, #28]
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	4013      	ands	r3, r2
 800e498:	68ba      	ldr	r2, [r7, #8]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	bf0c      	ite	eq
 800e49e:	2301      	moveq	r3, #1
 800e4a0:	2300      	movne	r3, #0
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	79fb      	ldrb	r3, [r7, #7]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d0a6      	beq.n	800e3fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e4ac:	2300      	movs	r3, #0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3710      	adds	r7, #16
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
	...

0800e4b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b096      	sub	sp, #88	; 0x58
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	60f8      	str	r0, [r7, #12]
 800e4c0:	60b9      	str	r1, [r7, #8]
 800e4c2:	4613      	mov	r3, r2
 800e4c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	68ba      	ldr	r2, [r7, #8]
 800e4ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	88fa      	ldrh	r2, [r7, #6]
 800e4d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2222      	movs	r2, #34	; 0x22
 800e4e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d028      	beq.n	800e53e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4f0:	4a3e      	ldr	r2, [pc, #248]	; (800e5ec <UART_Start_Receive_DMA+0x134>)
 800e4f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4f8:	4a3d      	ldr	r2, [pc, #244]	; (800e5f0 <UART_Start_Receive_DMA+0x138>)
 800e4fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e500:	4a3c      	ldr	r2, [pc, #240]	; (800e5f4 <UART_Start_Receive_DMA+0x13c>)
 800e502:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e508:	2200      	movs	r2, #0
 800e50a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	3324      	adds	r3, #36	; 0x24
 800e516:	4619      	mov	r1, r3
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e51c:	461a      	mov	r2, r3
 800e51e:	88fb      	ldrh	r3, [r7, #6]
 800e520:	f7f9 fa90 	bl	8007a44 <HAL_DMA_Start_IT>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d009      	beq.n	800e53e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2210      	movs	r2, #16
 800e52e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2220      	movs	r2, #32
 800e536:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800e53a:	2301      	movs	r3, #1
 800e53c:	e051      	b.n	800e5e2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	691b      	ldr	r3, [r3, #16]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d018      	beq.n	800e578 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e54e:	e853 3f00 	ldrex	r3, [r3]
 800e552:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e55a:	657b      	str	r3, [r7, #84]	; 0x54
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	461a      	mov	r2, r3
 800e562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e564:	64bb      	str	r3, [r7, #72]	; 0x48
 800e566:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e568:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e56a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e56c:	e841 2300 	strex	r3, r2, [r1]
 800e570:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e574:	2b00      	cmp	r3, #0
 800e576:	d1e6      	bne.n	800e546 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	3308      	adds	r3, #8
 800e57e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e582:	e853 3f00 	ldrex	r3, [r3]
 800e586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58a:	f043 0301 	orr.w	r3, r3, #1
 800e58e:	653b      	str	r3, [r7, #80]	; 0x50
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	3308      	adds	r3, #8
 800e596:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e598:	637a      	str	r2, [r7, #52]	; 0x34
 800e59a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e59c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e59e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5a0:	e841 2300 	strex	r3, r2, [r1]
 800e5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d1e5      	bne.n	800e578 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	3308      	adds	r3, #8
 800e5b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	e853 3f00 	ldrex	r3, [r3]
 800e5ba:	613b      	str	r3, [r7, #16]
   return(result);
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	3308      	adds	r3, #8
 800e5ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e5cc:	623a      	str	r2, [r7, #32]
 800e5ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d0:	69f9      	ldr	r1, [r7, #28]
 800e5d2:	6a3a      	ldr	r2, [r7, #32]
 800e5d4:	e841 2300 	strex	r3, r2, [r1]
 800e5d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5da:	69bb      	ldr	r3, [r7, #24]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1e5      	bne.n	800e5ac <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800e5e0:	2300      	movs	r3, #0
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3758      	adds	r7, #88	; 0x58
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	0800e70d 	.word	0x0800e70d
 800e5f0:	0800e839 	.word	0x0800e839
 800e5f4:	0800e877 	.word	0x0800e877

0800e5f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b089      	sub	sp, #36	; 0x24
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	e853 3f00 	ldrex	r3, [r3]
 800e60c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e614:	61fb      	str	r3, [r7, #28]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	461a      	mov	r2, r3
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	61bb      	str	r3, [r7, #24]
 800e620:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e622:	6979      	ldr	r1, [r7, #20]
 800e624:	69ba      	ldr	r2, [r7, #24]
 800e626:	e841 2300 	strex	r3, r2, [r1]
 800e62a:	613b      	str	r3, [r7, #16]
   return(result);
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d1e6      	bne.n	800e600 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2220      	movs	r2, #32
 800e636:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800e638:	bf00      	nop
 800e63a:	3724      	adds	r7, #36	; 0x24
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr

0800e644 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e644:	b480      	push	{r7}
 800e646:	b095      	sub	sp, #84	; 0x54
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e654:	e853 3f00 	ldrex	r3, [r3]
 800e658:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e660:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	461a      	mov	r2, r3
 800e668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e66a:	643b      	str	r3, [r7, #64]	; 0x40
 800e66c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e66e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e672:	e841 2300 	strex	r3, r2, [r1]
 800e676:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d1e6      	bne.n	800e64c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	3308      	adds	r3, #8
 800e684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e686:	6a3b      	ldr	r3, [r7, #32]
 800e688:	e853 3f00 	ldrex	r3, [r3]
 800e68c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e68e:	69fb      	ldr	r3, [r7, #28]
 800e690:	f023 0301 	bic.w	r3, r3, #1
 800e694:	64bb      	str	r3, [r7, #72]	; 0x48
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	3308      	adds	r3, #8
 800e69c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e69e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e6a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e6a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6a6:	e841 2300 	strex	r3, r2, [r1]
 800e6aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d1e5      	bne.n	800e67e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	d118      	bne.n	800e6ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	e853 3f00 	ldrex	r3, [r3]
 800e6c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	f023 0310 	bic.w	r3, r3, #16
 800e6ce:	647b      	str	r3, [r7, #68]	; 0x44
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6d8:	61bb      	str	r3, [r7, #24]
 800e6da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6dc:	6979      	ldr	r1, [r7, #20]
 800e6de:	69ba      	ldr	r2, [r7, #24]
 800e6e0:	e841 2300 	strex	r3, r2, [r1]
 800e6e4:	613b      	str	r3, [r7, #16]
   return(result);
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d1e6      	bne.n	800e6ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2220      	movs	r2, #32
 800e6f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 800e700:	bf00      	nop
 800e702:	3754      	adds	r7, #84	; 0x54
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b09c      	sub	sp, #112	; 0x70
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e718:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f003 0320 	and.w	r3, r3, #32
 800e724:	2b00      	cmp	r3, #0
 800e726:	d171      	bne.n	800e80c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800e728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e72a:	2200      	movs	r2, #0
 800e72c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e738:	e853 3f00 	ldrex	r3, [r3]
 800e73c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e73e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e744:	66bb      	str	r3, [r7, #104]	; 0x68
 800e746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	461a      	mov	r2, r3
 800e74c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e74e:	65bb      	str	r3, [r7, #88]	; 0x58
 800e750:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e752:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e754:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e756:	e841 2300 	strex	r3, r2, [r1]
 800e75a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e75c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d1e6      	bne.n	800e730 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	3308      	adds	r3, #8
 800e768:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76c:	e853 3f00 	ldrex	r3, [r3]
 800e770:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e774:	f023 0301 	bic.w	r3, r3, #1
 800e778:	667b      	str	r3, [r7, #100]	; 0x64
 800e77a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	3308      	adds	r3, #8
 800e780:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e782:	647a      	str	r2, [r7, #68]	; 0x44
 800e784:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e786:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e78a:	e841 2300 	strex	r3, r2, [r1]
 800e78e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e792:	2b00      	cmp	r3, #0
 800e794:	d1e5      	bne.n	800e762 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	3308      	adds	r3, #8
 800e79c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a0:	e853 3f00 	ldrex	r3, [r3]
 800e7a4:	623b      	str	r3, [r7, #32]
   return(result);
 800e7a6:	6a3b      	ldr	r3, [r7, #32]
 800e7a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7ac:	663b      	str	r3, [r7, #96]	; 0x60
 800e7ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	3308      	adds	r3, #8
 800e7b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e7b6:	633a      	str	r2, [r7, #48]	; 0x30
 800e7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7be:	e841 2300 	strex	r3, r2, [r1]
 800e7c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d1e5      	bne.n	800e796 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e7ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7cc:	2220      	movs	r2, #32
 800e7ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7d6:	2b01      	cmp	r3, #1
 800e7d8:	d118      	bne.n	800e80c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	e853 3f00 	ldrex	r3, [r3]
 800e7e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f023 0310 	bic.w	r3, r3, #16
 800e7ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7f8:	61fb      	str	r3, [r7, #28]
 800e7fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7fc:	69b9      	ldr	r1, [r7, #24]
 800e7fe:	69fa      	ldr	r2, [r7, #28]
 800e800:	e841 2300 	strex	r3, r2, [r1]
 800e804:	617b      	str	r3, [r7, #20]
   return(result);
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d1e6      	bne.n	800e7da <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e80c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e80e:	2200      	movs	r2, #0
 800e810:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e816:	2b01      	cmp	r3, #1
 800e818:	d107      	bne.n	800e82a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e81a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e81c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e820:	4619      	mov	r1, r3
 800e822:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e824:	f7ff fa5e 	bl	800dce4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e828:	e002      	b.n	800e830 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800e82a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e82c:	f7f7 fb6c 	bl	8005f08 <HAL_UART_RxCpltCallback>
}
 800e830:	bf00      	nop
 800e832:	3770      	adds	r7, #112	; 0x70
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e844:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	2201      	movs	r2, #1
 800e84a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e850:	2b01      	cmp	r3, #1
 800e852:	d109      	bne.n	800e868 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e85a:	085b      	lsrs	r3, r3, #1
 800e85c:	b29b      	uxth	r3, r3
 800e85e:	4619      	mov	r1, r3
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	f7ff fa3f 	bl	800dce4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e866:	e002      	b.n	800e86e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e868:	68f8      	ldr	r0, [r7, #12]
 800e86a:	f7ff fa27 	bl	800dcbc <HAL_UART_RxHalfCpltCallback>
}
 800e86e:	bf00      	nop
 800e870:	3710      	adds	r7, #16
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e876:	b580      	push	{r7, lr}
 800e878:	b086      	sub	sp, #24
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e882:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e888:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e890:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	689b      	ldr	r3, [r3, #8]
 800e898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e89c:	2b80      	cmp	r3, #128	; 0x80
 800e89e:	d109      	bne.n	800e8b4 <UART_DMAError+0x3e>
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	2b21      	cmp	r3, #33	; 0x21
 800e8a4:	d106      	bne.n	800e8b4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800e8ae:	6978      	ldr	r0, [r7, #20]
 800e8b0:	f7ff fea2 	bl	800e5f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	689b      	ldr	r3, [r3, #8]
 800e8ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8be:	2b40      	cmp	r3, #64	; 0x40
 800e8c0:	d109      	bne.n	800e8d6 <UART_DMAError+0x60>
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2b22      	cmp	r3, #34	; 0x22
 800e8c6:	d106      	bne.n	800e8d6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800e8d0:	6978      	ldr	r0, [r7, #20]
 800e8d2:	f7ff feb7 	bl	800e644 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8dc:	f043 0210 	orr.w	r2, r3, #16
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e8e6:	6978      	ldr	r0, [r7, #20]
 800e8e8:	f7ff f9f2 	bl	800dcd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e8ec:	bf00      	nop
 800e8ee:	3718      	adds	r7, #24
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e900:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	2200      	movs	r2, #0
 800e906:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2200      	movs	r2, #0
 800e90e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e912:	68f8      	ldr	r0, [r7, #12]
 800e914:	f7ff f9dc 	bl	800dcd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e918:	bf00      	nop
 800e91a:	3710      	adds	r7, #16
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b088      	sub	sp, #32
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	e853 3f00 	ldrex	r3, [r3]
 800e934:	60bb      	str	r3, [r7, #8]
   return(result);
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e93c:	61fb      	str	r3, [r7, #28]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	461a      	mov	r2, r3
 800e944:	69fb      	ldr	r3, [r7, #28]
 800e946:	61bb      	str	r3, [r7, #24]
 800e948:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e94a:	6979      	ldr	r1, [r7, #20]
 800e94c:	69ba      	ldr	r2, [r7, #24]
 800e94e:	e841 2300 	strex	r3, r2, [r1]
 800e952:	613b      	str	r3, [r7, #16]
   return(result);
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d1e6      	bne.n	800e928 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2220      	movs	r2, #32
 800e95e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2200      	movs	r2, #0
 800e964:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f7ff f99e 	bl	800dca8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e96c:	bf00      	nop
 800e96e:	3720      	adds	r7, #32
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e97c:	bf00      	nop
 800e97e:	370c      	adds	r7, #12
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr

0800e988 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e988:	b084      	sub	sp, #16
 800e98a:	b480      	push	{r7}
 800e98c:	b083      	sub	sp, #12
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
 800e992:	f107 0014 	add.w	r0, r7, #20
 800e996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800e99a:	2300      	movs	r3, #0
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	370c      	adds	r7, #12
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a6:	b004      	add	sp, #16
 800e9a8:	4770      	bx	lr

0800e9aa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800e9aa:	b480      	push	{r7}
 800e9ac:	b085      	sub	sp, #20
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e9ba:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800e9be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	b29a      	uxth	r2, r3
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e9ca:	2300      	movs	r3, #0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3714      	adds	r7, #20
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr

0800e9d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b085      	sub	sp, #20
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e9e0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800e9e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e9ec:	b29a      	uxth	r2, r3
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	b29b      	uxth	r3, r3
 800e9f2:	43db      	mvns	r3, r3
 800e9f4:	b29b      	uxth	r3, r3
 800e9f6:	4013      	ands	r3, r2
 800e9f8:	b29a      	uxth	r2, r3
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ea00:	2300      	movs	r3, #0
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3714      	adds	r7, #20
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr

0800ea0e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800ea0e:	b480      	push	{r7}
 800ea10:	b083      	sub	sp, #12
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
 800ea16:	460b      	mov	r3, r1
 800ea18:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ea1a:	2300      	movs	r3, #0
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	370c      	adds	r7, #12
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr

0800ea28 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ea28:	b084      	sub	sp, #16
 800ea2a:	b480      	push	{r7}
 800ea2c:	b083      	sub	sp, #12
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
 800ea32:	f107 0014 	add.w	r0, r7, #20
 800ea36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2200      	movs	r2, #0
 800ea56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ea5a:	2300      	movs	r3, #0
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	370c      	adds	r7, #12
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	b004      	add	sp, #16
 800ea68:	4770      	bx	lr
	...

0800ea6c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b09d      	sub	sp, #116	; 0x74
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ea76:	2300      	movs	r3, #0
 800ea78:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ea7c:	687a      	ldr	r2, [r7, #4]
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	009b      	lsls	r3, r3, #2
 800ea84:	4413      	add	r3, r2
 800ea86:	881b      	ldrh	r3, [r3, #0]
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800ea8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea92:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	78db      	ldrb	r3, [r3, #3]
 800ea9a:	2b03      	cmp	r3, #3
 800ea9c:	d81f      	bhi.n	800eade <USB_ActivateEndpoint+0x72>
 800ea9e:	a201      	add	r2, pc, #4	; (adr r2, 800eaa4 <USB_ActivateEndpoint+0x38>)
 800eaa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa4:	0800eab5 	.word	0x0800eab5
 800eaa8:	0800ead1 	.word	0x0800ead1
 800eaac:	0800eae7 	.word	0x0800eae7
 800eab0:	0800eac3 	.word	0x0800eac3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800eab4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800eab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eabc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800eac0:	e012      	b.n	800eae8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800eac2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800eac6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800eaca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800eace:	e00b      	b.n	800eae8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ead0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ead4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ead8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800eadc:	e004      	b.n	800eae8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800eade:	2301      	movs	r3, #1
 800eae0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800eae4:	e000      	b.n	800eae8 <USB_ActivateEndpoint+0x7c>
      break;
 800eae6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800eae8:	687a      	ldr	r2, [r7, #4]
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	009b      	lsls	r3, r3, #2
 800eaf0:	441a      	add	r2, r3
 800eaf2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800eaf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eafa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eafe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eb02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	009b      	lsls	r3, r3, #2
 800eb12:	4413      	add	r3, r2
 800eb14:	881b      	ldrh	r3, [r3, #0]
 800eb16:	b29b      	uxth	r3, r3
 800eb18:	b21b      	sxth	r3, r3
 800eb1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb22:	b21a      	sxth	r2, r3
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	781b      	ldrb	r3, [r3, #0]
 800eb28:	b21b      	sxth	r3, r3
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	b21b      	sxth	r3, r3
 800eb2e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800eb32:	687a      	ldr	r2, [r7, #4]
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	009b      	lsls	r3, r3, #2
 800eb3a:	441a      	add	r2, r3
 800eb3c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800eb40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eb4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	7b1b      	ldrb	r3, [r3, #12]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	f040 8178 	bne.w	800ee4e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	785b      	ldrb	r3, [r3, #1]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	f000 8084 	beq.w	800ec70 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	61bb      	str	r3, [r7, #24]
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	461a      	mov	r2, r3
 800eb76:	69bb      	ldr	r3, [r7, #24]
 800eb78:	4413      	add	r3, r2
 800eb7a:	61bb      	str	r3, [r7, #24]
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	781b      	ldrb	r3, [r3, #0]
 800eb80:	00da      	lsls	r2, r3, #3
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	4413      	add	r3, r2
 800eb86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eb8a:	617b      	str	r3, [r7, #20]
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	88db      	ldrh	r3, [r3, #6]
 800eb90:	085b      	lsrs	r3, r3, #1
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	005b      	lsls	r3, r3, #1
 800eb96:	b29a      	uxth	r2, r3
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eb9c:	687a      	ldr	r2, [r7, #4]
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	009b      	lsls	r3, r3, #2
 800eba4:	4413      	add	r3, r2
 800eba6:	881b      	ldrh	r3, [r3, #0]
 800eba8:	827b      	strh	r3, [r7, #18]
 800ebaa:	8a7b      	ldrh	r3, [r7, #18]
 800ebac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d01b      	beq.n	800ebec <USB_ActivateEndpoint+0x180>
 800ebb4:	687a      	ldr	r2, [r7, #4]
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	009b      	lsls	r3, r3, #2
 800ebbc:	4413      	add	r3, r2
 800ebbe:	881b      	ldrh	r3, [r3, #0]
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ebc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebca:	823b      	strh	r3, [r7, #16]
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	009b      	lsls	r3, r3, #2
 800ebd4:	441a      	add	r2, r3
 800ebd6:	8a3b      	ldrh	r3, [r7, #16]
 800ebd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ebdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ebe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ebe4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	78db      	ldrb	r3, [r3, #3]
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d020      	beq.n	800ec36 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ebf4:	687a      	ldr	r2, [r7, #4]
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	781b      	ldrb	r3, [r3, #0]
 800ebfa:	009b      	lsls	r3, r3, #2
 800ebfc:	4413      	add	r3, r2
 800ebfe:	881b      	ldrh	r3, [r3, #0]
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec0a:	81bb      	strh	r3, [r7, #12]
 800ec0c:	89bb      	ldrh	r3, [r7, #12]
 800ec0e:	f083 0320 	eor.w	r3, r3, #32
 800ec12:	81bb      	strh	r3, [r7, #12]
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	781b      	ldrb	r3, [r3, #0]
 800ec1a:	009b      	lsls	r3, r3, #2
 800ec1c:	441a      	add	r2, r3
 800ec1e:	89bb      	ldrh	r3, [r7, #12]
 800ec20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	8013      	strh	r3, [r2, #0]
 800ec34:	e2d5      	b.n	800f1e2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ec36:	687a      	ldr	r2, [r7, #4]
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	009b      	lsls	r3, r3, #2
 800ec3e:	4413      	add	r3, r2
 800ec40:	881b      	ldrh	r3, [r3, #0]
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec4c:	81fb      	strh	r3, [r7, #14]
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	009b      	lsls	r3, r3, #2
 800ec56:	441a      	add	r2, r3
 800ec58:	89fb      	ldrh	r3, [r7, #14]
 800ec5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	8013      	strh	r3, [r2, #0]
 800ec6e:	e2b8      	b.n	800f1e2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	633b      	str	r3, [r7, #48]	; 0x30
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	461a      	mov	r2, r3
 800ec7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec80:	4413      	add	r3, r2
 800ec82:	633b      	str	r3, [r7, #48]	; 0x30
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	00da      	lsls	r2, r3, #3
 800ec8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8c:	4413      	add	r3, r2
 800ec8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ec92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	88db      	ldrh	r3, [r3, #6]
 800ec98:	085b      	lsrs	r3, r3, #1
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	005b      	lsls	r3, r3, #1
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	62bb      	str	r3, [r7, #40]	; 0x28
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb4:	4413      	add	r3, r2
 800ecb6:	62bb      	str	r3, [r7, #40]	; 0x28
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	00da      	lsls	r2, r3, #3
 800ecbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc0:	4413      	add	r3, r2
 800ecc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ecc6:	627b      	str	r3, [r7, #36]	; 0x24
 800ecc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecca:	881b      	ldrh	r3, [r3, #0]
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ecd2:	b29a      	uxth	r2, r3
 800ecd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd6:	801a      	strh	r2, [r3, #0]
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	691b      	ldr	r3, [r3, #16]
 800ecdc:	2b3e      	cmp	r3, #62	; 0x3e
 800ecde:	d91d      	bls.n	800ed1c <USB_ActivateEndpoint+0x2b0>
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	691b      	ldr	r3, [r3, #16]
 800ece4:	095b      	lsrs	r3, r3, #5
 800ece6:	66bb      	str	r3, [r7, #104]	; 0x68
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	691b      	ldr	r3, [r3, #16]
 800ecec:	f003 031f 	and.w	r3, r3, #31
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d102      	bne.n	800ecfa <USB_ActivateEndpoint+0x28e>
 800ecf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ecf6:	3b01      	subs	r3, #1
 800ecf8:	66bb      	str	r3, [r7, #104]	; 0x68
 800ecfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfc:	881b      	ldrh	r3, [r3, #0]
 800ecfe:	b29a      	uxth	r2, r3
 800ed00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed02:	b29b      	uxth	r3, r3
 800ed04:	029b      	lsls	r3, r3, #10
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	4313      	orrs	r3, r2
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed14:	b29a      	uxth	r2, r3
 800ed16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed18:	801a      	strh	r2, [r3, #0]
 800ed1a:	e026      	b.n	800ed6a <USB_ActivateEndpoint+0x2fe>
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	691b      	ldr	r3, [r3, #16]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d10a      	bne.n	800ed3a <USB_ActivateEndpoint+0x2ce>
 800ed24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed26:	881b      	ldrh	r3, [r3, #0]
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed36:	801a      	strh	r2, [r3, #0]
 800ed38:	e017      	b.n	800ed6a <USB_ActivateEndpoint+0x2fe>
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	691b      	ldr	r3, [r3, #16]
 800ed3e:	085b      	lsrs	r3, r3, #1
 800ed40:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	691b      	ldr	r3, [r3, #16]
 800ed46:	f003 0301 	and.w	r3, r3, #1
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d002      	beq.n	800ed54 <USB_ActivateEndpoint+0x2e8>
 800ed4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed50:	3301      	adds	r3, #1
 800ed52:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed56:	881b      	ldrh	r3, [r3, #0]
 800ed58:	b29a      	uxth	r2, r3
 800ed5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed5c:	b29b      	uxth	r3, r3
 800ed5e:	029b      	lsls	r3, r3, #10
 800ed60:	b29b      	uxth	r3, r3
 800ed62:	4313      	orrs	r3, r2
 800ed64:	b29a      	uxth	r2, r3
 800ed66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed68:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	009b      	lsls	r3, r3, #2
 800ed72:	4413      	add	r3, r2
 800ed74:	881b      	ldrh	r3, [r3, #0]
 800ed76:	847b      	strh	r3, [r7, #34]	; 0x22
 800ed78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d01b      	beq.n	800edba <USB_ActivateEndpoint+0x34e>
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	4413      	add	r3, r2
 800ed8c:	881b      	ldrh	r3, [r3, #0]
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed98:	843b      	strh	r3, [r7, #32]
 800ed9a:	687a      	ldr	r2, [r7, #4]
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	009b      	lsls	r3, r3, #2
 800eda2:	441a      	add	r2, r3
 800eda4:	8c3b      	ldrh	r3, [r7, #32]
 800eda6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800edaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800edae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800edb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d124      	bne.n	800ee0c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	009b      	lsls	r3, r3, #2
 800edca:	4413      	add	r3, r2
 800edcc:	881b      	ldrh	r3, [r3, #0]
 800edce:	b29b      	uxth	r3, r3
 800edd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800edd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edd8:	83bb      	strh	r3, [r7, #28]
 800edda:	8bbb      	ldrh	r3, [r7, #28]
 800eddc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ede0:	83bb      	strh	r3, [r7, #28]
 800ede2:	8bbb      	ldrh	r3, [r7, #28]
 800ede4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ede8:	83bb      	strh	r3, [r7, #28]
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	009b      	lsls	r3, r3, #2
 800edf2:	441a      	add	r2, r3
 800edf4:	8bbb      	ldrh	r3, [r7, #28]
 800edf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800edfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800edfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	8013      	strh	r3, [r2, #0]
 800ee0a:	e1ea      	b.n	800f1e2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	009b      	lsls	r3, r3, #2
 800ee14:	4413      	add	r3, r2
 800ee16:	881b      	ldrh	r3, [r3, #0]
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ee1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee22:	83fb      	strh	r3, [r7, #30]
 800ee24:	8bfb      	ldrh	r3, [r7, #30]
 800ee26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ee2a:	83fb      	strh	r3, [r7, #30]
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	009b      	lsls	r3, r3, #2
 800ee34:	441a      	add	r2, r3
 800ee36:	8bfb      	ldrh	r3, [r7, #30]
 800ee38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	8013      	strh	r3, [r2, #0]
 800ee4c:	e1c9      	b.n	800f1e2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	78db      	ldrb	r3, [r3, #3]
 800ee52:	2b02      	cmp	r3, #2
 800ee54:	d11e      	bne.n	800ee94 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ee56:	687a      	ldr	r2, [r7, #4]
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	009b      	lsls	r3, r3, #2
 800ee5e:	4413      	add	r3, r2
 800ee60:	881b      	ldrh	r3, [r3, #0]
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee6c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	009b      	lsls	r3, r3, #2
 800ee78:	441a      	add	r2, r3
 800ee7a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ee7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee86:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ee8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	8013      	strh	r3, [r2, #0]
 800ee92:	e01d      	b.n	800eed0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	009b      	lsls	r3, r3, #2
 800ee9c:	4413      	add	r3, r2
 800ee9e:	881b      	ldrh	r3, [r3, #0]
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800eea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eeaa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	441a      	add	r2, r3
 800eeb8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800eebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eecc:	b29b      	uxth	r3, r3
 800eece:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eeda:	b29b      	uxth	r3, r3
 800eedc:	461a      	mov	r2, r3
 800eede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eee0:	4413      	add	r3, r2
 800eee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	00da      	lsls	r2, r3, #3
 800eeea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eeec:	4413      	add	r3, r2
 800eeee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eef2:	65bb      	str	r3, [r7, #88]	; 0x58
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	891b      	ldrh	r3, [r3, #8]
 800eef8:	085b      	lsrs	r3, r3, #1
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	005b      	lsls	r3, r3, #1
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef02:	801a      	strh	r2, [r3, #0]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	657b      	str	r3, [r7, #84]	; 0x54
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef0e:	b29b      	uxth	r3, r3
 800ef10:	461a      	mov	r2, r3
 800ef12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef14:	4413      	add	r3, r2
 800ef16:	657b      	str	r3, [r7, #84]	; 0x54
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	00da      	lsls	r2, r3, #3
 800ef1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef20:	4413      	add	r3, r2
 800ef22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ef26:	653b      	str	r3, [r7, #80]	; 0x50
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	895b      	ldrh	r3, [r3, #10]
 800ef2c:	085b      	lsrs	r3, r3, #1
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	005b      	lsls	r3, r3, #1
 800ef32:	b29a      	uxth	r2, r3
 800ef34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef36:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	785b      	ldrb	r3, [r3, #1]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	f040 8093 	bne.w	800f068 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	009b      	lsls	r3, r3, #2
 800ef4a:	4413      	add	r3, r2
 800ef4c:	881b      	ldrh	r3, [r3, #0]
 800ef4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ef52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ef56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d01b      	beq.n	800ef96 <USB_ActivateEndpoint+0x52a>
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	009b      	lsls	r3, r3, #2
 800ef66:	4413      	add	r3, r2
 800ef68:	881b      	ldrh	r3, [r3, #0]
 800ef6a:	b29b      	uxth	r3, r3
 800ef6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef74:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ef76:	687a      	ldr	r2, [r7, #4]
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	009b      	lsls	r3, r3, #2
 800ef7e:	441a      	add	r2, r3
 800ef80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ef82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ef8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef92:	b29b      	uxth	r3, r3
 800ef94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	4413      	add	r3, r2
 800efa0:	881b      	ldrh	r3, [r3, #0]
 800efa2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800efa4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800efa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d01b      	beq.n	800efe6 <USB_ActivateEndpoint+0x57a>
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	009b      	lsls	r3, r3, #2
 800efb6:	4413      	add	r3, r2
 800efb8:	881b      	ldrh	r3, [r3, #0]
 800efba:	b29b      	uxth	r3, r3
 800efbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800efc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efc4:	877b      	strh	r3, [r7, #58]	; 0x3a
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	009b      	lsls	r3, r3, #2
 800efce:	441a      	add	r2, r3
 800efd0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800efd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800efd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800efda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800efde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800efe2:	b29b      	uxth	r3, r3
 800efe4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800efe6:	687a      	ldr	r2, [r7, #4]
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	009b      	lsls	r3, r3, #2
 800efee:	4413      	add	r3, r2
 800eff0:	881b      	ldrh	r3, [r3, #0]
 800eff2:	b29b      	uxth	r3, r3
 800eff4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800effc:	873b      	strh	r3, [r7, #56]	; 0x38
 800effe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f000:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f004:	873b      	strh	r3, [r7, #56]	; 0x38
 800f006:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f008:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f00c:	873b      	strh	r3, [r7, #56]	; 0x38
 800f00e:	687a      	ldr	r2, [r7, #4]
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	009b      	lsls	r3, r3, #2
 800f016:	441a      	add	r2, r3
 800f018:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f01a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f01e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f02e:	687a      	ldr	r2, [r7, #4]
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	781b      	ldrb	r3, [r3, #0]
 800f034:	009b      	lsls	r3, r3, #2
 800f036:	4413      	add	r3, r2
 800f038:	881b      	ldrh	r3, [r3, #0]
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f044:	86fb      	strh	r3, [r7, #54]	; 0x36
 800f046:	687a      	ldr	r2, [r7, #4]
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	781b      	ldrb	r3, [r3, #0]
 800f04c:	009b      	lsls	r3, r3, #2
 800f04e:	441a      	add	r2, r3
 800f050:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f05a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f05e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f062:	b29b      	uxth	r3, r3
 800f064:	8013      	strh	r3, [r2, #0]
 800f066:	e0bc      	b.n	800f1e2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f068:	687a      	ldr	r2, [r7, #4]
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	009b      	lsls	r3, r3, #2
 800f070:	4413      	add	r3, r2
 800f072:	881b      	ldrh	r3, [r3, #0]
 800f074:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800f078:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f07c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f080:	2b00      	cmp	r3, #0
 800f082:	d01d      	beq.n	800f0c0 <USB_ActivateEndpoint+0x654>
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	009b      	lsls	r3, r3, #2
 800f08c:	4413      	add	r3, r2
 800f08e:	881b      	ldrh	r3, [r3, #0]
 800f090:	b29b      	uxth	r3, r3
 800f092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f09a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800f09e:	687a      	ldr	r2, [r7, #4]
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	781b      	ldrb	r3, [r3, #0]
 800f0a4:	009b      	lsls	r3, r3, #2
 800f0a6:	441a      	add	r2, r3
 800f0a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f0ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f0b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f0b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f0b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f0c0:	687a      	ldr	r2, [r7, #4]
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	4413      	add	r3, r2
 800f0ca:	881b      	ldrh	r3, [r3, #0]
 800f0cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800f0d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d01d      	beq.n	800f118 <USB_ActivateEndpoint+0x6ac>
 800f0dc:	687a      	ldr	r2, [r7, #4]
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	009b      	lsls	r3, r3, #2
 800f0e4:	4413      	add	r3, r2
 800f0e6:	881b      	ldrh	r3, [r3, #0]
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f0ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800f0f6:	687a      	ldr	r2, [r7, #4]
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	441a      	add	r2, r3
 800f100:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800f104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f10c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f110:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f114:	b29b      	uxth	r3, r3
 800f116:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	78db      	ldrb	r3, [r3, #3]
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d024      	beq.n	800f16a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	009b      	lsls	r3, r3, #2
 800f128:	4413      	add	r3, r2
 800f12a:	881b      	ldrh	r3, [r3, #0]
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f136:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f13a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f13e:	f083 0320 	eor.w	r3, r3, #32
 800f142:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f146:	687a      	ldr	r2, [r7, #4]
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	441a      	add	r2, r3
 800f150:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f15c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f164:	b29b      	uxth	r3, r3
 800f166:	8013      	strh	r3, [r2, #0]
 800f168:	e01d      	b.n	800f1a6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	781b      	ldrb	r3, [r3, #0]
 800f170:	009b      	lsls	r3, r3, #2
 800f172:	4413      	add	r3, r2
 800f174:	881b      	ldrh	r3, [r3, #0]
 800f176:	b29b      	uxth	r3, r3
 800f178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f17c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f180:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f184:	687a      	ldr	r2, [r7, #4]
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	009b      	lsls	r3, r3, #2
 800f18c:	441a      	add	r2, r3
 800f18e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f19a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f19e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f1a6:	687a      	ldr	r2, [r7, #4]
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	4413      	add	r3, r2
 800f1b0:	881b      	ldrh	r3, [r3, #0]
 800f1b2:	b29b      	uxth	r3, r3
 800f1b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f1b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f1c0:	687a      	ldr	r2, [r7, #4]
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	009b      	lsls	r3, r3, #2
 800f1c8:	441a      	add	r2, r3
 800f1ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f1ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1de:	b29b      	uxth	r3, r3
 800f1e0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800f1e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3774      	adds	r7, #116	; 0x74
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr
 800f1f2:	bf00      	nop

0800f1f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b08d      	sub	sp, #52	; 0x34
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	7b1b      	ldrb	r3, [r3, #12]
 800f202:	2b00      	cmp	r3, #0
 800f204:	f040 808e 	bne.w	800f324 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	785b      	ldrb	r3, [r3, #1]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d044      	beq.n	800f29a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f210:	687a      	ldr	r2, [r7, #4]
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	781b      	ldrb	r3, [r3, #0]
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	4413      	add	r3, r2
 800f21a:	881b      	ldrh	r3, [r3, #0]
 800f21c:	81bb      	strh	r3, [r7, #12]
 800f21e:	89bb      	ldrh	r3, [r7, #12]
 800f220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f224:	2b00      	cmp	r3, #0
 800f226:	d01b      	beq.n	800f260 <USB_DeactivateEndpoint+0x6c>
 800f228:	687a      	ldr	r2, [r7, #4]
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	009b      	lsls	r3, r3, #2
 800f230:	4413      	add	r3, r2
 800f232:	881b      	ldrh	r3, [r3, #0]
 800f234:	b29b      	uxth	r3, r3
 800f236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f23a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f23e:	817b      	strh	r3, [r7, #10]
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	009b      	lsls	r3, r3, #2
 800f248:	441a      	add	r2, r3
 800f24a:	897b      	ldrh	r3, [r7, #10]
 800f24c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f258:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f260:	687a      	ldr	r2, [r7, #4]
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	009b      	lsls	r3, r3, #2
 800f268:	4413      	add	r3, r2
 800f26a:	881b      	ldrh	r3, [r3, #0]
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f276:	813b      	strh	r3, [r7, #8]
 800f278:	687a      	ldr	r2, [r7, #4]
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	009b      	lsls	r3, r3, #2
 800f280:	441a      	add	r2, r3
 800f282:	893b      	ldrh	r3, [r7, #8]
 800f284:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f288:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f28c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f294:	b29b      	uxth	r3, r3
 800f296:	8013      	strh	r3, [r2, #0]
 800f298:	e192      	b.n	800f5c0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f29a:	687a      	ldr	r2, [r7, #4]
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	009b      	lsls	r3, r3, #2
 800f2a2:	4413      	add	r3, r2
 800f2a4:	881b      	ldrh	r3, [r3, #0]
 800f2a6:	827b      	strh	r3, [r7, #18]
 800f2a8:	8a7b      	ldrh	r3, [r7, #18]
 800f2aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d01b      	beq.n	800f2ea <USB_DeactivateEndpoint+0xf6>
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	009b      	lsls	r3, r3, #2
 800f2ba:	4413      	add	r3, r2
 800f2bc:	881b      	ldrh	r3, [r3, #0]
 800f2be:	b29b      	uxth	r3, r3
 800f2c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2c8:	823b      	strh	r3, [r7, #16]
 800f2ca:	687a      	ldr	r2, [r7, #4]
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	009b      	lsls	r3, r3, #2
 800f2d2:	441a      	add	r2, r3
 800f2d4:	8a3b      	ldrh	r3, [r7, #16]
 800f2d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f2da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f2de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f2e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2e6:	b29b      	uxth	r3, r3
 800f2e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f2ea:	687a      	ldr	r2, [r7, #4]
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	009b      	lsls	r3, r3, #2
 800f2f2:	4413      	add	r3, r2
 800f2f4:	881b      	ldrh	r3, [r3, #0]
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f2fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f300:	81fb      	strh	r3, [r7, #14]
 800f302:	687a      	ldr	r2, [r7, #4]
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	009b      	lsls	r3, r3, #2
 800f30a:	441a      	add	r2, r3
 800f30c:	89fb      	ldrh	r3, [r7, #14]
 800f30e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f31a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f31e:	b29b      	uxth	r3, r3
 800f320:	8013      	strh	r3, [r2, #0]
 800f322:	e14d      	b.n	800f5c0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	785b      	ldrb	r3, [r3, #1]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	f040 80a5 	bne.w	800f478 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	009b      	lsls	r3, r3, #2
 800f336:	4413      	add	r3, r2
 800f338:	881b      	ldrh	r3, [r3, #0]
 800f33a:	843b      	strh	r3, [r7, #32]
 800f33c:	8c3b      	ldrh	r3, [r7, #32]
 800f33e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f342:	2b00      	cmp	r3, #0
 800f344:	d01b      	beq.n	800f37e <USB_DeactivateEndpoint+0x18a>
 800f346:	687a      	ldr	r2, [r7, #4]
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	4413      	add	r3, r2
 800f350:	881b      	ldrh	r3, [r3, #0]
 800f352:	b29b      	uxth	r3, r3
 800f354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f35c:	83fb      	strh	r3, [r7, #30]
 800f35e:	687a      	ldr	r2, [r7, #4]
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	441a      	add	r2, r3
 800f368:	8bfb      	ldrh	r3, [r7, #30]
 800f36a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f36e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f372:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f37a:	b29b      	uxth	r3, r3
 800f37c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f37e:	687a      	ldr	r2, [r7, #4]
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	4413      	add	r3, r2
 800f388:	881b      	ldrh	r3, [r3, #0]
 800f38a:	83bb      	strh	r3, [r7, #28]
 800f38c:	8bbb      	ldrh	r3, [r7, #28]
 800f38e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f392:	2b00      	cmp	r3, #0
 800f394:	d01b      	beq.n	800f3ce <USB_DeactivateEndpoint+0x1da>
 800f396:	687a      	ldr	r2, [r7, #4]
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	009b      	lsls	r3, r3, #2
 800f39e:	4413      	add	r3, r2
 800f3a0:	881b      	ldrh	r3, [r3, #0]
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3ac:	837b      	strh	r3, [r7, #26]
 800f3ae:	687a      	ldr	r2, [r7, #4]
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	009b      	lsls	r3, r3, #2
 800f3b6:	441a      	add	r2, r3
 800f3b8:	8b7b      	ldrh	r3, [r7, #26]
 800f3ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f3be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f3c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f3c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800f3ce:	687a      	ldr	r2, [r7, #4]
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	009b      	lsls	r3, r3, #2
 800f3d6:	4413      	add	r3, r2
 800f3d8:	881b      	ldrh	r3, [r3, #0]
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3e4:	833b      	strh	r3, [r7, #24]
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	009b      	lsls	r3, r3, #2
 800f3ee:	441a      	add	r2, r3
 800f3f0:	8b3b      	ldrh	r3, [r7, #24]
 800f3f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f3f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f3fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f3fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f402:	b29b      	uxth	r3, r3
 800f404:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f406:	687a      	ldr	r2, [r7, #4]
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	009b      	lsls	r3, r3, #2
 800f40e:	4413      	add	r3, r2
 800f410:	881b      	ldrh	r3, [r3, #0]
 800f412:	b29b      	uxth	r3, r3
 800f414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f41c:	82fb      	strh	r3, [r7, #22]
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	009b      	lsls	r3, r3, #2
 800f426:	441a      	add	r2, r3
 800f428:	8afb      	ldrh	r3, [r7, #22]
 800f42a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f42e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f43a:	b29b      	uxth	r3, r3
 800f43c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f43e:	687a      	ldr	r2, [r7, #4]
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	009b      	lsls	r3, r3, #2
 800f446:	4413      	add	r3, r2
 800f448:	881b      	ldrh	r3, [r3, #0]
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f454:	82bb      	strh	r3, [r7, #20]
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	009b      	lsls	r3, r3, #2
 800f45e:	441a      	add	r2, r3
 800f460:	8abb      	ldrh	r3, [r7, #20]
 800f462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f46a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f46e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f472:	b29b      	uxth	r3, r3
 800f474:	8013      	strh	r3, [r2, #0]
 800f476:	e0a3      	b.n	800f5c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f478:	687a      	ldr	r2, [r7, #4]
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	009b      	lsls	r3, r3, #2
 800f480:	4413      	add	r3, r2
 800f482:	881b      	ldrh	r3, [r3, #0]
 800f484:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f486:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d01b      	beq.n	800f4c8 <USB_DeactivateEndpoint+0x2d4>
 800f490:	687a      	ldr	r2, [r7, #4]
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	009b      	lsls	r3, r3, #2
 800f498:	4413      	add	r3, r2
 800f49a:	881b      	ldrh	r3, [r3, #0]
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f4a8:	687a      	ldr	r2, [r7, #4]
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	009b      	lsls	r3, r3, #2
 800f4b0:	441a      	add	r2, r3
 800f4b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f4b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f4c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4c4:	b29b      	uxth	r3, r3
 800f4c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f4c8:	687a      	ldr	r2, [r7, #4]
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	4413      	add	r3, r2
 800f4d2:	881b      	ldrh	r3, [r3, #0]
 800f4d4:	857b      	strh	r3, [r7, #42]	; 0x2a
 800f4d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f4d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d01b      	beq.n	800f518 <USB_DeactivateEndpoint+0x324>
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	009b      	lsls	r3, r3, #2
 800f4e8:	4413      	add	r3, r2
 800f4ea:	881b      	ldrh	r3, [r3, #0]
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4f6:	853b      	strh	r3, [r7, #40]	; 0x28
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	441a      	add	r2, r3
 800f502:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f50c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f510:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f514:	b29b      	uxth	r3, r3
 800f516:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f518:	687a      	ldr	r2, [r7, #4]
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	009b      	lsls	r3, r3, #2
 800f520:	4413      	add	r3, r2
 800f522:	881b      	ldrh	r3, [r3, #0]
 800f524:	b29b      	uxth	r3, r3
 800f526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f52a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f52e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f530:	687a      	ldr	r2, [r7, #4]
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	009b      	lsls	r3, r3, #2
 800f538:	441a      	add	r2, r3
 800f53a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f53c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f550:	687a      	ldr	r2, [r7, #4]
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	009b      	lsls	r3, r3, #2
 800f558:	4413      	add	r3, r2
 800f55a:	881b      	ldrh	r3, [r3, #0]
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f566:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f568:	687a      	ldr	r2, [r7, #4]
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	009b      	lsls	r3, r3, #2
 800f570:	441a      	add	r2, r3
 800f572:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f57c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f584:	b29b      	uxth	r3, r3
 800f586:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f588:	687a      	ldr	r2, [r7, #4]
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	4413      	add	r3, r2
 800f592:	881b      	ldrh	r3, [r3, #0]
 800f594:	b29b      	uxth	r3, r3
 800f596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f59a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f59e:	847b      	strh	r3, [r7, #34]	; 0x22
 800f5a0:	687a      	ldr	r2, [r7, #4]
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	009b      	lsls	r3, r3, #2
 800f5a8:	441a      	add	r2, r3
 800f5aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f5b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f5b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f5b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800f5c0:	2300      	movs	r3, #0
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3734      	adds	r7, #52	; 0x34
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5cc:	4770      	bx	lr

0800f5ce <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f5ce:	b580      	push	{r7, lr}
 800f5d0:	b0c2      	sub	sp, #264	; 0x108
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f5dc:	6018      	str	r0, [r3, #0]
 800f5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5e6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f5e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	785b      	ldrb	r3, [r3, #1]
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	f040 86b7 	bne.w	8010368 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800f5fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	699a      	ldr	r2, [r3, #24]
 800f606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f60a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	691b      	ldr	r3, [r3, #16]
 800f612:	429a      	cmp	r2, r3
 800f614:	d908      	bls.n	800f628 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800f616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f61a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	691b      	ldr	r3, [r3, #16]
 800f622:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f626:	e007      	b.n	800f638 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800f628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f62c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	699b      	ldr	r3, [r3, #24]
 800f634:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800f638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f63c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	7b1b      	ldrb	r3, [r3, #12]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d13a      	bne.n	800f6be <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f64c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	6959      	ldr	r1, [r3, #20]
 800f654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	88da      	ldrh	r2, [r3, #6]
 800f660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f664:	b29b      	uxth	r3, r3
 800f666:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f66a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f66e:	6800      	ldr	r0, [r0, #0]
 800f670:	f001 fcb9 	bl	8010fe6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	613b      	str	r3, [r7, #16]
 800f680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f68e:	b29b      	uxth	r3, r3
 800f690:	461a      	mov	r2, r3
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	4413      	add	r3, r2
 800f696:	613b      	str	r3, [r7, #16]
 800f698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f69c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	00da      	lsls	r2, r3, #3
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	4413      	add	r3, r2
 800f6aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f6ae:	60fb      	str	r3, [r7, #12]
 800f6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6b4:	b29a      	uxth	r2, r3
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	801a      	strh	r2, [r3, #0]
 800f6ba:	f000 be1f 	b.w	80102fc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800f6be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	78db      	ldrb	r3, [r3, #3]
 800f6ca:	2b02      	cmp	r3, #2
 800f6cc:	f040 8462 	bne.w	800ff94 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800f6d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	6a1a      	ldr	r2, [r3, #32]
 800f6dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	691b      	ldr	r3, [r3, #16]
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	f240 83df 	bls.w	800feac <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f6ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6f6:	681a      	ldr	r2, [r3, #0]
 800f6f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	009b      	lsls	r3, r3, #2
 800f706:	4413      	add	r3, r2
 800f708:	881b      	ldrh	r3, [r3, #0]
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f714:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800f718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f71c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f720:	681a      	ldr	r2, [r3, #0]
 800f722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	009b      	lsls	r3, r3, #2
 800f730:	441a      	add	r2, r3
 800f732:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f73a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f73e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f746:	b29b      	uxth	r3, r3
 800f748:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800f74a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f74e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	6a1a      	ldr	r2, [r3, #32]
 800f756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f75a:	1ad2      	subs	r2, r2, r3
 800f75c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f76c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f770:	681a      	ldr	r2, [r3, #0]
 800f772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	009b      	lsls	r3, r3, #2
 800f780:	4413      	add	r3, r2
 800f782:	881b      	ldrh	r3, [r3, #0]
 800f784:	b29b      	uxth	r3, r3
 800f786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	f000 81c7 	beq.w	800fb1e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	633b      	str	r3, [r7, #48]	; 0x30
 800f79c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	785b      	ldrb	r3, [r3, #1]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d177      	bne.n	800f89c <USB_EPStartXfer+0x2ce>
 800f7ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f7b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	461a      	mov	r2, r3
 800f7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7cc:	4413      	add	r3, r2
 800f7ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800f7d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	00da      	lsls	r2, r3, #3
 800f7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e0:	4413      	add	r3, r2
 800f7e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f7e6:	627b      	str	r3, [r7, #36]	; 0x24
 800f7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ea:	881b      	ldrh	r3, [r3, #0]
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f7f2:	b29a      	uxth	r2, r3
 800f7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f6:	801a      	strh	r2, [r3, #0]
 800f7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f7fc:	2b3e      	cmp	r3, #62	; 0x3e
 800f7fe:	d921      	bls.n	800f844 <USB_EPStartXfer+0x276>
 800f800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f804:	095b      	lsrs	r3, r3, #5
 800f806:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f80e:	f003 031f 	and.w	r3, r3, #31
 800f812:	2b00      	cmp	r3, #0
 800f814:	d104      	bne.n	800f820 <USB_EPStartXfer+0x252>
 800f816:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f81a:	3b01      	subs	r3, #1
 800f81c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f822:	881b      	ldrh	r3, [r3, #0]
 800f824:	b29a      	uxth	r2, r3
 800f826:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f82a:	b29b      	uxth	r3, r3
 800f82c:	029b      	lsls	r3, r3, #10
 800f82e:	b29b      	uxth	r3, r3
 800f830:	4313      	orrs	r3, r2
 800f832:	b29b      	uxth	r3, r3
 800f834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f83c:	b29a      	uxth	r2, r3
 800f83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f840:	801a      	strh	r2, [r3, #0]
 800f842:	e050      	b.n	800f8e6 <USB_EPStartXfer+0x318>
 800f844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d10a      	bne.n	800f862 <USB_EPStartXfer+0x294>
 800f84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f84e:	881b      	ldrh	r3, [r3, #0]
 800f850:	b29b      	uxth	r3, r3
 800f852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f85a:	b29a      	uxth	r2, r3
 800f85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f85e:	801a      	strh	r2, [r3, #0]
 800f860:	e041      	b.n	800f8e6 <USB_EPStartXfer+0x318>
 800f862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f866:	085b      	lsrs	r3, r3, #1
 800f868:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f870:	f003 0301 	and.w	r3, r3, #1
 800f874:	2b00      	cmp	r3, #0
 800f876:	d004      	beq.n	800f882 <USB_EPStartXfer+0x2b4>
 800f878:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f87c:	3301      	adds	r3, #1
 800f87e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f884:	881b      	ldrh	r3, [r3, #0]
 800f886:	b29a      	uxth	r2, r3
 800f888:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f88c:	b29b      	uxth	r3, r3
 800f88e:	029b      	lsls	r3, r3, #10
 800f890:	b29b      	uxth	r3, r3
 800f892:	4313      	orrs	r3, r2
 800f894:	b29a      	uxth	r2, r3
 800f896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f898:	801a      	strh	r2, [r3, #0]
 800f89a:	e024      	b.n	800f8e6 <USB_EPStartXfer+0x318>
 800f89c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	785b      	ldrb	r3, [r3, #1]
 800f8a8:	2b01      	cmp	r3, #1
 800f8aa:	d11c      	bne.n	800f8e6 <USB_EPStartXfer+0x318>
 800f8ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f8ba:	b29b      	uxth	r3, r3
 800f8bc:	461a      	mov	r2, r3
 800f8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c0:	4413      	add	r3, r2
 800f8c2:	633b      	str	r3, [r7, #48]	; 0x30
 800f8c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	00da      	lsls	r2, r3, #3
 800f8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d4:	4413      	add	r3, r2
 800f8d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f8da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f8dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8e0:	b29a      	uxth	r2, r3
 800f8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f8e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	895b      	ldrh	r3, [r3, #10]
 800f8f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f8f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	6959      	ldr	r1, [r3, #20]
 800f902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f906:	b29b      	uxth	r3, r3
 800f908:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f90c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f910:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f914:	6800      	ldr	r0, [r0, #0]
 800f916:	f001 fb66 	bl	8010fe6 <USB_WritePMA>
            ep->xfer_buff += len;
 800f91a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f91e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	695a      	ldr	r2, [r3, #20]
 800f926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f92a:	441a      	add	r2, r3
 800f92c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f93c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	6a1a      	ldr	r2, [r3, #32]
 800f944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	691b      	ldr	r3, [r3, #16]
 800f950:	429a      	cmp	r2, r3
 800f952:	d90f      	bls.n	800f974 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800f954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	6a1a      	ldr	r2, [r3, #32]
 800f960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f964:	1ad2      	subs	r2, r2, r3
 800f966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f96a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	621a      	str	r2, [r3, #32]
 800f972:	e00e      	b.n	800f992 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800f974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	6a1b      	ldr	r3, [r3, #32]
 800f980:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800f984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2200      	movs	r2, #0
 800f990:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	785b      	ldrb	r3, [r3, #1]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d177      	bne.n	800fa92 <USB_EPStartXfer+0x4c4>
 800f9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	61bb      	str	r3, [r7, #24]
 800f9ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	461a      	mov	r2, r3
 800f9c0:	69bb      	ldr	r3, [r7, #24]
 800f9c2:	4413      	add	r3, r2
 800f9c4:	61bb      	str	r3, [r7, #24]
 800f9c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	00da      	lsls	r2, r3, #3
 800f9d4:	69bb      	ldr	r3, [r7, #24]
 800f9d6:	4413      	add	r3, r2
 800f9d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f9dc:	617b      	str	r3, [r7, #20]
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	881b      	ldrh	r3, [r3, #0]
 800f9e2:	b29b      	uxth	r3, r3
 800f9e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f9e8:	b29a      	uxth	r2, r3
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	801a      	strh	r2, [r3, #0]
 800f9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9f2:	2b3e      	cmp	r3, #62	; 0x3e
 800f9f4:	d921      	bls.n	800fa3a <USB_EPStartXfer+0x46c>
 800f9f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9fa:	095b      	lsrs	r3, r3, #5
 800f9fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fa00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa04:	f003 031f 	and.w	r3, r3, #31
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d104      	bne.n	800fa16 <USB_EPStartXfer+0x448>
 800fa0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fa10:	3b01      	subs	r3, #1
 800fa12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	881b      	ldrh	r3, [r3, #0]
 800fa1a:	b29a      	uxth	r2, r3
 800fa1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	029b      	lsls	r3, r3, #10
 800fa24:	b29b      	uxth	r3, r3
 800fa26:	4313      	orrs	r3, r2
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fa2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fa32:	b29a      	uxth	r2, r3
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	801a      	strh	r2, [r3, #0]
 800fa38:	e056      	b.n	800fae8 <USB_EPStartXfer+0x51a>
 800fa3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d10a      	bne.n	800fa58 <USB_EPStartXfer+0x48a>
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	881b      	ldrh	r3, [r3, #0]
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fa4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	801a      	strh	r2, [r3, #0]
 800fa56:	e047      	b.n	800fae8 <USB_EPStartXfer+0x51a>
 800fa58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa5c:	085b      	lsrs	r3, r3, #1
 800fa5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fa62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa66:	f003 0301 	and.w	r3, r3, #1
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d004      	beq.n	800fa78 <USB_EPStartXfer+0x4aa>
 800fa6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fa72:	3301      	adds	r3, #1
 800fa74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	881b      	ldrh	r3, [r3, #0]
 800fa7c:	b29a      	uxth	r2, r3
 800fa7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	029b      	lsls	r3, r3, #10
 800fa86:	b29b      	uxth	r3, r3
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	b29a      	uxth	r2, r3
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	801a      	strh	r2, [r3, #0]
 800fa90:	e02a      	b.n	800fae8 <USB_EPStartXfer+0x51a>
 800fa92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	785b      	ldrb	r3, [r3, #1]
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	d122      	bne.n	800fae8 <USB_EPStartXfer+0x51a>
 800faa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	623b      	str	r3, [r7, #32]
 800faae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	461a      	mov	r2, r3
 800fac0:	6a3b      	ldr	r3, [r7, #32]
 800fac2:	4413      	add	r3, r2
 800fac4:	623b      	str	r3, [r7, #32]
 800fac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	00da      	lsls	r2, r3, #3
 800fad4:	6a3b      	ldr	r3, [r7, #32]
 800fad6:	4413      	add	r3, r2
 800fad8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fadc:	61fb      	str	r3, [r7, #28]
 800fade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fae2:	b29a      	uxth	r2, r3
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800fae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	891b      	ldrh	r3, [r3, #8]
 800faf4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800faf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fafc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	6959      	ldr	r1, [r3, #20]
 800fb04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fb0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fb12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fb16:	6800      	ldr	r0, [r0, #0]
 800fb18:	f001 fa65 	bl	8010fe6 <USB_WritePMA>
 800fb1c:	e3ee      	b.n	80102fc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fb1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	785b      	ldrb	r3, [r3, #1]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d177      	bne.n	800fc1e <USB_EPStartXfer+0x650>
 800fb2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb48:	b29b      	uxth	r3, r3
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb4e:	4413      	add	r3, r2
 800fb50:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	00da      	lsls	r2, r3, #3
 800fb60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb62:	4413      	add	r3, r2
 800fb64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fb68:	647b      	str	r3, [r7, #68]	; 0x44
 800fb6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb6c:	881b      	ldrh	r3, [r3, #0]
 800fb6e:	b29b      	uxth	r3, r3
 800fb70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb78:	801a      	strh	r2, [r3, #0]
 800fb7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb7e:	2b3e      	cmp	r3, #62	; 0x3e
 800fb80:	d921      	bls.n	800fbc6 <USB_EPStartXfer+0x5f8>
 800fb82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb86:	095b      	lsrs	r3, r3, #5
 800fb88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800fb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb90:	f003 031f 	and.w	r3, r3, #31
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d104      	bne.n	800fba2 <USB_EPStartXfer+0x5d4>
 800fb98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fb9c:	3b01      	subs	r3, #1
 800fb9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800fba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fba4:	881b      	ldrh	r3, [r3, #0]
 800fba6:	b29a      	uxth	r2, r3
 800fba8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	029b      	lsls	r3, r3, #10
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	4313      	orrs	r3, r2
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fbba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fbbe:	b29a      	uxth	r2, r3
 800fbc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbc2:	801a      	strh	r2, [r3, #0]
 800fbc4:	e056      	b.n	800fc74 <USB_EPStartXfer+0x6a6>
 800fbc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d10a      	bne.n	800fbe4 <USB_EPStartXfer+0x616>
 800fbce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbd0:	881b      	ldrh	r3, [r3, #0]
 800fbd2:	b29b      	uxth	r3, r3
 800fbd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fbd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fbdc:	b29a      	uxth	r2, r3
 800fbde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbe0:	801a      	strh	r2, [r3, #0]
 800fbe2:	e047      	b.n	800fc74 <USB_EPStartXfer+0x6a6>
 800fbe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbe8:	085b      	lsrs	r3, r3, #1
 800fbea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800fbee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbf2:	f003 0301 	and.w	r3, r3, #1
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d004      	beq.n	800fc04 <USB_EPStartXfer+0x636>
 800fbfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fbfe:	3301      	adds	r3, #1
 800fc00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800fc04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc06:	881b      	ldrh	r3, [r3, #0]
 800fc08:	b29a      	uxth	r2, r3
 800fc0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fc0e:	b29b      	uxth	r3, r3
 800fc10:	029b      	lsls	r3, r3, #10
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	4313      	orrs	r3, r2
 800fc16:	b29a      	uxth	r2, r3
 800fc18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc1a:	801a      	strh	r2, [r3, #0]
 800fc1c:	e02a      	b.n	800fc74 <USB_EPStartXfer+0x6a6>
 800fc1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	785b      	ldrb	r3, [r3, #1]
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	d122      	bne.n	800fc74 <USB_EPStartXfer+0x6a6>
 800fc2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	653b      	str	r3, [r7, #80]	; 0x50
 800fc3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc4e:	4413      	add	r3, r2
 800fc50:	653b      	str	r3, [r7, #80]	; 0x50
 800fc52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	781b      	ldrb	r3, [r3, #0]
 800fc5e:	00da      	lsls	r2, r3, #3
 800fc60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc62:	4413      	add	r3, r2
 800fc64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fc68:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc6e:	b29a      	uxth	r2, r3
 800fc70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800fc74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	891b      	ldrh	r3, [r3, #8]
 800fc80:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fc84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	6959      	ldr	r1, [r3, #20]
 800fc90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc94:	b29b      	uxth	r3, r3
 800fc96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fc9a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fc9e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fca2:	6800      	ldr	r0, [r0, #0]
 800fca4:	f001 f99f 	bl	8010fe6 <USB_WritePMA>
            ep->xfer_buff += len;
 800fca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	695a      	ldr	r2, [r3, #20]
 800fcb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcb8:	441a      	add	r2, r3
 800fcba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800fcc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	6a1a      	ldr	r2, [r3, #32]
 800fcd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	691b      	ldr	r3, [r3, #16]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d90f      	bls.n	800fd02 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800fce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	6a1a      	ldr	r2, [r3, #32]
 800fcee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcf2:	1ad2      	subs	r2, r2, r3
 800fcf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	621a      	str	r2, [r3, #32]
 800fd00:	e00e      	b.n	800fd20 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800fd02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	6a1b      	ldr	r3, [r3, #32]
 800fd0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800fd12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fd20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	643b      	str	r3, [r7, #64]	; 0x40
 800fd2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	785b      	ldrb	r3, [r3, #1]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d177      	bne.n	800fe2c <USB_EPStartXfer+0x85e>
 800fd3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	461a      	mov	r2, r3
 800fd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd5c:	4413      	add	r3, r2
 800fd5e:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	00da      	lsls	r2, r3, #3
 800fd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd70:	4413      	add	r3, r2
 800fd72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fd76:	637b      	str	r3, [r7, #52]	; 0x34
 800fd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd7a:	881b      	ldrh	r3, [r3, #0]
 800fd7c:	b29b      	uxth	r3, r3
 800fd7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fd82:	b29a      	uxth	r2, r3
 800fd84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd86:	801a      	strh	r2, [r3, #0]
 800fd88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd8c:	2b3e      	cmp	r3, #62	; 0x3e
 800fd8e:	d921      	bls.n	800fdd4 <USB_EPStartXfer+0x806>
 800fd90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd94:	095b      	lsrs	r3, r3, #5
 800fd96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fd9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd9e:	f003 031f 	and.w	r3, r3, #31
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d104      	bne.n	800fdb0 <USB_EPStartXfer+0x7e2>
 800fda6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fdaa:	3b01      	subs	r3, #1
 800fdac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fdb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdb2:	881b      	ldrh	r3, [r3, #0]
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	029b      	lsls	r3, r3, #10
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	4313      	orrs	r3, r2
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fdc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fdcc:	b29a      	uxth	r2, r3
 800fdce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdd0:	801a      	strh	r2, [r3, #0]
 800fdd2:	e050      	b.n	800fe76 <USB_EPStartXfer+0x8a8>
 800fdd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d10a      	bne.n	800fdf2 <USB_EPStartXfer+0x824>
 800fddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdde:	881b      	ldrh	r3, [r3, #0]
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fde6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fdea:	b29a      	uxth	r2, r3
 800fdec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdee:	801a      	strh	r2, [r3, #0]
 800fdf0:	e041      	b.n	800fe76 <USB_EPStartXfer+0x8a8>
 800fdf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdf6:	085b      	lsrs	r3, r3, #1
 800fdf8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fdfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe00:	f003 0301 	and.w	r3, r3, #1
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d004      	beq.n	800fe12 <USB_EPStartXfer+0x844>
 800fe08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fe0c:	3301      	adds	r3, #1
 800fe0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fe12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe14:	881b      	ldrh	r3, [r3, #0]
 800fe16:	b29a      	uxth	r2, r3
 800fe18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fe1c:	b29b      	uxth	r3, r3
 800fe1e:	029b      	lsls	r3, r3, #10
 800fe20:	b29b      	uxth	r3, r3
 800fe22:	4313      	orrs	r3, r2
 800fe24:	b29a      	uxth	r2, r3
 800fe26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe28:	801a      	strh	r2, [r3, #0]
 800fe2a:	e024      	b.n	800fe76 <USB_EPStartXfer+0x8a8>
 800fe2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	785b      	ldrb	r3, [r3, #1]
 800fe38:	2b01      	cmp	r3, #1
 800fe3a:	d11c      	bne.n	800fe76 <USB_EPStartXfer+0x8a8>
 800fe3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe50:	4413      	add	r3, r2
 800fe52:	643b      	str	r3, [r7, #64]	; 0x40
 800fe54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	00da      	lsls	r2, r3, #3
 800fe62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe64:	4413      	add	r3, r2
 800fe66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fe6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe70:	b29a      	uxth	r2, r3
 800fe72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800fe76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	895b      	ldrh	r3, [r3, #10]
 800fe82:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fe86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	6959      	ldr	r1, [r3, #20]
 800fe92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe96:	b29b      	uxth	r3, r3
 800fe98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fe9c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fea0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fea4:	6800      	ldr	r0, [r0, #0]
 800fea6:	f001 f89e 	bl	8010fe6 <USB_WritePMA>
 800feaa:	e227      	b.n	80102fc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800feac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800feb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	6a1b      	ldr	r3, [r3, #32]
 800feb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800febc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fec0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fec4:	681a      	ldr	r2, [r3, #0]
 800fec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800feca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	009b      	lsls	r3, r3, #2
 800fed4:	4413      	add	r3, r2
 800fed6:	881b      	ldrh	r3, [r3, #0]
 800fed8:	b29b      	uxth	r3, r3
 800feda:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800fede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fee2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800fee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800feea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	009b      	lsls	r3, r3, #2
 800fefe:	441a      	add	r2, r3
 800ff00:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ff04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ff18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ff24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	461a      	mov	r2, r3
 800ff36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff38:	4413      	add	r3, r2
 800ff3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ff3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	00da      	lsls	r2, r3, #3
 800ff4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff4c:	4413      	add	r3, r2
 800ff4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ff52:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff58:	b29a      	uxth	r2, r3
 800ff5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ff5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	891b      	ldrh	r3, [r3, #8]
 800ff6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ff6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	6959      	ldr	r1, [r3, #20]
 800ff7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff7e:	b29b      	uxth	r3, r3
 800ff80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ff84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ff88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ff8c:	6800      	ldr	r0, [r0, #0]
 800ff8e:	f001 f82a 	bl	8010fe6 <USB_WritePMA>
 800ff92:	e1b3      	b.n	80102fc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ff94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	6a1a      	ldr	r2, [r3, #32]
 800ffa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffa4:	1ad2      	subs	r2, r2, r3
 800ffa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ffb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	009b      	lsls	r3, r3, #2
 800ffca:	4413      	add	r3, r2
 800ffcc:	881b      	ldrh	r3, [r3, #0]
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	f000 80c6 	beq.w	8010166 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ffda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	673b      	str	r3, [r7, #112]	; 0x70
 800ffe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	785b      	ldrb	r3, [r3, #1]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d177      	bne.n	80100e6 <USB_EPStartXfer+0xb18>
 800fff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	66bb      	str	r3, [r7, #104]	; 0x68
 8010002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010010:	b29b      	uxth	r3, r3
 8010012:	461a      	mov	r2, r3
 8010014:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010016:	4413      	add	r3, r2
 8010018:	66bb      	str	r3, [r7, #104]	; 0x68
 801001a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801001e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	00da      	lsls	r2, r3, #3
 8010028:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801002a:	4413      	add	r3, r2
 801002c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010030:	667b      	str	r3, [r7, #100]	; 0x64
 8010032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010034:	881b      	ldrh	r3, [r3, #0]
 8010036:	b29b      	uxth	r3, r3
 8010038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801003c:	b29a      	uxth	r2, r3
 801003e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010040:	801a      	strh	r2, [r3, #0]
 8010042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010046:	2b3e      	cmp	r3, #62	; 0x3e
 8010048:	d921      	bls.n	801008e <USB_EPStartXfer+0xac0>
 801004a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801004e:	095b      	lsrs	r3, r3, #5
 8010050:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010058:	f003 031f 	and.w	r3, r3, #31
 801005c:	2b00      	cmp	r3, #0
 801005e:	d104      	bne.n	801006a <USB_EPStartXfer+0xa9c>
 8010060:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010064:	3b01      	subs	r3, #1
 8010066:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801006a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801006c:	881b      	ldrh	r3, [r3, #0]
 801006e:	b29a      	uxth	r2, r3
 8010070:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010074:	b29b      	uxth	r3, r3
 8010076:	029b      	lsls	r3, r3, #10
 8010078:	b29b      	uxth	r3, r3
 801007a:	4313      	orrs	r3, r2
 801007c:	b29b      	uxth	r3, r3
 801007e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010086:	b29a      	uxth	r2, r3
 8010088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801008a:	801a      	strh	r2, [r3, #0]
 801008c:	e050      	b.n	8010130 <USB_EPStartXfer+0xb62>
 801008e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010092:	2b00      	cmp	r3, #0
 8010094:	d10a      	bne.n	80100ac <USB_EPStartXfer+0xade>
 8010096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010098:	881b      	ldrh	r3, [r3, #0]
 801009a:	b29b      	uxth	r3, r3
 801009c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80100a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80100a4:	b29a      	uxth	r2, r3
 80100a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100a8:	801a      	strh	r2, [r3, #0]
 80100aa:	e041      	b.n	8010130 <USB_EPStartXfer+0xb62>
 80100ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100b0:	085b      	lsrs	r3, r3, #1
 80100b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80100b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100ba:	f003 0301 	and.w	r3, r3, #1
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d004      	beq.n	80100cc <USB_EPStartXfer+0xafe>
 80100c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80100c6:	3301      	adds	r3, #1
 80100c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80100cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100ce:	881b      	ldrh	r3, [r3, #0]
 80100d0:	b29a      	uxth	r2, r3
 80100d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80100d6:	b29b      	uxth	r3, r3
 80100d8:	029b      	lsls	r3, r3, #10
 80100da:	b29b      	uxth	r3, r3
 80100dc:	4313      	orrs	r3, r2
 80100de:	b29a      	uxth	r2, r3
 80100e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100e2:	801a      	strh	r2, [r3, #0]
 80100e4:	e024      	b.n	8010130 <USB_EPStartXfer+0xb62>
 80100e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	785b      	ldrb	r3, [r3, #1]
 80100f2:	2b01      	cmp	r3, #1
 80100f4:	d11c      	bne.n	8010130 <USB_EPStartXfer+0xb62>
 80100f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010104:	b29b      	uxth	r3, r3
 8010106:	461a      	mov	r2, r3
 8010108:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801010a:	4413      	add	r3, r2
 801010c:	673b      	str	r3, [r7, #112]	; 0x70
 801010e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	00da      	lsls	r2, r3, #3
 801011c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801011e:	4413      	add	r3, r2
 8010120:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010124:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801012a:	b29a      	uxth	r2, r3
 801012c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801012e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8010130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	895b      	ldrh	r3, [r3, #10]
 801013c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	6959      	ldr	r1, [r3, #20]
 801014c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010150:	b29b      	uxth	r3, r3
 8010152:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010156:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801015a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801015e:	6800      	ldr	r0, [r0, #0]
 8010160:	f000 ff41 	bl	8010fe6 <USB_WritePMA>
 8010164:	e0ca      	b.n	80102fc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801016a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	785b      	ldrb	r3, [r3, #1]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d177      	bne.n	8010266 <USB_EPStartXfer+0xc98>
 8010176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801017a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010186:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010190:	b29b      	uxth	r3, r3
 8010192:	461a      	mov	r2, r3
 8010194:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010196:	4413      	add	r3, r2
 8010198:	67fb      	str	r3, [r7, #124]	; 0x7c
 801019a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801019e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	00da      	lsls	r2, r3, #3
 80101a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80101aa:	4413      	add	r3, r2
 80101ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80101b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80101b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101b4:	881b      	ldrh	r3, [r3, #0]
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80101bc:	b29a      	uxth	r2, r3
 80101be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101c0:	801a      	strh	r2, [r3, #0]
 80101c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101c6:	2b3e      	cmp	r3, #62	; 0x3e
 80101c8:	d921      	bls.n	801020e <USB_EPStartXfer+0xc40>
 80101ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101ce:	095b      	lsrs	r3, r3, #5
 80101d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80101d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101d8:	f003 031f 	and.w	r3, r3, #31
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d104      	bne.n	80101ea <USB_EPStartXfer+0xc1c>
 80101e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80101e4:	3b01      	subs	r3, #1
 80101e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80101ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101ec:	881b      	ldrh	r3, [r3, #0]
 80101ee:	b29a      	uxth	r2, r3
 80101f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80101f4:	b29b      	uxth	r3, r3
 80101f6:	029b      	lsls	r3, r3, #10
 80101f8:	b29b      	uxth	r3, r3
 80101fa:	4313      	orrs	r3, r2
 80101fc:	b29b      	uxth	r3, r3
 80101fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010206:	b29a      	uxth	r2, r3
 8010208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801020a:	801a      	strh	r2, [r3, #0]
 801020c:	e05c      	b.n	80102c8 <USB_EPStartXfer+0xcfa>
 801020e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010212:	2b00      	cmp	r3, #0
 8010214:	d10a      	bne.n	801022c <USB_EPStartXfer+0xc5e>
 8010216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010218:	881b      	ldrh	r3, [r3, #0]
 801021a:	b29b      	uxth	r3, r3
 801021c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010224:	b29a      	uxth	r2, r3
 8010226:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010228:	801a      	strh	r2, [r3, #0]
 801022a:	e04d      	b.n	80102c8 <USB_EPStartXfer+0xcfa>
 801022c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010230:	085b      	lsrs	r3, r3, #1
 8010232:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801023a:	f003 0301 	and.w	r3, r3, #1
 801023e:	2b00      	cmp	r3, #0
 8010240:	d004      	beq.n	801024c <USB_EPStartXfer+0xc7e>
 8010242:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010246:	3301      	adds	r3, #1
 8010248:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801024c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801024e:	881b      	ldrh	r3, [r3, #0]
 8010250:	b29a      	uxth	r2, r3
 8010252:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010256:	b29b      	uxth	r3, r3
 8010258:	029b      	lsls	r3, r3, #10
 801025a:	b29b      	uxth	r3, r3
 801025c:	4313      	orrs	r3, r2
 801025e:	b29a      	uxth	r2, r3
 8010260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010262:	801a      	strh	r2, [r3, #0]
 8010264:	e030      	b.n	80102c8 <USB_EPStartXfer+0xcfa>
 8010266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801026a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	785b      	ldrb	r3, [r3, #1]
 8010272:	2b01      	cmp	r3, #1
 8010274:	d128      	bne.n	80102c8 <USB_EPStartXfer+0xcfa>
 8010276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801027a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010288:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010292:	b29b      	uxth	r3, r3
 8010294:	461a      	mov	r2, r3
 8010296:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801029a:	4413      	add	r3, r2
 801029c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80102a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	00da      	lsls	r2, r3, #3
 80102ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80102b2:	4413      	add	r3, r2
 80102b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80102b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80102bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102c0:	b29a      	uxth	r2, r3
 80102c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80102c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80102c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	891b      	ldrh	r3, [r3, #8]
 80102d4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80102d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	6959      	ldr	r1, [r3, #20]
 80102e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102e8:	b29b      	uxth	r3, r3
 80102ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80102ee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80102f2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80102f6:	6800      	ldr	r0, [r0, #0]
 80102f8:	f000 fe75 	bl	8010fe6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80102fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010304:	681a      	ldr	r2, [r3, #0]
 8010306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801030a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	009b      	lsls	r3, r3, #2
 8010314:	4413      	add	r3, r2
 8010316:	881b      	ldrh	r3, [r3, #0]
 8010318:	b29b      	uxth	r3, r3
 801031a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801031e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010322:	817b      	strh	r3, [r7, #10]
 8010324:	897b      	ldrh	r3, [r7, #10]
 8010326:	f083 0310 	eor.w	r3, r3, #16
 801032a:	817b      	strh	r3, [r7, #10]
 801032c:	897b      	ldrh	r3, [r7, #10]
 801032e:	f083 0320 	eor.w	r3, r3, #32
 8010332:	817b      	strh	r3, [r7, #10]
 8010334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010338:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801033c:	681a      	ldr	r2, [r3, #0]
 801033e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	009b      	lsls	r3, r3, #2
 801034c:	441a      	add	r2, r3
 801034e:	897b      	ldrh	r3, [r7, #10]
 8010350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801035c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010360:	b29b      	uxth	r3, r3
 8010362:	8013      	strh	r3, [r2, #0]
 8010364:	f000 bcde 	b.w	8010d24 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8010368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801036c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	7b1b      	ldrb	r3, [r3, #12]
 8010374:	2b00      	cmp	r3, #0
 8010376:	f040 80bb 	bne.w	80104f0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801037a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801037e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	699a      	ldr	r2, [r3, #24]
 8010386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801038a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	691b      	ldr	r3, [r3, #16]
 8010392:	429a      	cmp	r2, r3
 8010394:	d917      	bls.n	80103c6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8010396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801039a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	691b      	ldr	r3, [r3, #16]
 80103a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80103a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	699a      	ldr	r2, [r3, #24]
 80103b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103b6:	1ad2      	subs	r2, r2, r3
 80103b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	619a      	str	r2, [r3, #24]
 80103c4:	e00e      	b.n	80103e4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80103c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	699b      	ldr	r3, [r3, #24]
 80103d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80103d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	2200      	movs	r2, #0
 80103e2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80103e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80103f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010400:	b29b      	uxth	r3, r3
 8010402:	461a      	mov	r2, r3
 8010404:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010408:	4413      	add	r3, r2
 801040a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801040e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	00da      	lsls	r2, r3, #3
 801041c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010420:	4413      	add	r3, r2
 8010422:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801042a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801042e:	881b      	ldrh	r3, [r3, #0]
 8010430:	b29b      	uxth	r3, r3
 8010432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010436:	b29a      	uxth	r2, r3
 8010438:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801043c:	801a      	strh	r2, [r3, #0]
 801043e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010442:	2b3e      	cmp	r3, #62	; 0x3e
 8010444:	d924      	bls.n	8010490 <USB_EPStartXfer+0xec2>
 8010446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801044a:	095b      	lsrs	r3, r3, #5
 801044c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010454:	f003 031f 	and.w	r3, r3, #31
 8010458:	2b00      	cmp	r3, #0
 801045a:	d104      	bne.n	8010466 <USB_EPStartXfer+0xe98>
 801045c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010460:	3b01      	subs	r3, #1
 8010462:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801046a:	881b      	ldrh	r3, [r3, #0]
 801046c:	b29a      	uxth	r2, r3
 801046e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010472:	b29b      	uxth	r3, r3
 8010474:	029b      	lsls	r3, r3, #10
 8010476:	b29b      	uxth	r3, r3
 8010478:	4313      	orrs	r3, r2
 801047a:	b29b      	uxth	r3, r3
 801047c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010484:	b29a      	uxth	r2, r3
 8010486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801048a:	801a      	strh	r2, [r3, #0]
 801048c:	f000 bc10 	b.w	8010cb0 <USB_EPStartXfer+0x16e2>
 8010490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010494:	2b00      	cmp	r3, #0
 8010496:	d10c      	bne.n	80104b2 <USB_EPStartXfer+0xee4>
 8010498:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801049c:	881b      	ldrh	r3, [r3, #0]
 801049e:	b29b      	uxth	r3, r3
 80104a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80104a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80104ae:	801a      	strh	r2, [r3, #0]
 80104b0:	e3fe      	b.n	8010cb0 <USB_EPStartXfer+0x16e2>
 80104b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104b6:	085b      	lsrs	r3, r3, #1
 80104b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80104bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104c0:	f003 0301 	and.w	r3, r3, #1
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d004      	beq.n	80104d2 <USB_EPStartXfer+0xf04>
 80104c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80104cc:	3301      	adds	r3, #1
 80104ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80104d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80104d6:	881b      	ldrh	r3, [r3, #0]
 80104d8:	b29a      	uxth	r2, r3
 80104da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80104de:	b29b      	uxth	r3, r3
 80104e0:	029b      	lsls	r3, r3, #10
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	4313      	orrs	r3, r2
 80104e6:	b29a      	uxth	r2, r3
 80104e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80104ec:	801a      	strh	r2, [r3, #0]
 80104ee:	e3df      	b.n	8010cb0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80104f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	78db      	ldrb	r3, [r3, #3]
 80104fc:	2b02      	cmp	r3, #2
 80104fe:	f040 8218 	bne.w	8010932 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8010502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	785b      	ldrb	r3, [r3, #1]
 801050e:	2b00      	cmp	r3, #0
 8010510:	f040 809d 	bne.w	801064e <USB_EPStartXfer+0x1080>
 8010514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010518:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010530:	b29b      	uxth	r3, r3
 8010532:	461a      	mov	r2, r3
 8010534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010538:	4413      	add	r3, r2
 801053a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801053e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	00da      	lsls	r2, r3, #3
 801054c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010550:	4413      	add	r3, r2
 8010552:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010556:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801055a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801055e:	881b      	ldrh	r3, [r3, #0]
 8010560:	b29b      	uxth	r3, r3
 8010562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010566:	b29a      	uxth	r2, r3
 8010568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801056c:	801a      	strh	r2, [r3, #0]
 801056e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	691b      	ldr	r3, [r3, #16]
 801057a:	2b3e      	cmp	r3, #62	; 0x3e
 801057c:	d92b      	bls.n	80105d6 <USB_EPStartXfer+0x1008>
 801057e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	691b      	ldr	r3, [r3, #16]
 801058a:	095b      	lsrs	r3, r3, #5
 801058c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	691b      	ldr	r3, [r3, #16]
 801059c:	f003 031f 	and.w	r3, r3, #31
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d104      	bne.n	80105ae <USB_EPStartXfer+0xfe0>
 80105a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105a8:	3b01      	subs	r3, #1
 80105aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80105ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80105b2:	881b      	ldrh	r3, [r3, #0]
 80105b4:	b29a      	uxth	r2, r3
 80105b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	029b      	lsls	r3, r3, #10
 80105be:	b29b      	uxth	r3, r3
 80105c0:	4313      	orrs	r3, r2
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80105c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80105d2:	801a      	strh	r2, [r3, #0]
 80105d4:	e070      	b.n	80106b8 <USB_EPStartXfer+0x10ea>
 80105d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	691b      	ldr	r3, [r3, #16]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d10c      	bne.n	8010600 <USB_EPStartXfer+0x1032>
 80105e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80105ea:	881b      	ldrh	r3, [r3, #0]
 80105ec:	b29b      	uxth	r3, r3
 80105ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80105f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80105f6:	b29a      	uxth	r2, r3
 80105f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80105fc:	801a      	strh	r2, [r3, #0]
 80105fe:	e05b      	b.n	80106b8 <USB_EPStartXfer+0x10ea>
 8010600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	691b      	ldr	r3, [r3, #16]
 801060c:	085b      	lsrs	r3, r3, #1
 801060e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	691b      	ldr	r3, [r3, #16]
 801061e:	f003 0301 	and.w	r3, r3, #1
 8010622:	2b00      	cmp	r3, #0
 8010624:	d004      	beq.n	8010630 <USB_EPStartXfer+0x1062>
 8010626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801062a:	3301      	adds	r3, #1
 801062c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010630:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010634:	881b      	ldrh	r3, [r3, #0]
 8010636:	b29a      	uxth	r2, r3
 8010638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801063c:	b29b      	uxth	r3, r3
 801063e:	029b      	lsls	r3, r3, #10
 8010640:	b29b      	uxth	r3, r3
 8010642:	4313      	orrs	r3, r2
 8010644:	b29a      	uxth	r2, r3
 8010646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801064a:	801a      	strh	r2, [r3, #0]
 801064c:	e034      	b.n	80106b8 <USB_EPStartXfer+0x10ea>
 801064e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	785b      	ldrb	r3, [r3, #1]
 801065a:	2b01      	cmp	r3, #1
 801065c:	d12c      	bne.n	80106b8 <USB_EPStartXfer+0x10ea>
 801065e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010662:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801066c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010670:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801067a:	b29b      	uxth	r3, r3
 801067c:	461a      	mov	r2, r3
 801067e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010682:	4413      	add	r3, r2
 8010684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801068c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	00da      	lsls	r2, r3, #3
 8010696:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801069a:	4413      	add	r3, r2
 801069c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80106a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80106a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	691b      	ldr	r3, [r3, #16]
 80106b0:	b29a      	uxth	r2, r3
 80106b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80106b6:	801a      	strh	r2, [r3, #0]
 80106b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80106c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	785b      	ldrb	r3, [r3, #1]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	f040 809d 	bne.w	8010812 <USB_EPStartXfer+0x1244>
 80106d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80106e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80106f4:	b29b      	uxth	r3, r3
 80106f6:	461a      	mov	r2, r3
 80106f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80106fc:	4413      	add	r3, r2
 80106fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	781b      	ldrb	r3, [r3, #0]
 801070e:	00da      	lsls	r2, r3, #3
 8010710:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010714:	4413      	add	r3, r2
 8010716:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801071a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801071e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010722:	881b      	ldrh	r3, [r3, #0]
 8010724:	b29b      	uxth	r3, r3
 8010726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801072a:	b29a      	uxth	r2, r3
 801072c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010730:	801a      	strh	r2, [r3, #0]
 8010732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	691b      	ldr	r3, [r3, #16]
 801073e:	2b3e      	cmp	r3, #62	; 0x3e
 8010740:	d92b      	bls.n	801079a <USB_EPStartXfer+0x11cc>
 8010742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	691b      	ldr	r3, [r3, #16]
 801074e:	095b      	lsrs	r3, r3, #5
 8010750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	691b      	ldr	r3, [r3, #16]
 8010760:	f003 031f 	and.w	r3, r3, #31
 8010764:	2b00      	cmp	r3, #0
 8010766:	d104      	bne.n	8010772 <USB_EPStartXfer+0x11a4>
 8010768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801076c:	3b01      	subs	r3, #1
 801076e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010772:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010776:	881b      	ldrh	r3, [r3, #0]
 8010778:	b29a      	uxth	r2, r3
 801077a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801077e:	b29b      	uxth	r3, r3
 8010780:	029b      	lsls	r3, r3, #10
 8010782:	b29b      	uxth	r3, r3
 8010784:	4313      	orrs	r3, r2
 8010786:	b29b      	uxth	r3, r3
 8010788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801078c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010790:	b29a      	uxth	r2, r3
 8010792:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010796:	801a      	strh	r2, [r3, #0]
 8010798:	e069      	b.n	801086e <USB_EPStartXfer+0x12a0>
 801079a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801079e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	691b      	ldr	r3, [r3, #16]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d10c      	bne.n	80107c4 <USB_EPStartXfer+0x11f6>
 80107aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80107ae:	881b      	ldrh	r3, [r3, #0]
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80107b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80107ba:	b29a      	uxth	r2, r3
 80107bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80107c0:	801a      	strh	r2, [r3, #0]
 80107c2:	e054      	b.n	801086e <USB_EPStartXfer+0x12a0>
 80107c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	691b      	ldr	r3, [r3, #16]
 80107d0:	085b      	lsrs	r3, r3, #1
 80107d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80107d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	691b      	ldr	r3, [r3, #16]
 80107e2:	f003 0301 	and.w	r3, r3, #1
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d004      	beq.n	80107f4 <USB_EPStartXfer+0x1226>
 80107ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107ee:	3301      	adds	r3, #1
 80107f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80107f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80107f8:	881b      	ldrh	r3, [r3, #0]
 80107fa:	b29a      	uxth	r2, r3
 80107fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010800:	b29b      	uxth	r3, r3
 8010802:	029b      	lsls	r3, r3, #10
 8010804:	b29b      	uxth	r3, r3
 8010806:	4313      	orrs	r3, r2
 8010808:	b29a      	uxth	r2, r3
 801080a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801080e:	801a      	strh	r2, [r3, #0]
 8010810:	e02d      	b.n	801086e <USB_EPStartXfer+0x12a0>
 8010812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	785b      	ldrb	r3, [r3, #1]
 801081e:	2b01      	cmp	r3, #1
 8010820:	d125      	bne.n	801086e <USB_EPStartXfer+0x12a0>
 8010822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010830:	b29b      	uxth	r3, r3
 8010832:	461a      	mov	r2, r3
 8010834:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010838:	4413      	add	r3, r2
 801083a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801083e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	00da      	lsls	r2, r3, #3
 801084c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010850:	4413      	add	r3, r2
 8010852:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010856:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801085a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801085e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	691b      	ldr	r3, [r3, #16]
 8010866:	b29a      	uxth	r2, r3
 8010868:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801086c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801086e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	69db      	ldr	r3, [r3, #28]
 801087a:	2b00      	cmp	r3, #0
 801087c:	f000 8218 	beq.w	8010cb0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8010880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801088e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	781b      	ldrb	r3, [r3, #0]
 8010896:	009b      	lsls	r3, r3, #2
 8010898:	4413      	add	r3, r2
 801089a:	881b      	ldrh	r3, [r3, #0]
 801089c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80108a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80108a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d005      	beq.n	80108b8 <USB_EPStartXfer+0x12ea>
 80108ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80108b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d10d      	bne.n	80108d4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80108b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80108bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	f040 81f5 	bne.w	8010cb0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80108c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80108ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	f040 81ee 	bne.w	8010cb0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80108d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	781b      	ldrb	r3, [r3, #0]
 80108ea:	009b      	lsls	r3, r3, #2
 80108ec:	4413      	add	r3, r2
 80108ee:	881b      	ldrh	r3, [r3, #0]
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80108f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108fa:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80108fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010902:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010906:	681a      	ldr	r2, [r3, #0]
 8010908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801090c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	781b      	ldrb	r3, [r3, #0]
 8010914:	009b      	lsls	r3, r3, #2
 8010916:	441a      	add	r2, r3
 8010918:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 801091c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010928:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801092c:	b29b      	uxth	r3, r3
 801092e:	8013      	strh	r3, [r2, #0]
 8010930:	e1be      	b.n	8010cb0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8010932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	78db      	ldrb	r3, [r3, #3]
 801093e:	2b01      	cmp	r3, #1
 8010940:	f040 81b4 	bne.w	8010cac <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8010944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	699a      	ldr	r2, [r3, #24]
 8010950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	691b      	ldr	r3, [r3, #16]
 801095c:	429a      	cmp	r2, r3
 801095e:	d917      	bls.n	8010990 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8010960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	691b      	ldr	r3, [r3, #16]
 801096c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8010970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	699a      	ldr	r2, [r3, #24]
 801097c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010980:	1ad2      	subs	r2, r2, r3
 8010982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	619a      	str	r2, [r3, #24]
 801098e:	e00e      	b.n	80109ae <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8010990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	699b      	ldr	r3, [r3, #24]
 801099c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80109a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	2200      	movs	r2, #0
 80109ac:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80109ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	785b      	ldrb	r3, [r3, #1]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	f040 8085 	bne.w	8010aca <USB_EPStartXfer+0x14fc>
 80109c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80109ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80109dc:	b29b      	uxth	r3, r3
 80109de:	461a      	mov	r2, r3
 80109e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80109e4:	4413      	add	r3, r2
 80109e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80109ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	781b      	ldrb	r3, [r3, #0]
 80109f6:	00da      	lsls	r2, r3, #3
 80109f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80109fc:	4413      	add	r3, r2
 80109fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010a02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010a06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a0a:	881b      	ldrh	r3, [r3, #0]
 8010a0c:	b29b      	uxth	r3, r3
 8010a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010a12:	b29a      	uxth	r2, r3
 8010a14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a18:	801a      	strh	r2, [r3, #0]
 8010a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a1e:	2b3e      	cmp	r3, #62	; 0x3e
 8010a20:	d923      	bls.n	8010a6a <USB_EPStartXfer+0x149c>
 8010a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a26:	095b      	lsrs	r3, r3, #5
 8010a28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a30:	f003 031f 	and.w	r3, r3, #31
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d104      	bne.n	8010a42 <USB_EPStartXfer+0x1474>
 8010a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010a3c:	3b01      	subs	r3, #1
 8010a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010a42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a46:	881b      	ldrh	r3, [r3, #0]
 8010a48:	b29a      	uxth	r2, r3
 8010a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	029b      	lsls	r3, r3, #10
 8010a52:	b29b      	uxth	r3, r3
 8010a54:	4313      	orrs	r3, r2
 8010a56:	b29b      	uxth	r3, r3
 8010a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a60:	b29a      	uxth	r2, r3
 8010a62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a66:	801a      	strh	r2, [r3, #0]
 8010a68:	e060      	b.n	8010b2c <USB_EPStartXfer+0x155e>
 8010a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d10c      	bne.n	8010a8c <USB_EPStartXfer+0x14be>
 8010a72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a76:	881b      	ldrh	r3, [r3, #0]
 8010a78:	b29b      	uxth	r3, r3
 8010a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a82:	b29a      	uxth	r2, r3
 8010a84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a88:	801a      	strh	r2, [r3, #0]
 8010a8a:	e04f      	b.n	8010b2c <USB_EPStartXfer+0x155e>
 8010a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a90:	085b      	lsrs	r3, r3, #1
 8010a92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a9a:	f003 0301 	and.w	r3, r3, #1
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d004      	beq.n	8010aac <USB_EPStartXfer+0x14de>
 8010aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010aa6:	3301      	adds	r3, #1
 8010aa8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010aac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010ab0:	881b      	ldrh	r3, [r3, #0]
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010ab8:	b29b      	uxth	r3, r3
 8010aba:	029b      	lsls	r3, r3, #10
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	4313      	orrs	r3, r2
 8010ac0:	b29a      	uxth	r2, r3
 8010ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010ac6:	801a      	strh	r2, [r3, #0]
 8010ac8:	e030      	b.n	8010b2c <USB_EPStartXfer+0x155e>
 8010aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	785b      	ldrb	r3, [r3, #1]
 8010ad6:	2b01      	cmp	r3, #1
 8010ad8:	d128      	bne.n	8010b2c <USB_EPStartXfer+0x155e>
 8010ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010af6:	b29b      	uxth	r3, r3
 8010af8:	461a      	mov	r2, r3
 8010afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010afe:	4413      	add	r3, r2
 8010b00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	00da      	lsls	r2, r3, #3
 8010b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010b16:	4413      	add	r3, r2
 8010b18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b24:	b29a      	uxth	r2, r3
 8010b26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010b2a:	801a      	strh	r2, [r3, #0]
 8010b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	785b      	ldrb	r3, [r3, #1]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	f040 8085 	bne.w	8010c56 <USB_EPStartXfer+0x1688>
 8010b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	461a      	mov	r2, r3
 8010b6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010b70:	4413      	add	r3, r2
 8010b72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	781b      	ldrb	r3, [r3, #0]
 8010b82:	00da      	lsls	r2, r3, #3
 8010b84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010b88:	4413      	add	r3, r2
 8010b8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010b8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010b92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010b96:	881b      	ldrh	r3, [r3, #0]
 8010b98:	b29b      	uxth	r3, r3
 8010b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010b9e:	b29a      	uxth	r2, r3
 8010ba0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010ba4:	801a      	strh	r2, [r3, #0]
 8010ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010baa:	2b3e      	cmp	r3, #62	; 0x3e
 8010bac:	d923      	bls.n	8010bf6 <USB_EPStartXfer+0x1628>
 8010bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bb2:	095b      	lsrs	r3, r3, #5
 8010bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bbc:	f003 031f 	and.w	r3, r3, #31
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d104      	bne.n	8010bce <USB_EPStartXfer+0x1600>
 8010bc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010bc8:	3b01      	subs	r3, #1
 8010bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010bce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010bd2:	881b      	ldrh	r3, [r3, #0]
 8010bd4:	b29a      	uxth	r2, r3
 8010bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	029b      	lsls	r3, r3, #10
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	4313      	orrs	r3, r2
 8010be2:	b29b      	uxth	r3, r3
 8010be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010bec:	b29a      	uxth	r2, r3
 8010bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010bf2:	801a      	strh	r2, [r3, #0]
 8010bf4:	e05c      	b.n	8010cb0 <USB_EPStartXfer+0x16e2>
 8010bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d10c      	bne.n	8010c18 <USB_EPStartXfer+0x164a>
 8010bfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010c02:	881b      	ldrh	r3, [r3, #0]
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010c0e:	b29a      	uxth	r2, r3
 8010c10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010c14:	801a      	strh	r2, [r3, #0]
 8010c16:	e04b      	b.n	8010cb0 <USB_EPStartXfer+0x16e2>
 8010c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c1c:	085b      	lsrs	r3, r3, #1
 8010c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c26:	f003 0301 	and.w	r3, r3, #1
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d004      	beq.n	8010c38 <USB_EPStartXfer+0x166a>
 8010c2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010c32:	3301      	adds	r3, #1
 8010c34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010c38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010c3c:	881b      	ldrh	r3, [r3, #0]
 8010c3e:	b29a      	uxth	r2, r3
 8010c40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	029b      	lsls	r3, r3, #10
 8010c48:	b29b      	uxth	r3, r3
 8010c4a:	4313      	orrs	r3, r2
 8010c4c:	b29a      	uxth	r2, r3
 8010c4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010c52:	801a      	strh	r2, [r3, #0]
 8010c54:	e02c      	b.n	8010cb0 <USB_EPStartXfer+0x16e2>
 8010c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	785b      	ldrb	r3, [r3, #1]
 8010c62:	2b01      	cmp	r3, #1
 8010c64:	d124      	bne.n	8010cb0 <USB_EPStartXfer+0x16e2>
 8010c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010c74:	b29b      	uxth	r3, r3
 8010c76:	461a      	mov	r2, r3
 8010c78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010c7c:	4413      	add	r3, r2
 8010c7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	781b      	ldrb	r3, [r3, #0]
 8010c8e:	00da      	lsls	r2, r3, #3
 8010c90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010c94:	4413      	add	r3, r2
 8010c96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ca2:	b29a      	uxth	r2, r3
 8010ca4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010ca8:	801a      	strh	r2, [r3, #0]
 8010caa:	e001      	b.n	8010cb0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8010cac:	2301      	movs	r3, #1
 8010cae:	e03a      	b.n	8010d26 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cb8:	681a      	ldr	r2, [r3, #0]
 8010cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	781b      	ldrb	r3, [r3, #0]
 8010cc6:	009b      	lsls	r3, r3, #2
 8010cc8:	4413      	add	r3, r2
 8010cca:	881b      	ldrh	r3, [r3, #0]
 8010ccc:	b29b      	uxth	r3, r3
 8010cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010cd6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010cda:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010cde:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010ce2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010ce6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010cea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010cee:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cfa:	681a      	ldr	r2, [r3, #0]
 8010cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	009b      	lsls	r3, r3, #2
 8010d0a:	441a      	add	r2, r3
 8010d0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010d24:	2300      	movs	r3, #0
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}

08010d30 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010d30:	b480      	push	{r7}
 8010d32:	b085      	sub	sp, #20
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	785b      	ldrb	r3, [r3, #1]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d020      	beq.n	8010d84 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8010d42:	687a      	ldr	r2, [r7, #4]
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	009b      	lsls	r3, r3, #2
 8010d4a:	4413      	add	r3, r2
 8010d4c:	881b      	ldrh	r3, [r3, #0]
 8010d4e:	b29b      	uxth	r3, r3
 8010d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d58:	81bb      	strh	r3, [r7, #12]
 8010d5a:	89bb      	ldrh	r3, [r7, #12]
 8010d5c:	f083 0310 	eor.w	r3, r3, #16
 8010d60:	81bb      	strh	r3, [r7, #12]
 8010d62:	687a      	ldr	r2, [r7, #4]
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	781b      	ldrb	r3, [r3, #0]
 8010d68:	009b      	lsls	r3, r3, #2
 8010d6a:	441a      	add	r2, r3
 8010d6c:	89bb      	ldrh	r3, [r7, #12]
 8010d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d7e:	b29b      	uxth	r3, r3
 8010d80:	8013      	strh	r3, [r2, #0]
 8010d82:	e01f      	b.n	8010dc4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8010d84:	687a      	ldr	r2, [r7, #4]
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	009b      	lsls	r3, r3, #2
 8010d8c:	4413      	add	r3, r2
 8010d8e:	881b      	ldrh	r3, [r3, #0]
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d9a:	81fb      	strh	r3, [r7, #14]
 8010d9c:	89fb      	ldrh	r3, [r7, #14]
 8010d9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010da2:	81fb      	strh	r3, [r7, #14]
 8010da4:	687a      	ldr	r2, [r7, #4]
 8010da6:	683b      	ldr	r3, [r7, #0]
 8010da8:	781b      	ldrb	r3, [r3, #0]
 8010daa:	009b      	lsls	r3, r3, #2
 8010dac:	441a      	add	r2, r3
 8010dae:	89fb      	ldrh	r3, [r7, #14]
 8010db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dc0:	b29b      	uxth	r3, r3
 8010dc2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010dc4:	2300      	movs	r3, #0
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3714      	adds	r7, #20
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd0:	4770      	bx	lr

08010dd2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010dd2:	b480      	push	{r7}
 8010dd4:	b087      	sub	sp, #28
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
 8010dda:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	7b1b      	ldrb	r3, [r3, #12]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	f040 809d 	bne.w	8010f20 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	785b      	ldrb	r3, [r3, #1]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d04c      	beq.n	8010e88 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010dee:	687a      	ldr	r2, [r7, #4]
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	781b      	ldrb	r3, [r3, #0]
 8010df4:	009b      	lsls	r3, r3, #2
 8010df6:	4413      	add	r3, r2
 8010df8:	881b      	ldrh	r3, [r3, #0]
 8010dfa:	823b      	strh	r3, [r7, #16]
 8010dfc:	8a3b      	ldrh	r3, [r7, #16]
 8010dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d01b      	beq.n	8010e3e <USB_EPClearStall+0x6c>
 8010e06:	687a      	ldr	r2, [r7, #4]
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	009b      	lsls	r3, r3, #2
 8010e0e:	4413      	add	r3, r2
 8010e10:	881b      	ldrh	r3, [r3, #0]
 8010e12:	b29b      	uxth	r3, r3
 8010e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e1c:	81fb      	strh	r3, [r7, #14]
 8010e1e:	687a      	ldr	r2, [r7, #4]
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	009b      	lsls	r3, r3, #2
 8010e26:	441a      	add	r2, r3
 8010e28:	89fb      	ldrh	r3, [r7, #14]
 8010e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010e3a:	b29b      	uxth	r3, r3
 8010e3c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	78db      	ldrb	r3, [r3, #3]
 8010e42:	2b01      	cmp	r3, #1
 8010e44:	d06c      	beq.n	8010f20 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010e46:	687a      	ldr	r2, [r7, #4]
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	781b      	ldrb	r3, [r3, #0]
 8010e4c:	009b      	lsls	r3, r3, #2
 8010e4e:	4413      	add	r3, r2
 8010e50:	881b      	ldrh	r3, [r3, #0]
 8010e52:	b29b      	uxth	r3, r3
 8010e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e5c:	81bb      	strh	r3, [r7, #12]
 8010e5e:	89bb      	ldrh	r3, [r7, #12]
 8010e60:	f083 0320 	eor.w	r3, r3, #32
 8010e64:	81bb      	strh	r3, [r7, #12]
 8010e66:	687a      	ldr	r2, [r7, #4]
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	781b      	ldrb	r3, [r3, #0]
 8010e6c:	009b      	lsls	r3, r3, #2
 8010e6e:	441a      	add	r2, r3
 8010e70:	89bb      	ldrh	r3, [r7, #12]
 8010e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e82:	b29b      	uxth	r3, r3
 8010e84:	8013      	strh	r3, [r2, #0]
 8010e86:	e04b      	b.n	8010f20 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010e88:	687a      	ldr	r2, [r7, #4]
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	781b      	ldrb	r3, [r3, #0]
 8010e8e:	009b      	lsls	r3, r3, #2
 8010e90:	4413      	add	r3, r2
 8010e92:	881b      	ldrh	r3, [r3, #0]
 8010e94:	82fb      	strh	r3, [r7, #22]
 8010e96:	8afb      	ldrh	r3, [r7, #22]
 8010e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d01b      	beq.n	8010ed8 <USB_EPClearStall+0x106>
 8010ea0:	687a      	ldr	r2, [r7, #4]
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	009b      	lsls	r3, r3, #2
 8010ea8:	4413      	add	r3, r2
 8010eaa:	881b      	ldrh	r3, [r3, #0]
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010eb6:	82bb      	strh	r3, [r7, #20]
 8010eb8:	687a      	ldr	r2, [r7, #4]
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	009b      	lsls	r3, r3, #2
 8010ec0:	441a      	add	r2, r3
 8010ec2:	8abb      	ldrh	r3, [r7, #20]
 8010ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ecc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010ed8:	687a      	ldr	r2, [r7, #4]
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	781b      	ldrb	r3, [r3, #0]
 8010ede:	009b      	lsls	r3, r3, #2
 8010ee0:	4413      	add	r3, r2
 8010ee2:	881b      	ldrh	r3, [r3, #0]
 8010ee4:	b29b      	uxth	r3, r3
 8010ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010eee:	827b      	strh	r3, [r7, #18]
 8010ef0:	8a7b      	ldrh	r3, [r7, #18]
 8010ef2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010ef6:	827b      	strh	r3, [r7, #18]
 8010ef8:	8a7b      	ldrh	r3, [r7, #18]
 8010efa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010efe:	827b      	strh	r3, [r7, #18]
 8010f00:	687a      	ldr	r2, [r7, #4]
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	009b      	lsls	r3, r3, #2
 8010f08:	441a      	add	r2, r3
 8010f0a:	8a7b      	ldrh	r3, [r7, #18]
 8010f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f1c:	b29b      	uxth	r3, r3
 8010f1e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8010f20:	2300      	movs	r3, #0
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	371c      	adds	r7, #28
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr

08010f2e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8010f2e:	b480      	push	{r7}
 8010f30:	b083      	sub	sp, #12
 8010f32:	af00      	add	r7, sp, #0
 8010f34:	6078      	str	r0, [r7, #4]
 8010f36:	460b      	mov	r3, r1
 8010f38:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8010f3a:	78fb      	ldrb	r3, [r7, #3]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d103      	bne.n	8010f48 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2280      	movs	r2, #128	; 0x80
 8010f44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8010f48:	2300      	movs	r3, #0
}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	370c      	adds	r7, #12
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f54:	4770      	bx	lr

08010f56 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8010f56:	b480      	push	{r7}
 8010f58:	b083      	sub	sp, #12
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f6e:	b29a      	uxth	r2, r3
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8010f76:	2300      	movs	r3, #0
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	370c      	adds	r7, #12
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f82:	4770      	bx	lr

08010f84 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8010f84:	b480      	push	{r7}
 8010f86:	b083      	sub	sp, #12
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010f92:	b29b      	uxth	r3, r3
 8010f94:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010f98:	b29a      	uxth	r2, r3
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8010fa0:	2300      	movs	r3, #0
}
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	370c      	adds	r7, #12
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fac:	4770      	bx	lr

08010fae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8010fae:	b480      	push	{r7}
 8010fb0:	b085      	sub	sp, #20
 8010fb2:	af00      	add	r7, sp, #0
 8010fb4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010fbc:	b29b      	uxth	r3, r3
 8010fbe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3714      	adds	r7, #20
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fcc:	4770      	bx	lr

08010fce <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8010fce:	b480      	push	{r7}
 8010fd0:	b083      	sub	sp, #12
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	6078      	str	r0, [r7, #4]
 8010fd6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8010fd8:	2300      	movs	r3, #0
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	370c      	adds	r7, #12
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe4:	4770      	bx	lr

08010fe6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010fe6:	b480      	push	{r7}
 8010fe8:	b08b      	sub	sp, #44	; 0x2c
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	60f8      	str	r0, [r7, #12]
 8010fee:	60b9      	str	r1, [r7, #8]
 8010ff0:	4611      	mov	r1, r2
 8010ff2:	461a      	mov	r2, r3
 8010ff4:	460b      	mov	r3, r1
 8010ff6:	80fb      	strh	r3, [r7, #6]
 8010ff8:	4613      	mov	r3, r2
 8010ffa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8010ffc:	88bb      	ldrh	r3, [r7, #4]
 8010ffe:	3301      	adds	r3, #1
 8011000:	085b      	lsrs	r3, r3, #1
 8011002:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801100c:	88fa      	ldrh	r2, [r7, #6]
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	4413      	add	r3, r2
 8011012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011016:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011018:	69bb      	ldr	r3, [r7, #24]
 801101a:	627b      	str	r3, [r7, #36]	; 0x24
 801101c:	e01b      	b.n	8011056 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 801101e:	69fb      	ldr	r3, [r7, #28]
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8011024:	69fb      	ldr	r3, [r7, #28]
 8011026:	3301      	adds	r3, #1
 8011028:	781b      	ldrb	r3, [r3, #0]
 801102a:	021b      	lsls	r3, r3, #8
 801102c:	b21a      	sxth	r2, r3
 801102e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011032:	4313      	orrs	r3, r2
 8011034:	b21b      	sxth	r3, r3
 8011036:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011038:	6a3b      	ldr	r3, [r7, #32]
 801103a:	8a7a      	ldrh	r2, [r7, #18]
 801103c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801103e:	6a3b      	ldr	r3, [r7, #32]
 8011040:	3302      	adds	r3, #2
 8011042:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8011044:	69fb      	ldr	r3, [r7, #28]
 8011046:	3301      	adds	r3, #1
 8011048:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801104a:	69fb      	ldr	r3, [r7, #28]
 801104c:	3301      	adds	r3, #1
 801104e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011052:	3b01      	subs	r3, #1
 8011054:	627b      	str	r3, [r7, #36]	; 0x24
 8011056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011058:	2b00      	cmp	r3, #0
 801105a:	d1e0      	bne.n	801101e <USB_WritePMA+0x38>
  }
}
 801105c:	bf00      	nop
 801105e:	bf00      	nop
 8011060:	372c      	adds	r7, #44	; 0x2c
 8011062:	46bd      	mov	sp, r7
 8011064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011068:	4770      	bx	lr

0801106a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801106a:	b480      	push	{r7}
 801106c:	b08b      	sub	sp, #44	; 0x2c
 801106e:	af00      	add	r7, sp, #0
 8011070:	60f8      	str	r0, [r7, #12]
 8011072:	60b9      	str	r1, [r7, #8]
 8011074:	4611      	mov	r1, r2
 8011076:	461a      	mov	r2, r3
 8011078:	460b      	mov	r3, r1
 801107a:	80fb      	strh	r3, [r7, #6]
 801107c:	4613      	mov	r3, r2
 801107e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8011080:	88bb      	ldrh	r3, [r7, #4]
 8011082:	085b      	lsrs	r3, r3, #1
 8011084:	b29b      	uxth	r3, r3
 8011086:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011090:	88fa      	ldrh	r2, [r7, #6]
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	4413      	add	r3, r2
 8011096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801109a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801109c:	69bb      	ldr	r3, [r7, #24]
 801109e:	627b      	str	r3, [r7, #36]	; 0x24
 80110a0:	e018      	b.n	80110d4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80110a2:	6a3b      	ldr	r3, [r7, #32]
 80110a4:	881b      	ldrh	r3, [r3, #0]
 80110a6:	b29b      	uxth	r3, r3
 80110a8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80110aa:	6a3b      	ldr	r3, [r7, #32]
 80110ac:	3302      	adds	r3, #2
 80110ae:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	b2da      	uxtb	r2, r3
 80110b4:	69fb      	ldr	r3, [r7, #28]
 80110b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80110b8:	69fb      	ldr	r3, [r7, #28]
 80110ba:	3301      	adds	r3, #1
 80110bc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	0a1b      	lsrs	r3, r3, #8
 80110c2:	b2da      	uxtb	r2, r3
 80110c4:	69fb      	ldr	r3, [r7, #28]
 80110c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80110c8:	69fb      	ldr	r3, [r7, #28]
 80110ca:	3301      	adds	r3, #1
 80110cc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80110ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d0:	3b01      	subs	r3, #1
 80110d2:	627b      	str	r3, [r7, #36]	; 0x24
 80110d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d1e3      	bne.n	80110a2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80110da:	88bb      	ldrh	r3, [r7, #4]
 80110dc:	f003 0301 	and.w	r3, r3, #1
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d007      	beq.n	80110f6 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80110e6:	6a3b      	ldr	r3, [r7, #32]
 80110e8:	881b      	ldrh	r3, [r3, #0]
 80110ea:	b29b      	uxth	r3, r3
 80110ec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	b2da      	uxtb	r2, r3
 80110f2:	69fb      	ldr	r3, [r7, #28]
 80110f4:	701a      	strb	r2, [r3, #0]
  }
}
 80110f6:	bf00      	nop
 80110f8:	372c      	adds	r7, #44	; 0x2c
 80110fa:	46bd      	mov	sp, r7
 80110fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011100:	4770      	bx	lr
	...

08011104 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b084      	sub	sp, #16
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	460b      	mov	r3, r1
 801110e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011110:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011114:	f003 fa1a 	bl	801454c <USBD_static_malloc>
 8011118:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d109      	bne.n	8011134 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	32b0      	adds	r2, #176	; 0xb0
 801112a:	2100      	movs	r1, #0
 801112c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011130:	2302      	movs	r3, #2
 8011132:	e0d4      	b.n	80112de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8011134:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8011138:	2100      	movs	r1, #0
 801113a:	68f8      	ldr	r0, [r7, #12]
 801113c:	f005 f9b9 	bl	80164b2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	32b0      	adds	r2, #176	; 0xb0
 801114a:	68f9      	ldr	r1, [r7, #12]
 801114c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	32b0      	adds	r2, #176	; 0xb0
 801115a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	7c1b      	ldrb	r3, [r3, #16]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d138      	bne.n	80111de <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801116c:	4b5e      	ldr	r3, [pc, #376]	; (80112e8 <USBD_CDC_Init+0x1e4>)
 801116e:	7819      	ldrb	r1, [r3, #0]
 8011170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011174:	2202      	movs	r2, #2
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f002 ffea 	bl	8014150 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801117c:	4b5a      	ldr	r3, [pc, #360]	; (80112e8 <USBD_CDC_Init+0x1e4>)
 801117e:	781b      	ldrb	r3, [r3, #0]
 8011180:	f003 020f 	and.w	r2, r3, #15
 8011184:	6879      	ldr	r1, [r7, #4]
 8011186:	4613      	mov	r3, r2
 8011188:	009b      	lsls	r3, r3, #2
 801118a:	4413      	add	r3, r2
 801118c:	009b      	lsls	r3, r3, #2
 801118e:	440b      	add	r3, r1
 8011190:	3324      	adds	r3, #36	; 0x24
 8011192:	2201      	movs	r2, #1
 8011194:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011196:	4b55      	ldr	r3, [pc, #340]	; (80112ec <USBD_CDC_Init+0x1e8>)
 8011198:	7819      	ldrb	r1, [r3, #0]
 801119a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801119e:	2202      	movs	r2, #2
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f002 ffd5 	bl	8014150 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80111a6:	4b51      	ldr	r3, [pc, #324]	; (80112ec <USBD_CDC_Init+0x1e8>)
 80111a8:	781b      	ldrb	r3, [r3, #0]
 80111aa:	f003 020f 	and.w	r2, r3, #15
 80111ae:	6879      	ldr	r1, [r7, #4]
 80111b0:	4613      	mov	r3, r2
 80111b2:	009b      	lsls	r3, r3, #2
 80111b4:	4413      	add	r3, r2
 80111b6:	009b      	lsls	r3, r3, #2
 80111b8:	440b      	add	r3, r1
 80111ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80111be:	2201      	movs	r2, #1
 80111c0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80111c2:	4b4b      	ldr	r3, [pc, #300]	; (80112f0 <USBD_CDC_Init+0x1ec>)
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	f003 020f 	and.w	r2, r3, #15
 80111ca:	6879      	ldr	r1, [r7, #4]
 80111cc:	4613      	mov	r3, r2
 80111ce:	009b      	lsls	r3, r3, #2
 80111d0:	4413      	add	r3, r2
 80111d2:	009b      	lsls	r3, r3, #2
 80111d4:	440b      	add	r3, r1
 80111d6:	3326      	adds	r3, #38	; 0x26
 80111d8:	2210      	movs	r2, #16
 80111da:	801a      	strh	r2, [r3, #0]
 80111dc:	e035      	b.n	801124a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80111de:	4b42      	ldr	r3, [pc, #264]	; (80112e8 <USBD_CDC_Init+0x1e4>)
 80111e0:	7819      	ldrb	r1, [r3, #0]
 80111e2:	2340      	movs	r3, #64	; 0x40
 80111e4:	2202      	movs	r2, #2
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f002 ffb2 	bl	8014150 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80111ec:	4b3e      	ldr	r3, [pc, #248]	; (80112e8 <USBD_CDC_Init+0x1e4>)
 80111ee:	781b      	ldrb	r3, [r3, #0]
 80111f0:	f003 020f 	and.w	r2, r3, #15
 80111f4:	6879      	ldr	r1, [r7, #4]
 80111f6:	4613      	mov	r3, r2
 80111f8:	009b      	lsls	r3, r3, #2
 80111fa:	4413      	add	r3, r2
 80111fc:	009b      	lsls	r3, r3, #2
 80111fe:	440b      	add	r3, r1
 8011200:	3324      	adds	r3, #36	; 0x24
 8011202:	2201      	movs	r2, #1
 8011204:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011206:	4b39      	ldr	r3, [pc, #228]	; (80112ec <USBD_CDC_Init+0x1e8>)
 8011208:	7819      	ldrb	r1, [r3, #0]
 801120a:	2340      	movs	r3, #64	; 0x40
 801120c:	2202      	movs	r2, #2
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f002 ff9e 	bl	8014150 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011214:	4b35      	ldr	r3, [pc, #212]	; (80112ec <USBD_CDC_Init+0x1e8>)
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	f003 020f 	and.w	r2, r3, #15
 801121c:	6879      	ldr	r1, [r7, #4]
 801121e:	4613      	mov	r3, r2
 8011220:	009b      	lsls	r3, r3, #2
 8011222:	4413      	add	r3, r2
 8011224:	009b      	lsls	r3, r3, #2
 8011226:	440b      	add	r3, r1
 8011228:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801122c:	2201      	movs	r2, #1
 801122e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011230:	4b2f      	ldr	r3, [pc, #188]	; (80112f0 <USBD_CDC_Init+0x1ec>)
 8011232:	781b      	ldrb	r3, [r3, #0]
 8011234:	f003 020f 	and.w	r2, r3, #15
 8011238:	6879      	ldr	r1, [r7, #4]
 801123a:	4613      	mov	r3, r2
 801123c:	009b      	lsls	r3, r3, #2
 801123e:	4413      	add	r3, r2
 8011240:	009b      	lsls	r3, r3, #2
 8011242:	440b      	add	r3, r1
 8011244:	3326      	adds	r3, #38	; 0x26
 8011246:	2210      	movs	r2, #16
 8011248:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801124a:	4b29      	ldr	r3, [pc, #164]	; (80112f0 <USBD_CDC_Init+0x1ec>)
 801124c:	7819      	ldrb	r1, [r3, #0]
 801124e:	2308      	movs	r3, #8
 8011250:	2203      	movs	r2, #3
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	f002 ff7c 	bl	8014150 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8011258:	4b25      	ldr	r3, [pc, #148]	; (80112f0 <USBD_CDC_Init+0x1ec>)
 801125a:	781b      	ldrb	r3, [r3, #0]
 801125c:	f003 020f 	and.w	r2, r3, #15
 8011260:	6879      	ldr	r1, [r7, #4]
 8011262:	4613      	mov	r3, r2
 8011264:	009b      	lsls	r3, r3, #2
 8011266:	4413      	add	r3, r2
 8011268:	009b      	lsls	r3, r3, #2
 801126a:	440b      	add	r3, r1
 801126c:	3324      	adds	r3, #36	; 0x24
 801126e:	2201      	movs	r2, #1
 8011270:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	2200      	movs	r2, #0
 8011276:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011280:	687a      	ldr	r2, [r7, #4]
 8011282:	33b0      	adds	r3, #176	; 0xb0
 8011284:	009b      	lsls	r3, r3, #2
 8011286:	4413      	add	r3, r2
 8011288:	685b      	ldr	r3, [r3, #4]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	2200      	movs	r2, #0
 8011292:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	2200      	movs	r2, #0
 801129a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d101      	bne.n	80112ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80112a8:	2302      	movs	r3, #2
 80112aa:	e018      	b.n	80112de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	7c1b      	ldrb	r3, [r3, #16]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d10a      	bne.n	80112ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80112b4:	4b0d      	ldr	r3, [pc, #52]	; (80112ec <USBD_CDC_Init+0x1e8>)
 80112b6:	7819      	ldrb	r1, [r3, #0]
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80112be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f003 f8c0 	bl	8014448 <USBD_LL_PrepareReceive>
 80112c8:	e008      	b.n	80112dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80112ca:	4b08      	ldr	r3, [pc, #32]	; (80112ec <USBD_CDC_Init+0x1e8>)
 80112cc:	7819      	ldrb	r1, [r3, #0]
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80112d4:	2340      	movs	r3, #64	; 0x40
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f003 f8b6 	bl	8014448 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80112dc:	2300      	movs	r3, #0
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3710      	adds	r7, #16
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}
 80112e6:	bf00      	nop
 80112e8:	200000b7 	.word	0x200000b7
 80112ec:	200000b8 	.word	0x200000b8
 80112f0:	200000b9 	.word	0x200000b9

080112f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	460b      	mov	r3, r1
 80112fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8011300:	4b3a      	ldr	r3, [pc, #232]	; (80113ec <USBD_CDC_DeInit+0xf8>)
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	4619      	mov	r1, r3
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f002 ff60 	bl	80141cc <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801130c:	4b37      	ldr	r3, [pc, #220]	; (80113ec <USBD_CDC_DeInit+0xf8>)
 801130e:	781b      	ldrb	r3, [r3, #0]
 8011310:	f003 020f 	and.w	r2, r3, #15
 8011314:	6879      	ldr	r1, [r7, #4]
 8011316:	4613      	mov	r3, r2
 8011318:	009b      	lsls	r3, r3, #2
 801131a:	4413      	add	r3, r2
 801131c:	009b      	lsls	r3, r3, #2
 801131e:	440b      	add	r3, r1
 8011320:	3324      	adds	r3, #36	; 0x24
 8011322:	2200      	movs	r2, #0
 8011324:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8011326:	4b32      	ldr	r3, [pc, #200]	; (80113f0 <USBD_CDC_DeInit+0xfc>)
 8011328:	781b      	ldrb	r3, [r3, #0]
 801132a:	4619      	mov	r1, r3
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f002 ff4d 	bl	80141cc <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8011332:	4b2f      	ldr	r3, [pc, #188]	; (80113f0 <USBD_CDC_DeInit+0xfc>)
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	f003 020f 	and.w	r2, r3, #15
 801133a:	6879      	ldr	r1, [r7, #4]
 801133c:	4613      	mov	r3, r2
 801133e:	009b      	lsls	r3, r3, #2
 8011340:	4413      	add	r3, r2
 8011342:	009b      	lsls	r3, r3, #2
 8011344:	440b      	add	r3, r1
 8011346:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801134a:	2200      	movs	r2, #0
 801134c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801134e:	4b29      	ldr	r3, [pc, #164]	; (80113f4 <USBD_CDC_DeInit+0x100>)
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	4619      	mov	r1, r3
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f002 ff39 	bl	80141cc <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801135a:	4b26      	ldr	r3, [pc, #152]	; (80113f4 <USBD_CDC_DeInit+0x100>)
 801135c:	781b      	ldrb	r3, [r3, #0]
 801135e:	f003 020f 	and.w	r2, r3, #15
 8011362:	6879      	ldr	r1, [r7, #4]
 8011364:	4613      	mov	r3, r2
 8011366:	009b      	lsls	r3, r3, #2
 8011368:	4413      	add	r3, r2
 801136a:	009b      	lsls	r3, r3, #2
 801136c:	440b      	add	r3, r1
 801136e:	3324      	adds	r3, #36	; 0x24
 8011370:	2200      	movs	r2, #0
 8011372:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8011374:	4b1f      	ldr	r3, [pc, #124]	; (80113f4 <USBD_CDC_DeInit+0x100>)
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	f003 020f 	and.w	r2, r3, #15
 801137c:	6879      	ldr	r1, [r7, #4]
 801137e:	4613      	mov	r3, r2
 8011380:	009b      	lsls	r3, r3, #2
 8011382:	4413      	add	r3, r2
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	440b      	add	r3, r1
 8011388:	3326      	adds	r3, #38	; 0x26
 801138a:	2200      	movs	r2, #0
 801138c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	32b0      	adds	r2, #176	; 0xb0
 8011398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d01f      	beq.n	80113e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80113a6:	687a      	ldr	r2, [r7, #4]
 80113a8:	33b0      	adds	r3, #176	; 0xb0
 80113aa:	009b      	lsls	r3, r3, #2
 80113ac:	4413      	add	r3, r2
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	685b      	ldr	r3, [r3, #4]
 80113b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	32b0      	adds	r2, #176	; 0xb0
 80113be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113c2:	4618      	mov	r0, r3
 80113c4:	f003 f8d0 	bl	8014568 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	32b0      	adds	r2, #176	; 0xb0
 80113d2:	2100      	movs	r1, #0
 80113d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	2200      	movs	r2, #0
 80113dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80113e0:	2300      	movs	r3, #0
}
 80113e2:	4618      	mov	r0, r3
 80113e4:	3708      	adds	r7, #8
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}
 80113ea:	bf00      	nop
 80113ec:	200000b7 	.word	0x200000b7
 80113f0:	200000b8 	.word	0x200000b8
 80113f4:	200000b9 	.word	0x200000b9

080113f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b086      	sub	sp, #24
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	32b0      	adds	r2, #176	; 0xb0
 801140c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011410:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011412:	2300      	movs	r3, #0
 8011414:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011416:	2300      	movs	r3, #0
 8011418:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801141a:	2300      	movs	r3, #0
 801141c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d101      	bne.n	8011428 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8011424:	2303      	movs	r3, #3
 8011426:	e0bf      	b.n	80115a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	781b      	ldrb	r3, [r3, #0]
 801142c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011430:	2b00      	cmp	r3, #0
 8011432:	d050      	beq.n	80114d6 <USBD_CDC_Setup+0xde>
 8011434:	2b20      	cmp	r3, #32
 8011436:	f040 80af 	bne.w	8011598 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	88db      	ldrh	r3, [r3, #6]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d03a      	beq.n	80114b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	b25b      	sxtb	r3, r3
 8011448:	2b00      	cmp	r3, #0
 801144a:	da1b      	bge.n	8011484 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011452:	687a      	ldr	r2, [r7, #4]
 8011454:	33b0      	adds	r3, #176	; 0xb0
 8011456:	009b      	lsls	r3, r3, #2
 8011458:	4413      	add	r3, r2
 801145a:	685b      	ldr	r3, [r3, #4]
 801145c:	689b      	ldr	r3, [r3, #8]
 801145e:	683a      	ldr	r2, [r7, #0]
 8011460:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8011462:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011464:	683a      	ldr	r2, [r7, #0]
 8011466:	88d2      	ldrh	r2, [r2, #6]
 8011468:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	88db      	ldrh	r3, [r3, #6]
 801146e:	2b07      	cmp	r3, #7
 8011470:	bf28      	it	cs
 8011472:	2307      	movcs	r3, #7
 8011474:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011476:	693b      	ldr	r3, [r7, #16]
 8011478:	89fa      	ldrh	r2, [r7, #14]
 801147a:	4619      	mov	r1, r3
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f001 fd21 	bl	8012ec4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8011482:	e090      	b.n	80115a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	785a      	ldrb	r2, [r3, #1]
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	88db      	ldrh	r3, [r3, #6]
 8011492:	2b3f      	cmp	r3, #63	; 0x3f
 8011494:	d803      	bhi.n	801149e <USBD_CDC_Setup+0xa6>
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	88db      	ldrh	r3, [r3, #6]
 801149a:	b2da      	uxtb	r2, r3
 801149c:	e000      	b.n	80114a0 <USBD_CDC_Setup+0xa8>
 801149e:	2240      	movs	r2, #64	; 0x40
 80114a0:	693b      	ldr	r3, [r7, #16]
 80114a2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80114a6:	6939      	ldr	r1, [r7, #16]
 80114a8:	693b      	ldr	r3, [r7, #16]
 80114aa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80114ae:	461a      	mov	r2, r3
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f001 fd33 	bl	8012f1c <USBD_CtlPrepareRx>
      break;
 80114b6:	e076      	b.n	80115a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	33b0      	adds	r3, #176	; 0xb0
 80114c2:	009b      	lsls	r3, r3, #2
 80114c4:	4413      	add	r3, r2
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	689b      	ldr	r3, [r3, #8]
 80114ca:	683a      	ldr	r2, [r7, #0]
 80114cc:	7850      	ldrb	r0, [r2, #1]
 80114ce:	2200      	movs	r2, #0
 80114d0:	6839      	ldr	r1, [r7, #0]
 80114d2:	4798      	blx	r3
      break;
 80114d4:	e067      	b.n	80115a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	785b      	ldrb	r3, [r3, #1]
 80114da:	2b0b      	cmp	r3, #11
 80114dc:	d851      	bhi.n	8011582 <USBD_CDC_Setup+0x18a>
 80114de:	a201      	add	r2, pc, #4	; (adr r2, 80114e4 <USBD_CDC_Setup+0xec>)
 80114e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114e4:	08011515 	.word	0x08011515
 80114e8:	08011591 	.word	0x08011591
 80114ec:	08011583 	.word	0x08011583
 80114f0:	08011583 	.word	0x08011583
 80114f4:	08011583 	.word	0x08011583
 80114f8:	08011583 	.word	0x08011583
 80114fc:	08011583 	.word	0x08011583
 8011500:	08011583 	.word	0x08011583
 8011504:	08011583 	.word	0x08011583
 8011508:	08011583 	.word	0x08011583
 801150c:	0801153f 	.word	0x0801153f
 8011510:	08011569 	.word	0x08011569
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801151a:	b2db      	uxtb	r3, r3
 801151c:	2b03      	cmp	r3, #3
 801151e:	d107      	bne.n	8011530 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011520:	f107 030a 	add.w	r3, r7, #10
 8011524:	2202      	movs	r2, #2
 8011526:	4619      	mov	r1, r3
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	f001 fccb 	bl	8012ec4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801152e:	e032      	b.n	8011596 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011530:	6839      	ldr	r1, [r7, #0]
 8011532:	6878      	ldr	r0, [r7, #4]
 8011534:	f001 fc55 	bl	8012de2 <USBD_CtlError>
            ret = USBD_FAIL;
 8011538:	2303      	movs	r3, #3
 801153a:	75fb      	strb	r3, [r7, #23]
          break;
 801153c:	e02b      	b.n	8011596 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011544:	b2db      	uxtb	r3, r3
 8011546:	2b03      	cmp	r3, #3
 8011548:	d107      	bne.n	801155a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801154a:	f107 030d 	add.w	r3, r7, #13
 801154e:	2201      	movs	r2, #1
 8011550:	4619      	mov	r1, r3
 8011552:	6878      	ldr	r0, [r7, #4]
 8011554:	f001 fcb6 	bl	8012ec4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011558:	e01d      	b.n	8011596 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801155a:	6839      	ldr	r1, [r7, #0]
 801155c:	6878      	ldr	r0, [r7, #4]
 801155e:	f001 fc40 	bl	8012de2 <USBD_CtlError>
            ret = USBD_FAIL;
 8011562:	2303      	movs	r3, #3
 8011564:	75fb      	strb	r3, [r7, #23]
          break;
 8011566:	e016      	b.n	8011596 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801156e:	b2db      	uxtb	r3, r3
 8011570:	2b03      	cmp	r3, #3
 8011572:	d00f      	beq.n	8011594 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8011574:	6839      	ldr	r1, [r7, #0]
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f001 fc33 	bl	8012de2 <USBD_CtlError>
            ret = USBD_FAIL;
 801157c:	2303      	movs	r3, #3
 801157e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011580:	e008      	b.n	8011594 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011582:	6839      	ldr	r1, [r7, #0]
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f001 fc2c 	bl	8012de2 <USBD_CtlError>
          ret = USBD_FAIL;
 801158a:	2303      	movs	r3, #3
 801158c:	75fb      	strb	r3, [r7, #23]
          break;
 801158e:	e002      	b.n	8011596 <USBD_CDC_Setup+0x19e>
          break;
 8011590:	bf00      	nop
 8011592:	e008      	b.n	80115a6 <USBD_CDC_Setup+0x1ae>
          break;
 8011594:	bf00      	nop
      }
      break;
 8011596:	e006      	b.n	80115a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8011598:	6839      	ldr	r1, [r7, #0]
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f001 fc21 	bl	8012de2 <USBD_CtlError>
      ret = USBD_FAIL;
 80115a0:	2303      	movs	r3, #3
 80115a2:	75fb      	strb	r3, [r7, #23]
      break;
 80115a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80115a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80115a8:	4618      	mov	r0, r3
 80115aa:	3718      	adds	r7, #24
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}

080115b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b084      	sub	sp, #16
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	460b      	mov	r3, r1
 80115ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80115c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	32b0      	adds	r2, #176	; 0xb0
 80115ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d101      	bne.n	80115da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80115d6:	2303      	movs	r3, #3
 80115d8:	e065      	b.n	80116a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	32b0      	adds	r2, #176	; 0xb0
 80115e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80115ea:	78fb      	ldrb	r3, [r7, #3]
 80115ec:	f003 020f 	and.w	r2, r3, #15
 80115f0:	6879      	ldr	r1, [r7, #4]
 80115f2:	4613      	mov	r3, r2
 80115f4:	009b      	lsls	r3, r3, #2
 80115f6:	4413      	add	r3, r2
 80115f8:	009b      	lsls	r3, r3, #2
 80115fa:	440b      	add	r3, r1
 80115fc:	3318      	adds	r3, #24
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d02f      	beq.n	8011664 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8011604:	78fb      	ldrb	r3, [r7, #3]
 8011606:	f003 020f 	and.w	r2, r3, #15
 801160a:	6879      	ldr	r1, [r7, #4]
 801160c:	4613      	mov	r3, r2
 801160e:	009b      	lsls	r3, r3, #2
 8011610:	4413      	add	r3, r2
 8011612:	009b      	lsls	r3, r3, #2
 8011614:	440b      	add	r3, r1
 8011616:	3318      	adds	r3, #24
 8011618:	681a      	ldr	r2, [r3, #0]
 801161a:	78fb      	ldrb	r3, [r7, #3]
 801161c:	f003 010f 	and.w	r1, r3, #15
 8011620:	68f8      	ldr	r0, [r7, #12]
 8011622:	460b      	mov	r3, r1
 8011624:	009b      	lsls	r3, r3, #2
 8011626:	440b      	add	r3, r1
 8011628:	00db      	lsls	r3, r3, #3
 801162a:	4403      	add	r3, r0
 801162c:	3338      	adds	r3, #56	; 0x38
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	fbb2 f1f3 	udiv	r1, r2, r3
 8011634:	fb01 f303 	mul.w	r3, r1, r3
 8011638:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801163a:	2b00      	cmp	r3, #0
 801163c:	d112      	bne.n	8011664 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801163e:	78fb      	ldrb	r3, [r7, #3]
 8011640:	f003 020f 	and.w	r2, r3, #15
 8011644:	6879      	ldr	r1, [r7, #4]
 8011646:	4613      	mov	r3, r2
 8011648:	009b      	lsls	r3, r3, #2
 801164a:	4413      	add	r3, r2
 801164c:	009b      	lsls	r3, r3, #2
 801164e:	440b      	add	r3, r1
 8011650:	3318      	adds	r3, #24
 8011652:	2200      	movs	r2, #0
 8011654:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011656:	78f9      	ldrb	r1, [r7, #3]
 8011658:	2300      	movs	r3, #0
 801165a:	2200      	movs	r2, #0
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f002 febb 	bl	80143d8 <USBD_LL_Transmit>
 8011662:	e01f      	b.n	80116a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	2200      	movs	r2, #0
 8011668:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011672:	687a      	ldr	r2, [r7, #4]
 8011674:	33b0      	adds	r3, #176	; 0xb0
 8011676:	009b      	lsls	r3, r3, #2
 8011678:	4413      	add	r3, r2
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	691b      	ldr	r3, [r3, #16]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d010      	beq.n	80116a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011688:	687a      	ldr	r2, [r7, #4]
 801168a:	33b0      	adds	r3, #176	; 0xb0
 801168c:	009b      	lsls	r3, r3, #2
 801168e:	4413      	add	r3, r2
 8011690:	685b      	ldr	r3, [r3, #4]
 8011692:	691b      	ldr	r3, [r3, #16]
 8011694:	68ba      	ldr	r2, [r7, #8]
 8011696:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801169a:	68ba      	ldr	r2, [r7, #8]
 801169c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80116a0:	78fa      	ldrb	r2, [r7, #3]
 80116a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80116a4:	2300      	movs	r3, #0
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3710      	adds	r7, #16
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}

080116ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80116ae:	b580      	push	{r7, lr}
 80116b0:	b084      	sub	sp, #16
 80116b2:	af00      	add	r7, sp, #0
 80116b4:	6078      	str	r0, [r7, #4]
 80116b6:	460b      	mov	r3, r1
 80116b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	32b0      	adds	r2, #176	; 0xb0
 80116c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	32b0      	adds	r2, #176	; 0xb0
 80116d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d101      	bne.n	80116e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80116dc:	2303      	movs	r3, #3
 80116de:	e01a      	b.n	8011716 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80116e0:	78fb      	ldrb	r3, [r7, #3]
 80116e2:	4619      	mov	r1, r3
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f002 fee7 	bl	80144b8 <USBD_LL_GetRxDataSize>
 80116ea:	4602      	mov	r2, r0
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	33b0      	adds	r3, #176	; 0xb0
 80116fc:	009b      	lsls	r3, r3, #2
 80116fe:	4413      	add	r3, r2
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	68db      	ldr	r3, [r3, #12]
 8011704:	68fa      	ldr	r2, [r7, #12]
 8011706:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801170a:	68fa      	ldr	r2, [r7, #12]
 801170c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011710:	4611      	mov	r1, r2
 8011712:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011714:	2300      	movs	r3, #0
}
 8011716:	4618      	mov	r0, r3
 8011718:	3710      	adds	r7, #16
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}

0801171e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801171e:	b580      	push	{r7, lr}
 8011720:	b084      	sub	sp, #16
 8011722:	af00      	add	r7, sp, #0
 8011724:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	32b0      	adds	r2, #176	; 0xb0
 8011730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011734:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d101      	bne.n	8011740 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801173c:	2303      	movs	r3, #3
 801173e:	e025      	b.n	801178c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011746:	687a      	ldr	r2, [r7, #4]
 8011748:	33b0      	adds	r3, #176	; 0xb0
 801174a:	009b      	lsls	r3, r3, #2
 801174c:	4413      	add	r3, r2
 801174e:	685b      	ldr	r3, [r3, #4]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d01a      	beq.n	801178a <USBD_CDC_EP0_RxReady+0x6c>
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801175a:	2bff      	cmp	r3, #255	; 0xff
 801175c:	d015      	beq.n	801178a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011764:	687a      	ldr	r2, [r7, #4]
 8011766:	33b0      	adds	r3, #176	; 0xb0
 8011768:	009b      	lsls	r3, r3, #2
 801176a:	4413      	add	r3, r2
 801176c:	685b      	ldr	r3, [r3, #4]
 801176e:	689b      	ldr	r3, [r3, #8]
 8011770:	68fa      	ldr	r2, [r7, #12]
 8011772:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8011776:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8011778:	68fa      	ldr	r2, [r7, #12]
 801177a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801177e:	b292      	uxth	r2, r2
 8011780:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	22ff      	movs	r2, #255	; 0xff
 8011786:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801178a:	2300      	movs	r3, #0
}
 801178c:	4618      	mov	r0, r3
 801178e:	3710      	adds	r7, #16
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}

08011794 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b086      	sub	sp, #24
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801179c:	2182      	movs	r1, #130	; 0x82
 801179e:	4818      	ldr	r0, [pc, #96]	; (8011800 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80117a0:	f000 fcbd 	bl	801211e <USBD_GetEpDesc>
 80117a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80117a6:	2101      	movs	r1, #1
 80117a8:	4815      	ldr	r0, [pc, #84]	; (8011800 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80117aa:	f000 fcb8 	bl	801211e <USBD_GetEpDesc>
 80117ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80117b0:	2181      	movs	r1, #129	; 0x81
 80117b2:	4813      	ldr	r0, [pc, #76]	; (8011800 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80117b4:	f000 fcb3 	bl	801211e <USBD_GetEpDesc>
 80117b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80117ba:	697b      	ldr	r3, [r7, #20]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d002      	beq.n	80117c6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	2210      	movs	r2, #16
 80117c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80117c6:	693b      	ldr	r3, [r7, #16]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d006      	beq.n	80117da <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80117cc:	693b      	ldr	r3, [r7, #16]
 80117ce:	2200      	movs	r2, #0
 80117d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80117d4:	711a      	strb	r2, [r3, #4]
 80117d6:	2200      	movs	r2, #0
 80117d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d006      	beq.n	80117ee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	2200      	movs	r2, #0
 80117e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80117e8:	711a      	strb	r2, [r3, #4]
 80117ea:	2200      	movs	r2, #0
 80117ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2243      	movs	r2, #67	; 0x43
 80117f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80117f4:	4b02      	ldr	r3, [pc, #8]	; (8011800 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	3718      	adds	r7, #24
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}
 80117fe:	bf00      	nop
 8011800:	20000074 	.word	0x20000074

08011804 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b086      	sub	sp, #24
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801180c:	2182      	movs	r1, #130	; 0x82
 801180e:	4818      	ldr	r0, [pc, #96]	; (8011870 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011810:	f000 fc85 	bl	801211e <USBD_GetEpDesc>
 8011814:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011816:	2101      	movs	r1, #1
 8011818:	4815      	ldr	r0, [pc, #84]	; (8011870 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801181a:	f000 fc80 	bl	801211e <USBD_GetEpDesc>
 801181e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011820:	2181      	movs	r1, #129	; 0x81
 8011822:	4813      	ldr	r0, [pc, #76]	; (8011870 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011824:	f000 fc7b 	bl	801211e <USBD_GetEpDesc>
 8011828:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d002      	beq.n	8011836 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	2210      	movs	r2, #16
 8011834:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d006      	beq.n	801184a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	2200      	movs	r2, #0
 8011840:	711a      	strb	r2, [r3, #4]
 8011842:	2200      	movs	r2, #0
 8011844:	f042 0202 	orr.w	r2, r2, #2
 8011848:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d006      	beq.n	801185e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	2200      	movs	r2, #0
 8011854:	711a      	strb	r2, [r3, #4]
 8011856:	2200      	movs	r2, #0
 8011858:	f042 0202 	orr.w	r2, r2, #2
 801185c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	2243      	movs	r2, #67	; 0x43
 8011862:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011864:	4b02      	ldr	r3, [pc, #8]	; (8011870 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8011866:	4618      	mov	r0, r3
 8011868:	3718      	adds	r7, #24
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}
 801186e:	bf00      	nop
 8011870:	20000074 	.word	0x20000074

08011874 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b086      	sub	sp, #24
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801187c:	2182      	movs	r1, #130	; 0x82
 801187e:	4818      	ldr	r0, [pc, #96]	; (80118e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011880:	f000 fc4d 	bl	801211e <USBD_GetEpDesc>
 8011884:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011886:	2101      	movs	r1, #1
 8011888:	4815      	ldr	r0, [pc, #84]	; (80118e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801188a:	f000 fc48 	bl	801211e <USBD_GetEpDesc>
 801188e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011890:	2181      	movs	r1, #129	; 0x81
 8011892:	4813      	ldr	r0, [pc, #76]	; (80118e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011894:	f000 fc43 	bl	801211e <USBD_GetEpDesc>
 8011898:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801189a:	697b      	ldr	r3, [r7, #20]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d002      	beq.n	80118a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	2210      	movs	r2, #16
 80118a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80118a6:	693b      	ldr	r3, [r7, #16]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d006      	beq.n	80118ba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80118ac:	693b      	ldr	r3, [r7, #16]
 80118ae:	2200      	movs	r2, #0
 80118b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80118b4:	711a      	strb	r2, [r3, #4]
 80118b6:	2200      	movs	r2, #0
 80118b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d006      	beq.n	80118ce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2200      	movs	r2, #0
 80118c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80118c8:	711a      	strb	r2, [r3, #4]
 80118ca:	2200      	movs	r2, #0
 80118cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2243      	movs	r2, #67	; 0x43
 80118d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80118d4:	4b02      	ldr	r3, [pc, #8]	; (80118e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	3718      	adds	r7, #24
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}
 80118de:	bf00      	nop
 80118e0:	20000074 	.word	0x20000074

080118e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b083      	sub	sp, #12
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	220a      	movs	r2, #10
 80118f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80118f2:	4b03      	ldr	r3, [pc, #12]	; (8011900 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	370c      	adds	r7, #12
 80118f8:	46bd      	mov	sp, r7
 80118fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fe:	4770      	bx	lr
 8011900:	20000030 	.word	0x20000030

08011904 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011904:	b480      	push	{r7}
 8011906:	b083      	sub	sp, #12
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
 801190c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d101      	bne.n	8011918 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011914:	2303      	movs	r3, #3
 8011916:	e009      	b.n	801192c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801191e:	687a      	ldr	r2, [r7, #4]
 8011920:	33b0      	adds	r3, #176	; 0xb0
 8011922:	009b      	lsls	r3, r3, #2
 8011924:	4413      	add	r3, r2
 8011926:	683a      	ldr	r2, [r7, #0]
 8011928:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801192a:	2300      	movs	r3, #0
}
 801192c:	4618      	mov	r0, r3
 801192e:	370c      	adds	r7, #12
 8011930:	46bd      	mov	sp, r7
 8011932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011936:	4770      	bx	lr

08011938 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011938:	b480      	push	{r7}
 801193a:	b087      	sub	sp, #28
 801193c:	af00      	add	r7, sp, #0
 801193e:	60f8      	str	r0, [r7, #12]
 8011940:	60b9      	str	r1, [r7, #8]
 8011942:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	32b0      	adds	r2, #176	; 0xb0
 801194e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011952:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d101      	bne.n	801195e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801195a:	2303      	movs	r3, #3
 801195c:	e008      	b.n	8011970 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	68ba      	ldr	r2, [r7, #8]
 8011962:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	687a      	ldr	r2, [r7, #4]
 801196a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801196e:	2300      	movs	r3, #0
}
 8011970:	4618      	mov	r0, r3
 8011972:	371c      	adds	r7, #28
 8011974:	46bd      	mov	sp, r7
 8011976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197a:	4770      	bx	lr

0801197c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801197c:	b480      	push	{r7}
 801197e:	b085      	sub	sp, #20
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	32b0      	adds	r2, #176	; 0xb0
 8011990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011994:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d101      	bne.n	80119a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801199c:	2303      	movs	r3, #3
 801199e:	e004      	b.n	80119aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	683a      	ldr	r2, [r7, #0]
 80119a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80119a8:	2300      	movs	r3, #0
}
 80119aa:	4618      	mov	r0, r3
 80119ac:	3714      	adds	r7, #20
 80119ae:	46bd      	mov	sp, r7
 80119b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b4:	4770      	bx	lr
	...

080119b8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b084      	sub	sp, #16
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	32b0      	adds	r2, #176	; 0xb0
 80119ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119ce:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80119d0:	2301      	movs	r3, #1
 80119d2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d101      	bne.n	80119de <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80119da:	2303      	movs	r3, #3
 80119dc:	e025      	b.n	8011a2a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d11f      	bne.n	8011a28 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	2201      	movs	r2, #1
 80119ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80119f0:	4b10      	ldr	r3, [pc, #64]	; (8011a34 <USBD_CDC_TransmitPacket+0x7c>)
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	f003 020f 	and.w	r2, r3, #15
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	4613      	mov	r3, r2
 8011a02:	009b      	lsls	r3, r3, #2
 8011a04:	4413      	add	r3, r2
 8011a06:	009b      	lsls	r3, r3, #2
 8011a08:	4403      	add	r3, r0
 8011a0a:	3318      	adds	r3, #24
 8011a0c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8011a0e:	4b09      	ldr	r3, [pc, #36]	; (8011a34 <USBD_CDC_TransmitPacket+0x7c>)
 8011a10:	7819      	ldrb	r1, [r3, #0]
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011a18:	68bb      	ldr	r3, [r7, #8]
 8011a1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f002 fcda 	bl	80143d8 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011a24:	2300      	movs	r3, #0
 8011a26:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	3710      	adds	r7, #16
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
 8011a32:	bf00      	nop
 8011a34:	200000b7 	.word	0x200000b7

08011a38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b084      	sub	sp, #16
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	32b0      	adds	r2, #176	; 0xb0
 8011a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a4e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	32b0      	adds	r2, #176	; 0xb0
 8011a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d101      	bne.n	8011a66 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8011a62:	2303      	movs	r3, #3
 8011a64:	e018      	b.n	8011a98 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	7c1b      	ldrb	r3, [r3, #16]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d10a      	bne.n	8011a84 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011a6e:	4b0c      	ldr	r3, [pc, #48]	; (8011aa0 <USBD_CDC_ReceivePacket+0x68>)
 8011a70:	7819      	ldrb	r1, [r3, #0]
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f002 fce3 	bl	8014448 <USBD_LL_PrepareReceive>
 8011a82:	e008      	b.n	8011a96 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011a84:	4b06      	ldr	r3, [pc, #24]	; (8011aa0 <USBD_CDC_ReceivePacket+0x68>)
 8011a86:	7819      	ldrb	r1, [r3, #0]
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011a8e:	2340      	movs	r3, #64	; 0x40
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f002 fcd9 	bl	8014448 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011a96:	2300      	movs	r3, #0
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3710      	adds	r7, #16
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}
 8011aa0:	200000b8 	.word	0x200000b8

08011aa4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b086      	sub	sp, #24
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	60f8      	str	r0, [r7, #12]
 8011aac:	60b9      	str	r1, [r7, #8]
 8011aae:	4613      	mov	r3, r2
 8011ab0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d101      	bne.n	8011abc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011ab8:	2303      	movs	r3, #3
 8011aba:	e01f      	b.n	8011afc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	2200      	movs	r2, #0
 8011ac0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d003      	beq.n	8011ae2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	68ba      	ldr	r2, [r7, #8]
 8011ade:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	2201      	movs	r2, #1
 8011ae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	79fa      	ldrb	r2, [r7, #7]
 8011aee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011af0:	68f8      	ldr	r0, [r7, #12]
 8011af2:	f002 fa99 	bl	8014028 <USBD_LL_Init>
 8011af6:	4603      	mov	r3, r0
 8011af8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8011afc:	4618      	mov	r0, r3
 8011afe:	3718      	adds	r7, #24
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bd80      	pop	{r7, pc}

08011b04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b084      	sub	sp, #16
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
 8011b0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d101      	bne.n	8011b1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011b18:	2303      	movs	r3, #3
 8011b1a:	e025      	b.n	8011b68 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	683a      	ldr	r2, [r7, #0]
 8011b20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	32ae      	adds	r2, #174	; 0xae
 8011b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d00f      	beq.n	8011b58 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	32ae      	adds	r2, #174	; 0xae
 8011b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b48:	f107 020e 	add.w	r2, r7, #14
 8011b4c:	4610      	mov	r0, r2
 8011b4e:	4798      	blx	r3
 8011b50:	4602      	mov	r2, r0
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011b5e:	1c5a      	adds	r2, r3, #1
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8011b66:	2300      	movs	r3, #0
}
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3710      	adds	r7, #16
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}

08011b70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b082      	sub	sp, #8
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f002 fab7 	bl	80140ec <USBD_LL_Start>
 8011b7e:	4603      	mov	r3, r0
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3708      	adds	r7, #8
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}

08011b88 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b083      	sub	sp, #12
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011b90:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	370c      	adds	r7, #12
 8011b96:	46bd      	mov	sp, r7
 8011b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9c:	4770      	bx	lr

08011b9e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b9e:	b580      	push	{r7, lr}
 8011ba0:	b084      	sub	sp, #16
 8011ba2:	af00      	add	r7, sp, #0
 8011ba4:	6078      	str	r0, [r7, #4]
 8011ba6:	460b      	mov	r3, r1
 8011ba8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011baa:	2300      	movs	r3, #0
 8011bac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d009      	beq.n	8011bcc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	78fa      	ldrb	r2, [r7, #3]
 8011bc2:	4611      	mov	r1, r2
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	4798      	blx	r3
 8011bc8:	4603      	mov	r3, r0
 8011bca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bce:	4618      	mov	r0, r3
 8011bd0:	3710      	adds	r7, #16
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}

08011bd6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011bd6:	b580      	push	{r7, lr}
 8011bd8:	b084      	sub	sp, #16
 8011bda:	af00      	add	r7, sp, #0
 8011bdc:	6078      	str	r0, [r7, #4]
 8011bde:	460b      	mov	r3, r1
 8011be0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011be2:	2300      	movs	r3, #0
 8011be4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bec:	685b      	ldr	r3, [r3, #4]
 8011bee:	78fa      	ldrb	r2, [r7, #3]
 8011bf0:	4611      	mov	r1, r2
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	4798      	blx	r3
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d001      	beq.n	8011c00 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011bfc:	2303      	movs	r3, #3
 8011bfe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3710      	adds	r7, #16
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}

08011c0a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011c0a:	b580      	push	{r7, lr}
 8011c0c:	b084      	sub	sp, #16
 8011c0e:	af00      	add	r7, sp, #0
 8011c10:	6078      	str	r0, [r7, #4]
 8011c12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c1a:	6839      	ldr	r1, [r7, #0]
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f001 f8a6 	bl	8012d6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2201      	movs	r2, #1
 8011c26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011c30:	461a      	mov	r2, r3
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011c3e:	f003 031f 	and.w	r3, r3, #31
 8011c42:	2b02      	cmp	r3, #2
 8011c44:	d01a      	beq.n	8011c7c <USBD_LL_SetupStage+0x72>
 8011c46:	2b02      	cmp	r3, #2
 8011c48:	d822      	bhi.n	8011c90 <USBD_LL_SetupStage+0x86>
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d002      	beq.n	8011c54 <USBD_LL_SetupStage+0x4a>
 8011c4e:	2b01      	cmp	r3, #1
 8011c50:	d00a      	beq.n	8011c68 <USBD_LL_SetupStage+0x5e>
 8011c52:	e01d      	b.n	8011c90 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c5a:	4619      	mov	r1, r3
 8011c5c:	6878      	ldr	r0, [r7, #4]
 8011c5e:	f000 fad3 	bl	8012208 <USBD_StdDevReq>
 8011c62:	4603      	mov	r3, r0
 8011c64:	73fb      	strb	r3, [r7, #15]
      break;
 8011c66:	e020      	b.n	8011caa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c6e:	4619      	mov	r1, r3
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f000 fb3b 	bl	80122ec <USBD_StdItfReq>
 8011c76:	4603      	mov	r3, r0
 8011c78:	73fb      	strb	r3, [r7, #15]
      break;
 8011c7a:	e016      	b.n	8011caa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c82:	4619      	mov	r1, r3
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f000 fb9d 	bl	80123c4 <USBD_StdEPReq>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8011c8e:	e00c      	b.n	8011caa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011c96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011c9a:	b2db      	uxtb	r3, r3
 8011c9c:	4619      	mov	r1, r3
 8011c9e:	6878      	ldr	r0, [r7, #4]
 8011ca0:	f002 faca 	bl	8014238 <USBD_LL_StallEP>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8011ca8:	bf00      	nop
  }

  return ret;
 8011caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3710      	adds	r7, #16
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b086      	sub	sp, #24
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	60f8      	str	r0, [r7, #12]
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	607a      	str	r2, [r7, #4]
 8011cc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011cc6:	7afb      	ldrb	r3, [r7, #11]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d16e      	bne.n	8011daa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011cd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011cda:	2b03      	cmp	r3, #3
 8011cdc:	f040 8098 	bne.w	8011e10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	689a      	ldr	r2, [r3, #8]
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	68db      	ldr	r3, [r3, #12]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d913      	bls.n	8011d14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011cec:	693b      	ldr	r3, [r7, #16]
 8011cee:	689a      	ldr	r2, [r3, #8]
 8011cf0:	693b      	ldr	r3, [r7, #16]
 8011cf2:	68db      	ldr	r3, [r3, #12]
 8011cf4:	1ad2      	subs	r2, r2, r3
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	68da      	ldr	r2, [r3, #12]
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	689b      	ldr	r3, [r3, #8]
 8011d02:	4293      	cmp	r3, r2
 8011d04:	bf28      	it	cs
 8011d06:	4613      	movcs	r3, r2
 8011d08:	461a      	mov	r2, r3
 8011d0a:	6879      	ldr	r1, [r7, #4]
 8011d0c:	68f8      	ldr	r0, [r7, #12]
 8011d0e:	f001 f922 	bl	8012f56 <USBD_CtlContinueRx>
 8011d12:	e07d      	b.n	8011e10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011d1a:	f003 031f 	and.w	r3, r3, #31
 8011d1e:	2b02      	cmp	r3, #2
 8011d20:	d014      	beq.n	8011d4c <USBD_LL_DataOutStage+0x98>
 8011d22:	2b02      	cmp	r3, #2
 8011d24:	d81d      	bhi.n	8011d62 <USBD_LL_DataOutStage+0xae>
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d002      	beq.n	8011d30 <USBD_LL_DataOutStage+0x7c>
 8011d2a:	2b01      	cmp	r3, #1
 8011d2c:	d003      	beq.n	8011d36 <USBD_LL_DataOutStage+0x82>
 8011d2e:	e018      	b.n	8011d62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011d30:	2300      	movs	r3, #0
 8011d32:	75bb      	strb	r3, [r7, #22]
            break;
 8011d34:	e018      	b.n	8011d68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011d3c:	b2db      	uxtb	r3, r3
 8011d3e:	4619      	mov	r1, r3
 8011d40:	68f8      	ldr	r0, [r7, #12]
 8011d42:	f000 f9d2 	bl	80120ea <USBD_CoreFindIF>
 8011d46:	4603      	mov	r3, r0
 8011d48:	75bb      	strb	r3, [r7, #22]
            break;
 8011d4a:	e00d      	b.n	8011d68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011d52:	b2db      	uxtb	r3, r3
 8011d54:	4619      	mov	r1, r3
 8011d56:	68f8      	ldr	r0, [r7, #12]
 8011d58:	f000 f9d4 	bl	8012104 <USBD_CoreFindEP>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	75bb      	strb	r3, [r7, #22]
            break;
 8011d60:	e002      	b.n	8011d68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011d62:	2300      	movs	r3, #0
 8011d64:	75bb      	strb	r3, [r7, #22]
            break;
 8011d66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011d68:	7dbb      	ldrb	r3, [r7, #22]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d119      	bne.n	8011da2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d74:	b2db      	uxtb	r3, r3
 8011d76:	2b03      	cmp	r3, #3
 8011d78:	d113      	bne.n	8011da2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011d7a:	7dba      	ldrb	r2, [r7, #22]
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	32ae      	adds	r2, #174	; 0xae
 8011d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d84:	691b      	ldr	r3, [r3, #16]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d00b      	beq.n	8011da2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011d8a:	7dba      	ldrb	r2, [r7, #22]
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011d92:	7dba      	ldrb	r2, [r7, #22]
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	32ae      	adds	r2, #174	; 0xae
 8011d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d9c:	691b      	ldr	r3, [r3, #16]
 8011d9e:	68f8      	ldr	r0, [r7, #12]
 8011da0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011da2:	68f8      	ldr	r0, [r7, #12]
 8011da4:	f001 f8e8 	bl	8012f78 <USBD_CtlSendStatus>
 8011da8:	e032      	b.n	8011e10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011daa:	7afb      	ldrb	r3, [r7, #11]
 8011dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011db0:	b2db      	uxtb	r3, r3
 8011db2:	4619      	mov	r1, r3
 8011db4:	68f8      	ldr	r0, [r7, #12]
 8011db6:	f000 f9a5 	bl	8012104 <USBD_CoreFindEP>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011dbe:	7dbb      	ldrb	r3, [r7, #22]
 8011dc0:	2bff      	cmp	r3, #255	; 0xff
 8011dc2:	d025      	beq.n	8011e10 <USBD_LL_DataOutStage+0x15c>
 8011dc4:	7dbb      	ldrb	r3, [r7, #22]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d122      	bne.n	8011e10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011dd0:	b2db      	uxtb	r3, r3
 8011dd2:	2b03      	cmp	r3, #3
 8011dd4:	d117      	bne.n	8011e06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8011dd6:	7dba      	ldrb	r2, [r7, #22]
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	32ae      	adds	r2, #174	; 0xae
 8011ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011de0:	699b      	ldr	r3, [r3, #24]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d00f      	beq.n	8011e06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8011de6:	7dba      	ldrb	r2, [r7, #22]
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011dee:	7dba      	ldrb	r2, [r7, #22]
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	32ae      	adds	r2, #174	; 0xae
 8011df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011df8:	699b      	ldr	r3, [r3, #24]
 8011dfa:	7afa      	ldrb	r2, [r7, #11]
 8011dfc:	4611      	mov	r1, r2
 8011dfe:	68f8      	ldr	r0, [r7, #12]
 8011e00:	4798      	blx	r3
 8011e02:	4603      	mov	r3, r0
 8011e04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011e06:	7dfb      	ldrb	r3, [r7, #23]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d001      	beq.n	8011e10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011e0c:	7dfb      	ldrb	r3, [r7, #23]
 8011e0e:	e000      	b.n	8011e12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011e10:	2300      	movs	r3, #0
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	3718      	adds	r7, #24
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}

08011e1a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011e1a:	b580      	push	{r7, lr}
 8011e1c:	b086      	sub	sp, #24
 8011e1e:	af00      	add	r7, sp, #0
 8011e20:	60f8      	str	r0, [r7, #12]
 8011e22:	460b      	mov	r3, r1
 8011e24:	607a      	str	r2, [r7, #4]
 8011e26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011e28:	7afb      	ldrb	r3, [r7, #11]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d16f      	bne.n	8011f0e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	3314      	adds	r3, #20
 8011e32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011e3a:	2b02      	cmp	r3, #2
 8011e3c:	d15a      	bne.n	8011ef4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	689a      	ldr	r2, [r3, #8]
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	68db      	ldr	r3, [r3, #12]
 8011e46:	429a      	cmp	r2, r3
 8011e48:	d914      	bls.n	8011e74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	689a      	ldr	r2, [r3, #8]
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	68db      	ldr	r3, [r3, #12]
 8011e52:	1ad2      	subs	r2, r2, r3
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	689b      	ldr	r3, [r3, #8]
 8011e5c:	461a      	mov	r2, r3
 8011e5e:	6879      	ldr	r1, [r7, #4]
 8011e60:	68f8      	ldr	r0, [r7, #12]
 8011e62:	f001 f84a 	bl	8012efa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011e66:	2300      	movs	r3, #0
 8011e68:	2200      	movs	r2, #0
 8011e6a:	2100      	movs	r1, #0
 8011e6c:	68f8      	ldr	r0, [r7, #12]
 8011e6e:	f002 faeb 	bl	8014448 <USBD_LL_PrepareReceive>
 8011e72:	e03f      	b.n	8011ef4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	68da      	ldr	r2, [r3, #12]
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	689b      	ldr	r3, [r3, #8]
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	d11c      	bne.n	8011eba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011e80:	693b      	ldr	r3, [r7, #16]
 8011e82:	685a      	ldr	r2, [r3, #4]
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d316      	bcc.n	8011eba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011e8c:	693b      	ldr	r3, [r7, #16]
 8011e8e:	685a      	ldr	r2, [r3, #4]
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011e96:	429a      	cmp	r2, r3
 8011e98:	d20f      	bcs.n	8011eba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	2100      	movs	r1, #0
 8011e9e:	68f8      	ldr	r0, [r7, #12]
 8011ea0:	f001 f82b 	bl	8012efa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011eac:	2300      	movs	r3, #0
 8011eae:	2200      	movs	r2, #0
 8011eb0:	2100      	movs	r1, #0
 8011eb2:	68f8      	ldr	r0, [r7, #12]
 8011eb4:	f002 fac8 	bl	8014448 <USBD_LL_PrepareReceive>
 8011eb8:	e01c      	b.n	8011ef4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ec0:	b2db      	uxtb	r3, r3
 8011ec2:	2b03      	cmp	r3, #3
 8011ec4:	d10f      	bne.n	8011ee6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ecc:	68db      	ldr	r3, [r3, #12]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d009      	beq.n	8011ee6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ee0:	68db      	ldr	r3, [r3, #12]
 8011ee2:	68f8      	ldr	r0, [r7, #12]
 8011ee4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ee6:	2180      	movs	r1, #128	; 0x80
 8011ee8:	68f8      	ldr	r0, [r7, #12]
 8011eea:	f002 f9a5 	bl	8014238 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011eee:	68f8      	ldr	r0, [r7, #12]
 8011ef0:	f001 f855 	bl	8012f9e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d03a      	beq.n	8011f74 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011efe:	68f8      	ldr	r0, [r7, #12]
 8011f00:	f7ff fe42 	bl	8011b88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	2200      	movs	r2, #0
 8011f08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011f0c:	e032      	b.n	8011f74 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011f0e:	7afb      	ldrb	r3, [r7, #11]
 8011f10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011f14:	b2db      	uxtb	r3, r3
 8011f16:	4619      	mov	r1, r3
 8011f18:	68f8      	ldr	r0, [r7, #12]
 8011f1a:	f000 f8f3 	bl	8012104 <USBD_CoreFindEP>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011f22:	7dfb      	ldrb	r3, [r7, #23]
 8011f24:	2bff      	cmp	r3, #255	; 0xff
 8011f26:	d025      	beq.n	8011f74 <USBD_LL_DataInStage+0x15a>
 8011f28:	7dfb      	ldrb	r3, [r7, #23]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d122      	bne.n	8011f74 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f34:	b2db      	uxtb	r3, r3
 8011f36:	2b03      	cmp	r3, #3
 8011f38:	d11c      	bne.n	8011f74 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011f3a:	7dfa      	ldrb	r2, [r7, #23]
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	32ae      	adds	r2, #174	; 0xae
 8011f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f44:	695b      	ldr	r3, [r3, #20]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d014      	beq.n	8011f74 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011f4a:	7dfa      	ldrb	r2, [r7, #23]
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011f52:	7dfa      	ldrb	r2, [r7, #23]
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	32ae      	adds	r2, #174	; 0xae
 8011f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f5c:	695b      	ldr	r3, [r3, #20]
 8011f5e:	7afa      	ldrb	r2, [r7, #11]
 8011f60:	4611      	mov	r1, r2
 8011f62:	68f8      	ldr	r0, [r7, #12]
 8011f64:	4798      	blx	r3
 8011f66:	4603      	mov	r3, r0
 8011f68:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011f6a:	7dbb      	ldrb	r3, [r7, #22]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d001      	beq.n	8011f74 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011f70:	7dbb      	ldrb	r3, [r7, #22]
 8011f72:	e000      	b.n	8011f76 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011f74:	2300      	movs	r3, #0
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	3718      	adds	r7, #24
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}

08011f7e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011f7e:	b580      	push	{r7, lr}
 8011f80:	b084      	sub	sp, #16
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011f86:	2300      	movs	r3, #0
 8011f88:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	2201      	movs	r2, #1
 8011f8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	2200      	movs	r2, #0
 8011f96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2200      	movs	r2, #0
 8011fac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d014      	beq.n	8011fe4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fc0:	685b      	ldr	r3, [r3, #4]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d00e      	beq.n	8011fe4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fcc:	685b      	ldr	r3, [r3, #4]
 8011fce:	687a      	ldr	r2, [r7, #4]
 8011fd0:	6852      	ldr	r2, [r2, #4]
 8011fd2:	b2d2      	uxtb	r2, r2
 8011fd4:	4611      	mov	r1, r2
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	4798      	blx	r3
 8011fda:	4603      	mov	r3, r0
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d001      	beq.n	8011fe4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011fe0:	2303      	movs	r3, #3
 8011fe2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011fe4:	2340      	movs	r3, #64	; 0x40
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	2100      	movs	r1, #0
 8011fea:	6878      	ldr	r0, [r7, #4]
 8011fec:	f002 f8b0 	bl	8014150 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2201      	movs	r2, #1
 8011ff4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	2240      	movs	r2, #64	; 0x40
 8011ffc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012000:	2340      	movs	r3, #64	; 0x40
 8012002:	2200      	movs	r2, #0
 8012004:	2180      	movs	r1, #128	; 0x80
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f002 f8a2 	bl	8014150 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	2201      	movs	r2, #1
 8012010:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2240      	movs	r2, #64	; 0x40
 8012016:	621a      	str	r2, [r3, #32]

  return ret;
 8012018:	7bfb      	ldrb	r3, [r7, #15]
}
 801201a:	4618      	mov	r0, r3
 801201c:	3710      	adds	r7, #16
 801201e:	46bd      	mov	sp, r7
 8012020:	bd80      	pop	{r7, pc}

08012022 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012022:	b480      	push	{r7}
 8012024:	b083      	sub	sp, #12
 8012026:	af00      	add	r7, sp, #0
 8012028:	6078      	str	r0, [r7, #4]
 801202a:	460b      	mov	r3, r1
 801202c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	78fa      	ldrb	r2, [r7, #3]
 8012032:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012034:	2300      	movs	r3, #0
}
 8012036:	4618      	mov	r0, r3
 8012038:	370c      	adds	r7, #12
 801203a:	46bd      	mov	sp, r7
 801203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012040:	4770      	bx	lr

08012042 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012042:	b480      	push	{r7}
 8012044:	b083      	sub	sp, #12
 8012046:	af00      	add	r7, sp, #0
 8012048:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012050:	b2db      	uxtb	r3, r3
 8012052:	2b04      	cmp	r3, #4
 8012054:	d006      	beq.n	8012064 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801205c:	b2da      	uxtb	r2, r3
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2204      	movs	r2, #4
 8012068:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801206c:	2300      	movs	r3, #0
}
 801206e:	4618      	mov	r0, r3
 8012070:	370c      	adds	r7, #12
 8012072:	46bd      	mov	sp, r7
 8012074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012078:	4770      	bx	lr

0801207a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801207a:	b480      	push	{r7}
 801207c:	b083      	sub	sp, #12
 801207e:	af00      	add	r7, sp, #0
 8012080:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012088:	b2db      	uxtb	r3, r3
 801208a:	2b04      	cmp	r3, #4
 801208c:	d106      	bne.n	801209c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8012094:	b2da      	uxtb	r2, r3
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801209c:	2300      	movs	r3, #0
}
 801209e:	4618      	mov	r0, r3
 80120a0:	370c      	adds	r7, #12
 80120a2:	46bd      	mov	sp, r7
 80120a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a8:	4770      	bx	lr

080120aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80120aa:	b580      	push	{r7, lr}
 80120ac:	b082      	sub	sp, #8
 80120ae:	af00      	add	r7, sp, #0
 80120b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120b8:	b2db      	uxtb	r3, r3
 80120ba:	2b03      	cmp	r3, #3
 80120bc:	d110      	bne.n	80120e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d00b      	beq.n	80120e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120ce:	69db      	ldr	r3, [r3, #28]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d005      	beq.n	80120e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120da:	69db      	ldr	r3, [r3, #28]
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80120e0:	2300      	movs	r3, #0
}
 80120e2:	4618      	mov	r0, r3
 80120e4:	3708      	adds	r7, #8
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}

080120ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80120ea:	b480      	push	{r7}
 80120ec:	b083      	sub	sp, #12
 80120ee:	af00      	add	r7, sp, #0
 80120f0:	6078      	str	r0, [r7, #4]
 80120f2:	460b      	mov	r3, r1
 80120f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80120f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80120f8:	4618      	mov	r0, r3
 80120fa:	370c      	adds	r7, #12
 80120fc:	46bd      	mov	sp, r7
 80120fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012102:	4770      	bx	lr

08012104 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012104:	b480      	push	{r7}
 8012106:	b083      	sub	sp, #12
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	460b      	mov	r3, r1
 801210e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012110:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012112:	4618      	mov	r0, r3
 8012114:	370c      	adds	r7, #12
 8012116:	46bd      	mov	sp, r7
 8012118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211c:	4770      	bx	lr

0801211e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801211e:	b580      	push	{r7, lr}
 8012120:	b086      	sub	sp, #24
 8012122:	af00      	add	r7, sp, #0
 8012124:	6078      	str	r0, [r7, #4]
 8012126:	460b      	mov	r3, r1
 8012128:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8012132:	2300      	movs	r3, #0
 8012134:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	885b      	ldrh	r3, [r3, #2]
 801213a:	b29a      	uxth	r2, r3
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	781b      	ldrb	r3, [r3, #0]
 8012140:	b29b      	uxth	r3, r3
 8012142:	429a      	cmp	r2, r3
 8012144:	d920      	bls.n	8012188 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	781b      	ldrb	r3, [r3, #0]
 801214a:	b29b      	uxth	r3, r3
 801214c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801214e:	e013      	b.n	8012178 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8012150:	f107 030a 	add.w	r3, r7, #10
 8012154:	4619      	mov	r1, r3
 8012156:	6978      	ldr	r0, [r7, #20]
 8012158:	f000 f81b 	bl	8012192 <USBD_GetNextDesc>
 801215c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	785b      	ldrb	r3, [r3, #1]
 8012162:	2b05      	cmp	r3, #5
 8012164:	d108      	bne.n	8012178 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	789b      	ldrb	r3, [r3, #2]
 801216e:	78fa      	ldrb	r2, [r7, #3]
 8012170:	429a      	cmp	r2, r3
 8012172:	d008      	beq.n	8012186 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8012174:	2300      	movs	r3, #0
 8012176:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	885b      	ldrh	r3, [r3, #2]
 801217c:	b29a      	uxth	r2, r3
 801217e:	897b      	ldrh	r3, [r7, #10]
 8012180:	429a      	cmp	r2, r3
 8012182:	d8e5      	bhi.n	8012150 <USBD_GetEpDesc+0x32>
 8012184:	e000      	b.n	8012188 <USBD_GetEpDesc+0x6a>
          break;
 8012186:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8012188:	693b      	ldr	r3, [r7, #16]
}
 801218a:	4618      	mov	r0, r3
 801218c:	3718      	adds	r7, #24
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}

08012192 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8012192:	b480      	push	{r7}
 8012194:	b085      	sub	sp, #20
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
 801219a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	881a      	ldrh	r2, [r3, #0]
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	b29b      	uxth	r3, r3
 80121aa:	4413      	add	r3, r2
 80121ac:	b29a      	uxth	r2, r3
 80121ae:	683b      	ldr	r3, [r7, #0]
 80121b0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	781b      	ldrb	r3, [r3, #0]
 80121b6:	461a      	mov	r2, r3
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	4413      	add	r3, r2
 80121bc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80121be:	68fb      	ldr	r3, [r7, #12]
}
 80121c0:	4618      	mov	r0, r3
 80121c2:	3714      	adds	r7, #20
 80121c4:	46bd      	mov	sp, r7
 80121c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ca:	4770      	bx	lr

080121cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80121cc:	b480      	push	{r7}
 80121ce:	b087      	sub	sp, #28
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	781b      	ldrb	r3, [r3, #0]
 80121dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80121de:	697b      	ldr	r3, [r7, #20]
 80121e0:	3301      	adds	r3, #1
 80121e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80121e4:	697b      	ldr	r3, [r7, #20]
 80121e6:	781b      	ldrb	r3, [r3, #0]
 80121e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80121ea:	8a3b      	ldrh	r3, [r7, #16]
 80121ec:	021b      	lsls	r3, r3, #8
 80121ee:	b21a      	sxth	r2, r3
 80121f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80121f4:	4313      	orrs	r3, r2
 80121f6:	b21b      	sxth	r3, r3
 80121f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80121fa:	89fb      	ldrh	r3, [r7, #14]
}
 80121fc:	4618      	mov	r0, r3
 80121fe:	371c      	adds	r7, #28
 8012200:	46bd      	mov	sp, r7
 8012202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012206:	4770      	bx	lr

08012208 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b084      	sub	sp, #16
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
 8012210:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012212:	2300      	movs	r3, #0
 8012214:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	781b      	ldrb	r3, [r3, #0]
 801221a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801221e:	2b40      	cmp	r3, #64	; 0x40
 8012220:	d005      	beq.n	801222e <USBD_StdDevReq+0x26>
 8012222:	2b40      	cmp	r3, #64	; 0x40
 8012224:	d857      	bhi.n	80122d6 <USBD_StdDevReq+0xce>
 8012226:	2b00      	cmp	r3, #0
 8012228:	d00f      	beq.n	801224a <USBD_StdDevReq+0x42>
 801222a:	2b20      	cmp	r3, #32
 801222c:	d153      	bne.n	80122d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	32ae      	adds	r2, #174	; 0xae
 8012238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801223c:	689b      	ldr	r3, [r3, #8]
 801223e:	6839      	ldr	r1, [r7, #0]
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	4798      	blx	r3
 8012244:	4603      	mov	r3, r0
 8012246:	73fb      	strb	r3, [r7, #15]
      break;
 8012248:	e04a      	b.n	80122e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	785b      	ldrb	r3, [r3, #1]
 801224e:	2b09      	cmp	r3, #9
 8012250:	d83b      	bhi.n	80122ca <USBD_StdDevReq+0xc2>
 8012252:	a201      	add	r2, pc, #4	; (adr r2, 8012258 <USBD_StdDevReq+0x50>)
 8012254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012258:	080122ad 	.word	0x080122ad
 801225c:	080122c1 	.word	0x080122c1
 8012260:	080122cb 	.word	0x080122cb
 8012264:	080122b7 	.word	0x080122b7
 8012268:	080122cb 	.word	0x080122cb
 801226c:	0801228b 	.word	0x0801228b
 8012270:	08012281 	.word	0x08012281
 8012274:	080122cb 	.word	0x080122cb
 8012278:	080122a3 	.word	0x080122a3
 801227c:	08012295 	.word	0x08012295
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012280:	6839      	ldr	r1, [r7, #0]
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f000 fa3c 	bl	8012700 <USBD_GetDescriptor>
          break;
 8012288:	e024      	b.n	80122d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801228a:	6839      	ldr	r1, [r7, #0]
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f000 fbcb 	bl	8012a28 <USBD_SetAddress>
          break;
 8012292:	e01f      	b.n	80122d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012294:	6839      	ldr	r1, [r7, #0]
 8012296:	6878      	ldr	r0, [r7, #4]
 8012298:	f000 fc0a 	bl	8012ab0 <USBD_SetConfig>
 801229c:	4603      	mov	r3, r0
 801229e:	73fb      	strb	r3, [r7, #15]
          break;
 80122a0:	e018      	b.n	80122d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80122a2:	6839      	ldr	r1, [r7, #0]
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f000 fcad 	bl	8012c04 <USBD_GetConfig>
          break;
 80122aa:	e013      	b.n	80122d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80122ac:	6839      	ldr	r1, [r7, #0]
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f000 fcde 	bl	8012c70 <USBD_GetStatus>
          break;
 80122b4:	e00e      	b.n	80122d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80122b6:	6839      	ldr	r1, [r7, #0]
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 fd0d 	bl	8012cd8 <USBD_SetFeature>
          break;
 80122be:	e009      	b.n	80122d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80122c0:	6839      	ldr	r1, [r7, #0]
 80122c2:	6878      	ldr	r0, [r7, #4]
 80122c4:	f000 fd31 	bl	8012d2a <USBD_ClrFeature>
          break;
 80122c8:	e004      	b.n	80122d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80122ca:	6839      	ldr	r1, [r7, #0]
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f000 fd88 	bl	8012de2 <USBD_CtlError>
          break;
 80122d2:	bf00      	nop
      }
      break;
 80122d4:	e004      	b.n	80122e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80122d6:	6839      	ldr	r1, [r7, #0]
 80122d8:	6878      	ldr	r0, [r7, #4]
 80122da:	f000 fd82 	bl	8012de2 <USBD_CtlError>
      break;
 80122de:	bf00      	nop
  }

  return ret;
 80122e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	3710      	adds	r7, #16
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}
 80122ea:	bf00      	nop

080122ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b084      	sub	sp, #16
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80122f6:	2300      	movs	r3, #0
 80122f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	781b      	ldrb	r3, [r3, #0]
 80122fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012302:	2b40      	cmp	r3, #64	; 0x40
 8012304:	d005      	beq.n	8012312 <USBD_StdItfReq+0x26>
 8012306:	2b40      	cmp	r3, #64	; 0x40
 8012308:	d852      	bhi.n	80123b0 <USBD_StdItfReq+0xc4>
 801230a:	2b00      	cmp	r3, #0
 801230c:	d001      	beq.n	8012312 <USBD_StdItfReq+0x26>
 801230e:	2b20      	cmp	r3, #32
 8012310:	d14e      	bne.n	80123b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012318:	b2db      	uxtb	r3, r3
 801231a:	3b01      	subs	r3, #1
 801231c:	2b02      	cmp	r3, #2
 801231e:	d840      	bhi.n	80123a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	889b      	ldrh	r3, [r3, #4]
 8012324:	b2db      	uxtb	r3, r3
 8012326:	2b01      	cmp	r3, #1
 8012328:	d836      	bhi.n	8012398 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	889b      	ldrh	r3, [r3, #4]
 801232e:	b2db      	uxtb	r3, r3
 8012330:	4619      	mov	r1, r3
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f7ff fed9 	bl	80120ea <USBD_CoreFindIF>
 8012338:	4603      	mov	r3, r0
 801233a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801233c:	7bbb      	ldrb	r3, [r7, #14]
 801233e:	2bff      	cmp	r3, #255	; 0xff
 8012340:	d01d      	beq.n	801237e <USBD_StdItfReq+0x92>
 8012342:	7bbb      	ldrb	r3, [r7, #14]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d11a      	bne.n	801237e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012348:	7bba      	ldrb	r2, [r7, #14]
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	32ae      	adds	r2, #174	; 0xae
 801234e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012352:	689b      	ldr	r3, [r3, #8]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d00f      	beq.n	8012378 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8012358:	7bba      	ldrb	r2, [r7, #14]
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012360:	7bba      	ldrb	r2, [r7, #14]
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	32ae      	adds	r2, #174	; 0xae
 8012366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801236a:	689b      	ldr	r3, [r3, #8]
 801236c:	6839      	ldr	r1, [r7, #0]
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	4798      	blx	r3
 8012372:	4603      	mov	r3, r0
 8012374:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012376:	e004      	b.n	8012382 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012378:	2303      	movs	r3, #3
 801237a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801237c:	e001      	b.n	8012382 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801237e:	2303      	movs	r3, #3
 8012380:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	88db      	ldrh	r3, [r3, #6]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d110      	bne.n	80123ac <USBD_StdItfReq+0xc0>
 801238a:	7bfb      	ldrb	r3, [r7, #15]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d10d      	bne.n	80123ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f000 fdf1 	bl	8012f78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012396:	e009      	b.n	80123ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8012398:	6839      	ldr	r1, [r7, #0]
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f000 fd21 	bl	8012de2 <USBD_CtlError>
          break;
 80123a0:	e004      	b.n	80123ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80123a2:	6839      	ldr	r1, [r7, #0]
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f000 fd1c 	bl	8012de2 <USBD_CtlError>
          break;
 80123aa:	e000      	b.n	80123ae <USBD_StdItfReq+0xc2>
          break;
 80123ac:	bf00      	nop
      }
      break;
 80123ae:	e004      	b.n	80123ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80123b0:	6839      	ldr	r1, [r7, #0]
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f000 fd15 	bl	8012de2 <USBD_CtlError>
      break;
 80123b8:	bf00      	nop
  }

  return ret;
 80123ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80123bc:	4618      	mov	r0, r3
 80123be:	3710      	adds	r7, #16
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd80      	pop	{r7, pc}

080123c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b084      	sub	sp, #16
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
 80123cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80123ce:	2300      	movs	r3, #0
 80123d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	889b      	ldrh	r3, [r3, #4]
 80123d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	781b      	ldrb	r3, [r3, #0]
 80123dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80123e0:	2b40      	cmp	r3, #64	; 0x40
 80123e2:	d007      	beq.n	80123f4 <USBD_StdEPReq+0x30>
 80123e4:	2b40      	cmp	r3, #64	; 0x40
 80123e6:	f200 817f 	bhi.w	80126e8 <USBD_StdEPReq+0x324>
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d02a      	beq.n	8012444 <USBD_StdEPReq+0x80>
 80123ee:	2b20      	cmp	r3, #32
 80123f0:	f040 817a 	bne.w	80126e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80123f4:	7bbb      	ldrb	r3, [r7, #14]
 80123f6:	4619      	mov	r1, r3
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f7ff fe83 	bl	8012104 <USBD_CoreFindEP>
 80123fe:	4603      	mov	r3, r0
 8012400:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012402:	7b7b      	ldrb	r3, [r7, #13]
 8012404:	2bff      	cmp	r3, #255	; 0xff
 8012406:	f000 8174 	beq.w	80126f2 <USBD_StdEPReq+0x32e>
 801240a:	7b7b      	ldrb	r3, [r7, #13]
 801240c:	2b00      	cmp	r3, #0
 801240e:	f040 8170 	bne.w	80126f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8012412:	7b7a      	ldrb	r2, [r7, #13]
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801241a:	7b7a      	ldrb	r2, [r7, #13]
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	32ae      	adds	r2, #174	; 0xae
 8012420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012424:	689b      	ldr	r3, [r3, #8]
 8012426:	2b00      	cmp	r3, #0
 8012428:	f000 8163 	beq.w	80126f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801242c:	7b7a      	ldrb	r2, [r7, #13]
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	32ae      	adds	r2, #174	; 0xae
 8012432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012436:	689b      	ldr	r3, [r3, #8]
 8012438:	6839      	ldr	r1, [r7, #0]
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	4798      	blx	r3
 801243e:	4603      	mov	r3, r0
 8012440:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012442:	e156      	b.n	80126f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	785b      	ldrb	r3, [r3, #1]
 8012448:	2b03      	cmp	r3, #3
 801244a:	d008      	beq.n	801245e <USBD_StdEPReq+0x9a>
 801244c:	2b03      	cmp	r3, #3
 801244e:	f300 8145 	bgt.w	80126dc <USBD_StdEPReq+0x318>
 8012452:	2b00      	cmp	r3, #0
 8012454:	f000 809b 	beq.w	801258e <USBD_StdEPReq+0x1ca>
 8012458:	2b01      	cmp	r3, #1
 801245a:	d03c      	beq.n	80124d6 <USBD_StdEPReq+0x112>
 801245c:	e13e      	b.n	80126dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012464:	b2db      	uxtb	r3, r3
 8012466:	2b02      	cmp	r3, #2
 8012468:	d002      	beq.n	8012470 <USBD_StdEPReq+0xac>
 801246a:	2b03      	cmp	r3, #3
 801246c:	d016      	beq.n	801249c <USBD_StdEPReq+0xd8>
 801246e:	e02c      	b.n	80124ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012470:	7bbb      	ldrb	r3, [r7, #14]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d00d      	beq.n	8012492 <USBD_StdEPReq+0xce>
 8012476:	7bbb      	ldrb	r3, [r7, #14]
 8012478:	2b80      	cmp	r3, #128	; 0x80
 801247a:	d00a      	beq.n	8012492 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801247c:	7bbb      	ldrb	r3, [r7, #14]
 801247e:	4619      	mov	r1, r3
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f001 fed9 	bl	8014238 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012486:	2180      	movs	r1, #128	; 0x80
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f001 fed5 	bl	8014238 <USBD_LL_StallEP>
 801248e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012490:	e020      	b.n	80124d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8012492:	6839      	ldr	r1, [r7, #0]
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f000 fca4 	bl	8012de2 <USBD_CtlError>
              break;
 801249a:	e01b      	b.n	80124d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	885b      	ldrh	r3, [r3, #2]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d10e      	bne.n	80124c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80124a4:	7bbb      	ldrb	r3, [r7, #14]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d00b      	beq.n	80124c2 <USBD_StdEPReq+0xfe>
 80124aa:	7bbb      	ldrb	r3, [r7, #14]
 80124ac:	2b80      	cmp	r3, #128	; 0x80
 80124ae:	d008      	beq.n	80124c2 <USBD_StdEPReq+0xfe>
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	88db      	ldrh	r3, [r3, #6]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d104      	bne.n	80124c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80124b8:	7bbb      	ldrb	r3, [r7, #14]
 80124ba:	4619      	mov	r1, r3
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f001 febb 	bl	8014238 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f000 fd58 	bl	8012f78 <USBD_CtlSendStatus>

              break;
 80124c8:	e004      	b.n	80124d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80124ca:	6839      	ldr	r1, [r7, #0]
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f000 fc88 	bl	8012de2 <USBD_CtlError>
              break;
 80124d2:	bf00      	nop
          }
          break;
 80124d4:	e107      	b.n	80126e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124dc:	b2db      	uxtb	r3, r3
 80124de:	2b02      	cmp	r3, #2
 80124e0:	d002      	beq.n	80124e8 <USBD_StdEPReq+0x124>
 80124e2:	2b03      	cmp	r3, #3
 80124e4:	d016      	beq.n	8012514 <USBD_StdEPReq+0x150>
 80124e6:	e04b      	b.n	8012580 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80124e8:	7bbb      	ldrb	r3, [r7, #14]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d00d      	beq.n	801250a <USBD_StdEPReq+0x146>
 80124ee:	7bbb      	ldrb	r3, [r7, #14]
 80124f0:	2b80      	cmp	r3, #128	; 0x80
 80124f2:	d00a      	beq.n	801250a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80124f4:	7bbb      	ldrb	r3, [r7, #14]
 80124f6:	4619      	mov	r1, r3
 80124f8:	6878      	ldr	r0, [r7, #4]
 80124fa:	f001 fe9d 	bl	8014238 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80124fe:	2180      	movs	r1, #128	; 0x80
 8012500:	6878      	ldr	r0, [r7, #4]
 8012502:	f001 fe99 	bl	8014238 <USBD_LL_StallEP>
 8012506:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012508:	e040      	b.n	801258c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801250a:	6839      	ldr	r1, [r7, #0]
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f000 fc68 	bl	8012de2 <USBD_CtlError>
              break;
 8012512:	e03b      	b.n	801258c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	885b      	ldrh	r3, [r3, #2]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d136      	bne.n	801258a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801251c:	7bbb      	ldrb	r3, [r7, #14]
 801251e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012522:	2b00      	cmp	r3, #0
 8012524:	d004      	beq.n	8012530 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012526:	7bbb      	ldrb	r3, [r7, #14]
 8012528:	4619      	mov	r1, r3
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f001 feba 	bl	80142a4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f000 fd21 	bl	8012f78 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012536:	7bbb      	ldrb	r3, [r7, #14]
 8012538:	4619      	mov	r1, r3
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f7ff fde2 	bl	8012104 <USBD_CoreFindEP>
 8012540:	4603      	mov	r3, r0
 8012542:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012544:	7b7b      	ldrb	r3, [r7, #13]
 8012546:	2bff      	cmp	r3, #255	; 0xff
 8012548:	d01f      	beq.n	801258a <USBD_StdEPReq+0x1c6>
 801254a:	7b7b      	ldrb	r3, [r7, #13]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d11c      	bne.n	801258a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8012550:	7b7a      	ldrb	r2, [r7, #13]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012558:	7b7a      	ldrb	r2, [r7, #13]
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	32ae      	adds	r2, #174	; 0xae
 801255e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012562:	689b      	ldr	r3, [r3, #8]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d010      	beq.n	801258a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012568:	7b7a      	ldrb	r2, [r7, #13]
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	32ae      	adds	r2, #174	; 0xae
 801256e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012572:	689b      	ldr	r3, [r3, #8]
 8012574:	6839      	ldr	r1, [r7, #0]
 8012576:	6878      	ldr	r0, [r7, #4]
 8012578:	4798      	blx	r3
 801257a:	4603      	mov	r3, r0
 801257c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801257e:	e004      	b.n	801258a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012580:	6839      	ldr	r1, [r7, #0]
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f000 fc2d 	bl	8012de2 <USBD_CtlError>
              break;
 8012588:	e000      	b.n	801258c <USBD_StdEPReq+0x1c8>
              break;
 801258a:	bf00      	nop
          }
          break;
 801258c:	e0ab      	b.n	80126e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012594:	b2db      	uxtb	r3, r3
 8012596:	2b02      	cmp	r3, #2
 8012598:	d002      	beq.n	80125a0 <USBD_StdEPReq+0x1dc>
 801259a:	2b03      	cmp	r3, #3
 801259c:	d032      	beq.n	8012604 <USBD_StdEPReq+0x240>
 801259e:	e097      	b.n	80126d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80125a0:	7bbb      	ldrb	r3, [r7, #14]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d007      	beq.n	80125b6 <USBD_StdEPReq+0x1f2>
 80125a6:	7bbb      	ldrb	r3, [r7, #14]
 80125a8:	2b80      	cmp	r3, #128	; 0x80
 80125aa:	d004      	beq.n	80125b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80125ac:	6839      	ldr	r1, [r7, #0]
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f000 fc17 	bl	8012de2 <USBD_CtlError>
                break;
 80125b4:	e091      	b.n	80126da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80125b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	da0b      	bge.n	80125d6 <USBD_StdEPReq+0x212>
 80125be:	7bbb      	ldrb	r3, [r7, #14]
 80125c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80125c4:	4613      	mov	r3, r2
 80125c6:	009b      	lsls	r3, r3, #2
 80125c8:	4413      	add	r3, r2
 80125ca:	009b      	lsls	r3, r3, #2
 80125cc:	3310      	adds	r3, #16
 80125ce:	687a      	ldr	r2, [r7, #4]
 80125d0:	4413      	add	r3, r2
 80125d2:	3304      	adds	r3, #4
 80125d4:	e00b      	b.n	80125ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80125d6:	7bbb      	ldrb	r3, [r7, #14]
 80125d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80125dc:	4613      	mov	r3, r2
 80125de:	009b      	lsls	r3, r3, #2
 80125e0:	4413      	add	r3, r2
 80125e2:	009b      	lsls	r3, r3, #2
 80125e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80125e8:	687a      	ldr	r2, [r7, #4]
 80125ea:	4413      	add	r3, r2
 80125ec:	3304      	adds	r3, #4
 80125ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80125f0:	68bb      	ldr	r3, [r7, #8]
 80125f2:	2200      	movs	r2, #0
 80125f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	2202      	movs	r2, #2
 80125fa:	4619      	mov	r1, r3
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	f000 fc61 	bl	8012ec4 <USBD_CtlSendData>
              break;
 8012602:	e06a      	b.n	80126da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012604:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012608:	2b00      	cmp	r3, #0
 801260a:	da11      	bge.n	8012630 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801260c:	7bbb      	ldrb	r3, [r7, #14]
 801260e:	f003 020f 	and.w	r2, r3, #15
 8012612:	6879      	ldr	r1, [r7, #4]
 8012614:	4613      	mov	r3, r2
 8012616:	009b      	lsls	r3, r3, #2
 8012618:	4413      	add	r3, r2
 801261a:	009b      	lsls	r3, r3, #2
 801261c:	440b      	add	r3, r1
 801261e:	3324      	adds	r3, #36	; 0x24
 8012620:	881b      	ldrh	r3, [r3, #0]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d117      	bne.n	8012656 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012626:	6839      	ldr	r1, [r7, #0]
 8012628:	6878      	ldr	r0, [r7, #4]
 801262a:	f000 fbda 	bl	8012de2 <USBD_CtlError>
                  break;
 801262e:	e054      	b.n	80126da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012630:	7bbb      	ldrb	r3, [r7, #14]
 8012632:	f003 020f 	and.w	r2, r3, #15
 8012636:	6879      	ldr	r1, [r7, #4]
 8012638:	4613      	mov	r3, r2
 801263a:	009b      	lsls	r3, r3, #2
 801263c:	4413      	add	r3, r2
 801263e:	009b      	lsls	r3, r3, #2
 8012640:	440b      	add	r3, r1
 8012642:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012646:	881b      	ldrh	r3, [r3, #0]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d104      	bne.n	8012656 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801264c:	6839      	ldr	r1, [r7, #0]
 801264e:	6878      	ldr	r0, [r7, #4]
 8012650:	f000 fbc7 	bl	8012de2 <USBD_CtlError>
                  break;
 8012654:	e041      	b.n	80126da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012656:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801265a:	2b00      	cmp	r3, #0
 801265c:	da0b      	bge.n	8012676 <USBD_StdEPReq+0x2b2>
 801265e:	7bbb      	ldrb	r3, [r7, #14]
 8012660:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012664:	4613      	mov	r3, r2
 8012666:	009b      	lsls	r3, r3, #2
 8012668:	4413      	add	r3, r2
 801266a:	009b      	lsls	r3, r3, #2
 801266c:	3310      	adds	r3, #16
 801266e:	687a      	ldr	r2, [r7, #4]
 8012670:	4413      	add	r3, r2
 8012672:	3304      	adds	r3, #4
 8012674:	e00b      	b.n	801268e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012676:	7bbb      	ldrb	r3, [r7, #14]
 8012678:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801267c:	4613      	mov	r3, r2
 801267e:	009b      	lsls	r3, r3, #2
 8012680:	4413      	add	r3, r2
 8012682:	009b      	lsls	r3, r3, #2
 8012684:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012688:	687a      	ldr	r2, [r7, #4]
 801268a:	4413      	add	r3, r2
 801268c:	3304      	adds	r3, #4
 801268e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012690:	7bbb      	ldrb	r3, [r7, #14]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d002      	beq.n	801269c <USBD_StdEPReq+0x2d8>
 8012696:	7bbb      	ldrb	r3, [r7, #14]
 8012698:	2b80      	cmp	r3, #128	; 0x80
 801269a:	d103      	bne.n	80126a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	2200      	movs	r2, #0
 80126a0:	601a      	str	r2, [r3, #0]
 80126a2:	e00e      	b.n	80126c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80126a4:	7bbb      	ldrb	r3, [r7, #14]
 80126a6:	4619      	mov	r1, r3
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f001 fe31 	bl	8014310 <USBD_LL_IsStallEP>
 80126ae:	4603      	mov	r3, r0
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d003      	beq.n	80126bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80126b4:	68bb      	ldr	r3, [r7, #8]
 80126b6:	2201      	movs	r2, #1
 80126b8:	601a      	str	r2, [r3, #0]
 80126ba:	e002      	b.n	80126c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80126bc:	68bb      	ldr	r3, [r7, #8]
 80126be:	2200      	movs	r2, #0
 80126c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	2202      	movs	r2, #2
 80126c6:	4619      	mov	r1, r3
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f000 fbfb 	bl	8012ec4 <USBD_CtlSendData>
              break;
 80126ce:	e004      	b.n	80126da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80126d0:	6839      	ldr	r1, [r7, #0]
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	f000 fb85 	bl	8012de2 <USBD_CtlError>
              break;
 80126d8:	bf00      	nop
          }
          break;
 80126da:	e004      	b.n	80126e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80126dc:	6839      	ldr	r1, [r7, #0]
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f000 fb7f 	bl	8012de2 <USBD_CtlError>
          break;
 80126e4:	bf00      	nop
      }
      break;
 80126e6:	e005      	b.n	80126f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80126e8:	6839      	ldr	r1, [r7, #0]
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f000 fb79 	bl	8012de2 <USBD_CtlError>
      break;
 80126f0:	e000      	b.n	80126f4 <USBD_StdEPReq+0x330>
      break;
 80126f2:	bf00      	nop
  }

  return ret;
 80126f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80126f6:	4618      	mov	r0, r3
 80126f8:	3710      	adds	r7, #16
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}
	...

08012700 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b084      	sub	sp, #16
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801270a:	2300      	movs	r3, #0
 801270c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801270e:	2300      	movs	r3, #0
 8012710:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012712:	2300      	movs	r3, #0
 8012714:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	885b      	ldrh	r3, [r3, #2]
 801271a:	0a1b      	lsrs	r3, r3, #8
 801271c:	b29b      	uxth	r3, r3
 801271e:	3b01      	subs	r3, #1
 8012720:	2b0e      	cmp	r3, #14
 8012722:	f200 8152 	bhi.w	80129ca <USBD_GetDescriptor+0x2ca>
 8012726:	a201      	add	r2, pc, #4	; (adr r2, 801272c <USBD_GetDescriptor+0x2c>)
 8012728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801272c:	0801279d 	.word	0x0801279d
 8012730:	080127b5 	.word	0x080127b5
 8012734:	080127f5 	.word	0x080127f5
 8012738:	080129cb 	.word	0x080129cb
 801273c:	080129cb 	.word	0x080129cb
 8012740:	0801296b 	.word	0x0801296b
 8012744:	08012997 	.word	0x08012997
 8012748:	080129cb 	.word	0x080129cb
 801274c:	080129cb 	.word	0x080129cb
 8012750:	080129cb 	.word	0x080129cb
 8012754:	080129cb 	.word	0x080129cb
 8012758:	080129cb 	.word	0x080129cb
 801275c:	080129cb 	.word	0x080129cb
 8012760:	080129cb 	.word	0x080129cb
 8012764:	08012769 	.word	0x08012769
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801276e:	69db      	ldr	r3, [r3, #28]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d00b      	beq.n	801278c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801277a:	69db      	ldr	r3, [r3, #28]
 801277c:	687a      	ldr	r2, [r7, #4]
 801277e:	7c12      	ldrb	r2, [r2, #16]
 8012780:	f107 0108 	add.w	r1, r7, #8
 8012784:	4610      	mov	r0, r2
 8012786:	4798      	blx	r3
 8012788:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801278a:	e126      	b.n	80129da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801278c:	6839      	ldr	r1, [r7, #0]
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f000 fb27 	bl	8012de2 <USBD_CtlError>
        err++;
 8012794:	7afb      	ldrb	r3, [r7, #11]
 8012796:	3301      	adds	r3, #1
 8012798:	72fb      	strb	r3, [r7, #11]
      break;
 801279a:	e11e      	b.n	80129da <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	687a      	ldr	r2, [r7, #4]
 80127a6:	7c12      	ldrb	r2, [r2, #16]
 80127a8:	f107 0108 	add.w	r1, r7, #8
 80127ac:	4610      	mov	r0, r2
 80127ae:	4798      	blx	r3
 80127b0:	60f8      	str	r0, [r7, #12]
      break;
 80127b2:	e112      	b.n	80129da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	7c1b      	ldrb	r3, [r3, #16]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d10d      	bne.n	80127d8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127c4:	f107 0208 	add.w	r2, r7, #8
 80127c8:	4610      	mov	r0, r2
 80127ca:	4798      	blx	r3
 80127cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	3301      	adds	r3, #1
 80127d2:	2202      	movs	r2, #2
 80127d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80127d6:	e100      	b.n	80129da <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127e0:	f107 0208 	add.w	r2, r7, #8
 80127e4:	4610      	mov	r0, r2
 80127e6:	4798      	blx	r3
 80127e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	3301      	adds	r3, #1
 80127ee:	2202      	movs	r2, #2
 80127f0:	701a      	strb	r2, [r3, #0]
      break;
 80127f2:	e0f2      	b.n	80129da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	885b      	ldrh	r3, [r3, #2]
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	2b05      	cmp	r3, #5
 80127fc:	f200 80ac 	bhi.w	8012958 <USBD_GetDescriptor+0x258>
 8012800:	a201      	add	r2, pc, #4	; (adr r2, 8012808 <USBD_GetDescriptor+0x108>)
 8012802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012806:	bf00      	nop
 8012808:	08012821 	.word	0x08012821
 801280c:	08012855 	.word	0x08012855
 8012810:	08012889 	.word	0x08012889
 8012814:	080128bd 	.word	0x080128bd
 8012818:	080128f1 	.word	0x080128f1
 801281c:	08012925 	.word	0x08012925
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012826:	685b      	ldr	r3, [r3, #4]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d00b      	beq.n	8012844 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012832:	685b      	ldr	r3, [r3, #4]
 8012834:	687a      	ldr	r2, [r7, #4]
 8012836:	7c12      	ldrb	r2, [r2, #16]
 8012838:	f107 0108 	add.w	r1, r7, #8
 801283c:	4610      	mov	r0, r2
 801283e:	4798      	blx	r3
 8012840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012842:	e091      	b.n	8012968 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012844:	6839      	ldr	r1, [r7, #0]
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f000 facb 	bl	8012de2 <USBD_CtlError>
            err++;
 801284c:	7afb      	ldrb	r3, [r7, #11]
 801284e:	3301      	adds	r3, #1
 8012850:	72fb      	strb	r3, [r7, #11]
          break;
 8012852:	e089      	b.n	8012968 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801285a:	689b      	ldr	r3, [r3, #8]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d00b      	beq.n	8012878 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012866:	689b      	ldr	r3, [r3, #8]
 8012868:	687a      	ldr	r2, [r7, #4]
 801286a:	7c12      	ldrb	r2, [r2, #16]
 801286c:	f107 0108 	add.w	r1, r7, #8
 8012870:	4610      	mov	r0, r2
 8012872:	4798      	blx	r3
 8012874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012876:	e077      	b.n	8012968 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012878:	6839      	ldr	r1, [r7, #0]
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	f000 fab1 	bl	8012de2 <USBD_CtlError>
            err++;
 8012880:	7afb      	ldrb	r3, [r7, #11]
 8012882:	3301      	adds	r3, #1
 8012884:	72fb      	strb	r3, [r7, #11]
          break;
 8012886:	e06f      	b.n	8012968 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801288e:	68db      	ldr	r3, [r3, #12]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d00b      	beq.n	80128ac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801289a:	68db      	ldr	r3, [r3, #12]
 801289c:	687a      	ldr	r2, [r7, #4]
 801289e:	7c12      	ldrb	r2, [r2, #16]
 80128a0:	f107 0108 	add.w	r1, r7, #8
 80128a4:	4610      	mov	r0, r2
 80128a6:	4798      	blx	r3
 80128a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80128aa:	e05d      	b.n	8012968 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80128ac:	6839      	ldr	r1, [r7, #0]
 80128ae:	6878      	ldr	r0, [r7, #4]
 80128b0:	f000 fa97 	bl	8012de2 <USBD_CtlError>
            err++;
 80128b4:	7afb      	ldrb	r3, [r7, #11]
 80128b6:	3301      	adds	r3, #1
 80128b8:	72fb      	strb	r3, [r7, #11]
          break;
 80128ba:	e055      	b.n	8012968 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128c2:	691b      	ldr	r3, [r3, #16]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d00b      	beq.n	80128e0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128ce:	691b      	ldr	r3, [r3, #16]
 80128d0:	687a      	ldr	r2, [r7, #4]
 80128d2:	7c12      	ldrb	r2, [r2, #16]
 80128d4:	f107 0108 	add.w	r1, r7, #8
 80128d8:	4610      	mov	r0, r2
 80128da:	4798      	blx	r3
 80128dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80128de:	e043      	b.n	8012968 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80128e0:	6839      	ldr	r1, [r7, #0]
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f000 fa7d 	bl	8012de2 <USBD_CtlError>
            err++;
 80128e8:	7afb      	ldrb	r3, [r7, #11]
 80128ea:	3301      	adds	r3, #1
 80128ec:	72fb      	strb	r3, [r7, #11]
          break;
 80128ee:	e03b      	b.n	8012968 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128f6:	695b      	ldr	r3, [r3, #20]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d00b      	beq.n	8012914 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012902:	695b      	ldr	r3, [r3, #20]
 8012904:	687a      	ldr	r2, [r7, #4]
 8012906:	7c12      	ldrb	r2, [r2, #16]
 8012908:	f107 0108 	add.w	r1, r7, #8
 801290c:	4610      	mov	r0, r2
 801290e:	4798      	blx	r3
 8012910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012912:	e029      	b.n	8012968 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012914:	6839      	ldr	r1, [r7, #0]
 8012916:	6878      	ldr	r0, [r7, #4]
 8012918:	f000 fa63 	bl	8012de2 <USBD_CtlError>
            err++;
 801291c:	7afb      	ldrb	r3, [r7, #11]
 801291e:	3301      	adds	r3, #1
 8012920:	72fb      	strb	r3, [r7, #11]
          break;
 8012922:	e021      	b.n	8012968 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801292a:	699b      	ldr	r3, [r3, #24]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d00b      	beq.n	8012948 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012936:	699b      	ldr	r3, [r3, #24]
 8012938:	687a      	ldr	r2, [r7, #4]
 801293a:	7c12      	ldrb	r2, [r2, #16]
 801293c:	f107 0108 	add.w	r1, r7, #8
 8012940:	4610      	mov	r0, r2
 8012942:	4798      	blx	r3
 8012944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012946:	e00f      	b.n	8012968 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012948:	6839      	ldr	r1, [r7, #0]
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f000 fa49 	bl	8012de2 <USBD_CtlError>
            err++;
 8012950:	7afb      	ldrb	r3, [r7, #11]
 8012952:	3301      	adds	r3, #1
 8012954:	72fb      	strb	r3, [r7, #11]
          break;
 8012956:	e007      	b.n	8012968 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012958:	6839      	ldr	r1, [r7, #0]
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	f000 fa41 	bl	8012de2 <USBD_CtlError>
          err++;
 8012960:	7afb      	ldrb	r3, [r7, #11]
 8012962:	3301      	adds	r3, #1
 8012964:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012966:	bf00      	nop
      }
      break;
 8012968:	e037      	b.n	80129da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	7c1b      	ldrb	r3, [r3, #16]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d109      	bne.n	8012986 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801297a:	f107 0208 	add.w	r2, r7, #8
 801297e:	4610      	mov	r0, r2
 8012980:	4798      	blx	r3
 8012982:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012984:	e029      	b.n	80129da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012986:	6839      	ldr	r1, [r7, #0]
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f000 fa2a 	bl	8012de2 <USBD_CtlError>
        err++;
 801298e:	7afb      	ldrb	r3, [r7, #11]
 8012990:	3301      	adds	r3, #1
 8012992:	72fb      	strb	r3, [r7, #11]
      break;
 8012994:	e021      	b.n	80129da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	7c1b      	ldrb	r3, [r3, #16]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d10d      	bne.n	80129ba <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80129a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129a6:	f107 0208 	add.w	r2, r7, #8
 80129aa:	4610      	mov	r0, r2
 80129ac:	4798      	blx	r3
 80129ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	3301      	adds	r3, #1
 80129b4:	2207      	movs	r2, #7
 80129b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80129b8:	e00f      	b.n	80129da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80129ba:	6839      	ldr	r1, [r7, #0]
 80129bc:	6878      	ldr	r0, [r7, #4]
 80129be:	f000 fa10 	bl	8012de2 <USBD_CtlError>
        err++;
 80129c2:	7afb      	ldrb	r3, [r7, #11]
 80129c4:	3301      	adds	r3, #1
 80129c6:	72fb      	strb	r3, [r7, #11]
      break;
 80129c8:	e007      	b.n	80129da <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80129ca:	6839      	ldr	r1, [r7, #0]
 80129cc:	6878      	ldr	r0, [r7, #4]
 80129ce:	f000 fa08 	bl	8012de2 <USBD_CtlError>
      err++;
 80129d2:	7afb      	ldrb	r3, [r7, #11]
 80129d4:	3301      	adds	r3, #1
 80129d6:	72fb      	strb	r3, [r7, #11]
      break;
 80129d8:	bf00      	nop
  }

  if (err != 0U)
 80129da:	7afb      	ldrb	r3, [r7, #11]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d11e      	bne.n	8012a1e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80129e0:	683b      	ldr	r3, [r7, #0]
 80129e2:	88db      	ldrh	r3, [r3, #6]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d016      	beq.n	8012a16 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80129e8:	893b      	ldrh	r3, [r7, #8]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d00e      	beq.n	8012a0c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80129ee:	683b      	ldr	r3, [r7, #0]
 80129f0:	88da      	ldrh	r2, [r3, #6]
 80129f2:	893b      	ldrh	r3, [r7, #8]
 80129f4:	4293      	cmp	r3, r2
 80129f6:	bf28      	it	cs
 80129f8:	4613      	movcs	r3, r2
 80129fa:	b29b      	uxth	r3, r3
 80129fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80129fe:	893b      	ldrh	r3, [r7, #8]
 8012a00:	461a      	mov	r2, r3
 8012a02:	68f9      	ldr	r1, [r7, #12]
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f000 fa5d 	bl	8012ec4 <USBD_CtlSendData>
 8012a0a:	e009      	b.n	8012a20 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012a0c:	6839      	ldr	r1, [r7, #0]
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f000 f9e7 	bl	8012de2 <USBD_CtlError>
 8012a14:	e004      	b.n	8012a20 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f000 faae 	bl	8012f78 <USBD_CtlSendStatus>
 8012a1c:	e000      	b.n	8012a20 <USBD_GetDescriptor+0x320>
    return;
 8012a1e:	bf00      	nop
  }
}
 8012a20:	3710      	adds	r7, #16
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}
 8012a26:	bf00      	nop

08012a28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b084      	sub	sp, #16
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
 8012a30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	889b      	ldrh	r3, [r3, #4]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d131      	bne.n	8012a9e <USBD_SetAddress+0x76>
 8012a3a:	683b      	ldr	r3, [r7, #0]
 8012a3c:	88db      	ldrh	r3, [r3, #6]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d12d      	bne.n	8012a9e <USBD_SetAddress+0x76>
 8012a42:	683b      	ldr	r3, [r7, #0]
 8012a44:	885b      	ldrh	r3, [r3, #2]
 8012a46:	2b7f      	cmp	r3, #127	; 0x7f
 8012a48:	d829      	bhi.n	8012a9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	885b      	ldrh	r3, [r3, #2]
 8012a4e:	b2db      	uxtb	r3, r3
 8012a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a5c:	b2db      	uxtb	r3, r3
 8012a5e:	2b03      	cmp	r3, #3
 8012a60:	d104      	bne.n	8012a6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012a62:	6839      	ldr	r1, [r7, #0]
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	f000 f9bc 	bl	8012de2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a6a:	e01d      	b.n	8012aa8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	7bfa      	ldrb	r2, [r7, #15]
 8012a70:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012a74:	7bfb      	ldrb	r3, [r7, #15]
 8012a76:	4619      	mov	r1, r3
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f001 fc77 	bl	801436c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012a7e:	6878      	ldr	r0, [r7, #4]
 8012a80:	f000 fa7a 	bl	8012f78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012a84:	7bfb      	ldrb	r3, [r7, #15]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d004      	beq.n	8012a94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2202      	movs	r2, #2
 8012a8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a92:	e009      	b.n	8012aa8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2201      	movs	r2, #1
 8012a98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a9c:	e004      	b.n	8012aa8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012a9e:	6839      	ldr	r1, [r7, #0]
 8012aa0:	6878      	ldr	r0, [r7, #4]
 8012aa2:	f000 f99e 	bl	8012de2 <USBD_CtlError>
  }
}
 8012aa6:	bf00      	nop
 8012aa8:	bf00      	nop
 8012aaa:	3710      	adds	r7, #16
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b084      	sub	sp, #16
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
 8012ab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012aba:	2300      	movs	r3, #0
 8012abc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	885b      	ldrh	r3, [r3, #2]
 8012ac2:	b2da      	uxtb	r2, r3
 8012ac4:	4b4e      	ldr	r3, [pc, #312]	; (8012c00 <USBD_SetConfig+0x150>)
 8012ac6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012ac8:	4b4d      	ldr	r3, [pc, #308]	; (8012c00 <USBD_SetConfig+0x150>)
 8012aca:	781b      	ldrb	r3, [r3, #0]
 8012acc:	2b01      	cmp	r3, #1
 8012ace:	d905      	bls.n	8012adc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012ad0:	6839      	ldr	r1, [r7, #0]
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f000 f985 	bl	8012de2 <USBD_CtlError>
    return USBD_FAIL;
 8012ad8:	2303      	movs	r3, #3
 8012ada:	e08c      	b.n	8012bf6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ae2:	b2db      	uxtb	r3, r3
 8012ae4:	2b02      	cmp	r3, #2
 8012ae6:	d002      	beq.n	8012aee <USBD_SetConfig+0x3e>
 8012ae8:	2b03      	cmp	r3, #3
 8012aea:	d029      	beq.n	8012b40 <USBD_SetConfig+0x90>
 8012aec:	e075      	b.n	8012bda <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012aee:	4b44      	ldr	r3, [pc, #272]	; (8012c00 <USBD_SetConfig+0x150>)
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d020      	beq.n	8012b38 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012af6:	4b42      	ldr	r3, [pc, #264]	; (8012c00 <USBD_SetConfig+0x150>)
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	461a      	mov	r2, r3
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012b00:	4b3f      	ldr	r3, [pc, #252]	; (8012c00 <USBD_SetConfig+0x150>)
 8012b02:	781b      	ldrb	r3, [r3, #0]
 8012b04:	4619      	mov	r1, r3
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f7ff f849 	bl	8011b9e <USBD_SetClassConfig>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012b10:	7bfb      	ldrb	r3, [r7, #15]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d008      	beq.n	8012b28 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012b16:	6839      	ldr	r1, [r7, #0]
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f000 f962 	bl	8012de2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	2202      	movs	r2, #2
 8012b22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012b26:	e065      	b.n	8012bf4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	f000 fa25 	bl	8012f78 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2203      	movs	r2, #3
 8012b32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012b36:	e05d      	b.n	8012bf4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f000 fa1d 	bl	8012f78 <USBD_CtlSendStatus>
      break;
 8012b3e:	e059      	b.n	8012bf4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012b40:	4b2f      	ldr	r3, [pc, #188]	; (8012c00 <USBD_SetConfig+0x150>)
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d112      	bne.n	8012b6e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2202      	movs	r2, #2
 8012b4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012b50:	4b2b      	ldr	r3, [pc, #172]	; (8012c00 <USBD_SetConfig+0x150>)
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	461a      	mov	r2, r3
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012b5a:	4b29      	ldr	r3, [pc, #164]	; (8012c00 <USBD_SetConfig+0x150>)
 8012b5c:	781b      	ldrb	r3, [r3, #0]
 8012b5e:	4619      	mov	r1, r3
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f7ff f838 	bl	8011bd6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	f000 fa06 	bl	8012f78 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012b6c:	e042      	b.n	8012bf4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012b6e:	4b24      	ldr	r3, [pc, #144]	; (8012c00 <USBD_SetConfig+0x150>)
 8012b70:	781b      	ldrb	r3, [r3, #0]
 8012b72:	461a      	mov	r2, r3
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	685b      	ldr	r3, [r3, #4]
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d02a      	beq.n	8012bd2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	685b      	ldr	r3, [r3, #4]
 8012b80:	b2db      	uxtb	r3, r3
 8012b82:	4619      	mov	r1, r3
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f7ff f826 	bl	8011bd6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012b8a:	4b1d      	ldr	r3, [pc, #116]	; (8012c00 <USBD_SetConfig+0x150>)
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	461a      	mov	r2, r3
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012b94:	4b1a      	ldr	r3, [pc, #104]	; (8012c00 <USBD_SetConfig+0x150>)
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	4619      	mov	r1, r3
 8012b9a:	6878      	ldr	r0, [r7, #4]
 8012b9c:	f7fe ffff 	bl	8011b9e <USBD_SetClassConfig>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012ba4:	7bfb      	ldrb	r3, [r7, #15]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d00f      	beq.n	8012bca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012baa:	6839      	ldr	r1, [r7, #0]
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f000 f918 	bl	8012de2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	b2db      	uxtb	r3, r3
 8012bb8:	4619      	mov	r1, r3
 8012bba:	6878      	ldr	r0, [r7, #4]
 8012bbc:	f7ff f80b 	bl	8011bd6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2202      	movs	r2, #2
 8012bc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012bc8:	e014      	b.n	8012bf4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012bca:	6878      	ldr	r0, [r7, #4]
 8012bcc:	f000 f9d4 	bl	8012f78 <USBD_CtlSendStatus>
      break;
 8012bd0:	e010      	b.n	8012bf4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012bd2:	6878      	ldr	r0, [r7, #4]
 8012bd4:	f000 f9d0 	bl	8012f78 <USBD_CtlSendStatus>
      break;
 8012bd8:	e00c      	b.n	8012bf4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012bda:	6839      	ldr	r1, [r7, #0]
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f000 f900 	bl	8012de2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012be2:	4b07      	ldr	r3, [pc, #28]	; (8012c00 <USBD_SetConfig+0x150>)
 8012be4:	781b      	ldrb	r3, [r3, #0]
 8012be6:	4619      	mov	r1, r3
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f7fe fff4 	bl	8011bd6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012bee:	2303      	movs	r3, #3
 8012bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8012bf2:	bf00      	nop
  }

  return ret;
 8012bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	3710      	adds	r7, #16
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	bd80      	pop	{r7, pc}
 8012bfe:	bf00      	nop
 8012c00:	20001250 	.word	0x20001250

08012c04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b082      	sub	sp, #8
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
 8012c0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	88db      	ldrh	r3, [r3, #6]
 8012c12:	2b01      	cmp	r3, #1
 8012c14:	d004      	beq.n	8012c20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012c16:	6839      	ldr	r1, [r7, #0]
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f000 f8e2 	bl	8012de2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012c1e:	e023      	b.n	8012c68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c26:	b2db      	uxtb	r3, r3
 8012c28:	2b02      	cmp	r3, #2
 8012c2a:	dc02      	bgt.n	8012c32 <USBD_GetConfig+0x2e>
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	dc03      	bgt.n	8012c38 <USBD_GetConfig+0x34>
 8012c30:	e015      	b.n	8012c5e <USBD_GetConfig+0x5a>
 8012c32:	2b03      	cmp	r3, #3
 8012c34:	d00b      	beq.n	8012c4e <USBD_GetConfig+0x4a>
 8012c36:	e012      	b.n	8012c5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	3308      	adds	r3, #8
 8012c42:	2201      	movs	r2, #1
 8012c44:	4619      	mov	r1, r3
 8012c46:	6878      	ldr	r0, [r7, #4]
 8012c48:	f000 f93c 	bl	8012ec4 <USBD_CtlSendData>
        break;
 8012c4c:	e00c      	b.n	8012c68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	3304      	adds	r3, #4
 8012c52:	2201      	movs	r2, #1
 8012c54:	4619      	mov	r1, r3
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f000 f934 	bl	8012ec4 <USBD_CtlSendData>
        break;
 8012c5c:	e004      	b.n	8012c68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012c5e:	6839      	ldr	r1, [r7, #0]
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f000 f8be 	bl	8012de2 <USBD_CtlError>
        break;
 8012c66:	bf00      	nop
}
 8012c68:	bf00      	nop
 8012c6a:	3708      	adds	r7, #8
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}

08012c70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b082      	sub	sp, #8
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
 8012c78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c80:	b2db      	uxtb	r3, r3
 8012c82:	3b01      	subs	r3, #1
 8012c84:	2b02      	cmp	r3, #2
 8012c86:	d81e      	bhi.n	8012cc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012c88:	683b      	ldr	r3, [r7, #0]
 8012c8a:	88db      	ldrh	r3, [r3, #6]
 8012c8c:	2b02      	cmp	r3, #2
 8012c8e:	d004      	beq.n	8012c9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012c90:	6839      	ldr	r1, [r7, #0]
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	f000 f8a5 	bl	8012de2 <USBD_CtlError>
        break;
 8012c98:	e01a      	b.n	8012cd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	2201      	movs	r2, #1
 8012c9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d005      	beq.n	8012cb6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	68db      	ldr	r3, [r3, #12]
 8012cae:	f043 0202 	orr.w	r2, r3, #2
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	330c      	adds	r3, #12
 8012cba:	2202      	movs	r2, #2
 8012cbc:	4619      	mov	r1, r3
 8012cbe:	6878      	ldr	r0, [r7, #4]
 8012cc0:	f000 f900 	bl	8012ec4 <USBD_CtlSendData>
      break;
 8012cc4:	e004      	b.n	8012cd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012cc6:	6839      	ldr	r1, [r7, #0]
 8012cc8:	6878      	ldr	r0, [r7, #4]
 8012cca:	f000 f88a 	bl	8012de2 <USBD_CtlError>
      break;
 8012cce:	bf00      	nop
  }
}
 8012cd0:	bf00      	nop
 8012cd2:	3708      	adds	r7, #8
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}

08012cd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b082      	sub	sp, #8
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
 8012ce0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	885b      	ldrh	r3, [r3, #2]
 8012ce6:	2b01      	cmp	r3, #1
 8012ce8:	d107      	bne.n	8012cfa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	2201      	movs	r2, #1
 8012cee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012cf2:	6878      	ldr	r0, [r7, #4]
 8012cf4:	f000 f940 	bl	8012f78 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012cf8:	e013      	b.n	8012d22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012cfa:	683b      	ldr	r3, [r7, #0]
 8012cfc:	885b      	ldrh	r3, [r3, #2]
 8012cfe:	2b02      	cmp	r3, #2
 8012d00:	d10b      	bne.n	8012d1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012d02:	683b      	ldr	r3, [r7, #0]
 8012d04:	889b      	ldrh	r3, [r3, #4]
 8012d06:	0a1b      	lsrs	r3, r3, #8
 8012d08:	b29b      	uxth	r3, r3
 8012d0a:	b2da      	uxtb	r2, r3
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012d12:	6878      	ldr	r0, [r7, #4]
 8012d14:	f000 f930 	bl	8012f78 <USBD_CtlSendStatus>
}
 8012d18:	e003      	b.n	8012d22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012d1a:	6839      	ldr	r1, [r7, #0]
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f000 f860 	bl	8012de2 <USBD_CtlError>
}
 8012d22:	bf00      	nop
 8012d24:	3708      	adds	r7, #8
 8012d26:	46bd      	mov	sp, r7
 8012d28:	bd80      	pop	{r7, pc}

08012d2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d2a:	b580      	push	{r7, lr}
 8012d2c:	b082      	sub	sp, #8
 8012d2e:	af00      	add	r7, sp, #0
 8012d30:	6078      	str	r0, [r7, #4]
 8012d32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d3a:	b2db      	uxtb	r3, r3
 8012d3c:	3b01      	subs	r3, #1
 8012d3e:	2b02      	cmp	r3, #2
 8012d40:	d80b      	bhi.n	8012d5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012d42:	683b      	ldr	r3, [r7, #0]
 8012d44:	885b      	ldrh	r3, [r3, #2]
 8012d46:	2b01      	cmp	r3, #1
 8012d48:	d10c      	bne.n	8012d64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012d52:	6878      	ldr	r0, [r7, #4]
 8012d54:	f000 f910 	bl	8012f78 <USBD_CtlSendStatus>
      }
      break;
 8012d58:	e004      	b.n	8012d64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012d5a:	6839      	ldr	r1, [r7, #0]
 8012d5c:	6878      	ldr	r0, [r7, #4]
 8012d5e:	f000 f840 	bl	8012de2 <USBD_CtlError>
      break;
 8012d62:	e000      	b.n	8012d66 <USBD_ClrFeature+0x3c>
      break;
 8012d64:	bf00      	nop
  }
}
 8012d66:	bf00      	nop
 8012d68:	3708      	adds	r7, #8
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}

08012d6e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012d6e:	b580      	push	{r7, lr}
 8012d70:	b084      	sub	sp, #16
 8012d72:	af00      	add	r7, sp, #0
 8012d74:	6078      	str	r0, [r7, #4]
 8012d76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	781a      	ldrb	r2, [r3, #0]
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	3301      	adds	r3, #1
 8012d88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	781a      	ldrb	r2, [r3, #0]
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	3301      	adds	r3, #1
 8012d96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012d98:	68f8      	ldr	r0, [r7, #12]
 8012d9a:	f7ff fa17 	bl	80121cc <SWAPBYTE>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	461a      	mov	r2, r3
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	3301      	adds	r3, #1
 8012daa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	3301      	adds	r3, #1
 8012db0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012db2:	68f8      	ldr	r0, [r7, #12]
 8012db4:	f7ff fa0a 	bl	80121cc <SWAPBYTE>
 8012db8:	4603      	mov	r3, r0
 8012dba:	461a      	mov	r2, r3
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	3301      	adds	r3, #1
 8012dca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012dcc:	68f8      	ldr	r0, [r7, #12]
 8012dce:	f7ff f9fd 	bl	80121cc <SWAPBYTE>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	461a      	mov	r2, r3
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	80da      	strh	r2, [r3, #6]
}
 8012dda:	bf00      	nop
 8012ddc:	3710      	adds	r7, #16
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bd80      	pop	{r7, pc}

08012de2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012de2:	b580      	push	{r7, lr}
 8012de4:	b082      	sub	sp, #8
 8012de6:	af00      	add	r7, sp, #0
 8012de8:	6078      	str	r0, [r7, #4]
 8012dea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012dec:	2180      	movs	r1, #128	; 0x80
 8012dee:	6878      	ldr	r0, [r7, #4]
 8012df0:	f001 fa22 	bl	8014238 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012df4:	2100      	movs	r1, #0
 8012df6:	6878      	ldr	r0, [r7, #4]
 8012df8:	f001 fa1e 	bl	8014238 <USBD_LL_StallEP>
}
 8012dfc:	bf00      	nop
 8012dfe:	3708      	adds	r7, #8
 8012e00:	46bd      	mov	sp, r7
 8012e02:	bd80      	pop	{r7, pc}

08012e04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b086      	sub	sp, #24
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	60f8      	str	r0, [r7, #12]
 8012e0c:	60b9      	str	r1, [r7, #8]
 8012e0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012e10:	2300      	movs	r3, #0
 8012e12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d036      	beq.n	8012e88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012e1e:	6938      	ldr	r0, [r7, #16]
 8012e20:	f000 f836 	bl	8012e90 <USBD_GetLen>
 8012e24:	4603      	mov	r3, r0
 8012e26:	3301      	adds	r3, #1
 8012e28:	b29b      	uxth	r3, r3
 8012e2a:	005b      	lsls	r3, r3, #1
 8012e2c:	b29a      	uxth	r2, r3
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012e32:	7dfb      	ldrb	r3, [r7, #23]
 8012e34:	68ba      	ldr	r2, [r7, #8]
 8012e36:	4413      	add	r3, r2
 8012e38:	687a      	ldr	r2, [r7, #4]
 8012e3a:	7812      	ldrb	r2, [r2, #0]
 8012e3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8012e3e:	7dfb      	ldrb	r3, [r7, #23]
 8012e40:	3301      	adds	r3, #1
 8012e42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012e44:	7dfb      	ldrb	r3, [r7, #23]
 8012e46:	68ba      	ldr	r2, [r7, #8]
 8012e48:	4413      	add	r3, r2
 8012e4a:	2203      	movs	r2, #3
 8012e4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8012e4e:	7dfb      	ldrb	r3, [r7, #23]
 8012e50:	3301      	adds	r3, #1
 8012e52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012e54:	e013      	b.n	8012e7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012e56:	7dfb      	ldrb	r3, [r7, #23]
 8012e58:	68ba      	ldr	r2, [r7, #8]
 8012e5a:	4413      	add	r3, r2
 8012e5c:	693a      	ldr	r2, [r7, #16]
 8012e5e:	7812      	ldrb	r2, [r2, #0]
 8012e60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012e62:	693b      	ldr	r3, [r7, #16]
 8012e64:	3301      	adds	r3, #1
 8012e66:	613b      	str	r3, [r7, #16]
    idx++;
 8012e68:	7dfb      	ldrb	r3, [r7, #23]
 8012e6a:	3301      	adds	r3, #1
 8012e6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012e6e:	7dfb      	ldrb	r3, [r7, #23]
 8012e70:	68ba      	ldr	r2, [r7, #8]
 8012e72:	4413      	add	r3, r2
 8012e74:	2200      	movs	r2, #0
 8012e76:	701a      	strb	r2, [r3, #0]
    idx++;
 8012e78:	7dfb      	ldrb	r3, [r7, #23]
 8012e7a:	3301      	adds	r3, #1
 8012e7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012e7e:	693b      	ldr	r3, [r7, #16]
 8012e80:	781b      	ldrb	r3, [r3, #0]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d1e7      	bne.n	8012e56 <USBD_GetString+0x52>
 8012e86:	e000      	b.n	8012e8a <USBD_GetString+0x86>
    return;
 8012e88:	bf00      	nop
  }
}
 8012e8a:	3718      	adds	r7, #24
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}

08012e90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012e90:	b480      	push	{r7}
 8012e92:	b085      	sub	sp, #20
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012e98:	2300      	movs	r3, #0
 8012e9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012ea0:	e005      	b.n	8012eae <USBD_GetLen+0x1e>
  {
    len++;
 8012ea2:	7bfb      	ldrb	r3, [r7, #15]
 8012ea4:	3301      	adds	r3, #1
 8012ea6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012ea8:	68bb      	ldr	r3, [r7, #8]
 8012eaa:	3301      	adds	r3, #1
 8012eac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d1f5      	bne.n	8012ea2 <USBD_GetLen+0x12>
  }

  return len;
 8012eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	3714      	adds	r7, #20
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec2:	4770      	bx	lr

08012ec4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b084      	sub	sp, #16
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	60f8      	str	r0, [r7, #12]
 8012ecc:	60b9      	str	r1, [r7, #8]
 8012ece:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	2202      	movs	r2, #2
 8012ed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	687a      	ldr	r2, [r7, #4]
 8012edc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	687a      	ldr	r2, [r7, #4]
 8012ee2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	68ba      	ldr	r2, [r7, #8]
 8012ee8:	2100      	movs	r1, #0
 8012eea:	68f8      	ldr	r0, [r7, #12]
 8012eec:	f001 fa74 	bl	80143d8 <USBD_LL_Transmit>

  return USBD_OK;
 8012ef0:	2300      	movs	r3, #0
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3710      	adds	r7, #16
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}

08012efa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012efa:	b580      	push	{r7, lr}
 8012efc:	b084      	sub	sp, #16
 8012efe:	af00      	add	r7, sp, #0
 8012f00:	60f8      	str	r0, [r7, #12]
 8012f02:	60b9      	str	r1, [r7, #8]
 8012f04:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	68ba      	ldr	r2, [r7, #8]
 8012f0a:	2100      	movs	r1, #0
 8012f0c:	68f8      	ldr	r0, [r7, #12]
 8012f0e:	f001 fa63 	bl	80143d8 <USBD_LL_Transmit>

  return USBD_OK;
 8012f12:	2300      	movs	r3, #0
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3710      	adds	r7, #16
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}

08012f1c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b084      	sub	sp, #16
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	60f8      	str	r0, [r7, #12]
 8012f24:	60b9      	str	r1, [r7, #8]
 8012f26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	2203      	movs	r2, #3
 8012f2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	687a      	ldr	r2, [r7, #4]
 8012f34:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	687a      	ldr	r2, [r7, #4]
 8012f3c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	68ba      	ldr	r2, [r7, #8]
 8012f44:	2100      	movs	r1, #0
 8012f46:	68f8      	ldr	r0, [r7, #12]
 8012f48:	f001 fa7e 	bl	8014448 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012f4c:	2300      	movs	r3, #0
}
 8012f4e:	4618      	mov	r0, r3
 8012f50:	3710      	adds	r7, #16
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}

08012f56 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012f56:	b580      	push	{r7, lr}
 8012f58:	b084      	sub	sp, #16
 8012f5a:	af00      	add	r7, sp, #0
 8012f5c:	60f8      	str	r0, [r7, #12]
 8012f5e:	60b9      	str	r1, [r7, #8]
 8012f60:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	68ba      	ldr	r2, [r7, #8]
 8012f66:	2100      	movs	r1, #0
 8012f68:	68f8      	ldr	r0, [r7, #12]
 8012f6a:	f001 fa6d 	bl	8014448 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012f6e:	2300      	movs	r3, #0
}
 8012f70:	4618      	mov	r0, r3
 8012f72:	3710      	adds	r7, #16
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}

08012f78 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2204      	movs	r2, #4
 8012f84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012f88:	2300      	movs	r3, #0
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	2100      	movs	r1, #0
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f001 fa22 	bl	80143d8 <USBD_LL_Transmit>

  return USBD_OK;
 8012f94:	2300      	movs	r3, #0
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	3708      	adds	r7, #8
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bd80      	pop	{r7, pc}

08012f9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012f9e:	b580      	push	{r7, lr}
 8012fa0:	b082      	sub	sp, #8
 8012fa2:	af00      	add	r7, sp, #0
 8012fa4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	2205      	movs	r2, #5
 8012faa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012fae:	2300      	movs	r3, #0
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	2100      	movs	r1, #0
 8012fb4:	6878      	ldr	r0, [r7, #4]
 8012fb6:	f001 fa47 	bl	8014448 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012fba:	2300      	movs	r3, #0
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3708      	adds	r7, #8
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}

08012fc4 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b082      	sub	sp, #8
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8012fcc:	6878      	ldr	r0, [r7, #4]
 8012fce:	f7f3 f8ab 	bl	8006128 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8012fd2:	bf00      	nop
 8012fd4:	3708      	adds	r7, #8
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}

08012fda <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8012fda:	b580      	push	{r7, lr}
 8012fdc:	b082      	sub	sp, #8
 8012fde:	af00      	add	r7, sp, #0
 8012fe0:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8012fe2:	e002      	b.n	8012fea <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8012fe4:	2001      	movs	r0, #1
 8012fe6:	f7ff ffed 	bl	8012fc4 <SPIF_Delay>
  while (Handle->Lock)
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	7b1b      	ldrb	r3, [r3, #12]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d1f8      	bne.n	8012fe4 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	2201      	movs	r2, #1
 8012ff6:	731a      	strb	r2, [r3, #12]
}
 8012ff8:	bf00      	nop
 8012ffa:	3708      	adds	r7, #8
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}

08013000 <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8013000:	b480      	push	{r7}
 8013002:	b083      	sub	sp, #12
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2200      	movs	r2, #0
 801300c:	731a      	strb	r2, [r3, #12]
}
 801300e:	bf00      	nop
 8013010:	370c      	adds	r7, #12
 8013012:	46bd      	mov	sp, r7
 8013014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013018:	4770      	bx	lr

0801301a <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 801301a:	b580      	push	{r7, lr}
 801301c:	b084      	sub	sp, #16
 801301e:	af00      	add	r7, sp, #0
 8013020:	6078      	str	r0, [r7, #4]
 8013022:	460b      	mov	r3, r1
 8013024:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	6858      	ldr	r0, [r3, #4]
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	691b      	ldr	r3, [r3, #16]
 801302e:	b29b      	uxth	r3, r3
 8013030:	78fa      	ldrb	r2, [r7, #3]
 8013032:	4619      	mov	r1, r3
 8013034:	f7f5 f83a 	bl	80080ac <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 8013038:	2300      	movs	r3, #0
 801303a:	60fb      	str	r3, [r7, #12]
 801303c:	e002      	b.n	8013044 <SPIF_CsPin+0x2a>
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	3301      	adds	r3, #1
 8013042:	60fb      	str	r3, [r7, #12]
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	2b09      	cmp	r3, #9
 8013048:	ddf9      	ble.n	801303e <SPIF_CsPin+0x24>
}
 801304a:	bf00      	nop
 801304c:	bf00      	nop
 801304e:	3710      	adds	r7, #16
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}

08013054 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b086      	sub	sp, #24
 8013058:	af00      	add	r7, sp, #0
 801305a:	60f8      	str	r0, [r7, #12]
 801305c:	60b9      	str	r1, [r7, #8]
 801305e:	607a      	str	r2, [r7, #4]
 8013060:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8013062:	2300      	movs	r3, #0
 8013064:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8013066:	f7f3 f853 	bl	8006110 <HAL_GetTick>
 801306a:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_TransmitReceive_DMA(Handle->HSpi, Tx, Rx, Size) != HAL_OK)
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	6818      	ldr	r0, [r3, #0]
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	b29b      	uxth	r3, r3
 8013074:	687a      	ldr	r2, [r7, #4]
 8013076:	68b9      	ldr	r1, [r7, #8]
 8013078:	f7f8 feda 	bl	800be30 <HAL_SPI_TransmitReceive_DMA>
 801307c:	4603      	mov	r3, r0
 801307e:	2b00      	cmp	r3, #0
 8013080:	d11a      	bne.n	80130b8 <SPIF_TransmitReceive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8013082:	2001      	movs	r0, #1
 8013084:	f7ff ff9e 	bl	8012fc4 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8013088:	f7f3 f842 	bl	8006110 <HAL_GetTick>
 801308c:	4602      	mov	r2, r0
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	1ad3      	subs	r3, r2, r3
 8013092:	6a3a      	ldr	r2, [r7, #32]
 8013094:	429a      	cmp	r2, r3
 8013096:	d805      	bhi.n	80130a4 <SPIF_TransmitReceive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	4618      	mov	r0, r3
 801309e:	f7f9 f84b 	bl	800c138 <HAL_SPI_DMAStop>
        break;
 80130a2:	e009      	b.n	80130b8 <SPIF_TransmitReceive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	4618      	mov	r0, r3
 80130aa:	f7f9 f9bf 	bl	800c42c <HAL_SPI_GetState>
 80130ae:	4603      	mov	r3, r0
 80130b0:	2b01      	cmp	r3, #1
 80130b2:	d1e6      	bne.n	8013082 <SPIF_TransmitReceive+0x2e>
      {
        retVal = true;
 80130b4:	2301      	movs	r3, #1
 80130b6:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 80130b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80130ba:	4618      	mov	r0, r3
 80130bc:	3718      	adds	r7, #24
 80130be:	46bd      	mov	sp, r7
 80130c0:	bd80      	pop	{r7, pc}

080130c2 <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 80130c2:	b580      	push	{r7, lr}
 80130c4:	b086      	sub	sp, #24
 80130c6:	af00      	add	r7, sp, #0
 80130c8:	60f8      	str	r0, [r7, #12]
 80130ca:	60b9      	str	r1, [r7, #8]
 80130cc:	607a      	str	r2, [r7, #4]
 80130ce:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80130d0:	2300      	movs	r3, #0
 80130d2:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 80130d4:	f7f3 f81c 	bl	8006110 <HAL_GetTick>
 80130d8:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Transmit_DMA(Handle->HSpi, Tx, Size) != HAL_OK)
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	687a      	ldr	r2, [r7, #4]
 80130e0:	b292      	uxth	r2, r2
 80130e2:	68b9      	ldr	r1, [r7, #8]
 80130e4:	4618      	mov	r0, r3
 80130e6:	f7f8 fc93 	bl	800ba10 <HAL_SPI_Transmit_DMA>
 80130ea:	4603      	mov	r3, r0
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d11a      	bne.n	8013126 <SPIF_Transmit+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 80130f0:	2001      	movs	r0, #1
 80130f2:	f7ff ff67 	bl	8012fc4 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 80130f6:	f7f3 f80b 	bl	8006110 <HAL_GetTick>
 80130fa:	4602      	mov	r2, r0
 80130fc:	693b      	ldr	r3, [r7, #16]
 80130fe:	1ad3      	subs	r3, r2, r3
 8013100:	683a      	ldr	r2, [r7, #0]
 8013102:	429a      	cmp	r2, r3
 8013104:	d805      	bhi.n	8013112 <SPIF_Transmit+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	4618      	mov	r0, r3
 801310c:	f7f9 f814 	bl	800c138 <HAL_SPI_DMAStop>
        break;
 8013110:	e009      	b.n	8013126 <SPIF_Transmit+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	4618      	mov	r0, r3
 8013118:	f7f9 f988 	bl	800c42c <HAL_SPI_GetState>
 801311c:	4603      	mov	r3, r0
 801311e:	2b01      	cmp	r3, #1
 8013120:	d1e6      	bne.n	80130f0 <SPIF_Transmit+0x2e>
      {
        retVal = true;
 8013122:	2301      	movs	r3, #1
 8013124:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8013126:	7dfb      	ldrb	r3, [r7, #23]
}
 8013128:	4618      	mov	r0, r3
 801312a:	3718      	adds	r7, #24
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}

08013130 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b086      	sub	sp, #24
 8013134:	af00      	add	r7, sp, #0
 8013136:	60f8      	str	r0, [r7, #12]
 8013138:	60b9      	str	r1, [r7, #8]
 801313a:	607a      	str	r2, [r7, #4]
 801313c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801313e:	2300      	movs	r3, #0
 8013140:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8013142:	f7f2 ffe5 	bl	8006110 <HAL_GetTick>
 8013146:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Receive_DMA(Handle->HSpi, Rx, Size) != HAL_OK)
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	687a      	ldr	r2, [r7, #4]
 801314e:	b292      	uxth	r2, r2
 8013150:	68b9      	ldr	r1, [r7, #8]
 8013152:	4618      	mov	r0, r3
 8013154:	f7f8 fd4c 	bl	800bbf0 <HAL_SPI_Receive_DMA>
 8013158:	4603      	mov	r3, r0
 801315a:	2b00      	cmp	r3, #0
 801315c:	d11a      	bne.n	8013194 <SPIF_Receive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 801315e:	2001      	movs	r0, #1
 8013160:	f7ff ff30 	bl	8012fc4 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8013164:	f7f2 ffd4 	bl	8006110 <HAL_GetTick>
 8013168:	4602      	mov	r2, r0
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	1ad3      	subs	r3, r2, r3
 801316e:	683a      	ldr	r2, [r7, #0]
 8013170:	429a      	cmp	r2, r3
 8013172:	d805      	bhi.n	8013180 <SPIF_Receive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	4618      	mov	r0, r3
 801317a:	f7f8 ffdd 	bl	800c138 <HAL_SPI_DMAStop>
        break;
 801317e:	e009      	b.n	8013194 <SPIF_Receive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	4618      	mov	r0, r3
 8013186:	f7f9 f951 	bl	800c42c <HAL_SPI_GetState>
 801318a:	4603      	mov	r3, r0
 801318c:	2b01      	cmp	r3, #1
 801318e:	d1e6      	bne.n	801315e <SPIF_Receive+0x2e>
      {
        retVal = true;
 8013190:	2301      	movs	r3, #1
 8013192:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8013194:	7dfb      	ldrb	r3, [r7, #23]
}
 8013196:	4618      	mov	r0, r3
 8013198:	3718      	adds	r7, #24
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}

0801319e <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 801319e:	b580      	push	{r7, lr}
 80131a0:	b084      	sub	sp, #16
 80131a2:	af00      	add	r7, sp, #0
 80131a4:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 80131a6:	2301      	movs	r3, #1
 80131a8:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 80131aa:	2306      	movs	r3, #6
 80131ac:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 80131ae:	2100      	movs	r1, #0
 80131b0:	6878      	ldr	r0, [r7, #4]
 80131b2:	f7ff ff32 	bl	801301a <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 80131b6:	f107 010c 	add.w	r1, r7, #12
 80131ba:	2364      	movs	r3, #100	; 0x64
 80131bc:	2201      	movs	r2, #1
 80131be:	6878      	ldr	r0, [r7, #4]
 80131c0:	f7ff ff7f 	bl	80130c2 <SPIF_Transmit>
 80131c4:	4603      	mov	r3, r0
 80131c6:	f083 0301 	eor.w	r3, r3, #1
 80131ca:	b2db      	uxtb	r3, r3
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d001      	beq.n	80131d4 <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 80131d0:	2300      	movs	r3, #0
 80131d2:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 80131d4:	2101      	movs	r1, #1
 80131d6:	6878      	ldr	r0, [r7, #4]
 80131d8:	f7ff ff1f 	bl	801301a <SPIF_CsPin>
  return retVal;
 80131dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3710      	adds	r7, #16
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}

080131e6 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 80131e6:	b580      	push	{r7, lr}
 80131e8:	b084      	sub	sp, #16
 80131ea:	af00      	add	r7, sp, #0
 80131ec:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 80131ee:	2301      	movs	r3, #1
 80131f0:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 80131f2:	2304      	movs	r3, #4
 80131f4:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 80131f6:	2100      	movs	r1, #0
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	f7ff ff0e 	bl	801301a <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 80131fe:	f107 010c 	add.w	r1, r7, #12
 8013202:	2364      	movs	r3, #100	; 0x64
 8013204:	2201      	movs	r2, #1
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f7ff ff5b 	bl	80130c2 <SPIF_Transmit>
 801320c:	4603      	mov	r3, r0
 801320e:	f083 0301 	eor.w	r3, r3, #1
 8013212:	b2db      	uxtb	r3, r3
 8013214:	2b00      	cmp	r3, #0
 8013216:	d001      	beq.n	801321c <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8013218:	2300      	movs	r3, #0
 801321a:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 801321c:	2101      	movs	r1, #1
 801321e:	6878      	ldr	r0, [r7, #4]
 8013220:	f7ff fefb 	bl	801301a <SPIF_CsPin>
  return retVal;
 8013224:	7bfb      	ldrb	r3, [r7, #15]
}
 8013226:	4618      	mov	r0, r3
 8013228:	3710      	adds	r7, #16
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}

0801322e <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 801322e:	b580      	push	{r7, lr}
 8013230:	b086      	sub	sp, #24
 8013232:	af02      	add	r7, sp, #8
 8013234:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 8013236:	2300      	movs	r3, #0
 8013238:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 801323a:	f24a 5305 	movw	r3, #42245	; 0xa505
 801323e:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 8013240:	2100      	movs	r1, #0
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	f7ff fee9 	bl	801301a <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 8013248:	f107 0208 	add.w	r2, r7, #8
 801324c:	f107 010c 	add.w	r1, r7, #12
 8013250:	2364      	movs	r3, #100	; 0x64
 8013252:	9300      	str	r3, [sp, #0]
 8013254:	2302      	movs	r3, #2
 8013256:	6878      	ldr	r0, [r7, #4]
 8013258:	f7ff fefc 	bl	8013054 <SPIF_TransmitReceive>
 801325c:	4603      	mov	r3, r0
 801325e:	2b00      	cmp	r3, #0
 8013260:	d001      	beq.n	8013266 <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 8013262:	7a7b      	ldrb	r3, [r7, #9]
 8013264:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 8013266:	2101      	movs	r1, #1
 8013268:	6878      	ldr	r0, [r7, #4]
 801326a:	f7ff fed6 	bl	801301a <SPIF_CsPin>
  return retVal;
 801326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013270:	4618      	mov	r0, r3
 8013272:	3710      	adds	r7, #16
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}

08013278 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b084      	sub	sp, #16
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 8013282:	2300      	movs	r3, #0
 8013284:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 8013286:	f7f2 ff43 	bl	8006110 <HAL_GetTick>
 801328a:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 801328c:	2001      	movs	r0, #1
 801328e:	f7ff fe99 	bl	8012fc4 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 8013292:	f7f2 ff3d 	bl	8006110 <HAL_GetTick>
 8013296:	4602      	mov	r2, r0
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	1ad3      	subs	r3, r2, r3
 801329c:	683a      	ldr	r2, [r7, #0]
 801329e:	429a      	cmp	r2, r3
 80132a0:	d90a      	bls.n	80132b8 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 80132a2:	6878      	ldr	r0, [r7, #4]
 80132a4:	f7ff ffc3 	bl	801322e <SPIF_ReadReg1>
 80132a8:	4603      	mov	r3, r0
 80132aa:	f003 0301 	and.w	r3, r3, #1
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d1ec      	bne.n	801328c <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 80132b2:	2301      	movs	r3, #1
 80132b4:	73fb      	strb	r3, [r7, #15]
      break;
 80132b6:	e000      	b.n	80132ba <SPIF_WaitForWriting+0x42>
      break;
 80132b8:	bf00      	nop
    }
  }
  return retVal;
 80132ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80132bc:	4618      	mov	r0, r3
 80132be:	3710      	adds	r7, #16
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}

080132c4 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b088      	sub	sp, #32
 80132c8:	af02      	add	r7, sp, #8
 80132ca:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 80132cc:	f06f 0360 	mvn.w	r3, #96	; 0x60
 80132d0:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 80132d2:	2300      	movs	r3, #0
 80132d4:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 80132d6:	2100      	movs	r1, #0
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f7ff fe9e 	bl	801301a <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 80132de:	f107 020c 	add.w	r2, r7, #12
 80132e2:	f107 0110 	add.w	r1, r7, #16
 80132e6:	2364      	movs	r3, #100	; 0x64
 80132e8:	9300      	str	r3, [sp, #0]
 80132ea:	2304      	movs	r3, #4
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f7ff feb1 	bl	8013054 <SPIF_TransmitReceive>
 80132f2:	4603      	mov	r3, r0
 80132f4:	f083 0301 	eor.w	r3, r3, #1
 80132f8:	b2db      	uxtb	r3, r3
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d004      	beq.n	8013308 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 80132fe:	2101      	movs	r1, #1
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	f7ff fe8a 	bl	801301a <SPIF_CsPin>
      break;
 8013306:	e16f      	b.n	80135e8 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8013308:	2101      	movs	r1, #1
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f7ff fe85 	bl	801301a <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8013310:	7b7a      	ldrb	r2, [r7, #13]
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 8013316:	7bba      	ldrb	r2, [r7, #14]
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 801331c:	7bfa      	ldrb	r2, [r7, #15]
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	7a1b      	ldrb	r3, [r3, #8]
 8013326:	2bef      	cmp	r3, #239	; 0xef
 8013328:	f000 80f0 	beq.w	801350c <SPIF_FindChip+0x248>
 801332c:	2bef      	cmp	r3, #239	; 0xef
 801332e:	f300 80e9 	bgt.w	8013504 <SPIF_FindChip+0x240>
 8013332:	2bc8      	cmp	r3, #200	; 0xc8
 8013334:	f300 80e6 	bgt.w	8013504 <SPIF_FindChip+0x240>
 8013338:	2b85      	cmp	r3, #133	; 0x85
 801333a:	da0c      	bge.n	8013356 <SPIF_FindChip+0x92>
 801333c:	2b62      	cmp	r3, #98	; 0x62
 801333e:	f000 80e7 	beq.w	8013510 <SPIF_FindChip+0x24c>
 8013342:	2b62      	cmp	r3, #98	; 0x62
 8013344:	f300 80de 	bgt.w	8013504 <SPIF_FindChip+0x240>
 8013348:	2b20      	cmp	r3, #32
 801334a:	f300 80d9 	bgt.w	8013500 <SPIF_FindChip+0x23c>
 801334e:	2b00      	cmp	r3, #0
 8013350:	f300 8090 	bgt.w	8013474 <SPIF_FindChip+0x1b0>
 8013354:	e0d6      	b.n	8013504 <SPIF_FindChip+0x240>
 8013356:	3b85      	subs	r3, #133	; 0x85
 8013358:	2b43      	cmp	r3, #67	; 0x43
 801335a:	f200 80d3 	bhi.w	8013504 <SPIF_FindChip+0x240>
 801335e:	a201      	add	r2, pc, #4	; (adr r2, 8013364 <SPIF_FindChip+0xa0>)
 8013360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013364:	08013515 	.word	0x08013515
 8013368:	08013505 	.word	0x08013505
 801336c:	08013505 	.word	0x08013505
 8013370:	08013505 	.word	0x08013505
 8013374:	08013515 	.word	0x08013515
 8013378:	08013505 	.word	0x08013505
 801337c:	08013505 	.word	0x08013505
 8013380:	08013515 	.word	0x08013515
 8013384:	08013505 	.word	0x08013505
 8013388:	08013505 	.word	0x08013505
 801338c:	08013505 	.word	0x08013505
 8013390:	08013505 	.word	0x08013505
 8013394:	08013505 	.word	0x08013505
 8013398:	08013505 	.word	0x08013505
 801339c:	08013505 	.word	0x08013505
 80133a0:	08013505 	.word	0x08013505
 80133a4:	08013505 	.word	0x08013505
 80133a8:	08013505 	.word	0x08013505
 80133ac:	08013505 	.word	0x08013505
 80133b0:	08013505 	.word	0x08013505
 80133b4:	08013505 	.word	0x08013505
 80133b8:	08013505 	.word	0x08013505
 80133bc:	08013505 	.word	0x08013505
 80133c0:	08013505 	.word	0x08013505
 80133c4:	08013515 	.word	0x08013515
 80133c8:	08013505 	.word	0x08013505
 80133cc:	08013505 	.word	0x08013505
 80133d0:	08013505 	.word	0x08013505
 80133d4:	08013515 	.word	0x08013515
 80133d8:	08013505 	.word	0x08013505
 80133dc:	08013505 	.word	0x08013505
 80133e0:	08013505 	.word	0x08013505
 80133e4:	08013505 	.word	0x08013505
 80133e8:	08013505 	.word	0x08013505
 80133ec:	08013505 	.word	0x08013505
 80133f0:	08013505 	.word	0x08013505
 80133f4:	08013505 	.word	0x08013505
 80133f8:	08013505 	.word	0x08013505
 80133fc:	08013505 	.word	0x08013505
 8013400:	08013505 	.word	0x08013505
 8013404:	08013515 	.word	0x08013515
 8013408:	08013505 	.word	0x08013505
 801340c:	08013505 	.word	0x08013505
 8013410:	08013505 	.word	0x08013505
 8013414:	08013505 	.word	0x08013505
 8013418:	08013505 	.word	0x08013505
 801341c:	08013505 	.word	0x08013505
 8013420:	08013505 	.word	0x08013505
 8013424:	08013505 	.word	0x08013505
 8013428:	08013505 	.word	0x08013505
 801342c:	08013505 	.word	0x08013505
 8013430:	08013505 	.word	0x08013505
 8013434:	08013505 	.word	0x08013505
 8013438:	08013505 	.word	0x08013505
 801343c:	08013505 	.word	0x08013505
 8013440:	08013505 	.word	0x08013505
 8013444:	08013505 	.word	0x08013505
 8013448:	08013505 	.word	0x08013505
 801344c:	08013515 	.word	0x08013515
 8013450:	08013505 	.word	0x08013505
 8013454:	08013505 	.word	0x08013505
 8013458:	08013515 	.word	0x08013515
 801345c:	08013505 	.word	0x08013505
 8013460:	08013505 	.word	0x08013505
 8013464:	08013505 	.word	0x08013505
 8013468:	08013505 	.word	0x08013505
 801346c:	08013505 	.word	0x08013505
 8013470:	08013515 	.word	0x08013515
 8013474:	3b01      	subs	r3, #1
 8013476:	2b1f      	cmp	r3, #31
 8013478:	d844      	bhi.n	8013504 <SPIF_FindChip+0x240>
 801347a:	a201      	add	r2, pc, #4	; (adr r2, 8013480 <SPIF_FindChip+0x1bc>)
 801347c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013480:	08013519 	.word	0x08013519
 8013484:	08013505 	.word	0x08013505
 8013488:	08013505 	.word	0x08013505
 801348c:	08013519 	.word	0x08013519
 8013490:	08013505 	.word	0x08013505
 8013494:	08013505 	.word	0x08013505
 8013498:	08013505 	.word	0x08013505
 801349c:	08013505 	.word	0x08013505
 80134a0:	08013505 	.word	0x08013505
 80134a4:	08013505 	.word	0x08013505
 80134a8:	08013505 	.word	0x08013505
 80134ac:	08013505 	.word	0x08013505
 80134b0:	08013505 	.word	0x08013505
 80134b4:	08013505 	.word	0x08013505
 80134b8:	08013505 	.word	0x08013505
 80134bc:	08013505 	.word	0x08013505
 80134c0:	08013505 	.word	0x08013505
 80134c4:	08013505 	.word	0x08013505
 80134c8:	08013505 	.word	0x08013505
 80134cc:	08013505 	.word	0x08013505
 80134d0:	08013505 	.word	0x08013505
 80134d4:	08013505 	.word	0x08013505
 80134d8:	08013505 	.word	0x08013505
 80134dc:	08013505 	.word	0x08013505
 80134e0:	08013505 	.word	0x08013505
 80134e4:	08013505 	.word	0x08013505
 80134e8:	08013505 	.word	0x08013505
 80134ec:	08013519 	.word	0x08013519
 80134f0:	08013505 	.word	0x08013505
 80134f4:	08013505 	.word	0x08013505
 80134f8:	08013505 	.word	0x08013505
 80134fc:	08013519 	.word	0x08013519
 8013500:	2b37      	cmp	r3, #55	; 0x37
 8013502:	d00b      	beq.n	801351c <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2200      	movs	r2, #0
 8013508:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 801350a:	e008      	b.n	801351e <SPIF_FindChip+0x25a>
      break;
 801350c:	bf00      	nop
 801350e:	e006      	b.n	801351e <SPIF_FindChip+0x25a>
      break;
 8013510:	bf00      	nop
 8013512:	e004      	b.n	801351e <SPIF_FindChip+0x25a>
      break;
 8013514:	bf00      	nop
 8013516:	e002      	b.n	801351e <SPIF_FindChip+0x25a>
      break;
 8013518:	bf00      	nop
 801351a:	e000      	b.n	801351e <SPIF_FindChip+0x25a>
      break;
 801351c:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	7a5b      	ldrb	r3, [r3, #9]
 8013522:	3b11      	subs	r3, #17
 8013524:	2b0f      	cmp	r3, #15
 8013526:	d84e      	bhi.n	80135c6 <SPIF_FindChip+0x302>
 8013528:	a201      	add	r2, pc, #4	; (adr r2, 8013530 <SPIF_FindChip+0x26c>)
 801352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801352e:	bf00      	nop
 8013530:	08013571 	.word	0x08013571
 8013534:	08013579 	.word	0x08013579
 8013538:	08013581 	.word	0x08013581
 801353c:	08013589 	.word	0x08013589
 8013540:	08013591 	.word	0x08013591
 8013544:	08013599 	.word	0x08013599
 8013548:	080135a1 	.word	0x080135a1
 801354c:	080135a9 	.word	0x080135a9
 8013550:	080135b3 	.word	0x080135b3
 8013554:	080135c7 	.word	0x080135c7
 8013558:	080135c7 	.word	0x080135c7
 801355c:	080135c7 	.word	0x080135c7
 8013560:	080135c7 	.word	0x080135c7
 8013564:	080135c7 	.word	0x080135c7
 8013568:	080135c7 	.word	0x080135c7
 801356c:	080135bd 	.word	0x080135bd
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	2202      	movs	r2, #2
 8013574:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 8013576:	e02a      	b.n	80135ce <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	2204      	movs	r2, #4
 801357c:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 801357e:	e026      	b.n	80135ce <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	2208      	movs	r2, #8
 8013584:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 8013586:	e022      	b.n	80135ce <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2210      	movs	r2, #16
 801358c:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 801358e:	e01e      	b.n	80135ce <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2220      	movs	r2, #32
 8013594:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 8013596:	e01a      	b.n	80135ce <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	2240      	movs	r2, #64	; 0x40
 801359c:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 801359e:	e016      	b.n	80135ce <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	2280      	movs	r2, #128	; 0x80
 80135a4:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 80135a6:	e012      	b.n	80135ce <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80135ae:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 80135b0:	e00d      	b.n	80135ce <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80135b8:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 80135ba:	e008      	b.n	80135ce <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80135c2:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 80135c4:	e003      	b.n	80135ce <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	2200      	movs	r2, #0
 80135ca:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 80135cc:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	69db      	ldr	r3, [r3, #28]
 80135d2:	011a      	lsls	r2, r3, #4
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	699b      	ldr	r3, [r3, #24]
 80135dc:	031b      	lsls	r3, r3, #12
 80135de:	0a1a      	lsrs	r2, r3, #8
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 80135e4:	2301      	movs	r3, #1
 80135e6:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 80135e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	3718      	adds	r7, #24
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}
 80135f2:	bf00      	nop

080135f4 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b08a      	sub	sp, #40	; 0x28
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	60f8      	str	r0, [r7, #12]
 80135fc:	60b9      	str	r1, [r7, #8]
 80135fe:	607a      	str	r2, [r7, #4]
 8013600:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8013602:	2300      	movs	r3, #0
 8013604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8013608:	2300      	movs	r3, #0
 801360a:	623b      	str	r3, [r7, #32]
 801360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801360e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8013612:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	695b      	ldr	r3, [r3, #20]
 8013618:	68ba      	ldr	r2, [r7, #8]
 801361a:	429a      	cmp	r2, r3
 801361c:	f080 8084 	bcs.w	8013728 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 8013620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013622:	2bff      	cmp	r3, #255	; 0xff
 8013624:	f200 8082 	bhi.w	801372c <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8013628:	683a      	ldr	r2, [r7, #0]
 801362a:	69fb      	ldr	r3, [r7, #28]
 801362c:	429a      	cmp	r2, r3
 801362e:	d901      	bls.n	8013634 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 8013630:	69fb      	ldr	r3, [r7, #28]
 8013632:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	021b      	lsls	r3, r3, #8
 8013638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801363a:	4413      	add	r3, r2
 801363c:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 801363e:	68f8      	ldr	r0, [r7, #12]
 8013640:	f7ff fdad 	bl	801319e <SPIF_WriteEnable>
 8013644:	4603      	mov	r3, r0
 8013646:	f083 0301 	eor.w	r3, r3, #1
 801364a:	b2db      	uxtb	r3, r3
 801364c:	2b00      	cmp	r3, #0
 801364e:	d16f      	bne.n	8013730 <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8013650:	2100      	movs	r1, #0
 8013652:	68f8      	ldr	r0, [r7, #12]
 8013654:	f7ff fce1 	bl	801301a <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	69db      	ldr	r3, [r3, #28]
 801365c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013660:	d322      	bcc.n	80136a8 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 8013662:	2312      	movs	r3, #18
 8013664:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 8013666:	6a3b      	ldr	r3, [r7, #32]
 8013668:	0e1b      	lsrs	r3, r3, #24
 801366a:	b2db      	uxtb	r3, r3
 801366c:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 801366e:	6a3b      	ldr	r3, [r7, #32]
 8013670:	0c1b      	lsrs	r3, r3, #16
 8013672:	b2db      	uxtb	r3, r3
 8013674:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 8013676:	6a3b      	ldr	r3, [r7, #32]
 8013678:	0a1b      	lsrs	r3, r3, #8
 801367a:	b2db      	uxtb	r3, r3
 801367c:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 801367e:	6a3b      	ldr	r3, [r7, #32]
 8013680:	b2db      	uxtb	r3, r3
 8013682:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8013684:	f107 0114 	add.w	r1, r7, #20
 8013688:	2364      	movs	r3, #100	; 0x64
 801368a:	2205      	movs	r2, #5
 801368c:	68f8      	ldr	r0, [r7, #12]
 801368e:	f7ff fd18 	bl	80130c2 <SPIF_Transmit>
 8013692:	4603      	mov	r3, r0
 8013694:	f083 0301 	eor.w	r3, r3, #1
 8013698:	b2db      	uxtb	r3, r3
 801369a:	2b00      	cmp	r3, #0
 801369c:	d023      	beq.n	80136e6 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 801369e:	2101      	movs	r1, #1
 80136a0:	68f8      	ldr	r0, [r7, #12]
 80136a2:	f7ff fcba 	bl	801301a <SPIF_CsPin>
        break;
 80136a6:	e044      	b.n	8013732 <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 80136a8:	2302      	movs	r3, #2
 80136aa:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 80136ac:	6a3b      	ldr	r3, [r7, #32]
 80136ae:	0c1b      	lsrs	r3, r3, #16
 80136b0:	b2db      	uxtb	r3, r3
 80136b2:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 80136b4:	6a3b      	ldr	r3, [r7, #32]
 80136b6:	0a1b      	lsrs	r3, r3, #8
 80136b8:	b2db      	uxtb	r3, r3
 80136ba:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 80136bc:	6a3b      	ldr	r3, [r7, #32]
 80136be:	b2db      	uxtb	r3, r3
 80136c0:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80136c2:	f107 0114 	add.w	r1, r7, #20
 80136c6:	2364      	movs	r3, #100	; 0x64
 80136c8:	2204      	movs	r2, #4
 80136ca:	68f8      	ldr	r0, [r7, #12]
 80136cc:	f7ff fcf9 	bl	80130c2 <SPIF_Transmit>
 80136d0:	4603      	mov	r3, r0
 80136d2:	f083 0301 	eor.w	r3, r3, #1
 80136d6:	b2db      	uxtb	r3, r3
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d004      	beq.n	80136e6 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 80136dc:	2101      	movs	r1, #1
 80136de:	68f8      	ldr	r0, [r7, #12]
 80136e0:	f7ff fc9b 	bl	801301a <SPIF_CsPin>
        break;
 80136e4:	e025      	b.n	8013732 <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 80136e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80136ea:	683a      	ldr	r2, [r7, #0]
 80136ec:	6879      	ldr	r1, [r7, #4]
 80136ee:	68f8      	ldr	r0, [r7, #12]
 80136f0:	f7ff fce7 	bl	80130c2 <SPIF_Transmit>
 80136f4:	4603      	mov	r3, r0
 80136f6:	f083 0301 	eor.w	r3, r3, #1
 80136fa:	b2db      	uxtb	r3, r3
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d004      	beq.n	801370a <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8013700:	2101      	movs	r1, #1
 8013702:	68f8      	ldr	r0, [r7, #12]
 8013704:	f7ff fc89 	bl	801301a <SPIF_CsPin>
      break;
 8013708:	e013      	b.n	8013732 <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 801370a:	2101      	movs	r1, #1
 801370c:	68f8      	ldr	r0, [r7, #12]
 801370e:	f7ff fc84 	bl	801301a <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 8013712:	2164      	movs	r1, #100	; 0x64
 8013714:	68f8      	ldr	r0, [r7, #12]
 8013716:	f7ff fdaf 	bl	8013278 <SPIF_WaitForWriting>
 801371a:	4603      	mov	r3, r0
 801371c:	2b00      	cmp	r3, #0
 801371e:	d008      	beq.n	8013732 <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8013720:	2301      	movs	r3, #1
 8013722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013726:	e004      	b.n	8013732 <SPIF_WriteFn+0x13e>
      break;
 8013728:	bf00      	nop
 801372a:	e002      	b.n	8013732 <SPIF_WriteFn+0x13e>
      break;
 801372c:	bf00      	nop
 801372e:	e000      	b.n	8013732 <SPIF_WriteFn+0x13e>
      break;
 8013730:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8013732:	68f8      	ldr	r0, [r7, #12]
 8013734:	f7ff fd57 	bl	80131e6 <SPIF_WriteDisable>
  return retVal;
 8013738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801373c:	4618      	mov	r0, r3
 801373e:	3728      	adds	r7, #40	; 0x28
 8013740:	46bd      	mov	sp, r7
 8013742:	bd80      	pop	{r7, pc}

08013744 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b086      	sub	sp, #24
 8013748:	af00      	add	r7, sp, #0
 801374a:	60f8      	str	r0, [r7, #12]
 801374c:	60b9      	str	r1, [r7, #8]
 801374e:	607a      	str	r2, [r7, #4]
 8013750:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8013752:	2300      	movs	r3, #0
 8013754:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 8013756:	2100      	movs	r1, #0
 8013758:	68f8      	ldr	r0, [r7, #12]
 801375a:	f7ff fc5e 	bl	801301a <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	69db      	ldr	r3, [r3, #28]
 8013762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013766:	d322      	bcc.n	80137ae <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 8013768:	2313      	movs	r3, #19
 801376a:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	0e1b      	lsrs	r3, r3, #24
 8013770:	b2db      	uxtb	r3, r3
 8013772:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	0c1b      	lsrs	r3, r3, #16
 8013778:	b2db      	uxtb	r3, r3
 801377a:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	0a1b      	lsrs	r3, r3, #8
 8013780:	b2db      	uxtb	r3, r3
 8013782:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 8013784:	68bb      	ldr	r3, [r7, #8]
 8013786:	b2db      	uxtb	r3, r3
 8013788:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 801378a:	f107 0110 	add.w	r1, r7, #16
 801378e:	2364      	movs	r3, #100	; 0x64
 8013790:	2205      	movs	r2, #5
 8013792:	68f8      	ldr	r0, [r7, #12]
 8013794:	f7ff fc95 	bl	80130c2 <SPIF_Transmit>
 8013798:	4603      	mov	r3, r0
 801379a:	f083 0301 	eor.w	r3, r3, #1
 801379e:	b2db      	uxtb	r3, r3
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d023      	beq.n	80137ec <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 80137a4:	2101      	movs	r1, #1
 80137a6:	68f8      	ldr	r0, [r7, #12]
 80137a8:	f7ff fc37 	bl	801301a <SPIF_CsPin>
        break;
 80137ac:	e036      	b.n	801381c <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 80137ae:	2303      	movs	r3, #3
 80137b0:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 80137b2:	68bb      	ldr	r3, [r7, #8]
 80137b4:	0c1b      	lsrs	r3, r3, #16
 80137b6:	b2db      	uxtb	r3, r3
 80137b8:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	0a1b      	lsrs	r3, r3, #8
 80137be:	b2db      	uxtb	r3, r3
 80137c0:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 80137c2:	68bb      	ldr	r3, [r7, #8]
 80137c4:	b2db      	uxtb	r3, r3
 80137c6:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80137c8:	f107 0110 	add.w	r1, r7, #16
 80137cc:	2364      	movs	r3, #100	; 0x64
 80137ce:	2204      	movs	r2, #4
 80137d0:	68f8      	ldr	r0, [r7, #12]
 80137d2:	f7ff fc76 	bl	80130c2 <SPIF_Transmit>
 80137d6:	4603      	mov	r3, r0
 80137d8:	f083 0301 	eor.w	r3, r3, #1
 80137dc:	b2db      	uxtb	r3, r3
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d004      	beq.n	80137ec <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 80137e2:	2101      	movs	r1, #1
 80137e4:	68f8      	ldr	r0, [r7, #12]
 80137e6:	f7ff fc18 	bl	801301a <SPIF_CsPin>
        break;
 80137ea:	e017      	b.n	801381c <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 80137ec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80137f0:	683a      	ldr	r2, [r7, #0]
 80137f2:	6879      	ldr	r1, [r7, #4]
 80137f4:	68f8      	ldr	r0, [r7, #12]
 80137f6:	f7ff fc9b 	bl	8013130 <SPIF_Receive>
 80137fa:	4603      	mov	r3, r0
 80137fc:	f083 0301 	eor.w	r3, r3, #1
 8013800:	b2db      	uxtb	r3, r3
 8013802:	2b00      	cmp	r3, #0
 8013804:	d004      	beq.n	8013810 <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 8013806:	2101      	movs	r1, #1
 8013808:	68f8      	ldr	r0, [r7, #12]
 801380a:	f7ff fc06 	bl	801301a <SPIF_CsPin>
      break;
 801380e:	e005      	b.n	801381c <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8013810:	2101      	movs	r1, #1
 8013812:	68f8      	ldr	r0, [r7, #12]
 8013814:	f7ff fc01 	bl	801301a <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8013818:	2301      	movs	r3, #1
 801381a:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 801381c:	7dfb      	ldrb	r3, [r7, #23]
}
 801381e:	4618      	mov	r0, r3
 8013820:	3718      	adds	r7, #24
 8013822:	46bd      	mov	sp, r7
 8013824:	bd80      	pop	{r7, pc}

08013826 <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8013826:	b580      	push	{r7, lr}
 8013828:	b086      	sub	sp, #24
 801382a:	af00      	add	r7, sp, #0
 801382c:	60f8      	str	r0, [r7, #12]
 801382e:	60b9      	str	r1, [r7, #8]
 8013830:	607a      	str	r2, [r7, #4]
 8013832:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8013834:	2300      	movs	r3, #0
 8013836:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d03a      	beq.n	80138b4 <SPIF_Init+0x8e>
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d037      	beq.n	80138b4 <SPIF_Init+0x8e>
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d034      	beq.n	80138b4 <SPIF_Init+0x8e>
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	7a9b      	ldrb	r3, [r3, #10]
 801384e:	2b01      	cmp	r3, #1
 8013850:	d030      	beq.n	80138b4 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 8013852:	2220      	movs	r2, #32
 8013854:	2100      	movs	r1, #0
 8013856:	68f8      	ldr	r0, [r7, #12]
 8013858:	f002 fe2b 	bl	80164b2 <memset>
    Handle->HSpi = HSpi;
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	68ba      	ldr	r2, [r7, #8]
 8013860:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	687a      	ldr	r2, [r7, #4]
 8013866:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 8013868:	887a      	ldrh	r2, [r7, #2]
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 801386e:	2101      	movs	r1, #1
 8013870:	68f8      	ldr	r0, [r7, #12]
 8013872:	f7ff fbd2 	bl	801301a <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 8013876:	e002      	b.n	801387e <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 8013878:	2001      	movs	r0, #1
 801387a:	f7ff fba3 	bl	8012fc4 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 801387e:	f7f2 fc47 	bl	8006110 <HAL_GetTick>
 8013882:	4603      	mov	r3, r0
 8013884:	2b13      	cmp	r3, #19
 8013886:	d9f7      	bls.n	8013878 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 8013888:	68f8      	ldr	r0, [r7, #12]
 801388a:	f7ff fcac 	bl	80131e6 <SPIF_WriteDisable>
 801388e:	4603      	mov	r3, r0
 8013890:	f083 0301 	eor.w	r3, r3, #1
 8013894:	b2db      	uxtb	r3, r3
 8013896:	2b00      	cmp	r3, #0
 8013898:	d10b      	bne.n	80138b2 <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 801389a:	68f8      	ldr	r0, [r7, #12]
 801389c:	f7ff fd12 	bl	80132c4 <SPIF_FindChip>
 80138a0:	4603      	mov	r3, r0
 80138a2:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 80138a4:	7dfb      	ldrb	r3, [r7, #23]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d004      	beq.n	80138b4 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	2201      	movs	r2, #1
 80138ae:	729a      	strb	r2, [r3, #10]
 80138b0:	e000      	b.n	80138b4 <SPIF_Init+0x8e>
      break;
 80138b2:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 80138b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80138b6:	4618      	mov	r0, r3
 80138b8:	3718      	adds	r7, #24
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd80      	pop	{r7, pc}

080138be <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 80138be:	b580      	push	{r7, lr}
 80138c0:	b086      	sub	sp, #24
 80138c2:	af00      	add	r7, sp, #0
 80138c4:	6078      	str	r0, [r7, #4]
 80138c6:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 80138c8:	6878      	ldr	r0, [r7, #4]
 80138ca:	f7ff fb86 	bl	8012fda <SPIF_Lock>
  bool retVal = false;
 80138ce:	2300      	movs	r3, #0
 80138d0:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	031b      	lsls	r3, r3, #12
 80138d6:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	699b      	ldr	r3, [r3, #24]
 80138dc:	683a      	ldr	r2, [r7, #0]
 80138de:	429a      	cmp	r2, r3
 80138e0:	d262      	bcs.n	80139a8 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f7ff fc5b 	bl	801319e <SPIF_WriteEnable>
 80138e8:	4603      	mov	r3, r0
 80138ea:	f083 0301 	eor.w	r3, r3, #1
 80138ee:	b2db      	uxtb	r3, r3
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d15b      	bne.n	80139ac <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80138f4:	2100      	movs	r1, #0
 80138f6:	6878      	ldr	r0, [r7, #4]
 80138f8:	f7ff fb8f 	bl	801301a <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	69db      	ldr	r3, [r3, #28]
 8013900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013904:	d322      	bcc.n	801394c <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 8013906:	2321      	movs	r3, #33	; 0x21
 8013908:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	0e1b      	lsrs	r3, r3, #24
 801390e:	b2db      	uxtb	r3, r3
 8013910:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	0c1b      	lsrs	r3, r3, #16
 8013916:	b2db      	uxtb	r3, r3
 8013918:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 801391a:	693b      	ldr	r3, [r7, #16]
 801391c:	0a1b      	lsrs	r3, r3, #8
 801391e:	b2db      	uxtb	r3, r3
 8013920:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	b2db      	uxtb	r3, r3
 8013926:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8013928:	f107 0108 	add.w	r1, r7, #8
 801392c:	2364      	movs	r3, #100	; 0x64
 801392e:	2205      	movs	r2, #5
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f7ff fbc6 	bl	80130c2 <SPIF_Transmit>
 8013936:	4603      	mov	r3, r0
 8013938:	f083 0301 	eor.w	r3, r3, #1
 801393c:	b2db      	uxtb	r3, r3
 801393e:	2b00      	cmp	r3, #0
 8013940:	d023      	beq.n	801398a <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8013942:	2101      	movs	r1, #1
 8013944:	6878      	ldr	r0, [r7, #4]
 8013946:	f7ff fb68 	bl	801301a <SPIF_CsPin>
        break;
 801394a:	e030      	b.n	80139ae <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 801394c:	2320      	movs	r3, #32
 801394e:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	0c1b      	lsrs	r3, r3, #16
 8013954:	b2db      	uxtb	r3, r3
 8013956:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8013958:	693b      	ldr	r3, [r7, #16]
 801395a:	0a1b      	lsrs	r3, r3, #8
 801395c:	b2db      	uxtb	r3, r3
 801395e:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 8013960:	693b      	ldr	r3, [r7, #16]
 8013962:	b2db      	uxtb	r3, r3
 8013964:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8013966:	f107 0108 	add.w	r1, r7, #8
 801396a:	2364      	movs	r3, #100	; 0x64
 801396c:	2204      	movs	r2, #4
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f7ff fba7 	bl	80130c2 <SPIF_Transmit>
 8013974:	4603      	mov	r3, r0
 8013976:	f083 0301 	eor.w	r3, r3, #1
 801397a:	b2db      	uxtb	r3, r3
 801397c:	2b00      	cmp	r3, #0
 801397e:	d004      	beq.n	801398a <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8013980:	2101      	movs	r1, #1
 8013982:	6878      	ldr	r0, [r7, #4]
 8013984:	f7ff fb49 	bl	801301a <SPIF_CsPin>
        break;
 8013988:	e011      	b.n	80139ae <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 801398a:	2101      	movs	r1, #1
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f7ff fb44 	bl	801301a <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 8013992:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f7ff fc6e 	bl	8013278 <SPIF_WaitForWriting>
 801399c:	4603      	mov	r3, r0
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d005      	beq.n	80139ae <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 80139a2:	2301      	movs	r3, #1
 80139a4:	75fb      	strb	r3, [r7, #23]
 80139a6:	e002      	b.n	80139ae <SPIF_EraseSector+0xf0>
      break;
 80139a8:	bf00      	nop
 80139aa:	e000      	b.n	80139ae <SPIF_EraseSector+0xf0>
      break;
 80139ac:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 80139ae:	6878      	ldr	r0, [r7, #4]
 80139b0:	f7ff fc19 	bl	80131e6 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 80139b4:	6878      	ldr	r0, [r7, #4]
 80139b6:	f7ff fb23 	bl	8013000 <SPIF_UnLock>
  return retVal;
 80139ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80139bc:	4618      	mov	r0, r3
 80139be:	3718      	adds	r7, #24
 80139c0:	46bd      	mov	sp, r7
 80139c2:	bd80      	pop	{r7, pc}

080139c4 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b088      	sub	sp, #32
 80139c8:	af02      	add	r7, sp, #8
 80139ca:	60f8      	str	r0, [r7, #12]
 80139cc:	60b9      	str	r1, [r7, #8]
 80139ce:	607a      	str	r2, [r7, #4]
 80139d0:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 80139d2:	68f8      	ldr	r0, [r7, #12]
 80139d4:	f7ff fb01 	bl	8012fda <SPIF_Lock>
  bool retVal = false;
 80139d8:	2300      	movs	r3, #0
 80139da:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 80139dc:	6a3b      	ldr	r3, [r7, #32]
 80139de:	9300      	str	r3, [sp, #0]
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	687a      	ldr	r2, [r7, #4]
 80139e4:	68b9      	ldr	r1, [r7, #8]
 80139e6:	68f8      	ldr	r0, [r7, #12]
 80139e8:	f7ff fe04 	bl	80135f4 <SPIF_WriteFn>
 80139ec:	4603      	mov	r3, r0
 80139ee:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 80139f0:	68f8      	ldr	r0, [r7, #12]
 80139f2:	f7ff fb05 	bl	8013000 <SPIF_UnLock>
  return retVal;
 80139f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	3718      	adds	r7, #24
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}

08013a00 <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b088      	sub	sp, #32
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	60f8      	str	r0, [r7, #12]
 8013a08:	60b9      	str	r1, [r7, #8]
 8013a0a:	607a      	str	r2, [r7, #4]
 8013a0c:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8013a0e:	68f8      	ldr	r0, [r7, #12]
 8013a10:	f7ff fae3 	bl	8012fda <SPIF_Lock>
  bool retVal = false;
 8013a14:	2300      	movs	r3, #0
 8013a16:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	021b      	lsls	r3, r3, #8
 8013a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a1e:	4413      	add	r3, r2
 8013a20:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 8013a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a24:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8013a28:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 8013a2a:	683a      	ldr	r2, [r7, #0]
 8013a2c:	697b      	ldr	r3, [r7, #20]
 8013a2e:	429a      	cmp	r2, r3
 8013a30:	d901      	bls.n	8013a36 <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 8013a32:	697b      	ldr	r3, [r7, #20]
 8013a34:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 8013a36:	683b      	ldr	r3, [r7, #0]
 8013a38:	687a      	ldr	r2, [r7, #4]
 8013a3a:	69b9      	ldr	r1, [r7, #24]
 8013a3c:	68f8      	ldr	r0, [r7, #12]
 8013a3e:	f7ff fe81 	bl	8013744 <SPIF_ReadFn>
 8013a42:	4603      	mov	r3, r0
 8013a44:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 8013a46:	68f8      	ldr	r0, [r7, #12]
 8013a48:	f7ff fada 	bl	8013000 <SPIF_UnLock>
  return retVal;
 8013a4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8013a4e:	4618      	mov	r0, r3
 8013a50:	3720      	adds	r7, #32
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}
	...

08013a58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013a5c:	2200      	movs	r2, #0
 8013a5e:	4912      	ldr	r1, [pc, #72]	; (8013aa8 <MX_USB_DEVICE_Init+0x50>)
 8013a60:	4812      	ldr	r0, [pc, #72]	; (8013aac <MX_USB_DEVICE_Init+0x54>)
 8013a62:	f7fe f81f 	bl	8011aa4 <USBD_Init>
 8013a66:	4603      	mov	r3, r0
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d001      	beq.n	8013a70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013a6c:	f7ed ffaf 	bl	80019ce <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013a70:	490f      	ldr	r1, [pc, #60]	; (8013ab0 <MX_USB_DEVICE_Init+0x58>)
 8013a72:	480e      	ldr	r0, [pc, #56]	; (8013aac <MX_USB_DEVICE_Init+0x54>)
 8013a74:	f7fe f846 	bl	8011b04 <USBD_RegisterClass>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d001      	beq.n	8013a82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013a7e:	f7ed ffa6 	bl	80019ce <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013a82:	490c      	ldr	r1, [pc, #48]	; (8013ab4 <MX_USB_DEVICE_Init+0x5c>)
 8013a84:	4809      	ldr	r0, [pc, #36]	; (8013aac <MX_USB_DEVICE_Init+0x54>)
 8013a86:	f7fd ff3d 	bl	8011904 <USBD_CDC_RegisterInterface>
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d001      	beq.n	8013a94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013a90:	f7ed ff9d 	bl	80019ce <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013a94:	4805      	ldr	r0, [pc, #20]	; (8013aac <MX_USB_DEVICE_Init+0x54>)
 8013a96:	f7fe f86b 	bl	8011b70 <USBD_Start>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d001      	beq.n	8013aa4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013aa0:	f7ed ff95 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013aa4:	bf00      	nop
 8013aa6:	bd80      	pop	{r7, pc}
 8013aa8:	200000d0 	.word	0x200000d0
 8013aac:	20001254 	.word	0x20001254
 8013ab0:	2000003c 	.word	0x2000003c
 8013ab4:	200000bc 	.word	0x200000bc

08013ab8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013abc:	2200      	movs	r2, #0
 8013abe:	4905      	ldr	r1, [pc, #20]	; (8013ad4 <CDC_Init_FS+0x1c>)
 8013ac0:	4805      	ldr	r0, [pc, #20]	; (8013ad8 <CDC_Init_FS+0x20>)
 8013ac2:	f7fd ff39 	bl	8011938 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013ac6:	4905      	ldr	r1, [pc, #20]	; (8013adc <CDC_Init_FS+0x24>)
 8013ac8:	4803      	ldr	r0, [pc, #12]	; (8013ad8 <CDC_Init_FS+0x20>)
 8013aca:	f7fd ff57 	bl	801197c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013ace:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	bd80      	pop	{r7, pc}
 8013ad4:	20001930 	.word	0x20001930
 8013ad8:	20001254 	.word	0x20001254
 8013adc:	20001530 	.word	0x20001530

08013ae0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013ae0:	b480      	push	{r7}
 8013ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013ae4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aee:	4770      	bx	lr

08013af0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013af0:	b480      	push	{r7}
 8013af2:	b083      	sub	sp, #12
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	4603      	mov	r3, r0
 8013af8:	6039      	str	r1, [r7, #0]
 8013afa:	71fb      	strb	r3, [r7, #7]
 8013afc:	4613      	mov	r3, r2
 8013afe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013b00:	79fb      	ldrb	r3, [r7, #7]
 8013b02:	2b23      	cmp	r3, #35	; 0x23
 8013b04:	d84a      	bhi.n	8013b9c <CDC_Control_FS+0xac>
 8013b06:	a201      	add	r2, pc, #4	; (adr r2, 8013b0c <CDC_Control_FS+0x1c>)
 8013b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b0c:	08013b9d 	.word	0x08013b9d
 8013b10:	08013b9d 	.word	0x08013b9d
 8013b14:	08013b9d 	.word	0x08013b9d
 8013b18:	08013b9d 	.word	0x08013b9d
 8013b1c:	08013b9d 	.word	0x08013b9d
 8013b20:	08013b9d 	.word	0x08013b9d
 8013b24:	08013b9d 	.word	0x08013b9d
 8013b28:	08013b9d 	.word	0x08013b9d
 8013b2c:	08013b9d 	.word	0x08013b9d
 8013b30:	08013b9d 	.word	0x08013b9d
 8013b34:	08013b9d 	.word	0x08013b9d
 8013b38:	08013b9d 	.word	0x08013b9d
 8013b3c:	08013b9d 	.word	0x08013b9d
 8013b40:	08013b9d 	.word	0x08013b9d
 8013b44:	08013b9d 	.word	0x08013b9d
 8013b48:	08013b9d 	.word	0x08013b9d
 8013b4c:	08013b9d 	.word	0x08013b9d
 8013b50:	08013b9d 	.word	0x08013b9d
 8013b54:	08013b9d 	.word	0x08013b9d
 8013b58:	08013b9d 	.word	0x08013b9d
 8013b5c:	08013b9d 	.word	0x08013b9d
 8013b60:	08013b9d 	.word	0x08013b9d
 8013b64:	08013b9d 	.word	0x08013b9d
 8013b68:	08013b9d 	.word	0x08013b9d
 8013b6c:	08013b9d 	.word	0x08013b9d
 8013b70:	08013b9d 	.word	0x08013b9d
 8013b74:	08013b9d 	.word	0x08013b9d
 8013b78:	08013b9d 	.word	0x08013b9d
 8013b7c:	08013b9d 	.word	0x08013b9d
 8013b80:	08013b9d 	.word	0x08013b9d
 8013b84:	08013b9d 	.word	0x08013b9d
 8013b88:	08013b9d 	.word	0x08013b9d
 8013b8c:	08013b9d 	.word	0x08013b9d
 8013b90:	08013b9d 	.word	0x08013b9d
 8013b94:	08013b9d 	.word	0x08013b9d
 8013b98:	08013b9d 	.word	0x08013b9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013b9c:	bf00      	nop
  }

  return (USBD_OK);
 8013b9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	370c      	adds	r7, #12
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013baa:	4770      	bx	lr

08013bac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b082      	sub	sp, #8
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013bb6:	6879      	ldr	r1, [r7, #4]
 8013bb8:	4805      	ldr	r0, [pc, #20]	; (8013bd0 <CDC_Receive_FS+0x24>)
 8013bba:	f7fd fedf 	bl	801197c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013bbe:	4804      	ldr	r0, [pc, #16]	; (8013bd0 <CDC_Receive_FS+0x24>)
 8013bc0:	f7fd ff3a 	bl	8011a38 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013bc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3708      	adds	r7, #8
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}
 8013bce:	bf00      	nop
 8013bd0:	20001254 	.word	0x20001254

08013bd4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b084      	sub	sp, #16
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
 8013bdc:	460b      	mov	r3, r1
 8013bde:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013be0:	2300      	movs	r3, #0
 8013be2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013be4:	4b0d      	ldr	r3, [pc, #52]	; (8013c1c <CDC_Transmit_FS+0x48>)
 8013be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013bea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d001      	beq.n	8013bfa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8013bf6:	2301      	movs	r3, #1
 8013bf8:	e00b      	b.n	8013c12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8013bfa:	887b      	ldrh	r3, [r7, #2]
 8013bfc:	461a      	mov	r2, r3
 8013bfe:	6879      	ldr	r1, [r7, #4]
 8013c00:	4806      	ldr	r0, [pc, #24]	; (8013c1c <CDC_Transmit_FS+0x48>)
 8013c02:	f7fd fe99 	bl	8011938 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013c06:	4805      	ldr	r0, [pc, #20]	; (8013c1c <CDC_Transmit_FS+0x48>)
 8013c08:	f7fd fed6 	bl	80119b8 <USBD_CDC_TransmitPacket>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c12:	4618      	mov	r0, r3
 8013c14:	3710      	adds	r7, #16
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bd80      	pop	{r7, pc}
 8013c1a:	bf00      	nop
 8013c1c:	20001254 	.word	0x20001254

08013c20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013c20:	b480      	push	{r7}
 8013c22:	b087      	sub	sp, #28
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	60f8      	str	r0, [r7, #12]
 8013c28:	60b9      	str	r1, [r7, #8]
 8013c2a:	4613      	mov	r3, r2
 8013c2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013c2e:	2300      	movs	r3, #0
 8013c30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013c36:	4618      	mov	r0, r3
 8013c38:	371c      	adds	r7, #28
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c40:	4770      	bx	lr
	...

08013c44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013c44:	b480      	push	{r7}
 8013c46:	b083      	sub	sp, #12
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	6039      	str	r1, [r7, #0]
 8013c4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013c50:	683b      	ldr	r3, [r7, #0]
 8013c52:	2212      	movs	r2, #18
 8013c54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013c56:	4b03      	ldr	r3, [pc, #12]	; (8013c64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013c58:	4618      	mov	r0, r3
 8013c5a:	370c      	adds	r7, #12
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c62:	4770      	bx	lr
 8013c64:	200000f0 	.word	0x200000f0

08013c68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013c68:	b480      	push	{r7}
 8013c6a:	b083      	sub	sp, #12
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	4603      	mov	r3, r0
 8013c70:	6039      	str	r1, [r7, #0]
 8013c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	2204      	movs	r2, #4
 8013c78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013c7a:	4b03      	ldr	r3, [pc, #12]	; (8013c88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	370c      	adds	r7, #12
 8013c80:	46bd      	mov	sp, r7
 8013c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c86:	4770      	bx	lr
 8013c88:	20000110 	.word	0x20000110

08013c8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b082      	sub	sp, #8
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	4603      	mov	r3, r0
 8013c94:	6039      	str	r1, [r7, #0]
 8013c96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013c98:	79fb      	ldrb	r3, [r7, #7]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d105      	bne.n	8013caa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013c9e:	683a      	ldr	r2, [r7, #0]
 8013ca0:	4907      	ldr	r1, [pc, #28]	; (8013cc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8013ca2:	4808      	ldr	r0, [pc, #32]	; (8013cc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8013ca4:	f7ff f8ae 	bl	8012e04 <USBD_GetString>
 8013ca8:	e004      	b.n	8013cb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013caa:	683a      	ldr	r2, [r7, #0]
 8013cac:	4904      	ldr	r1, [pc, #16]	; (8013cc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8013cae:	4805      	ldr	r0, [pc, #20]	; (8013cc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8013cb0:	f7ff f8a8 	bl	8012e04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013cb4:	4b02      	ldr	r3, [pc, #8]	; (8013cc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	3708      	adds	r7, #8
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}
 8013cbe:	bf00      	nop
 8013cc0:	20001d30 	.word	0x20001d30
 8013cc4:	0801ad60 	.word	0x0801ad60

08013cc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b082      	sub	sp, #8
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	4603      	mov	r3, r0
 8013cd0:	6039      	str	r1, [r7, #0]
 8013cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013cd4:	683a      	ldr	r2, [r7, #0]
 8013cd6:	4904      	ldr	r1, [pc, #16]	; (8013ce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013cd8:	4804      	ldr	r0, [pc, #16]	; (8013cec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013cda:	f7ff f893 	bl	8012e04 <USBD_GetString>
  return USBD_StrDesc;
 8013cde:	4b02      	ldr	r3, [pc, #8]	; (8013ce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3708      	adds	r7, #8
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	20001d30 	.word	0x20001d30
 8013cec:	0801ad6c 	.word	0x0801ad6c

08013cf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	6039      	str	r1, [r7, #0]
 8013cfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013cfc:	683b      	ldr	r3, [r7, #0]
 8013cfe:	221a      	movs	r2, #26
 8013d00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013d02:	f000 f855 	bl	8013db0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013d06:	4b02      	ldr	r3, [pc, #8]	; (8013d10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013d08:	4618      	mov	r0, r3
 8013d0a:	3708      	adds	r7, #8
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}
 8013d10:	20000114 	.word	0x20000114

08013d14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b082      	sub	sp, #8
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	6039      	str	r1, [r7, #0]
 8013d1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013d20:	79fb      	ldrb	r3, [r7, #7]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d105      	bne.n	8013d32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013d26:	683a      	ldr	r2, [r7, #0]
 8013d28:	4907      	ldr	r1, [pc, #28]	; (8013d48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013d2a:	4808      	ldr	r0, [pc, #32]	; (8013d4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8013d2c:	f7ff f86a 	bl	8012e04 <USBD_GetString>
 8013d30:	e004      	b.n	8013d3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013d32:	683a      	ldr	r2, [r7, #0]
 8013d34:	4904      	ldr	r1, [pc, #16]	; (8013d48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013d36:	4805      	ldr	r0, [pc, #20]	; (8013d4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8013d38:	f7ff f864 	bl	8012e04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013d3c:	4b02      	ldr	r3, [pc, #8]	; (8013d48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013d3e:	4618      	mov	r0, r3
 8013d40:	3708      	adds	r7, #8
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bd80      	pop	{r7, pc}
 8013d46:	bf00      	nop
 8013d48:	20001d30 	.word	0x20001d30
 8013d4c:	0801ad80 	.word	0x0801ad80

08013d50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b082      	sub	sp, #8
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	4603      	mov	r3, r0
 8013d58:	6039      	str	r1, [r7, #0]
 8013d5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013d5c:	79fb      	ldrb	r3, [r7, #7]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d105      	bne.n	8013d6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013d62:	683a      	ldr	r2, [r7, #0]
 8013d64:	4907      	ldr	r1, [pc, #28]	; (8013d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013d66:	4808      	ldr	r0, [pc, #32]	; (8013d88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013d68:	f7ff f84c 	bl	8012e04 <USBD_GetString>
 8013d6c:	e004      	b.n	8013d78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013d6e:	683a      	ldr	r2, [r7, #0]
 8013d70:	4904      	ldr	r1, [pc, #16]	; (8013d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013d72:	4805      	ldr	r0, [pc, #20]	; (8013d88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013d74:	f7ff f846 	bl	8012e04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013d78:	4b02      	ldr	r3, [pc, #8]	; (8013d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	3708      	adds	r7, #8
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	bd80      	pop	{r7, pc}
 8013d82:	bf00      	nop
 8013d84:	20001d30 	.word	0x20001d30
 8013d88:	0801ad8c 	.word	0x0801ad8c

08013d8c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d8c:	b480      	push	{r7}
 8013d8e:	b083      	sub	sp, #12
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	4603      	mov	r3, r0
 8013d94:	6039      	str	r1, [r7, #0]
 8013d96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8013d98:	683b      	ldr	r3, [r7, #0]
 8013d9a:	220c      	movs	r2, #12
 8013d9c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8013d9e:	4b03      	ldr	r3, [pc, #12]	; (8013dac <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	370c      	adds	r7, #12
 8013da4:	46bd      	mov	sp, r7
 8013da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013daa:	4770      	bx	lr
 8013dac:	20000104 	.word	0x20000104

08013db0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b084      	sub	sp, #16
 8013db4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013db6:	4b0f      	ldr	r3, [pc, #60]	; (8013df4 <Get_SerialNum+0x44>)
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013dbc:	4b0e      	ldr	r3, [pc, #56]	; (8013df8 <Get_SerialNum+0x48>)
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013dc2:	4b0e      	ldr	r3, [pc, #56]	; (8013dfc <Get_SerialNum+0x4c>)
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013dc8:	68fa      	ldr	r2, [r7, #12]
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	4413      	add	r3, r2
 8013dce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d009      	beq.n	8013dea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013dd6:	2208      	movs	r2, #8
 8013dd8:	4909      	ldr	r1, [pc, #36]	; (8013e00 <Get_SerialNum+0x50>)
 8013dda:	68f8      	ldr	r0, [r7, #12]
 8013ddc:	f000 f814 	bl	8013e08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013de0:	2204      	movs	r2, #4
 8013de2:	4908      	ldr	r1, [pc, #32]	; (8013e04 <Get_SerialNum+0x54>)
 8013de4:	68b8      	ldr	r0, [r7, #8]
 8013de6:	f000 f80f 	bl	8013e08 <IntToUnicode>
  }
}
 8013dea:	bf00      	nop
 8013dec:	3710      	adds	r7, #16
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}
 8013df2:	bf00      	nop
 8013df4:	1fff7590 	.word	0x1fff7590
 8013df8:	1fff7594 	.word	0x1fff7594
 8013dfc:	1fff7598 	.word	0x1fff7598
 8013e00:	20000116 	.word	0x20000116
 8013e04:	20000126 	.word	0x20000126

08013e08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013e08:	b480      	push	{r7}
 8013e0a:	b087      	sub	sp, #28
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	60f8      	str	r0, [r7, #12]
 8013e10:	60b9      	str	r1, [r7, #8]
 8013e12:	4613      	mov	r3, r2
 8013e14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013e16:	2300      	movs	r3, #0
 8013e18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	75fb      	strb	r3, [r7, #23]
 8013e1e:	e027      	b.n	8013e70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	0f1b      	lsrs	r3, r3, #28
 8013e24:	2b09      	cmp	r3, #9
 8013e26:	d80b      	bhi.n	8013e40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	0f1b      	lsrs	r3, r3, #28
 8013e2c:	b2da      	uxtb	r2, r3
 8013e2e:	7dfb      	ldrb	r3, [r7, #23]
 8013e30:	005b      	lsls	r3, r3, #1
 8013e32:	4619      	mov	r1, r3
 8013e34:	68bb      	ldr	r3, [r7, #8]
 8013e36:	440b      	add	r3, r1
 8013e38:	3230      	adds	r2, #48	; 0x30
 8013e3a:	b2d2      	uxtb	r2, r2
 8013e3c:	701a      	strb	r2, [r3, #0]
 8013e3e:	e00a      	b.n	8013e56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	0f1b      	lsrs	r3, r3, #28
 8013e44:	b2da      	uxtb	r2, r3
 8013e46:	7dfb      	ldrb	r3, [r7, #23]
 8013e48:	005b      	lsls	r3, r3, #1
 8013e4a:	4619      	mov	r1, r3
 8013e4c:	68bb      	ldr	r3, [r7, #8]
 8013e4e:	440b      	add	r3, r1
 8013e50:	3237      	adds	r2, #55	; 0x37
 8013e52:	b2d2      	uxtb	r2, r2
 8013e54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	011b      	lsls	r3, r3, #4
 8013e5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013e5c:	7dfb      	ldrb	r3, [r7, #23]
 8013e5e:	005b      	lsls	r3, r3, #1
 8013e60:	3301      	adds	r3, #1
 8013e62:	68ba      	ldr	r2, [r7, #8]
 8013e64:	4413      	add	r3, r2
 8013e66:	2200      	movs	r2, #0
 8013e68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013e6a:	7dfb      	ldrb	r3, [r7, #23]
 8013e6c:	3301      	adds	r3, #1
 8013e6e:	75fb      	strb	r3, [r7, #23]
 8013e70:	7dfa      	ldrb	r2, [r7, #23]
 8013e72:	79fb      	ldrb	r3, [r7, #7]
 8013e74:	429a      	cmp	r2, r3
 8013e76:	d3d3      	bcc.n	8013e20 <IntToUnicode+0x18>
  }
}
 8013e78:	bf00      	nop
 8013e7a:	bf00      	nop
 8013e7c:	371c      	adds	r7, #28
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e84:	4770      	bx	lr
	...

08013e88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b084      	sub	sp, #16
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	4a0d      	ldr	r2, [pc, #52]	; (8013ecc <HAL_PCD_MspInit+0x44>)
 8013e96:	4293      	cmp	r3, r2
 8013e98:	d113      	bne.n	8013ec2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8013e9a:	4b0d      	ldr	r3, [pc, #52]	; (8013ed0 <HAL_PCD_MspInit+0x48>)
 8013e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e9e:	4a0c      	ldr	r2, [pc, #48]	; (8013ed0 <HAL_PCD_MspInit+0x48>)
 8013ea0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8013ea6:	4b0a      	ldr	r3, [pc, #40]	; (8013ed0 <HAL_PCD_MspInit+0x48>)
 8013ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013eaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013eae:	60fb      	str	r3, [r7, #12]
 8013eb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	2100      	movs	r1, #0
 8013eb6:	2043      	movs	r0, #67	; 0x43
 8013eb8:	f7f3 fcd5 	bl	8007866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8013ebc:	2043      	movs	r0, #67	; 0x43
 8013ebe:	f7f3 fcee 	bl	800789e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8013ec2:	bf00      	nop
 8013ec4:	3710      	adds	r7, #16
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}
 8013eca:	bf00      	nop
 8013ecc:	40006800 	.word	0x40006800
 8013ed0:	40021000 	.word	0x40021000

08013ed4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b082      	sub	sp, #8
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8013ee8:	4619      	mov	r1, r3
 8013eea:	4610      	mov	r0, r2
 8013eec:	f7fd fe8d 	bl	8011c0a <USBD_LL_SetupStage>
}
 8013ef0:	bf00      	nop
 8013ef2:	3708      	adds	r7, #8
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}

08013ef8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b082      	sub	sp, #8
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
 8013f00:	460b      	mov	r3, r1
 8013f02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8013f0a:	78fa      	ldrb	r2, [r7, #3]
 8013f0c:	6879      	ldr	r1, [r7, #4]
 8013f0e:	4613      	mov	r3, r2
 8013f10:	009b      	lsls	r3, r3, #2
 8013f12:	4413      	add	r3, r2
 8013f14:	00db      	lsls	r3, r3, #3
 8013f16:	440b      	add	r3, r1
 8013f18:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8013f1c:	681a      	ldr	r2, [r3, #0]
 8013f1e:	78fb      	ldrb	r3, [r7, #3]
 8013f20:	4619      	mov	r1, r3
 8013f22:	f7fd fec7 	bl	8011cb4 <USBD_LL_DataOutStage>
}
 8013f26:	bf00      	nop
 8013f28:	3708      	adds	r7, #8
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd80      	pop	{r7, pc}

08013f2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013f2e:	b580      	push	{r7, lr}
 8013f30:	b082      	sub	sp, #8
 8013f32:	af00      	add	r7, sp, #0
 8013f34:	6078      	str	r0, [r7, #4]
 8013f36:	460b      	mov	r3, r1
 8013f38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8013f40:	78fa      	ldrb	r2, [r7, #3]
 8013f42:	6879      	ldr	r1, [r7, #4]
 8013f44:	4613      	mov	r3, r2
 8013f46:	009b      	lsls	r3, r3, #2
 8013f48:	4413      	add	r3, r2
 8013f4a:	00db      	lsls	r3, r3, #3
 8013f4c:	440b      	add	r3, r1
 8013f4e:	333c      	adds	r3, #60	; 0x3c
 8013f50:	681a      	ldr	r2, [r3, #0]
 8013f52:	78fb      	ldrb	r3, [r7, #3]
 8013f54:	4619      	mov	r1, r3
 8013f56:	f7fd ff60 	bl	8011e1a <USBD_LL_DataInStage>
}
 8013f5a:	bf00      	nop
 8013f5c:	3708      	adds	r7, #8
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}

08013f62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013f62:	b580      	push	{r7, lr}
 8013f64:	b082      	sub	sp, #8
 8013f66:	af00      	add	r7, sp, #0
 8013f68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8013f70:	4618      	mov	r0, r3
 8013f72:	f7fe f89a 	bl	80120aa <USBD_LL_SOF>
}
 8013f76:	bf00      	nop
 8013f78:	3708      	adds	r7, #8
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd80      	pop	{r7, pc}

08013f7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013f7e:	b580      	push	{r7, lr}
 8013f80:	b084      	sub	sp, #16
 8013f82:	af00      	add	r7, sp, #0
 8013f84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013f86:	2301      	movs	r3, #1
 8013f88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	689b      	ldr	r3, [r3, #8]
 8013f8e:	2b02      	cmp	r3, #2
 8013f90:	d001      	beq.n	8013f96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013f92:	f7ed fd1c 	bl	80019ce <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8013f9c:	7bfa      	ldrb	r2, [r7, #15]
 8013f9e:	4611      	mov	r1, r2
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f7fe f83e 	bl	8012022 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8013fac:	4618      	mov	r0, r3
 8013fae:	f7fd ffe6 	bl	8011f7e <USBD_LL_Reset>
}
 8013fb2:	bf00      	nop
 8013fb4:	3710      	adds	r7, #16
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}
	...

08013fbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b082      	sub	sp, #8
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f7fe f839 	bl	8012042 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	699b      	ldr	r3, [r3, #24]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d005      	beq.n	8013fe4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013fd8:	4b04      	ldr	r3, [pc, #16]	; (8013fec <HAL_PCD_SuspendCallback+0x30>)
 8013fda:	691b      	ldr	r3, [r3, #16]
 8013fdc:	4a03      	ldr	r2, [pc, #12]	; (8013fec <HAL_PCD_SuspendCallback+0x30>)
 8013fde:	f043 0306 	orr.w	r3, r3, #6
 8013fe2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013fe4:	bf00      	nop
 8013fe6:	3708      	adds	r7, #8
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	bd80      	pop	{r7, pc}
 8013fec:	e000ed00 	.word	0xe000ed00

08013ff0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b082      	sub	sp, #8
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	699b      	ldr	r3, [r3, #24]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d007      	beq.n	8014010 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014000:	4b08      	ldr	r3, [pc, #32]	; (8014024 <HAL_PCD_ResumeCallback+0x34>)
 8014002:	691b      	ldr	r3, [r3, #16]
 8014004:	4a07      	ldr	r2, [pc, #28]	; (8014024 <HAL_PCD_ResumeCallback+0x34>)
 8014006:	f023 0306 	bic.w	r3, r3, #6
 801400a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801400c:	f000 fab6 	bl	801457c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8014016:	4618      	mov	r0, r3
 8014018:	f7fe f82f 	bl	801207a <USBD_LL_Resume>
}
 801401c:	bf00      	nop
 801401e:	3708      	adds	r7, #8
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}
 8014024:	e000ed00 	.word	0xe000ed00

08014028 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b082      	sub	sp, #8
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8014030:	f7f6 fb1a 	bl	800a668 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8014034:	4a2b      	ldr	r2, [pc, #172]	; (80140e4 <USBD_LL_Init+0xbc>)
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	4a29      	ldr	r2, [pc, #164]	; (80140e4 <USBD_LL_Init+0xbc>)
 8014040:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 8014044:	4b27      	ldr	r3, [pc, #156]	; (80140e4 <USBD_LL_Init+0xbc>)
 8014046:	4a28      	ldr	r2, [pc, #160]	; (80140e8 <USBD_LL_Init+0xc0>)
 8014048:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801404a:	4b26      	ldr	r3, [pc, #152]	; (80140e4 <USBD_LL_Init+0xbc>)
 801404c:	2208      	movs	r2, #8
 801404e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014050:	4b24      	ldr	r3, [pc, #144]	; (80140e4 <USBD_LL_Init+0xbc>)
 8014052:	2202      	movs	r2, #2
 8014054:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014056:	4b23      	ldr	r3, [pc, #140]	; (80140e4 <USBD_LL_Init+0xbc>)
 8014058:	2202      	movs	r2, #2
 801405a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801405c:	4b21      	ldr	r3, [pc, #132]	; (80140e4 <USBD_LL_Init+0xbc>)
 801405e:	2200      	movs	r2, #0
 8014060:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8014062:	4b20      	ldr	r3, [pc, #128]	; (80140e4 <USBD_LL_Init+0xbc>)
 8014064:	2200      	movs	r2, #0
 8014066:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8014068:	4b1e      	ldr	r3, [pc, #120]	; (80140e4 <USBD_LL_Init+0xbc>)
 801406a:	2200      	movs	r2, #0
 801406c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801406e:	4b1d      	ldr	r3, [pc, #116]	; (80140e4 <USBD_LL_Init+0xbc>)
 8014070:	2200      	movs	r2, #0
 8014072:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8014074:	481b      	ldr	r0, [pc, #108]	; (80140e4 <USBD_LL_Init+0xbc>)
 8014076:	f7f4 fd15 	bl	8008aa4 <HAL_PCD_Init>
 801407a:	4603      	mov	r3, r0
 801407c:	2b00      	cmp	r3, #0
 801407e:	d001      	beq.n	8014084 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8014080:	f7ed fca5 	bl	80019ce <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801408a:	2318      	movs	r3, #24
 801408c:	2200      	movs	r2, #0
 801408e:	2100      	movs	r1, #0
 8014090:	f7f6 fa19 	bl	800a4c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801409a:	2358      	movs	r3, #88	; 0x58
 801409c:	2200      	movs	r2, #0
 801409e:	2180      	movs	r1, #128	; 0x80
 80140a0:	f7f6 fa11 	bl	800a4c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80140aa:	23c0      	movs	r3, #192	; 0xc0
 80140ac:	2200      	movs	r2, #0
 80140ae:	2181      	movs	r1, #129	; 0x81
 80140b0:	f7f6 fa09 	bl	800a4c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80140ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 80140be:	2200      	movs	r2, #0
 80140c0:	2101      	movs	r1, #1
 80140c2:	f7f6 fa00 	bl	800a4c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80140cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80140d0:	2200      	movs	r2, #0
 80140d2:	2182      	movs	r1, #130	; 0x82
 80140d4:	f7f6 f9f7 	bl	800a4c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80140d8:	2300      	movs	r3, #0
}
 80140da:	4618      	mov	r0, r3
 80140dc:	3708      	adds	r7, #8
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}
 80140e2:	bf00      	nop
 80140e4:	20001f30 	.word	0x20001f30
 80140e8:	40006800 	.word	0x40006800

080140ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b084      	sub	sp, #16
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80140f4:	2300      	movs	r3, #0
 80140f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80140f8:	2300      	movs	r3, #0
 80140fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014102:	4618      	mov	r0, r3
 8014104:	f7f4 fdd4 	bl	8008cb0 <HAL_PCD_Start>
 8014108:	4603      	mov	r3, r0
 801410a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801410c:	7bbb      	ldrb	r3, [r7, #14]
 801410e:	2b03      	cmp	r3, #3
 8014110:	d816      	bhi.n	8014140 <USBD_LL_Start+0x54>
 8014112:	a201      	add	r2, pc, #4	; (adr r2, 8014118 <USBD_LL_Start+0x2c>)
 8014114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014118:	08014129 	.word	0x08014129
 801411c:	0801412f 	.word	0x0801412f
 8014120:	08014135 	.word	0x08014135
 8014124:	0801413b 	.word	0x0801413b
    case HAL_OK :
      usb_status = USBD_OK;
 8014128:	2300      	movs	r3, #0
 801412a:	73fb      	strb	r3, [r7, #15]
    break;
 801412c:	e00b      	b.n	8014146 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801412e:	2303      	movs	r3, #3
 8014130:	73fb      	strb	r3, [r7, #15]
    break;
 8014132:	e008      	b.n	8014146 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014134:	2301      	movs	r3, #1
 8014136:	73fb      	strb	r3, [r7, #15]
    break;
 8014138:	e005      	b.n	8014146 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801413a:	2303      	movs	r3, #3
 801413c:	73fb      	strb	r3, [r7, #15]
    break;
 801413e:	e002      	b.n	8014146 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8014140:	2303      	movs	r3, #3
 8014142:	73fb      	strb	r3, [r7, #15]
    break;
 8014144:	bf00      	nop
  }
  return usb_status;
 8014146:	7bfb      	ldrb	r3, [r7, #15]
}
 8014148:	4618      	mov	r0, r3
 801414a:	3710      	adds	r7, #16
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}

08014150 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b084      	sub	sp, #16
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	4608      	mov	r0, r1
 801415a:	4611      	mov	r1, r2
 801415c:	461a      	mov	r2, r3
 801415e:	4603      	mov	r3, r0
 8014160:	70fb      	strb	r3, [r7, #3]
 8014162:	460b      	mov	r3, r1
 8014164:	70bb      	strb	r3, [r7, #2]
 8014166:	4613      	mov	r3, r2
 8014168:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801416a:	2300      	movs	r3, #0
 801416c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801416e:	2300      	movs	r3, #0
 8014170:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014178:	78bb      	ldrb	r3, [r7, #2]
 801417a:	883a      	ldrh	r2, [r7, #0]
 801417c:	78f9      	ldrb	r1, [r7, #3]
 801417e:	f7f4 ff05 	bl	8008f8c <HAL_PCD_EP_Open>
 8014182:	4603      	mov	r3, r0
 8014184:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014186:	7bbb      	ldrb	r3, [r7, #14]
 8014188:	2b03      	cmp	r3, #3
 801418a:	d817      	bhi.n	80141bc <USBD_LL_OpenEP+0x6c>
 801418c:	a201      	add	r2, pc, #4	; (adr r2, 8014194 <USBD_LL_OpenEP+0x44>)
 801418e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014192:	bf00      	nop
 8014194:	080141a5 	.word	0x080141a5
 8014198:	080141ab 	.word	0x080141ab
 801419c:	080141b1 	.word	0x080141b1
 80141a0:	080141b7 	.word	0x080141b7
    case HAL_OK :
      usb_status = USBD_OK;
 80141a4:	2300      	movs	r3, #0
 80141a6:	73fb      	strb	r3, [r7, #15]
    break;
 80141a8:	e00b      	b.n	80141c2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80141aa:	2303      	movs	r3, #3
 80141ac:	73fb      	strb	r3, [r7, #15]
    break;
 80141ae:	e008      	b.n	80141c2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80141b0:	2301      	movs	r3, #1
 80141b2:	73fb      	strb	r3, [r7, #15]
    break;
 80141b4:	e005      	b.n	80141c2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80141b6:	2303      	movs	r3, #3
 80141b8:	73fb      	strb	r3, [r7, #15]
    break;
 80141ba:	e002      	b.n	80141c2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80141bc:	2303      	movs	r3, #3
 80141be:	73fb      	strb	r3, [r7, #15]
    break;
 80141c0:	bf00      	nop
  }
  return usb_status;
 80141c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80141c4:	4618      	mov	r0, r3
 80141c6:	3710      	adds	r7, #16
 80141c8:	46bd      	mov	sp, r7
 80141ca:	bd80      	pop	{r7, pc}

080141cc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b084      	sub	sp, #16
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
 80141d4:	460b      	mov	r3, r1
 80141d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80141d8:	2300      	movs	r3, #0
 80141da:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80141dc:	2300      	movs	r3, #0
 80141de:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80141e6:	78fa      	ldrb	r2, [r7, #3]
 80141e8:	4611      	mov	r1, r2
 80141ea:	4618      	mov	r0, r3
 80141ec:	f7f4 ff2b 	bl	8009046 <HAL_PCD_EP_Close>
 80141f0:	4603      	mov	r3, r0
 80141f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80141f4:	7bbb      	ldrb	r3, [r7, #14]
 80141f6:	2b03      	cmp	r3, #3
 80141f8:	d816      	bhi.n	8014228 <USBD_LL_CloseEP+0x5c>
 80141fa:	a201      	add	r2, pc, #4	; (adr r2, 8014200 <USBD_LL_CloseEP+0x34>)
 80141fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014200:	08014211 	.word	0x08014211
 8014204:	08014217 	.word	0x08014217
 8014208:	0801421d 	.word	0x0801421d
 801420c:	08014223 	.word	0x08014223
    case HAL_OK :
      usb_status = USBD_OK;
 8014210:	2300      	movs	r3, #0
 8014212:	73fb      	strb	r3, [r7, #15]
    break;
 8014214:	e00b      	b.n	801422e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014216:	2303      	movs	r3, #3
 8014218:	73fb      	strb	r3, [r7, #15]
    break;
 801421a:	e008      	b.n	801422e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801421c:	2301      	movs	r3, #1
 801421e:	73fb      	strb	r3, [r7, #15]
    break;
 8014220:	e005      	b.n	801422e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014222:	2303      	movs	r3, #3
 8014224:	73fb      	strb	r3, [r7, #15]
    break;
 8014226:	e002      	b.n	801422e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014228:	2303      	movs	r3, #3
 801422a:	73fb      	strb	r3, [r7, #15]
    break;
 801422c:	bf00      	nop
  }
  return usb_status;
 801422e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014230:	4618      	mov	r0, r3
 8014232:	3710      	adds	r7, #16
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}

08014238 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b084      	sub	sp, #16
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	460b      	mov	r3, r1
 8014242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014244:	2300      	movs	r3, #0
 8014246:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014248:	2300      	movs	r3, #0
 801424a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014252:	78fa      	ldrb	r2, [r7, #3]
 8014254:	4611      	mov	r1, r2
 8014256:	4618      	mov	r0, r3
 8014258:	f7f4 ffbd 	bl	80091d6 <HAL_PCD_EP_SetStall>
 801425c:	4603      	mov	r3, r0
 801425e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014260:	7bbb      	ldrb	r3, [r7, #14]
 8014262:	2b03      	cmp	r3, #3
 8014264:	d816      	bhi.n	8014294 <USBD_LL_StallEP+0x5c>
 8014266:	a201      	add	r2, pc, #4	; (adr r2, 801426c <USBD_LL_StallEP+0x34>)
 8014268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801426c:	0801427d 	.word	0x0801427d
 8014270:	08014283 	.word	0x08014283
 8014274:	08014289 	.word	0x08014289
 8014278:	0801428f 	.word	0x0801428f
    case HAL_OK :
      usb_status = USBD_OK;
 801427c:	2300      	movs	r3, #0
 801427e:	73fb      	strb	r3, [r7, #15]
    break;
 8014280:	e00b      	b.n	801429a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014282:	2303      	movs	r3, #3
 8014284:	73fb      	strb	r3, [r7, #15]
    break;
 8014286:	e008      	b.n	801429a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014288:	2301      	movs	r3, #1
 801428a:	73fb      	strb	r3, [r7, #15]
    break;
 801428c:	e005      	b.n	801429a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801428e:	2303      	movs	r3, #3
 8014290:	73fb      	strb	r3, [r7, #15]
    break;
 8014292:	e002      	b.n	801429a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014294:	2303      	movs	r3, #3
 8014296:	73fb      	strb	r3, [r7, #15]
    break;
 8014298:	bf00      	nop
  }
  return usb_status;
 801429a:	7bfb      	ldrb	r3, [r7, #15]
}
 801429c:	4618      	mov	r0, r3
 801429e:	3710      	adds	r7, #16
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}

080142a4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b084      	sub	sp, #16
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
 80142ac:	460b      	mov	r3, r1
 80142ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80142b0:	2300      	movs	r3, #0
 80142b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80142b4:	2300      	movs	r3, #0
 80142b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80142be:	78fa      	ldrb	r2, [r7, #3]
 80142c0:	4611      	mov	r1, r2
 80142c2:	4618      	mov	r0, r3
 80142c4:	f7f4 ffe7 	bl	8009296 <HAL_PCD_EP_ClrStall>
 80142c8:	4603      	mov	r3, r0
 80142ca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80142cc:	7bbb      	ldrb	r3, [r7, #14]
 80142ce:	2b03      	cmp	r3, #3
 80142d0:	d816      	bhi.n	8014300 <USBD_LL_ClearStallEP+0x5c>
 80142d2:	a201      	add	r2, pc, #4	; (adr r2, 80142d8 <USBD_LL_ClearStallEP+0x34>)
 80142d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142d8:	080142e9 	.word	0x080142e9
 80142dc:	080142ef 	.word	0x080142ef
 80142e0:	080142f5 	.word	0x080142f5
 80142e4:	080142fb 	.word	0x080142fb
    case HAL_OK :
      usb_status = USBD_OK;
 80142e8:	2300      	movs	r3, #0
 80142ea:	73fb      	strb	r3, [r7, #15]
    break;
 80142ec:	e00b      	b.n	8014306 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80142ee:	2303      	movs	r3, #3
 80142f0:	73fb      	strb	r3, [r7, #15]
    break;
 80142f2:	e008      	b.n	8014306 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80142f4:	2301      	movs	r3, #1
 80142f6:	73fb      	strb	r3, [r7, #15]
    break;
 80142f8:	e005      	b.n	8014306 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80142fa:	2303      	movs	r3, #3
 80142fc:	73fb      	strb	r3, [r7, #15]
    break;
 80142fe:	e002      	b.n	8014306 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014300:	2303      	movs	r3, #3
 8014302:	73fb      	strb	r3, [r7, #15]
    break;
 8014304:	bf00      	nop
  }
  return usb_status;
 8014306:	7bfb      	ldrb	r3, [r7, #15]
}
 8014308:	4618      	mov	r0, r3
 801430a:	3710      	adds	r7, #16
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}

08014310 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014310:	b480      	push	{r7}
 8014312:	b085      	sub	sp, #20
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
 8014318:	460b      	mov	r3, r1
 801431a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014322:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014328:	2b00      	cmp	r3, #0
 801432a:	da0c      	bge.n	8014346 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801432c:	78fb      	ldrb	r3, [r7, #3]
 801432e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014332:	68f9      	ldr	r1, [r7, #12]
 8014334:	1c5a      	adds	r2, r3, #1
 8014336:	4613      	mov	r3, r2
 8014338:	009b      	lsls	r3, r3, #2
 801433a:	4413      	add	r3, r2
 801433c:	00db      	lsls	r3, r3, #3
 801433e:	440b      	add	r3, r1
 8014340:	3302      	adds	r3, #2
 8014342:	781b      	ldrb	r3, [r3, #0]
 8014344:	e00b      	b.n	801435e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014346:	78fb      	ldrb	r3, [r7, #3]
 8014348:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801434c:	68f9      	ldr	r1, [r7, #12]
 801434e:	4613      	mov	r3, r2
 8014350:	009b      	lsls	r3, r3, #2
 8014352:	4413      	add	r3, r2
 8014354:	00db      	lsls	r3, r3, #3
 8014356:	440b      	add	r3, r1
 8014358:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 801435c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801435e:	4618      	mov	r0, r3
 8014360:	3714      	adds	r7, #20
 8014362:	46bd      	mov	sp, r7
 8014364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014368:	4770      	bx	lr
	...

0801436c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b084      	sub	sp, #16
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
 8014374:	460b      	mov	r3, r1
 8014376:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014378:	2300      	movs	r3, #0
 801437a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801437c:	2300      	movs	r3, #0
 801437e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014386:	78fa      	ldrb	r2, [r7, #3]
 8014388:	4611      	mov	r1, r2
 801438a:	4618      	mov	r0, r3
 801438c:	f7f4 fdd9 	bl	8008f42 <HAL_PCD_SetAddress>
 8014390:	4603      	mov	r3, r0
 8014392:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014394:	7bbb      	ldrb	r3, [r7, #14]
 8014396:	2b03      	cmp	r3, #3
 8014398:	d816      	bhi.n	80143c8 <USBD_LL_SetUSBAddress+0x5c>
 801439a:	a201      	add	r2, pc, #4	; (adr r2, 80143a0 <USBD_LL_SetUSBAddress+0x34>)
 801439c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143a0:	080143b1 	.word	0x080143b1
 80143a4:	080143b7 	.word	0x080143b7
 80143a8:	080143bd 	.word	0x080143bd
 80143ac:	080143c3 	.word	0x080143c3
    case HAL_OK :
      usb_status = USBD_OK;
 80143b0:	2300      	movs	r3, #0
 80143b2:	73fb      	strb	r3, [r7, #15]
    break;
 80143b4:	e00b      	b.n	80143ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80143b6:	2303      	movs	r3, #3
 80143b8:	73fb      	strb	r3, [r7, #15]
    break;
 80143ba:	e008      	b.n	80143ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80143bc:	2301      	movs	r3, #1
 80143be:	73fb      	strb	r3, [r7, #15]
    break;
 80143c0:	e005      	b.n	80143ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80143c2:	2303      	movs	r3, #3
 80143c4:	73fb      	strb	r3, [r7, #15]
    break;
 80143c6:	e002      	b.n	80143ce <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80143c8:	2303      	movs	r3, #3
 80143ca:	73fb      	strb	r3, [r7, #15]
    break;
 80143cc:	bf00      	nop
  }
  return usb_status;
 80143ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80143d0:	4618      	mov	r0, r3
 80143d2:	3710      	adds	r7, #16
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bd80      	pop	{r7, pc}

080143d8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b086      	sub	sp, #24
 80143dc:	af00      	add	r7, sp, #0
 80143de:	60f8      	str	r0, [r7, #12]
 80143e0:	607a      	str	r2, [r7, #4]
 80143e2:	603b      	str	r3, [r7, #0]
 80143e4:	460b      	mov	r3, r1
 80143e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80143e8:	2300      	movs	r3, #0
 80143ea:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80143ec:	2300      	movs	r3, #0
 80143ee:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80143f6:	7af9      	ldrb	r1, [r7, #11]
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	687a      	ldr	r2, [r7, #4]
 80143fc:	f7f4 feb4 	bl	8009168 <HAL_PCD_EP_Transmit>
 8014400:	4603      	mov	r3, r0
 8014402:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8014404:	7dbb      	ldrb	r3, [r7, #22]
 8014406:	2b03      	cmp	r3, #3
 8014408:	d816      	bhi.n	8014438 <USBD_LL_Transmit+0x60>
 801440a:	a201      	add	r2, pc, #4	; (adr r2, 8014410 <USBD_LL_Transmit+0x38>)
 801440c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014410:	08014421 	.word	0x08014421
 8014414:	08014427 	.word	0x08014427
 8014418:	0801442d 	.word	0x0801442d
 801441c:	08014433 	.word	0x08014433
    case HAL_OK :
      usb_status = USBD_OK;
 8014420:	2300      	movs	r3, #0
 8014422:	75fb      	strb	r3, [r7, #23]
    break;
 8014424:	e00b      	b.n	801443e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014426:	2303      	movs	r3, #3
 8014428:	75fb      	strb	r3, [r7, #23]
    break;
 801442a:	e008      	b.n	801443e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801442c:	2301      	movs	r3, #1
 801442e:	75fb      	strb	r3, [r7, #23]
    break;
 8014430:	e005      	b.n	801443e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014432:	2303      	movs	r3, #3
 8014434:	75fb      	strb	r3, [r7, #23]
    break;
 8014436:	e002      	b.n	801443e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8014438:	2303      	movs	r3, #3
 801443a:	75fb      	strb	r3, [r7, #23]
    break;
 801443c:	bf00      	nop
  }
  return usb_status;
 801443e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014440:	4618      	mov	r0, r3
 8014442:	3718      	adds	r7, #24
 8014444:	46bd      	mov	sp, r7
 8014446:	bd80      	pop	{r7, pc}

08014448 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b086      	sub	sp, #24
 801444c:	af00      	add	r7, sp, #0
 801444e:	60f8      	str	r0, [r7, #12]
 8014450:	607a      	str	r2, [r7, #4]
 8014452:	603b      	str	r3, [r7, #0]
 8014454:	460b      	mov	r3, r1
 8014456:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014458:	2300      	movs	r3, #0
 801445a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801445c:	2300      	movs	r3, #0
 801445e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014466:	7af9      	ldrb	r1, [r7, #11]
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	687a      	ldr	r2, [r7, #4]
 801446c:	f7f4 fe33 	bl	80090d6 <HAL_PCD_EP_Receive>
 8014470:	4603      	mov	r3, r0
 8014472:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8014474:	7dbb      	ldrb	r3, [r7, #22]
 8014476:	2b03      	cmp	r3, #3
 8014478:	d816      	bhi.n	80144a8 <USBD_LL_PrepareReceive+0x60>
 801447a:	a201      	add	r2, pc, #4	; (adr r2, 8014480 <USBD_LL_PrepareReceive+0x38>)
 801447c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014480:	08014491 	.word	0x08014491
 8014484:	08014497 	.word	0x08014497
 8014488:	0801449d 	.word	0x0801449d
 801448c:	080144a3 	.word	0x080144a3
    case HAL_OK :
      usb_status = USBD_OK;
 8014490:	2300      	movs	r3, #0
 8014492:	75fb      	strb	r3, [r7, #23]
    break;
 8014494:	e00b      	b.n	80144ae <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014496:	2303      	movs	r3, #3
 8014498:	75fb      	strb	r3, [r7, #23]
    break;
 801449a:	e008      	b.n	80144ae <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801449c:	2301      	movs	r3, #1
 801449e:	75fb      	strb	r3, [r7, #23]
    break;
 80144a0:	e005      	b.n	80144ae <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80144a2:	2303      	movs	r3, #3
 80144a4:	75fb      	strb	r3, [r7, #23]
    break;
 80144a6:	e002      	b.n	80144ae <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80144a8:	2303      	movs	r3, #3
 80144aa:	75fb      	strb	r3, [r7, #23]
    break;
 80144ac:	bf00      	nop
  }
  return usb_status;
 80144ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80144b0:	4618      	mov	r0, r3
 80144b2:	3718      	adds	r7, #24
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}

080144b8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b082      	sub	sp, #8
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
 80144c0:	460b      	mov	r3, r1
 80144c2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80144ca:	78fa      	ldrb	r2, [r7, #3]
 80144cc:	4611      	mov	r1, r2
 80144ce:	4618      	mov	r0, r3
 80144d0:	f7f4 fe32 	bl	8009138 <HAL_PCD_EP_GetRxCount>
 80144d4:	4603      	mov	r3, r0
}
 80144d6:	4618      	mov	r0, r3
 80144d8:	3708      	adds	r7, #8
 80144da:	46bd      	mov	sp, r7
 80144dc:	bd80      	pop	{r7, pc}
	...

080144e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b082      	sub	sp, #8
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	460b      	mov	r3, r1
 80144ea:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80144ec:	78fb      	ldrb	r3, [r7, #3]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d002      	beq.n	80144f8 <HAL_PCDEx_LPM_Callback+0x18>
 80144f2:	2b01      	cmp	r3, #1
 80144f4:	d013      	beq.n	801451e <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80144f6:	e023      	b.n	8014540 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	699b      	ldr	r3, [r3, #24]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d007      	beq.n	8014510 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8014500:	f000 f83c 	bl	801457c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014504:	4b10      	ldr	r3, [pc, #64]	; (8014548 <HAL_PCDEx_LPM_Callback+0x68>)
 8014506:	691b      	ldr	r3, [r3, #16]
 8014508:	4a0f      	ldr	r2, [pc, #60]	; (8014548 <HAL_PCDEx_LPM_Callback+0x68>)
 801450a:	f023 0306 	bic.w	r3, r3, #6
 801450e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8014516:	4618      	mov	r0, r3
 8014518:	f7fd fdaf 	bl	801207a <USBD_LL_Resume>
    break;
 801451c:	e010      	b.n	8014540 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8014524:	4618      	mov	r0, r3
 8014526:	f7fd fd8c 	bl	8012042 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	699b      	ldr	r3, [r3, #24]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d005      	beq.n	801453e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014532:	4b05      	ldr	r3, [pc, #20]	; (8014548 <HAL_PCDEx_LPM_Callback+0x68>)
 8014534:	691b      	ldr	r3, [r3, #16]
 8014536:	4a04      	ldr	r2, [pc, #16]	; (8014548 <HAL_PCDEx_LPM_Callback+0x68>)
 8014538:	f043 0306 	orr.w	r3, r3, #6
 801453c:	6113      	str	r3, [r2, #16]
    break;
 801453e:	bf00      	nop
}
 8014540:	bf00      	nop
 8014542:	3708      	adds	r7, #8
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}
 8014548:	e000ed00 	.word	0xe000ed00

0801454c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801454c:	b480      	push	{r7}
 801454e:	b083      	sub	sp, #12
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014554:	4b03      	ldr	r3, [pc, #12]	; (8014564 <USBD_static_malloc+0x18>)
}
 8014556:	4618      	mov	r0, r3
 8014558:	370c      	adds	r7, #12
 801455a:	46bd      	mov	sp, r7
 801455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014560:	4770      	bx	lr
 8014562:	bf00      	nop
 8014564:	20002228 	.word	0x20002228

08014568 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014568:	b480      	push	{r7}
 801456a:	b083      	sub	sp, #12
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]

}
 8014570:	bf00      	nop
 8014572:	370c      	adds	r7, #12
 8014574:	46bd      	mov	sp, r7
 8014576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457a:	4770      	bx	lr

0801457c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8014580:	f7ed f9a4 	bl	80018cc <SystemClock_Config>
}
 8014584:	bf00      	nop
 8014586:	bd80      	pop	{r7, pc}

08014588 <atoi>:
 8014588:	220a      	movs	r2, #10
 801458a:	2100      	movs	r1, #0
 801458c:	f000 bfb8 	b.w	8015500 <strtol>

08014590 <malloc>:
 8014590:	4b02      	ldr	r3, [pc, #8]	; (801459c <malloc+0xc>)
 8014592:	4601      	mov	r1, r0
 8014594:	6818      	ldr	r0, [r3, #0]
 8014596:	f000 b82b 	b.w	80145f0 <_malloc_r>
 801459a:	bf00      	nop
 801459c:	200002f4 	.word	0x200002f4

080145a0 <free>:
 80145a0:	4b02      	ldr	r3, [pc, #8]	; (80145ac <free+0xc>)
 80145a2:	4601      	mov	r1, r0
 80145a4:	6818      	ldr	r0, [r3, #0]
 80145a6:	f002 bf55 	b.w	8017454 <_free_r>
 80145aa:	bf00      	nop
 80145ac:	200002f4 	.word	0x200002f4

080145b0 <sbrk_aligned>:
 80145b0:	b570      	push	{r4, r5, r6, lr}
 80145b2:	4e0e      	ldr	r6, [pc, #56]	; (80145ec <sbrk_aligned+0x3c>)
 80145b4:	460c      	mov	r4, r1
 80145b6:	6831      	ldr	r1, [r6, #0]
 80145b8:	4605      	mov	r5, r0
 80145ba:	b911      	cbnz	r1, 80145c2 <sbrk_aligned+0x12>
 80145bc:	f002 f83e 	bl	801663c <_sbrk_r>
 80145c0:	6030      	str	r0, [r6, #0]
 80145c2:	4621      	mov	r1, r4
 80145c4:	4628      	mov	r0, r5
 80145c6:	f002 f839 	bl	801663c <_sbrk_r>
 80145ca:	1c43      	adds	r3, r0, #1
 80145cc:	d00a      	beq.n	80145e4 <sbrk_aligned+0x34>
 80145ce:	1cc4      	adds	r4, r0, #3
 80145d0:	f024 0403 	bic.w	r4, r4, #3
 80145d4:	42a0      	cmp	r0, r4
 80145d6:	d007      	beq.n	80145e8 <sbrk_aligned+0x38>
 80145d8:	1a21      	subs	r1, r4, r0
 80145da:	4628      	mov	r0, r5
 80145dc:	f002 f82e 	bl	801663c <_sbrk_r>
 80145e0:	3001      	adds	r0, #1
 80145e2:	d101      	bne.n	80145e8 <sbrk_aligned+0x38>
 80145e4:	f04f 34ff 	mov.w	r4, #4294967295
 80145e8:	4620      	mov	r0, r4
 80145ea:	bd70      	pop	{r4, r5, r6, pc}
 80145ec:	2000244c 	.word	0x2000244c

080145f0 <_malloc_r>:
 80145f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145f4:	1ccd      	adds	r5, r1, #3
 80145f6:	f025 0503 	bic.w	r5, r5, #3
 80145fa:	3508      	adds	r5, #8
 80145fc:	2d0c      	cmp	r5, #12
 80145fe:	bf38      	it	cc
 8014600:	250c      	movcc	r5, #12
 8014602:	2d00      	cmp	r5, #0
 8014604:	4607      	mov	r7, r0
 8014606:	db01      	blt.n	801460c <_malloc_r+0x1c>
 8014608:	42a9      	cmp	r1, r5
 801460a:	d905      	bls.n	8014618 <_malloc_r+0x28>
 801460c:	230c      	movs	r3, #12
 801460e:	603b      	str	r3, [r7, #0]
 8014610:	2600      	movs	r6, #0
 8014612:	4630      	mov	r0, r6
 8014614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014618:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80146ec <_malloc_r+0xfc>
 801461c:	f000 f868 	bl	80146f0 <__malloc_lock>
 8014620:	f8d8 3000 	ldr.w	r3, [r8]
 8014624:	461c      	mov	r4, r3
 8014626:	bb5c      	cbnz	r4, 8014680 <_malloc_r+0x90>
 8014628:	4629      	mov	r1, r5
 801462a:	4638      	mov	r0, r7
 801462c:	f7ff ffc0 	bl	80145b0 <sbrk_aligned>
 8014630:	1c43      	adds	r3, r0, #1
 8014632:	4604      	mov	r4, r0
 8014634:	d155      	bne.n	80146e2 <_malloc_r+0xf2>
 8014636:	f8d8 4000 	ldr.w	r4, [r8]
 801463a:	4626      	mov	r6, r4
 801463c:	2e00      	cmp	r6, #0
 801463e:	d145      	bne.n	80146cc <_malloc_r+0xdc>
 8014640:	2c00      	cmp	r4, #0
 8014642:	d048      	beq.n	80146d6 <_malloc_r+0xe6>
 8014644:	6823      	ldr	r3, [r4, #0]
 8014646:	4631      	mov	r1, r6
 8014648:	4638      	mov	r0, r7
 801464a:	eb04 0903 	add.w	r9, r4, r3
 801464e:	f001 fff5 	bl	801663c <_sbrk_r>
 8014652:	4581      	cmp	r9, r0
 8014654:	d13f      	bne.n	80146d6 <_malloc_r+0xe6>
 8014656:	6821      	ldr	r1, [r4, #0]
 8014658:	1a6d      	subs	r5, r5, r1
 801465a:	4629      	mov	r1, r5
 801465c:	4638      	mov	r0, r7
 801465e:	f7ff ffa7 	bl	80145b0 <sbrk_aligned>
 8014662:	3001      	adds	r0, #1
 8014664:	d037      	beq.n	80146d6 <_malloc_r+0xe6>
 8014666:	6823      	ldr	r3, [r4, #0]
 8014668:	442b      	add	r3, r5
 801466a:	6023      	str	r3, [r4, #0]
 801466c:	f8d8 3000 	ldr.w	r3, [r8]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d038      	beq.n	80146e6 <_malloc_r+0xf6>
 8014674:	685a      	ldr	r2, [r3, #4]
 8014676:	42a2      	cmp	r2, r4
 8014678:	d12b      	bne.n	80146d2 <_malloc_r+0xe2>
 801467a:	2200      	movs	r2, #0
 801467c:	605a      	str	r2, [r3, #4]
 801467e:	e00f      	b.n	80146a0 <_malloc_r+0xb0>
 8014680:	6822      	ldr	r2, [r4, #0]
 8014682:	1b52      	subs	r2, r2, r5
 8014684:	d41f      	bmi.n	80146c6 <_malloc_r+0xd6>
 8014686:	2a0b      	cmp	r2, #11
 8014688:	d917      	bls.n	80146ba <_malloc_r+0xca>
 801468a:	1961      	adds	r1, r4, r5
 801468c:	42a3      	cmp	r3, r4
 801468e:	6025      	str	r5, [r4, #0]
 8014690:	bf18      	it	ne
 8014692:	6059      	strne	r1, [r3, #4]
 8014694:	6863      	ldr	r3, [r4, #4]
 8014696:	bf08      	it	eq
 8014698:	f8c8 1000 	streq.w	r1, [r8]
 801469c:	5162      	str	r2, [r4, r5]
 801469e:	604b      	str	r3, [r1, #4]
 80146a0:	4638      	mov	r0, r7
 80146a2:	f104 060b 	add.w	r6, r4, #11
 80146a6:	f000 f829 	bl	80146fc <__malloc_unlock>
 80146aa:	f026 0607 	bic.w	r6, r6, #7
 80146ae:	1d23      	adds	r3, r4, #4
 80146b0:	1af2      	subs	r2, r6, r3
 80146b2:	d0ae      	beq.n	8014612 <_malloc_r+0x22>
 80146b4:	1b9b      	subs	r3, r3, r6
 80146b6:	50a3      	str	r3, [r4, r2]
 80146b8:	e7ab      	b.n	8014612 <_malloc_r+0x22>
 80146ba:	42a3      	cmp	r3, r4
 80146bc:	6862      	ldr	r2, [r4, #4]
 80146be:	d1dd      	bne.n	801467c <_malloc_r+0x8c>
 80146c0:	f8c8 2000 	str.w	r2, [r8]
 80146c4:	e7ec      	b.n	80146a0 <_malloc_r+0xb0>
 80146c6:	4623      	mov	r3, r4
 80146c8:	6864      	ldr	r4, [r4, #4]
 80146ca:	e7ac      	b.n	8014626 <_malloc_r+0x36>
 80146cc:	4634      	mov	r4, r6
 80146ce:	6876      	ldr	r6, [r6, #4]
 80146d0:	e7b4      	b.n	801463c <_malloc_r+0x4c>
 80146d2:	4613      	mov	r3, r2
 80146d4:	e7cc      	b.n	8014670 <_malloc_r+0x80>
 80146d6:	230c      	movs	r3, #12
 80146d8:	603b      	str	r3, [r7, #0]
 80146da:	4638      	mov	r0, r7
 80146dc:	f000 f80e 	bl	80146fc <__malloc_unlock>
 80146e0:	e797      	b.n	8014612 <_malloc_r+0x22>
 80146e2:	6025      	str	r5, [r4, #0]
 80146e4:	e7dc      	b.n	80146a0 <_malloc_r+0xb0>
 80146e6:	605b      	str	r3, [r3, #4]
 80146e8:	deff      	udf	#255	; 0xff
 80146ea:	bf00      	nop
 80146ec:	20002448 	.word	0x20002448

080146f0 <__malloc_lock>:
 80146f0:	4801      	ldr	r0, [pc, #4]	; (80146f8 <__malloc_lock+0x8>)
 80146f2:	f001 bff0 	b.w	80166d6 <__retarget_lock_acquire_recursive>
 80146f6:	bf00      	nop
 80146f8:	20002590 	.word	0x20002590

080146fc <__malloc_unlock>:
 80146fc:	4801      	ldr	r0, [pc, #4]	; (8014704 <__malloc_unlock+0x8>)
 80146fe:	f001 bfeb 	b.w	80166d8 <__retarget_lock_release_recursive>
 8014702:	bf00      	nop
 8014704:	20002590 	.word	0x20002590

08014708 <sulp>:
 8014708:	b570      	push	{r4, r5, r6, lr}
 801470a:	4604      	mov	r4, r0
 801470c:	460d      	mov	r5, r1
 801470e:	ec45 4b10 	vmov	d0, r4, r5
 8014712:	4616      	mov	r6, r2
 8014714:	f003 fdc0 	bl	8018298 <__ulp>
 8014718:	ec51 0b10 	vmov	r0, r1, d0
 801471c:	b17e      	cbz	r6, 801473e <sulp+0x36>
 801471e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014722:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014726:	2b00      	cmp	r3, #0
 8014728:	dd09      	ble.n	801473e <sulp+0x36>
 801472a:	051b      	lsls	r3, r3, #20
 801472c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014730:	2400      	movs	r4, #0
 8014732:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014736:	4622      	mov	r2, r4
 8014738:	462b      	mov	r3, r5
 801473a:	f7eb ff5d 	bl	80005f8 <__aeabi_dmul>
 801473e:	bd70      	pop	{r4, r5, r6, pc}

08014740 <_strtod_l>:
 8014740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014744:	ed2d 8b02 	vpush	{d8}
 8014748:	b09b      	sub	sp, #108	; 0x6c
 801474a:	4604      	mov	r4, r0
 801474c:	9213      	str	r2, [sp, #76]	; 0x4c
 801474e:	2200      	movs	r2, #0
 8014750:	9216      	str	r2, [sp, #88]	; 0x58
 8014752:	460d      	mov	r5, r1
 8014754:	f04f 0800 	mov.w	r8, #0
 8014758:	f04f 0900 	mov.w	r9, #0
 801475c:	460a      	mov	r2, r1
 801475e:	9215      	str	r2, [sp, #84]	; 0x54
 8014760:	7811      	ldrb	r1, [r2, #0]
 8014762:	292b      	cmp	r1, #43	; 0x2b
 8014764:	d04c      	beq.n	8014800 <_strtod_l+0xc0>
 8014766:	d83a      	bhi.n	80147de <_strtod_l+0x9e>
 8014768:	290d      	cmp	r1, #13
 801476a:	d834      	bhi.n	80147d6 <_strtod_l+0x96>
 801476c:	2908      	cmp	r1, #8
 801476e:	d834      	bhi.n	80147da <_strtod_l+0x9a>
 8014770:	2900      	cmp	r1, #0
 8014772:	d03d      	beq.n	80147f0 <_strtod_l+0xb0>
 8014774:	2200      	movs	r2, #0
 8014776:	920a      	str	r2, [sp, #40]	; 0x28
 8014778:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801477a:	7832      	ldrb	r2, [r6, #0]
 801477c:	2a30      	cmp	r2, #48	; 0x30
 801477e:	f040 80b4 	bne.w	80148ea <_strtod_l+0x1aa>
 8014782:	7872      	ldrb	r2, [r6, #1]
 8014784:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8014788:	2a58      	cmp	r2, #88	; 0x58
 801478a:	d170      	bne.n	801486e <_strtod_l+0x12e>
 801478c:	9302      	str	r3, [sp, #8]
 801478e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014790:	9301      	str	r3, [sp, #4]
 8014792:	ab16      	add	r3, sp, #88	; 0x58
 8014794:	9300      	str	r3, [sp, #0]
 8014796:	4a8e      	ldr	r2, [pc, #568]	; (80149d0 <_strtod_l+0x290>)
 8014798:	ab17      	add	r3, sp, #92	; 0x5c
 801479a:	a915      	add	r1, sp, #84	; 0x54
 801479c:	4620      	mov	r0, r4
 801479e:	f002 ff0d 	bl	80175bc <__gethex>
 80147a2:	f010 070f 	ands.w	r7, r0, #15
 80147a6:	4605      	mov	r5, r0
 80147a8:	d005      	beq.n	80147b6 <_strtod_l+0x76>
 80147aa:	2f06      	cmp	r7, #6
 80147ac:	d12a      	bne.n	8014804 <_strtod_l+0xc4>
 80147ae:	3601      	adds	r6, #1
 80147b0:	2300      	movs	r3, #0
 80147b2:	9615      	str	r6, [sp, #84]	; 0x54
 80147b4:	930a      	str	r3, [sp, #40]	; 0x28
 80147b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	f040 857f 	bne.w	80152bc <_strtod_l+0xb7c>
 80147be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147c0:	b1db      	cbz	r3, 80147fa <_strtod_l+0xba>
 80147c2:	4642      	mov	r2, r8
 80147c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80147c8:	ec43 2b10 	vmov	d0, r2, r3
 80147cc:	b01b      	add	sp, #108	; 0x6c
 80147ce:	ecbd 8b02 	vpop	{d8}
 80147d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147d6:	2920      	cmp	r1, #32
 80147d8:	d1cc      	bne.n	8014774 <_strtod_l+0x34>
 80147da:	3201      	adds	r2, #1
 80147dc:	e7bf      	b.n	801475e <_strtod_l+0x1e>
 80147de:	292d      	cmp	r1, #45	; 0x2d
 80147e0:	d1c8      	bne.n	8014774 <_strtod_l+0x34>
 80147e2:	2101      	movs	r1, #1
 80147e4:	910a      	str	r1, [sp, #40]	; 0x28
 80147e6:	1c51      	adds	r1, r2, #1
 80147e8:	9115      	str	r1, [sp, #84]	; 0x54
 80147ea:	7852      	ldrb	r2, [r2, #1]
 80147ec:	2a00      	cmp	r2, #0
 80147ee:	d1c3      	bne.n	8014778 <_strtod_l+0x38>
 80147f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80147f2:	9515      	str	r5, [sp, #84]	; 0x54
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	f040 855f 	bne.w	80152b8 <_strtod_l+0xb78>
 80147fa:	4642      	mov	r2, r8
 80147fc:	464b      	mov	r3, r9
 80147fe:	e7e3      	b.n	80147c8 <_strtod_l+0x88>
 8014800:	2100      	movs	r1, #0
 8014802:	e7ef      	b.n	80147e4 <_strtod_l+0xa4>
 8014804:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014806:	b13a      	cbz	r2, 8014818 <_strtod_l+0xd8>
 8014808:	2135      	movs	r1, #53	; 0x35
 801480a:	a818      	add	r0, sp, #96	; 0x60
 801480c:	f003 fe41 	bl	8018492 <__copybits>
 8014810:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014812:	4620      	mov	r0, r4
 8014814:	f003 fa14 	bl	8017c40 <_Bfree>
 8014818:	3f01      	subs	r7, #1
 801481a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801481c:	2f04      	cmp	r7, #4
 801481e:	d806      	bhi.n	801482e <_strtod_l+0xee>
 8014820:	e8df f007 	tbb	[pc, r7]
 8014824:	201d0314 	.word	0x201d0314
 8014828:	14          	.byte	0x14
 8014829:	00          	.byte	0x00
 801482a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801482e:	05e9      	lsls	r1, r5, #23
 8014830:	bf48      	it	mi
 8014832:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8014836:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801483a:	0d1b      	lsrs	r3, r3, #20
 801483c:	051b      	lsls	r3, r3, #20
 801483e:	2b00      	cmp	r3, #0
 8014840:	d1b9      	bne.n	80147b6 <_strtod_l+0x76>
 8014842:	f001 ff1d 	bl	8016680 <__errno>
 8014846:	2322      	movs	r3, #34	; 0x22
 8014848:	6003      	str	r3, [r0, #0]
 801484a:	e7b4      	b.n	80147b6 <_strtod_l+0x76>
 801484c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8014850:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014854:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014858:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801485c:	e7e7      	b.n	801482e <_strtod_l+0xee>
 801485e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80149d8 <_strtod_l+0x298>
 8014862:	e7e4      	b.n	801482e <_strtod_l+0xee>
 8014864:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014868:	f04f 38ff 	mov.w	r8, #4294967295
 801486c:	e7df      	b.n	801482e <_strtod_l+0xee>
 801486e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014870:	1c5a      	adds	r2, r3, #1
 8014872:	9215      	str	r2, [sp, #84]	; 0x54
 8014874:	785b      	ldrb	r3, [r3, #1]
 8014876:	2b30      	cmp	r3, #48	; 0x30
 8014878:	d0f9      	beq.n	801486e <_strtod_l+0x12e>
 801487a:	2b00      	cmp	r3, #0
 801487c:	d09b      	beq.n	80147b6 <_strtod_l+0x76>
 801487e:	2301      	movs	r3, #1
 8014880:	f04f 0a00 	mov.w	sl, #0
 8014884:	9304      	str	r3, [sp, #16]
 8014886:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014888:	930b      	str	r3, [sp, #44]	; 0x2c
 801488a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801488e:	46d3      	mov	fp, sl
 8014890:	220a      	movs	r2, #10
 8014892:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014894:	7806      	ldrb	r6, [r0, #0]
 8014896:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801489a:	b2d9      	uxtb	r1, r3
 801489c:	2909      	cmp	r1, #9
 801489e:	d926      	bls.n	80148ee <_strtod_l+0x1ae>
 80148a0:	494c      	ldr	r1, [pc, #304]	; (80149d4 <_strtod_l+0x294>)
 80148a2:	2201      	movs	r2, #1
 80148a4:	f001 fe0d 	bl	80164c2 <strncmp>
 80148a8:	2800      	cmp	r0, #0
 80148aa:	d030      	beq.n	801490e <_strtod_l+0x1ce>
 80148ac:	2000      	movs	r0, #0
 80148ae:	4632      	mov	r2, r6
 80148b0:	9005      	str	r0, [sp, #20]
 80148b2:	465e      	mov	r6, fp
 80148b4:	4603      	mov	r3, r0
 80148b6:	2a65      	cmp	r2, #101	; 0x65
 80148b8:	d001      	beq.n	80148be <_strtod_l+0x17e>
 80148ba:	2a45      	cmp	r2, #69	; 0x45
 80148bc:	d113      	bne.n	80148e6 <_strtod_l+0x1a6>
 80148be:	b91e      	cbnz	r6, 80148c8 <_strtod_l+0x188>
 80148c0:	9a04      	ldr	r2, [sp, #16]
 80148c2:	4302      	orrs	r2, r0
 80148c4:	d094      	beq.n	80147f0 <_strtod_l+0xb0>
 80148c6:	2600      	movs	r6, #0
 80148c8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80148ca:	1c6a      	adds	r2, r5, #1
 80148cc:	9215      	str	r2, [sp, #84]	; 0x54
 80148ce:	786a      	ldrb	r2, [r5, #1]
 80148d0:	2a2b      	cmp	r2, #43	; 0x2b
 80148d2:	d074      	beq.n	80149be <_strtod_l+0x27e>
 80148d4:	2a2d      	cmp	r2, #45	; 0x2d
 80148d6:	d078      	beq.n	80149ca <_strtod_l+0x28a>
 80148d8:	f04f 0c00 	mov.w	ip, #0
 80148dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80148e0:	2909      	cmp	r1, #9
 80148e2:	d97f      	bls.n	80149e4 <_strtod_l+0x2a4>
 80148e4:	9515      	str	r5, [sp, #84]	; 0x54
 80148e6:	2700      	movs	r7, #0
 80148e8:	e09e      	b.n	8014a28 <_strtod_l+0x2e8>
 80148ea:	2300      	movs	r3, #0
 80148ec:	e7c8      	b.n	8014880 <_strtod_l+0x140>
 80148ee:	f1bb 0f08 	cmp.w	fp, #8
 80148f2:	bfd8      	it	le
 80148f4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80148f6:	f100 0001 	add.w	r0, r0, #1
 80148fa:	bfda      	itte	le
 80148fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8014900:	9309      	strle	r3, [sp, #36]	; 0x24
 8014902:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014906:	f10b 0b01 	add.w	fp, fp, #1
 801490a:	9015      	str	r0, [sp, #84]	; 0x54
 801490c:	e7c1      	b.n	8014892 <_strtod_l+0x152>
 801490e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014910:	1c5a      	adds	r2, r3, #1
 8014912:	9215      	str	r2, [sp, #84]	; 0x54
 8014914:	785a      	ldrb	r2, [r3, #1]
 8014916:	f1bb 0f00 	cmp.w	fp, #0
 801491a:	d037      	beq.n	801498c <_strtod_l+0x24c>
 801491c:	9005      	str	r0, [sp, #20]
 801491e:	465e      	mov	r6, fp
 8014920:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014924:	2b09      	cmp	r3, #9
 8014926:	d912      	bls.n	801494e <_strtod_l+0x20e>
 8014928:	2301      	movs	r3, #1
 801492a:	e7c4      	b.n	80148b6 <_strtod_l+0x176>
 801492c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801492e:	1c5a      	adds	r2, r3, #1
 8014930:	9215      	str	r2, [sp, #84]	; 0x54
 8014932:	785a      	ldrb	r2, [r3, #1]
 8014934:	3001      	adds	r0, #1
 8014936:	2a30      	cmp	r2, #48	; 0x30
 8014938:	d0f8      	beq.n	801492c <_strtod_l+0x1ec>
 801493a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801493e:	2b08      	cmp	r3, #8
 8014940:	f200 84c1 	bhi.w	80152c6 <_strtod_l+0xb86>
 8014944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014946:	9005      	str	r0, [sp, #20]
 8014948:	2000      	movs	r0, #0
 801494a:	930b      	str	r3, [sp, #44]	; 0x2c
 801494c:	4606      	mov	r6, r0
 801494e:	3a30      	subs	r2, #48	; 0x30
 8014950:	f100 0301 	add.w	r3, r0, #1
 8014954:	d014      	beq.n	8014980 <_strtod_l+0x240>
 8014956:	9905      	ldr	r1, [sp, #20]
 8014958:	4419      	add	r1, r3
 801495a:	9105      	str	r1, [sp, #20]
 801495c:	4633      	mov	r3, r6
 801495e:	eb00 0c06 	add.w	ip, r0, r6
 8014962:	210a      	movs	r1, #10
 8014964:	4563      	cmp	r3, ip
 8014966:	d113      	bne.n	8014990 <_strtod_l+0x250>
 8014968:	1833      	adds	r3, r6, r0
 801496a:	2b08      	cmp	r3, #8
 801496c:	f106 0601 	add.w	r6, r6, #1
 8014970:	4406      	add	r6, r0
 8014972:	dc1a      	bgt.n	80149aa <_strtod_l+0x26a>
 8014974:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014976:	230a      	movs	r3, #10
 8014978:	fb03 2301 	mla	r3, r3, r1, r2
 801497c:	9309      	str	r3, [sp, #36]	; 0x24
 801497e:	2300      	movs	r3, #0
 8014980:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014982:	1c51      	adds	r1, r2, #1
 8014984:	9115      	str	r1, [sp, #84]	; 0x54
 8014986:	7852      	ldrb	r2, [r2, #1]
 8014988:	4618      	mov	r0, r3
 801498a:	e7c9      	b.n	8014920 <_strtod_l+0x1e0>
 801498c:	4658      	mov	r0, fp
 801498e:	e7d2      	b.n	8014936 <_strtod_l+0x1f6>
 8014990:	2b08      	cmp	r3, #8
 8014992:	f103 0301 	add.w	r3, r3, #1
 8014996:	dc03      	bgt.n	80149a0 <_strtod_l+0x260>
 8014998:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801499a:	434f      	muls	r7, r1
 801499c:	9709      	str	r7, [sp, #36]	; 0x24
 801499e:	e7e1      	b.n	8014964 <_strtod_l+0x224>
 80149a0:	2b10      	cmp	r3, #16
 80149a2:	bfd8      	it	le
 80149a4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80149a8:	e7dc      	b.n	8014964 <_strtod_l+0x224>
 80149aa:	2e10      	cmp	r6, #16
 80149ac:	bfdc      	itt	le
 80149ae:	230a      	movle	r3, #10
 80149b0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80149b4:	e7e3      	b.n	801497e <_strtod_l+0x23e>
 80149b6:	2300      	movs	r3, #0
 80149b8:	9305      	str	r3, [sp, #20]
 80149ba:	2301      	movs	r3, #1
 80149bc:	e780      	b.n	80148c0 <_strtod_l+0x180>
 80149be:	f04f 0c00 	mov.w	ip, #0
 80149c2:	1caa      	adds	r2, r5, #2
 80149c4:	9215      	str	r2, [sp, #84]	; 0x54
 80149c6:	78aa      	ldrb	r2, [r5, #2]
 80149c8:	e788      	b.n	80148dc <_strtod_l+0x19c>
 80149ca:	f04f 0c01 	mov.w	ip, #1
 80149ce:	e7f8      	b.n	80149c2 <_strtod_l+0x282>
 80149d0:	0801c9a0 	.word	0x0801c9a0
 80149d4:	0801c99c 	.word	0x0801c99c
 80149d8:	7ff00000 	.word	0x7ff00000
 80149dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80149de:	1c51      	adds	r1, r2, #1
 80149e0:	9115      	str	r1, [sp, #84]	; 0x54
 80149e2:	7852      	ldrb	r2, [r2, #1]
 80149e4:	2a30      	cmp	r2, #48	; 0x30
 80149e6:	d0f9      	beq.n	80149dc <_strtod_l+0x29c>
 80149e8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80149ec:	2908      	cmp	r1, #8
 80149ee:	f63f af7a 	bhi.w	80148e6 <_strtod_l+0x1a6>
 80149f2:	3a30      	subs	r2, #48	; 0x30
 80149f4:	9208      	str	r2, [sp, #32]
 80149f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80149f8:	920c      	str	r2, [sp, #48]	; 0x30
 80149fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80149fc:	1c57      	adds	r7, r2, #1
 80149fe:	9715      	str	r7, [sp, #84]	; 0x54
 8014a00:	7852      	ldrb	r2, [r2, #1]
 8014a02:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014a06:	f1be 0f09 	cmp.w	lr, #9
 8014a0a:	d938      	bls.n	8014a7e <_strtod_l+0x33e>
 8014a0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014a0e:	1a7f      	subs	r7, r7, r1
 8014a10:	2f08      	cmp	r7, #8
 8014a12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014a16:	dc03      	bgt.n	8014a20 <_strtod_l+0x2e0>
 8014a18:	9908      	ldr	r1, [sp, #32]
 8014a1a:	428f      	cmp	r7, r1
 8014a1c:	bfa8      	it	ge
 8014a1e:	460f      	movge	r7, r1
 8014a20:	f1bc 0f00 	cmp.w	ip, #0
 8014a24:	d000      	beq.n	8014a28 <_strtod_l+0x2e8>
 8014a26:	427f      	negs	r7, r7
 8014a28:	2e00      	cmp	r6, #0
 8014a2a:	d14f      	bne.n	8014acc <_strtod_l+0x38c>
 8014a2c:	9904      	ldr	r1, [sp, #16]
 8014a2e:	4301      	orrs	r1, r0
 8014a30:	f47f aec1 	bne.w	80147b6 <_strtod_l+0x76>
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	f47f aedb 	bne.w	80147f0 <_strtod_l+0xb0>
 8014a3a:	2a69      	cmp	r2, #105	; 0x69
 8014a3c:	d029      	beq.n	8014a92 <_strtod_l+0x352>
 8014a3e:	dc26      	bgt.n	8014a8e <_strtod_l+0x34e>
 8014a40:	2a49      	cmp	r2, #73	; 0x49
 8014a42:	d026      	beq.n	8014a92 <_strtod_l+0x352>
 8014a44:	2a4e      	cmp	r2, #78	; 0x4e
 8014a46:	f47f aed3 	bne.w	80147f0 <_strtod_l+0xb0>
 8014a4a:	499b      	ldr	r1, [pc, #620]	; (8014cb8 <_strtod_l+0x578>)
 8014a4c:	a815      	add	r0, sp, #84	; 0x54
 8014a4e:	f002 fff5 	bl	8017a3c <__match>
 8014a52:	2800      	cmp	r0, #0
 8014a54:	f43f aecc 	beq.w	80147f0 <_strtod_l+0xb0>
 8014a58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a5a:	781b      	ldrb	r3, [r3, #0]
 8014a5c:	2b28      	cmp	r3, #40	; 0x28
 8014a5e:	d12f      	bne.n	8014ac0 <_strtod_l+0x380>
 8014a60:	4996      	ldr	r1, [pc, #600]	; (8014cbc <_strtod_l+0x57c>)
 8014a62:	aa18      	add	r2, sp, #96	; 0x60
 8014a64:	a815      	add	r0, sp, #84	; 0x54
 8014a66:	f002 fffd 	bl	8017a64 <__hexnan>
 8014a6a:	2805      	cmp	r0, #5
 8014a6c:	d128      	bne.n	8014ac0 <_strtod_l+0x380>
 8014a6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014a70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014a74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014a78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014a7c:	e69b      	b.n	80147b6 <_strtod_l+0x76>
 8014a7e:	9f08      	ldr	r7, [sp, #32]
 8014a80:	210a      	movs	r1, #10
 8014a82:	fb01 2107 	mla	r1, r1, r7, r2
 8014a86:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014a8a:	9208      	str	r2, [sp, #32]
 8014a8c:	e7b5      	b.n	80149fa <_strtod_l+0x2ba>
 8014a8e:	2a6e      	cmp	r2, #110	; 0x6e
 8014a90:	e7d9      	b.n	8014a46 <_strtod_l+0x306>
 8014a92:	498b      	ldr	r1, [pc, #556]	; (8014cc0 <_strtod_l+0x580>)
 8014a94:	a815      	add	r0, sp, #84	; 0x54
 8014a96:	f002 ffd1 	bl	8017a3c <__match>
 8014a9a:	2800      	cmp	r0, #0
 8014a9c:	f43f aea8 	beq.w	80147f0 <_strtod_l+0xb0>
 8014aa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014aa2:	4988      	ldr	r1, [pc, #544]	; (8014cc4 <_strtod_l+0x584>)
 8014aa4:	3b01      	subs	r3, #1
 8014aa6:	a815      	add	r0, sp, #84	; 0x54
 8014aa8:	9315      	str	r3, [sp, #84]	; 0x54
 8014aaa:	f002 ffc7 	bl	8017a3c <__match>
 8014aae:	b910      	cbnz	r0, 8014ab6 <_strtod_l+0x376>
 8014ab0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014ab2:	3301      	adds	r3, #1
 8014ab4:	9315      	str	r3, [sp, #84]	; 0x54
 8014ab6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8014cd4 <_strtod_l+0x594>
 8014aba:	f04f 0800 	mov.w	r8, #0
 8014abe:	e67a      	b.n	80147b6 <_strtod_l+0x76>
 8014ac0:	4881      	ldr	r0, [pc, #516]	; (8014cc8 <_strtod_l+0x588>)
 8014ac2:	f001 fe21 	bl	8016708 <nan>
 8014ac6:	ec59 8b10 	vmov	r8, r9, d0
 8014aca:	e674      	b.n	80147b6 <_strtod_l+0x76>
 8014acc:	9b05      	ldr	r3, [sp, #20]
 8014ace:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ad0:	1afb      	subs	r3, r7, r3
 8014ad2:	f1bb 0f00 	cmp.w	fp, #0
 8014ad6:	bf08      	it	eq
 8014ad8:	46b3      	moveq	fp, r6
 8014ada:	2e10      	cmp	r6, #16
 8014adc:	9308      	str	r3, [sp, #32]
 8014ade:	4635      	mov	r5, r6
 8014ae0:	bfa8      	it	ge
 8014ae2:	2510      	movge	r5, #16
 8014ae4:	f7eb fd0e 	bl	8000504 <__aeabi_ui2d>
 8014ae8:	2e09      	cmp	r6, #9
 8014aea:	4680      	mov	r8, r0
 8014aec:	4689      	mov	r9, r1
 8014aee:	dd13      	ble.n	8014b18 <_strtod_l+0x3d8>
 8014af0:	4b76      	ldr	r3, [pc, #472]	; (8014ccc <_strtod_l+0x58c>)
 8014af2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014af6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014afa:	f7eb fd7d 	bl	80005f8 <__aeabi_dmul>
 8014afe:	4680      	mov	r8, r0
 8014b00:	4650      	mov	r0, sl
 8014b02:	4689      	mov	r9, r1
 8014b04:	f7eb fcfe 	bl	8000504 <__aeabi_ui2d>
 8014b08:	4602      	mov	r2, r0
 8014b0a:	460b      	mov	r3, r1
 8014b0c:	4640      	mov	r0, r8
 8014b0e:	4649      	mov	r1, r9
 8014b10:	f7eb fbbc 	bl	800028c <__adddf3>
 8014b14:	4680      	mov	r8, r0
 8014b16:	4689      	mov	r9, r1
 8014b18:	2e0f      	cmp	r6, #15
 8014b1a:	dc38      	bgt.n	8014b8e <_strtod_l+0x44e>
 8014b1c:	9b08      	ldr	r3, [sp, #32]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	f43f ae49 	beq.w	80147b6 <_strtod_l+0x76>
 8014b24:	dd24      	ble.n	8014b70 <_strtod_l+0x430>
 8014b26:	2b16      	cmp	r3, #22
 8014b28:	dc0b      	bgt.n	8014b42 <_strtod_l+0x402>
 8014b2a:	4968      	ldr	r1, [pc, #416]	; (8014ccc <_strtod_l+0x58c>)
 8014b2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b34:	4642      	mov	r2, r8
 8014b36:	464b      	mov	r3, r9
 8014b38:	f7eb fd5e 	bl	80005f8 <__aeabi_dmul>
 8014b3c:	4680      	mov	r8, r0
 8014b3e:	4689      	mov	r9, r1
 8014b40:	e639      	b.n	80147b6 <_strtod_l+0x76>
 8014b42:	9a08      	ldr	r2, [sp, #32]
 8014b44:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8014b48:	4293      	cmp	r3, r2
 8014b4a:	db20      	blt.n	8014b8e <_strtod_l+0x44e>
 8014b4c:	4c5f      	ldr	r4, [pc, #380]	; (8014ccc <_strtod_l+0x58c>)
 8014b4e:	f1c6 060f 	rsb	r6, r6, #15
 8014b52:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8014b56:	4642      	mov	r2, r8
 8014b58:	464b      	mov	r3, r9
 8014b5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b5e:	f7eb fd4b 	bl	80005f8 <__aeabi_dmul>
 8014b62:	9b08      	ldr	r3, [sp, #32]
 8014b64:	1b9e      	subs	r6, r3, r6
 8014b66:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8014b6a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014b6e:	e7e3      	b.n	8014b38 <_strtod_l+0x3f8>
 8014b70:	9b08      	ldr	r3, [sp, #32]
 8014b72:	3316      	adds	r3, #22
 8014b74:	db0b      	blt.n	8014b8e <_strtod_l+0x44e>
 8014b76:	9b05      	ldr	r3, [sp, #20]
 8014b78:	1bdf      	subs	r7, r3, r7
 8014b7a:	4b54      	ldr	r3, [pc, #336]	; (8014ccc <_strtod_l+0x58c>)
 8014b7c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8014b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014b84:	4640      	mov	r0, r8
 8014b86:	4649      	mov	r1, r9
 8014b88:	f7eb fe60 	bl	800084c <__aeabi_ddiv>
 8014b8c:	e7d6      	b.n	8014b3c <_strtod_l+0x3fc>
 8014b8e:	9b08      	ldr	r3, [sp, #32]
 8014b90:	1b75      	subs	r5, r6, r5
 8014b92:	441d      	add	r5, r3
 8014b94:	2d00      	cmp	r5, #0
 8014b96:	dd70      	ble.n	8014c7a <_strtod_l+0x53a>
 8014b98:	f015 030f 	ands.w	r3, r5, #15
 8014b9c:	d00a      	beq.n	8014bb4 <_strtod_l+0x474>
 8014b9e:	494b      	ldr	r1, [pc, #300]	; (8014ccc <_strtod_l+0x58c>)
 8014ba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014ba4:	4642      	mov	r2, r8
 8014ba6:	464b      	mov	r3, r9
 8014ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014bac:	f7eb fd24 	bl	80005f8 <__aeabi_dmul>
 8014bb0:	4680      	mov	r8, r0
 8014bb2:	4689      	mov	r9, r1
 8014bb4:	f035 050f 	bics.w	r5, r5, #15
 8014bb8:	d04d      	beq.n	8014c56 <_strtod_l+0x516>
 8014bba:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8014bbe:	dd22      	ble.n	8014c06 <_strtod_l+0x4c6>
 8014bc0:	2500      	movs	r5, #0
 8014bc2:	46ab      	mov	fp, r5
 8014bc4:	9509      	str	r5, [sp, #36]	; 0x24
 8014bc6:	9505      	str	r5, [sp, #20]
 8014bc8:	2322      	movs	r3, #34	; 0x22
 8014bca:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8014cd4 <_strtod_l+0x594>
 8014bce:	6023      	str	r3, [r4, #0]
 8014bd0:	f04f 0800 	mov.w	r8, #0
 8014bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	f43f aded 	beq.w	80147b6 <_strtod_l+0x76>
 8014bdc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014bde:	4620      	mov	r0, r4
 8014be0:	f003 f82e 	bl	8017c40 <_Bfree>
 8014be4:	9905      	ldr	r1, [sp, #20]
 8014be6:	4620      	mov	r0, r4
 8014be8:	f003 f82a 	bl	8017c40 <_Bfree>
 8014bec:	4659      	mov	r1, fp
 8014bee:	4620      	mov	r0, r4
 8014bf0:	f003 f826 	bl	8017c40 <_Bfree>
 8014bf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014bf6:	4620      	mov	r0, r4
 8014bf8:	f003 f822 	bl	8017c40 <_Bfree>
 8014bfc:	4629      	mov	r1, r5
 8014bfe:	4620      	mov	r0, r4
 8014c00:	f003 f81e 	bl	8017c40 <_Bfree>
 8014c04:	e5d7      	b.n	80147b6 <_strtod_l+0x76>
 8014c06:	4b32      	ldr	r3, [pc, #200]	; (8014cd0 <_strtod_l+0x590>)
 8014c08:	9304      	str	r3, [sp, #16]
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	112d      	asrs	r5, r5, #4
 8014c0e:	4640      	mov	r0, r8
 8014c10:	4649      	mov	r1, r9
 8014c12:	469a      	mov	sl, r3
 8014c14:	2d01      	cmp	r5, #1
 8014c16:	dc21      	bgt.n	8014c5c <_strtod_l+0x51c>
 8014c18:	b10b      	cbz	r3, 8014c1e <_strtod_l+0x4de>
 8014c1a:	4680      	mov	r8, r0
 8014c1c:	4689      	mov	r9, r1
 8014c1e:	492c      	ldr	r1, [pc, #176]	; (8014cd0 <_strtod_l+0x590>)
 8014c20:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014c24:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014c28:	4642      	mov	r2, r8
 8014c2a:	464b      	mov	r3, r9
 8014c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c30:	f7eb fce2 	bl	80005f8 <__aeabi_dmul>
 8014c34:	4b27      	ldr	r3, [pc, #156]	; (8014cd4 <_strtod_l+0x594>)
 8014c36:	460a      	mov	r2, r1
 8014c38:	400b      	ands	r3, r1
 8014c3a:	4927      	ldr	r1, [pc, #156]	; (8014cd8 <_strtod_l+0x598>)
 8014c3c:	428b      	cmp	r3, r1
 8014c3e:	4680      	mov	r8, r0
 8014c40:	d8be      	bhi.n	8014bc0 <_strtod_l+0x480>
 8014c42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014c46:	428b      	cmp	r3, r1
 8014c48:	bf86      	itte	hi
 8014c4a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8014cdc <_strtod_l+0x59c>
 8014c4e:	f04f 38ff 	movhi.w	r8, #4294967295
 8014c52:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8014c56:	2300      	movs	r3, #0
 8014c58:	9304      	str	r3, [sp, #16]
 8014c5a:	e07b      	b.n	8014d54 <_strtod_l+0x614>
 8014c5c:	07ea      	lsls	r2, r5, #31
 8014c5e:	d505      	bpl.n	8014c6c <_strtod_l+0x52c>
 8014c60:	9b04      	ldr	r3, [sp, #16]
 8014c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c66:	f7eb fcc7 	bl	80005f8 <__aeabi_dmul>
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	9a04      	ldr	r2, [sp, #16]
 8014c6e:	3208      	adds	r2, #8
 8014c70:	f10a 0a01 	add.w	sl, sl, #1
 8014c74:	106d      	asrs	r5, r5, #1
 8014c76:	9204      	str	r2, [sp, #16]
 8014c78:	e7cc      	b.n	8014c14 <_strtod_l+0x4d4>
 8014c7a:	d0ec      	beq.n	8014c56 <_strtod_l+0x516>
 8014c7c:	426d      	negs	r5, r5
 8014c7e:	f015 020f 	ands.w	r2, r5, #15
 8014c82:	d00a      	beq.n	8014c9a <_strtod_l+0x55a>
 8014c84:	4b11      	ldr	r3, [pc, #68]	; (8014ccc <_strtod_l+0x58c>)
 8014c86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014c8a:	4640      	mov	r0, r8
 8014c8c:	4649      	mov	r1, r9
 8014c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c92:	f7eb fddb 	bl	800084c <__aeabi_ddiv>
 8014c96:	4680      	mov	r8, r0
 8014c98:	4689      	mov	r9, r1
 8014c9a:	112d      	asrs	r5, r5, #4
 8014c9c:	d0db      	beq.n	8014c56 <_strtod_l+0x516>
 8014c9e:	2d1f      	cmp	r5, #31
 8014ca0:	dd1e      	ble.n	8014ce0 <_strtod_l+0x5a0>
 8014ca2:	2500      	movs	r5, #0
 8014ca4:	46ab      	mov	fp, r5
 8014ca6:	9509      	str	r5, [sp, #36]	; 0x24
 8014ca8:	9505      	str	r5, [sp, #20]
 8014caa:	2322      	movs	r3, #34	; 0x22
 8014cac:	f04f 0800 	mov.w	r8, #0
 8014cb0:	f04f 0900 	mov.w	r9, #0
 8014cb4:	6023      	str	r3, [r4, #0]
 8014cb6:	e78d      	b.n	8014bd4 <_strtod_l+0x494>
 8014cb8:	0801cafe 	.word	0x0801cafe
 8014cbc:	0801c9b4 	.word	0x0801c9b4
 8014cc0:	0801caf6 	.word	0x0801caf6
 8014cc4:	0801cbe2 	.word	0x0801cbe2
 8014cc8:	0801cbde 	.word	0x0801cbde
 8014ccc:	0801cd38 	.word	0x0801cd38
 8014cd0:	0801cd10 	.word	0x0801cd10
 8014cd4:	7ff00000 	.word	0x7ff00000
 8014cd8:	7ca00000 	.word	0x7ca00000
 8014cdc:	7fefffff 	.word	0x7fefffff
 8014ce0:	f015 0310 	ands.w	r3, r5, #16
 8014ce4:	bf18      	it	ne
 8014ce6:	236a      	movne	r3, #106	; 0x6a
 8014ce8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801508c <_strtod_l+0x94c>
 8014cec:	9304      	str	r3, [sp, #16]
 8014cee:	4640      	mov	r0, r8
 8014cf0:	4649      	mov	r1, r9
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	07ea      	lsls	r2, r5, #31
 8014cf6:	d504      	bpl.n	8014d02 <_strtod_l+0x5c2>
 8014cf8:	e9da 2300 	ldrd	r2, r3, [sl]
 8014cfc:	f7eb fc7c 	bl	80005f8 <__aeabi_dmul>
 8014d00:	2301      	movs	r3, #1
 8014d02:	106d      	asrs	r5, r5, #1
 8014d04:	f10a 0a08 	add.w	sl, sl, #8
 8014d08:	d1f4      	bne.n	8014cf4 <_strtod_l+0x5b4>
 8014d0a:	b10b      	cbz	r3, 8014d10 <_strtod_l+0x5d0>
 8014d0c:	4680      	mov	r8, r0
 8014d0e:	4689      	mov	r9, r1
 8014d10:	9b04      	ldr	r3, [sp, #16]
 8014d12:	b1bb      	cbz	r3, 8014d44 <_strtod_l+0x604>
 8014d14:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8014d18:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	4649      	mov	r1, r9
 8014d20:	dd10      	ble.n	8014d44 <_strtod_l+0x604>
 8014d22:	2b1f      	cmp	r3, #31
 8014d24:	f340 811e 	ble.w	8014f64 <_strtod_l+0x824>
 8014d28:	2b34      	cmp	r3, #52	; 0x34
 8014d2a:	bfde      	ittt	le
 8014d2c:	f04f 33ff 	movle.w	r3, #4294967295
 8014d30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8014d34:	4093      	lslle	r3, r2
 8014d36:	f04f 0800 	mov.w	r8, #0
 8014d3a:	bfcc      	ite	gt
 8014d3c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8014d40:	ea03 0901 	andle.w	r9, r3, r1
 8014d44:	2200      	movs	r2, #0
 8014d46:	2300      	movs	r3, #0
 8014d48:	4640      	mov	r0, r8
 8014d4a:	4649      	mov	r1, r9
 8014d4c:	f7eb febc 	bl	8000ac8 <__aeabi_dcmpeq>
 8014d50:	2800      	cmp	r0, #0
 8014d52:	d1a6      	bne.n	8014ca2 <_strtod_l+0x562>
 8014d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d56:	9300      	str	r3, [sp, #0]
 8014d58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014d5a:	4633      	mov	r3, r6
 8014d5c:	465a      	mov	r2, fp
 8014d5e:	4620      	mov	r0, r4
 8014d60:	f002 ffd6 	bl	8017d10 <__s2b>
 8014d64:	9009      	str	r0, [sp, #36]	; 0x24
 8014d66:	2800      	cmp	r0, #0
 8014d68:	f43f af2a 	beq.w	8014bc0 <_strtod_l+0x480>
 8014d6c:	9a08      	ldr	r2, [sp, #32]
 8014d6e:	9b05      	ldr	r3, [sp, #20]
 8014d70:	2a00      	cmp	r2, #0
 8014d72:	eba3 0307 	sub.w	r3, r3, r7
 8014d76:	bfa8      	it	ge
 8014d78:	2300      	movge	r3, #0
 8014d7a:	930c      	str	r3, [sp, #48]	; 0x30
 8014d7c:	2500      	movs	r5, #0
 8014d7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014d82:	9312      	str	r3, [sp, #72]	; 0x48
 8014d84:	46ab      	mov	fp, r5
 8014d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d88:	4620      	mov	r0, r4
 8014d8a:	6859      	ldr	r1, [r3, #4]
 8014d8c:	f002 ff18 	bl	8017bc0 <_Balloc>
 8014d90:	9005      	str	r0, [sp, #20]
 8014d92:	2800      	cmp	r0, #0
 8014d94:	f43f af18 	beq.w	8014bc8 <_strtod_l+0x488>
 8014d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d9a:	691a      	ldr	r2, [r3, #16]
 8014d9c:	3202      	adds	r2, #2
 8014d9e:	f103 010c 	add.w	r1, r3, #12
 8014da2:	0092      	lsls	r2, r2, #2
 8014da4:	300c      	adds	r0, #12
 8014da6:	f001 fca0 	bl	80166ea <memcpy>
 8014daa:	ec49 8b10 	vmov	d0, r8, r9
 8014dae:	aa18      	add	r2, sp, #96	; 0x60
 8014db0:	a917      	add	r1, sp, #92	; 0x5c
 8014db2:	4620      	mov	r0, r4
 8014db4:	f003 fae0 	bl	8018378 <__d2b>
 8014db8:	ec49 8b18 	vmov	d8, r8, r9
 8014dbc:	9016      	str	r0, [sp, #88]	; 0x58
 8014dbe:	2800      	cmp	r0, #0
 8014dc0:	f43f af02 	beq.w	8014bc8 <_strtod_l+0x488>
 8014dc4:	2101      	movs	r1, #1
 8014dc6:	4620      	mov	r0, r4
 8014dc8:	f003 f83a 	bl	8017e40 <__i2b>
 8014dcc:	4683      	mov	fp, r0
 8014dce:	2800      	cmp	r0, #0
 8014dd0:	f43f aefa 	beq.w	8014bc8 <_strtod_l+0x488>
 8014dd4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014dd6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014dd8:	2e00      	cmp	r6, #0
 8014dda:	bfab      	itete	ge
 8014ddc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8014dde:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8014de0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8014de2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8014de6:	bfac      	ite	ge
 8014de8:	eb06 0a03 	addge.w	sl, r6, r3
 8014dec:	1b9f      	sublt	r7, r3, r6
 8014dee:	9b04      	ldr	r3, [sp, #16]
 8014df0:	1af6      	subs	r6, r6, r3
 8014df2:	4416      	add	r6, r2
 8014df4:	4ba0      	ldr	r3, [pc, #640]	; (8015078 <_strtod_l+0x938>)
 8014df6:	3e01      	subs	r6, #1
 8014df8:	429e      	cmp	r6, r3
 8014dfa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014dfe:	f280 80c4 	bge.w	8014f8a <_strtod_l+0x84a>
 8014e02:	1b9b      	subs	r3, r3, r6
 8014e04:	2b1f      	cmp	r3, #31
 8014e06:	eba2 0203 	sub.w	r2, r2, r3
 8014e0a:	f04f 0101 	mov.w	r1, #1
 8014e0e:	f300 80b0 	bgt.w	8014f72 <_strtod_l+0x832>
 8014e12:	fa01 f303 	lsl.w	r3, r1, r3
 8014e16:	930e      	str	r3, [sp, #56]	; 0x38
 8014e18:	2300      	movs	r3, #0
 8014e1a:	930d      	str	r3, [sp, #52]	; 0x34
 8014e1c:	eb0a 0602 	add.w	r6, sl, r2
 8014e20:	9b04      	ldr	r3, [sp, #16]
 8014e22:	45b2      	cmp	sl, r6
 8014e24:	4417      	add	r7, r2
 8014e26:	441f      	add	r7, r3
 8014e28:	4653      	mov	r3, sl
 8014e2a:	bfa8      	it	ge
 8014e2c:	4633      	movge	r3, r6
 8014e2e:	42bb      	cmp	r3, r7
 8014e30:	bfa8      	it	ge
 8014e32:	463b      	movge	r3, r7
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	bfc2      	ittt	gt
 8014e38:	1af6      	subgt	r6, r6, r3
 8014e3a:	1aff      	subgt	r7, r7, r3
 8014e3c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8014e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	dd17      	ble.n	8014e76 <_strtod_l+0x736>
 8014e46:	4659      	mov	r1, fp
 8014e48:	461a      	mov	r2, r3
 8014e4a:	4620      	mov	r0, r4
 8014e4c:	f003 f8b8 	bl	8017fc0 <__pow5mult>
 8014e50:	4683      	mov	fp, r0
 8014e52:	2800      	cmp	r0, #0
 8014e54:	f43f aeb8 	beq.w	8014bc8 <_strtod_l+0x488>
 8014e58:	4601      	mov	r1, r0
 8014e5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014e5c:	4620      	mov	r0, r4
 8014e5e:	f003 f805 	bl	8017e6c <__multiply>
 8014e62:	900b      	str	r0, [sp, #44]	; 0x2c
 8014e64:	2800      	cmp	r0, #0
 8014e66:	f43f aeaf 	beq.w	8014bc8 <_strtod_l+0x488>
 8014e6a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014e6c:	4620      	mov	r0, r4
 8014e6e:	f002 fee7 	bl	8017c40 <_Bfree>
 8014e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e74:	9316      	str	r3, [sp, #88]	; 0x58
 8014e76:	2e00      	cmp	r6, #0
 8014e78:	f300 808c 	bgt.w	8014f94 <_strtod_l+0x854>
 8014e7c:	9b08      	ldr	r3, [sp, #32]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	dd08      	ble.n	8014e94 <_strtod_l+0x754>
 8014e82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014e84:	9905      	ldr	r1, [sp, #20]
 8014e86:	4620      	mov	r0, r4
 8014e88:	f003 f89a 	bl	8017fc0 <__pow5mult>
 8014e8c:	9005      	str	r0, [sp, #20]
 8014e8e:	2800      	cmp	r0, #0
 8014e90:	f43f ae9a 	beq.w	8014bc8 <_strtod_l+0x488>
 8014e94:	2f00      	cmp	r7, #0
 8014e96:	dd08      	ble.n	8014eaa <_strtod_l+0x76a>
 8014e98:	9905      	ldr	r1, [sp, #20]
 8014e9a:	463a      	mov	r2, r7
 8014e9c:	4620      	mov	r0, r4
 8014e9e:	f003 f8e9 	bl	8018074 <__lshift>
 8014ea2:	9005      	str	r0, [sp, #20]
 8014ea4:	2800      	cmp	r0, #0
 8014ea6:	f43f ae8f 	beq.w	8014bc8 <_strtod_l+0x488>
 8014eaa:	f1ba 0f00 	cmp.w	sl, #0
 8014eae:	dd08      	ble.n	8014ec2 <_strtod_l+0x782>
 8014eb0:	4659      	mov	r1, fp
 8014eb2:	4652      	mov	r2, sl
 8014eb4:	4620      	mov	r0, r4
 8014eb6:	f003 f8dd 	bl	8018074 <__lshift>
 8014eba:	4683      	mov	fp, r0
 8014ebc:	2800      	cmp	r0, #0
 8014ebe:	f43f ae83 	beq.w	8014bc8 <_strtod_l+0x488>
 8014ec2:	9a05      	ldr	r2, [sp, #20]
 8014ec4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014ec6:	4620      	mov	r0, r4
 8014ec8:	f003 f95c 	bl	8018184 <__mdiff>
 8014ecc:	4605      	mov	r5, r0
 8014ece:	2800      	cmp	r0, #0
 8014ed0:	f43f ae7a 	beq.w	8014bc8 <_strtod_l+0x488>
 8014ed4:	68c3      	ldr	r3, [r0, #12]
 8014ed6:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ed8:	2300      	movs	r3, #0
 8014eda:	60c3      	str	r3, [r0, #12]
 8014edc:	4659      	mov	r1, fp
 8014ede:	f003 f935 	bl	801814c <__mcmp>
 8014ee2:	2800      	cmp	r0, #0
 8014ee4:	da60      	bge.n	8014fa8 <_strtod_l+0x868>
 8014ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ee8:	ea53 0308 	orrs.w	r3, r3, r8
 8014eec:	f040 8084 	bne.w	8014ff8 <_strtod_l+0x8b8>
 8014ef0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d17f      	bne.n	8014ff8 <_strtod_l+0x8b8>
 8014ef8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014efc:	0d1b      	lsrs	r3, r3, #20
 8014efe:	051b      	lsls	r3, r3, #20
 8014f00:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014f04:	d978      	bls.n	8014ff8 <_strtod_l+0x8b8>
 8014f06:	696b      	ldr	r3, [r5, #20]
 8014f08:	b913      	cbnz	r3, 8014f10 <_strtod_l+0x7d0>
 8014f0a:	692b      	ldr	r3, [r5, #16]
 8014f0c:	2b01      	cmp	r3, #1
 8014f0e:	dd73      	ble.n	8014ff8 <_strtod_l+0x8b8>
 8014f10:	4629      	mov	r1, r5
 8014f12:	2201      	movs	r2, #1
 8014f14:	4620      	mov	r0, r4
 8014f16:	f003 f8ad 	bl	8018074 <__lshift>
 8014f1a:	4659      	mov	r1, fp
 8014f1c:	4605      	mov	r5, r0
 8014f1e:	f003 f915 	bl	801814c <__mcmp>
 8014f22:	2800      	cmp	r0, #0
 8014f24:	dd68      	ble.n	8014ff8 <_strtod_l+0x8b8>
 8014f26:	9904      	ldr	r1, [sp, #16]
 8014f28:	4a54      	ldr	r2, [pc, #336]	; (801507c <_strtod_l+0x93c>)
 8014f2a:	464b      	mov	r3, r9
 8014f2c:	2900      	cmp	r1, #0
 8014f2e:	f000 8084 	beq.w	801503a <_strtod_l+0x8fa>
 8014f32:	ea02 0109 	and.w	r1, r2, r9
 8014f36:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014f3a:	dc7e      	bgt.n	801503a <_strtod_l+0x8fa>
 8014f3c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014f40:	f77f aeb3 	ble.w	8014caa <_strtod_l+0x56a>
 8014f44:	4b4e      	ldr	r3, [pc, #312]	; (8015080 <_strtod_l+0x940>)
 8014f46:	4640      	mov	r0, r8
 8014f48:	4649      	mov	r1, r9
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	f7eb fb54 	bl	80005f8 <__aeabi_dmul>
 8014f50:	4b4a      	ldr	r3, [pc, #296]	; (801507c <_strtod_l+0x93c>)
 8014f52:	400b      	ands	r3, r1
 8014f54:	4680      	mov	r8, r0
 8014f56:	4689      	mov	r9, r1
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	f47f ae3f 	bne.w	8014bdc <_strtod_l+0x49c>
 8014f5e:	2322      	movs	r3, #34	; 0x22
 8014f60:	6023      	str	r3, [r4, #0]
 8014f62:	e63b      	b.n	8014bdc <_strtod_l+0x49c>
 8014f64:	f04f 32ff 	mov.w	r2, #4294967295
 8014f68:	fa02 f303 	lsl.w	r3, r2, r3
 8014f6c:	ea03 0808 	and.w	r8, r3, r8
 8014f70:	e6e8      	b.n	8014d44 <_strtod_l+0x604>
 8014f72:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014f76:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014f7a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014f7e:	36e2      	adds	r6, #226	; 0xe2
 8014f80:	fa01 f306 	lsl.w	r3, r1, r6
 8014f84:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8014f88:	e748      	b.n	8014e1c <_strtod_l+0x6dc>
 8014f8a:	2100      	movs	r1, #0
 8014f8c:	2301      	movs	r3, #1
 8014f8e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8014f92:	e743      	b.n	8014e1c <_strtod_l+0x6dc>
 8014f94:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014f96:	4632      	mov	r2, r6
 8014f98:	4620      	mov	r0, r4
 8014f9a:	f003 f86b 	bl	8018074 <__lshift>
 8014f9e:	9016      	str	r0, [sp, #88]	; 0x58
 8014fa0:	2800      	cmp	r0, #0
 8014fa2:	f47f af6b 	bne.w	8014e7c <_strtod_l+0x73c>
 8014fa6:	e60f      	b.n	8014bc8 <_strtod_l+0x488>
 8014fa8:	46ca      	mov	sl, r9
 8014faa:	d171      	bne.n	8015090 <_strtod_l+0x950>
 8014fac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014fae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014fb2:	b352      	cbz	r2, 801500a <_strtod_l+0x8ca>
 8014fb4:	4a33      	ldr	r2, [pc, #204]	; (8015084 <_strtod_l+0x944>)
 8014fb6:	4293      	cmp	r3, r2
 8014fb8:	d12a      	bne.n	8015010 <_strtod_l+0x8d0>
 8014fba:	9b04      	ldr	r3, [sp, #16]
 8014fbc:	4641      	mov	r1, r8
 8014fbe:	b1fb      	cbz	r3, 8015000 <_strtod_l+0x8c0>
 8014fc0:	4b2e      	ldr	r3, [pc, #184]	; (801507c <_strtod_l+0x93c>)
 8014fc2:	ea09 0303 	and.w	r3, r9, r3
 8014fc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014fca:	f04f 32ff 	mov.w	r2, #4294967295
 8014fce:	d81a      	bhi.n	8015006 <_strtod_l+0x8c6>
 8014fd0:	0d1b      	lsrs	r3, r3, #20
 8014fd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8014fda:	4299      	cmp	r1, r3
 8014fdc:	d118      	bne.n	8015010 <_strtod_l+0x8d0>
 8014fde:	4b2a      	ldr	r3, [pc, #168]	; (8015088 <_strtod_l+0x948>)
 8014fe0:	459a      	cmp	sl, r3
 8014fe2:	d102      	bne.n	8014fea <_strtod_l+0x8aa>
 8014fe4:	3101      	adds	r1, #1
 8014fe6:	f43f adef 	beq.w	8014bc8 <_strtod_l+0x488>
 8014fea:	4b24      	ldr	r3, [pc, #144]	; (801507c <_strtod_l+0x93c>)
 8014fec:	ea0a 0303 	and.w	r3, sl, r3
 8014ff0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8014ff4:	f04f 0800 	mov.w	r8, #0
 8014ff8:	9b04      	ldr	r3, [sp, #16]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d1a2      	bne.n	8014f44 <_strtod_l+0x804>
 8014ffe:	e5ed      	b.n	8014bdc <_strtod_l+0x49c>
 8015000:	f04f 33ff 	mov.w	r3, #4294967295
 8015004:	e7e9      	b.n	8014fda <_strtod_l+0x89a>
 8015006:	4613      	mov	r3, r2
 8015008:	e7e7      	b.n	8014fda <_strtod_l+0x89a>
 801500a:	ea53 0308 	orrs.w	r3, r3, r8
 801500e:	d08a      	beq.n	8014f26 <_strtod_l+0x7e6>
 8015010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015012:	b1e3      	cbz	r3, 801504e <_strtod_l+0x90e>
 8015014:	ea13 0f0a 	tst.w	r3, sl
 8015018:	d0ee      	beq.n	8014ff8 <_strtod_l+0x8b8>
 801501a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801501c:	9a04      	ldr	r2, [sp, #16]
 801501e:	4640      	mov	r0, r8
 8015020:	4649      	mov	r1, r9
 8015022:	b1c3      	cbz	r3, 8015056 <_strtod_l+0x916>
 8015024:	f7ff fb70 	bl	8014708 <sulp>
 8015028:	4602      	mov	r2, r0
 801502a:	460b      	mov	r3, r1
 801502c:	ec51 0b18 	vmov	r0, r1, d8
 8015030:	f7eb f92c 	bl	800028c <__adddf3>
 8015034:	4680      	mov	r8, r0
 8015036:	4689      	mov	r9, r1
 8015038:	e7de      	b.n	8014ff8 <_strtod_l+0x8b8>
 801503a:	4013      	ands	r3, r2
 801503c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015040:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8015044:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8015048:	f04f 38ff 	mov.w	r8, #4294967295
 801504c:	e7d4      	b.n	8014ff8 <_strtod_l+0x8b8>
 801504e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015050:	ea13 0f08 	tst.w	r3, r8
 8015054:	e7e0      	b.n	8015018 <_strtod_l+0x8d8>
 8015056:	f7ff fb57 	bl	8014708 <sulp>
 801505a:	4602      	mov	r2, r0
 801505c:	460b      	mov	r3, r1
 801505e:	ec51 0b18 	vmov	r0, r1, d8
 8015062:	f7eb f911 	bl	8000288 <__aeabi_dsub>
 8015066:	2200      	movs	r2, #0
 8015068:	2300      	movs	r3, #0
 801506a:	4680      	mov	r8, r0
 801506c:	4689      	mov	r9, r1
 801506e:	f7eb fd2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8015072:	2800      	cmp	r0, #0
 8015074:	d0c0      	beq.n	8014ff8 <_strtod_l+0x8b8>
 8015076:	e618      	b.n	8014caa <_strtod_l+0x56a>
 8015078:	fffffc02 	.word	0xfffffc02
 801507c:	7ff00000 	.word	0x7ff00000
 8015080:	39500000 	.word	0x39500000
 8015084:	000fffff 	.word	0x000fffff
 8015088:	7fefffff 	.word	0x7fefffff
 801508c:	0801c9c8 	.word	0x0801c9c8
 8015090:	4659      	mov	r1, fp
 8015092:	4628      	mov	r0, r5
 8015094:	f003 f9ca 	bl	801842c <__ratio>
 8015098:	ec57 6b10 	vmov	r6, r7, d0
 801509c:	ee10 0a10 	vmov	r0, s0
 80150a0:	2200      	movs	r2, #0
 80150a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80150a6:	4639      	mov	r1, r7
 80150a8:	f7eb fd22 	bl	8000af0 <__aeabi_dcmple>
 80150ac:	2800      	cmp	r0, #0
 80150ae:	d071      	beq.n	8015194 <_strtod_l+0xa54>
 80150b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d17c      	bne.n	80151b0 <_strtod_l+0xa70>
 80150b6:	f1b8 0f00 	cmp.w	r8, #0
 80150ba:	d15a      	bne.n	8015172 <_strtod_l+0xa32>
 80150bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d15d      	bne.n	8015180 <_strtod_l+0xa40>
 80150c4:	4b90      	ldr	r3, [pc, #576]	; (8015308 <_strtod_l+0xbc8>)
 80150c6:	2200      	movs	r2, #0
 80150c8:	4630      	mov	r0, r6
 80150ca:	4639      	mov	r1, r7
 80150cc:	f7eb fd06 	bl	8000adc <__aeabi_dcmplt>
 80150d0:	2800      	cmp	r0, #0
 80150d2:	d15c      	bne.n	801518e <_strtod_l+0xa4e>
 80150d4:	4630      	mov	r0, r6
 80150d6:	4639      	mov	r1, r7
 80150d8:	4b8c      	ldr	r3, [pc, #560]	; (801530c <_strtod_l+0xbcc>)
 80150da:	2200      	movs	r2, #0
 80150dc:	f7eb fa8c 	bl	80005f8 <__aeabi_dmul>
 80150e0:	4606      	mov	r6, r0
 80150e2:	460f      	mov	r7, r1
 80150e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80150e8:	9606      	str	r6, [sp, #24]
 80150ea:	9307      	str	r3, [sp, #28]
 80150ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80150f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80150f4:	4b86      	ldr	r3, [pc, #536]	; (8015310 <_strtod_l+0xbd0>)
 80150f6:	ea0a 0303 	and.w	r3, sl, r3
 80150fa:	930d      	str	r3, [sp, #52]	; 0x34
 80150fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80150fe:	4b85      	ldr	r3, [pc, #532]	; (8015314 <_strtod_l+0xbd4>)
 8015100:	429a      	cmp	r2, r3
 8015102:	f040 8090 	bne.w	8015226 <_strtod_l+0xae6>
 8015106:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801510a:	ec49 8b10 	vmov	d0, r8, r9
 801510e:	f003 f8c3 	bl	8018298 <__ulp>
 8015112:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015116:	ec51 0b10 	vmov	r0, r1, d0
 801511a:	f7eb fa6d 	bl	80005f8 <__aeabi_dmul>
 801511e:	4642      	mov	r2, r8
 8015120:	464b      	mov	r3, r9
 8015122:	f7eb f8b3 	bl	800028c <__adddf3>
 8015126:	460b      	mov	r3, r1
 8015128:	4979      	ldr	r1, [pc, #484]	; (8015310 <_strtod_l+0xbd0>)
 801512a:	4a7b      	ldr	r2, [pc, #492]	; (8015318 <_strtod_l+0xbd8>)
 801512c:	4019      	ands	r1, r3
 801512e:	4291      	cmp	r1, r2
 8015130:	4680      	mov	r8, r0
 8015132:	d944      	bls.n	80151be <_strtod_l+0xa7e>
 8015134:	ee18 2a90 	vmov	r2, s17
 8015138:	4b78      	ldr	r3, [pc, #480]	; (801531c <_strtod_l+0xbdc>)
 801513a:	429a      	cmp	r2, r3
 801513c:	d104      	bne.n	8015148 <_strtod_l+0xa08>
 801513e:	ee18 3a10 	vmov	r3, s16
 8015142:	3301      	adds	r3, #1
 8015144:	f43f ad40 	beq.w	8014bc8 <_strtod_l+0x488>
 8015148:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801531c <_strtod_l+0xbdc>
 801514c:	f04f 38ff 	mov.w	r8, #4294967295
 8015150:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015152:	4620      	mov	r0, r4
 8015154:	f002 fd74 	bl	8017c40 <_Bfree>
 8015158:	9905      	ldr	r1, [sp, #20]
 801515a:	4620      	mov	r0, r4
 801515c:	f002 fd70 	bl	8017c40 <_Bfree>
 8015160:	4659      	mov	r1, fp
 8015162:	4620      	mov	r0, r4
 8015164:	f002 fd6c 	bl	8017c40 <_Bfree>
 8015168:	4629      	mov	r1, r5
 801516a:	4620      	mov	r0, r4
 801516c:	f002 fd68 	bl	8017c40 <_Bfree>
 8015170:	e609      	b.n	8014d86 <_strtod_l+0x646>
 8015172:	f1b8 0f01 	cmp.w	r8, #1
 8015176:	d103      	bne.n	8015180 <_strtod_l+0xa40>
 8015178:	f1b9 0f00 	cmp.w	r9, #0
 801517c:	f43f ad95 	beq.w	8014caa <_strtod_l+0x56a>
 8015180:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80152d8 <_strtod_l+0xb98>
 8015184:	4f60      	ldr	r7, [pc, #384]	; (8015308 <_strtod_l+0xbc8>)
 8015186:	ed8d 7b06 	vstr	d7, [sp, #24]
 801518a:	2600      	movs	r6, #0
 801518c:	e7ae      	b.n	80150ec <_strtod_l+0x9ac>
 801518e:	4f5f      	ldr	r7, [pc, #380]	; (801530c <_strtod_l+0xbcc>)
 8015190:	2600      	movs	r6, #0
 8015192:	e7a7      	b.n	80150e4 <_strtod_l+0x9a4>
 8015194:	4b5d      	ldr	r3, [pc, #372]	; (801530c <_strtod_l+0xbcc>)
 8015196:	4630      	mov	r0, r6
 8015198:	4639      	mov	r1, r7
 801519a:	2200      	movs	r2, #0
 801519c:	f7eb fa2c 	bl	80005f8 <__aeabi_dmul>
 80151a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151a2:	4606      	mov	r6, r0
 80151a4:	460f      	mov	r7, r1
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d09c      	beq.n	80150e4 <_strtod_l+0x9a4>
 80151aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80151ae:	e79d      	b.n	80150ec <_strtod_l+0x9ac>
 80151b0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80152e0 <_strtod_l+0xba0>
 80151b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80151b8:	ec57 6b17 	vmov	r6, r7, d7
 80151bc:	e796      	b.n	80150ec <_strtod_l+0x9ac>
 80151be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80151c2:	9b04      	ldr	r3, [sp, #16]
 80151c4:	46ca      	mov	sl, r9
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d1c2      	bne.n	8015150 <_strtod_l+0xa10>
 80151ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80151ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80151d0:	0d1b      	lsrs	r3, r3, #20
 80151d2:	051b      	lsls	r3, r3, #20
 80151d4:	429a      	cmp	r2, r3
 80151d6:	d1bb      	bne.n	8015150 <_strtod_l+0xa10>
 80151d8:	4630      	mov	r0, r6
 80151da:	4639      	mov	r1, r7
 80151dc:	f7eb fd6c 	bl	8000cb8 <__aeabi_d2lz>
 80151e0:	f7eb f9dc 	bl	800059c <__aeabi_l2d>
 80151e4:	4602      	mov	r2, r0
 80151e6:	460b      	mov	r3, r1
 80151e8:	4630      	mov	r0, r6
 80151ea:	4639      	mov	r1, r7
 80151ec:	f7eb f84c 	bl	8000288 <__aeabi_dsub>
 80151f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80151f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80151f6:	ea43 0308 	orr.w	r3, r3, r8
 80151fa:	4313      	orrs	r3, r2
 80151fc:	4606      	mov	r6, r0
 80151fe:	460f      	mov	r7, r1
 8015200:	d054      	beq.n	80152ac <_strtod_l+0xb6c>
 8015202:	a339      	add	r3, pc, #228	; (adr r3, 80152e8 <_strtod_l+0xba8>)
 8015204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015208:	f7eb fc68 	bl	8000adc <__aeabi_dcmplt>
 801520c:	2800      	cmp	r0, #0
 801520e:	f47f ace5 	bne.w	8014bdc <_strtod_l+0x49c>
 8015212:	a337      	add	r3, pc, #220	; (adr r3, 80152f0 <_strtod_l+0xbb0>)
 8015214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015218:	4630      	mov	r0, r6
 801521a:	4639      	mov	r1, r7
 801521c:	f7eb fc7c 	bl	8000b18 <__aeabi_dcmpgt>
 8015220:	2800      	cmp	r0, #0
 8015222:	d095      	beq.n	8015150 <_strtod_l+0xa10>
 8015224:	e4da      	b.n	8014bdc <_strtod_l+0x49c>
 8015226:	9b04      	ldr	r3, [sp, #16]
 8015228:	b333      	cbz	r3, 8015278 <_strtod_l+0xb38>
 801522a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801522c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015230:	d822      	bhi.n	8015278 <_strtod_l+0xb38>
 8015232:	a331      	add	r3, pc, #196	; (adr r3, 80152f8 <_strtod_l+0xbb8>)
 8015234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015238:	4630      	mov	r0, r6
 801523a:	4639      	mov	r1, r7
 801523c:	f7eb fc58 	bl	8000af0 <__aeabi_dcmple>
 8015240:	b1a0      	cbz	r0, 801526c <_strtod_l+0xb2c>
 8015242:	4639      	mov	r1, r7
 8015244:	4630      	mov	r0, r6
 8015246:	f7eb fcaf 	bl	8000ba8 <__aeabi_d2uiz>
 801524a:	2801      	cmp	r0, #1
 801524c:	bf38      	it	cc
 801524e:	2001      	movcc	r0, #1
 8015250:	f7eb f958 	bl	8000504 <__aeabi_ui2d>
 8015254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015256:	4606      	mov	r6, r0
 8015258:	460f      	mov	r7, r1
 801525a:	bb23      	cbnz	r3, 80152a6 <_strtod_l+0xb66>
 801525c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015260:	9010      	str	r0, [sp, #64]	; 0x40
 8015262:	9311      	str	r3, [sp, #68]	; 0x44
 8015264:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015268:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801526c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801526e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015270:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015274:	1a9b      	subs	r3, r3, r2
 8015276:	930f      	str	r3, [sp, #60]	; 0x3c
 8015278:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801527c:	eeb0 0a48 	vmov.f32	s0, s16
 8015280:	eef0 0a68 	vmov.f32	s1, s17
 8015284:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015288:	f003 f806 	bl	8018298 <__ulp>
 801528c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015290:	ec53 2b10 	vmov	r2, r3, d0
 8015294:	f7eb f9b0 	bl	80005f8 <__aeabi_dmul>
 8015298:	ec53 2b18 	vmov	r2, r3, d8
 801529c:	f7ea fff6 	bl	800028c <__adddf3>
 80152a0:	4680      	mov	r8, r0
 80152a2:	4689      	mov	r9, r1
 80152a4:	e78d      	b.n	80151c2 <_strtod_l+0xa82>
 80152a6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80152aa:	e7db      	b.n	8015264 <_strtod_l+0xb24>
 80152ac:	a314      	add	r3, pc, #80	; (adr r3, 8015300 <_strtod_l+0xbc0>)
 80152ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152b2:	f7eb fc13 	bl	8000adc <__aeabi_dcmplt>
 80152b6:	e7b3      	b.n	8015220 <_strtod_l+0xae0>
 80152b8:	2300      	movs	r3, #0
 80152ba:	930a      	str	r3, [sp, #40]	; 0x28
 80152bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80152be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80152c0:	6013      	str	r3, [r2, #0]
 80152c2:	f7ff ba7c 	b.w	80147be <_strtod_l+0x7e>
 80152c6:	2a65      	cmp	r2, #101	; 0x65
 80152c8:	f43f ab75 	beq.w	80149b6 <_strtod_l+0x276>
 80152cc:	2a45      	cmp	r2, #69	; 0x45
 80152ce:	f43f ab72 	beq.w	80149b6 <_strtod_l+0x276>
 80152d2:	2301      	movs	r3, #1
 80152d4:	f7ff bbaa 	b.w	8014a2c <_strtod_l+0x2ec>
 80152d8:	00000000 	.word	0x00000000
 80152dc:	bff00000 	.word	0xbff00000
 80152e0:	00000000 	.word	0x00000000
 80152e4:	3ff00000 	.word	0x3ff00000
 80152e8:	94a03595 	.word	0x94a03595
 80152ec:	3fdfffff 	.word	0x3fdfffff
 80152f0:	35afe535 	.word	0x35afe535
 80152f4:	3fe00000 	.word	0x3fe00000
 80152f8:	ffc00000 	.word	0xffc00000
 80152fc:	41dfffff 	.word	0x41dfffff
 8015300:	94a03595 	.word	0x94a03595
 8015304:	3fcfffff 	.word	0x3fcfffff
 8015308:	3ff00000 	.word	0x3ff00000
 801530c:	3fe00000 	.word	0x3fe00000
 8015310:	7ff00000 	.word	0x7ff00000
 8015314:	7fe00000 	.word	0x7fe00000
 8015318:	7c9fffff 	.word	0x7c9fffff
 801531c:	7fefffff 	.word	0x7fefffff

08015320 <_strtod_r>:
 8015320:	4b01      	ldr	r3, [pc, #4]	; (8015328 <_strtod_r+0x8>)
 8015322:	f7ff ba0d 	b.w	8014740 <_strtod_l>
 8015326:	bf00      	nop
 8015328:	2000013c 	.word	0x2000013c

0801532c <strtof>:
 801532c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015330:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80153f4 <strtof+0xc8>
 8015334:	4b2a      	ldr	r3, [pc, #168]	; (80153e0 <strtof+0xb4>)
 8015336:	460a      	mov	r2, r1
 8015338:	ed2d 8b02 	vpush	{d8}
 801533c:	4601      	mov	r1, r0
 801533e:	f8d8 0000 	ldr.w	r0, [r8]
 8015342:	f7ff f9fd 	bl	8014740 <_strtod_l>
 8015346:	ec55 4b10 	vmov	r4, r5, d0
 801534a:	ee10 2a10 	vmov	r2, s0
 801534e:	ee10 0a10 	vmov	r0, s0
 8015352:	462b      	mov	r3, r5
 8015354:	4629      	mov	r1, r5
 8015356:	f7eb fbe9 	bl	8000b2c <__aeabi_dcmpun>
 801535a:	b190      	cbz	r0, 8015382 <strtof+0x56>
 801535c:	2d00      	cmp	r5, #0
 801535e:	4821      	ldr	r0, [pc, #132]	; (80153e4 <strtof+0xb8>)
 8015360:	da09      	bge.n	8015376 <strtof+0x4a>
 8015362:	f001 f9d9 	bl	8016718 <nanf>
 8015366:	eeb1 8a40 	vneg.f32	s16, s0
 801536a:	eeb0 0a48 	vmov.f32	s0, s16
 801536e:	ecbd 8b02 	vpop	{d8}
 8015372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015376:	ecbd 8b02 	vpop	{d8}
 801537a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801537e:	f001 b9cb 	b.w	8016718 <nanf>
 8015382:	4620      	mov	r0, r4
 8015384:	4629      	mov	r1, r5
 8015386:	f7eb fc2f 	bl	8000be8 <__aeabi_d2f>
 801538a:	ee08 0a10 	vmov	s16, r0
 801538e:	eddf 7a16 	vldr	s15, [pc, #88]	; 80153e8 <strtof+0xbc>
 8015392:	eeb0 7ac8 	vabs.f32	s14, s16
 8015396:	eeb4 7a67 	vcmp.f32	s14, s15
 801539a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801539e:	dd11      	ble.n	80153c4 <strtof+0x98>
 80153a0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80153a4:	4b11      	ldr	r3, [pc, #68]	; (80153ec <strtof+0xc0>)
 80153a6:	f04f 32ff 	mov.w	r2, #4294967295
 80153aa:	4620      	mov	r0, r4
 80153ac:	4639      	mov	r1, r7
 80153ae:	f7eb fbbd 	bl	8000b2c <__aeabi_dcmpun>
 80153b2:	b980      	cbnz	r0, 80153d6 <strtof+0xaa>
 80153b4:	4b0d      	ldr	r3, [pc, #52]	; (80153ec <strtof+0xc0>)
 80153b6:	f04f 32ff 	mov.w	r2, #4294967295
 80153ba:	4620      	mov	r0, r4
 80153bc:	4639      	mov	r1, r7
 80153be:	f7eb fb97 	bl	8000af0 <__aeabi_dcmple>
 80153c2:	b940      	cbnz	r0, 80153d6 <strtof+0xaa>
 80153c4:	ee18 3a10 	vmov	r3, s16
 80153c8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80153cc:	d1cd      	bne.n	801536a <strtof+0x3e>
 80153ce:	4b08      	ldr	r3, [pc, #32]	; (80153f0 <strtof+0xc4>)
 80153d0:	402b      	ands	r3, r5
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d0c9      	beq.n	801536a <strtof+0x3e>
 80153d6:	f8d8 3000 	ldr.w	r3, [r8]
 80153da:	2222      	movs	r2, #34	; 0x22
 80153dc:	601a      	str	r2, [r3, #0]
 80153de:	e7c4      	b.n	801536a <strtof+0x3e>
 80153e0:	2000013c 	.word	0x2000013c
 80153e4:	0801cbde 	.word	0x0801cbde
 80153e8:	7f7fffff 	.word	0x7f7fffff
 80153ec:	7fefffff 	.word	0x7fefffff
 80153f0:	7ff00000 	.word	0x7ff00000
 80153f4:	200002f4 	.word	0x200002f4

080153f8 <_strtol_l.constprop.0>:
 80153f8:	2b01      	cmp	r3, #1
 80153fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153fe:	d001      	beq.n	8015404 <_strtol_l.constprop.0+0xc>
 8015400:	2b24      	cmp	r3, #36	; 0x24
 8015402:	d906      	bls.n	8015412 <_strtol_l.constprop.0+0x1a>
 8015404:	f001 f93c 	bl	8016680 <__errno>
 8015408:	2316      	movs	r3, #22
 801540a:	6003      	str	r3, [r0, #0]
 801540c:	2000      	movs	r0, #0
 801540e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015412:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80154f8 <_strtol_l.constprop.0+0x100>
 8015416:	460d      	mov	r5, r1
 8015418:	462e      	mov	r6, r5
 801541a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801541e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8015422:	f017 0708 	ands.w	r7, r7, #8
 8015426:	d1f7      	bne.n	8015418 <_strtol_l.constprop.0+0x20>
 8015428:	2c2d      	cmp	r4, #45	; 0x2d
 801542a:	d132      	bne.n	8015492 <_strtol_l.constprop.0+0x9a>
 801542c:	782c      	ldrb	r4, [r5, #0]
 801542e:	2701      	movs	r7, #1
 8015430:	1cb5      	adds	r5, r6, #2
 8015432:	2b00      	cmp	r3, #0
 8015434:	d05b      	beq.n	80154ee <_strtol_l.constprop.0+0xf6>
 8015436:	2b10      	cmp	r3, #16
 8015438:	d109      	bne.n	801544e <_strtol_l.constprop.0+0x56>
 801543a:	2c30      	cmp	r4, #48	; 0x30
 801543c:	d107      	bne.n	801544e <_strtol_l.constprop.0+0x56>
 801543e:	782c      	ldrb	r4, [r5, #0]
 8015440:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015444:	2c58      	cmp	r4, #88	; 0x58
 8015446:	d14d      	bne.n	80154e4 <_strtol_l.constprop.0+0xec>
 8015448:	786c      	ldrb	r4, [r5, #1]
 801544a:	2310      	movs	r3, #16
 801544c:	3502      	adds	r5, #2
 801544e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8015452:	f108 38ff 	add.w	r8, r8, #4294967295
 8015456:	f04f 0e00 	mov.w	lr, #0
 801545a:	fbb8 f9f3 	udiv	r9, r8, r3
 801545e:	4676      	mov	r6, lr
 8015460:	fb03 8a19 	mls	sl, r3, r9, r8
 8015464:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015468:	f1bc 0f09 	cmp.w	ip, #9
 801546c:	d816      	bhi.n	801549c <_strtol_l.constprop.0+0xa4>
 801546e:	4664      	mov	r4, ip
 8015470:	42a3      	cmp	r3, r4
 8015472:	dd24      	ble.n	80154be <_strtol_l.constprop.0+0xc6>
 8015474:	f1be 3fff 	cmp.w	lr, #4294967295
 8015478:	d008      	beq.n	801548c <_strtol_l.constprop.0+0x94>
 801547a:	45b1      	cmp	r9, r6
 801547c:	d31c      	bcc.n	80154b8 <_strtol_l.constprop.0+0xc0>
 801547e:	d101      	bne.n	8015484 <_strtol_l.constprop.0+0x8c>
 8015480:	45a2      	cmp	sl, r4
 8015482:	db19      	blt.n	80154b8 <_strtol_l.constprop.0+0xc0>
 8015484:	fb06 4603 	mla	r6, r6, r3, r4
 8015488:	f04f 0e01 	mov.w	lr, #1
 801548c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015490:	e7e8      	b.n	8015464 <_strtol_l.constprop.0+0x6c>
 8015492:	2c2b      	cmp	r4, #43	; 0x2b
 8015494:	bf04      	itt	eq
 8015496:	782c      	ldrbeq	r4, [r5, #0]
 8015498:	1cb5      	addeq	r5, r6, #2
 801549a:	e7ca      	b.n	8015432 <_strtol_l.constprop.0+0x3a>
 801549c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80154a0:	f1bc 0f19 	cmp.w	ip, #25
 80154a4:	d801      	bhi.n	80154aa <_strtol_l.constprop.0+0xb2>
 80154a6:	3c37      	subs	r4, #55	; 0x37
 80154a8:	e7e2      	b.n	8015470 <_strtol_l.constprop.0+0x78>
 80154aa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80154ae:	f1bc 0f19 	cmp.w	ip, #25
 80154b2:	d804      	bhi.n	80154be <_strtol_l.constprop.0+0xc6>
 80154b4:	3c57      	subs	r4, #87	; 0x57
 80154b6:	e7db      	b.n	8015470 <_strtol_l.constprop.0+0x78>
 80154b8:	f04f 3eff 	mov.w	lr, #4294967295
 80154bc:	e7e6      	b.n	801548c <_strtol_l.constprop.0+0x94>
 80154be:	f1be 3fff 	cmp.w	lr, #4294967295
 80154c2:	d105      	bne.n	80154d0 <_strtol_l.constprop.0+0xd8>
 80154c4:	2322      	movs	r3, #34	; 0x22
 80154c6:	6003      	str	r3, [r0, #0]
 80154c8:	4646      	mov	r6, r8
 80154ca:	b942      	cbnz	r2, 80154de <_strtol_l.constprop.0+0xe6>
 80154cc:	4630      	mov	r0, r6
 80154ce:	e79e      	b.n	801540e <_strtol_l.constprop.0+0x16>
 80154d0:	b107      	cbz	r7, 80154d4 <_strtol_l.constprop.0+0xdc>
 80154d2:	4276      	negs	r6, r6
 80154d4:	2a00      	cmp	r2, #0
 80154d6:	d0f9      	beq.n	80154cc <_strtol_l.constprop.0+0xd4>
 80154d8:	f1be 0f00 	cmp.w	lr, #0
 80154dc:	d000      	beq.n	80154e0 <_strtol_l.constprop.0+0xe8>
 80154de:	1e69      	subs	r1, r5, #1
 80154e0:	6011      	str	r1, [r2, #0]
 80154e2:	e7f3      	b.n	80154cc <_strtol_l.constprop.0+0xd4>
 80154e4:	2430      	movs	r4, #48	; 0x30
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d1b1      	bne.n	801544e <_strtol_l.constprop.0+0x56>
 80154ea:	2308      	movs	r3, #8
 80154ec:	e7af      	b.n	801544e <_strtol_l.constprop.0+0x56>
 80154ee:	2c30      	cmp	r4, #48	; 0x30
 80154f0:	d0a5      	beq.n	801543e <_strtol_l.constprop.0+0x46>
 80154f2:	230a      	movs	r3, #10
 80154f4:	e7ab      	b.n	801544e <_strtol_l.constprop.0+0x56>
 80154f6:	bf00      	nop
 80154f8:	0801c9f1 	.word	0x0801c9f1

080154fc <_strtol_r>:
 80154fc:	f7ff bf7c 	b.w	80153f8 <_strtol_l.constprop.0>

08015500 <strtol>:
 8015500:	4613      	mov	r3, r2
 8015502:	460a      	mov	r2, r1
 8015504:	4601      	mov	r1, r0
 8015506:	4802      	ldr	r0, [pc, #8]	; (8015510 <strtol+0x10>)
 8015508:	6800      	ldr	r0, [r0, #0]
 801550a:	f7ff bf75 	b.w	80153f8 <_strtol_l.constprop.0>
 801550e:	bf00      	nop
 8015510:	200002f4 	.word	0x200002f4

08015514 <__cvt>:
 8015514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015518:	ec55 4b10 	vmov	r4, r5, d0
 801551c:	2d00      	cmp	r5, #0
 801551e:	460e      	mov	r6, r1
 8015520:	4619      	mov	r1, r3
 8015522:	462b      	mov	r3, r5
 8015524:	bfbb      	ittet	lt
 8015526:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801552a:	461d      	movlt	r5, r3
 801552c:	2300      	movge	r3, #0
 801552e:	232d      	movlt	r3, #45	; 0x2d
 8015530:	700b      	strb	r3, [r1, #0]
 8015532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015534:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015538:	4691      	mov	r9, r2
 801553a:	f023 0820 	bic.w	r8, r3, #32
 801553e:	bfbc      	itt	lt
 8015540:	4622      	movlt	r2, r4
 8015542:	4614      	movlt	r4, r2
 8015544:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015548:	d005      	beq.n	8015556 <__cvt+0x42>
 801554a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801554e:	d100      	bne.n	8015552 <__cvt+0x3e>
 8015550:	3601      	adds	r6, #1
 8015552:	2102      	movs	r1, #2
 8015554:	e000      	b.n	8015558 <__cvt+0x44>
 8015556:	2103      	movs	r1, #3
 8015558:	ab03      	add	r3, sp, #12
 801555a:	9301      	str	r3, [sp, #4]
 801555c:	ab02      	add	r3, sp, #8
 801555e:	9300      	str	r3, [sp, #0]
 8015560:	ec45 4b10 	vmov	d0, r4, r5
 8015564:	4653      	mov	r3, sl
 8015566:	4632      	mov	r2, r6
 8015568:	f001 f982 	bl	8016870 <_dtoa_r>
 801556c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015570:	4607      	mov	r7, r0
 8015572:	d102      	bne.n	801557a <__cvt+0x66>
 8015574:	f019 0f01 	tst.w	r9, #1
 8015578:	d022      	beq.n	80155c0 <__cvt+0xac>
 801557a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801557e:	eb07 0906 	add.w	r9, r7, r6
 8015582:	d110      	bne.n	80155a6 <__cvt+0x92>
 8015584:	783b      	ldrb	r3, [r7, #0]
 8015586:	2b30      	cmp	r3, #48	; 0x30
 8015588:	d10a      	bne.n	80155a0 <__cvt+0x8c>
 801558a:	2200      	movs	r2, #0
 801558c:	2300      	movs	r3, #0
 801558e:	4620      	mov	r0, r4
 8015590:	4629      	mov	r1, r5
 8015592:	f7eb fa99 	bl	8000ac8 <__aeabi_dcmpeq>
 8015596:	b918      	cbnz	r0, 80155a0 <__cvt+0x8c>
 8015598:	f1c6 0601 	rsb	r6, r6, #1
 801559c:	f8ca 6000 	str.w	r6, [sl]
 80155a0:	f8da 3000 	ldr.w	r3, [sl]
 80155a4:	4499      	add	r9, r3
 80155a6:	2200      	movs	r2, #0
 80155a8:	2300      	movs	r3, #0
 80155aa:	4620      	mov	r0, r4
 80155ac:	4629      	mov	r1, r5
 80155ae:	f7eb fa8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80155b2:	b108      	cbz	r0, 80155b8 <__cvt+0xa4>
 80155b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80155b8:	2230      	movs	r2, #48	; 0x30
 80155ba:	9b03      	ldr	r3, [sp, #12]
 80155bc:	454b      	cmp	r3, r9
 80155be:	d307      	bcc.n	80155d0 <__cvt+0xbc>
 80155c0:	9b03      	ldr	r3, [sp, #12]
 80155c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80155c4:	1bdb      	subs	r3, r3, r7
 80155c6:	4638      	mov	r0, r7
 80155c8:	6013      	str	r3, [r2, #0]
 80155ca:	b004      	add	sp, #16
 80155cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155d0:	1c59      	adds	r1, r3, #1
 80155d2:	9103      	str	r1, [sp, #12]
 80155d4:	701a      	strb	r2, [r3, #0]
 80155d6:	e7f0      	b.n	80155ba <__cvt+0xa6>

080155d8 <__exponent>:
 80155d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80155da:	4603      	mov	r3, r0
 80155dc:	2900      	cmp	r1, #0
 80155de:	bfb8      	it	lt
 80155e0:	4249      	neglt	r1, r1
 80155e2:	f803 2b02 	strb.w	r2, [r3], #2
 80155e6:	bfb4      	ite	lt
 80155e8:	222d      	movlt	r2, #45	; 0x2d
 80155ea:	222b      	movge	r2, #43	; 0x2b
 80155ec:	2909      	cmp	r1, #9
 80155ee:	7042      	strb	r2, [r0, #1]
 80155f0:	dd2a      	ble.n	8015648 <__exponent+0x70>
 80155f2:	f10d 0207 	add.w	r2, sp, #7
 80155f6:	4617      	mov	r7, r2
 80155f8:	260a      	movs	r6, #10
 80155fa:	4694      	mov	ip, r2
 80155fc:	fb91 f5f6 	sdiv	r5, r1, r6
 8015600:	fb06 1415 	mls	r4, r6, r5, r1
 8015604:	3430      	adds	r4, #48	; 0x30
 8015606:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801560a:	460c      	mov	r4, r1
 801560c:	2c63      	cmp	r4, #99	; 0x63
 801560e:	f102 32ff 	add.w	r2, r2, #4294967295
 8015612:	4629      	mov	r1, r5
 8015614:	dcf1      	bgt.n	80155fa <__exponent+0x22>
 8015616:	3130      	adds	r1, #48	; 0x30
 8015618:	f1ac 0402 	sub.w	r4, ip, #2
 801561c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015620:	1c41      	adds	r1, r0, #1
 8015622:	4622      	mov	r2, r4
 8015624:	42ba      	cmp	r2, r7
 8015626:	d30a      	bcc.n	801563e <__exponent+0x66>
 8015628:	f10d 0209 	add.w	r2, sp, #9
 801562c:	eba2 020c 	sub.w	r2, r2, ip
 8015630:	42bc      	cmp	r4, r7
 8015632:	bf88      	it	hi
 8015634:	2200      	movhi	r2, #0
 8015636:	4413      	add	r3, r2
 8015638:	1a18      	subs	r0, r3, r0
 801563a:	b003      	add	sp, #12
 801563c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801563e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8015642:	f801 5f01 	strb.w	r5, [r1, #1]!
 8015646:	e7ed      	b.n	8015624 <__exponent+0x4c>
 8015648:	2330      	movs	r3, #48	; 0x30
 801564a:	3130      	adds	r1, #48	; 0x30
 801564c:	7083      	strb	r3, [r0, #2]
 801564e:	70c1      	strb	r1, [r0, #3]
 8015650:	1d03      	adds	r3, r0, #4
 8015652:	e7f1      	b.n	8015638 <__exponent+0x60>

08015654 <_printf_float>:
 8015654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015658:	ed2d 8b02 	vpush	{d8}
 801565c:	b08d      	sub	sp, #52	; 0x34
 801565e:	460c      	mov	r4, r1
 8015660:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015664:	4616      	mov	r6, r2
 8015666:	461f      	mov	r7, r3
 8015668:	4605      	mov	r5, r0
 801566a:	f000 ffaf 	bl	80165cc <_localeconv_r>
 801566e:	f8d0 a000 	ldr.w	sl, [r0]
 8015672:	4650      	mov	r0, sl
 8015674:	f7ea fdfc 	bl	8000270 <strlen>
 8015678:	2300      	movs	r3, #0
 801567a:	930a      	str	r3, [sp, #40]	; 0x28
 801567c:	6823      	ldr	r3, [r4, #0]
 801567e:	9305      	str	r3, [sp, #20]
 8015680:	f8d8 3000 	ldr.w	r3, [r8]
 8015684:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015688:	3307      	adds	r3, #7
 801568a:	f023 0307 	bic.w	r3, r3, #7
 801568e:	f103 0208 	add.w	r2, r3, #8
 8015692:	f8c8 2000 	str.w	r2, [r8]
 8015696:	e9d3 8900 	ldrd	r8, r9, [r3]
 801569a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801569e:	9307      	str	r3, [sp, #28]
 80156a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80156a4:	ee08 0a10 	vmov	s16, r0
 80156a8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80156ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80156b0:	4b9e      	ldr	r3, [pc, #632]	; (801592c <_printf_float+0x2d8>)
 80156b2:	f04f 32ff 	mov.w	r2, #4294967295
 80156b6:	f7eb fa39 	bl	8000b2c <__aeabi_dcmpun>
 80156ba:	bb88      	cbnz	r0, 8015720 <_printf_float+0xcc>
 80156bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80156c0:	4b9a      	ldr	r3, [pc, #616]	; (801592c <_printf_float+0x2d8>)
 80156c2:	f04f 32ff 	mov.w	r2, #4294967295
 80156c6:	f7eb fa13 	bl	8000af0 <__aeabi_dcmple>
 80156ca:	bb48      	cbnz	r0, 8015720 <_printf_float+0xcc>
 80156cc:	2200      	movs	r2, #0
 80156ce:	2300      	movs	r3, #0
 80156d0:	4640      	mov	r0, r8
 80156d2:	4649      	mov	r1, r9
 80156d4:	f7eb fa02 	bl	8000adc <__aeabi_dcmplt>
 80156d8:	b110      	cbz	r0, 80156e0 <_printf_float+0x8c>
 80156da:	232d      	movs	r3, #45	; 0x2d
 80156dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80156e0:	4a93      	ldr	r2, [pc, #588]	; (8015930 <_printf_float+0x2dc>)
 80156e2:	4b94      	ldr	r3, [pc, #592]	; (8015934 <_printf_float+0x2e0>)
 80156e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80156e8:	bf94      	ite	ls
 80156ea:	4690      	movls	r8, r2
 80156ec:	4698      	movhi	r8, r3
 80156ee:	2303      	movs	r3, #3
 80156f0:	6123      	str	r3, [r4, #16]
 80156f2:	9b05      	ldr	r3, [sp, #20]
 80156f4:	f023 0304 	bic.w	r3, r3, #4
 80156f8:	6023      	str	r3, [r4, #0]
 80156fa:	f04f 0900 	mov.w	r9, #0
 80156fe:	9700      	str	r7, [sp, #0]
 8015700:	4633      	mov	r3, r6
 8015702:	aa0b      	add	r2, sp, #44	; 0x2c
 8015704:	4621      	mov	r1, r4
 8015706:	4628      	mov	r0, r5
 8015708:	f000 f9da 	bl	8015ac0 <_printf_common>
 801570c:	3001      	adds	r0, #1
 801570e:	f040 8090 	bne.w	8015832 <_printf_float+0x1de>
 8015712:	f04f 30ff 	mov.w	r0, #4294967295
 8015716:	b00d      	add	sp, #52	; 0x34
 8015718:	ecbd 8b02 	vpop	{d8}
 801571c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015720:	4642      	mov	r2, r8
 8015722:	464b      	mov	r3, r9
 8015724:	4640      	mov	r0, r8
 8015726:	4649      	mov	r1, r9
 8015728:	f7eb fa00 	bl	8000b2c <__aeabi_dcmpun>
 801572c:	b140      	cbz	r0, 8015740 <_printf_float+0xec>
 801572e:	464b      	mov	r3, r9
 8015730:	2b00      	cmp	r3, #0
 8015732:	bfbc      	itt	lt
 8015734:	232d      	movlt	r3, #45	; 0x2d
 8015736:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801573a:	4a7f      	ldr	r2, [pc, #508]	; (8015938 <_printf_float+0x2e4>)
 801573c:	4b7f      	ldr	r3, [pc, #508]	; (801593c <_printf_float+0x2e8>)
 801573e:	e7d1      	b.n	80156e4 <_printf_float+0x90>
 8015740:	6863      	ldr	r3, [r4, #4]
 8015742:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015746:	9206      	str	r2, [sp, #24]
 8015748:	1c5a      	adds	r2, r3, #1
 801574a:	d13f      	bne.n	80157cc <_printf_float+0x178>
 801574c:	2306      	movs	r3, #6
 801574e:	6063      	str	r3, [r4, #4]
 8015750:	9b05      	ldr	r3, [sp, #20]
 8015752:	6861      	ldr	r1, [r4, #4]
 8015754:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015758:	2300      	movs	r3, #0
 801575a:	9303      	str	r3, [sp, #12]
 801575c:	ab0a      	add	r3, sp, #40	; 0x28
 801575e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8015762:	ab09      	add	r3, sp, #36	; 0x24
 8015764:	ec49 8b10 	vmov	d0, r8, r9
 8015768:	9300      	str	r3, [sp, #0]
 801576a:	6022      	str	r2, [r4, #0]
 801576c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015770:	4628      	mov	r0, r5
 8015772:	f7ff fecf 	bl	8015514 <__cvt>
 8015776:	9b06      	ldr	r3, [sp, #24]
 8015778:	9909      	ldr	r1, [sp, #36]	; 0x24
 801577a:	2b47      	cmp	r3, #71	; 0x47
 801577c:	4680      	mov	r8, r0
 801577e:	d108      	bne.n	8015792 <_printf_float+0x13e>
 8015780:	1cc8      	adds	r0, r1, #3
 8015782:	db02      	blt.n	801578a <_printf_float+0x136>
 8015784:	6863      	ldr	r3, [r4, #4]
 8015786:	4299      	cmp	r1, r3
 8015788:	dd41      	ble.n	801580e <_printf_float+0x1ba>
 801578a:	f1ab 0302 	sub.w	r3, fp, #2
 801578e:	fa5f fb83 	uxtb.w	fp, r3
 8015792:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015796:	d820      	bhi.n	80157da <_printf_float+0x186>
 8015798:	3901      	subs	r1, #1
 801579a:	465a      	mov	r2, fp
 801579c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80157a0:	9109      	str	r1, [sp, #36]	; 0x24
 80157a2:	f7ff ff19 	bl	80155d8 <__exponent>
 80157a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80157a8:	1813      	adds	r3, r2, r0
 80157aa:	2a01      	cmp	r2, #1
 80157ac:	4681      	mov	r9, r0
 80157ae:	6123      	str	r3, [r4, #16]
 80157b0:	dc02      	bgt.n	80157b8 <_printf_float+0x164>
 80157b2:	6822      	ldr	r2, [r4, #0]
 80157b4:	07d2      	lsls	r2, r2, #31
 80157b6:	d501      	bpl.n	80157bc <_printf_float+0x168>
 80157b8:	3301      	adds	r3, #1
 80157ba:	6123      	str	r3, [r4, #16]
 80157bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d09c      	beq.n	80156fe <_printf_float+0xaa>
 80157c4:	232d      	movs	r3, #45	; 0x2d
 80157c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80157ca:	e798      	b.n	80156fe <_printf_float+0xaa>
 80157cc:	9a06      	ldr	r2, [sp, #24]
 80157ce:	2a47      	cmp	r2, #71	; 0x47
 80157d0:	d1be      	bne.n	8015750 <_printf_float+0xfc>
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d1bc      	bne.n	8015750 <_printf_float+0xfc>
 80157d6:	2301      	movs	r3, #1
 80157d8:	e7b9      	b.n	801574e <_printf_float+0xfa>
 80157da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80157de:	d118      	bne.n	8015812 <_printf_float+0x1be>
 80157e0:	2900      	cmp	r1, #0
 80157e2:	6863      	ldr	r3, [r4, #4]
 80157e4:	dd0b      	ble.n	80157fe <_printf_float+0x1aa>
 80157e6:	6121      	str	r1, [r4, #16]
 80157e8:	b913      	cbnz	r3, 80157f0 <_printf_float+0x19c>
 80157ea:	6822      	ldr	r2, [r4, #0]
 80157ec:	07d0      	lsls	r0, r2, #31
 80157ee:	d502      	bpl.n	80157f6 <_printf_float+0x1a2>
 80157f0:	3301      	adds	r3, #1
 80157f2:	440b      	add	r3, r1
 80157f4:	6123      	str	r3, [r4, #16]
 80157f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80157f8:	f04f 0900 	mov.w	r9, #0
 80157fc:	e7de      	b.n	80157bc <_printf_float+0x168>
 80157fe:	b913      	cbnz	r3, 8015806 <_printf_float+0x1b2>
 8015800:	6822      	ldr	r2, [r4, #0]
 8015802:	07d2      	lsls	r2, r2, #31
 8015804:	d501      	bpl.n	801580a <_printf_float+0x1b6>
 8015806:	3302      	adds	r3, #2
 8015808:	e7f4      	b.n	80157f4 <_printf_float+0x1a0>
 801580a:	2301      	movs	r3, #1
 801580c:	e7f2      	b.n	80157f4 <_printf_float+0x1a0>
 801580e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015814:	4299      	cmp	r1, r3
 8015816:	db05      	blt.n	8015824 <_printf_float+0x1d0>
 8015818:	6823      	ldr	r3, [r4, #0]
 801581a:	6121      	str	r1, [r4, #16]
 801581c:	07d8      	lsls	r0, r3, #31
 801581e:	d5ea      	bpl.n	80157f6 <_printf_float+0x1a2>
 8015820:	1c4b      	adds	r3, r1, #1
 8015822:	e7e7      	b.n	80157f4 <_printf_float+0x1a0>
 8015824:	2900      	cmp	r1, #0
 8015826:	bfd4      	ite	le
 8015828:	f1c1 0202 	rsble	r2, r1, #2
 801582c:	2201      	movgt	r2, #1
 801582e:	4413      	add	r3, r2
 8015830:	e7e0      	b.n	80157f4 <_printf_float+0x1a0>
 8015832:	6823      	ldr	r3, [r4, #0]
 8015834:	055a      	lsls	r2, r3, #21
 8015836:	d407      	bmi.n	8015848 <_printf_float+0x1f4>
 8015838:	6923      	ldr	r3, [r4, #16]
 801583a:	4642      	mov	r2, r8
 801583c:	4631      	mov	r1, r6
 801583e:	4628      	mov	r0, r5
 8015840:	47b8      	blx	r7
 8015842:	3001      	adds	r0, #1
 8015844:	d12c      	bne.n	80158a0 <_printf_float+0x24c>
 8015846:	e764      	b.n	8015712 <_printf_float+0xbe>
 8015848:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801584c:	f240 80e0 	bls.w	8015a10 <_printf_float+0x3bc>
 8015850:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015854:	2200      	movs	r2, #0
 8015856:	2300      	movs	r3, #0
 8015858:	f7eb f936 	bl	8000ac8 <__aeabi_dcmpeq>
 801585c:	2800      	cmp	r0, #0
 801585e:	d034      	beq.n	80158ca <_printf_float+0x276>
 8015860:	4a37      	ldr	r2, [pc, #220]	; (8015940 <_printf_float+0x2ec>)
 8015862:	2301      	movs	r3, #1
 8015864:	4631      	mov	r1, r6
 8015866:	4628      	mov	r0, r5
 8015868:	47b8      	blx	r7
 801586a:	3001      	adds	r0, #1
 801586c:	f43f af51 	beq.w	8015712 <_printf_float+0xbe>
 8015870:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015874:	429a      	cmp	r2, r3
 8015876:	db02      	blt.n	801587e <_printf_float+0x22a>
 8015878:	6823      	ldr	r3, [r4, #0]
 801587a:	07d8      	lsls	r0, r3, #31
 801587c:	d510      	bpl.n	80158a0 <_printf_float+0x24c>
 801587e:	ee18 3a10 	vmov	r3, s16
 8015882:	4652      	mov	r2, sl
 8015884:	4631      	mov	r1, r6
 8015886:	4628      	mov	r0, r5
 8015888:	47b8      	blx	r7
 801588a:	3001      	adds	r0, #1
 801588c:	f43f af41 	beq.w	8015712 <_printf_float+0xbe>
 8015890:	f04f 0800 	mov.w	r8, #0
 8015894:	f104 091a 	add.w	r9, r4, #26
 8015898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801589a:	3b01      	subs	r3, #1
 801589c:	4543      	cmp	r3, r8
 801589e:	dc09      	bgt.n	80158b4 <_printf_float+0x260>
 80158a0:	6823      	ldr	r3, [r4, #0]
 80158a2:	079b      	lsls	r3, r3, #30
 80158a4:	f100 8107 	bmi.w	8015ab6 <_printf_float+0x462>
 80158a8:	68e0      	ldr	r0, [r4, #12]
 80158aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158ac:	4298      	cmp	r0, r3
 80158ae:	bfb8      	it	lt
 80158b0:	4618      	movlt	r0, r3
 80158b2:	e730      	b.n	8015716 <_printf_float+0xc2>
 80158b4:	2301      	movs	r3, #1
 80158b6:	464a      	mov	r2, r9
 80158b8:	4631      	mov	r1, r6
 80158ba:	4628      	mov	r0, r5
 80158bc:	47b8      	blx	r7
 80158be:	3001      	adds	r0, #1
 80158c0:	f43f af27 	beq.w	8015712 <_printf_float+0xbe>
 80158c4:	f108 0801 	add.w	r8, r8, #1
 80158c8:	e7e6      	b.n	8015898 <_printf_float+0x244>
 80158ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	dc39      	bgt.n	8015944 <_printf_float+0x2f0>
 80158d0:	4a1b      	ldr	r2, [pc, #108]	; (8015940 <_printf_float+0x2ec>)
 80158d2:	2301      	movs	r3, #1
 80158d4:	4631      	mov	r1, r6
 80158d6:	4628      	mov	r0, r5
 80158d8:	47b8      	blx	r7
 80158da:	3001      	adds	r0, #1
 80158dc:	f43f af19 	beq.w	8015712 <_printf_float+0xbe>
 80158e0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80158e4:	4313      	orrs	r3, r2
 80158e6:	d102      	bne.n	80158ee <_printf_float+0x29a>
 80158e8:	6823      	ldr	r3, [r4, #0]
 80158ea:	07d9      	lsls	r1, r3, #31
 80158ec:	d5d8      	bpl.n	80158a0 <_printf_float+0x24c>
 80158ee:	ee18 3a10 	vmov	r3, s16
 80158f2:	4652      	mov	r2, sl
 80158f4:	4631      	mov	r1, r6
 80158f6:	4628      	mov	r0, r5
 80158f8:	47b8      	blx	r7
 80158fa:	3001      	adds	r0, #1
 80158fc:	f43f af09 	beq.w	8015712 <_printf_float+0xbe>
 8015900:	f04f 0900 	mov.w	r9, #0
 8015904:	f104 0a1a 	add.w	sl, r4, #26
 8015908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801590a:	425b      	negs	r3, r3
 801590c:	454b      	cmp	r3, r9
 801590e:	dc01      	bgt.n	8015914 <_printf_float+0x2c0>
 8015910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015912:	e792      	b.n	801583a <_printf_float+0x1e6>
 8015914:	2301      	movs	r3, #1
 8015916:	4652      	mov	r2, sl
 8015918:	4631      	mov	r1, r6
 801591a:	4628      	mov	r0, r5
 801591c:	47b8      	blx	r7
 801591e:	3001      	adds	r0, #1
 8015920:	f43f aef7 	beq.w	8015712 <_printf_float+0xbe>
 8015924:	f109 0901 	add.w	r9, r9, #1
 8015928:	e7ee      	b.n	8015908 <_printf_float+0x2b4>
 801592a:	bf00      	nop
 801592c:	7fefffff 	.word	0x7fefffff
 8015930:	0801caf1 	.word	0x0801caf1
 8015934:	0801caf5 	.word	0x0801caf5
 8015938:	0801caf9 	.word	0x0801caf9
 801593c:	0801cafd 	.word	0x0801cafd
 8015940:	0801cb01 	.word	0x0801cb01
 8015944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015946:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015948:	429a      	cmp	r2, r3
 801594a:	bfa8      	it	ge
 801594c:	461a      	movge	r2, r3
 801594e:	2a00      	cmp	r2, #0
 8015950:	4691      	mov	r9, r2
 8015952:	dc37      	bgt.n	80159c4 <_printf_float+0x370>
 8015954:	f04f 0b00 	mov.w	fp, #0
 8015958:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801595c:	f104 021a 	add.w	r2, r4, #26
 8015960:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015962:	9305      	str	r3, [sp, #20]
 8015964:	eba3 0309 	sub.w	r3, r3, r9
 8015968:	455b      	cmp	r3, fp
 801596a:	dc33      	bgt.n	80159d4 <_printf_float+0x380>
 801596c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015970:	429a      	cmp	r2, r3
 8015972:	db3b      	blt.n	80159ec <_printf_float+0x398>
 8015974:	6823      	ldr	r3, [r4, #0]
 8015976:	07da      	lsls	r2, r3, #31
 8015978:	d438      	bmi.n	80159ec <_printf_float+0x398>
 801597a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801597e:	eba2 0903 	sub.w	r9, r2, r3
 8015982:	9b05      	ldr	r3, [sp, #20]
 8015984:	1ad2      	subs	r2, r2, r3
 8015986:	4591      	cmp	r9, r2
 8015988:	bfa8      	it	ge
 801598a:	4691      	movge	r9, r2
 801598c:	f1b9 0f00 	cmp.w	r9, #0
 8015990:	dc35      	bgt.n	80159fe <_printf_float+0x3aa>
 8015992:	f04f 0800 	mov.w	r8, #0
 8015996:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801599a:	f104 0a1a 	add.w	sl, r4, #26
 801599e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80159a2:	1a9b      	subs	r3, r3, r2
 80159a4:	eba3 0309 	sub.w	r3, r3, r9
 80159a8:	4543      	cmp	r3, r8
 80159aa:	f77f af79 	ble.w	80158a0 <_printf_float+0x24c>
 80159ae:	2301      	movs	r3, #1
 80159b0:	4652      	mov	r2, sl
 80159b2:	4631      	mov	r1, r6
 80159b4:	4628      	mov	r0, r5
 80159b6:	47b8      	blx	r7
 80159b8:	3001      	adds	r0, #1
 80159ba:	f43f aeaa 	beq.w	8015712 <_printf_float+0xbe>
 80159be:	f108 0801 	add.w	r8, r8, #1
 80159c2:	e7ec      	b.n	801599e <_printf_float+0x34a>
 80159c4:	4613      	mov	r3, r2
 80159c6:	4631      	mov	r1, r6
 80159c8:	4642      	mov	r2, r8
 80159ca:	4628      	mov	r0, r5
 80159cc:	47b8      	blx	r7
 80159ce:	3001      	adds	r0, #1
 80159d0:	d1c0      	bne.n	8015954 <_printf_float+0x300>
 80159d2:	e69e      	b.n	8015712 <_printf_float+0xbe>
 80159d4:	2301      	movs	r3, #1
 80159d6:	4631      	mov	r1, r6
 80159d8:	4628      	mov	r0, r5
 80159da:	9205      	str	r2, [sp, #20]
 80159dc:	47b8      	blx	r7
 80159de:	3001      	adds	r0, #1
 80159e0:	f43f ae97 	beq.w	8015712 <_printf_float+0xbe>
 80159e4:	9a05      	ldr	r2, [sp, #20]
 80159e6:	f10b 0b01 	add.w	fp, fp, #1
 80159ea:	e7b9      	b.n	8015960 <_printf_float+0x30c>
 80159ec:	ee18 3a10 	vmov	r3, s16
 80159f0:	4652      	mov	r2, sl
 80159f2:	4631      	mov	r1, r6
 80159f4:	4628      	mov	r0, r5
 80159f6:	47b8      	blx	r7
 80159f8:	3001      	adds	r0, #1
 80159fa:	d1be      	bne.n	801597a <_printf_float+0x326>
 80159fc:	e689      	b.n	8015712 <_printf_float+0xbe>
 80159fe:	9a05      	ldr	r2, [sp, #20]
 8015a00:	464b      	mov	r3, r9
 8015a02:	4442      	add	r2, r8
 8015a04:	4631      	mov	r1, r6
 8015a06:	4628      	mov	r0, r5
 8015a08:	47b8      	blx	r7
 8015a0a:	3001      	adds	r0, #1
 8015a0c:	d1c1      	bne.n	8015992 <_printf_float+0x33e>
 8015a0e:	e680      	b.n	8015712 <_printf_float+0xbe>
 8015a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a12:	2a01      	cmp	r2, #1
 8015a14:	dc01      	bgt.n	8015a1a <_printf_float+0x3c6>
 8015a16:	07db      	lsls	r3, r3, #31
 8015a18:	d53a      	bpl.n	8015a90 <_printf_float+0x43c>
 8015a1a:	2301      	movs	r3, #1
 8015a1c:	4642      	mov	r2, r8
 8015a1e:	4631      	mov	r1, r6
 8015a20:	4628      	mov	r0, r5
 8015a22:	47b8      	blx	r7
 8015a24:	3001      	adds	r0, #1
 8015a26:	f43f ae74 	beq.w	8015712 <_printf_float+0xbe>
 8015a2a:	ee18 3a10 	vmov	r3, s16
 8015a2e:	4652      	mov	r2, sl
 8015a30:	4631      	mov	r1, r6
 8015a32:	4628      	mov	r0, r5
 8015a34:	47b8      	blx	r7
 8015a36:	3001      	adds	r0, #1
 8015a38:	f43f ae6b 	beq.w	8015712 <_printf_float+0xbe>
 8015a3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015a40:	2200      	movs	r2, #0
 8015a42:	2300      	movs	r3, #0
 8015a44:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8015a48:	f7eb f83e 	bl	8000ac8 <__aeabi_dcmpeq>
 8015a4c:	b9d8      	cbnz	r0, 8015a86 <_printf_float+0x432>
 8015a4e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015a52:	f108 0201 	add.w	r2, r8, #1
 8015a56:	4631      	mov	r1, r6
 8015a58:	4628      	mov	r0, r5
 8015a5a:	47b8      	blx	r7
 8015a5c:	3001      	adds	r0, #1
 8015a5e:	d10e      	bne.n	8015a7e <_printf_float+0x42a>
 8015a60:	e657      	b.n	8015712 <_printf_float+0xbe>
 8015a62:	2301      	movs	r3, #1
 8015a64:	4652      	mov	r2, sl
 8015a66:	4631      	mov	r1, r6
 8015a68:	4628      	mov	r0, r5
 8015a6a:	47b8      	blx	r7
 8015a6c:	3001      	adds	r0, #1
 8015a6e:	f43f ae50 	beq.w	8015712 <_printf_float+0xbe>
 8015a72:	f108 0801 	add.w	r8, r8, #1
 8015a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a78:	3b01      	subs	r3, #1
 8015a7a:	4543      	cmp	r3, r8
 8015a7c:	dcf1      	bgt.n	8015a62 <_printf_float+0x40e>
 8015a7e:	464b      	mov	r3, r9
 8015a80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015a84:	e6da      	b.n	801583c <_printf_float+0x1e8>
 8015a86:	f04f 0800 	mov.w	r8, #0
 8015a8a:	f104 0a1a 	add.w	sl, r4, #26
 8015a8e:	e7f2      	b.n	8015a76 <_printf_float+0x422>
 8015a90:	2301      	movs	r3, #1
 8015a92:	4642      	mov	r2, r8
 8015a94:	e7df      	b.n	8015a56 <_printf_float+0x402>
 8015a96:	2301      	movs	r3, #1
 8015a98:	464a      	mov	r2, r9
 8015a9a:	4631      	mov	r1, r6
 8015a9c:	4628      	mov	r0, r5
 8015a9e:	47b8      	blx	r7
 8015aa0:	3001      	adds	r0, #1
 8015aa2:	f43f ae36 	beq.w	8015712 <_printf_float+0xbe>
 8015aa6:	f108 0801 	add.w	r8, r8, #1
 8015aaa:	68e3      	ldr	r3, [r4, #12]
 8015aac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015aae:	1a5b      	subs	r3, r3, r1
 8015ab0:	4543      	cmp	r3, r8
 8015ab2:	dcf0      	bgt.n	8015a96 <_printf_float+0x442>
 8015ab4:	e6f8      	b.n	80158a8 <_printf_float+0x254>
 8015ab6:	f04f 0800 	mov.w	r8, #0
 8015aba:	f104 0919 	add.w	r9, r4, #25
 8015abe:	e7f4      	b.n	8015aaa <_printf_float+0x456>

08015ac0 <_printf_common>:
 8015ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ac4:	4616      	mov	r6, r2
 8015ac6:	4699      	mov	r9, r3
 8015ac8:	688a      	ldr	r2, [r1, #8]
 8015aca:	690b      	ldr	r3, [r1, #16]
 8015acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015ad0:	4293      	cmp	r3, r2
 8015ad2:	bfb8      	it	lt
 8015ad4:	4613      	movlt	r3, r2
 8015ad6:	6033      	str	r3, [r6, #0]
 8015ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015adc:	4607      	mov	r7, r0
 8015ade:	460c      	mov	r4, r1
 8015ae0:	b10a      	cbz	r2, 8015ae6 <_printf_common+0x26>
 8015ae2:	3301      	adds	r3, #1
 8015ae4:	6033      	str	r3, [r6, #0]
 8015ae6:	6823      	ldr	r3, [r4, #0]
 8015ae8:	0699      	lsls	r1, r3, #26
 8015aea:	bf42      	ittt	mi
 8015aec:	6833      	ldrmi	r3, [r6, #0]
 8015aee:	3302      	addmi	r3, #2
 8015af0:	6033      	strmi	r3, [r6, #0]
 8015af2:	6825      	ldr	r5, [r4, #0]
 8015af4:	f015 0506 	ands.w	r5, r5, #6
 8015af8:	d106      	bne.n	8015b08 <_printf_common+0x48>
 8015afa:	f104 0a19 	add.w	sl, r4, #25
 8015afe:	68e3      	ldr	r3, [r4, #12]
 8015b00:	6832      	ldr	r2, [r6, #0]
 8015b02:	1a9b      	subs	r3, r3, r2
 8015b04:	42ab      	cmp	r3, r5
 8015b06:	dc26      	bgt.n	8015b56 <_printf_common+0x96>
 8015b08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015b0c:	1e13      	subs	r3, r2, #0
 8015b0e:	6822      	ldr	r2, [r4, #0]
 8015b10:	bf18      	it	ne
 8015b12:	2301      	movne	r3, #1
 8015b14:	0692      	lsls	r2, r2, #26
 8015b16:	d42b      	bmi.n	8015b70 <_printf_common+0xb0>
 8015b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015b1c:	4649      	mov	r1, r9
 8015b1e:	4638      	mov	r0, r7
 8015b20:	47c0      	blx	r8
 8015b22:	3001      	adds	r0, #1
 8015b24:	d01e      	beq.n	8015b64 <_printf_common+0xa4>
 8015b26:	6823      	ldr	r3, [r4, #0]
 8015b28:	6922      	ldr	r2, [r4, #16]
 8015b2a:	f003 0306 	and.w	r3, r3, #6
 8015b2e:	2b04      	cmp	r3, #4
 8015b30:	bf02      	ittt	eq
 8015b32:	68e5      	ldreq	r5, [r4, #12]
 8015b34:	6833      	ldreq	r3, [r6, #0]
 8015b36:	1aed      	subeq	r5, r5, r3
 8015b38:	68a3      	ldr	r3, [r4, #8]
 8015b3a:	bf0c      	ite	eq
 8015b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015b40:	2500      	movne	r5, #0
 8015b42:	4293      	cmp	r3, r2
 8015b44:	bfc4      	itt	gt
 8015b46:	1a9b      	subgt	r3, r3, r2
 8015b48:	18ed      	addgt	r5, r5, r3
 8015b4a:	2600      	movs	r6, #0
 8015b4c:	341a      	adds	r4, #26
 8015b4e:	42b5      	cmp	r5, r6
 8015b50:	d11a      	bne.n	8015b88 <_printf_common+0xc8>
 8015b52:	2000      	movs	r0, #0
 8015b54:	e008      	b.n	8015b68 <_printf_common+0xa8>
 8015b56:	2301      	movs	r3, #1
 8015b58:	4652      	mov	r2, sl
 8015b5a:	4649      	mov	r1, r9
 8015b5c:	4638      	mov	r0, r7
 8015b5e:	47c0      	blx	r8
 8015b60:	3001      	adds	r0, #1
 8015b62:	d103      	bne.n	8015b6c <_printf_common+0xac>
 8015b64:	f04f 30ff 	mov.w	r0, #4294967295
 8015b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b6c:	3501      	adds	r5, #1
 8015b6e:	e7c6      	b.n	8015afe <_printf_common+0x3e>
 8015b70:	18e1      	adds	r1, r4, r3
 8015b72:	1c5a      	adds	r2, r3, #1
 8015b74:	2030      	movs	r0, #48	; 0x30
 8015b76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015b7a:	4422      	add	r2, r4
 8015b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015b80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015b84:	3302      	adds	r3, #2
 8015b86:	e7c7      	b.n	8015b18 <_printf_common+0x58>
 8015b88:	2301      	movs	r3, #1
 8015b8a:	4622      	mov	r2, r4
 8015b8c:	4649      	mov	r1, r9
 8015b8e:	4638      	mov	r0, r7
 8015b90:	47c0      	blx	r8
 8015b92:	3001      	adds	r0, #1
 8015b94:	d0e6      	beq.n	8015b64 <_printf_common+0xa4>
 8015b96:	3601      	adds	r6, #1
 8015b98:	e7d9      	b.n	8015b4e <_printf_common+0x8e>
	...

08015b9c <_printf_i>:
 8015b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015ba0:	7e0f      	ldrb	r7, [r1, #24]
 8015ba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015ba4:	2f78      	cmp	r7, #120	; 0x78
 8015ba6:	4691      	mov	r9, r2
 8015ba8:	4680      	mov	r8, r0
 8015baa:	460c      	mov	r4, r1
 8015bac:	469a      	mov	sl, r3
 8015bae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015bb2:	d807      	bhi.n	8015bc4 <_printf_i+0x28>
 8015bb4:	2f62      	cmp	r7, #98	; 0x62
 8015bb6:	d80a      	bhi.n	8015bce <_printf_i+0x32>
 8015bb8:	2f00      	cmp	r7, #0
 8015bba:	f000 80d4 	beq.w	8015d66 <_printf_i+0x1ca>
 8015bbe:	2f58      	cmp	r7, #88	; 0x58
 8015bc0:	f000 80c0 	beq.w	8015d44 <_printf_i+0x1a8>
 8015bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015bcc:	e03a      	b.n	8015c44 <_printf_i+0xa8>
 8015bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015bd2:	2b15      	cmp	r3, #21
 8015bd4:	d8f6      	bhi.n	8015bc4 <_printf_i+0x28>
 8015bd6:	a101      	add	r1, pc, #4	; (adr r1, 8015bdc <_printf_i+0x40>)
 8015bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015bdc:	08015c35 	.word	0x08015c35
 8015be0:	08015c49 	.word	0x08015c49
 8015be4:	08015bc5 	.word	0x08015bc5
 8015be8:	08015bc5 	.word	0x08015bc5
 8015bec:	08015bc5 	.word	0x08015bc5
 8015bf0:	08015bc5 	.word	0x08015bc5
 8015bf4:	08015c49 	.word	0x08015c49
 8015bf8:	08015bc5 	.word	0x08015bc5
 8015bfc:	08015bc5 	.word	0x08015bc5
 8015c00:	08015bc5 	.word	0x08015bc5
 8015c04:	08015bc5 	.word	0x08015bc5
 8015c08:	08015d4d 	.word	0x08015d4d
 8015c0c:	08015c75 	.word	0x08015c75
 8015c10:	08015d07 	.word	0x08015d07
 8015c14:	08015bc5 	.word	0x08015bc5
 8015c18:	08015bc5 	.word	0x08015bc5
 8015c1c:	08015d6f 	.word	0x08015d6f
 8015c20:	08015bc5 	.word	0x08015bc5
 8015c24:	08015c75 	.word	0x08015c75
 8015c28:	08015bc5 	.word	0x08015bc5
 8015c2c:	08015bc5 	.word	0x08015bc5
 8015c30:	08015d0f 	.word	0x08015d0f
 8015c34:	682b      	ldr	r3, [r5, #0]
 8015c36:	1d1a      	adds	r2, r3, #4
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	602a      	str	r2, [r5, #0]
 8015c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015c44:	2301      	movs	r3, #1
 8015c46:	e09f      	b.n	8015d88 <_printf_i+0x1ec>
 8015c48:	6820      	ldr	r0, [r4, #0]
 8015c4a:	682b      	ldr	r3, [r5, #0]
 8015c4c:	0607      	lsls	r7, r0, #24
 8015c4e:	f103 0104 	add.w	r1, r3, #4
 8015c52:	6029      	str	r1, [r5, #0]
 8015c54:	d501      	bpl.n	8015c5a <_printf_i+0xbe>
 8015c56:	681e      	ldr	r6, [r3, #0]
 8015c58:	e003      	b.n	8015c62 <_printf_i+0xc6>
 8015c5a:	0646      	lsls	r6, r0, #25
 8015c5c:	d5fb      	bpl.n	8015c56 <_printf_i+0xba>
 8015c5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015c62:	2e00      	cmp	r6, #0
 8015c64:	da03      	bge.n	8015c6e <_printf_i+0xd2>
 8015c66:	232d      	movs	r3, #45	; 0x2d
 8015c68:	4276      	negs	r6, r6
 8015c6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c6e:	485a      	ldr	r0, [pc, #360]	; (8015dd8 <_printf_i+0x23c>)
 8015c70:	230a      	movs	r3, #10
 8015c72:	e012      	b.n	8015c9a <_printf_i+0xfe>
 8015c74:	682b      	ldr	r3, [r5, #0]
 8015c76:	6820      	ldr	r0, [r4, #0]
 8015c78:	1d19      	adds	r1, r3, #4
 8015c7a:	6029      	str	r1, [r5, #0]
 8015c7c:	0605      	lsls	r5, r0, #24
 8015c7e:	d501      	bpl.n	8015c84 <_printf_i+0xe8>
 8015c80:	681e      	ldr	r6, [r3, #0]
 8015c82:	e002      	b.n	8015c8a <_printf_i+0xee>
 8015c84:	0641      	lsls	r1, r0, #25
 8015c86:	d5fb      	bpl.n	8015c80 <_printf_i+0xe4>
 8015c88:	881e      	ldrh	r6, [r3, #0]
 8015c8a:	4853      	ldr	r0, [pc, #332]	; (8015dd8 <_printf_i+0x23c>)
 8015c8c:	2f6f      	cmp	r7, #111	; 0x6f
 8015c8e:	bf0c      	ite	eq
 8015c90:	2308      	moveq	r3, #8
 8015c92:	230a      	movne	r3, #10
 8015c94:	2100      	movs	r1, #0
 8015c96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015c9a:	6865      	ldr	r5, [r4, #4]
 8015c9c:	60a5      	str	r5, [r4, #8]
 8015c9e:	2d00      	cmp	r5, #0
 8015ca0:	bfa2      	ittt	ge
 8015ca2:	6821      	ldrge	r1, [r4, #0]
 8015ca4:	f021 0104 	bicge.w	r1, r1, #4
 8015ca8:	6021      	strge	r1, [r4, #0]
 8015caa:	b90e      	cbnz	r6, 8015cb0 <_printf_i+0x114>
 8015cac:	2d00      	cmp	r5, #0
 8015cae:	d04b      	beq.n	8015d48 <_printf_i+0x1ac>
 8015cb0:	4615      	mov	r5, r2
 8015cb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8015cb6:	fb03 6711 	mls	r7, r3, r1, r6
 8015cba:	5dc7      	ldrb	r7, [r0, r7]
 8015cbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015cc0:	4637      	mov	r7, r6
 8015cc2:	42bb      	cmp	r3, r7
 8015cc4:	460e      	mov	r6, r1
 8015cc6:	d9f4      	bls.n	8015cb2 <_printf_i+0x116>
 8015cc8:	2b08      	cmp	r3, #8
 8015cca:	d10b      	bne.n	8015ce4 <_printf_i+0x148>
 8015ccc:	6823      	ldr	r3, [r4, #0]
 8015cce:	07de      	lsls	r6, r3, #31
 8015cd0:	d508      	bpl.n	8015ce4 <_printf_i+0x148>
 8015cd2:	6923      	ldr	r3, [r4, #16]
 8015cd4:	6861      	ldr	r1, [r4, #4]
 8015cd6:	4299      	cmp	r1, r3
 8015cd8:	bfde      	ittt	le
 8015cda:	2330      	movle	r3, #48	; 0x30
 8015cdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015ce0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015ce4:	1b52      	subs	r2, r2, r5
 8015ce6:	6122      	str	r2, [r4, #16]
 8015ce8:	f8cd a000 	str.w	sl, [sp]
 8015cec:	464b      	mov	r3, r9
 8015cee:	aa03      	add	r2, sp, #12
 8015cf0:	4621      	mov	r1, r4
 8015cf2:	4640      	mov	r0, r8
 8015cf4:	f7ff fee4 	bl	8015ac0 <_printf_common>
 8015cf8:	3001      	adds	r0, #1
 8015cfa:	d14a      	bne.n	8015d92 <_printf_i+0x1f6>
 8015cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8015d00:	b004      	add	sp, #16
 8015d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d06:	6823      	ldr	r3, [r4, #0]
 8015d08:	f043 0320 	orr.w	r3, r3, #32
 8015d0c:	6023      	str	r3, [r4, #0]
 8015d0e:	4833      	ldr	r0, [pc, #204]	; (8015ddc <_printf_i+0x240>)
 8015d10:	2778      	movs	r7, #120	; 0x78
 8015d12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015d16:	6823      	ldr	r3, [r4, #0]
 8015d18:	6829      	ldr	r1, [r5, #0]
 8015d1a:	061f      	lsls	r7, r3, #24
 8015d1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8015d20:	d402      	bmi.n	8015d28 <_printf_i+0x18c>
 8015d22:	065f      	lsls	r7, r3, #25
 8015d24:	bf48      	it	mi
 8015d26:	b2b6      	uxthmi	r6, r6
 8015d28:	07df      	lsls	r7, r3, #31
 8015d2a:	bf48      	it	mi
 8015d2c:	f043 0320 	orrmi.w	r3, r3, #32
 8015d30:	6029      	str	r1, [r5, #0]
 8015d32:	bf48      	it	mi
 8015d34:	6023      	strmi	r3, [r4, #0]
 8015d36:	b91e      	cbnz	r6, 8015d40 <_printf_i+0x1a4>
 8015d38:	6823      	ldr	r3, [r4, #0]
 8015d3a:	f023 0320 	bic.w	r3, r3, #32
 8015d3e:	6023      	str	r3, [r4, #0]
 8015d40:	2310      	movs	r3, #16
 8015d42:	e7a7      	b.n	8015c94 <_printf_i+0xf8>
 8015d44:	4824      	ldr	r0, [pc, #144]	; (8015dd8 <_printf_i+0x23c>)
 8015d46:	e7e4      	b.n	8015d12 <_printf_i+0x176>
 8015d48:	4615      	mov	r5, r2
 8015d4a:	e7bd      	b.n	8015cc8 <_printf_i+0x12c>
 8015d4c:	682b      	ldr	r3, [r5, #0]
 8015d4e:	6826      	ldr	r6, [r4, #0]
 8015d50:	6961      	ldr	r1, [r4, #20]
 8015d52:	1d18      	adds	r0, r3, #4
 8015d54:	6028      	str	r0, [r5, #0]
 8015d56:	0635      	lsls	r5, r6, #24
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	d501      	bpl.n	8015d60 <_printf_i+0x1c4>
 8015d5c:	6019      	str	r1, [r3, #0]
 8015d5e:	e002      	b.n	8015d66 <_printf_i+0x1ca>
 8015d60:	0670      	lsls	r0, r6, #25
 8015d62:	d5fb      	bpl.n	8015d5c <_printf_i+0x1c0>
 8015d64:	8019      	strh	r1, [r3, #0]
 8015d66:	2300      	movs	r3, #0
 8015d68:	6123      	str	r3, [r4, #16]
 8015d6a:	4615      	mov	r5, r2
 8015d6c:	e7bc      	b.n	8015ce8 <_printf_i+0x14c>
 8015d6e:	682b      	ldr	r3, [r5, #0]
 8015d70:	1d1a      	adds	r2, r3, #4
 8015d72:	602a      	str	r2, [r5, #0]
 8015d74:	681d      	ldr	r5, [r3, #0]
 8015d76:	6862      	ldr	r2, [r4, #4]
 8015d78:	2100      	movs	r1, #0
 8015d7a:	4628      	mov	r0, r5
 8015d7c:	f7ea fa28 	bl	80001d0 <memchr>
 8015d80:	b108      	cbz	r0, 8015d86 <_printf_i+0x1ea>
 8015d82:	1b40      	subs	r0, r0, r5
 8015d84:	6060      	str	r0, [r4, #4]
 8015d86:	6863      	ldr	r3, [r4, #4]
 8015d88:	6123      	str	r3, [r4, #16]
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d90:	e7aa      	b.n	8015ce8 <_printf_i+0x14c>
 8015d92:	6923      	ldr	r3, [r4, #16]
 8015d94:	462a      	mov	r2, r5
 8015d96:	4649      	mov	r1, r9
 8015d98:	4640      	mov	r0, r8
 8015d9a:	47d0      	blx	sl
 8015d9c:	3001      	adds	r0, #1
 8015d9e:	d0ad      	beq.n	8015cfc <_printf_i+0x160>
 8015da0:	6823      	ldr	r3, [r4, #0]
 8015da2:	079b      	lsls	r3, r3, #30
 8015da4:	d413      	bmi.n	8015dce <_printf_i+0x232>
 8015da6:	68e0      	ldr	r0, [r4, #12]
 8015da8:	9b03      	ldr	r3, [sp, #12]
 8015daa:	4298      	cmp	r0, r3
 8015dac:	bfb8      	it	lt
 8015dae:	4618      	movlt	r0, r3
 8015db0:	e7a6      	b.n	8015d00 <_printf_i+0x164>
 8015db2:	2301      	movs	r3, #1
 8015db4:	4632      	mov	r2, r6
 8015db6:	4649      	mov	r1, r9
 8015db8:	4640      	mov	r0, r8
 8015dba:	47d0      	blx	sl
 8015dbc:	3001      	adds	r0, #1
 8015dbe:	d09d      	beq.n	8015cfc <_printf_i+0x160>
 8015dc0:	3501      	adds	r5, #1
 8015dc2:	68e3      	ldr	r3, [r4, #12]
 8015dc4:	9903      	ldr	r1, [sp, #12]
 8015dc6:	1a5b      	subs	r3, r3, r1
 8015dc8:	42ab      	cmp	r3, r5
 8015dca:	dcf2      	bgt.n	8015db2 <_printf_i+0x216>
 8015dcc:	e7eb      	b.n	8015da6 <_printf_i+0x20a>
 8015dce:	2500      	movs	r5, #0
 8015dd0:	f104 0619 	add.w	r6, r4, #25
 8015dd4:	e7f5      	b.n	8015dc2 <_printf_i+0x226>
 8015dd6:	bf00      	nop
 8015dd8:	0801cb03 	.word	0x0801cb03
 8015ddc:	0801cb14 	.word	0x0801cb14

08015de0 <_scanf_float>:
 8015de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015de4:	b087      	sub	sp, #28
 8015de6:	4617      	mov	r7, r2
 8015de8:	9303      	str	r3, [sp, #12]
 8015dea:	688b      	ldr	r3, [r1, #8]
 8015dec:	1e5a      	subs	r2, r3, #1
 8015dee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015df2:	bf83      	ittte	hi
 8015df4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015df8:	195b      	addhi	r3, r3, r5
 8015dfa:	9302      	strhi	r3, [sp, #8]
 8015dfc:	2300      	movls	r3, #0
 8015dfe:	bf86      	itte	hi
 8015e00:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015e04:	608b      	strhi	r3, [r1, #8]
 8015e06:	9302      	strls	r3, [sp, #8]
 8015e08:	680b      	ldr	r3, [r1, #0]
 8015e0a:	468b      	mov	fp, r1
 8015e0c:	2500      	movs	r5, #0
 8015e0e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015e12:	f84b 3b1c 	str.w	r3, [fp], #28
 8015e16:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015e1a:	4680      	mov	r8, r0
 8015e1c:	460c      	mov	r4, r1
 8015e1e:	465e      	mov	r6, fp
 8015e20:	46aa      	mov	sl, r5
 8015e22:	46a9      	mov	r9, r5
 8015e24:	9501      	str	r5, [sp, #4]
 8015e26:	68a2      	ldr	r2, [r4, #8]
 8015e28:	b152      	cbz	r2, 8015e40 <_scanf_float+0x60>
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	781b      	ldrb	r3, [r3, #0]
 8015e2e:	2b4e      	cmp	r3, #78	; 0x4e
 8015e30:	d864      	bhi.n	8015efc <_scanf_float+0x11c>
 8015e32:	2b40      	cmp	r3, #64	; 0x40
 8015e34:	d83c      	bhi.n	8015eb0 <_scanf_float+0xd0>
 8015e36:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015e3a:	b2c8      	uxtb	r0, r1
 8015e3c:	280e      	cmp	r0, #14
 8015e3e:	d93a      	bls.n	8015eb6 <_scanf_float+0xd6>
 8015e40:	f1b9 0f00 	cmp.w	r9, #0
 8015e44:	d003      	beq.n	8015e4e <_scanf_float+0x6e>
 8015e46:	6823      	ldr	r3, [r4, #0]
 8015e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015e4c:	6023      	str	r3, [r4, #0]
 8015e4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015e52:	f1ba 0f01 	cmp.w	sl, #1
 8015e56:	f200 8113 	bhi.w	8016080 <_scanf_float+0x2a0>
 8015e5a:	455e      	cmp	r6, fp
 8015e5c:	f200 8105 	bhi.w	801606a <_scanf_float+0x28a>
 8015e60:	2501      	movs	r5, #1
 8015e62:	4628      	mov	r0, r5
 8015e64:	b007      	add	sp, #28
 8015e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e6a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8015e6e:	2a0d      	cmp	r2, #13
 8015e70:	d8e6      	bhi.n	8015e40 <_scanf_float+0x60>
 8015e72:	a101      	add	r1, pc, #4	; (adr r1, 8015e78 <_scanf_float+0x98>)
 8015e74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015e78:	08015fb7 	.word	0x08015fb7
 8015e7c:	08015e41 	.word	0x08015e41
 8015e80:	08015e41 	.word	0x08015e41
 8015e84:	08015e41 	.word	0x08015e41
 8015e88:	08016017 	.word	0x08016017
 8015e8c:	08015fef 	.word	0x08015fef
 8015e90:	08015e41 	.word	0x08015e41
 8015e94:	08015e41 	.word	0x08015e41
 8015e98:	08015fc5 	.word	0x08015fc5
 8015e9c:	08015e41 	.word	0x08015e41
 8015ea0:	08015e41 	.word	0x08015e41
 8015ea4:	08015e41 	.word	0x08015e41
 8015ea8:	08015e41 	.word	0x08015e41
 8015eac:	08015f7d 	.word	0x08015f7d
 8015eb0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8015eb4:	e7db      	b.n	8015e6e <_scanf_float+0x8e>
 8015eb6:	290e      	cmp	r1, #14
 8015eb8:	d8c2      	bhi.n	8015e40 <_scanf_float+0x60>
 8015eba:	a001      	add	r0, pc, #4	; (adr r0, 8015ec0 <_scanf_float+0xe0>)
 8015ebc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015ec0:	08015f6f 	.word	0x08015f6f
 8015ec4:	08015e41 	.word	0x08015e41
 8015ec8:	08015f6f 	.word	0x08015f6f
 8015ecc:	08016003 	.word	0x08016003
 8015ed0:	08015e41 	.word	0x08015e41
 8015ed4:	08015f1d 	.word	0x08015f1d
 8015ed8:	08015f59 	.word	0x08015f59
 8015edc:	08015f59 	.word	0x08015f59
 8015ee0:	08015f59 	.word	0x08015f59
 8015ee4:	08015f59 	.word	0x08015f59
 8015ee8:	08015f59 	.word	0x08015f59
 8015eec:	08015f59 	.word	0x08015f59
 8015ef0:	08015f59 	.word	0x08015f59
 8015ef4:	08015f59 	.word	0x08015f59
 8015ef8:	08015f59 	.word	0x08015f59
 8015efc:	2b6e      	cmp	r3, #110	; 0x6e
 8015efe:	d809      	bhi.n	8015f14 <_scanf_float+0x134>
 8015f00:	2b60      	cmp	r3, #96	; 0x60
 8015f02:	d8b2      	bhi.n	8015e6a <_scanf_float+0x8a>
 8015f04:	2b54      	cmp	r3, #84	; 0x54
 8015f06:	d077      	beq.n	8015ff8 <_scanf_float+0x218>
 8015f08:	2b59      	cmp	r3, #89	; 0x59
 8015f0a:	d199      	bne.n	8015e40 <_scanf_float+0x60>
 8015f0c:	2d07      	cmp	r5, #7
 8015f0e:	d197      	bne.n	8015e40 <_scanf_float+0x60>
 8015f10:	2508      	movs	r5, #8
 8015f12:	e029      	b.n	8015f68 <_scanf_float+0x188>
 8015f14:	2b74      	cmp	r3, #116	; 0x74
 8015f16:	d06f      	beq.n	8015ff8 <_scanf_float+0x218>
 8015f18:	2b79      	cmp	r3, #121	; 0x79
 8015f1a:	e7f6      	b.n	8015f0a <_scanf_float+0x12a>
 8015f1c:	6821      	ldr	r1, [r4, #0]
 8015f1e:	05c8      	lsls	r0, r1, #23
 8015f20:	d51a      	bpl.n	8015f58 <_scanf_float+0x178>
 8015f22:	9b02      	ldr	r3, [sp, #8]
 8015f24:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015f28:	6021      	str	r1, [r4, #0]
 8015f2a:	f109 0901 	add.w	r9, r9, #1
 8015f2e:	b11b      	cbz	r3, 8015f38 <_scanf_float+0x158>
 8015f30:	3b01      	subs	r3, #1
 8015f32:	3201      	adds	r2, #1
 8015f34:	9302      	str	r3, [sp, #8]
 8015f36:	60a2      	str	r2, [r4, #8]
 8015f38:	68a3      	ldr	r3, [r4, #8]
 8015f3a:	3b01      	subs	r3, #1
 8015f3c:	60a3      	str	r3, [r4, #8]
 8015f3e:	6923      	ldr	r3, [r4, #16]
 8015f40:	3301      	adds	r3, #1
 8015f42:	6123      	str	r3, [r4, #16]
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	3b01      	subs	r3, #1
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	607b      	str	r3, [r7, #4]
 8015f4c:	f340 8084 	ble.w	8016058 <_scanf_float+0x278>
 8015f50:	683b      	ldr	r3, [r7, #0]
 8015f52:	3301      	adds	r3, #1
 8015f54:	603b      	str	r3, [r7, #0]
 8015f56:	e766      	b.n	8015e26 <_scanf_float+0x46>
 8015f58:	eb1a 0f05 	cmn.w	sl, r5
 8015f5c:	f47f af70 	bne.w	8015e40 <_scanf_float+0x60>
 8015f60:	6822      	ldr	r2, [r4, #0]
 8015f62:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8015f66:	6022      	str	r2, [r4, #0]
 8015f68:	f806 3b01 	strb.w	r3, [r6], #1
 8015f6c:	e7e4      	b.n	8015f38 <_scanf_float+0x158>
 8015f6e:	6822      	ldr	r2, [r4, #0]
 8015f70:	0610      	lsls	r0, r2, #24
 8015f72:	f57f af65 	bpl.w	8015e40 <_scanf_float+0x60>
 8015f76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015f7a:	e7f4      	b.n	8015f66 <_scanf_float+0x186>
 8015f7c:	f1ba 0f00 	cmp.w	sl, #0
 8015f80:	d10e      	bne.n	8015fa0 <_scanf_float+0x1c0>
 8015f82:	f1b9 0f00 	cmp.w	r9, #0
 8015f86:	d10e      	bne.n	8015fa6 <_scanf_float+0x1c6>
 8015f88:	6822      	ldr	r2, [r4, #0]
 8015f8a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015f8e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015f92:	d108      	bne.n	8015fa6 <_scanf_float+0x1c6>
 8015f94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015f98:	6022      	str	r2, [r4, #0]
 8015f9a:	f04f 0a01 	mov.w	sl, #1
 8015f9e:	e7e3      	b.n	8015f68 <_scanf_float+0x188>
 8015fa0:	f1ba 0f02 	cmp.w	sl, #2
 8015fa4:	d055      	beq.n	8016052 <_scanf_float+0x272>
 8015fa6:	2d01      	cmp	r5, #1
 8015fa8:	d002      	beq.n	8015fb0 <_scanf_float+0x1d0>
 8015faa:	2d04      	cmp	r5, #4
 8015fac:	f47f af48 	bne.w	8015e40 <_scanf_float+0x60>
 8015fb0:	3501      	adds	r5, #1
 8015fb2:	b2ed      	uxtb	r5, r5
 8015fb4:	e7d8      	b.n	8015f68 <_scanf_float+0x188>
 8015fb6:	f1ba 0f01 	cmp.w	sl, #1
 8015fba:	f47f af41 	bne.w	8015e40 <_scanf_float+0x60>
 8015fbe:	f04f 0a02 	mov.w	sl, #2
 8015fc2:	e7d1      	b.n	8015f68 <_scanf_float+0x188>
 8015fc4:	b97d      	cbnz	r5, 8015fe6 <_scanf_float+0x206>
 8015fc6:	f1b9 0f00 	cmp.w	r9, #0
 8015fca:	f47f af3c 	bne.w	8015e46 <_scanf_float+0x66>
 8015fce:	6822      	ldr	r2, [r4, #0]
 8015fd0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015fd4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015fd8:	f47f af39 	bne.w	8015e4e <_scanf_float+0x6e>
 8015fdc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015fe0:	6022      	str	r2, [r4, #0]
 8015fe2:	2501      	movs	r5, #1
 8015fe4:	e7c0      	b.n	8015f68 <_scanf_float+0x188>
 8015fe6:	2d03      	cmp	r5, #3
 8015fe8:	d0e2      	beq.n	8015fb0 <_scanf_float+0x1d0>
 8015fea:	2d05      	cmp	r5, #5
 8015fec:	e7de      	b.n	8015fac <_scanf_float+0x1cc>
 8015fee:	2d02      	cmp	r5, #2
 8015ff0:	f47f af26 	bne.w	8015e40 <_scanf_float+0x60>
 8015ff4:	2503      	movs	r5, #3
 8015ff6:	e7b7      	b.n	8015f68 <_scanf_float+0x188>
 8015ff8:	2d06      	cmp	r5, #6
 8015ffa:	f47f af21 	bne.w	8015e40 <_scanf_float+0x60>
 8015ffe:	2507      	movs	r5, #7
 8016000:	e7b2      	b.n	8015f68 <_scanf_float+0x188>
 8016002:	6822      	ldr	r2, [r4, #0]
 8016004:	0591      	lsls	r1, r2, #22
 8016006:	f57f af1b 	bpl.w	8015e40 <_scanf_float+0x60>
 801600a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801600e:	6022      	str	r2, [r4, #0]
 8016010:	f8cd 9004 	str.w	r9, [sp, #4]
 8016014:	e7a8      	b.n	8015f68 <_scanf_float+0x188>
 8016016:	6822      	ldr	r2, [r4, #0]
 8016018:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801601c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016020:	d006      	beq.n	8016030 <_scanf_float+0x250>
 8016022:	0550      	lsls	r0, r2, #21
 8016024:	f57f af0c 	bpl.w	8015e40 <_scanf_float+0x60>
 8016028:	f1b9 0f00 	cmp.w	r9, #0
 801602c:	f43f af0f 	beq.w	8015e4e <_scanf_float+0x6e>
 8016030:	0591      	lsls	r1, r2, #22
 8016032:	bf58      	it	pl
 8016034:	9901      	ldrpl	r1, [sp, #4]
 8016036:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801603a:	bf58      	it	pl
 801603c:	eba9 0101 	subpl.w	r1, r9, r1
 8016040:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016044:	bf58      	it	pl
 8016046:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801604a:	6022      	str	r2, [r4, #0]
 801604c:	f04f 0900 	mov.w	r9, #0
 8016050:	e78a      	b.n	8015f68 <_scanf_float+0x188>
 8016052:	f04f 0a03 	mov.w	sl, #3
 8016056:	e787      	b.n	8015f68 <_scanf_float+0x188>
 8016058:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801605c:	4639      	mov	r1, r7
 801605e:	4640      	mov	r0, r8
 8016060:	4798      	blx	r3
 8016062:	2800      	cmp	r0, #0
 8016064:	f43f aedf 	beq.w	8015e26 <_scanf_float+0x46>
 8016068:	e6ea      	b.n	8015e40 <_scanf_float+0x60>
 801606a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801606e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016072:	463a      	mov	r2, r7
 8016074:	4640      	mov	r0, r8
 8016076:	4798      	blx	r3
 8016078:	6923      	ldr	r3, [r4, #16]
 801607a:	3b01      	subs	r3, #1
 801607c:	6123      	str	r3, [r4, #16]
 801607e:	e6ec      	b.n	8015e5a <_scanf_float+0x7a>
 8016080:	1e6b      	subs	r3, r5, #1
 8016082:	2b06      	cmp	r3, #6
 8016084:	d825      	bhi.n	80160d2 <_scanf_float+0x2f2>
 8016086:	2d02      	cmp	r5, #2
 8016088:	d836      	bhi.n	80160f8 <_scanf_float+0x318>
 801608a:	455e      	cmp	r6, fp
 801608c:	f67f aee8 	bls.w	8015e60 <_scanf_float+0x80>
 8016090:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016094:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016098:	463a      	mov	r2, r7
 801609a:	4640      	mov	r0, r8
 801609c:	4798      	blx	r3
 801609e:	6923      	ldr	r3, [r4, #16]
 80160a0:	3b01      	subs	r3, #1
 80160a2:	6123      	str	r3, [r4, #16]
 80160a4:	e7f1      	b.n	801608a <_scanf_float+0x2aa>
 80160a6:	9802      	ldr	r0, [sp, #8]
 80160a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80160ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80160b0:	9002      	str	r0, [sp, #8]
 80160b2:	463a      	mov	r2, r7
 80160b4:	4640      	mov	r0, r8
 80160b6:	4798      	blx	r3
 80160b8:	6923      	ldr	r3, [r4, #16]
 80160ba:	3b01      	subs	r3, #1
 80160bc:	6123      	str	r3, [r4, #16]
 80160be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80160c2:	fa5f fa8a 	uxtb.w	sl, sl
 80160c6:	f1ba 0f02 	cmp.w	sl, #2
 80160ca:	d1ec      	bne.n	80160a6 <_scanf_float+0x2c6>
 80160cc:	3d03      	subs	r5, #3
 80160ce:	b2ed      	uxtb	r5, r5
 80160d0:	1b76      	subs	r6, r6, r5
 80160d2:	6823      	ldr	r3, [r4, #0]
 80160d4:	05da      	lsls	r2, r3, #23
 80160d6:	d52f      	bpl.n	8016138 <_scanf_float+0x358>
 80160d8:	055b      	lsls	r3, r3, #21
 80160da:	d510      	bpl.n	80160fe <_scanf_float+0x31e>
 80160dc:	455e      	cmp	r6, fp
 80160de:	f67f aebf 	bls.w	8015e60 <_scanf_float+0x80>
 80160e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80160e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80160ea:	463a      	mov	r2, r7
 80160ec:	4640      	mov	r0, r8
 80160ee:	4798      	blx	r3
 80160f0:	6923      	ldr	r3, [r4, #16]
 80160f2:	3b01      	subs	r3, #1
 80160f4:	6123      	str	r3, [r4, #16]
 80160f6:	e7f1      	b.n	80160dc <_scanf_float+0x2fc>
 80160f8:	46aa      	mov	sl, r5
 80160fa:	9602      	str	r6, [sp, #8]
 80160fc:	e7df      	b.n	80160be <_scanf_float+0x2de>
 80160fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016102:	6923      	ldr	r3, [r4, #16]
 8016104:	2965      	cmp	r1, #101	; 0x65
 8016106:	f103 33ff 	add.w	r3, r3, #4294967295
 801610a:	f106 35ff 	add.w	r5, r6, #4294967295
 801610e:	6123      	str	r3, [r4, #16]
 8016110:	d00c      	beq.n	801612c <_scanf_float+0x34c>
 8016112:	2945      	cmp	r1, #69	; 0x45
 8016114:	d00a      	beq.n	801612c <_scanf_float+0x34c>
 8016116:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801611a:	463a      	mov	r2, r7
 801611c:	4640      	mov	r0, r8
 801611e:	4798      	blx	r3
 8016120:	6923      	ldr	r3, [r4, #16]
 8016122:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016126:	3b01      	subs	r3, #1
 8016128:	1eb5      	subs	r5, r6, #2
 801612a:	6123      	str	r3, [r4, #16]
 801612c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016130:	463a      	mov	r2, r7
 8016132:	4640      	mov	r0, r8
 8016134:	4798      	blx	r3
 8016136:	462e      	mov	r6, r5
 8016138:	6825      	ldr	r5, [r4, #0]
 801613a:	f015 0510 	ands.w	r5, r5, #16
 801613e:	d158      	bne.n	80161f2 <_scanf_float+0x412>
 8016140:	7035      	strb	r5, [r6, #0]
 8016142:	6823      	ldr	r3, [r4, #0]
 8016144:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801614c:	d11c      	bne.n	8016188 <_scanf_float+0x3a8>
 801614e:	9b01      	ldr	r3, [sp, #4]
 8016150:	454b      	cmp	r3, r9
 8016152:	eba3 0209 	sub.w	r2, r3, r9
 8016156:	d124      	bne.n	80161a2 <_scanf_float+0x3c2>
 8016158:	2200      	movs	r2, #0
 801615a:	4659      	mov	r1, fp
 801615c:	4640      	mov	r0, r8
 801615e:	f7ff f8df 	bl	8015320 <_strtod_r>
 8016162:	9b03      	ldr	r3, [sp, #12]
 8016164:	6821      	ldr	r1, [r4, #0]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	f011 0f02 	tst.w	r1, #2
 801616c:	ec57 6b10 	vmov	r6, r7, d0
 8016170:	f103 0204 	add.w	r2, r3, #4
 8016174:	d020      	beq.n	80161b8 <_scanf_float+0x3d8>
 8016176:	9903      	ldr	r1, [sp, #12]
 8016178:	600a      	str	r2, [r1, #0]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	e9c3 6700 	strd	r6, r7, [r3]
 8016180:	68e3      	ldr	r3, [r4, #12]
 8016182:	3301      	adds	r3, #1
 8016184:	60e3      	str	r3, [r4, #12]
 8016186:	e66c      	b.n	8015e62 <_scanf_float+0x82>
 8016188:	9b04      	ldr	r3, [sp, #16]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d0e4      	beq.n	8016158 <_scanf_float+0x378>
 801618e:	9905      	ldr	r1, [sp, #20]
 8016190:	230a      	movs	r3, #10
 8016192:	462a      	mov	r2, r5
 8016194:	3101      	adds	r1, #1
 8016196:	4640      	mov	r0, r8
 8016198:	f7ff f9b0 	bl	80154fc <_strtol_r>
 801619c:	9b04      	ldr	r3, [sp, #16]
 801619e:	9e05      	ldr	r6, [sp, #20]
 80161a0:	1ac2      	subs	r2, r0, r3
 80161a2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80161a6:	429e      	cmp	r6, r3
 80161a8:	bf28      	it	cs
 80161aa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80161ae:	4912      	ldr	r1, [pc, #72]	; (80161f8 <_scanf_float+0x418>)
 80161b0:	4630      	mov	r0, r6
 80161b2:	f000 f91b 	bl	80163ec <siprintf>
 80161b6:	e7cf      	b.n	8016158 <_scanf_float+0x378>
 80161b8:	f011 0f04 	tst.w	r1, #4
 80161bc:	9903      	ldr	r1, [sp, #12]
 80161be:	600a      	str	r2, [r1, #0]
 80161c0:	d1db      	bne.n	801617a <_scanf_float+0x39a>
 80161c2:	f8d3 8000 	ldr.w	r8, [r3]
 80161c6:	ee10 2a10 	vmov	r2, s0
 80161ca:	ee10 0a10 	vmov	r0, s0
 80161ce:	463b      	mov	r3, r7
 80161d0:	4639      	mov	r1, r7
 80161d2:	f7ea fcab 	bl	8000b2c <__aeabi_dcmpun>
 80161d6:	b128      	cbz	r0, 80161e4 <_scanf_float+0x404>
 80161d8:	4808      	ldr	r0, [pc, #32]	; (80161fc <_scanf_float+0x41c>)
 80161da:	f000 fa9d 	bl	8016718 <nanf>
 80161de:	ed88 0a00 	vstr	s0, [r8]
 80161e2:	e7cd      	b.n	8016180 <_scanf_float+0x3a0>
 80161e4:	4630      	mov	r0, r6
 80161e6:	4639      	mov	r1, r7
 80161e8:	f7ea fcfe 	bl	8000be8 <__aeabi_d2f>
 80161ec:	f8c8 0000 	str.w	r0, [r8]
 80161f0:	e7c6      	b.n	8016180 <_scanf_float+0x3a0>
 80161f2:	2500      	movs	r5, #0
 80161f4:	e635      	b.n	8015e62 <_scanf_float+0x82>
 80161f6:	bf00      	nop
 80161f8:	0801cb25 	.word	0x0801cb25
 80161fc:	0801cbde 	.word	0x0801cbde

08016200 <std>:
 8016200:	2300      	movs	r3, #0
 8016202:	b510      	push	{r4, lr}
 8016204:	4604      	mov	r4, r0
 8016206:	e9c0 3300 	strd	r3, r3, [r0]
 801620a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801620e:	6083      	str	r3, [r0, #8]
 8016210:	8181      	strh	r1, [r0, #12]
 8016212:	6643      	str	r3, [r0, #100]	; 0x64
 8016214:	81c2      	strh	r2, [r0, #14]
 8016216:	6183      	str	r3, [r0, #24]
 8016218:	4619      	mov	r1, r3
 801621a:	2208      	movs	r2, #8
 801621c:	305c      	adds	r0, #92	; 0x5c
 801621e:	f000 f948 	bl	80164b2 <memset>
 8016222:	4b0d      	ldr	r3, [pc, #52]	; (8016258 <std+0x58>)
 8016224:	6263      	str	r3, [r4, #36]	; 0x24
 8016226:	4b0d      	ldr	r3, [pc, #52]	; (801625c <std+0x5c>)
 8016228:	62a3      	str	r3, [r4, #40]	; 0x28
 801622a:	4b0d      	ldr	r3, [pc, #52]	; (8016260 <std+0x60>)
 801622c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801622e:	4b0d      	ldr	r3, [pc, #52]	; (8016264 <std+0x64>)
 8016230:	6323      	str	r3, [r4, #48]	; 0x30
 8016232:	4b0d      	ldr	r3, [pc, #52]	; (8016268 <std+0x68>)
 8016234:	6224      	str	r4, [r4, #32]
 8016236:	429c      	cmp	r4, r3
 8016238:	d006      	beq.n	8016248 <std+0x48>
 801623a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801623e:	4294      	cmp	r4, r2
 8016240:	d002      	beq.n	8016248 <std+0x48>
 8016242:	33d0      	adds	r3, #208	; 0xd0
 8016244:	429c      	cmp	r4, r3
 8016246:	d105      	bne.n	8016254 <std+0x54>
 8016248:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801624c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016250:	f000 ba40 	b.w	80166d4 <__retarget_lock_init_recursive>
 8016254:	bd10      	pop	{r4, pc}
 8016256:	bf00      	nop
 8016258:	0801642d 	.word	0x0801642d
 801625c:	0801644f 	.word	0x0801644f
 8016260:	08016487 	.word	0x08016487
 8016264:	080164ab 	.word	0x080164ab
 8016268:	20002450 	.word	0x20002450

0801626c <stdio_exit_handler>:
 801626c:	4a02      	ldr	r2, [pc, #8]	; (8016278 <stdio_exit_handler+0xc>)
 801626e:	4903      	ldr	r1, [pc, #12]	; (801627c <stdio_exit_handler+0x10>)
 8016270:	4803      	ldr	r0, [pc, #12]	; (8016280 <stdio_exit_handler+0x14>)
 8016272:	f000 b869 	b.w	8016348 <_fwalk_sglue>
 8016276:	bf00      	nop
 8016278:	20000130 	.word	0x20000130
 801627c:	080188f1 	.word	0x080188f1
 8016280:	200002a8 	.word	0x200002a8

08016284 <cleanup_stdio>:
 8016284:	6841      	ldr	r1, [r0, #4]
 8016286:	4b0c      	ldr	r3, [pc, #48]	; (80162b8 <cleanup_stdio+0x34>)
 8016288:	4299      	cmp	r1, r3
 801628a:	b510      	push	{r4, lr}
 801628c:	4604      	mov	r4, r0
 801628e:	d001      	beq.n	8016294 <cleanup_stdio+0x10>
 8016290:	f002 fb2e 	bl	80188f0 <_fflush_r>
 8016294:	68a1      	ldr	r1, [r4, #8]
 8016296:	4b09      	ldr	r3, [pc, #36]	; (80162bc <cleanup_stdio+0x38>)
 8016298:	4299      	cmp	r1, r3
 801629a:	d002      	beq.n	80162a2 <cleanup_stdio+0x1e>
 801629c:	4620      	mov	r0, r4
 801629e:	f002 fb27 	bl	80188f0 <_fflush_r>
 80162a2:	68e1      	ldr	r1, [r4, #12]
 80162a4:	4b06      	ldr	r3, [pc, #24]	; (80162c0 <cleanup_stdio+0x3c>)
 80162a6:	4299      	cmp	r1, r3
 80162a8:	d004      	beq.n	80162b4 <cleanup_stdio+0x30>
 80162aa:	4620      	mov	r0, r4
 80162ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162b0:	f002 bb1e 	b.w	80188f0 <_fflush_r>
 80162b4:	bd10      	pop	{r4, pc}
 80162b6:	bf00      	nop
 80162b8:	20002450 	.word	0x20002450
 80162bc:	200024b8 	.word	0x200024b8
 80162c0:	20002520 	.word	0x20002520

080162c4 <global_stdio_init.part.0>:
 80162c4:	b510      	push	{r4, lr}
 80162c6:	4b0b      	ldr	r3, [pc, #44]	; (80162f4 <global_stdio_init.part.0+0x30>)
 80162c8:	4c0b      	ldr	r4, [pc, #44]	; (80162f8 <global_stdio_init.part.0+0x34>)
 80162ca:	4a0c      	ldr	r2, [pc, #48]	; (80162fc <global_stdio_init.part.0+0x38>)
 80162cc:	601a      	str	r2, [r3, #0]
 80162ce:	4620      	mov	r0, r4
 80162d0:	2200      	movs	r2, #0
 80162d2:	2104      	movs	r1, #4
 80162d4:	f7ff ff94 	bl	8016200 <std>
 80162d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80162dc:	2201      	movs	r2, #1
 80162de:	2109      	movs	r1, #9
 80162e0:	f7ff ff8e 	bl	8016200 <std>
 80162e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80162e8:	2202      	movs	r2, #2
 80162ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162ee:	2112      	movs	r1, #18
 80162f0:	f7ff bf86 	b.w	8016200 <std>
 80162f4:	20002588 	.word	0x20002588
 80162f8:	20002450 	.word	0x20002450
 80162fc:	0801626d 	.word	0x0801626d

08016300 <__sfp_lock_acquire>:
 8016300:	4801      	ldr	r0, [pc, #4]	; (8016308 <__sfp_lock_acquire+0x8>)
 8016302:	f000 b9e8 	b.w	80166d6 <__retarget_lock_acquire_recursive>
 8016306:	bf00      	nop
 8016308:	20002591 	.word	0x20002591

0801630c <__sfp_lock_release>:
 801630c:	4801      	ldr	r0, [pc, #4]	; (8016314 <__sfp_lock_release+0x8>)
 801630e:	f000 b9e3 	b.w	80166d8 <__retarget_lock_release_recursive>
 8016312:	bf00      	nop
 8016314:	20002591 	.word	0x20002591

08016318 <__sinit>:
 8016318:	b510      	push	{r4, lr}
 801631a:	4604      	mov	r4, r0
 801631c:	f7ff fff0 	bl	8016300 <__sfp_lock_acquire>
 8016320:	6a23      	ldr	r3, [r4, #32]
 8016322:	b11b      	cbz	r3, 801632c <__sinit+0x14>
 8016324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016328:	f7ff bff0 	b.w	801630c <__sfp_lock_release>
 801632c:	4b04      	ldr	r3, [pc, #16]	; (8016340 <__sinit+0x28>)
 801632e:	6223      	str	r3, [r4, #32]
 8016330:	4b04      	ldr	r3, [pc, #16]	; (8016344 <__sinit+0x2c>)
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d1f5      	bne.n	8016324 <__sinit+0xc>
 8016338:	f7ff ffc4 	bl	80162c4 <global_stdio_init.part.0>
 801633c:	e7f2      	b.n	8016324 <__sinit+0xc>
 801633e:	bf00      	nop
 8016340:	08016285 	.word	0x08016285
 8016344:	20002588 	.word	0x20002588

08016348 <_fwalk_sglue>:
 8016348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801634c:	4607      	mov	r7, r0
 801634e:	4688      	mov	r8, r1
 8016350:	4614      	mov	r4, r2
 8016352:	2600      	movs	r6, #0
 8016354:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016358:	f1b9 0901 	subs.w	r9, r9, #1
 801635c:	d505      	bpl.n	801636a <_fwalk_sglue+0x22>
 801635e:	6824      	ldr	r4, [r4, #0]
 8016360:	2c00      	cmp	r4, #0
 8016362:	d1f7      	bne.n	8016354 <_fwalk_sglue+0xc>
 8016364:	4630      	mov	r0, r6
 8016366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801636a:	89ab      	ldrh	r3, [r5, #12]
 801636c:	2b01      	cmp	r3, #1
 801636e:	d907      	bls.n	8016380 <_fwalk_sglue+0x38>
 8016370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016374:	3301      	adds	r3, #1
 8016376:	d003      	beq.n	8016380 <_fwalk_sglue+0x38>
 8016378:	4629      	mov	r1, r5
 801637a:	4638      	mov	r0, r7
 801637c:	47c0      	blx	r8
 801637e:	4306      	orrs	r6, r0
 8016380:	3568      	adds	r5, #104	; 0x68
 8016382:	e7e9      	b.n	8016358 <_fwalk_sglue+0x10>

08016384 <sniprintf>:
 8016384:	b40c      	push	{r2, r3}
 8016386:	b530      	push	{r4, r5, lr}
 8016388:	4b17      	ldr	r3, [pc, #92]	; (80163e8 <sniprintf+0x64>)
 801638a:	1e0c      	subs	r4, r1, #0
 801638c:	681d      	ldr	r5, [r3, #0]
 801638e:	b09d      	sub	sp, #116	; 0x74
 8016390:	da08      	bge.n	80163a4 <sniprintf+0x20>
 8016392:	238b      	movs	r3, #139	; 0x8b
 8016394:	602b      	str	r3, [r5, #0]
 8016396:	f04f 30ff 	mov.w	r0, #4294967295
 801639a:	b01d      	add	sp, #116	; 0x74
 801639c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80163a0:	b002      	add	sp, #8
 80163a2:	4770      	bx	lr
 80163a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80163a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80163ac:	bf14      	ite	ne
 80163ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80163b2:	4623      	moveq	r3, r4
 80163b4:	9304      	str	r3, [sp, #16]
 80163b6:	9307      	str	r3, [sp, #28]
 80163b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80163bc:	9002      	str	r0, [sp, #8]
 80163be:	9006      	str	r0, [sp, #24]
 80163c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80163c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80163c6:	ab21      	add	r3, sp, #132	; 0x84
 80163c8:	a902      	add	r1, sp, #8
 80163ca:	4628      	mov	r0, r5
 80163cc:	9301      	str	r3, [sp, #4]
 80163ce:	f002 f90b 	bl	80185e8 <_svfiprintf_r>
 80163d2:	1c43      	adds	r3, r0, #1
 80163d4:	bfbc      	itt	lt
 80163d6:	238b      	movlt	r3, #139	; 0x8b
 80163d8:	602b      	strlt	r3, [r5, #0]
 80163da:	2c00      	cmp	r4, #0
 80163dc:	d0dd      	beq.n	801639a <sniprintf+0x16>
 80163de:	9b02      	ldr	r3, [sp, #8]
 80163e0:	2200      	movs	r2, #0
 80163e2:	701a      	strb	r2, [r3, #0]
 80163e4:	e7d9      	b.n	801639a <sniprintf+0x16>
 80163e6:	bf00      	nop
 80163e8:	200002f4 	.word	0x200002f4

080163ec <siprintf>:
 80163ec:	b40e      	push	{r1, r2, r3}
 80163ee:	b500      	push	{lr}
 80163f0:	b09c      	sub	sp, #112	; 0x70
 80163f2:	ab1d      	add	r3, sp, #116	; 0x74
 80163f4:	9002      	str	r0, [sp, #8]
 80163f6:	9006      	str	r0, [sp, #24]
 80163f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80163fc:	4809      	ldr	r0, [pc, #36]	; (8016424 <siprintf+0x38>)
 80163fe:	9107      	str	r1, [sp, #28]
 8016400:	9104      	str	r1, [sp, #16]
 8016402:	4909      	ldr	r1, [pc, #36]	; (8016428 <siprintf+0x3c>)
 8016404:	f853 2b04 	ldr.w	r2, [r3], #4
 8016408:	9105      	str	r1, [sp, #20]
 801640a:	6800      	ldr	r0, [r0, #0]
 801640c:	9301      	str	r3, [sp, #4]
 801640e:	a902      	add	r1, sp, #8
 8016410:	f002 f8ea 	bl	80185e8 <_svfiprintf_r>
 8016414:	9b02      	ldr	r3, [sp, #8]
 8016416:	2200      	movs	r2, #0
 8016418:	701a      	strb	r2, [r3, #0]
 801641a:	b01c      	add	sp, #112	; 0x70
 801641c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016420:	b003      	add	sp, #12
 8016422:	4770      	bx	lr
 8016424:	200002f4 	.word	0x200002f4
 8016428:	ffff0208 	.word	0xffff0208

0801642c <__sread>:
 801642c:	b510      	push	{r4, lr}
 801642e:	460c      	mov	r4, r1
 8016430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016434:	f000 f8f0 	bl	8016618 <_read_r>
 8016438:	2800      	cmp	r0, #0
 801643a:	bfab      	itete	ge
 801643c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801643e:	89a3      	ldrhlt	r3, [r4, #12]
 8016440:	181b      	addge	r3, r3, r0
 8016442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016446:	bfac      	ite	ge
 8016448:	6563      	strge	r3, [r4, #84]	; 0x54
 801644a:	81a3      	strhlt	r3, [r4, #12]
 801644c:	bd10      	pop	{r4, pc}

0801644e <__swrite>:
 801644e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016452:	461f      	mov	r7, r3
 8016454:	898b      	ldrh	r3, [r1, #12]
 8016456:	05db      	lsls	r3, r3, #23
 8016458:	4605      	mov	r5, r0
 801645a:	460c      	mov	r4, r1
 801645c:	4616      	mov	r6, r2
 801645e:	d505      	bpl.n	801646c <__swrite+0x1e>
 8016460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016464:	2302      	movs	r3, #2
 8016466:	2200      	movs	r2, #0
 8016468:	f000 f8c4 	bl	80165f4 <_lseek_r>
 801646c:	89a3      	ldrh	r3, [r4, #12]
 801646e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016476:	81a3      	strh	r3, [r4, #12]
 8016478:	4632      	mov	r2, r6
 801647a:	463b      	mov	r3, r7
 801647c:	4628      	mov	r0, r5
 801647e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016482:	f000 b8eb 	b.w	801665c <_write_r>

08016486 <__sseek>:
 8016486:	b510      	push	{r4, lr}
 8016488:	460c      	mov	r4, r1
 801648a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801648e:	f000 f8b1 	bl	80165f4 <_lseek_r>
 8016492:	1c43      	adds	r3, r0, #1
 8016494:	89a3      	ldrh	r3, [r4, #12]
 8016496:	bf15      	itete	ne
 8016498:	6560      	strne	r0, [r4, #84]	; 0x54
 801649a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801649e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80164a2:	81a3      	strheq	r3, [r4, #12]
 80164a4:	bf18      	it	ne
 80164a6:	81a3      	strhne	r3, [r4, #12]
 80164a8:	bd10      	pop	{r4, pc}

080164aa <__sclose>:
 80164aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164ae:	f000 b891 	b.w	80165d4 <_close_r>

080164b2 <memset>:
 80164b2:	4402      	add	r2, r0
 80164b4:	4603      	mov	r3, r0
 80164b6:	4293      	cmp	r3, r2
 80164b8:	d100      	bne.n	80164bc <memset+0xa>
 80164ba:	4770      	bx	lr
 80164bc:	f803 1b01 	strb.w	r1, [r3], #1
 80164c0:	e7f9      	b.n	80164b6 <memset+0x4>

080164c2 <strncmp>:
 80164c2:	b510      	push	{r4, lr}
 80164c4:	b16a      	cbz	r2, 80164e2 <strncmp+0x20>
 80164c6:	3901      	subs	r1, #1
 80164c8:	1884      	adds	r4, r0, r2
 80164ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80164ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80164d2:	429a      	cmp	r2, r3
 80164d4:	d103      	bne.n	80164de <strncmp+0x1c>
 80164d6:	42a0      	cmp	r0, r4
 80164d8:	d001      	beq.n	80164de <strncmp+0x1c>
 80164da:	2a00      	cmp	r2, #0
 80164dc:	d1f5      	bne.n	80164ca <strncmp+0x8>
 80164de:	1ad0      	subs	r0, r2, r3
 80164e0:	bd10      	pop	{r4, pc}
 80164e2:	4610      	mov	r0, r2
 80164e4:	e7fc      	b.n	80164e0 <strncmp+0x1e>
	...

080164e8 <strtok>:
 80164e8:	4b16      	ldr	r3, [pc, #88]	; (8016544 <strtok+0x5c>)
 80164ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80164ec:	681e      	ldr	r6, [r3, #0]
 80164ee:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80164f0:	4605      	mov	r5, r0
 80164f2:	b9fc      	cbnz	r4, 8016534 <strtok+0x4c>
 80164f4:	2050      	movs	r0, #80	; 0x50
 80164f6:	9101      	str	r1, [sp, #4]
 80164f8:	f7fe f84a 	bl	8014590 <malloc>
 80164fc:	9901      	ldr	r1, [sp, #4]
 80164fe:	6470      	str	r0, [r6, #68]	; 0x44
 8016500:	4602      	mov	r2, r0
 8016502:	b920      	cbnz	r0, 801650e <strtok+0x26>
 8016504:	4b10      	ldr	r3, [pc, #64]	; (8016548 <strtok+0x60>)
 8016506:	4811      	ldr	r0, [pc, #68]	; (801654c <strtok+0x64>)
 8016508:	215b      	movs	r1, #91	; 0x5b
 801650a:	f000 f90b 	bl	8016724 <__assert_func>
 801650e:	e9c0 4400 	strd	r4, r4, [r0]
 8016512:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8016516:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801651a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801651e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8016522:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8016526:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801652a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801652e:	6184      	str	r4, [r0, #24]
 8016530:	7704      	strb	r4, [r0, #28]
 8016532:	6244      	str	r4, [r0, #36]	; 0x24
 8016534:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8016536:	2301      	movs	r3, #1
 8016538:	4628      	mov	r0, r5
 801653a:	b002      	add	sp, #8
 801653c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016540:	f000 b806 	b.w	8016550 <__strtok_r>
 8016544:	200002f4 	.word	0x200002f4
 8016548:	0801cb2a 	.word	0x0801cb2a
 801654c:	0801cb41 	.word	0x0801cb41

08016550 <__strtok_r>:
 8016550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016552:	b908      	cbnz	r0, 8016558 <__strtok_r+0x8>
 8016554:	6810      	ldr	r0, [r2, #0]
 8016556:	b188      	cbz	r0, 801657c <__strtok_r+0x2c>
 8016558:	4604      	mov	r4, r0
 801655a:	4620      	mov	r0, r4
 801655c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016560:	460f      	mov	r7, r1
 8016562:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016566:	b91e      	cbnz	r6, 8016570 <__strtok_r+0x20>
 8016568:	b965      	cbnz	r5, 8016584 <__strtok_r+0x34>
 801656a:	6015      	str	r5, [r2, #0]
 801656c:	4628      	mov	r0, r5
 801656e:	e005      	b.n	801657c <__strtok_r+0x2c>
 8016570:	42b5      	cmp	r5, r6
 8016572:	d1f6      	bne.n	8016562 <__strtok_r+0x12>
 8016574:	2b00      	cmp	r3, #0
 8016576:	d1f0      	bne.n	801655a <__strtok_r+0xa>
 8016578:	6014      	str	r4, [r2, #0]
 801657a:	7003      	strb	r3, [r0, #0]
 801657c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801657e:	461c      	mov	r4, r3
 8016580:	e00c      	b.n	801659c <__strtok_r+0x4c>
 8016582:	b915      	cbnz	r5, 801658a <__strtok_r+0x3a>
 8016584:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016588:	460e      	mov	r6, r1
 801658a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801658e:	42ab      	cmp	r3, r5
 8016590:	d1f7      	bne.n	8016582 <__strtok_r+0x32>
 8016592:	2b00      	cmp	r3, #0
 8016594:	d0f3      	beq.n	801657e <__strtok_r+0x2e>
 8016596:	2300      	movs	r3, #0
 8016598:	f804 3c01 	strb.w	r3, [r4, #-1]
 801659c:	6014      	str	r4, [r2, #0]
 801659e:	e7ed      	b.n	801657c <__strtok_r+0x2c>

080165a0 <strstr>:
 80165a0:	780a      	ldrb	r2, [r1, #0]
 80165a2:	b570      	push	{r4, r5, r6, lr}
 80165a4:	b96a      	cbnz	r2, 80165c2 <strstr+0x22>
 80165a6:	bd70      	pop	{r4, r5, r6, pc}
 80165a8:	429a      	cmp	r2, r3
 80165aa:	d109      	bne.n	80165c0 <strstr+0x20>
 80165ac:	460c      	mov	r4, r1
 80165ae:	4605      	mov	r5, r0
 80165b0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d0f6      	beq.n	80165a6 <strstr+0x6>
 80165b8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80165bc:	429e      	cmp	r6, r3
 80165be:	d0f7      	beq.n	80165b0 <strstr+0x10>
 80165c0:	3001      	adds	r0, #1
 80165c2:	7803      	ldrb	r3, [r0, #0]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d1ef      	bne.n	80165a8 <strstr+0x8>
 80165c8:	4618      	mov	r0, r3
 80165ca:	e7ec      	b.n	80165a6 <strstr+0x6>

080165cc <_localeconv_r>:
 80165cc:	4800      	ldr	r0, [pc, #0]	; (80165d0 <_localeconv_r+0x4>)
 80165ce:	4770      	bx	lr
 80165d0:	2000022c 	.word	0x2000022c

080165d4 <_close_r>:
 80165d4:	b538      	push	{r3, r4, r5, lr}
 80165d6:	4d06      	ldr	r5, [pc, #24]	; (80165f0 <_close_r+0x1c>)
 80165d8:	2300      	movs	r3, #0
 80165da:	4604      	mov	r4, r0
 80165dc:	4608      	mov	r0, r1
 80165de:	602b      	str	r3, [r5, #0]
 80165e0:	f7ee ffef 	bl	80055c2 <_close>
 80165e4:	1c43      	adds	r3, r0, #1
 80165e6:	d102      	bne.n	80165ee <_close_r+0x1a>
 80165e8:	682b      	ldr	r3, [r5, #0]
 80165ea:	b103      	cbz	r3, 80165ee <_close_r+0x1a>
 80165ec:	6023      	str	r3, [r4, #0]
 80165ee:	bd38      	pop	{r3, r4, r5, pc}
 80165f0:	2000258c 	.word	0x2000258c

080165f4 <_lseek_r>:
 80165f4:	b538      	push	{r3, r4, r5, lr}
 80165f6:	4d07      	ldr	r5, [pc, #28]	; (8016614 <_lseek_r+0x20>)
 80165f8:	4604      	mov	r4, r0
 80165fa:	4608      	mov	r0, r1
 80165fc:	4611      	mov	r1, r2
 80165fe:	2200      	movs	r2, #0
 8016600:	602a      	str	r2, [r5, #0]
 8016602:	461a      	mov	r2, r3
 8016604:	f7ef f804 	bl	8005610 <_lseek>
 8016608:	1c43      	adds	r3, r0, #1
 801660a:	d102      	bne.n	8016612 <_lseek_r+0x1e>
 801660c:	682b      	ldr	r3, [r5, #0]
 801660e:	b103      	cbz	r3, 8016612 <_lseek_r+0x1e>
 8016610:	6023      	str	r3, [r4, #0]
 8016612:	bd38      	pop	{r3, r4, r5, pc}
 8016614:	2000258c 	.word	0x2000258c

08016618 <_read_r>:
 8016618:	b538      	push	{r3, r4, r5, lr}
 801661a:	4d07      	ldr	r5, [pc, #28]	; (8016638 <_read_r+0x20>)
 801661c:	4604      	mov	r4, r0
 801661e:	4608      	mov	r0, r1
 8016620:	4611      	mov	r1, r2
 8016622:	2200      	movs	r2, #0
 8016624:	602a      	str	r2, [r5, #0]
 8016626:	461a      	mov	r2, r3
 8016628:	f7ee ff92 	bl	8005550 <_read>
 801662c:	1c43      	adds	r3, r0, #1
 801662e:	d102      	bne.n	8016636 <_read_r+0x1e>
 8016630:	682b      	ldr	r3, [r5, #0]
 8016632:	b103      	cbz	r3, 8016636 <_read_r+0x1e>
 8016634:	6023      	str	r3, [r4, #0]
 8016636:	bd38      	pop	{r3, r4, r5, pc}
 8016638:	2000258c 	.word	0x2000258c

0801663c <_sbrk_r>:
 801663c:	b538      	push	{r3, r4, r5, lr}
 801663e:	4d06      	ldr	r5, [pc, #24]	; (8016658 <_sbrk_r+0x1c>)
 8016640:	2300      	movs	r3, #0
 8016642:	4604      	mov	r4, r0
 8016644:	4608      	mov	r0, r1
 8016646:	602b      	str	r3, [r5, #0]
 8016648:	f7ee fff0 	bl	800562c <_sbrk>
 801664c:	1c43      	adds	r3, r0, #1
 801664e:	d102      	bne.n	8016656 <_sbrk_r+0x1a>
 8016650:	682b      	ldr	r3, [r5, #0]
 8016652:	b103      	cbz	r3, 8016656 <_sbrk_r+0x1a>
 8016654:	6023      	str	r3, [r4, #0]
 8016656:	bd38      	pop	{r3, r4, r5, pc}
 8016658:	2000258c 	.word	0x2000258c

0801665c <_write_r>:
 801665c:	b538      	push	{r3, r4, r5, lr}
 801665e:	4d07      	ldr	r5, [pc, #28]	; (801667c <_write_r+0x20>)
 8016660:	4604      	mov	r4, r0
 8016662:	4608      	mov	r0, r1
 8016664:	4611      	mov	r1, r2
 8016666:	2200      	movs	r2, #0
 8016668:	602a      	str	r2, [r5, #0]
 801666a:	461a      	mov	r2, r3
 801666c:	f7ee ff8d 	bl	800558a <_write>
 8016670:	1c43      	adds	r3, r0, #1
 8016672:	d102      	bne.n	801667a <_write_r+0x1e>
 8016674:	682b      	ldr	r3, [r5, #0]
 8016676:	b103      	cbz	r3, 801667a <_write_r+0x1e>
 8016678:	6023      	str	r3, [r4, #0]
 801667a:	bd38      	pop	{r3, r4, r5, pc}
 801667c:	2000258c 	.word	0x2000258c

08016680 <__errno>:
 8016680:	4b01      	ldr	r3, [pc, #4]	; (8016688 <__errno+0x8>)
 8016682:	6818      	ldr	r0, [r3, #0]
 8016684:	4770      	bx	lr
 8016686:	bf00      	nop
 8016688:	200002f4 	.word	0x200002f4

0801668c <__libc_init_array>:
 801668c:	b570      	push	{r4, r5, r6, lr}
 801668e:	4d0d      	ldr	r5, [pc, #52]	; (80166c4 <__libc_init_array+0x38>)
 8016690:	4c0d      	ldr	r4, [pc, #52]	; (80166c8 <__libc_init_array+0x3c>)
 8016692:	1b64      	subs	r4, r4, r5
 8016694:	10a4      	asrs	r4, r4, #2
 8016696:	2600      	movs	r6, #0
 8016698:	42a6      	cmp	r6, r4
 801669a:	d109      	bne.n	80166b0 <__libc_init_array+0x24>
 801669c:	4d0b      	ldr	r5, [pc, #44]	; (80166cc <__libc_init_array+0x40>)
 801669e:	4c0c      	ldr	r4, [pc, #48]	; (80166d0 <__libc_init_array+0x44>)
 80166a0:	f004 fa02 	bl	801aaa8 <_init>
 80166a4:	1b64      	subs	r4, r4, r5
 80166a6:	10a4      	asrs	r4, r4, #2
 80166a8:	2600      	movs	r6, #0
 80166aa:	42a6      	cmp	r6, r4
 80166ac:	d105      	bne.n	80166ba <__libc_init_array+0x2e>
 80166ae:	bd70      	pop	{r4, r5, r6, pc}
 80166b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80166b4:	4798      	blx	r3
 80166b6:	3601      	adds	r6, #1
 80166b8:	e7ee      	b.n	8016698 <__libc_init_array+0xc>
 80166ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80166be:	4798      	blx	r3
 80166c0:	3601      	adds	r6, #1
 80166c2:	e7f2      	b.n	80166aa <__libc_init_array+0x1e>
 80166c4:	0801d018 	.word	0x0801d018
 80166c8:	0801d018 	.word	0x0801d018
 80166cc:	0801d018 	.word	0x0801d018
 80166d0:	0801d01c 	.word	0x0801d01c

080166d4 <__retarget_lock_init_recursive>:
 80166d4:	4770      	bx	lr

080166d6 <__retarget_lock_acquire_recursive>:
 80166d6:	4770      	bx	lr

080166d8 <__retarget_lock_release_recursive>:
 80166d8:	4770      	bx	lr

080166da <strcpy>:
 80166da:	4603      	mov	r3, r0
 80166dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80166e0:	f803 2b01 	strb.w	r2, [r3], #1
 80166e4:	2a00      	cmp	r2, #0
 80166e6:	d1f9      	bne.n	80166dc <strcpy+0x2>
 80166e8:	4770      	bx	lr

080166ea <memcpy>:
 80166ea:	440a      	add	r2, r1
 80166ec:	4291      	cmp	r1, r2
 80166ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80166f2:	d100      	bne.n	80166f6 <memcpy+0xc>
 80166f4:	4770      	bx	lr
 80166f6:	b510      	push	{r4, lr}
 80166f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80166fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016700:	4291      	cmp	r1, r2
 8016702:	d1f9      	bne.n	80166f8 <memcpy+0xe>
 8016704:	bd10      	pop	{r4, pc}
	...

08016708 <nan>:
 8016708:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016710 <nan+0x8>
 801670c:	4770      	bx	lr
 801670e:	bf00      	nop
 8016710:	00000000 	.word	0x00000000
 8016714:	7ff80000 	.word	0x7ff80000

08016718 <nanf>:
 8016718:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016720 <nanf+0x8>
 801671c:	4770      	bx	lr
 801671e:	bf00      	nop
 8016720:	7fc00000 	.word	0x7fc00000

08016724 <__assert_func>:
 8016724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016726:	4614      	mov	r4, r2
 8016728:	461a      	mov	r2, r3
 801672a:	4b09      	ldr	r3, [pc, #36]	; (8016750 <__assert_func+0x2c>)
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	4605      	mov	r5, r0
 8016730:	68d8      	ldr	r0, [r3, #12]
 8016732:	b14c      	cbz	r4, 8016748 <__assert_func+0x24>
 8016734:	4b07      	ldr	r3, [pc, #28]	; (8016754 <__assert_func+0x30>)
 8016736:	9100      	str	r1, [sp, #0]
 8016738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801673c:	4906      	ldr	r1, [pc, #24]	; (8016758 <__assert_func+0x34>)
 801673e:	462b      	mov	r3, r5
 8016740:	f002 f8fe 	bl	8018940 <fiprintf>
 8016744:	f002 f928 	bl	8018998 <abort>
 8016748:	4b04      	ldr	r3, [pc, #16]	; (801675c <__assert_func+0x38>)
 801674a:	461c      	mov	r4, r3
 801674c:	e7f3      	b.n	8016736 <__assert_func+0x12>
 801674e:	bf00      	nop
 8016750:	200002f4 	.word	0x200002f4
 8016754:	0801cba3 	.word	0x0801cba3
 8016758:	0801cbb0 	.word	0x0801cbb0
 801675c:	0801cbde 	.word	0x0801cbde

08016760 <quorem>:
 8016760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016764:	6903      	ldr	r3, [r0, #16]
 8016766:	690c      	ldr	r4, [r1, #16]
 8016768:	42a3      	cmp	r3, r4
 801676a:	4607      	mov	r7, r0
 801676c:	db7e      	blt.n	801686c <quorem+0x10c>
 801676e:	3c01      	subs	r4, #1
 8016770:	f101 0814 	add.w	r8, r1, #20
 8016774:	f100 0514 	add.w	r5, r0, #20
 8016778:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801677c:	9301      	str	r3, [sp, #4]
 801677e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016782:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016786:	3301      	adds	r3, #1
 8016788:	429a      	cmp	r2, r3
 801678a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801678e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016792:	fbb2 f6f3 	udiv	r6, r2, r3
 8016796:	d331      	bcc.n	80167fc <quorem+0x9c>
 8016798:	f04f 0e00 	mov.w	lr, #0
 801679c:	4640      	mov	r0, r8
 801679e:	46ac      	mov	ip, r5
 80167a0:	46f2      	mov	sl, lr
 80167a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80167a6:	b293      	uxth	r3, r2
 80167a8:	fb06 e303 	mla	r3, r6, r3, lr
 80167ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80167b0:	0c1a      	lsrs	r2, r3, #16
 80167b2:	b29b      	uxth	r3, r3
 80167b4:	ebaa 0303 	sub.w	r3, sl, r3
 80167b8:	f8dc a000 	ldr.w	sl, [ip]
 80167bc:	fa13 f38a 	uxtah	r3, r3, sl
 80167c0:	fb06 220e 	mla	r2, r6, lr, r2
 80167c4:	9300      	str	r3, [sp, #0]
 80167c6:	9b00      	ldr	r3, [sp, #0]
 80167c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80167cc:	b292      	uxth	r2, r2
 80167ce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80167d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80167d6:	f8bd 3000 	ldrh.w	r3, [sp]
 80167da:	4581      	cmp	r9, r0
 80167dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80167e0:	f84c 3b04 	str.w	r3, [ip], #4
 80167e4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80167e8:	d2db      	bcs.n	80167a2 <quorem+0x42>
 80167ea:	f855 300b 	ldr.w	r3, [r5, fp]
 80167ee:	b92b      	cbnz	r3, 80167fc <quorem+0x9c>
 80167f0:	9b01      	ldr	r3, [sp, #4]
 80167f2:	3b04      	subs	r3, #4
 80167f4:	429d      	cmp	r5, r3
 80167f6:	461a      	mov	r2, r3
 80167f8:	d32c      	bcc.n	8016854 <quorem+0xf4>
 80167fa:	613c      	str	r4, [r7, #16]
 80167fc:	4638      	mov	r0, r7
 80167fe:	f001 fca5 	bl	801814c <__mcmp>
 8016802:	2800      	cmp	r0, #0
 8016804:	db22      	blt.n	801684c <quorem+0xec>
 8016806:	3601      	adds	r6, #1
 8016808:	4629      	mov	r1, r5
 801680a:	2000      	movs	r0, #0
 801680c:	f858 2b04 	ldr.w	r2, [r8], #4
 8016810:	f8d1 c000 	ldr.w	ip, [r1]
 8016814:	b293      	uxth	r3, r2
 8016816:	1ac3      	subs	r3, r0, r3
 8016818:	0c12      	lsrs	r2, r2, #16
 801681a:	fa13 f38c 	uxtah	r3, r3, ip
 801681e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8016822:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016826:	b29b      	uxth	r3, r3
 8016828:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801682c:	45c1      	cmp	r9, r8
 801682e:	f841 3b04 	str.w	r3, [r1], #4
 8016832:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016836:	d2e9      	bcs.n	801680c <quorem+0xac>
 8016838:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801683c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016840:	b922      	cbnz	r2, 801684c <quorem+0xec>
 8016842:	3b04      	subs	r3, #4
 8016844:	429d      	cmp	r5, r3
 8016846:	461a      	mov	r2, r3
 8016848:	d30a      	bcc.n	8016860 <quorem+0x100>
 801684a:	613c      	str	r4, [r7, #16]
 801684c:	4630      	mov	r0, r6
 801684e:	b003      	add	sp, #12
 8016850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016854:	6812      	ldr	r2, [r2, #0]
 8016856:	3b04      	subs	r3, #4
 8016858:	2a00      	cmp	r2, #0
 801685a:	d1ce      	bne.n	80167fa <quorem+0x9a>
 801685c:	3c01      	subs	r4, #1
 801685e:	e7c9      	b.n	80167f4 <quorem+0x94>
 8016860:	6812      	ldr	r2, [r2, #0]
 8016862:	3b04      	subs	r3, #4
 8016864:	2a00      	cmp	r2, #0
 8016866:	d1f0      	bne.n	801684a <quorem+0xea>
 8016868:	3c01      	subs	r4, #1
 801686a:	e7eb      	b.n	8016844 <quorem+0xe4>
 801686c:	2000      	movs	r0, #0
 801686e:	e7ee      	b.n	801684e <quorem+0xee>

08016870 <_dtoa_r>:
 8016870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016874:	ed2d 8b04 	vpush	{d8-d9}
 8016878:	69c5      	ldr	r5, [r0, #28]
 801687a:	b093      	sub	sp, #76	; 0x4c
 801687c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016880:	ec57 6b10 	vmov	r6, r7, d0
 8016884:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016888:	9107      	str	r1, [sp, #28]
 801688a:	4604      	mov	r4, r0
 801688c:	920a      	str	r2, [sp, #40]	; 0x28
 801688e:	930d      	str	r3, [sp, #52]	; 0x34
 8016890:	b975      	cbnz	r5, 80168b0 <_dtoa_r+0x40>
 8016892:	2010      	movs	r0, #16
 8016894:	f7fd fe7c 	bl	8014590 <malloc>
 8016898:	4602      	mov	r2, r0
 801689a:	61e0      	str	r0, [r4, #28]
 801689c:	b920      	cbnz	r0, 80168a8 <_dtoa_r+0x38>
 801689e:	4bae      	ldr	r3, [pc, #696]	; (8016b58 <_dtoa_r+0x2e8>)
 80168a0:	21ef      	movs	r1, #239	; 0xef
 80168a2:	48ae      	ldr	r0, [pc, #696]	; (8016b5c <_dtoa_r+0x2ec>)
 80168a4:	f7ff ff3e 	bl	8016724 <__assert_func>
 80168a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80168ac:	6005      	str	r5, [r0, #0]
 80168ae:	60c5      	str	r5, [r0, #12]
 80168b0:	69e3      	ldr	r3, [r4, #28]
 80168b2:	6819      	ldr	r1, [r3, #0]
 80168b4:	b151      	cbz	r1, 80168cc <_dtoa_r+0x5c>
 80168b6:	685a      	ldr	r2, [r3, #4]
 80168b8:	604a      	str	r2, [r1, #4]
 80168ba:	2301      	movs	r3, #1
 80168bc:	4093      	lsls	r3, r2
 80168be:	608b      	str	r3, [r1, #8]
 80168c0:	4620      	mov	r0, r4
 80168c2:	f001 f9bd 	bl	8017c40 <_Bfree>
 80168c6:	69e3      	ldr	r3, [r4, #28]
 80168c8:	2200      	movs	r2, #0
 80168ca:	601a      	str	r2, [r3, #0]
 80168cc:	1e3b      	subs	r3, r7, #0
 80168ce:	bfbb      	ittet	lt
 80168d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80168d4:	9303      	strlt	r3, [sp, #12]
 80168d6:	2300      	movge	r3, #0
 80168d8:	2201      	movlt	r2, #1
 80168da:	bfac      	ite	ge
 80168dc:	f8c8 3000 	strge.w	r3, [r8]
 80168e0:	f8c8 2000 	strlt.w	r2, [r8]
 80168e4:	4b9e      	ldr	r3, [pc, #632]	; (8016b60 <_dtoa_r+0x2f0>)
 80168e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80168ea:	ea33 0308 	bics.w	r3, r3, r8
 80168ee:	d11b      	bne.n	8016928 <_dtoa_r+0xb8>
 80168f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80168f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80168f6:	6013      	str	r3, [r2, #0]
 80168f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80168fc:	4333      	orrs	r3, r6
 80168fe:	f000 8593 	beq.w	8017428 <_dtoa_r+0xbb8>
 8016902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016904:	b963      	cbnz	r3, 8016920 <_dtoa_r+0xb0>
 8016906:	4b97      	ldr	r3, [pc, #604]	; (8016b64 <_dtoa_r+0x2f4>)
 8016908:	e027      	b.n	801695a <_dtoa_r+0xea>
 801690a:	4b97      	ldr	r3, [pc, #604]	; (8016b68 <_dtoa_r+0x2f8>)
 801690c:	9300      	str	r3, [sp, #0]
 801690e:	3308      	adds	r3, #8
 8016910:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016912:	6013      	str	r3, [r2, #0]
 8016914:	9800      	ldr	r0, [sp, #0]
 8016916:	b013      	add	sp, #76	; 0x4c
 8016918:	ecbd 8b04 	vpop	{d8-d9}
 801691c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016920:	4b90      	ldr	r3, [pc, #576]	; (8016b64 <_dtoa_r+0x2f4>)
 8016922:	9300      	str	r3, [sp, #0]
 8016924:	3303      	adds	r3, #3
 8016926:	e7f3      	b.n	8016910 <_dtoa_r+0xa0>
 8016928:	ed9d 7b02 	vldr	d7, [sp, #8]
 801692c:	2200      	movs	r2, #0
 801692e:	ec51 0b17 	vmov	r0, r1, d7
 8016932:	eeb0 8a47 	vmov.f32	s16, s14
 8016936:	eef0 8a67 	vmov.f32	s17, s15
 801693a:	2300      	movs	r3, #0
 801693c:	f7ea f8c4 	bl	8000ac8 <__aeabi_dcmpeq>
 8016940:	4681      	mov	r9, r0
 8016942:	b160      	cbz	r0, 801695e <_dtoa_r+0xee>
 8016944:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016946:	2301      	movs	r3, #1
 8016948:	6013      	str	r3, [r2, #0]
 801694a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801694c:	2b00      	cmp	r3, #0
 801694e:	f000 8568 	beq.w	8017422 <_dtoa_r+0xbb2>
 8016952:	4b86      	ldr	r3, [pc, #536]	; (8016b6c <_dtoa_r+0x2fc>)
 8016954:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016956:	6013      	str	r3, [r2, #0]
 8016958:	3b01      	subs	r3, #1
 801695a:	9300      	str	r3, [sp, #0]
 801695c:	e7da      	b.n	8016914 <_dtoa_r+0xa4>
 801695e:	aa10      	add	r2, sp, #64	; 0x40
 8016960:	a911      	add	r1, sp, #68	; 0x44
 8016962:	4620      	mov	r0, r4
 8016964:	eeb0 0a48 	vmov.f32	s0, s16
 8016968:	eef0 0a68 	vmov.f32	s1, s17
 801696c:	f001 fd04 	bl	8018378 <__d2b>
 8016970:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016974:	4682      	mov	sl, r0
 8016976:	2d00      	cmp	r5, #0
 8016978:	d07f      	beq.n	8016a7a <_dtoa_r+0x20a>
 801697a:	ee18 3a90 	vmov	r3, s17
 801697e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016982:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016986:	ec51 0b18 	vmov	r0, r1, d8
 801698a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801698e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016992:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8016996:	4619      	mov	r1, r3
 8016998:	2200      	movs	r2, #0
 801699a:	4b75      	ldr	r3, [pc, #468]	; (8016b70 <_dtoa_r+0x300>)
 801699c:	f7e9 fc74 	bl	8000288 <__aeabi_dsub>
 80169a0:	a367      	add	r3, pc, #412	; (adr r3, 8016b40 <_dtoa_r+0x2d0>)
 80169a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169a6:	f7e9 fe27 	bl	80005f8 <__aeabi_dmul>
 80169aa:	a367      	add	r3, pc, #412	; (adr r3, 8016b48 <_dtoa_r+0x2d8>)
 80169ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169b0:	f7e9 fc6c 	bl	800028c <__adddf3>
 80169b4:	4606      	mov	r6, r0
 80169b6:	4628      	mov	r0, r5
 80169b8:	460f      	mov	r7, r1
 80169ba:	f7e9 fdb3 	bl	8000524 <__aeabi_i2d>
 80169be:	a364      	add	r3, pc, #400	; (adr r3, 8016b50 <_dtoa_r+0x2e0>)
 80169c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169c4:	f7e9 fe18 	bl	80005f8 <__aeabi_dmul>
 80169c8:	4602      	mov	r2, r0
 80169ca:	460b      	mov	r3, r1
 80169cc:	4630      	mov	r0, r6
 80169ce:	4639      	mov	r1, r7
 80169d0:	f7e9 fc5c 	bl	800028c <__adddf3>
 80169d4:	4606      	mov	r6, r0
 80169d6:	460f      	mov	r7, r1
 80169d8:	f7ea f8be 	bl	8000b58 <__aeabi_d2iz>
 80169dc:	2200      	movs	r2, #0
 80169de:	4683      	mov	fp, r0
 80169e0:	2300      	movs	r3, #0
 80169e2:	4630      	mov	r0, r6
 80169e4:	4639      	mov	r1, r7
 80169e6:	f7ea f879 	bl	8000adc <__aeabi_dcmplt>
 80169ea:	b148      	cbz	r0, 8016a00 <_dtoa_r+0x190>
 80169ec:	4658      	mov	r0, fp
 80169ee:	f7e9 fd99 	bl	8000524 <__aeabi_i2d>
 80169f2:	4632      	mov	r2, r6
 80169f4:	463b      	mov	r3, r7
 80169f6:	f7ea f867 	bl	8000ac8 <__aeabi_dcmpeq>
 80169fa:	b908      	cbnz	r0, 8016a00 <_dtoa_r+0x190>
 80169fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016a00:	f1bb 0f16 	cmp.w	fp, #22
 8016a04:	d857      	bhi.n	8016ab6 <_dtoa_r+0x246>
 8016a06:	4b5b      	ldr	r3, [pc, #364]	; (8016b74 <_dtoa_r+0x304>)
 8016a08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a10:	ec51 0b18 	vmov	r0, r1, d8
 8016a14:	f7ea f862 	bl	8000adc <__aeabi_dcmplt>
 8016a18:	2800      	cmp	r0, #0
 8016a1a:	d04e      	beq.n	8016aba <_dtoa_r+0x24a>
 8016a1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016a20:	2300      	movs	r3, #0
 8016a22:	930c      	str	r3, [sp, #48]	; 0x30
 8016a24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a26:	1b5b      	subs	r3, r3, r5
 8016a28:	1e5a      	subs	r2, r3, #1
 8016a2a:	bf45      	ittet	mi
 8016a2c:	f1c3 0301 	rsbmi	r3, r3, #1
 8016a30:	9305      	strmi	r3, [sp, #20]
 8016a32:	2300      	movpl	r3, #0
 8016a34:	2300      	movmi	r3, #0
 8016a36:	9206      	str	r2, [sp, #24]
 8016a38:	bf54      	ite	pl
 8016a3a:	9305      	strpl	r3, [sp, #20]
 8016a3c:	9306      	strmi	r3, [sp, #24]
 8016a3e:	f1bb 0f00 	cmp.w	fp, #0
 8016a42:	db3c      	blt.n	8016abe <_dtoa_r+0x24e>
 8016a44:	9b06      	ldr	r3, [sp, #24]
 8016a46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8016a4a:	445b      	add	r3, fp
 8016a4c:	9306      	str	r3, [sp, #24]
 8016a4e:	2300      	movs	r3, #0
 8016a50:	9308      	str	r3, [sp, #32]
 8016a52:	9b07      	ldr	r3, [sp, #28]
 8016a54:	2b09      	cmp	r3, #9
 8016a56:	d868      	bhi.n	8016b2a <_dtoa_r+0x2ba>
 8016a58:	2b05      	cmp	r3, #5
 8016a5a:	bfc4      	itt	gt
 8016a5c:	3b04      	subgt	r3, #4
 8016a5e:	9307      	strgt	r3, [sp, #28]
 8016a60:	9b07      	ldr	r3, [sp, #28]
 8016a62:	f1a3 0302 	sub.w	r3, r3, #2
 8016a66:	bfcc      	ite	gt
 8016a68:	2500      	movgt	r5, #0
 8016a6a:	2501      	movle	r5, #1
 8016a6c:	2b03      	cmp	r3, #3
 8016a6e:	f200 8085 	bhi.w	8016b7c <_dtoa_r+0x30c>
 8016a72:	e8df f003 	tbb	[pc, r3]
 8016a76:	3b2e      	.short	0x3b2e
 8016a78:	5839      	.short	0x5839
 8016a7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016a7e:	441d      	add	r5, r3
 8016a80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016a84:	2b20      	cmp	r3, #32
 8016a86:	bfc1      	itttt	gt
 8016a88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016a8c:	fa08 f803 	lslgt.w	r8, r8, r3
 8016a90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8016a94:	fa26 f303 	lsrgt.w	r3, r6, r3
 8016a98:	bfd6      	itet	le
 8016a9a:	f1c3 0320 	rsble	r3, r3, #32
 8016a9e:	ea48 0003 	orrgt.w	r0, r8, r3
 8016aa2:	fa06 f003 	lslle.w	r0, r6, r3
 8016aa6:	f7e9 fd2d 	bl	8000504 <__aeabi_ui2d>
 8016aaa:	2201      	movs	r2, #1
 8016aac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8016ab0:	3d01      	subs	r5, #1
 8016ab2:	920e      	str	r2, [sp, #56]	; 0x38
 8016ab4:	e76f      	b.n	8016996 <_dtoa_r+0x126>
 8016ab6:	2301      	movs	r3, #1
 8016ab8:	e7b3      	b.n	8016a22 <_dtoa_r+0x1b2>
 8016aba:	900c      	str	r0, [sp, #48]	; 0x30
 8016abc:	e7b2      	b.n	8016a24 <_dtoa_r+0x1b4>
 8016abe:	9b05      	ldr	r3, [sp, #20]
 8016ac0:	eba3 030b 	sub.w	r3, r3, fp
 8016ac4:	9305      	str	r3, [sp, #20]
 8016ac6:	f1cb 0300 	rsb	r3, fp, #0
 8016aca:	9308      	str	r3, [sp, #32]
 8016acc:	2300      	movs	r3, #0
 8016ace:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ad0:	e7bf      	b.n	8016a52 <_dtoa_r+0x1e2>
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8016ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	dc52      	bgt.n	8016b82 <_dtoa_r+0x312>
 8016adc:	2301      	movs	r3, #1
 8016ade:	9301      	str	r3, [sp, #4]
 8016ae0:	9304      	str	r3, [sp, #16]
 8016ae2:	461a      	mov	r2, r3
 8016ae4:	920a      	str	r2, [sp, #40]	; 0x28
 8016ae6:	e00b      	b.n	8016b00 <_dtoa_r+0x290>
 8016ae8:	2301      	movs	r3, #1
 8016aea:	e7f3      	b.n	8016ad4 <_dtoa_r+0x264>
 8016aec:	2300      	movs	r3, #0
 8016aee:	9309      	str	r3, [sp, #36]	; 0x24
 8016af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016af2:	445b      	add	r3, fp
 8016af4:	9301      	str	r3, [sp, #4]
 8016af6:	3301      	adds	r3, #1
 8016af8:	2b01      	cmp	r3, #1
 8016afa:	9304      	str	r3, [sp, #16]
 8016afc:	bfb8      	it	lt
 8016afe:	2301      	movlt	r3, #1
 8016b00:	69e0      	ldr	r0, [r4, #28]
 8016b02:	2100      	movs	r1, #0
 8016b04:	2204      	movs	r2, #4
 8016b06:	f102 0614 	add.w	r6, r2, #20
 8016b0a:	429e      	cmp	r6, r3
 8016b0c:	d93d      	bls.n	8016b8a <_dtoa_r+0x31a>
 8016b0e:	6041      	str	r1, [r0, #4]
 8016b10:	4620      	mov	r0, r4
 8016b12:	f001 f855 	bl	8017bc0 <_Balloc>
 8016b16:	9000      	str	r0, [sp, #0]
 8016b18:	2800      	cmp	r0, #0
 8016b1a:	d139      	bne.n	8016b90 <_dtoa_r+0x320>
 8016b1c:	4b16      	ldr	r3, [pc, #88]	; (8016b78 <_dtoa_r+0x308>)
 8016b1e:	4602      	mov	r2, r0
 8016b20:	f240 11af 	movw	r1, #431	; 0x1af
 8016b24:	e6bd      	b.n	80168a2 <_dtoa_r+0x32>
 8016b26:	2301      	movs	r3, #1
 8016b28:	e7e1      	b.n	8016aee <_dtoa_r+0x27e>
 8016b2a:	2501      	movs	r5, #1
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	9307      	str	r3, [sp, #28]
 8016b30:	9509      	str	r5, [sp, #36]	; 0x24
 8016b32:	f04f 33ff 	mov.w	r3, #4294967295
 8016b36:	9301      	str	r3, [sp, #4]
 8016b38:	9304      	str	r3, [sp, #16]
 8016b3a:	2200      	movs	r2, #0
 8016b3c:	2312      	movs	r3, #18
 8016b3e:	e7d1      	b.n	8016ae4 <_dtoa_r+0x274>
 8016b40:	636f4361 	.word	0x636f4361
 8016b44:	3fd287a7 	.word	0x3fd287a7
 8016b48:	8b60c8b3 	.word	0x8b60c8b3
 8016b4c:	3fc68a28 	.word	0x3fc68a28
 8016b50:	509f79fb 	.word	0x509f79fb
 8016b54:	3fd34413 	.word	0x3fd34413
 8016b58:	0801cb2a 	.word	0x0801cb2a
 8016b5c:	0801cbec 	.word	0x0801cbec
 8016b60:	7ff00000 	.word	0x7ff00000
 8016b64:	0801cbe8 	.word	0x0801cbe8
 8016b68:	0801cbdf 	.word	0x0801cbdf
 8016b6c:	0801cb02 	.word	0x0801cb02
 8016b70:	3ff80000 	.word	0x3ff80000
 8016b74:	0801cd38 	.word	0x0801cd38
 8016b78:	0801cc44 	.word	0x0801cc44
 8016b7c:	2301      	movs	r3, #1
 8016b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8016b80:	e7d7      	b.n	8016b32 <_dtoa_r+0x2c2>
 8016b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b84:	9301      	str	r3, [sp, #4]
 8016b86:	9304      	str	r3, [sp, #16]
 8016b88:	e7ba      	b.n	8016b00 <_dtoa_r+0x290>
 8016b8a:	3101      	adds	r1, #1
 8016b8c:	0052      	lsls	r2, r2, #1
 8016b8e:	e7ba      	b.n	8016b06 <_dtoa_r+0x296>
 8016b90:	69e3      	ldr	r3, [r4, #28]
 8016b92:	9a00      	ldr	r2, [sp, #0]
 8016b94:	601a      	str	r2, [r3, #0]
 8016b96:	9b04      	ldr	r3, [sp, #16]
 8016b98:	2b0e      	cmp	r3, #14
 8016b9a:	f200 80a8 	bhi.w	8016cee <_dtoa_r+0x47e>
 8016b9e:	2d00      	cmp	r5, #0
 8016ba0:	f000 80a5 	beq.w	8016cee <_dtoa_r+0x47e>
 8016ba4:	f1bb 0f00 	cmp.w	fp, #0
 8016ba8:	dd38      	ble.n	8016c1c <_dtoa_r+0x3ac>
 8016baa:	4bc0      	ldr	r3, [pc, #768]	; (8016eac <_dtoa_r+0x63c>)
 8016bac:	f00b 020f 	and.w	r2, fp, #15
 8016bb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016bb4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8016bb8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8016bbc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8016bc0:	d019      	beq.n	8016bf6 <_dtoa_r+0x386>
 8016bc2:	4bbb      	ldr	r3, [pc, #748]	; (8016eb0 <_dtoa_r+0x640>)
 8016bc4:	ec51 0b18 	vmov	r0, r1, d8
 8016bc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016bcc:	f7e9 fe3e 	bl	800084c <__aeabi_ddiv>
 8016bd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016bd4:	f008 080f 	and.w	r8, r8, #15
 8016bd8:	2503      	movs	r5, #3
 8016bda:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8016eb0 <_dtoa_r+0x640>
 8016bde:	f1b8 0f00 	cmp.w	r8, #0
 8016be2:	d10a      	bne.n	8016bfa <_dtoa_r+0x38a>
 8016be4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016be8:	4632      	mov	r2, r6
 8016bea:	463b      	mov	r3, r7
 8016bec:	f7e9 fe2e 	bl	800084c <__aeabi_ddiv>
 8016bf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016bf4:	e02b      	b.n	8016c4e <_dtoa_r+0x3de>
 8016bf6:	2502      	movs	r5, #2
 8016bf8:	e7ef      	b.n	8016bda <_dtoa_r+0x36a>
 8016bfa:	f018 0f01 	tst.w	r8, #1
 8016bfe:	d008      	beq.n	8016c12 <_dtoa_r+0x3a2>
 8016c00:	4630      	mov	r0, r6
 8016c02:	4639      	mov	r1, r7
 8016c04:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016c08:	f7e9 fcf6 	bl	80005f8 <__aeabi_dmul>
 8016c0c:	3501      	adds	r5, #1
 8016c0e:	4606      	mov	r6, r0
 8016c10:	460f      	mov	r7, r1
 8016c12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016c16:	f109 0908 	add.w	r9, r9, #8
 8016c1a:	e7e0      	b.n	8016bde <_dtoa_r+0x36e>
 8016c1c:	f000 809f 	beq.w	8016d5e <_dtoa_r+0x4ee>
 8016c20:	f1cb 0600 	rsb	r6, fp, #0
 8016c24:	4ba1      	ldr	r3, [pc, #644]	; (8016eac <_dtoa_r+0x63c>)
 8016c26:	4fa2      	ldr	r7, [pc, #648]	; (8016eb0 <_dtoa_r+0x640>)
 8016c28:	f006 020f 	and.w	r2, r6, #15
 8016c2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c34:	ec51 0b18 	vmov	r0, r1, d8
 8016c38:	f7e9 fcde 	bl	80005f8 <__aeabi_dmul>
 8016c3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016c40:	1136      	asrs	r6, r6, #4
 8016c42:	2300      	movs	r3, #0
 8016c44:	2502      	movs	r5, #2
 8016c46:	2e00      	cmp	r6, #0
 8016c48:	d17e      	bne.n	8016d48 <_dtoa_r+0x4d8>
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d1d0      	bne.n	8016bf0 <_dtoa_r+0x380>
 8016c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	f000 8084 	beq.w	8016d62 <_dtoa_r+0x4f2>
 8016c5a:	4b96      	ldr	r3, [pc, #600]	; (8016eb4 <_dtoa_r+0x644>)
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	4640      	mov	r0, r8
 8016c60:	4649      	mov	r1, r9
 8016c62:	f7e9 ff3b 	bl	8000adc <__aeabi_dcmplt>
 8016c66:	2800      	cmp	r0, #0
 8016c68:	d07b      	beq.n	8016d62 <_dtoa_r+0x4f2>
 8016c6a:	9b04      	ldr	r3, [sp, #16]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d078      	beq.n	8016d62 <_dtoa_r+0x4f2>
 8016c70:	9b01      	ldr	r3, [sp, #4]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	dd39      	ble.n	8016cea <_dtoa_r+0x47a>
 8016c76:	4b90      	ldr	r3, [pc, #576]	; (8016eb8 <_dtoa_r+0x648>)
 8016c78:	2200      	movs	r2, #0
 8016c7a:	4640      	mov	r0, r8
 8016c7c:	4649      	mov	r1, r9
 8016c7e:	f7e9 fcbb 	bl	80005f8 <__aeabi_dmul>
 8016c82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016c86:	9e01      	ldr	r6, [sp, #4]
 8016c88:	f10b 37ff 	add.w	r7, fp, #4294967295
 8016c8c:	3501      	adds	r5, #1
 8016c8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016c92:	4628      	mov	r0, r5
 8016c94:	f7e9 fc46 	bl	8000524 <__aeabi_i2d>
 8016c98:	4642      	mov	r2, r8
 8016c9a:	464b      	mov	r3, r9
 8016c9c:	f7e9 fcac 	bl	80005f8 <__aeabi_dmul>
 8016ca0:	4b86      	ldr	r3, [pc, #536]	; (8016ebc <_dtoa_r+0x64c>)
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	f7e9 faf2 	bl	800028c <__adddf3>
 8016ca8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8016cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016cb0:	9303      	str	r3, [sp, #12]
 8016cb2:	2e00      	cmp	r6, #0
 8016cb4:	d158      	bne.n	8016d68 <_dtoa_r+0x4f8>
 8016cb6:	4b82      	ldr	r3, [pc, #520]	; (8016ec0 <_dtoa_r+0x650>)
 8016cb8:	2200      	movs	r2, #0
 8016cba:	4640      	mov	r0, r8
 8016cbc:	4649      	mov	r1, r9
 8016cbe:	f7e9 fae3 	bl	8000288 <__aeabi_dsub>
 8016cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016cc6:	4680      	mov	r8, r0
 8016cc8:	4689      	mov	r9, r1
 8016cca:	f7e9 ff25 	bl	8000b18 <__aeabi_dcmpgt>
 8016cce:	2800      	cmp	r0, #0
 8016cd0:	f040 8296 	bne.w	8017200 <_dtoa_r+0x990>
 8016cd4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016cd8:	4640      	mov	r0, r8
 8016cda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016cde:	4649      	mov	r1, r9
 8016ce0:	f7e9 fefc 	bl	8000adc <__aeabi_dcmplt>
 8016ce4:	2800      	cmp	r0, #0
 8016ce6:	f040 8289 	bne.w	80171fc <_dtoa_r+0x98c>
 8016cea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8016cee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	f2c0 814e 	blt.w	8016f92 <_dtoa_r+0x722>
 8016cf6:	f1bb 0f0e 	cmp.w	fp, #14
 8016cfa:	f300 814a 	bgt.w	8016f92 <_dtoa_r+0x722>
 8016cfe:	4b6b      	ldr	r3, [pc, #428]	; (8016eac <_dtoa_r+0x63c>)
 8016d00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016d04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	f280 80dc 	bge.w	8016ec8 <_dtoa_r+0x658>
 8016d10:	9b04      	ldr	r3, [sp, #16]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	f300 80d8 	bgt.w	8016ec8 <_dtoa_r+0x658>
 8016d18:	f040 826f 	bne.w	80171fa <_dtoa_r+0x98a>
 8016d1c:	4b68      	ldr	r3, [pc, #416]	; (8016ec0 <_dtoa_r+0x650>)
 8016d1e:	2200      	movs	r2, #0
 8016d20:	4640      	mov	r0, r8
 8016d22:	4649      	mov	r1, r9
 8016d24:	f7e9 fc68 	bl	80005f8 <__aeabi_dmul>
 8016d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016d2c:	f7e9 feea 	bl	8000b04 <__aeabi_dcmpge>
 8016d30:	9e04      	ldr	r6, [sp, #16]
 8016d32:	4637      	mov	r7, r6
 8016d34:	2800      	cmp	r0, #0
 8016d36:	f040 8245 	bne.w	80171c4 <_dtoa_r+0x954>
 8016d3a:	9d00      	ldr	r5, [sp, #0]
 8016d3c:	2331      	movs	r3, #49	; 0x31
 8016d3e:	f805 3b01 	strb.w	r3, [r5], #1
 8016d42:	f10b 0b01 	add.w	fp, fp, #1
 8016d46:	e241      	b.n	80171cc <_dtoa_r+0x95c>
 8016d48:	07f2      	lsls	r2, r6, #31
 8016d4a:	d505      	bpl.n	8016d58 <_dtoa_r+0x4e8>
 8016d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016d50:	f7e9 fc52 	bl	80005f8 <__aeabi_dmul>
 8016d54:	3501      	adds	r5, #1
 8016d56:	2301      	movs	r3, #1
 8016d58:	1076      	asrs	r6, r6, #1
 8016d5a:	3708      	adds	r7, #8
 8016d5c:	e773      	b.n	8016c46 <_dtoa_r+0x3d6>
 8016d5e:	2502      	movs	r5, #2
 8016d60:	e775      	b.n	8016c4e <_dtoa_r+0x3de>
 8016d62:	9e04      	ldr	r6, [sp, #16]
 8016d64:	465f      	mov	r7, fp
 8016d66:	e792      	b.n	8016c8e <_dtoa_r+0x41e>
 8016d68:	9900      	ldr	r1, [sp, #0]
 8016d6a:	4b50      	ldr	r3, [pc, #320]	; (8016eac <_dtoa_r+0x63c>)
 8016d6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016d70:	4431      	add	r1, r6
 8016d72:	9102      	str	r1, [sp, #8]
 8016d74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016d76:	eeb0 9a47 	vmov.f32	s18, s14
 8016d7a:	eef0 9a67 	vmov.f32	s19, s15
 8016d7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016d82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016d86:	2900      	cmp	r1, #0
 8016d88:	d044      	beq.n	8016e14 <_dtoa_r+0x5a4>
 8016d8a:	494e      	ldr	r1, [pc, #312]	; (8016ec4 <_dtoa_r+0x654>)
 8016d8c:	2000      	movs	r0, #0
 8016d8e:	f7e9 fd5d 	bl	800084c <__aeabi_ddiv>
 8016d92:	ec53 2b19 	vmov	r2, r3, d9
 8016d96:	f7e9 fa77 	bl	8000288 <__aeabi_dsub>
 8016d9a:	9d00      	ldr	r5, [sp, #0]
 8016d9c:	ec41 0b19 	vmov	d9, r0, r1
 8016da0:	4649      	mov	r1, r9
 8016da2:	4640      	mov	r0, r8
 8016da4:	f7e9 fed8 	bl	8000b58 <__aeabi_d2iz>
 8016da8:	4606      	mov	r6, r0
 8016daa:	f7e9 fbbb 	bl	8000524 <__aeabi_i2d>
 8016dae:	4602      	mov	r2, r0
 8016db0:	460b      	mov	r3, r1
 8016db2:	4640      	mov	r0, r8
 8016db4:	4649      	mov	r1, r9
 8016db6:	f7e9 fa67 	bl	8000288 <__aeabi_dsub>
 8016dba:	3630      	adds	r6, #48	; 0x30
 8016dbc:	f805 6b01 	strb.w	r6, [r5], #1
 8016dc0:	ec53 2b19 	vmov	r2, r3, d9
 8016dc4:	4680      	mov	r8, r0
 8016dc6:	4689      	mov	r9, r1
 8016dc8:	f7e9 fe88 	bl	8000adc <__aeabi_dcmplt>
 8016dcc:	2800      	cmp	r0, #0
 8016dce:	d164      	bne.n	8016e9a <_dtoa_r+0x62a>
 8016dd0:	4642      	mov	r2, r8
 8016dd2:	464b      	mov	r3, r9
 8016dd4:	4937      	ldr	r1, [pc, #220]	; (8016eb4 <_dtoa_r+0x644>)
 8016dd6:	2000      	movs	r0, #0
 8016dd8:	f7e9 fa56 	bl	8000288 <__aeabi_dsub>
 8016ddc:	ec53 2b19 	vmov	r2, r3, d9
 8016de0:	f7e9 fe7c 	bl	8000adc <__aeabi_dcmplt>
 8016de4:	2800      	cmp	r0, #0
 8016de6:	f040 80b6 	bne.w	8016f56 <_dtoa_r+0x6e6>
 8016dea:	9b02      	ldr	r3, [sp, #8]
 8016dec:	429d      	cmp	r5, r3
 8016dee:	f43f af7c 	beq.w	8016cea <_dtoa_r+0x47a>
 8016df2:	4b31      	ldr	r3, [pc, #196]	; (8016eb8 <_dtoa_r+0x648>)
 8016df4:	ec51 0b19 	vmov	r0, r1, d9
 8016df8:	2200      	movs	r2, #0
 8016dfa:	f7e9 fbfd 	bl	80005f8 <__aeabi_dmul>
 8016dfe:	4b2e      	ldr	r3, [pc, #184]	; (8016eb8 <_dtoa_r+0x648>)
 8016e00:	ec41 0b19 	vmov	d9, r0, r1
 8016e04:	2200      	movs	r2, #0
 8016e06:	4640      	mov	r0, r8
 8016e08:	4649      	mov	r1, r9
 8016e0a:	f7e9 fbf5 	bl	80005f8 <__aeabi_dmul>
 8016e0e:	4680      	mov	r8, r0
 8016e10:	4689      	mov	r9, r1
 8016e12:	e7c5      	b.n	8016da0 <_dtoa_r+0x530>
 8016e14:	ec51 0b17 	vmov	r0, r1, d7
 8016e18:	f7e9 fbee 	bl	80005f8 <__aeabi_dmul>
 8016e1c:	9b02      	ldr	r3, [sp, #8]
 8016e1e:	9d00      	ldr	r5, [sp, #0]
 8016e20:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e22:	ec41 0b19 	vmov	d9, r0, r1
 8016e26:	4649      	mov	r1, r9
 8016e28:	4640      	mov	r0, r8
 8016e2a:	f7e9 fe95 	bl	8000b58 <__aeabi_d2iz>
 8016e2e:	4606      	mov	r6, r0
 8016e30:	f7e9 fb78 	bl	8000524 <__aeabi_i2d>
 8016e34:	3630      	adds	r6, #48	; 0x30
 8016e36:	4602      	mov	r2, r0
 8016e38:	460b      	mov	r3, r1
 8016e3a:	4640      	mov	r0, r8
 8016e3c:	4649      	mov	r1, r9
 8016e3e:	f7e9 fa23 	bl	8000288 <__aeabi_dsub>
 8016e42:	f805 6b01 	strb.w	r6, [r5], #1
 8016e46:	9b02      	ldr	r3, [sp, #8]
 8016e48:	429d      	cmp	r5, r3
 8016e4a:	4680      	mov	r8, r0
 8016e4c:	4689      	mov	r9, r1
 8016e4e:	f04f 0200 	mov.w	r2, #0
 8016e52:	d124      	bne.n	8016e9e <_dtoa_r+0x62e>
 8016e54:	4b1b      	ldr	r3, [pc, #108]	; (8016ec4 <_dtoa_r+0x654>)
 8016e56:	ec51 0b19 	vmov	r0, r1, d9
 8016e5a:	f7e9 fa17 	bl	800028c <__adddf3>
 8016e5e:	4602      	mov	r2, r0
 8016e60:	460b      	mov	r3, r1
 8016e62:	4640      	mov	r0, r8
 8016e64:	4649      	mov	r1, r9
 8016e66:	f7e9 fe57 	bl	8000b18 <__aeabi_dcmpgt>
 8016e6a:	2800      	cmp	r0, #0
 8016e6c:	d173      	bne.n	8016f56 <_dtoa_r+0x6e6>
 8016e6e:	ec53 2b19 	vmov	r2, r3, d9
 8016e72:	4914      	ldr	r1, [pc, #80]	; (8016ec4 <_dtoa_r+0x654>)
 8016e74:	2000      	movs	r0, #0
 8016e76:	f7e9 fa07 	bl	8000288 <__aeabi_dsub>
 8016e7a:	4602      	mov	r2, r0
 8016e7c:	460b      	mov	r3, r1
 8016e7e:	4640      	mov	r0, r8
 8016e80:	4649      	mov	r1, r9
 8016e82:	f7e9 fe2b 	bl	8000adc <__aeabi_dcmplt>
 8016e86:	2800      	cmp	r0, #0
 8016e88:	f43f af2f 	beq.w	8016cea <_dtoa_r+0x47a>
 8016e8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016e8e:	1e6b      	subs	r3, r5, #1
 8016e90:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016e96:	2b30      	cmp	r3, #48	; 0x30
 8016e98:	d0f8      	beq.n	8016e8c <_dtoa_r+0x61c>
 8016e9a:	46bb      	mov	fp, r7
 8016e9c:	e04a      	b.n	8016f34 <_dtoa_r+0x6c4>
 8016e9e:	4b06      	ldr	r3, [pc, #24]	; (8016eb8 <_dtoa_r+0x648>)
 8016ea0:	f7e9 fbaa 	bl	80005f8 <__aeabi_dmul>
 8016ea4:	4680      	mov	r8, r0
 8016ea6:	4689      	mov	r9, r1
 8016ea8:	e7bd      	b.n	8016e26 <_dtoa_r+0x5b6>
 8016eaa:	bf00      	nop
 8016eac:	0801cd38 	.word	0x0801cd38
 8016eb0:	0801cd10 	.word	0x0801cd10
 8016eb4:	3ff00000 	.word	0x3ff00000
 8016eb8:	40240000 	.word	0x40240000
 8016ebc:	401c0000 	.word	0x401c0000
 8016ec0:	40140000 	.word	0x40140000
 8016ec4:	3fe00000 	.word	0x3fe00000
 8016ec8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016ecc:	9d00      	ldr	r5, [sp, #0]
 8016ece:	4642      	mov	r2, r8
 8016ed0:	464b      	mov	r3, r9
 8016ed2:	4630      	mov	r0, r6
 8016ed4:	4639      	mov	r1, r7
 8016ed6:	f7e9 fcb9 	bl	800084c <__aeabi_ddiv>
 8016eda:	f7e9 fe3d 	bl	8000b58 <__aeabi_d2iz>
 8016ede:	9001      	str	r0, [sp, #4]
 8016ee0:	f7e9 fb20 	bl	8000524 <__aeabi_i2d>
 8016ee4:	4642      	mov	r2, r8
 8016ee6:	464b      	mov	r3, r9
 8016ee8:	f7e9 fb86 	bl	80005f8 <__aeabi_dmul>
 8016eec:	4602      	mov	r2, r0
 8016eee:	460b      	mov	r3, r1
 8016ef0:	4630      	mov	r0, r6
 8016ef2:	4639      	mov	r1, r7
 8016ef4:	f7e9 f9c8 	bl	8000288 <__aeabi_dsub>
 8016ef8:	9e01      	ldr	r6, [sp, #4]
 8016efa:	9f04      	ldr	r7, [sp, #16]
 8016efc:	3630      	adds	r6, #48	; 0x30
 8016efe:	f805 6b01 	strb.w	r6, [r5], #1
 8016f02:	9e00      	ldr	r6, [sp, #0]
 8016f04:	1bae      	subs	r6, r5, r6
 8016f06:	42b7      	cmp	r7, r6
 8016f08:	4602      	mov	r2, r0
 8016f0a:	460b      	mov	r3, r1
 8016f0c:	d134      	bne.n	8016f78 <_dtoa_r+0x708>
 8016f0e:	f7e9 f9bd 	bl	800028c <__adddf3>
 8016f12:	4642      	mov	r2, r8
 8016f14:	464b      	mov	r3, r9
 8016f16:	4606      	mov	r6, r0
 8016f18:	460f      	mov	r7, r1
 8016f1a:	f7e9 fdfd 	bl	8000b18 <__aeabi_dcmpgt>
 8016f1e:	b9c8      	cbnz	r0, 8016f54 <_dtoa_r+0x6e4>
 8016f20:	4642      	mov	r2, r8
 8016f22:	464b      	mov	r3, r9
 8016f24:	4630      	mov	r0, r6
 8016f26:	4639      	mov	r1, r7
 8016f28:	f7e9 fdce 	bl	8000ac8 <__aeabi_dcmpeq>
 8016f2c:	b110      	cbz	r0, 8016f34 <_dtoa_r+0x6c4>
 8016f2e:	9b01      	ldr	r3, [sp, #4]
 8016f30:	07db      	lsls	r3, r3, #31
 8016f32:	d40f      	bmi.n	8016f54 <_dtoa_r+0x6e4>
 8016f34:	4651      	mov	r1, sl
 8016f36:	4620      	mov	r0, r4
 8016f38:	f000 fe82 	bl	8017c40 <_Bfree>
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016f40:	702b      	strb	r3, [r5, #0]
 8016f42:	f10b 0301 	add.w	r3, fp, #1
 8016f46:	6013      	str	r3, [r2, #0]
 8016f48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	f43f ace2 	beq.w	8016914 <_dtoa_r+0xa4>
 8016f50:	601d      	str	r5, [r3, #0]
 8016f52:	e4df      	b.n	8016914 <_dtoa_r+0xa4>
 8016f54:	465f      	mov	r7, fp
 8016f56:	462b      	mov	r3, r5
 8016f58:	461d      	mov	r5, r3
 8016f5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016f5e:	2a39      	cmp	r2, #57	; 0x39
 8016f60:	d106      	bne.n	8016f70 <_dtoa_r+0x700>
 8016f62:	9a00      	ldr	r2, [sp, #0]
 8016f64:	429a      	cmp	r2, r3
 8016f66:	d1f7      	bne.n	8016f58 <_dtoa_r+0x6e8>
 8016f68:	9900      	ldr	r1, [sp, #0]
 8016f6a:	2230      	movs	r2, #48	; 0x30
 8016f6c:	3701      	adds	r7, #1
 8016f6e:	700a      	strb	r2, [r1, #0]
 8016f70:	781a      	ldrb	r2, [r3, #0]
 8016f72:	3201      	adds	r2, #1
 8016f74:	701a      	strb	r2, [r3, #0]
 8016f76:	e790      	b.n	8016e9a <_dtoa_r+0x62a>
 8016f78:	4ba3      	ldr	r3, [pc, #652]	; (8017208 <_dtoa_r+0x998>)
 8016f7a:	2200      	movs	r2, #0
 8016f7c:	f7e9 fb3c 	bl	80005f8 <__aeabi_dmul>
 8016f80:	2200      	movs	r2, #0
 8016f82:	2300      	movs	r3, #0
 8016f84:	4606      	mov	r6, r0
 8016f86:	460f      	mov	r7, r1
 8016f88:	f7e9 fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8016f8c:	2800      	cmp	r0, #0
 8016f8e:	d09e      	beq.n	8016ece <_dtoa_r+0x65e>
 8016f90:	e7d0      	b.n	8016f34 <_dtoa_r+0x6c4>
 8016f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f94:	2a00      	cmp	r2, #0
 8016f96:	f000 80ca 	beq.w	801712e <_dtoa_r+0x8be>
 8016f9a:	9a07      	ldr	r2, [sp, #28]
 8016f9c:	2a01      	cmp	r2, #1
 8016f9e:	f300 80ad 	bgt.w	80170fc <_dtoa_r+0x88c>
 8016fa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016fa4:	2a00      	cmp	r2, #0
 8016fa6:	f000 80a5 	beq.w	80170f4 <_dtoa_r+0x884>
 8016faa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016fae:	9e08      	ldr	r6, [sp, #32]
 8016fb0:	9d05      	ldr	r5, [sp, #20]
 8016fb2:	9a05      	ldr	r2, [sp, #20]
 8016fb4:	441a      	add	r2, r3
 8016fb6:	9205      	str	r2, [sp, #20]
 8016fb8:	9a06      	ldr	r2, [sp, #24]
 8016fba:	2101      	movs	r1, #1
 8016fbc:	441a      	add	r2, r3
 8016fbe:	4620      	mov	r0, r4
 8016fc0:	9206      	str	r2, [sp, #24]
 8016fc2:	f000 ff3d 	bl	8017e40 <__i2b>
 8016fc6:	4607      	mov	r7, r0
 8016fc8:	b165      	cbz	r5, 8016fe4 <_dtoa_r+0x774>
 8016fca:	9b06      	ldr	r3, [sp, #24]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	dd09      	ble.n	8016fe4 <_dtoa_r+0x774>
 8016fd0:	42ab      	cmp	r3, r5
 8016fd2:	9a05      	ldr	r2, [sp, #20]
 8016fd4:	bfa8      	it	ge
 8016fd6:	462b      	movge	r3, r5
 8016fd8:	1ad2      	subs	r2, r2, r3
 8016fda:	9205      	str	r2, [sp, #20]
 8016fdc:	9a06      	ldr	r2, [sp, #24]
 8016fde:	1aed      	subs	r5, r5, r3
 8016fe0:	1ad3      	subs	r3, r2, r3
 8016fe2:	9306      	str	r3, [sp, #24]
 8016fe4:	9b08      	ldr	r3, [sp, #32]
 8016fe6:	b1f3      	cbz	r3, 8017026 <_dtoa_r+0x7b6>
 8016fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	f000 80a3 	beq.w	8017136 <_dtoa_r+0x8c6>
 8016ff0:	2e00      	cmp	r6, #0
 8016ff2:	dd10      	ble.n	8017016 <_dtoa_r+0x7a6>
 8016ff4:	4639      	mov	r1, r7
 8016ff6:	4632      	mov	r2, r6
 8016ff8:	4620      	mov	r0, r4
 8016ffa:	f000 ffe1 	bl	8017fc0 <__pow5mult>
 8016ffe:	4652      	mov	r2, sl
 8017000:	4601      	mov	r1, r0
 8017002:	4607      	mov	r7, r0
 8017004:	4620      	mov	r0, r4
 8017006:	f000 ff31 	bl	8017e6c <__multiply>
 801700a:	4651      	mov	r1, sl
 801700c:	4680      	mov	r8, r0
 801700e:	4620      	mov	r0, r4
 8017010:	f000 fe16 	bl	8017c40 <_Bfree>
 8017014:	46c2      	mov	sl, r8
 8017016:	9b08      	ldr	r3, [sp, #32]
 8017018:	1b9a      	subs	r2, r3, r6
 801701a:	d004      	beq.n	8017026 <_dtoa_r+0x7b6>
 801701c:	4651      	mov	r1, sl
 801701e:	4620      	mov	r0, r4
 8017020:	f000 ffce 	bl	8017fc0 <__pow5mult>
 8017024:	4682      	mov	sl, r0
 8017026:	2101      	movs	r1, #1
 8017028:	4620      	mov	r0, r4
 801702a:	f000 ff09 	bl	8017e40 <__i2b>
 801702e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017030:	2b00      	cmp	r3, #0
 8017032:	4606      	mov	r6, r0
 8017034:	f340 8081 	ble.w	801713a <_dtoa_r+0x8ca>
 8017038:	461a      	mov	r2, r3
 801703a:	4601      	mov	r1, r0
 801703c:	4620      	mov	r0, r4
 801703e:	f000 ffbf 	bl	8017fc0 <__pow5mult>
 8017042:	9b07      	ldr	r3, [sp, #28]
 8017044:	2b01      	cmp	r3, #1
 8017046:	4606      	mov	r6, r0
 8017048:	dd7a      	ble.n	8017140 <_dtoa_r+0x8d0>
 801704a:	f04f 0800 	mov.w	r8, #0
 801704e:	6933      	ldr	r3, [r6, #16]
 8017050:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017054:	6918      	ldr	r0, [r3, #16]
 8017056:	f000 fea5 	bl	8017da4 <__hi0bits>
 801705a:	f1c0 0020 	rsb	r0, r0, #32
 801705e:	9b06      	ldr	r3, [sp, #24]
 8017060:	4418      	add	r0, r3
 8017062:	f010 001f 	ands.w	r0, r0, #31
 8017066:	f000 8094 	beq.w	8017192 <_dtoa_r+0x922>
 801706a:	f1c0 0320 	rsb	r3, r0, #32
 801706e:	2b04      	cmp	r3, #4
 8017070:	f340 8085 	ble.w	801717e <_dtoa_r+0x90e>
 8017074:	9b05      	ldr	r3, [sp, #20]
 8017076:	f1c0 001c 	rsb	r0, r0, #28
 801707a:	4403      	add	r3, r0
 801707c:	9305      	str	r3, [sp, #20]
 801707e:	9b06      	ldr	r3, [sp, #24]
 8017080:	4403      	add	r3, r0
 8017082:	4405      	add	r5, r0
 8017084:	9306      	str	r3, [sp, #24]
 8017086:	9b05      	ldr	r3, [sp, #20]
 8017088:	2b00      	cmp	r3, #0
 801708a:	dd05      	ble.n	8017098 <_dtoa_r+0x828>
 801708c:	4651      	mov	r1, sl
 801708e:	461a      	mov	r2, r3
 8017090:	4620      	mov	r0, r4
 8017092:	f000 ffef 	bl	8018074 <__lshift>
 8017096:	4682      	mov	sl, r0
 8017098:	9b06      	ldr	r3, [sp, #24]
 801709a:	2b00      	cmp	r3, #0
 801709c:	dd05      	ble.n	80170aa <_dtoa_r+0x83a>
 801709e:	4631      	mov	r1, r6
 80170a0:	461a      	mov	r2, r3
 80170a2:	4620      	mov	r0, r4
 80170a4:	f000 ffe6 	bl	8018074 <__lshift>
 80170a8:	4606      	mov	r6, r0
 80170aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d072      	beq.n	8017196 <_dtoa_r+0x926>
 80170b0:	4631      	mov	r1, r6
 80170b2:	4650      	mov	r0, sl
 80170b4:	f001 f84a 	bl	801814c <__mcmp>
 80170b8:	2800      	cmp	r0, #0
 80170ba:	da6c      	bge.n	8017196 <_dtoa_r+0x926>
 80170bc:	2300      	movs	r3, #0
 80170be:	4651      	mov	r1, sl
 80170c0:	220a      	movs	r2, #10
 80170c2:	4620      	mov	r0, r4
 80170c4:	f000 fdde 	bl	8017c84 <__multadd>
 80170c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80170ce:	4682      	mov	sl, r0
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	f000 81b0 	beq.w	8017436 <_dtoa_r+0xbc6>
 80170d6:	2300      	movs	r3, #0
 80170d8:	4639      	mov	r1, r7
 80170da:	220a      	movs	r2, #10
 80170dc:	4620      	mov	r0, r4
 80170de:	f000 fdd1 	bl	8017c84 <__multadd>
 80170e2:	9b01      	ldr	r3, [sp, #4]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	4607      	mov	r7, r0
 80170e8:	f300 8096 	bgt.w	8017218 <_dtoa_r+0x9a8>
 80170ec:	9b07      	ldr	r3, [sp, #28]
 80170ee:	2b02      	cmp	r3, #2
 80170f0:	dc59      	bgt.n	80171a6 <_dtoa_r+0x936>
 80170f2:	e091      	b.n	8017218 <_dtoa_r+0x9a8>
 80170f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80170f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80170fa:	e758      	b.n	8016fae <_dtoa_r+0x73e>
 80170fc:	9b04      	ldr	r3, [sp, #16]
 80170fe:	1e5e      	subs	r6, r3, #1
 8017100:	9b08      	ldr	r3, [sp, #32]
 8017102:	42b3      	cmp	r3, r6
 8017104:	bfbf      	itttt	lt
 8017106:	9b08      	ldrlt	r3, [sp, #32]
 8017108:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801710a:	9608      	strlt	r6, [sp, #32]
 801710c:	1af3      	sublt	r3, r6, r3
 801710e:	bfb4      	ite	lt
 8017110:	18d2      	addlt	r2, r2, r3
 8017112:	1b9e      	subge	r6, r3, r6
 8017114:	9b04      	ldr	r3, [sp, #16]
 8017116:	bfbc      	itt	lt
 8017118:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801711a:	2600      	movlt	r6, #0
 801711c:	2b00      	cmp	r3, #0
 801711e:	bfb7      	itett	lt
 8017120:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8017124:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8017128:	1a9d      	sublt	r5, r3, r2
 801712a:	2300      	movlt	r3, #0
 801712c:	e741      	b.n	8016fb2 <_dtoa_r+0x742>
 801712e:	9e08      	ldr	r6, [sp, #32]
 8017130:	9d05      	ldr	r5, [sp, #20]
 8017132:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017134:	e748      	b.n	8016fc8 <_dtoa_r+0x758>
 8017136:	9a08      	ldr	r2, [sp, #32]
 8017138:	e770      	b.n	801701c <_dtoa_r+0x7ac>
 801713a:	9b07      	ldr	r3, [sp, #28]
 801713c:	2b01      	cmp	r3, #1
 801713e:	dc19      	bgt.n	8017174 <_dtoa_r+0x904>
 8017140:	9b02      	ldr	r3, [sp, #8]
 8017142:	b9bb      	cbnz	r3, 8017174 <_dtoa_r+0x904>
 8017144:	9b03      	ldr	r3, [sp, #12]
 8017146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801714a:	b99b      	cbnz	r3, 8017174 <_dtoa_r+0x904>
 801714c:	9b03      	ldr	r3, [sp, #12]
 801714e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017152:	0d1b      	lsrs	r3, r3, #20
 8017154:	051b      	lsls	r3, r3, #20
 8017156:	b183      	cbz	r3, 801717a <_dtoa_r+0x90a>
 8017158:	9b05      	ldr	r3, [sp, #20]
 801715a:	3301      	adds	r3, #1
 801715c:	9305      	str	r3, [sp, #20]
 801715e:	9b06      	ldr	r3, [sp, #24]
 8017160:	3301      	adds	r3, #1
 8017162:	9306      	str	r3, [sp, #24]
 8017164:	f04f 0801 	mov.w	r8, #1
 8017168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801716a:	2b00      	cmp	r3, #0
 801716c:	f47f af6f 	bne.w	801704e <_dtoa_r+0x7de>
 8017170:	2001      	movs	r0, #1
 8017172:	e774      	b.n	801705e <_dtoa_r+0x7ee>
 8017174:	f04f 0800 	mov.w	r8, #0
 8017178:	e7f6      	b.n	8017168 <_dtoa_r+0x8f8>
 801717a:	4698      	mov	r8, r3
 801717c:	e7f4      	b.n	8017168 <_dtoa_r+0x8f8>
 801717e:	d082      	beq.n	8017086 <_dtoa_r+0x816>
 8017180:	9a05      	ldr	r2, [sp, #20]
 8017182:	331c      	adds	r3, #28
 8017184:	441a      	add	r2, r3
 8017186:	9205      	str	r2, [sp, #20]
 8017188:	9a06      	ldr	r2, [sp, #24]
 801718a:	441a      	add	r2, r3
 801718c:	441d      	add	r5, r3
 801718e:	9206      	str	r2, [sp, #24]
 8017190:	e779      	b.n	8017086 <_dtoa_r+0x816>
 8017192:	4603      	mov	r3, r0
 8017194:	e7f4      	b.n	8017180 <_dtoa_r+0x910>
 8017196:	9b04      	ldr	r3, [sp, #16]
 8017198:	2b00      	cmp	r3, #0
 801719a:	dc37      	bgt.n	801720c <_dtoa_r+0x99c>
 801719c:	9b07      	ldr	r3, [sp, #28]
 801719e:	2b02      	cmp	r3, #2
 80171a0:	dd34      	ble.n	801720c <_dtoa_r+0x99c>
 80171a2:	9b04      	ldr	r3, [sp, #16]
 80171a4:	9301      	str	r3, [sp, #4]
 80171a6:	9b01      	ldr	r3, [sp, #4]
 80171a8:	b963      	cbnz	r3, 80171c4 <_dtoa_r+0x954>
 80171aa:	4631      	mov	r1, r6
 80171ac:	2205      	movs	r2, #5
 80171ae:	4620      	mov	r0, r4
 80171b0:	f000 fd68 	bl	8017c84 <__multadd>
 80171b4:	4601      	mov	r1, r0
 80171b6:	4606      	mov	r6, r0
 80171b8:	4650      	mov	r0, sl
 80171ba:	f000 ffc7 	bl	801814c <__mcmp>
 80171be:	2800      	cmp	r0, #0
 80171c0:	f73f adbb 	bgt.w	8016d3a <_dtoa_r+0x4ca>
 80171c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171c6:	9d00      	ldr	r5, [sp, #0]
 80171c8:	ea6f 0b03 	mvn.w	fp, r3
 80171cc:	f04f 0800 	mov.w	r8, #0
 80171d0:	4631      	mov	r1, r6
 80171d2:	4620      	mov	r0, r4
 80171d4:	f000 fd34 	bl	8017c40 <_Bfree>
 80171d8:	2f00      	cmp	r7, #0
 80171da:	f43f aeab 	beq.w	8016f34 <_dtoa_r+0x6c4>
 80171de:	f1b8 0f00 	cmp.w	r8, #0
 80171e2:	d005      	beq.n	80171f0 <_dtoa_r+0x980>
 80171e4:	45b8      	cmp	r8, r7
 80171e6:	d003      	beq.n	80171f0 <_dtoa_r+0x980>
 80171e8:	4641      	mov	r1, r8
 80171ea:	4620      	mov	r0, r4
 80171ec:	f000 fd28 	bl	8017c40 <_Bfree>
 80171f0:	4639      	mov	r1, r7
 80171f2:	4620      	mov	r0, r4
 80171f4:	f000 fd24 	bl	8017c40 <_Bfree>
 80171f8:	e69c      	b.n	8016f34 <_dtoa_r+0x6c4>
 80171fa:	2600      	movs	r6, #0
 80171fc:	4637      	mov	r7, r6
 80171fe:	e7e1      	b.n	80171c4 <_dtoa_r+0x954>
 8017200:	46bb      	mov	fp, r7
 8017202:	4637      	mov	r7, r6
 8017204:	e599      	b.n	8016d3a <_dtoa_r+0x4ca>
 8017206:	bf00      	nop
 8017208:	40240000 	.word	0x40240000
 801720c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801720e:	2b00      	cmp	r3, #0
 8017210:	f000 80c8 	beq.w	80173a4 <_dtoa_r+0xb34>
 8017214:	9b04      	ldr	r3, [sp, #16]
 8017216:	9301      	str	r3, [sp, #4]
 8017218:	2d00      	cmp	r5, #0
 801721a:	dd05      	ble.n	8017228 <_dtoa_r+0x9b8>
 801721c:	4639      	mov	r1, r7
 801721e:	462a      	mov	r2, r5
 8017220:	4620      	mov	r0, r4
 8017222:	f000 ff27 	bl	8018074 <__lshift>
 8017226:	4607      	mov	r7, r0
 8017228:	f1b8 0f00 	cmp.w	r8, #0
 801722c:	d05b      	beq.n	80172e6 <_dtoa_r+0xa76>
 801722e:	6879      	ldr	r1, [r7, #4]
 8017230:	4620      	mov	r0, r4
 8017232:	f000 fcc5 	bl	8017bc0 <_Balloc>
 8017236:	4605      	mov	r5, r0
 8017238:	b928      	cbnz	r0, 8017246 <_dtoa_r+0x9d6>
 801723a:	4b83      	ldr	r3, [pc, #524]	; (8017448 <_dtoa_r+0xbd8>)
 801723c:	4602      	mov	r2, r0
 801723e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8017242:	f7ff bb2e 	b.w	80168a2 <_dtoa_r+0x32>
 8017246:	693a      	ldr	r2, [r7, #16]
 8017248:	3202      	adds	r2, #2
 801724a:	0092      	lsls	r2, r2, #2
 801724c:	f107 010c 	add.w	r1, r7, #12
 8017250:	300c      	adds	r0, #12
 8017252:	f7ff fa4a 	bl	80166ea <memcpy>
 8017256:	2201      	movs	r2, #1
 8017258:	4629      	mov	r1, r5
 801725a:	4620      	mov	r0, r4
 801725c:	f000 ff0a 	bl	8018074 <__lshift>
 8017260:	9b00      	ldr	r3, [sp, #0]
 8017262:	3301      	adds	r3, #1
 8017264:	9304      	str	r3, [sp, #16]
 8017266:	e9dd 2300 	ldrd	r2, r3, [sp]
 801726a:	4413      	add	r3, r2
 801726c:	9308      	str	r3, [sp, #32]
 801726e:	9b02      	ldr	r3, [sp, #8]
 8017270:	f003 0301 	and.w	r3, r3, #1
 8017274:	46b8      	mov	r8, r7
 8017276:	9306      	str	r3, [sp, #24]
 8017278:	4607      	mov	r7, r0
 801727a:	9b04      	ldr	r3, [sp, #16]
 801727c:	4631      	mov	r1, r6
 801727e:	3b01      	subs	r3, #1
 8017280:	4650      	mov	r0, sl
 8017282:	9301      	str	r3, [sp, #4]
 8017284:	f7ff fa6c 	bl	8016760 <quorem>
 8017288:	4641      	mov	r1, r8
 801728a:	9002      	str	r0, [sp, #8]
 801728c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017290:	4650      	mov	r0, sl
 8017292:	f000 ff5b 	bl	801814c <__mcmp>
 8017296:	463a      	mov	r2, r7
 8017298:	9005      	str	r0, [sp, #20]
 801729a:	4631      	mov	r1, r6
 801729c:	4620      	mov	r0, r4
 801729e:	f000 ff71 	bl	8018184 <__mdiff>
 80172a2:	68c2      	ldr	r2, [r0, #12]
 80172a4:	4605      	mov	r5, r0
 80172a6:	bb02      	cbnz	r2, 80172ea <_dtoa_r+0xa7a>
 80172a8:	4601      	mov	r1, r0
 80172aa:	4650      	mov	r0, sl
 80172ac:	f000 ff4e 	bl	801814c <__mcmp>
 80172b0:	4602      	mov	r2, r0
 80172b2:	4629      	mov	r1, r5
 80172b4:	4620      	mov	r0, r4
 80172b6:	9209      	str	r2, [sp, #36]	; 0x24
 80172b8:	f000 fcc2 	bl	8017c40 <_Bfree>
 80172bc:	9b07      	ldr	r3, [sp, #28]
 80172be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172c0:	9d04      	ldr	r5, [sp, #16]
 80172c2:	ea43 0102 	orr.w	r1, r3, r2
 80172c6:	9b06      	ldr	r3, [sp, #24]
 80172c8:	4319      	orrs	r1, r3
 80172ca:	d110      	bne.n	80172ee <_dtoa_r+0xa7e>
 80172cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80172d0:	d029      	beq.n	8017326 <_dtoa_r+0xab6>
 80172d2:	9b05      	ldr	r3, [sp, #20]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	dd02      	ble.n	80172de <_dtoa_r+0xa6e>
 80172d8:	9b02      	ldr	r3, [sp, #8]
 80172da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80172de:	9b01      	ldr	r3, [sp, #4]
 80172e0:	f883 9000 	strb.w	r9, [r3]
 80172e4:	e774      	b.n	80171d0 <_dtoa_r+0x960>
 80172e6:	4638      	mov	r0, r7
 80172e8:	e7ba      	b.n	8017260 <_dtoa_r+0x9f0>
 80172ea:	2201      	movs	r2, #1
 80172ec:	e7e1      	b.n	80172b2 <_dtoa_r+0xa42>
 80172ee:	9b05      	ldr	r3, [sp, #20]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	db04      	blt.n	80172fe <_dtoa_r+0xa8e>
 80172f4:	9907      	ldr	r1, [sp, #28]
 80172f6:	430b      	orrs	r3, r1
 80172f8:	9906      	ldr	r1, [sp, #24]
 80172fa:	430b      	orrs	r3, r1
 80172fc:	d120      	bne.n	8017340 <_dtoa_r+0xad0>
 80172fe:	2a00      	cmp	r2, #0
 8017300:	dded      	ble.n	80172de <_dtoa_r+0xa6e>
 8017302:	4651      	mov	r1, sl
 8017304:	2201      	movs	r2, #1
 8017306:	4620      	mov	r0, r4
 8017308:	f000 feb4 	bl	8018074 <__lshift>
 801730c:	4631      	mov	r1, r6
 801730e:	4682      	mov	sl, r0
 8017310:	f000 ff1c 	bl	801814c <__mcmp>
 8017314:	2800      	cmp	r0, #0
 8017316:	dc03      	bgt.n	8017320 <_dtoa_r+0xab0>
 8017318:	d1e1      	bne.n	80172de <_dtoa_r+0xa6e>
 801731a:	f019 0f01 	tst.w	r9, #1
 801731e:	d0de      	beq.n	80172de <_dtoa_r+0xa6e>
 8017320:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017324:	d1d8      	bne.n	80172d8 <_dtoa_r+0xa68>
 8017326:	9a01      	ldr	r2, [sp, #4]
 8017328:	2339      	movs	r3, #57	; 0x39
 801732a:	7013      	strb	r3, [r2, #0]
 801732c:	462b      	mov	r3, r5
 801732e:	461d      	mov	r5, r3
 8017330:	3b01      	subs	r3, #1
 8017332:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017336:	2a39      	cmp	r2, #57	; 0x39
 8017338:	d06c      	beq.n	8017414 <_dtoa_r+0xba4>
 801733a:	3201      	adds	r2, #1
 801733c:	701a      	strb	r2, [r3, #0]
 801733e:	e747      	b.n	80171d0 <_dtoa_r+0x960>
 8017340:	2a00      	cmp	r2, #0
 8017342:	dd07      	ble.n	8017354 <_dtoa_r+0xae4>
 8017344:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017348:	d0ed      	beq.n	8017326 <_dtoa_r+0xab6>
 801734a:	9a01      	ldr	r2, [sp, #4]
 801734c:	f109 0301 	add.w	r3, r9, #1
 8017350:	7013      	strb	r3, [r2, #0]
 8017352:	e73d      	b.n	80171d0 <_dtoa_r+0x960>
 8017354:	9b04      	ldr	r3, [sp, #16]
 8017356:	9a08      	ldr	r2, [sp, #32]
 8017358:	f803 9c01 	strb.w	r9, [r3, #-1]
 801735c:	4293      	cmp	r3, r2
 801735e:	d043      	beq.n	80173e8 <_dtoa_r+0xb78>
 8017360:	4651      	mov	r1, sl
 8017362:	2300      	movs	r3, #0
 8017364:	220a      	movs	r2, #10
 8017366:	4620      	mov	r0, r4
 8017368:	f000 fc8c 	bl	8017c84 <__multadd>
 801736c:	45b8      	cmp	r8, r7
 801736e:	4682      	mov	sl, r0
 8017370:	f04f 0300 	mov.w	r3, #0
 8017374:	f04f 020a 	mov.w	r2, #10
 8017378:	4641      	mov	r1, r8
 801737a:	4620      	mov	r0, r4
 801737c:	d107      	bne.n	801738e <_dtoa_r+0xb1e>
 801737e:	f000 fc81 	bl	8017c84 <__multadd>
 8017382:	4680      	mov	r8, r0
 8017384:	4607      	mov	r7, r0
 8017386:	9b04      	ldr	r3, [sp, #16]
 8017388:	3301      	adds	r3, #1
 801738a:	9304      	str	r3, [sp, #16]
 801738c:	e775      	b.n	801727a <_dtoa_r+0xa0a>
 801738e:	f000 fc79 	bl	8017c84 <__multadd>
 8017392:	4639      	mov	r1, r7
 8017394:	4680      	mov	r8, r0
 8017396:	2300      	movs	r3, #0
 8017398:	220a      	movs	r2, #10
 801739a:	4620      	mov	r0, r4
 801739c:	f000 fc72 	bl	8017c84 <__multadd>
 80173a0:	4607      	mov	r7, r0
 80173a2:	e7f0      	b.n	8017386 <_dtoa_r+0xb16>
 80173a4:	9b04      	ldr	r3, [sp, #16]
 80173a6:	9301      	str	r3, [sp, #4]
 80173a8:	9d00      	ldr	r5, [sp, #0]
 80173aa:	4631      	mov	r1, r6
 80173ac:	4650      	mov	r0, sl
 80173ae:	f7ff f9d7 	bl	8016760 <quorem>
 80173b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80173b6:	9b00      	ldr	r3, [sp, #0]
 80173b8:	f805 9b01 	strb.w	r9, [r5], #1
 80173bc:	1aea      	subs	r2, r5, r3
 80173be:	9b01      	ldr	r3, [sp, #4]
 80173c0:	4293      	cmp	r3, r2
 80173c2:	dd07      	ble.n	80173d4 <_dtoa_r+0xb64>
 80173c4:	4651      	mov	r1, sl
 80173c6:	2300      	movs	r3, #0
 80173c8:	220a      	movs	r2, #10
 80173ca:	4620      	mov	r0, r4
 80173cc:	f000 fc5a 	bl	8017c84 <__multadd>
 80173d0:	4682      	mov	sl, r0
 80173d2:	e7ea      	b.n	80173aa <_dtoa_r+0xb3a>
 80173d4:	9b01      	ldr	r3, [sp, #4]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	bfc8      	it	gt
 80173da:	461d      	movgt	r5, r3
 80173dc:	9b00      	ldr	r3, [sp, #0]
 80173de:	bfd8      	it	le
 80173e0:	2501      	movle	r5, #1
 80173e2:	441d      	add	r5, r3
 80173e4:	f04f 0800 	mov.w	r8, #0
 80173e8:	4651      	mov	r1, sl
 80173ea:	2201      	movs	r2, #1
 80173ec:	4620      	mov	r0, r4
 80173ee:	f000 fe41 	bl	8018074 <__lshift>
 80173f2:	4631      	mov	r1, r6
 80173f4:	4682      	mov	sl, r0
 80173f6:	f000 fea9 	bl	801814c <__mcmp>
 80173fa:	2800      	cmp	r0, #0
 80173fc:	dc96      	bgt.n	801732c <_dtoa_r+0xabc>
 80173fe:	d102      	bne.n	8017406 <_dtoa_r+0xb96>
 8017400:	f019 0f01 	tst.w	r9, #1
 8017404:	d192      	bne.n	801732c <_dtoa_r+0xabc>
 8017406:	462b      	mov	r3, r5
 8017408:	461d      	mov	r5, r3
 801740a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801740e:	2a30      	cmp	r2, #48	; 0x30
 8017410:	d0fa      	beq.n	8017408 <_dtoa_r+0xb98>
 8017412:	e6dd      	b.n	80171d0 <_dtoa_r+0x960>
 8017414:	9a00      	ldr	r2, [sp, #0]
 8017416:	429a      	cmp	r2, r3
 8017418:	d189      	bne.n	801732e <_dtoa_r+0xabe>
 801741a:	f10b 0b01 	add.w	fp, fp, #1
 801741e:	2331      	movs	r3, #49	; 0x31
 8017420:	e796      	b.n	8017350 <_dtoa_r+0xae0>
 8017422:	4b0a      	ldr	r3, [pc, #40]	; (801744c <_dtoa_r+0xbdc>)
 8017424:	f7ff ba99 	b.w	801695a <_dtoa_r+0xea>
 8017428:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801742a:	2b00      	cmp	r3, #0
 801742c:	f47f aa6d 	bne.w	801690a <_dtoa_r+0x9a>
 8017430:	4b07      	ldr	r3, [pc, #28]	; (8017450 <_dtoa_r+0xbe0>)
 8017432:	f7ff ba92 	b.w	801695a <_dtoa_r+0xea>
 8017436:	9b01      	ldr	r3, [sp, #4]
 8017438:	2b00      	cmp	r3, #0
 801743a:	dcb5      	bgt.n	80173a8 <_dtoa_r+0xb38>
 801743c:	9b07      	ldr	r3, [sp, #28]
 801743e:	2b02      	cmp	r3, #2
 8017440:	f73f aeb1 	bgt.w	80171a6 <_dtoa_r+0x936>
 8017444:	e7b0      	b.n	80173a8 <_dtoa_r+0xb38>
 8017446:	bf00      	nop
 8017448:	0801cc44 	.word	0x0801cc44
 801744c:	0801cb01 	.word	0x0801cb01
 8017450:	0801cbdf 	.word	0x0801cbdf

08017454 <_free_r>:
 8017454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017456:	2900      	cmp	r1, #0
 8017458:	d044      	beq.n	80174e4 <_free_r+0x90>
 801745a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801745e:	9001      	str	r0, [sp, #4]
 8017460:	2b00      	cmp	r3, #0
 8017462:	f1a1 0404 	sub.w	r4, r1, #4
 8017466:	bfb8      	it	lt
 8017468:	18e4      	addlt	r4, r4, r3
 801746a:	f7fd f941 	bl	80146f0 <__malloc_lock>
 801746e:	4a1e      	ldr	r2, [pc, #120]	; (80174e8 <_free_r+0x94>)
 8017470:	9801      	ldr	r0, [sp, #4]
 8017472:	6813      	ldr	r3, [r2, #0]
 8017474:	b933      	cbnz	r3, 8017484 <_free_r+0x30>
 8017476:	6063      	str	r3, [r4, #4]
 8017478:	6014      	str	r4, [r2, #0]
 801747a:	b003      	add	sp, #12
 801747c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017480:	f7fd b93c 	b.w	80146fc <__malloc_unlock>
 8017484:	42a3      	cmp	r3, r4
 8017486:	d908      	bls.n	801749a <_free_r+0x46>
 8017488:	6825      	ldr	r5, [r4, #0]
 801748a:	1961      	adds	r1, r4, r5
 801748c:	428b      	cmp	r3, r1
 801748e:	bf01      	itttt	eq
 8017490:	6819      	ldreq	r1, [r3, #0]
 8017492:	685b      	ldreq	r3, [r3, #4]
 8017494:	1949      	addeq	r1, r1, r5
 8017496:	6021      	streq	r1, [r4, #0]
 8017498:	e7ed      	b.n	8017476 <_free_r+0x22>
 801749a:	461a      	mov	r2, r3
 801749c:	685b      	ldr	r3, [r3, #4]
 801749e:	b10b      	cbz	r3, 80174a4 <_free_r+0x50>
 80174a0:	42a3      	cmp	r3, r4
 80174a2:	d9fa      	bls.n	801749a <_free_r+0x46>
 80174a4:	6811      	ldr	r1, [r2, #0]
 80174a6:	1855      	adds	r5, r2, r1
 80174a8:	42a5      	cmp	r5, r4
 80174aa:	d10b      	bne.n	80174c4 <_free_r+0x70>
 80174ac:	6824      	ldr	r4, [r4, #0]
 80174ae:	4421      	add	r1, r4
 80174b0:	1854      	adds	r4, r2, r1
 80174b2:	42a3      	cmp	r3, r4
 80174b4:	6011      	str	r1, [r2, #0]
 80174b6:	d1e0      	bne.n	801747a <_free_r+0x26>
 80174b8:	681c      	ldr	r4, [r3, #0]
 80174ba:	685b      	ldr	r3, [r3, #4]
 80174bc:	6053      	str	r3, [r2, #4]
 80174be:	440c      	add	r4, r1
 80174c0:	6014      	str	r4, [r2, #0]
 80174c2:	e7da      	b.n	801747a <_free_r+0x26>
 80174c4:	d902      	bls.n	80174cc <_free_r+0x78>
 80174c6:	230c      	movs	r3, #12
 80174c8:	6003      	str	r3, [r0, #0]
 80174ca:	e7d6      	b.n	801747a <_free_r+0x26>
 80174cc:	6825      	ldr	r5, [r4, #0]
 80174ce:	1961      	adds	r1, r4, r5
 80174d0:	428b      	cmp	r3, r1
 80174d2:	bf04      	itt	eq
 80174d4:	6819      	ldreq	r1, [r3, #0]
 80174d6:	685b      	ldreq	r3, [r3, #4]
 80174d8:	6063      	str	r3, [r4, #4]
 80174da:	bf04      	itt	eq
 80174dc:	1949      	addeq	r1, r1, r5
 80174de:	6021      	streq	r1, [r4, #0]
 80174e0:	6054      	str	r4, [r2, #4]
 80174e2:	e7ca      	b.n	801747a <_free_r+0x26>
 80174e4:	b003      	add	sp, #12
 80174e6:	bd30      	pop	{r4, r5, pc}
 80174e8:	20002448 	.word	0x20002448

080174ec <rshift>:
 80174ec:	6903      	ldr	r3, [r0, #16]
 80174ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80174f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80174f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80174fa:	f100 0414 	add.w	r4, r0, #20
 80174fe:	dd45      	ble.n	801758c <rshift+0xa0>
 8017500:	f011 011f 	ands.w	r1, r1, #31
 8017504:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017508:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801750c:	d10c      	bne.n	8017528 <rshift+0x3c>
 801750e:	f100 0710 	add.w	r7, r0, #16
 8017512:	4629      	mov	r1, r5
 8017514:	42b1      	cmp	r1, r6
 8017516:	d334      	bcc.n	8017582 <rshift+0x96>
 8017518:	1a9b      	subs	r3, r3, r2
 801751a:	009b      	lsls	r3, r3, #2
 801751c:	1eea      	subs	r2, r5, #3
 801751e:	4296      	cmp	r6, r2
 8017520:	bf38      	it	cc
 8017522:	2300      	movcc	r3, #0
 8017524:	4423      	add	r3, r4
 8017526:	e015      	b.n	8017554 <rshift+0x68>
 8017528:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801752c:	f1c1 0820 	rsb	r8, r1, #32
 8017530:	40cf      	lsrs	r7, r1
 8017532:	f105 0e04 	add.w	lr, r5, #4
 8017536:	46a1      	mov	r9, r4
 8017538:	4576      	cmp	r6, lr
 801753a:	46f4      	mov	ip, lr
 801753c:	d815      	bhi.n	801756a <rshift+0x7e>
 801753e:	1a9a      	subs	r2, r3, r2
 8017540:	0092      	lsls	r2, r2, #2
 8017542:	3a04      	subs	r2, #4
 8017544:	3501      	adds	r5, #1
 8017546:	42ae      	cmp	r6, r5
 8017548:	bf38      	it	cc
 801754a:	2200      	movcc	r2, #0
 801754c:	18a3      	adds	r3, r4, r2
 801754e:	50a7      	str	r7, [r4, r2]
 8017550:	b107      	cbz	r7, 8017554 <rshift+0x68>
 8017552:	3304      	adds	r3, #4
 8017554:	1b1a      	subs	r2, r3, r4
 8017556:	42a3      	cmp	r3, r4
 8017558:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801755c:	bf08      	it	eq
 801755e:	2300      	moveq	r3, #0
 8017560:	6102      	str	r2, [r0, #16]
 8017562:	bf08      	it	eq
 8017564:	6143      	streq	r3, [r0, #20]
 8017566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801756a:	f8dc c000 	ldr.w	ip, [ip]
 801756e:	fa0c fc08 	lsl.w	ip, ip, r8
 8017572:	ea4c 0707 	orr.w	r7, ip, r7
 8017576:	f849 7b04 	str.w	r7, [r9], #4
 801757a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801757e:	40cf      	lsrs	r7, r1
 8017580:	e7da      	b.n	8017538 <rshift+0x4c>
 8017582:	f851 cb04 	ldr.w	ip, [r1], #4
 8017586:	f847 cf04 	str.w	ip, [r7, #4]!
 801758a:	e7c3      	b.n	8017514 <rshift+0x28>
 801758c:	4623      	mov	r3, r4
 801758e:	e7e1      	b.n	8017554 <rshift+0x68>

08017590 <__hexdig_fun>:
 8017590:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017594:	2b09      	cmp	r3, #9
 8017596:	d802      	bhi.n	801759e <__hexdig_fun+0xe>
 8017598:	3820      	subs	r0, #32
 801759a:	b2c0      	uxtb	r0, r0
 801759c:	4770      	bx	lr
 801759e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80175a2:	2b05      	cmp	r3, #5
 80175a4:	d801      	bhi.n	80175aa <__hexdig_fun+0x1a>
 80175a6:	3847      	subs	r0, #71	; 0x47
 80175a8:	e7f7      	b.n	801759a <__hexdig_fun+0xa>
 80175aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80175ae:	2b05      	cmp	r3, #5
 80175b0:	d801      	bhi.n	80175b6 <__hexdig_fun+0x26>
 80175b2:	3827      	subs	r0, #39	; 0x27
 80175b4:	e7f1      	b.n	801759a <__hexdig_fun+0xa>
 80175b6:	2000      	movs	r0, #0
 80175b8:	4770      	bx	lr
	...

080175bc <__gethex>:
 80175bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175c0:	4617      	mov	r7, r2
 80175c2:	680a      	ldr	r2, [r1, #0]
 80175c4:	b085      	sub	sp, #20
 80175c6:	f102 0b02 	add.w	fp, r2, #2
 80175ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80175ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80175d2:	4681      	mov	r9, r0
 80175d4:	468a      	mov	sl, r1
 80175d6:	9302      	str	r3, [sp, #8]
 80175d8:	32fe      	adds	r2, #254	; 0xfe
 80175da:	eb02 030b 	add.w	r3, r2, fp
 80175de:	46d8      	mov	r8, fp
 80175e0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80175e4:	9301      	str	r3, [sp, #4]
 80175e6:	2830      	cmp	r0, #48	; 0x30
 80175e8:	d0f7      	beq.n	80175da <__gethex+0x1e>
 80175ea:	f7ff ffd1 	bl	8017590 <__hexdig_fun>
 80175ee:	4604      	mov	r4, r0
 80175f0:	2800      	cmp	r0, #0
 80175f2:	d138      	bne.n	8017666 <__gethex+0xaa>
 80175f4:	49a7      	ldr	r1, [pc, #668]	; (8017894 <__gethex+0x2d8>)
 80175f6:	2201      	movs	r2, #1
 80175f8:	4640      	mov	r0, r8
 80175fa:	f7fe ff62 	bl	80164c2 <strncmp>
 80175fe:	4606      	mov	r6, r0
 8017600:	2800      	cmp	r0, #0
 8017602:	d169      	bne.n	80176d8 <__gethex+0x11c>
 8017604:	f898 0001 	ldrb.w	r0, [r8, #1]
 8017608:	465d      	mov	r5, fp
 801760a:	f7ff ffc1 	bl	8017590 <__hexdig_fun>
 801760e:	2800      	cmp	r0, #0
 8017610:	d064      	beq.n	80176dc <__gethex+0x120>
 8017612:	465a      	mov	r2, fp
 8017614:	7810      	ldrb	r0, [r2, #0]
 8017616:	2830      	cmp	r0, #48	; 0x30
 8017618:	4690      	mov	r8, r2
 801761a:	f102 0201 	add.w	r2, r2, #1
 801761e:	d0f9      	beq.n	8017614 <__gethex+0x58>
 8017620:	f7ff ffb6 	bl	8017590 <__hexdig_fun>
 8017624:	2301      	movs	r3, #1
 8017626:	fab0 f480 	clz	r4, r0
 801762a:	0964      	lsrs	r4, r4, #5
 801762c:	465e      	mov	r6, fp
 801762e:	9301      	str	r3, [sp, #4]
 8017630:	4642      	mov	r2, r8
 8017632:	4615      	mov	r5, r2
 8017634:	3201      	adds	r2, #1
 8017636:	7828      	ldrb	r0, [r5, #0]
 8017638:	f7ff ffaa 	bl	8017590 <__hexdig_fun>
 801763c:	2800      	cmp	r0, #0
 801763e:	d1f8      	bne.n	8017632 <__gethex+0x76>
 8017640:	4994      	ldr	r1, [pc, #592]	; (8017894 <__gethex+0x2d8>)
 8017642:	2201      	movs	r2, #1
 8017644:	4628      	mov	r0, r5
 8017646:	f7fe ff3c 	bl	80164c2 <strncmp>
 801764a:	b978      	cbnz	r0, 801766c <__gethex+0xb0>
 801764c:	b946      	cbnz	r6, 8017660 <__gethex+0xa4>
 801764e:	1c6e      	adds	r6, r5, #1
 8017650:	4632      	mov	r2, r6
 8017652:	4615      	mov	r5, r2
 8017654:	3201      	adds	r2, #1
 8017656:	7828      	ldrb	r0, [r5, #0]
 8017658:	f7ff ff9a 	bl	8017590 <__hexdig_fun>
 801765c:	2800      	cmp	r0, #0
 801765e:	d1f8      	bne.n	8017652 <__gethex+0x96>
 8017660:	1b73      	subs	r3, r6, r5
 8017662:	009e      	lsls	r6, r3, #2
 8017664:	e004      	b.n	8017670 <__gethex+0xb4>
 8017666:	2400      	movs	r4, #0
 8017668:	4626      	mov	r6, r4
 801766a:	e7e1      	b.n	8017630 <__gethex+0x74>
 801766c:	2e00      	cmp	r6, #0
 801766e:	d1f7      	bne.n	8017660 <__gethex+0xa4>
 8017670:	782b      	ldrb	r3, [r5, #0]
 8017672:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017676:	2b50      	cmp	r3, #80	; 0x50
 8017678:	d13d      	bne.n	80176f6 <__gethex+0x13a>
 801767a:	786b      	ldrb	r3, [r5, #1]
 801767c:	2b2b      	cmp	r3, #43	; 0x2b
 801767e:	d02f      	beq.n	80176e0 <__gethex+0x124>
 8017680:	2b2d      	cmp	r3, #45	; 0x2d
 8017682:	d031      	beq.n	80176e8 <__gethex+0x12c>
 8017684:	1c69      	adds	r1, r5, #1
 8017686:	f04f 0b00 	mov.w	fp, #0
 801768a:	7808      	ldrb	r0, [r1, #0]
 801768c:	f7ff ff80 	bl	8017590 <__hexdig_fun>
 8017690:	1e42      	subs	r2, r0, #1
 8017692:	b2d2      	uxtb	r2, r2
 8017694:	2a18      	cmp	r2, #24
 8017696:	d82e      	bhi.n	80176f6 <__gethex+0x13a>
 8017698:	f1a0 0210 	sub.w	r2, r0, #16
 801769c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80176a0:	f7ff ff76 	bl	8017590 <__hexdig_fun>
 80176a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80176a8:	fa5f fc8c 	uxtb.w	ip, ip
 80176ac:	f1bc 0f18 	cmp.w	ip, #24
 80176b0:	d91d      	bls.n	80176ee <__gethex+0x132>
 80176b2:	f1bb 0f00 	cmp.w	fp, #0
 80176b6:	d000      	beq.n	80176ba <__gethex+0xfe>
 80176b8:	4252      	negs	r2, r2
 80176ba:	4416      	add	r6, r2
 80176bc:	f8ca 1000 	str.w	r1, [sl]
 80176c0:	b1dc      	cbz	r4, 80176fa <__gethex+0x13e>
 80176c2:	9b01      	ldr	r3, [sp, #4]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	bf14      	ite	ne
 80176c8:	f04f 0800 	movne.w	r8, #0
 80176cc:	f04f 0806 	moveq.w	r8, #6
 80176d0:	4640      	mov	r0, r8
 80176d2:	b005      	add	sp, #20
 80176d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176d8:	4645      	mov	r5, r8
 80176da:	4626      	mov	r6, r4
 80176dc:	2401      	movs	r4, #1
 80176de:	e7c7      	b.n	8017670 <__gethex+0xb4>
 80176e0:	f04f 0b00 	mov.w	fp, #0
 80176e4:	1ca9      	adds	r1, r5, #2
 80176e6:	e7d0      	b.n	801768a <__gethex+0xce>
 80176e8:	f04f 0b01 	mov.w	fp, #1
 80176ec:	e7fa      	b.n	80176e4 <__gethex+0x128>
 80176ee:	230a      	movs	r3, #10
 80176f0:	fb03 0002 	mla	r0, r3, r2, r0
 80176f4:	e7d0      	b.n	8017698 <__gethex+0xdc>
 80176f6:	4629      	mov	r1, r5
 80176f8:	e7e0      	b.n	80176bc <__gethex+0x100>
 80176fa:	eba5 0308 	sub.w	r3, r5, r8
 80176fe:	3b01      	subs	r3, #1
 8017700:	4621      	mov	r1, r4
 8017702:	2b07      	cmp	r3, #7
 8017704:	dc0a      	bgt.n	801771c <__gethex+0x160>
 8017706:	4648      	mov	r0, r9
 8017708:	f000 fa5a 	bl	8017bc0 <_Balloc>
 801770c:	4604      	mov	r4, r0
 801770e:	b940      	cbnz	r0, 8017722 <__gethex+0x166>
 8017710:	4b61      	ldr	r3, [pc, #388]	; (8017898 <__gethex+0x2dc>)
 8017712:	4602      	mov	r2, r0
 8017714:	21e4      	movs	r1, #228	; 0xe4
 8017716:	4861      	ldr	r0, [pc, #388]	; (801789c <__gethex+0x2e0>)
 8017718:	f7ff f804 	bl	8016724 <__assert_func>
 801771c:	3101      	adds	r1, #1
 801771e:	105b      	asrs	r3, r3, #1
 8017720:	e7ef      	b.n	8017702 <__gethex+0x146>
 8017722:	f100 0a14 	add.w	sl, r0, #20
 8017726:	2300      	movs	r3, #0
 8017728:	495a      	ldr	r1, [pc, #360]	; (8017894 <__gethex+0x2d8>)
 801772a:	f8cd a004 	str.w	sl, [sp, #4]
 801772e:	469b      	mov	fp, r3
 8017730:	45a8      	cmp	r8, r5
 8017732:	d342      	bcc.n	80177ba <__gethex+0x1fe>
 8017734:	9801      	ldr	r0, [sp, #4]
 8017736:	f840 bb04 	str.w	fp, [r0], #4
 801773a:	eba0 000a 	sub.w	r0, r0, sl
 801773e:	1080      	asrs	r0, r0, #2
 8017740:	6120      	str	r0, [r4, #16]
 8017742:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8017746:	4658      	mov	r0, fp
 8017748:	f000 fb2c 	bl	8017da4 <__hi0bits>
 801774c:	683d      	ldr	r5, [r7, #0]
 801774e:	eba8 0000 	sub.w	r0, r8, r0
 8017752:	42a8      	cmp	r0, r5
 8017754:	dd59      	ble.n	801780a <__gethex+0x24e>
 8017756:	eba0 0805 	sub.w	r8, r0, r5
 801775a:	4641      	mov	r1, r8
 801775c:	4620      	mov	r0, r4
 801775e:	f000 febb 	bl	80184d8 <__any_on>
 8017762:	4683      	mov	fp, r0
 8017764:	b1b8      	cbz	r0, 8017796 <__gethex+0x1da>
 8017766:	f108 33ff 	add.w	r3, r8, #4294967295
 801776a:	1159      	asrs	r1, r3, #5
 801776c:	f003 021f 	and.w	r2, r3, #31
 8017770:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017774:	f04f 0b01 	mov.w	fp, #1
 8017778:	fa0b f202 	lsl.w	r2, fp, r2
 801777c:	420a      	tst	r2, r1
 801777e:	d00a      	beq.n	8017796 <__gethex+0x1da>
 8017780:	455b      	cmp	r3, fp
 8017782:	dd06      	ble.n	8017792 <__gethex+0x1d6>
 8017784:	f1a8 0102 	sub.w	r1, r8, #2
 8017788:	4620      	mov	r0, r4
 801778a:	f000 fea5 	bl	80184d8 <__any_on>
 801778e:	2800      	cmp	r0, #0
 8017790:	d138      	bne.n	8017804 <__gethex+0x248>
 8017792:	f04f 0b02 	mov.w	fp, #2
 8017796:	4641      	mov	r1, r8
 8017798:	4620      	mov	r0, r4
 801779a:	f7ff fea7 	bl	80174ec <rshift>
 801779e:	4446      	add	r6, r8
 80177a0:	68bb      	ldr	r3, [r7, #8]
 80177a2:	42b3      	cmp	r3, r6
 80177a4:	da41      	bge.n	801782a <__gethex+0x26e>
 80177a6:	4621      	mov	r1, r4
 80177a8:	4648      	mov	r0, r9
 80177aa:	f000 fa49 	bl	8017c40 <_Bfree>
 80177ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80177b0:	2300      	movs	r3, #0
 80177b2:	6013      	str	r3, [r2, #0]
 80177b4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80177b8:	e78a      	b.n	80176d0 <__gethex+0x114>
 80177ba:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80177be:	2a2e      	cmp	r2, #46	; 0x2e
 80177c0:	d014      	beq.n	80177ec <__gethex+0x230>
 80177c2:	2b20      	cmp	r3, #32
 80177c4:	d106      	bne.n	80177d4 <__gethex+0x218>
 80177c6:	9b01      	ldr	r3, [sp, #4]
 80177c8:	f843 bb04 	str.w	fp, [r3], #4
 80177cc:	f04f 0b00 	mov.w	fp, #0
 80177d0:	9301      	str	r3, [sp, #4]
 80177d2:	465b      	mov	r3, fp
 80177d4:	7828      	ldrb	r0, [r5, #0]
 80177d6:	9303      	str	r3, [sp, #12]
 80177d8:	f7ff feda 	bl	8017590 <__hexdig_fun>
 80177dc:	9b03      	ldr	r3, [sp, #12]
 80177de:	f000 000f 	and.w	r0, r0, #15
 80177e2:	4098      	lsls	r0, r3
 80177e4:	ea4b 0b00 	orr.w	fp, fp, r0
 80177e8:	3304      	adds	r3, #4
 80177ea:	e7a1      	b.n	8017730 <__gethex+0x174>
 80177ec:	45a8      	cmp	r8, r5
 80177ee:	d8e8      	bhi.n	80177c2 <__gethex+0x206>
 80177f0:	2201      	movs	r2, #1
 80177f2:	4628      	mov	r0, r5
 80177f4:	9303      	str	r3, [sp, #12]
 80177f6:	f7fe fe64 	bl	80164c2 <strncmp>
 80177fa:	4926      	ldr	r1, [pc, #152]	; (8017894 <__gethex+0x2d8>)
 80177fc:	9b03      	ldr	r3, [sp, #12]
 80177fe:	2800      	cmp	r0, #0
 8017800:	d1df      	bne.n	80177c2 <__gethex+0x206>
 8017802:	e795      	b.n	8017730 <__gethex+0x174>
 8017804:	f04f 0b03 	mov.w	fp, #3
 8017808:	e7c5      	b.n	8017796 <__gethex+0x1da>
 801780a:	da0b      	bge.n	8017824 <__gethex+0x268>
 801780c:	eba5 0800 	sub.w	r8, r5, r0
 8017810:	4621      	mov	r1, r4
 8017812:	4642      	mov	r2, r8
 8017814:	4648      	mov	r0, r9
 8017816:	f000 fc2d 	bl	8018074 <__lshift>
 801781a:	eba6 0608 	sub.w	r6, r6, r8
 801781e:	4604      	mov	r4, r0
 8017820:	f100 0a14 	add.w	sl, r0, #20
 8017824:	f04f 0b00 	mov.w	fp, #0
 8017828:	e7ba      	b.n	80177a0 <__gethex+0x1e4>
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	42b3      	cmp	r3, r6
 801782e:	dd73      	ble.n	8017918 <__gethex+0x35c>
 8017830:	1b9e      	subs	r6, r3, r6
 8017832:	42b5      	cmp	r5, r6
 8017834:	dc34      	bgt.n	80178a0 <__gethex+0x2e4>
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	2b02      	cmp	r3, #2
 801783a:	d023      	beq.n	8017884 <__gethex+0x2c8>
 801783c:	2b03      	cmp	r3, #3
 801783e:	d025      	beq.n	801788c <__gethex+0x2d0>
 8017840:	2b01      	cmp	r3, #1
 8017842:	d115      	bne.n	8017870 <__gethex+0x2b4>
 8017844:	42b5      	cmp	r5, r6
 8017846:	d113      	bne.n	8017870 <__gethex+0x2b4>
 8017848:	2d01      	cmp	r5, #1
 801784a:	d10b      	bne.n	8017864 <__gethex+0x2a8>
 801784c:	9a02      	ldr	r2, [sp, #8]
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	6013      	str	r3, [r2, #0]
 8017852:	2301      	movs	r3, #1
 8017854:	6123      	str	r3, [r4, #16]
 8017856:	f8ca 3000 	str.w	r3, [sl]
 801785a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801785c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8017860:	601c      	str	r4, [r3, #0]
 8017862:	e735      	b.n	80176d0 <__gethex+0x114>
 8017864:	1e69      	subs	r1, r5, #1
 8017866:	4620      	mov	r0, r4
 8017868:	f000 fe36 	bl	80184d8 <__any_on>
 801786c:	2800      	cmp	r0, #0
 801786e:	d1ed      	bne.n	801784c <__gethex+0x290>
 8017870:	4621      	mov	r1, r4
 8017872:	4648      	mov	r0, r9
 8017874:	f000 f9e4 	bl	8017c40 <_Bfree>
 8017878:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801787a:	2300      	movs	r3, #0
 801787c:	6013      	str	r3, [r2, #0]
 801787e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8017882:	e725      	b.n	80176d0 <__gethex+0x114>
 8017884:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017886:	2b00      	cmp	r3, #0
 8017888:	d1f2      	bne.n	8017870 <__gethex+0x2b4>
 801788a:	e7df      	b.n	801784c <__gethex+0x290>
 801788c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801788e:	2b00      	cmp	r3, #0
 8017890:	d1dc      	bne.n	801784c <__gethex+0x290>
 8017892:	e7ed      	b.n	8017870 <__gethex+0x2b4>
 8017894:	0801c99c 	.word	0x0801c99c
 8017898:	0801cc44 	.word	0x0801cc44
 801789c:	0801cc55 	.word	0x0801cc55
 80178a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80178a4:	f1bb 0f00 	cmp.w	fp, #0
 80178a8:	d133      	bne.n	8017912 <__gethex+0x356>
 80178aa:	f1b8 0f00 	cmp.w	r8, #0
 80178ae:	d004      	beq.n	80178ba <__gethex+0x2fe>
 80178b0:	4641      	mov	r1, r8
 80178b2:	4620      	mov	r0, r4
 80178b4:	f000 fe10 	bl	80184d8 <__any_on>
 80178b8:	4683      	mov	fp, r0
 80178ba:	ea4f 1268 	mov.w	r2, r8, asr #5
 80178be:	2301      	movs	r3, #1
 80178c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80178c4:	f008 081f 	and.w	r8, r8, #31
 80178c8:	fa03 f308 	lsl.w	r3, r3, r8
 80178cc:	4213      	tst	r3, r2
 80178ce:	4631      	mov	r1, r6
 80178d0:	4620      	mov	r0, r4
 80178d2:	bf18      	it	ne
 80178d4:	f04b 0b02 	orrne.w	fp, fp, #2
 80178d8:	1bad      	subs	r5, r5, r6
 80178da:	f7ff fe07 	bl	80174ec <rshift>
 80178de:	687e      	ldr	r6, [r7, #4]
 80178e0:	f04f 0802 	mov.w	r8, #2
 80178e4:	f1bb 0f00 	cmp.w	fp, #0
 80178e8:	d04a      	beq.n	8017980 <__gethex+0x3c4>
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	2b02      	cmp	r3, #2
 80178ee:	d016      	beq.n	801791e <__gethex+0x362>
 80178f0:	2b03      	cmp	r3, #3
 80178f2:	d018      	beq.n	8017926 <__gethex+0x36a>
 80178f4:	2b01      	cmp	r3, #1
 80178f6:	d109      	bne.n	801790c <__gethex+0x350>
 80178f8:	f01b 0f02 	tst.w	fp, #2
 80178fc:	d006      	beq.n	801790c <__gethex+0x350>
 80178fe:	f8da 3000 	ldr.w	r3, [sl]
 8017902:	ea4b 0b03 	orr.w	fp, fp, r3
 8017906:	f01b 0f01 	tst.w	fp, #1
 801790a:	d10f      	bne.n	801792c <__gethex+0x370>
 801790c:	f048 0810 	orr.w	r8, r8, #16
 8017910:	e036      	b.n	8017980 <__gethex+0x3c4>
 8017912:	f04f 0b01 	mov.w	fp, #1
 8017916:	e7d0      	b.n	80178ba <__gethex+0x2fe>
 8017918:	f04f 0801 	mov.w	r8, #1
 801791c:	e7e2      	b.n	80178e4 <__gethex+0x328>
 801791e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017920:	f1c3 0301 	rsb	r3, r3, #1
 8017924:	930f      	str	r3, [sp, #60]	; 0x3c
 8017926:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017928:	2b00      	cmp	r3, #0
 801792a:	d0ef      	beq.n	801790c <__gethex+0x350>
 801792c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017930:	f104 0214 	add.w	r2, r4, #20
 8017934:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8017938:	9301      	str	r3, [sp, #4]
 801793a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801793e:	2300      	movs	r3, #0
 8017940:	4694      	mov	ip, r2
 8017942:	f852 1b04 	ldr.w	r1, [r2], #4
 8017946:	f1b1 3fff 	cmp.w	r1, #4294967295
 801794a:	d01e      	beq.n	801798a <__gethex+0x3ce>
 801794c:	3101      	adds	r1, #1
 801794e:	f8cc 1000 	str.w	r1, [ip]
 8017952:	f1b8 0f02 	cmp.w	r8, #2
 8017956:	f104 0214 	add.w	r2, r4, #20
 801795a:	d13d      	bne.n	80179d8 <__gethex+0x41c>
 801795c:	683b      	ldr	r3, [r7, #0]
 801795e:	3b01      	subs	r3, #1
 8017960:	42ab      	cmp	r3, r5
 8017962:	d10b      	bne.n	801797c <__gethex+0x3c0>
 8017964:	1169      	asrs	r1, r5, #5
 8017966:	2301      	movs	r3, #1
 8017968:	f005 051f 	and.w	r5, r5, #31
 801796c:	fa03 f505 	lsl.w	r5, r3, r5
 8017970:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017974:	421d      	tst	r5, r3
 8017976:	bf18      	it	ne
 8017978:	f04f 0801 	movne.w	r8, #1
 801797c:	f048 0820 	orr.w	r8, r8, #32
 8017980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017982:	601c      	str	r4, [r3, #0]
 8017984:	9b02      	ldr	r3, [sp, #8]
 8017986:	601e      	str	r6, [r3, #0]
 8017988:	e6a2      	b.n	80176d0 <__gethex+0x114>
 801798a:	4290      	cmp	r0, r2
 801798c:	f842 3c04 	str.w	r3, [r2, #-4]
 8017990:	d8d6      	bhi.n	8017940 <__gethex+0x384>
 8017992:	68a2      	ldr	r2, [r4, #8]
 8017994:	4593      	cmp	fp, r2
 8017996:	db17      	blt.n	80179c8 <__gethex+0x40c>
 8017998:	6861      	ldr	r1, [r4, #4]
 801799a:	4648      	mov	r0, r9
 801799c:	3101      	adds	r1, #1
 801799e:	f000 f90f 	bl	8017bc0 <_Balloc>
 80179a2:	4682      	mov	sl, r0
 80179a4:	b918      	cbnz	r0, 80179ae <__gethex+0x3f2>
 80179a6:	4b1b      	ldr	r3, [pc, #108]	; (8017a14 <__gethex+0x458>)
 80179a8:	4602      	mov	r2, r0
 80179aa:	2184      	movs	r1, #132	; 0x84
 80179ac:	e6b3      	b.n	8017716 <__gethex+0x15a>
 80179ae:	6922      	ldr	r2, [r4, #16]
 80179b0:	3202      	adds	r2, #2
 80179b2:	f104 010c 	add.w	r1, r4, #12
 80179b6:	0092      	lsls	r2, r2, #2
 80179b8:	300c      	adds	r0, #12
 80179ba:	f7fe fe96 	bl	80166ea <memcpy>
 80179be:	4621      	mov	r1, r4
 80179c0:	4648      	mov	r0, r9
 80179c2:	f000 f93d 	bl	8017c40 <_Bfree>
 80179c6:	4654      	mov	r4, sl
 80179c8:	6922      	ldr	r2, [r4, #16]
 80179ca:	1c51      	adds	r1, r2, #1
 80179cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80179d0:	6121      	str	r1, [r4, #16]
 80179d2:	2101      	movs	r1, #1
 80179d4:	6151      	str	r1, [r2, #20]
 80179d6:	e7bc      	b.n	8017952 <__gethex+0x396>
 80179d8:	6921      	ldr	r1, [r4, #16]
 80179da:	4559      	cmp	r1, fp
 80179dc:	dd0b      	ble.n	80179f6 <__gethex+0x43a>
 80179de:	2101      	movs	r1, #1
 80179e0:	4620      	mov	r0, r4
 80179e2:	f7ff fd83 	bl	80174ec <rshift>
 80179e6:	68bb      	ldr	r3, [r7, #8]
 80179e8:	3601      	adds	r6, #1
 80179ea:	42b3      	cmp	r3, r6
 80179ec:	f6ff aedb 	blt.w	80177a6 <__gethex+0x1ea>
 80179f0:	f04f 0801 	mov.w	r8, #1
 80179f4:	e7c2      	b.n	801797c <__gethex+0x3c0>
 80179f6:	f015 051f 	ands.w	r5, r5, #31
 80179fa:	d0f9      	beq.n	80179f0 <__gethex+0x434>
 80179fc:	9b01      	ldr	r3, [sp, #4]
 80179fe:	441a      	add	r2, r3
 8017a00:	f1c5 0520 	rsb	r5, r5, #32
 8017a04:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8017a08:	f000 f9cc 	bl	8017da4 <__hi0bits>
 8017a0c:	42a8      	cmp	r0, r5
 8017a0e:	dbe6      	blt.n	80179de <__gethex+0x422>
 8017a10:	e7ee      	b.n	80179f0 <__gethex+0x434>
 8017a12:	bf00      	nop
 8017a14:	0801cc44 	.word	0x0801cc44

08017a18 <L_shift>:
 8017a18:	f1c2 0208 	rsb	r2, r2, #8
 8017a1c:	0092      	lsls	r2, r2, #2
 8017a1e:	b570      	push	{r4, r5, r6, lr}
 8017a20:	f1c2 0620 	rsb	r6, r2, #32
 8017a24:	6843      	ldr	r3, [r0, #4]
 8017a26:	6804      	ldr	r4, [r0, #0]
 8017a28:	fa03 f506 	lsl.w	r5, r3, r6
 8017a2c:	432c      	orrs	r4, r5
 8017a2e:	40d3      	lsrs	r3, r2
 8017a30:	6004      	str	r4, [r0, #0]
 8017a32:	f840 3f04 	str.w	r3, [r0, #4]!
 8017a36:	4288      	cmp	r0, r1
 8017a38:	d3f4      	bcc.n	8017a24 <L_shift+0xc>
 8017a3a:	bd70      	pop	{r4, r5, r6, pc}

08017a3c <__match>:
 8017a3c:	b530      	push	{r4, r5, lr}
 8017a3e:	6803      	ldr	r3, [r0, #0]
 8017a40:	3301      	adds	r3, #1
 8017a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017a46:	b914      	cbnz	r4, 8017a4e <__match+0x12>
 8017a48:	6003      	str	r3, [r0, #0]
 8017a4a:	2001      	movs	r0, #1
 8017a4c:	bd30      	pop	{r4, r5, pc}
 8017a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017a56:	2d19      	cmp	r5, #25
 8017a58:	bf98      	it	ls
 8017a5a:	3220      	addls	r2, #32
 8017a5c:	42a2      	cmp	r2, r4
 8017a5e:	d0f0      	beq.n	8017a42 <__match+0x6>
 8017a60:	2000      	movs	r0, #0
 8017a62:	e7f3      	b.n	8017a4c <__match+0x10>

08017a64 <__hexnan>:
 8017a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a68:	680b      	ldr	r3, [r1, #0]
 8017a6a:	6801      	ldr	r1, [r0, #0]
 8017a6c:	115e      	asrs	r6, r3, #5
 8017a6e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017a72:	f013 031f 	ands.w	r3, r3, #31
 8017a76:	b087      	sub	sp, #28
 8017a78:	bf18      	it	ne
 8017a7a:	3604      	addne	r6, #4
 8017a7c:	2500      	movs	r5, #0
 8017a7e:	1f37      	subs	r7, r6, #4
 8017a80:	4682      	mov	sl, r0
 8017a82:	4690      	mov	r8, r2
 8017a84:	9301      	str	r3, [sp, #4]
 8017a86:	f846 5c04 	str.w	r5, [r6, #-4]
 8017a8a:	46b9      	mov	r9, r7
 8017a8c:	463c      	mov	r4, r7
 8017a8e:	9502      	str	r5, [sp, #8]
 8017a90:	46ab      	mov	fp, r5
 8017a92:	784a      	ldrb	r2, [r1, #1]
 8017a94:	1c4b      	adds	r3, r1, #1
 8017a96:	9303      	str	r3, [sp, #12]
 8017a98:	b342      	cbz	r2, 8017aec <__hexnan+0x88>
 8017a9a:	4610      	mov	r0, r2
 8017a9c:	9105      	str	r1, [sp, #20]
 8017a9e:	9204      	str	r2, [sp, #16]
 8017aa0:	f7ff fd76 	bl	8017590 <__hexdig_fun>
 8017aa4:	2800      	cmp	r0, #0
 8017aa6:	d14f      	bne.n	8017b48 <__hexnan+0xe4>
 8017aa8:	9a04      	ldr	r2, [sp, #16]
 8017aaa:	9905      	ldr	r1, [sp, #20]
 8017aac:	2a20      	cmp	r2, #32
 8017aae:	d818      	bhi.n	8017ae2 <__hexnan+0x7e>
 8017ab0:	9b02      	ldr	r3, [sp, #8]
 8017ab2:	459b      	cmp	fp, r3
 8017ab4:	dd13      	ble.n	8017ade <__hexnan+0x7a>
 8017ab6:	454c      	cmp	r4, r9
 8017ab8:	d206      	bcs.n	8017ac8 <__hexnan+0x64>
 8017aba:	2d07      	cmp	r5, #7
 8017abc:	dc04      	bgt.n	8017ac8 <__hexnan+0x64>
 8017abe:	462a      	mov	r2, r5
 8017ac0:	4649      	mov	r1, r9
 8017ac2:	4620      	mov	r0, r4
 8017ac4:	f7ff ffa8 	bl	8017a18 <L_shift>
 8017ac8:	4544      	cmp	r4, r8
 8017aca:	d950      	bls.n	8017b6e <__hexnan+0x10a>
 8017acc:	2300      	movs	r3, #0
 8017ace:	f1a4 0904 	sub.w	r9, r4, #4
 8017ad2:	f844 3c04 	str.w	r3, [r4, #-4]
 8017ad6:	f8cd b008 	str.w	fp, [sp, #8]
 8017ada:	464c      	mov	r4, r9
 8017adc:	461d      	mov	r5, r3
 8017ade:	9903      	ldr	r1, [sp, #12]
 8017ae0:	e7d7      	b.n	8017a92 <__hexnan+0x2e>
 8017ae2:	2a29      	cmp	r2, #41	; 0x29
 8017ae4:	d155      	bne.n	8017b92 <__hexnan+0x12e>
 8017ae6:	3102      	adds	r1, #2
 8017ae8:	f8ca 1000 	str.w	r1, [sl]
 8017aec:	f1bb 0f00 	cmp.w	fp, #0
 8017af0:	d04f      	beq.n	8017b92 <__hexnan+0x12e>
 8017af2:	454c      	cmp	r4, r9
 8017af4:	d206      	bcs.n	8017b04 <__hexnan+0xa0>
 8017af6:	2d07      	cmp	r5, #7
 8017af8:	dc04      	bgt.n	8017b04 <__hexnan+0xa0>
 8017afa:	462a      	mov	r2, r5
 8017afc:	4649      	mov	r1, r9
 8017afe:	4620      	mov	r0, r4
 8017b00:	f7ff ff8a 	bl	8017a18 <L_shift>
 8017b04:	4544      	cmp	r4, r8
 8017b06:	d934      	bls.n	8017b72 <__hexnan+0x10e>
 8017b08:	f1a8 0204 	sub.w	r2, r8, #4
 8017b0c:	4623      	mov	r3, r4
 8017b0e:	f853 1b04 	ldr.w	r1, [r3], #4
 8017b12:	f842 1f04 	str.w	r1, [r2, #4]!
 8017b16:	429f      	cmp	r7, r3
 8017b18:	d2f9      	bcs.n	8017b0e <__hexnan+0xaa>
 8017b1a:	1b3b      	subs	r3, r7, r4
 8017b1c:	f023 0303 	bic.w	r3, r3, #3
 8017b20:	3304      	adds	r3, #4
 8017b22:	3e03      	subs	r6, #3
 8017b24:	3401      	adds	r4, #1
 8017b26:	42a6      	cmp	r6, r4
 8017b28:	bf38      	it	cc
 8017b2a:	2304      	movcc	r3, #4
 8017b2c:	4443      	add	r3, r8
 8017b2e:	2200      	movs	r2, #0
 8017b30:	f843 2b04 	str.w	r2, [r3], #4
 8017b34:	429f      	cmp	r7, r3
 8017b36:	d2fb      	bcs.n	8017b30 <__hexnan+0xcc>
 8017b38:	683b      	ldr	r3, [r7, #0]
 8017b3a:	b91b      	cbnz	r3, 8017b44 <__hexnan+0xe0>
 8017b3c:	4547      	cmp	r7, r8
 8017b3e:	d126      	bne.n	8017b8e <__hexnan+0x12a>
 8017b40:	2301      	movs	r3, #1
 8017b42:	603b      	str	r3, [r7, #0]
 8017b44:	2005      	movs	r0, #5
 8017b46:	e025      	b.n	8017b94 <__hexnan+0x130>
 8017b48:	3501      	adds	r5, #1
 8017b4a:	2d08      	cmp	r5, #8
 8017b4c:	f10b 0b01 	add.w	fp, fp, #1
 8017b50:	dd06      	ble.n	8017b60 <__hexnan+0xfc>
 8017b52:	4544      	cmp	r4, r8
 8017b54:	d9c3      	bls.n	8017ade <__hexnan+0x7a>
 8017b56:	2300      	movs	r3, #0
 8017b58:	f844 3c04 	str.w	r3, [r4, #-4]
 8017b5c:	2501      	movs	r5, #1
 8017b5e:	3c04      	subs	r4, #4
 8017b60:	6822      	ldr	r2, [r4, #0]
 8017b62:	f000 000f 	and.w	r0, r0, #15
 8017b66:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017b6a:	6020      	str	r0, [r4, #0]
 8017b6c:	e7b7      	b.n	8017ade <__hexnan+0x7a>
 8017b6e:	2508      	movs	r5, #8
 8017b70:	e7b5      	b.n	8017ade <__hexnan+0x7a>
 8017b72:	9b01      	ldr	r3, [sp, #4]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d0df      	beq.n	8017b38 <__hexnan+0xd4>
 8017b78:	f1c3 0320 	rsb	r3, r3, #32
 8017b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8017b80:	40da      	lsrs	r2, r3
 8017b82:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017b86:	4013      	ands	r3, r2
 8017b88:	f846 3c04 	str.w	r3, [r6, #-4]
 8017b8c:	e7d4      	b.n	8017b38 <__hexnan+0xd4>
 8017b8e:	3f04      	subs	r7, #4
 8017b90:	e7d2      	b.n	8017b38 <__hexnan+0xd4>
 8017b92:	2004      	movs	r0, #4
 8017b94:	b007      	add	sp, #28
 8017b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b9a <__ascii_mbtowc>:
 8017b9a:	b082      	sub	sp, #8
 8017b9c:	b901      	cbnz	r1, 8017ba0 <__ascii_mbtowc+0x6>
 8017b9e:	a901      	add	r1, sp, #4
 8017ba0:	b142      	cbz	r2, 8017bb4 <__ascii_mbtowc+0x1a>
 8017ba2:	b14b      	cbz	r3, 8017bb8 <__ascii_mbtowc+0x1e>
 8017ba4:	7813      	ldrb	r3, [r2, #0]
 8017ba6:	600b      	str	r3, [r1, #0]
 8017ba8:	7812      	ldrb	r2, [r2, #0]
 8017baa:	1e10      	subs	r0, r2, #0
 8017bac:	bf18      	it	ne
 8017bae:	2001      	movne	r0, #1
 8017bb0:	b002      	add	sp, #8
 8017bb2:	4770      	bx	lr
 8017bb4:	4610      	mov	r0, r2
 8017bb6:	e7fb      	b.n	8017bb0 <__ascii_mbtowc+0x16>
 8017bb8:	f06f 0001 	mvn.w	r0, #1
 8017bbc:	e7f8      	b.n	8017bb0 <__ascii_mbtowc+0x16>
	...

08017bc0 <_Balloc>:
 8017bc0:	b570      	push	{r4, r5, r6, lr}
 8017bc2:	69c6      	ldr	r6, [r0, #28]
 8017bc4:	4604      	mov	r4, r0
 8017bc6:	460d      	mov	r5, r1
 8017bc8:	b976      	cbnz	r6, 8017be8 <_Balloc+0x28>
 8017bca:	2010      	movs	r0, #16
 8017bcc:	f7fc fce0 	bl	8014590 <malloc>
 8017bd0:	4602      	mov	r2, r0
 8017bd2:	61e0      	str	r0, [r4, #28]
 8017bd4:	b920      	cbnz	r0, 8017be0 <_Balloc+0x20>
 8017bd6:	4b18      	ldr	r3, [pc, #96]	; (8017c38 <_Balloc+0x78>)
 8017bd8:	4818      	ldr	r0, [pc, #96]	; (8017c3c <_Balloc+0x7c>)
 8017bda:	216b      	movs	r1, #107	; 0x6b
 8017bdc:	f7fe fda2 	bl	8016724 <__assert_func>
 8017be0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017be4:	6006      	str	r6, [r0, #0]
 8017be6:	60c6      	str	r6, [r0, #12]
 8017be8:	69e6      	ldr	r6, [r4, #28]
 8017bea:	68f3      	ldr	r3, [r6, #12]
 8017bec:	b183      	cbz	r3, 8017c10 <_Balloc+0x50>
 8017bee:	69e3      	ldr	r3, [r4, #28]
 8017bf0:	68db      	ldr	r3, [r3, #12]
 8017bf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017bf6:	b9b8      	cbnz	r0, 8017c28 <_Balloc+0x68>
 8017bf8:	2101      	movs	r1, #1
 8017bfa:	fa01 f605 	lsl.w	r6, r1, r5
 8017bfe:	1d72      	adds	r2, r6, #5
 8017c00:	0092      	lsls	r2, r2, #2
 8017c02:	4620      	mov	r0, r4
 8017c04:	f000 fecf 	bl	80189a6 <_calloc_r>
 8017c08:	b160      	cbz	r0, 8017c24 <_Balloc+0x64>
 8017c0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017c0e:	e00e      	b.n	8017c2e <_Balloc+0x6e>
 8017c10:	2221      	movs	r2, #33	; 0x21
 8017c12:	2104      	movs	r1, #4
 8017c14:	4620      	mov	r0, r4
 8017c16:	f000 fec6 	bl	80189a6 <_calloc_r>
 8017c1a:	69e3      	ldr	r3, [r4, #28]
 8017c1c:	60f0      	str	r0, [r6, #12]
 8017c1e:	68db      	ldr	r3, [r3, #12]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d1e4      	bne.n	8017bee <_Balloc+0x2e>
 8017c24:	2000      	movs	r0, #0
 8017c26:	bd70      	pop	{r4, r5, r6, pc}
 8017c28:	6802      	ldr	r2, [r0, #0]
 8017c2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017c2e:	2300      	movs	r3, #0
 8017c30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017c34:	e7f7      	b.n	8017c26 <_Balloc+0x66>
 8017c36:	bf00      	nop
 8017c38:	0801cb2a 	.word	0x0801cb2a
 8017c3c:	0801ccb5 	.word	0x0801ccb5

08017c40 <_Bfree>:
 8017c40:	b570      	push	{r4, r5, r6, lr}
 8017c42:	69c6      	ldr	r6, [r0, #28]
 8017c44:	4605      	mov	r5, r0
 8017c46:	460c      	mov	r4, r1
 8017c48:	b976      	cbnz	r6, 8017c68 <_Bfree+0x28>
 8017c4a:	2010      	movs	r0, #16
 8017c4c:	f7fc fca0 	bl	8014590 <malloc>
 8017c50:	4602      	mov	r2, r0
 8017c52:	61e8      	str	r0, [r5, #28]
 8017c54:	b920      	cbnz	r0, 8017c60 <_Bfree+0x20>
 8017c56:	4b09      	ldr	r3, [pc, #36]	; (8017c7c <_Bfree+0x3c>)
 8017c58:	4809      	ldr	r0, [pc, #36]	; (8017c80 <_Bfree+0x40>)
 8017c5a:	218f      	movs	r1, #143	; 0x8f
 8017c5c:	f7fe fd62 	bl	8016724 <__assert_func>
 8017c60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017c64:	6006      	str	r6, [r0, #0]
 8017c66:	60c6      	str	r6, [r0, #12]
 8017c68:	b13c      	cbz	r4, 8017c7a <_Bfree+0x3a>
 8017c6a:	69eb      	ldr	r3, [r5, #28]
 8017c6c:	6862      	ldr	r2, [r4, #4]
 8017c6e:	68db      	ldr	r3, [r3, #12]
 8017c70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017c74:	6021      	str	r1, [r4, #0]
 8017c76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017c7a:	bd70      	pop	{r4, r5, r6, pc}
 8017c7c:	0801cb2a 	.word	0x0801cb2a
 8017c80:	0801ccb5 	.word	0x0801ccb5

08017c84 <__multadd>:
 8017c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c88:	690d      	ldr	r5, [r1, #16]
 8017c8a:	4607      	mov	r7, r0
 8017c8c:	460c      	mov	r4, r1
 8017c8e:	461e      	mov	r6, r3
 8017c90:	f101 0c14 	add.w	ip, r1, #20
 8017c94:	2000      	movs	r0, #0
 8017c96:	f8dc 3000 	ldr.w	r3, [ip]
 8017c9a:	b299      	uxth	r1, r3
 8017c9c:	fb02 6101 	mla	r1, r2, r1, r6
 8017ca0:	0c1e      	lsrs	r6, r3, #16
 8017ca2:	0c0b      	lsrs	r3, r1, #16
 8017ca4:	fb02 3306 	mla	r3, r2, r6, r3
 8017ca8:	b289      	uxth	r1, r1
 8017caa:	3001      	adds	r0, #1
 8017cac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017cb0:	4285      	cmp	r5, r0
 8017cb2:	f84c 1b04 	str.w	r1, [ip], #4
 8017cb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017cba:	dcec      	bgt.n	8017c96 <__multadd+0x12>
 8017cbc:	b30e      	cbz	r6, 8017d02 <__multadd+0x7e>
 8017cbe:	68a3      	ldr	r3, [r4, #8]
 8017cc0:	42ab      	cmp	r3, r5
 8017cc2:	dc19      	bgt.n	8017cf8 <__multadd+0x74>
 8017cc4:	6861      	ldr	r1, [r4, #4]
 8017cc6:	4638      	mov	r0, r7
 8017cc8:	3101      	adds	r1, #1
 8017cca:	f7ff ff79 	bl	8017bc0 <_Balloc>
 8017cce:	4680      	mov	r8, r0
 8017cd0:	b928      	cbnz	r0, 8017cde <__multadd+0x5a>
 8017cd2:	4602      	mov	r2, r0
 8017cd4:	4b0c      	ldr	r3, [pc, #48]	; (8017d08 <__multadd+0x84>)
 8017cd6:	480d      	ldr	r0, [pc, #52]	; (8017d0c <__multadd+0x88>)
 8017cd8:	21ba      	movs	r1, #186	; 0xba
 8017cda:	f7fe fd23 	bl	8016724 <__assert_func>
 8017cde:	6922      	ldr	r2, [r4, #16]
 8017ce0:	3202      	adds	r2, #2
 8017ce2:	f104 010c 	add.w	r1, r4, #12
 8017ce6:	0092      	lsls	r2, r2, #2
 8017ce8:	300c      	adds	r0, #12
 8017cea:	f7fe fcfe 	bl	80166ea <memcpy>
 8017cee:	4621      	mov	r1, r4
 8017cf0:	4638      	mov	r0, r7
 8017cf2:	f7ff ffa5 	bl	8017c40 <_Bfree>
 8017cf6:	4644      	mov	r4, r8
 8017cf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017cfc:	3501      	adds	r5, #1
 8017cfe:	615e      	str	r6, [r3, #20]
 8017d00:	6125      	str	r5, [r4, #16]
 8017d02:	4620      	mov	r0, r4
 8017d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d08:	0801cc44 	.word	0x0801cc44
 8017d0c:	0801ccb5 	.word	0x0801ccb5

08017d10 <__s2b>:
 8017d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d14:	460c      	mov	r4, r1
 8017d16:	4615      	mov	r5, r2
 8017d18:	461f      	mov	r7, r3
 8017d1a:	2209      	movs	r2, #9
 8017d1c:	3308      	adds	r3, #8
 8017d1e:	4606      	mov	r6, r0
 8017d20:	fb93 f3f2 	sdiv	r3, r3, r2
 8017d24:	2100      	movs	r1, #0
 8017d26:	2201      	movs	r2, #1
 8017d28:	429a      	cmp	r2, r3
 8017d2a:	db09      	blt.n	8017d40 <__s2b+0x30>
 8017d2c:	4630      	mov	r0, r6
 8017d2e:	f7ff ff47 	bl	8017bc0 <_Balloc>
 8017d32:	b940      	cbnz	r0, 8017d46 <__s2b+0x36>
 8017d34:	4602      	mov	r2, r0
 8017d36:	4b19      	ldr	r3, [pc, #100]	; (8017d9c <__s2b+0x8c>)
 8017d38:	4819      	ldr	r0, [pc, #100]	; (8017da0 <__s2b+0x90>)
 8017d3a:	21d3      	movs	r1, #211	; 0xd3
 8017d3c:	f7fe fcf2 	bl	8016724 <__assert_func>
 8017d40:	0052      	lsls	r2, r2, #1
 8017d42:	3101      	adds	r1, #1
 8017d44:	e7f0      	b.n	8017d28 <__s2b+0x18>
 8017d46:	9b08      	ldr	r3, [sp, #32]
 8017d48:	6143      	str	r3, [r0, #20]
 8017d4a:	2d09      	cmp	r5, #9
 8017d4c:	f04f 0301 	mov.w	r3, #1
 8017d50:	6103      	str	r3, [r0, #16]
 8017d52:	dd16      	ble.n	8017d82 <__s2b+0x72>
 8017d54:	f104 0909 	add.w	r9, r4, #9
 8017d58:	46c8      	mov	r8, r9
 8017d5a:	442c      	add	r4, r5
 8017d5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017d60:	4601      	mov	r1, r0
 8017d62:	3b30      	subs	r3, #48	; 0x30
 8017d64:	220a      	movs	r2, #10
 8017d66:	4630      	mov	r0, r6
 8017d68:	f7ff ff8c 	bl	8017c84 <__multadd>
 8017d6c:	45a0      	cmp	r8, r4
 8017d6e:	d1f5      	bne.n	8017d5c <__s2b+0x4c>
 8017d70:	f1a5 0408 	sub.w	r4, r5, #8
 8017d74:	444c      	add	r4, r9
 8017d76:	1b2d      	subs	r5, r5, r4
 8017d78:	1963      	adds	r3, r4, r5
 8017d7a:	42bb      	cmp	r3, r7
 8017d7c:	db04      	blt.n	8017d88 <__s2b+0x78>
 8017d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d82:	340a      	adds	r4, #10
 8017d84:	2509      	movs	r5, #9
 8017d86:	e7f6      	b.n	8017d76 <__s2b+0x66>
 8017d88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017d8c:	4601      	mov	r1, r0
 8017d8e:	3b30      	subs	r3, #48	; 0x30
 8017d90:	220a      	movs	r2, #10
 8017d92:	4630      	mov	r0, r6
 8017d94:	f7ff ff76 	bl	8017c84 <__multadd>
 8017d98:	e7ee      	b.n	8017d78 <__s2b+0x68>
 8017d9a:	bf00      	nop
 8017d9c:	0801cc44 	.word	0x0801cc44
 8017da0:	0801ccb5 	.word	0x0801ccb5

08017da4 <__hi0bits>:
 8017da4:	0c03      	lsrs	r3, r0, #16
 8017da6:	041b      	lsls	r3, r3, #16
 8017da8:	b9d3      	cbnz	r3, 8017de0 <__hi0bits+0x3c>
 8017daa:	0400      	lsls	r0, r0, #16
 8017dac:	2310      	movs	r3, #16
 8017dae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017db2:	bf04      	itt	eq
 8017db4:	0200      	lsleq	r0, r0, #8
 8017db6:	3308      	addeq	r3, #8
 8017db8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017dbc:	bf04      	itt	eq
 8017dbe:	0100      	lsleq	r0, r0, #4
 8017dc0:	3304      	addeq	r3, #4
 8017dc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017dc6:	bf04      	itt	eq
 8017dc8:	0080      	lsleq	r0, r0, #2
 8017dca:	3302      	addeq	r3, #2
 8017dcc:	2800      	cmp	r0, #0
 8017dce:	db05      	blt.n	8017ddc <__hi0bits+0x38>
 8017dd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017dd4:	f103 0301 	add.w	r3, r3, #1
 8017dd8:	bf08      	it	eq
 8017dda:	2320      	moveq	r3, #32
 8017ddc:	4618      	mov	r0, r3
 8017dde:	4770      	bx	lr
 8017de0:	2300      	movs	r3, #0
 8017de2:	e7e4      	b.n	8017dae <__hi0bits+0xa>

08017de4 <__lo0bits>:
 8017de4:	6803      	ldr	r3, [r0, #0]
 8017de6:	f013 0207 	ands.w	r2, r3, #7
 8017dea:	d00c      	beq.n	8017e06 <__lo0bits+0x22>
 8017dec:	07d9      	lsls	r1, r3, #31
 8017dee:	d422      	bmi.n	8017e36 <__lo0bits+0x52>
 8017df0:	079a      	lsls	r2, r3, #30
 8017df2:	bf49      	itett	mi
 8017df4:	085b      	lsrmi	r3, r3, #1
 8017df6:	089b      	lsrpl	r3, r3, #2
 8017df8:	6003      	strmi	r3, [r0, #0]
 8017dfa:	2201      	movmi	r2, #1
 8017dfc:	bf5c      	itt	pl
 8017dfe:	6003      	strpl	r3, [r0, #0]
 8017e00:	2202      	movpl	r2, #2
 8017e02:	4610      	mov	r0, r2
 8017e04:	4770      	bx	lr
 8017e06:	b299      	uxth	r1, r3
 8017e08:	b909      	cbnz	r1, 8017e0e <__lo0bits+0x2a>
 8017e0a:	0c1b      	lsrs	r3, r3, #16
 8017e0c:	2210      	movs	r2, #16
 8017e0e:	b2d9      	uxtb	r1, r3
 8017e10:	b909      	cbnz	r1, 8017e16 <__lo0bits+0x32>
 8017e12:	3208      	adds	r2, #8
 8017e14:	0a1b      	lsrs	r3, r3, #8
 8017e16:	0719      	lsls	r1, r3, #28
 8017e18:	bf04      	itt	eq
 8017e1a:	091b      	lsreq	r3, r3, #4
 8017e1c:	3204      	addeq	r2, #4
 8017e1e:	0799      	lsls	r1, r3, #30
 8017e20:	bf04      	itt	eq
 8017e22:	089b      	lsreq	r3, r3, #2
 8017e24:	3202      	addeq	r2, #2
 8017e26:	07d9      	lsls	r1, r3, #31
 8017e28:	d403      	bmi.n	8017e32 <__lo0bits+0x4e>
 8017e2a:	085b      	lsrs	r3, r3, #1
 8017e2c:	f102 0201 	add.w	r2, r2, #1
 8017e30:	d003      	beq.n	8017e3a <__lo0bits+0x56>
 8017e32:	6003      	str	r3, [r0, #0]
 8017e34:	e7e5      	b.n	8017e02 <__lo0bits+0x1e>
 8017e36:	2200      	movs	r2, #0
 8017e38:	e7e3      	b.n	8017e02 <__lo0bits+0x1e>
 8017e3a:	2220      	movs	r2, #32
 8017e3c:	e7e1      	b.n	8017e02 <__lo0bits+0x1e>
	...

08017e40 <__i2b>:
 8017e40:	b510      	push	{r4, lr}
 8017e42:	460c      	mov	r4, r1
 8017e44:	2101      	movs	r1, #1
 8017e46:	f7ff febb 	bl	8017bc0 <_Balloc>
 8017e4a:	4602      	mov	r2, r0
 8017e4c:	b928      	cbnz	r0, 8017e5a <__i2b+0x1a>
 8017e4e:	4b05      	ldr	r3, [pc, #20]	; (8017e64 <__i2b+0x24>)
 8017e50:	4805      	ldr	r0, [pc, #20]	; (8017e68 <__i2b+0x28>)
 8017e52:	f240 1145 	movw	r1, #325	; 0x145
 8017e56:	f7fe fc65 	bl	8016724 <__assert_func>
 8017e5a:	2301      	movs	r3, #1
 8017e5c:	6144      	str	r4, [r0, #20]
 8017e5e:	6103      	str	r3, [r0, #16]
 8017e60:	bd10      	pop	{r4, pc}
 8017e62:	bf00      	nop
 8017e64:	0801cc44 	.word	0x0801cc44
 8017e68:	0801ccb5 	.word	0x0801ccb5

08017e6c <__multiply>:
 8017e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e70:	4691      	mov	r9, r2
 8017e72:	690a      	ldr	r2, [r1, #16]
 8017e74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017e78:	429a      	cmp	r2, r3
 8017e7a:	bfb8      	it	lt
 8017e7c:	460b      	movlt	r3, r1
 8017e7e:	460c      	mov	r4, r1
 8017e80:	bfbc      	itt	lt
 8017e82:	464c      	movlt	r4, r9
 8017e84:	4699      	movlt	r9, r3
 8017e86:	6927      	ldr	r7, [r4, #16]
 8017e88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017e8c:	68a3      	ldr	r3, [r4, #8]
 8017e8e:	6861      	ldr	r1, [r4, #4]
 8017e90:	eb07 060a 	add.w	r6, r7, sl
 8017e94:	42b3      	cmp	r3, r6
 8017e96:	b085      	sub	sp, #20
 8017e98:	bfb8      	it	lt
 8017e9a:	3101      	addlt	r1, #1
 8017e9c:	f7ff fe90 	bl	8017bc0 <_Balloc>
 8017ea0:	b930      	cbnz	r0, 8017eb0 <__multiply+0x44>
 8017ea2:	4602      	mov	r2, r0
 8017ea4:	4b44      	ldr	r3, [pc, #272]	; (8017fb8 <__multiply+0x14c>)
 8017ea6:	4845      	ldr	r0, [pc, #276]	; (8017fbc <__multiply+0x150>)
 8017ea8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8017eac:	f7fe fc3a 	bl	8016724 <__assert_func>
 8017eb0:	f100 0514 	add.w	r5, r0, #20
 8017eb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017eb8:	462b      	mov	r3, r5
 8017eba:	2200      	movs	r2, #0
 8017ebc:	4543      	cmp	r3, r8
 8017ebe:	d321      	bcc.n	8017f04 <__multiply+0x98>
 8017ec0:	f104 0314 	add.w	r3, r4, #20
 8017ec4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017ec8:	f109 0314 	add.w	r3, r9, #20
 8017ecc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017ed0:	9202      	str	r2, [sp, #8]
 8017ed2:	1b3a      	subs	r2, r7, r4
 8017ed4:	3a15      	subs	r2, #21
 8017ed6:	f022 0203 	bic.w	r2, r2, #3
 8017eda:	3204      	adds	r2, #4
 8017edc:	f104 0115 	add.w	r1, r4, #21
 8017ee0:	428f      	cmp	r7, r1
 8017ee2:	bf38      	it	cc
 8017ee4:	2204      	movcc	r2, #4
 8017ee6:	9201      	str	r2, [sp, #4]
 8017ee8:	9a02      	ldr	r2, [sp, #8]
 8017eea:	9303      	str	r3, [sp, #12]
 8017eec:	429a      	cmp	r2, r3
 8017eee:	d80c      	bhi.n	8017f0a <__multiply+0x9e>
 8017ef0:	2e00      	cmp	r6, #0
 8017ef2:	dd03      	ble.n	8017efc <__multiply+0x90>
 8017ef4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d05b      	beq.n	8017fb4 <__multiply+0x148>
 8017efc:	6106      	str	r6, [r0, #16]
 8017efe:	b005      	add	sp, #20
 8017f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f04:	f843 2b04 	str.w	r2, [r3], #4
 8017f08:	e7d8      	b.n	8017ebc <__multiply+0x50>
 8017f0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8017f0e:	f1ba 0f00 	cmp.w	sl, #0
 8017f12:	d024      	beq.n	8017f5e <__multiply+0xf2>
 8017f14:	f104 0e14 	add.w	lr, r4, #20
 8017f18:	46a9      	mov	r9, r5
 8017f1a:	f04f 0c00 	mov.w	ip, #0
 8017f1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017f22:	f8d9 1000 	ldr.w	r1, [r9]
 8017f26:	fa1f fb82 	uxth.w	fp, r2
 8017f2a:	b289      	uxth	r1, r1
 8017f2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8017f30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017f34:	f8d9 2000 	ldr.w	r2, [r9]
 8017f38:	4461      	add	r1, ip
 8017f3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017f3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8017f42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017f46:	b289      	uxth	r1, r1
 8017f48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017f4c:	4577      	cmp	r7, lr
 8017f4e:	f849 1b04 	str.w	r1, [r9], #4
 8017f52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017f56:	d8e2      	bhi.n	8017f1e <__multiply+0xb2>
 8017f58:	9a01      	ldr	r2, [sp, #4]
 8017f5a:	f845 c002 	str.w	ip, [r5, r2]
 8017f5e:	9a03      	ldr	r2, [sp, #12]
 8017f60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017f64:	3304      	adds	r3, #4
 8017f66:	f1b9 0f00 	cmp.w	r9, #0
 8017f6a:	d021      	beq.n	8017fb0 <__multiply+0x144>
 8017f6c:	6829      	ldr	r1, [r5, #0]
 8017f6e:	f104 0c14 	add.w	ip, r4, #20
 8017f72:	46ae      	mov	lr, r5
 8017f74:	f04f 0a00 	mov.w	sl, #0
 8017f78:	f8bc b000 	ldrh.w	fp, [ip]
 8017f7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017f80:	fb09 220b 	mla	r2, r9, fp, r2
 8017f84:	4452      	add	r2, sl
 8017f86:	b289      	uxth	r1, r1
 8017f88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017f8c:	f84e 1b04 	str.w	r1, [lr], #4
 8017f90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017f94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017f98:	f8be 1000 	ldrh.w	r1, [lr]
 8017f9c:	fb09 110a 	mla	r1, r9, sl, r1
 8017fa0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8017fa4:	4567      	cmp	r7, ip
 8017fa6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017faa:	d8e5      	bhi.n	8017f78 <__multiply+0x10c>
 8017fac:	9a01      	ldr	r2, [sp, #4]
 8017fae:	50a9      	str	r1, [r5, r2]
 8017fb0:	3504      	adds	r5, #4
 8017fb2:	e799      	b.n	8017ee8 <__multiply+0x7c>
 8017fb4:	3e01      	subs	r6, #1
 8017fb6:	e79b      	b.n	8017ef0 <__multiply+0x84>
 8017fb8:	0801cc44 	.word	0x0801cc44
 8017fbc:	0801ccb5 	.word	0x0801ccb5

08017fc0 <__pow5mult>:
 8017fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017fc4:	4615      	mov	r5, r2
 8017fc6:	f012 0203 	ands.w	r2, r2, #3
 8017fca:	4606      	mov	r6, r0
 8017fcc:	460f      	mov	r7, r1
 8017fce:	d007      	beq.n	8017fe0 <__pow5mult+0x20>
 8017fd0:	4c25      	ldr	r4, [pc, #148]	; (8018068 <__pow5mult+0xa8>)
 8017fd2:	3a01      	subs	r2, #1
 8017fd4:	2300      	movs	r3, #0
 8017fd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017fda:	f7ff fe53 	bl	8017c84 <__multadd>
 8017fde:	4607      	mov	r7, r0
 8017fe0:	10ad      	asrs	r5, r5, #2
 8017fe2:	d03d      	beq.n	8018060 <__pow5mult+0xa0>
 8017fe4:	69f4      	ldr	r4, [r6, #28]
 8017fe6:	b97c      	cbnz	r4, 8018008 <__pow5mult+0x48>
 8017fe8:	2010      	movs	r0, #16
 8017fea:	f7fc fad1 	bl	8014590 <malloc>
 8017fee:	4602      	mov	r2, r0
 8017ff0:	61f0      	str	r0, [r6, #28]
 8017ff2:	b928      	cbnz	r0, 8018000 <__pow5mult+0x40>
 8017ff4:	4b1d      	ldr	r3, [pc, #116]	; (801806c <__pow5mult+0xac>)
 8017ff6:	481e      	ldr	r0, [pc, #120]	; (8018070 <__pow5mult+0xb0>)
 8017ff8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8017ffc:	f7fe fb92 	bl	8016724 <__assert_func>
 8018000:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018004:	6004      	str	r4, [r0, #0]
 8018006:	60c4      	str	r4, [r0, #12]
 8018008:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801800c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018010:	b94c      	cbnz	r4, 8018026 <__pow5mult+0x66>
 8018012:	f240 2171 	movw	r1, #625	; 0x271
 8018016:	4630      	mov	r0, r6
 8018018:	f7ff ff12 	bl	8017e40 <__i2b>
 801801c:	2300      	movs	r3, #0
 801801e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018022:	4604      	mov	r4, r0
 8018024:	6003      	str	r3, [r0, #0]
 8018026:	f04f 0900 	mov.w	r9, #0
 801802a:	07eb      	lsls	r3, r5, #31
 801802c:	d50a      	bpl.n	8018044 <__pow5mult+0x84>
 801802e:	4639      	mov	r1, r7
 8018030:	4622      	mov	r2, r4
 8018032:	4630      	mov	r0, r6
 8018034:	f7ff ff1a 	bl	8017e6c <__multiply>
 8018038:	4639      	mov	r1, r7
 801803a:	4680      	mov	r8, r0
 801803c:	4630      	mov	r0, r6
 801803e:	f7ff fdff 	bl	8017c40 <_Bfree>
 8018042:	4647      	mov	r7, r8
 8018044:	106d      	asrs	r5, r5, #1
 8018046:	d00b      	beq.n	8018060 <__pow5mult+0xa0>
 8018048:	6820      	ldr	r0, [r4, #0]
 801804a:	b938      	cbnz	r0, 801805c <__pow5mult+0x9c>
 801804c:	4622      	mov	r2, r4
 801804e:	4621      	mov	r1, r4
 8018050:	4630      	mov	r0, r6
 8018052:	f7ff ff0b 	bl	8017e6c <__multiply>
 8018056:	6020      	str	r0, [r4, #0]
 8018058:	f8c0 9000 	str.w	r9, [r0]
 801805c:	4604      	mov	r4, r0
 801805e:	e7e4      	b.n	801802a <__pow5mult+0x6a>
 8018060:	4638      	mov	r0, r7
 8018062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018066:	bf00      	nop
 8018068:	0801ce00 	.word	0x0801ce00
 801806c:	0801cb2a 	.word	0x0801cb2a
 8018070:	0801ccb5 	.word	0x0801ccb5

08018074 <__lshift>:
 8018074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018078:	460c      	mov	r4, r1
 801807a:	6849      	ldr	r1, [r1, #4]
 801807c:	6923      	ldr	r3, [r4, #16]
 801807e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018082:	68a3      	ldr	r3, [r4, #8]
 8018084:	4607      	mov	r7, r0
 8018086:	4691      	mov	r9, r2
 8018088:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801808c:	f108 0601 	add.w	r6, r8, #1
 8018090:	42b3      	cmp	r3, r6
 8018092:	db0b      	blt.n	80180ac <__lshift+0x38>
 8018094:	4638      	mov	r0, r7
 8018096:	f7ff fd93 	bl	8017bc0 <_Balloc>
 801809a:	4605      	mov	r5, r0
 801809c:	b948      	cbnz	r0, 80180b2 <__lshift+0x3e>
 801809e:	4602      	mov	r2, r0
 80180a0:	4b28      	ldr	r3, [pc, #160]	; (8018144 <__lshift+0xd0>)
 80180a2:	4829      	ldr	r0, [pc, #164]	; (8018148 <__lshift+0xd4>)
 80180a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80180a8:	f7fe fb3c 	bl	8016724 <__assert_func>
 80180ac:	3101      	adds	r1, #1
 80180ae:	005b      	lsls	r3, r3, #1
 80180b0:	e7ee      	b.n	8018090 <__lshift+0x1c>
 80180b2:	2300      	movs	r3, #0
 80180b4:	f100 0114 	add.w	r1, r0, #20
 80180b8:	f100 0210 	add.w	r2, r0, #16
 80180bc:	4618      	mov	r0, r3
 80180be:	4553      	cmp	r3, sl
 80180c0:	db33      	blt.n	801812a <__lshift+0xb6>
 80180c2:	6920      	ldr	r0, [r4, #16]
 80180c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80180c8:	f104 0314 	add.w	r3, r4, #20
 80180cc:	f019 091f 	ands.w	r9, r9, #31
 80180d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80180d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80180d8:	d02b      	beq.n	8018132 <__lshift+0xbe>
 80180da:	f1c9 0e20 	rsb	lr, r9, #32
 80180de:	468a      	mov	sl, r1
 80180e0:	2200      	movs	r2, #0
 80180e2:	6818      	ldr	r0, [r3, #0]
 80180e4:	fa00 f009 	lsl.w	r0, r0, r9
 80180e8:	4310      	orrs	r0, r2
 80180ea:	f84a 0b04 	str.w	r0, [sl], #4
 80180ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80180f2:	459c      	cmp	ip, r3
 80180f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80180f8:	d8f3      	bhi.n	80180e2 <__lshift+0x6e>
 80180fa:	ebac 0304 	sub.w	r3, ip, r4
 80180fe:	3b15      	subs	r3, #21
 8018100:	f023 0303 	bic.w	r3, r3, #3
 8018104:	3304      	adds	r3, #4
 8018106:	f104 0015 	add.w	r0, r4, #21
 801810a:	4584      	cmp	ip, r0
 801810c:	bf38      	it	cc
 801810e:	2304      	movcc	r3, #4
 8018110:	50ca      	str	r2, [r1, r3]
 8018112:	b10a      	cbz	r2, 8018118 <__lshift+0xa4>
 8018114:	f108 0602 	add.w	r6, r8, #2
 8018118:	3e01      	subs	r6, #1
 801811a:	4638      	mov	r0, r7
 801811c:	612e      	str	r6, [r5, #16]
 801811e:	4621      	mov	r1, r4
 8018120:	f7ff fd8e 	bl	8017c40 <_Bfree>
 8018124:	4628      	mov	r0, r5
 8018126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801812a:	f842 0f04 	str.w	r0, [r2, #4]!
 801812e:	3301      	adds	r3, #1
 8018130:	e7c5      	b.n	80180be <__lshift+0x4a>
 8018132:	3904      	subs	r1, #4
 8018134:	f853 2b04 	ldr.w	r2, [r3], #4
 8018138:	f841 2f04 	str.w	r2, [r1, #4]!
 801813c:	459c      	cmp	ip, r3
 801813e:	d8f9      	bhi.n	8018134 <__lshift+0xc0>
 8018140:	e7ea      	b.n	8018118 <__lshift+0xa4>
 8018142:	bf00      	nop
 8018144:	0801cc44 	.word	0x0801cc44
 8018148:	0801ccb5 	.word	0x0801ccb5

0801814c <__mcmp>:
 801814c:	b530      	push	{r4, r5, lr}
 801814e:	6902      	ldr	r2, [r0, #16]
 8018150:	690c      	ldr	r4, [r1, #16]
 8018152:	1b12      	subs	r2, r2, r4
 8018154:	d10e      	bne.n	8018174 <__mcmp+0x28>
 8018156:	f100 0314 	add.w	r3, r0, #20
 801815a:	3114      	adds	r1, #20
 801815c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018160:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018164:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018168:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801816c:	42a5      	cmp	r5, r4
 801816e:	d003      	beq.n	8018178 <__mcmp+0x2c>
 8018170:	d305      	bcc.n	801817e <__mcmp+0x32>
 8018172:	2201      	movs	r2, #1
 8018174:	4610      	mov	r0, r2
 8018176:	bd30      	pop	{r4, r5, pc}
 8018178:	4283      	cmp	r3, r0
 801817a:	d3f3      	bcc.n	8018164 <__mcmp+0x18>
 801817c:	e7fa      	b.n	8018174 <__mcmp+0x28>
 801817e:	f04f 32ff 	mov.w	r2, #4294967295
 8018182:	e7f7      	b.n	8018174 <__mcmp+0x28>

08018184 <__mdiff>:
 8018184:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018188:	460c      	mov	r4, r1
 801818a:	4606      	mov	r6, r0
 801818c:	4611      	mov	r1, r2
 801818e:	4620      	mov	r0, r4
 8018190:	4690      	mov	r8, r2
 8018192:	f7ff ffdb 	bl	801814c <__mcmp>
 8018196:	1e05      	subs	r5, r0, #0
 8018198:	d110      	bne.n	80181bc <__mdiff+0x38>
 801819a:	4629      	mov	r1, r5
 801819c:	4630      	mov	r0, r6
 801819e:	f7ff fd0f 	bl	8017bc0 <_Balloc>
 80181a2:	b930      	cbnz	r0, 80181b2 <__mdiff+0x2e>
 80181a4:	4b3a      	ldr	r3, [pc, #232]	; (8018290 <__mdiff+0x10c>)
 80181a6:	4602      	mov	r2, r0
 80181a8:	f240 2137 	movw	r1, #567	; 0x237
 80181ac:	4839      	ldr	r0, [pc, #228]	; (8018294 <__mdiff+0x110>)
 80181ae:	f7fe fab9 	bl	8016724 <__assert_func>
 80181b2:	2301      	movs	r3, #1
 80181b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80181b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181bc:	bfa4      	itt	ge
 80181be:	4643      	movge	r3, r8
 80181c0:	46a0      	movge	r8, r4
 80181c2:	4630      	mov	r0, r6
 80181c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80181c8:	bfa6      	itte	ge
 80181ca:	461c      	movge	r4, r3
 80181cc:	2500      	movge	r5, #0
 80181ce:	2501      	movlt	r5, #1
 80181d0:	f7ff fcf6 	bl	8017bc0 <_Balloc>
 80181d4:	b920      	cbnz	r0, 80181e0 <__mdiff+0x5c>
 80181d6:	4b2e      	ldr	r3, [pc, #184]	; (8018290 <__mdiff+0x10c>)
 80181d8:	4602      	mov	r2, r0
 80181da:	f240 2145 	movw	r1, #581	; 0x245
 80181de:	e7e5      	b.n	80181ac <__mdiff+0x28>
 80181e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80181e4:	6926      	ldr	r6, [r4, #16]
 80181e6:	60c5      	str	r5, [r0, #12]
 80181e8:	f104 0914 	add.w	r9, r4, #20
 80181ec:	f108 0514 	add.w	r5, r8, #20
 80181f0:	f100 0e14 	add.w	lr, r0, #20
 80181f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80181f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80181fc:	f108 0210 	add.w	r2, r8, #16
 8018200:	46f2      	mov	sl, lr
 8018202:	2100      	movs	r1, #0
 8018204:	f859 3b04 	ldr.w	r3, [r9], #4
 8018208:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801820c:	fa11 f88b 	uxtah	r8, r1, fp
 8018210:	b299      	uxth	r1, r3
 8018212:	0c1b      	lsrs	r3, r3, #16
 8018214:	eba8 0801 	sub.w	r8, r8, r1
 8018218:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801821c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018220:	fa1f f888 	uxth.w	r8, r8
 8018224:	1419      	asrs	r1, r3, #16
 8018226:	454e      	cmp	r6, r9
 8018228:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801822c:	f84a 3b04 	str.w	r3, [sl], #4
 8018230:	d8e8      	bhi.n	8018204 <__mdiff+0x80>
 8018232:	1b33      	subs	r3, r6, r4
 8018234:	3b15      	subs	r3, #21
 8018236:	f023 0303 	bic.w	r3, r3, #3
 801823a:	3304      	adds	r3, #4
 801823c:	3415      	adds	r4, #21
 801823e:	42a6      	cmp	r6, r4
 8018240:	bf38      	it	cc
 8018242:	2304      	movcc	r3, #4
 8018244:	441d      	add	r5, r3
 8018246:	4473      	add	r3, lr
 8018248:	469e      	mov	lr, r3
 801824a:	462e      	mov	r6, r5
 801824c:	4566      	cmp	r6, ip
 801824e:	d30e      	bcc.n	801826e <__mdiff+0xea>
 8018250:	f10c 0203 	add.w	r2, ip, #3
 8018254:	1b52      	subs	r2, r2, r5
 8018256:	f022 0203 	bic.w	r2, r2, #3
 801825a:	3d03      	subs	r5, #3
 801825c:	45ac      	cmp	ip, r5
 801825e:	bf38      	it	cc
 8018260:	2200      	movcc	r2, #0
 8018262:	4413      	add	r3, r2
 8018264:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8018268:	b17a      	cbz	r2, 801828a <__mdiff+0x106>
 801826a:	6107      	str	r7, [r0, #16]
 801826c:	e7a4      	b.n	80181b8 <__mdiff+0x34>
 801826e:	f856 8b04 	ldr.w	r8, [r6], #4
 8018272:	fa11 f288 	uxtah	r2, r1, r8
 8018276:	1414      	asrs	r4, r2, #16
 8018278:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801827c:	b292      	uxth	r2, r2
 801827e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018282:	f84e 2b04 	str.w	r2, [lr], #4
 8018286:	1421      	asrs	r1, r4, #16
 8018288:	e7e0      	b.n	801824c <__mdiff+0xc8>
 801828a:	3f01      	subs	r7, #1
 801828c:	e7ea      	b.n	8018264 <__mdiff+0xe0>
 801828e:	bf00      	nop
 8018290:	0801cc44 	.word	0x0801cc44
 8018294:	0801ccb5 	.word	0x0801ccb5

08018298 <__ulp>:
 8018298:	b082      	sub	sp, #8
 801829a:	ed8d 0b00 	vstr	d0, [sp]
 801829e:	9a01      	ldr	r2, [sp, #4]
 80182a0:	4b0f      	ldr	r3, [pc, #60]	; (80182e0 <__ulp+0x48>)
 80182a2:	4013      	ands	r3, r2
 80182a4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	dc08      	bgt.n	80182be <__ulp+0x26>
 80182ac:	425b      	negs	r3, r3
 80182ae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80182b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80182b6:	da04      	bge.n	80182c2 <__ulp+0x2a>
 80182b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80182bc:	4113      	asrs	r3, r2
 80182be:	2200      	movs	r2, #0
 80182c0:	e008      	b.n	80182d4 <__ulp+0x3c>
 80182c2:	f1a2 0314 	sub.w	r3, r2, #20
 80182c6:	2b1e      	cmp	r3, #30
 80182c8:	bfda      	itte	le
 80182ca:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80182ce:	40da      	lsrle	r2, r3
 80182d0:	2201      	movgt	r2, #1
 80182d2:	2300      	movs	r3, #0
 80182d4:	4619      	mov	r1, r3
 80182d6:	4610      	mov	r0, r2
 80182d8:	ec41 0b10 	vmov	d0, r0, r1
 80182dc:	b002      	add	sp, #8
 80182de:	4770      	bx	lr
 80182e0:	7ff00000 	.word	0x7ff00000

080182e4 <__b2d>:
 80182e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182e8:	6906      	ldr	r6, [r0, #16]
 80182ea:	f100 0814 	add.w	r8, r0, #20
 80182ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80182f2:	1f37      	subs	r7, r6, #4
 80182f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80182f8:	4610      	mov	r0, r2
 80182fa:	f7ff fd53 	bl	8017da4 <__hi0bits>
 80182fe:	f1c0 0320 	rsb	r3, r0, #32
 8018302:	280a      	cmp	r0, #10
 8018304:	600b      	str	r3, [r1, #0]
 8018306:	491b      	ldr	r1, [pc, #108]	; (8018374 <__b2d+0x90>)
 8018308:	dc15      	bgt.n	8018336 <__b2d+0x52>
 801830a:	f1c0 0c0b 	rsb	ip, r0, #11
 801830e:	fa22 f30c 	lsr.w	r3, r2, ip
 8018312:	45b8      	cmp	r8, r7
 8018314:	ea43 0501 	orr.w	r5, r3, r1
 8018318:	bf34      	ite	cc
 801831a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801831e:	2300      	movcs	r3, #0
 8018320:	3015      	adds	r0, #21
 8018322:	fa02 f000 	lsl.w	r0, r2, r0
 8018326:	fa23 f30c 	lsr.w	r3, r3, ip
 801832a:	4303      	orrs	r3, r0
 801832c:	461c      	mov	r4, r3
 801832e:	ec45 4b10 	vmov	d0, r4, r5
 8018332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018336:	45b8      	cmp	r8, r7
 8018338:	bf3a      	itte	cc
 801833a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801833e:	f1a6 0708 	subcc.w	r7, r6, #8
 8018342:	2300      	movcs	r3, #0
 8018344:	380b      	subs	r0, #11
 8018346:	d012      	beq.n	801836e <__b2d+0x8a>
 8018348:	f1c0 0120 	rsb	r1, r0, #32
 801834c:	fa23 f401 	lsr.w	r4, r3, r1
 8018350:	4082      	lsls	r2, r0
 8018352:	4322      	orrs	r2, r4
 8018354:	4547      	cmp	r7, r8
 8018356:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801835a:	bf8c      	ite	hi
 801835c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018360:	2200      	movls	r2, #0
 8018362:	4083      	lsls	r3, r0
 8018364:	40ca      	lsrs	r2, r1
 8018366:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801836a:	4313      	orrs	r3, r2
 801836c:	e7de      	b.n	801832c <__b2d+0x48>
 801836e:	ea42 0501 	orr.w	r5, r2, r1
 8018372:	e7db      	b.n	801832c <__b2d+0x48>
 8018374:	3ff00000 	.word	0x3ff00000

08018378 <__d2b>:
 8018378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801837c:	460f      	mov	r7, r1
 801837e:	2101      	movs	r1, #1
 8018380:	ec59 8b10 	vmov	r8, r9, d0
 8018384:	4616      	mov	r6, r2
 8018386:	f7ff fc1b 	bl	8017bc0 <_Balloc>
 801838a:	4604      	mov	r4, r0
 801838c:	b930      	cbnz	r0, 801839c <__d2b+0x24>
 801838e:	4602      	mov	r2, r0
 8018390:	4b24      	ldr	r3, [pc, #144]	; (8018424 <__d2b+0xac>)
 8018392:	4825      	ldr	r0, [pc, #148]	; (8018428 <__d2b+0xb0>)
 8018394:	f240 310f 	movw	r1, #783	; 0x30f
 8018398:	f7fe f9c4 	bl	8016724 <__assert_func>
 801839c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80183a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80183a4:	bb2d      	cbnz	r5, 80183f2 <__d2b+0x7a>
 80183a6:	9301      	str	r3, [sp, #4]
 80183a8:	f1b8 0300 	subs.w	r3, r8, #0
 80183ac:	d026      	beq.n	80183fc <__d2b+0x84>
 80183ae:	4668      	mov	r0, sp
 80183b0:	9300      	str	r3, [sp, #0]
 80183b2:	f7ff fd17 	bl	8017de4 <__lo0bits>
 80183b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80183ba:	b1e8      	cbz	r0, 80183f8 <__d2b+0x80>
 80183bc:	f1c0 0320 	rsb	r3, r0, #32
 80183c0:	fa02 f303 	lsl.w	r3, r2, r3
 80183c4:	430b      	orrs	r3, r1
 80183c6:	40c2      	lsrs	r2, r0
 80183c8:	6163      	str	r3, [r4, #20]
 80183ca:	9201      	str	r2, [sp, #4]
 80183cc:	9b01      	ldr	r3, [sp, #4]
 80183ce:	61a3      	str	r3, [r4, #24]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	bf14      	ite	ne
 80183d4:	2202      	movne	r2, #2
 80183d6:	2201      	moveq	r2, #1
 80183d8:	6122      	str	r2, [r4, #16]
 80183da:	b1bd      	cbz	r5, 801840c <__d2b+0x94>
 80183dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80183e0:	4405      	add	r5, r0
 80183e2:	603d      	str	r5, [r7, #0]
 80183e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80183e8:	6030      	str	r0, [r6, #0]
 80183ea:	4620      	mov	r0, r4
 80183ec:	b003      	add	sp, #12
 80183ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80183f6:	e7d6      	b.n	80183a6 <__d2b+0x2e>
 80183f8:	6161      	str	r1, [r4, #20]
 80183fa:	e7e7      	b.n	80183cc <__d2b+0x54>
 80183fc:	a801      	add	r0, sp, #4
 80183fe:	f7ff fcf1 	bl	8017de4 <__lo0bits>
 8018402:	9b01      	ldr	r3, [sp, #4]
 8018404:	6163      	str	r3, [r4, #20]
 8018406:	3020      	adds	r0, #32
 8018408:	2201      	movs	r2, #1
 801840a:	e7e5      	b.n	80183d8 <__d2b+0x60>
 801840c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018410:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018414:	6038      	str	r0, [r7, #0]
 8018416:	6918      	ldr	r0, [r3, #16]
 8018418:	f7ff fcc4 	bl	8017da4 <__hi0bits>
 801841c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018420:	e7e2      	b.n	80183e8 <__d2b+0x70>
 8018422:	bf00      	nop
 8018424:	0801cc44 	.word	0x0801cc44
 8018428:	0801ccb5 	.word	0x0801ccb5

0801842c <__ratio>:
 801842c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018430:	4688      	mov	r8, r1
 8018432:	4669      	mov	r1, sp
 8018434:	4681      	mov	r9, r0
 8018436:	f7ff ff55 	bl	80182e4 <__b2d>
 801843a:	a901      	add	r1, sp, #4
 801843c:	4640      	mov	r0, r8
 801843e:	ec55 4b10 	vmov	r4, r5, d0
 8018442:	f7ff ff4f 	bl	80182e4 <__b2d>
 8018446:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801844a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801844e:	eba3 0c02 	sub.w	ip, r3, r2
 8018452:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018456:	1a9b      	subs	r3, r3, r2
 8018458:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801845c:	ec51 0b10 	vmov	r0, r1, d0
 8018460:	2b00      	cmp	r3, #0
 8018462:	bfd6      	itet	le
 8018464:	460a      	movle	r2, r1
 8018466:	462a      	movgt	r2, r5
 8018468:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801846c:	468b      	mov	fp, r1
 801846e:	462f      	mov	r7, r5
 8018470:	bfd4      	ite	le
 8018472:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018476:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801847a:	4620      	mov	r0, r4
 801847c:	ee10 2a10 	vmov	r2, s0
 8018480:	465b      	mov	r3, fp
 8018482:	4639      	mov	r1, r7
 8018484:	f7e8 f9e2 	bl	800084c <__aeabi_ddiv>
 8018488:	ec41 0b10 	vmov	d0, r0, r1
 801848c:	b003      	add	sp, #12
 801848e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018492 <__copybits>:
 8018492:	3901      	subs	r1, #1
 8018494:	b570      	push	{r4, r5, r6, lr}
 8018496:	1149      	asrs	r1, r1, #5
 8018498:	6914      	ldr	r4, [r2, #16]
 801849a:	3101      	adds	r1, #1
 801849c:	f102 0314 	add.w	r3, r2, #20
 80184a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80184a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80184a8:	1f05      	subs	r5, r0, #4
 80184aa:	42a3      	cmp	r3, r4
 80184ac:	d30c      	bcc.n	80184c8 <__copybits+0x36>
 80184ae:	1aa3      	subs	r3, r4, r2
 80184b0:	3b11      	subs	r3, #17
 80184b2:	f023 0303 	bic.w	r3, r3, #3
 80184b6:	3211      	adds	r2, #17
 80184b8:	42a2      	cmp	r2, r4
 80184ba:	bf88      	it	hi
 80184bc:	2300      	movhi	r3, #0
 80184be:	4418      	add	r0, r3
 80184c0:	2300      	movs	r3, #0
 80184c2:	4288      	cmp	r0, r1
 80184c4:	d305      	bcc.n	80184d2 <__copybits+0x40>
 80184c6:	bd70      	pop	{r4, r5, r6, pc}
 80184c8:	f853 6b04 	ldr.w	r6, [r3], #4
 80184cc:	f845 6f04 	str.w	r6, [r5, #4]!
 80184d0:	e7eb      	b.n	80184aa <__copybits+0x18>
 80184d2:	f840 3b04 	str.w	r3, [r0], #4
 80184d6:	e7f4      	b.n	80184c2 <__copybits+0x30>

080184d8 <__any_on>:
 80184d8:	f100 0214 	add.w	r2, r0, #20
 80184dc:	6900      	ldr	r0, [r0, #16]
 80184de:	114b      	asrs	r3, r1, #5
 80184e0:	4298      	cmp	r0, r3
 80184e2:	b510      	push	{r4, lr}
 80184e4:	db11      	blt.n	801850a <__any_on+0x32>
 80184e6:	dd0a      	ble.n	80184fe <__any_on+0x26>
 80184e8:	f011 011f 	ands.w	r1, r1, #31
 80184ec:	d007      	beq.n	80184fe <__any_on+0x26>
 80184ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80184f2:	fa24 f001 	lsr.w	r0, r4, r1
 80184f6:	fa00 f101 	lsl.w	r1, r0, r1
 80184fa:	428c      	cmp	r4, r1
 80184fc:	d10b      	bne.n	8018516 <__any_on+0x3e>
 80184fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018502:	4293      	cmp	r3, r2
 8018504:	d803      	bhi.n	801850e <__any_on+0x36>
 8018506:	2000      	movs	r0, #0
 8018508:	bd10      	pop	{r4, pc}
 801850a:	4603      	mov	r3, r0
 801850c:	e7f7      	b.n	80184fe <__any_on+0x26>
 801850e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018512:	2900      	cmp	r1, #0
 8018514:	d0f5      	beq.n	8018502 <__any_on+0x2a>
 8018516:	2001      	movs	r0, #1
 8018518:	e7f6      	b.n	8018508 <__any_on+0x30>

0801851a <__ascii_wctomb>:
 801851a:	b149      	cbz	r1, 8018530 <__ascii_wctomb+0x16>
 801851c:	2aff      	cmp	r2, #255	; 0xff
 801851e:	bf85      	ittet	hi
 8018520:	238a      	movhi	r3, #138	; 0x8a
 8018522:	6003      	strhi	r3, [r0, #0]
 8018524:	700a      	strbls	r2, [r1, #0]
 8018526:	f04f 30ff 	movhi.w	r0, #4294967295
 801852a:	bf98      	it	ls
 801852c:	2001      	movls	r0, #1
 801852e:	4770      	bx	lr
 8018530:	4608      	mov	r0, r1
 8018532:	4770      	bx	lr

08018534 <__ssputs_r>:
 8018534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018538:	688e      	ldr	r6, [r1, #8]
 801853a:	461f      	mov	r7, r3
 801853c:	42be      	cmp	r6, r7
 801853e:	680b      	ldr	r3, [r1, #0]
 8018540:	4682      	mov	sl, r0
 8018542:	460c      	mov	r4, r1
 8018544:	4690      	mov	r8, r2
 8018546:	d82c      	bhi.n	80185a2 <__ssputs_r+0x6e>
 8018548:	898a      	ldrh	r2, [r1, #12]
 801854a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801854e:	d026      	beq.n	801859e <__ssputs_r+0x6a>
 8018550:	6965      	ldr	r5, [r4, #20]
 8018552:	6909      	ldr	r1, [r1, #16]
 8018554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018558:	eba3 0901 	sub.w	r9, r3, r1
 801855c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018560:	1c7b      	adds	r3, r7, #1
 8018562:	444b      	add	r3, r9
 8018564:	106d      	asrs	r5, r5, #1
 8018566:	429d      	cmp	r5, r3
 8018568:	bf38      	it	cc
 801856a:	461d      	movcc	r5, r3
 801856c:	0553      	lsls	r3, r2, #21
 801856e:	d527      	bpl.n	80185c0 <__ssputs_r+0x8c>
 8018570:	4629      	mov	r1, r5
 8018572:	f7fc f83d 	bl	80145f0 <_malloc_r>
 8018576:	4606      	mov	r6, r0
 8018578:	b360      	cbz	r0, 80185d4 <__ssputs_r+0xa0>
 801857a:	6921      	ldr	r1, [r4, #16]
 801857c:	464a      	mov	r2, r9
 801857e:	f7fe f8b4 	bl	80166ea <memcpy>
 8018582:	89a3      	ldrh	r3, [r4, #12]
 8018584:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801858c:	81a3      	strh	r3, [r4, #12]
 801858e:	6126      	str	r6, [r4, #16]
 8018590:	6165      	str	r5, [r4, #20]
 8018592:	444e      	add	r6, r9
 8018594:	eba5 0509 	sub.w	r5, r5, r9
 8018598:	6026      	str	r6, [r4, #0]
 801859a:	60a5      	str	r5, [r4, #8]
 801859c:	463e      	mov	r6, r7
 801859e:	42be      	cmp	r6, r7
 80185a0:	d900      	bls.n	80185a4 <__ssputs_r+0x70>
 80185a2:	463e      	mov	r6, r7
 80185a4:	6820      	ldr	r0, [r4, #0]
 80185a6:	4632      	mov	r2, r6
 80185a8:	4641      	mov	r1, r8
 80185aa:	f000 f9db 	bl	8018964 <memmove>
 80185ae:	68a3      	ldr	r3, [r4, #8]
 80185b0:	1b9b      	subs	r3, r3, r6
 80185b2:	60a3      	str	r3, [r4, #8]
 80185b4:	6823      	ldr	r3, [r4, #0]
 80185b6:	4433      	add	r3, r6
 80185b8:	6023      	str	r3, [r4, #0]
 80185ba:	2000      	movs	r0, #0
 80185bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185c0:	462a      	mov	r2, r5
 80185c2:	f000 fa06 	bl	80189d2 <_realloc_r>
 80185c6:	4606      	mov	r6, r0
 80185c8:	2800      	cmp	r0, #0
 80185ca:	d1e0      	bne.n	801858e <__ssputs_r+0x5a>
 80185cc:	6921      	ldr	r1, [r4, #16]
 80185ce:	4650      	mov	r0, sl
 80185d0:	f7fe ff40 	bl	8017454 <_free_r>
 80185d4:	230c      	movs	r3, #12
 80185d6:	f8ca 3000 	str.w	r3, [sl]
 80185da:	89a3      	ldrh	r3, [r4, #12]
 80185dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80185e0:	81a3      	strh	r3, [r4, #12]
 80185e2:	f04f 30ff 	mov.w	r0, #4294967295
 80185e6:	e7e9      	b.n	80185bc <__ssputs_r+0x88>

080185e8 <_svfiprintf_r>:
 80185e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185ec:	4698      	mov	r8, r3
 80185ee:	898b      	ldrh	r3, [r1, #12]
 80185f0:	061b      	lsls	r3, r3, #24
 80185f2:	b09d      	sub	sp, #116	; 0x74
 80185f4:	4607      	mov	r7, r0
 80185f6:	460d      	mov	r5, r1
 80185f8:	4614      	mov	r4, r2
 80185fa:	d50e      	bpl.n	801861a <_svfiprintf_r+0x32>
 80185fc:	690b      	ldr	r3, [r1, #16]
 80185fe:	b963      	cbnz	r3, 801861a <_svfiprintf_r+0x32>
 8018600:	2140      	movs	r1, #64	; 0x40
 8018602:	f7fb fff5 	bl	80145f0 <_malloc_r>
 8018606:	6028      	str	r0, [r5, #0]
 8018608:	6128      	str	r0, [r5, #16]
 801860a:	b920      	cbnz	r0, 8018616 <_svfiprintf_r+0x2e>
 801860c:	230c      	movs	r3, #12
 801860e:	603b      	str	r3, [r7, #0]
 8018610:	f04f 30ff 	mov.w	r0, #4294967295
 8018614:	e0d0      	b.n	80187b8 <_svfiprintf_r+0x1d0>
 8018616:	2340      	movs	r3, #64	; 0x40
 8018618:	616b      	str	r3, [r5, #20]
 801861a:	2300      	movs	r3, #0
 801861c:	9309      	str	r3, [sp, #36]	; 0x24
 801861e:	2320      	movs	r3, #32
 8018620:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018624:	f8cd 800c 	str.w	r8, [sp, #12]
 8018628:	2330      	movs	r3, #48	; 0x30
 801862a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80187d0 <_svfiprintf_r+0x1e8>
 801862e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018632:	f04f 0901 	mov.w	r9, #1
 8018636:	4623      	mov	r3, r4
 8018638:	469a      	mov	sl, r3
 801863a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801863e:	b10a      	cbz	r2, 8018644 <_svfiprintf_r+0x5c>
 8018640:	2a25      	cmp	r2, #37	; 0x25
 8018642:	d1f9      	bne.n	8018638 <_svfiprintf_r+0x50>
 8018644:	ebba 0b04 	subs.w	fp, sl, r4
 8018648:	d00b      	beq.n	8018662 <_svfiprintf_r+0x7a>
 801864a:	465b      	mov	r3, fp
 801864c:	4622      	mov	r2, r4
 801864e:	4629      	mov	r1, r5
 8018650:	4638      	mov	r0, r7
 8018652:	f7ff ff6f 	bl	8018534 <__ssputs_r>
 8018656:	3001      	adds	r0, #1
 8018658:	f000 80a9 	beq.w	80187ae <_svfiprintf_r+0x1c6>
 801865c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801865e:	445a      	add	r2, fp
 8018660:	9209      	str	r2, [sp, #36]	; 0x24
 8018662:	f89a 3000 	ldrb.w	r3, [sl]
 8018666:	2b00      	cmp	r3, #0
 8018668:	f000 80a1 	beq.w	80187ae <_svfiprintf_r+0x1c6>
 801866c:	2300      	movs	r3, #0
 801866e:	f04f 32ff 	mov.w	r2, #4294967295
 8018672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018676:	f10a 0a01 	add.w	sl, sl, #1
 801867a:	9304      	str	r3, [sp, #16]
 801867c:	9307      	str	r3, [sp, #28]
 801867e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018682:	931a      	str	r3, [sp, #104]	; 0x68
 8018684:	4654      	mov	r4, sl
 8018686:	2205      	movs	r2, #5
 8018688:	f814 1b01 	ldrb.w	r1, [r4], #1
 801868c:	4850      	ldr	r0, [pc, #320]	; (80187d0 <_svfiprintf_r+0x1e8>)
 801868e:	f7e7 fd9f 	bl	80001d0 <memchr>
 8018692:	9a04      	ldr	r2, [sp, #16]
 8018694:	b9d8      	cbnz	r0, 80186ce <_svfiprintf_r+0xe6>
 8018696:	06d0      	lsls	r0, r2, #27
 8018698:	bf44      	itt	mi
 801869a:	2320      	movmi	r3, #32
 801869c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80186a0:	0711      	lsls	r1, r2, #28
 80186a2:	bf44      	itt	mi
 80186a4:	232b      	movmi	r3, #43	; 0x2b
 80186a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80186aa:	f89a 3000 	ldrb.w	r3, [sl]
 80186ae:	2b2a      	cmp	r3, #42	; 0x2a
 80186b0:	d015      	beq.n	80186de <_svfiprintf_r+0xf6>
 80186b2:	9a07      	ldr	r2, [sp, #28]
 80186b4:	4654      	mov	r4, sl
 80186b6:	2000      	movs	r0, #0
 80186b8:	f04f 0c0a 	mov.w	ip, #10
 80186bc:	4621      	mov	r1, r4
 80186be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80186c2:	3b30      	subs	r3, #48	; 0x30
 80186c4:	2b09      	cmp	r3, #9
 80186c6:	d94d      	bls.n	8018764 <_svfiprintf_r+0x17c>
 80186c8:	b1b0      	cbz	r0, 80186f8 <_svfiprintf_r+0x110>
 80186ca:	9207      	str	r2, [sp, #28]
 80186cc:	e014      	b.n	80186f8 <_svfiprintf_r+0x110>
 80186ce:	eba0 0308 	sub.w	r3, r0, r8
 80186d2:	fa09 f303 	lsl.w	r3, r9, r3
 80186d6:	4313      	orrs	r3, r2
 80186d8:	9304      	str	r3, [sp, #16]
 80186da:	46a2      	mov	sl, r4
 80186dc:	e7d2      	b.n	8018684 <_svfiprintf_r+0x9c>
 80186de:	9b03      	ldr	r3, [sp, #12]
 80186e0:	1d19      	adds	r1, r3, #4
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	9103      	str	r1, [sp, #12]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	bfbb      	ittet	lt
 80186ea:	425b      	neglt	r3, r3
 80186ec:	f042 0202 	orrlt.w	r2, r2, #2
 80186f0:	9307      	strge	r3, [sp, #28]
 80186f2:	9307      	strlt	r3, [sp, #28]
 80186f4:	bfb8      	it	lt
 80186f6:	9204      	strlt	r2, [sp, #16]
 80186f8:	7823      	ldrb	r3, [r4, #0]
 80186fa:	2b2e      	cmp	r3, #46	; 0x2e
 80186fc:	d10c      	bne.n	8018718 <_svfiprintf_r+0x130>
 80186fe:	7863      	ldrb	r3, [r4, #1]
 8018700:	2b2a      	cmp	r3, #42	; 0x2a
 8018702:	d134      	bne.n	801876e <_svfiprintf_r+0x186>
 8018704:	9b03      	ldr	r3, [sp, #12]
 8018706:	1d1a      	adds	r2, r3, #4
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	9203      	str	r2, [sp, #12]
 801870c:	2b00      	cmp	r3, #0
 801870e:	bfb8      	it	lt
 8018710:	f04f 33ff 	movlt.w	r3, #4294967295
 8018714:	3402      	adds	r4, #2
 8018716:	9305      	str	r3, [sp, #20]
 8018718:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80187e0 <_svfiprintf_r+0x1f8>
 801871c:	7821      	ldrb	r1, [r4, #0]
 801871e:	2203      	movs	r2, #3
 8018720:	4650      	mov	r0, sl
 8018722:	f7e7 fd55 	bl	80001d0 <memchr>
 8018726:	b138      	cbz	r0, 8018738 <_svfiprintf_r+0x150>
 8018728:	9b04      	ldr	r3, [sp, #16]
 801872a:	eba0 000a 	sub.w	r0, r0, sl
 801872e:	2240      	movs	r2, #64	; 0x40
 8018730:	4082      	lsls	r2, r0
 8018732:	4313      	orrs	r3, r2
 8018734:	3401      	adds	r4, #1
 8018736:	9304      	str	r3, [sp, #16]
 8018738:	f814 1b01 	ldrb.w	r1, [r4], #1
 801873c:	4825      	ldr	r0, [pc, #148]	; (80187d4 <_svfiprintf_r+0x1ec>)
 801873e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018742:	2206      	movs	r2, #6
 8018744:	f7e7 fd44 	bl	80001d0 <memchr>
 8018748:	2800      	cmp	r0, #0
 801874a:	d038      	beq.n	80187be <_svfiprintf_r+0x1d6>
 801874c:	4b22      	ldr	r3, [pc, #136]	; (80187d8 <_svfiprintf_r+0x1f0>)
 801874e:	bb1b      	cbnz	r3, 8018798 <_svfiprintf_r+0x1b0>
 8018750:	9b03      	ldr	r3, [sp, #12]
 8018752:	3307      	adds	r3, #7
 8018754:	f023 0307 	bic.w	r3, r3, #7
 8018758:	3308      	adds	r3, #8
 801875a:	9303      	str	r3, [sp, #12]
 801875c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801875e:	4433      	add	r3, r6
 8018760:	9309      	str	r3, [sp, #36]	; 0x24
 8018762:	e768      	b.n	8018636 <_svfiprintf_r+0x4e>
 8018764:	fb0c 3202 	mla	r2, ip, r2, r3
 8018768:	460c      	mov	r4, r1
 801876a:	2001      	movs	r0, #1
 801876c:	e7a6      	b.n	80186bc <_svfiprintf_r+0xd4>
 801876e:	2300      	movs	r3, #0
 8018770:	3401      	adds	r4, #1
 8018772:	9305      	str	r3, [sp, #20]
 8018774:	4619      	mov	r1, r3
 8018776:	f04f 0c0a 	mov.w	ip, #10
 801877a:	4620      	mov	r0, r4
 801877c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018780:	3a30      	subs	r2, #48	; 0x30
 8018782:	2a09      	cmp	r2, #9
 8018784:	d903      	bls.n	801878e <_svfiprintf_r+0x1a6>
 8018786:	2b00      	cmp	r3, #0
 8018788:	d0c6      	beq.n	8018718 <_svfiprintf_r+0x130>
 801878a:	9105      	str	r1, [sp, #20]
 801878c:	e7c4      	b.n	8018718 <_svfiprintf_r+0x130>
 801878e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018792:	4604      	mov	r4, r0
 8018794:	2301      	movs	r3, #1
 8018796:	e7f0      	b.n	801877a <_svfiprintf_r+0x192>
 8018798:	ab03      	add	r3, sp, #12
 801879a:	9300      	str	r3, [sp, #0]
 801879c:	462a      	mov	r2, r5
 801879e:	4b0f      	ldr	r3, [pc, #60]	; (80187dc <_svfiprintf_r+0x1f4>)
 80187a0:	a904      	add	r1, sp, #16
 80187a2:	4638      	mov	r0, r7
 80187a4:	f7fc ff56 	bl	8015654 <_printf_float>
 80187a8:	1c42      	adds	r2, r0, #1
 80187aa:	4606      	mov	r6, r0
 80187ac:	d1d6      	bne.n	801875c <_svfiprintf_r+0x174>
 80187ae:	89ab      	ldrh	r3, [r5, #12]
 80187b0:	065b      	lsls	r3, r3, #25
 80187b2:	f53f af2d 	bmi.w	8018610 <_svfiprintf_r+0x28>
 80187b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80187b8:	b01d      	add	sp, #116	; 0x74
 80187ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187be:	ab03      	add	r3, sp, #12
 80187c0:	9300      	str	r3, [sp, #0]
 80187c2:	462a      	mov	r2, r5
 80187c4:	4b05      	ldr	r3, [pc, #20]	; (80187dc <_svfiprintf_r+0x1f4>)
 80187c6:	a904      	add	r1, sp, #16
 80187c8:	4638      	mov	r0, r7
 80187ca:	f7fd f9e7 	bl	8015b9c <_printf_i>
 80187ce:	e7eb      	b.n	80187a8 <_svfiprintf_r+0x1c0>
 80187d0:	0801ce0c 	.word	0x0801ce0c
 80187d4:	0801ce16 	.word	0x0801ce16
 80187d8:	08015655 	.word	0x08015655
 80187dc:	08018535 	.word	0x08018535
 80187e0:	0801ce12 	.word	0x0801ce12

080187e4 <__sflush_r>:
 80187e4:	898a      	ldrh	r2, [r1, #12]
 80187e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187ea:	4605      	mov	r5, r0
 80187ec:	0710      	lsls	r0, r2, #28
 80187ee:	460c      	mov	r4, r1
 80187f0:	d458      	bmi.n	80188a4 <__sflush_r+0xc0>
 80187f2:	684b      	ldr	r3, [r1, #4]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	dc05      	bgt.n	8018804 <__sflush_r+0x20>
 80187f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	dc02      	bgt.n	8018804 <__sflush_r+0x20>
 80187fe:	2000      	movs	r0, #0
 8018800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018806:	2e00      	cmp	r6, #0
 8018808:	d0f9      	beq.n	80187fe <__sflush_r+0x1a>
 801880a:	2300      	movs	r3, #0
 801880c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018810:	682f      	ldr	r7, [r5, #0]
 8018812:	6a21      	ldr	r1, [r4, #32]
 8018814:	602b      	str	r3, [r5, #0]
 8018816:	d032      	beq.n	801887e <__sflush_r+0x9a>
 8018818:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801881a:	89a3      	ldrh	r3, [r4, #12]
 801881c:	075a      	lsls	r2, r3, #29
 801881e:	d505      	bpl.n	801882c <__sflush_r+0x48>
 8018820:	6863      	ldr	r3, [r4, #4]
 8018822:	1ac0      	subs	r0, r0, r3
 8018824:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018826:	b10b      	cbz	r3, 801882c <__sflush_r+0x48>
 8018828:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801882a:	1ac0      	subs	r0, r0, r3
 801882c:	2300      	movs	r3, #0
 801882e:	4602      	mov	r2, r0
 8018830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018832:	6a21      	ldr	r1, [r4, #32]
 8018834:	4628      	mov	r0, r5
 8018836:	47b0      	blx	r6
 8018838:	1c43      	adds	r3, r0, #1
 801883a:	89a3      	ldrh	r3, [r4, #12]
 801883c:	d106      	bne.n	801884c <__sflush_r+0x68>
 801883e:	6829      	ldr	r1, [r5, #0]
 8018840:	291d      	cmp	r1, #29
 8018842:	d82b      	bhi.n	801889c <__sflush_r+0xb8>
 8018844:	4a29      	ldr	r2, [pc, #164]	; (80188ec <__sflush_r+0x108>)
 8018846:	410a      	asrs	r2, r1
 8018848:	07d6      	lsls	r6, r2, #31
 801884a:	d427      	bmi.n	801889c <__sflush_r+0xb8>
 801884c:	2200      	movs	r2, #0
 801884e:	6062      	str	r2, [r4, #4]
 8018850:	04d9      	lsls	r1, r3, #19
 8018852:	6922      	ldr	r2, [r4, #16]
 8018854:	6022      	str	r2, [r4, #0]
 8018856:	d504      	bpl.n	8018862 <__sflush_r+0x7e>
 8018858:	1c42      	adds	r2, r0, #1
 801885a:	d101      	bne.n	8018860 <__sflush_r+0x7c>
 801885c:	682b      	ldr	r3, [r5, #0]
 801885e:	b903      	cbnz	r3, 8018862 <__sflush_r+0x7e>
 8018860:	6560      	str	r0, [r4, #84]	; 0x54
 8018862:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018864:	602f      	str	r7, [r5, #0]
 8018866:	2900      	cmp	r1, #0
 8018868:	d0c9      	beq.n	80187fe <__sflush_r+0x1a>
 801886a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801886e:	4299      	cmp	r1, r3
 8018870:	d002      	beq.n	8018878 <__sflush_r+0x94>
 8018872:	4628      	mov	r0, r5
 8018874:	f7fe fdee 	bl	8017454 <_free_r>
 8018878:	2000      	movs	r0, #0
 801887a:	6360      	str	r0, [r4, #52]	; 0x34
 801887c:	e7c0      	b.n	8018800 <__sflush_r+0x1c>
 801887e:	2301      	movs	r3, #1
 8018880:	4628      	mov	r0, r5
 8018882:	47b0      	blx	r6
 8018884:	1c41      	adds	r1, r0, #1
 8018886:	d1c8      	bne.n	801881a <__sflush_r+0x36>
 8018888:	682b      	ldr	r3, [r5, #0]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d0c5      	beq.n	801881a <__sflush_r+0x36>
 801888e:	2b1d      	cmp	r3, #29
 8018890:	d001      	beq.n	8018896 <__sflush_r+0xb2>
 8018892:	2b16      	cmp	r3, #22
 8018894:	d101      	bne.n	801889a <__sflush_r+0xb6>
 8018896:	602f      	str	r7, [r5, #0]
 8018898:	e7b1      	b.n	80187fe <__sflush_r+0x1a>
 801889a:	89a3      	ldrh	r3, [r4, #12]
 801889c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80188a0:	81a3      	strh	r3, [r4, #12]
 80188a2:	e7ad      	b.n	8018800 <__sflush_r+0x1c>
 80188a4:	690f      	ldr	r7, [r1, #16]
 80188a6:	2f00      	cmp	r7, #0
 80188a8:	d0a9      	beq.n	80187fe <__sflush_r+0x1a>
 80188aa:	0793      	lsls	r3, r2, #30
 80188ac:	680e      	ldr	r6, [r1, #0]
 80188ae:	bf08      	it	eq
 80188b0:	694b      	ldreq	r3, [r1, #20]
 80188b2:	600f      	str	r7, [r1, #0]
 80188b4:	bf18      	it	ne
 80188b6:	2300      	movne	r3, #0
 80188b8:	eba6 0807 	sub.w	r8, r6, r7
 80188bc:	608b      	str	r3, [r1, #8]
 80188be:	f1b8 0f00 	cmp.w	r8, #0
 80188c2:	dd9c      	ble.n	80187fe <__sflush_r+0x1a>
 80188c4:	6a21      	ldr	r1, [r4, #32]
 80188c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80188c8:	4643      	mov	r3, r8
 80188ca:	463a      	mov	r2, r7
 80188cc:	4628      	mov	r0, r5
 80188ce:	47b0      	blx	r6
 80188d0:	2800      	cmp	r0, #0
 80188d2:	dc06      	bgt.n	80188e2 <__sflush_r+0xfe>
 80188d4:	89a3      	ldrh	r3, [r4, #12]
 80188d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80188da:	81a3      	strh	r3, [r4, #12]
 80188dc:	f04f 30ff 	mov.w	r0, #4294967295
 80188e0:	e78e      	b.n	8018800 <__sflush_r+0x1c>
 80188e2:	4407      	add	r7, r0
 80188e4:	eba8 0800 	sub.w	r8, r8, r0
 80188e8:	e7e9      	b.n	80188be <__sflush_r+0xda>
 80188ea:	bf00      	nop
 80188ec:	dfbffffe 	.word	0xdfbffffe

080188f0 <_fflush_r>:
 80188f0:	b538      	push	{r3, r4, r5, lr}
 80188f2:	690b      	ldr	r3, [r1, #16]
 80188f4:	4605      	mov	r5, r0
 80188f6:	460c      	mov	r4, r1
 80188f8:	b913      	cbnz	r3, 8018900 <_fflush_r+0x10>
 80188fa:	2500      	movs	r5, #0
 80188fc:	4628      	mov	r0, r5
 80188fe:	bd38      	pop	{r3, r4, r5, pc}
 8018900:	b118      	cbz	r0, 801890a <_fflush_r+0x1a>
 8018902:	6a03      	ldr	r3, [r0, #32]
 8018904:	b90b      	cbnz	r3, 801890a <_fflush_r+0x1a>
 8018906:	f7fd fd07 	bl	8016318 <__sinit>
 801890a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d0f3      	beq.n	80188fa <_fflush_r+0xa>
 8018912:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018914:	07d0      	lsls	r0, r2, #31
 8018916:	d404      	bmi.n	8018922 <_fflush_r+0x32>
 8018918:	0599      	lsls	r1, r3, #22
 801891a:	d402      	bmi.n	8018922 <_fflush_r+0x32>
 801891c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801891e:	f7fd feda 	bl	80166d6 <__retarget_lock_acquire_recursive>
 8018922:	4628      	mov	r0, r5
 8018924:	4621      	mov	r1, r4
 8018926:	f7ff ff5d 	bl	80187e4 <__sflush_r>
 801892a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801892c:	07da      	lsls	r2, r3, #31
 801892e:	4605      	mov	r5, r0
 8018930:	d4e4      	bmi.n	80188fc <_fflush_r+0xc>
 8018932:	89a3      	ldrh	r3, [r4, #12]
 8018934:	059b      	lsls	r3, r3, #22
 8018936:	d4e1      	bmi.n	80188fc <_fflush_r+0xc>
 8018938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801893a:	f7fd fecd 	bl	80166d8 <__retarget_lock_release_recursive>
 801893e:	e7dd      	b.n	80188fc <_fflush_r+0xc>

08018940 <fiprintf>:
 8018940:	b40e      	push	{r1, r2, r3}
 8018942:	b503      	push	{r0, r1, lr}
 8018944:	4601      	mov	r1, r0
 8018946:	ab03      	add	r3, sp, #12
 8018948:	4805      	ldr	r0, [pc, #20]	; (8018960 <fiprintf+0x20>)
 801894a:	f853 2b04 	ldr.w	r2, [r3], #4
 801894e:	6800      	ldr	r0, [r0, #0]
 8018950:	9301      	str	r3, [sp, #4]
 8018952:	f000 f897 	bl	8018a84 <_vfiprintf_r>
 8018956:	b002      	add	sp, #8
 8018958:	f85d eb04 	ldr.w	lr, [sp], #4
 801895c:	b003      	add	sp, #12
 801895e:	4770      	bx	lr
 8018960:	200002f4 	.word	0x200002f4

08018964 <memmove>:
 8018964:	4288      	cmp	r0, r1
 8018966:	b510      	push	{r4, lr}
 8018968:	eb01 0402 	add.w	r4, r1, r2
 801896c:	d902      	bls.n	8018974 <memmove+0x10>
 801896e:	4284      	cmp	r4, r0
 8018970:	4623      	mov	r3, r4
 8018972:	d807      	bhi.n	8018984 <memmove+0x20>
 8018974:	1e43      	subs	r3, r0, #1
 8018976:	42a1      	cmp	r1, r4
 8018978:	d008      	beq.n	801898c <memmove+0x28>
 801897a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801897e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018982:	e7f8      	b.n	8018976 <memmove+0x12>
 8018984:	4402      	add	r2, r0
 8018986:	4601      	mov	r1, r0
 8018988:	428a      	cmp	r2, r1
 801898a:	d100      	bne.n	801898e <memmove+0x2a>
 801898c:	bd10      	pop	{r4, pc}
 801898e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018992:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018996:	e7f7      	b.n	8018988 <memmove+0x24>

08018998 <abort>:
 8018998:	b508      	push	{r3, lr}
 801899a:	2006      	movs	r0, #6
 801899c:	f000 fa4a 	bl	8018e34 <raise>
 80189a0:	2001      	movs	r0, #1
 80189a2:	f7ec fdcb 	bl	800553c <_exit>

080189a6 <_calloc_r>:
 80189a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80189a8:	fba1 2402 	umull	r2, r4, r1, r2
 80189ac:	b94c      	cbnz	r4, 80189c2 <_calloc_r+0x1c>
 80189ae:	4611      	mov	r1, r2
 80189b0:	9201      	str	r2, [sp, #4]
 80189b2:	f7fb fe1d 	bl	80145f0 <_malloc_r>
 80189b6:	9a01      	ldr	r2, [sp, #4]
 80189b8:	4605      	mov	r5, r0
 80189ba:	b930      	cbnz	r0, 80189ca <_calloc_r+0x24>
 80189bc:	4628      	mov	r0, r5
 80189be:	b003      	add	sp, #12
 80189c0:	bd30      	pop	{r4, r5, pc}
 80189c2:	220c      	movs	r2, #12
 80189c4:	6002      	str	r2, [r0, #0]
 80189c6:	2500      	movs	r5, #0
 80189c8:	e7f8      	b.n	80189bc <_calloc_r+0x16>
 80189ca:	4621      	mov	r1, r4
 80189cc:	f7fd fd71 	bl	80164b2 <memset>
 80189d0:	e7f4      	b.n	80189bc <_calloc_r+0x16>

080189d2 <_realloc_r>:
 80189d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189d6:	4680      	mov	r8, r0
 80189d8:	4614      	mov	r4, r2
 80189da:	460e      	mov	r6, r1
 80189dc:	b921      	cbnz	r1, 80189e8 <_realloc_r+0x16>
 80189de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80189e2:	4611      	mov	r1, r2
 80189e4:	f7fb be04 	b.w	80145f0 <_malloc_r>
 80189e8:	b92a      	cbnz	r2, 80189f6 <_realloc_r+0x24>
 80189ea:	f7fe fd33 	bl	8017454 <_free_r>
 80189ee:	4625      	mov	r5, r4
 80189f0:	4628      	mov	r0, r5
 80189f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189f6:	f000 fa39 	bl	8018e6c <_malloc_usable_size_r>
 80189fa:	4284      	cmp	r4, r0
 80189fc:	4607      	mov	r7, r0
 80189fe:	d802      	bhi.n	8018a06 <_realloc_r+0x34>
 8018a00:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018a04:	d812      	bhi.n	8018a2c <_realloc_r+0x5a>
 8018a06:	4621      	mov	r1, r4
 8018a08:	4640      	mov	r0, r8
 8018a0a:	f7fb fdf1 	bl	80145f0 <_malloc_r>
 8018a0e:	4605      	mov	r5, r0
 8018a10:	2800      	cmp	r0, #0
 8018a12:	d0ed      	beq.n	80189f0 <_realloc_r+0x1e>
 8018a14:	42bc      	cmp	r4, r7
 8018a16:	4622      	mov	r2, r4
 8018a18:	4631      	mov	r1, r6
 8018a1a:	bf28      	it	cs
 8018a1c:	463a      	movcs	r2, r7
 8018a1e:	f7fd fe64 	bl	80166ea <memcpy>
 8018a22:	4631      	mov	r1, r6
 8018a24:	4640      	mov	r0, r8
 8018a26:	f7fe fd15 	bl	8017454 <_free_r>
 8018a2a:	e7e1      	b.n	80189f0 <_realloc_r+0x1e>
 8018a2c:	4635      	mov	r5, r6
 8018a2e:	e7df      	b.n	80189f0 <_realloc_r+0x1e>

08018a30 <__sfputc_r>:
 8018a30:	6893      	ldr	r3, [r2, #8]
 8018a32:	3b01      	subs	r3, #1
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	b410      	push	{r4}
 8018a38:	6093      	str	r3, [r2, #8]
 8018a3a:	da08      	bge.n	8018a4e <__sfputc_r+0x1e>
 8018a3c:	6994      	ldr	r4, [r2, #24]
 8018a3e:	42a3      	cmp	r3, r4
 8018a40:	db01      	blt.n	8018a46 <__sfputc_r+0x16>
 8018a42:	290a      	cmp	r1, #10
 8018a44:	d103      	bne.n	8018a4e <__sfputc_r+0x1e>
 8018a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a4a:	f000 b935 	b.w	8018cb8 <__swbuf_r>
 8018a4e:	6813      	ldr	r3, [r2, #0]
 8018a50:	1c58      	adds	r0, r3, #1
 8018a52:	6010      	str	r0, [r2, #0]
 8018a54:	7019      	strb	r1, [r3, #0]
 8018a56:	4608      	mov	r0, r1
 8018a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a5c:	4770      	bx	lr

08018a5e <__sfputs_r>:
 8018a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a60:	4606      	mov	r6, r0
 8018a62:	460f      	mov	r7, r1
 8018a64:	4614      	mov	r4, r2
 8018a66:	18d5      	adds	r5, r2, r3
 8018a68:	42ac      	cmp	r4, r5
 8018a6a:	d101      	bne.n	8018a70 <__sfputs_r+0x12>
 8018a6c:	2000      	movs	r0, #0
 8018a6e:	e007      	b.n	8018a80 <__sfputs_r+0x22>
 8018a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a74:	463a      	mov	r2, r7
 8018a76:	4630      	mov	r0, r6
 8018a78:	f7ff ffda 	bl	8018a30 <__sfputc_r>
 8018a7c:	1c43      	adds	r3, r0, #1
 8018a7e:	d1f3      	bne.n	8018a68 <__sfputs_r+0xa>
 8018a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018a84 <_vfiprintf_r>:
 8018a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a88:	460d      	mov	r5, r1
 8018a8a:	b09d      	sub	sp, #116	; 0x74
 8018a8c:	4614      	mov	r4, r2
 8018a8e:	4698      	mov	r8, r3
 8018a90:	4606      	mov	r6, r0
 8018a92:	b118      	cbz	r0, 8018a9c <_vfiprintf_r+0x18>
 8018a94:	6a03      	ldr	r3, [r0, #32]
 8018a96:	b90b      	cbnz	r3, 8018a9c <_vfiprintf_r+0x18>
 8018a98:	f7fd fc3e 	bl	8016318 <__sinit>
 8018a9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018a9e:	07d9      	lsls	r1, r3, #31
 8018aa0:	d405      	bmi.n	8018aae <_vfiprintf_r+0x2a>
 8018aa2:	89ab      	ldrh	r3, [r5, #12]
 8018aa4:	059a      	lsls	r2, r3, #22
 8018aa6:	d402      	bmi.n	8018aae <_vfiprintf_r+0x2a>
 8018aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018aaa:	f7fd fe14 	bl	80166d6 <__retarget_lock_acquire_recursive>
 8018aae:	89ab      	ldrh	r3, [r5, #12]
 8018ab0:	071b      	lsls	r3, r3, #28
 8018ab2:	d501      	bpl.n	8018ab8 <_vfiprintf_r+0x34>
 8018ab4:	692b      	ldr	r3, [r5, #16]
 8018ab6:	b99b      	cbnz	r3, 8018ae0 <_vfiprintf_r+0x5c>
 8018ab8:	4629      	mov	r1, r5
 8018aba:	4630      	mov	r0, r6
 8018abc:	f000 f93a 	bl	8018d34 <__swsetup_r>
 8018ac0:	b170      	cbz	r0, 8018ae0 <_vfiprintf_r+0x5c>
 8018ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018ac4:	07dc      	lsls	r4, r3, #31
 8018ac6:	d504      	bpl.n	8018ad2 <_vfiprintf_r+0x4e>
 8018ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8018acc:	b01d      	add	sp, #116	; 0x74
 8018ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ad2:	89ab      	ldrh	r3, [r5, #12]
 8018ad4:	0598      	lsls	r0, r3, #22
 8018ad6:	d4f7      	bmi.n	8018ac8 <_vfiprintf_r+0x44>
 8018ad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018ada:	f7fd fdfd 	bl	80166d8 <__retarget_lock_release_recursive>
 8018ade:	e7f3      	b.n	8018ac8 <_vfiprintf_r+0x44>
 8018ae0:	2300      	movs	r3, #0
 8018ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8018ae4:	2320      	movs	r3, #32
 8018ae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018aea:	f8cd 800c 	str.w	r8, [sp, #12]
 8018aee:	2330      	movs	r3, #48	; 0x30
 8018af0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018ca4 <_vfiprintf_r+0x220>
 8018af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018af8:	f04f 0901 	mov.w	r9, #1
 8018afc:	4623      	mov	r3, r4
 8018afe:	469a      	mov	sl, r3
 8018b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b04:	b10a      	cbz	r2, 8018b0a <_vfiprintf_r+0x86>
 8018b06:	2a25      	cmp	r2, #37	; 0x25
 8018b08:	d1f9      	bne.n	8018afe <_vfiprintf_r+0x7a>
 8018b0a:	ebba 0b04 	subs.w	fp, sl, r4
 8018b0e:	d00b      	beq.n	8018b28 <_vfiprintf_r+0xa4>
 8018b10:	465b      	mov	r3, fp
 8018b12:	4622      	mov	r2, r4
 8018b14:	4629      	mov	r1, r5
 8018b16:	4630      	mov	r0, r6
 8018b18:	f7ff ffa1 	bl	8018a5e <__sfputs_r>
 8018b1c:	3001      	adds	r0, #1
 8018b1e:	f000 80a9 	beq.w	8018c74 <_vfiprintf_r+0x1f0>
 8018b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018b24:	445a      	add	r2, fp
 8018b26:	9209      	str	r2, [sp, #36]	; 0x24
 8018b28:	f89a 3000 	ldrb.w	r3, [sl]
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	f000 80a1 	beq.w	8018c74 <_vfiprintf_r+0x1f0>
 8018b32:	2300      	movs	r3, #0
 8018b34:	f04f 32ff 	mov.w	r2, #4294967295
 8018b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018b3c:	f10a 0a01 	add.w	sl, sl, #1
 8018b40:	9304      	str	r3, [sp, #16]
 8018b42:	9307      	str	r3, [sp, #28]
 8018b44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018b48:	931a      	str	r3, [sp, #104]	; 0x68
 8018b4a:	4654      	mov	r4, sl
 8018b4c:	2205      	movs	r2, #5
 8018b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b52:	4854      	ldr	r0, [pc, #336]	; (8018ca4 <_vfiprintf_r+0x220>)
 8018b54:	f7e7 fb3c 	bl	80001d0 <memchr>
 8018b58:	9a04      	ldr	r2, [sp, #16]
 8018b5a:	b9d8      	cbnz	r0, 8018b94 <_vfiprintf_r+0x110>
 8018b5c:	06d1      	lsls	r1, r2, #27
 8018b5e:	bf44      	itt	mi
 8018b60:	2320      	movmi	r3, #32
 8018b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018b66:	0713      	lsls	r3, r2, #28
 8018b68:	bf44      	itt	mi
 8018b6a:	232b      	movmi	r3, #43	; 0x2b
 8018b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018b70:	f89a 3000 	ldrb.w	r3, [sl]
 8018b74:	2b2a      	cmp	r3, #42	; 0x2a
 8018b76:	d015      	beq.n	8018ba4 <_vfiprintf_r+0x120>
 8018b78:	9a07      	ldr	r2, [sp, #28]
 8018b7a:	4654      	mov	r4, sl
 8018b7c:	2000      	movs	r0, #0
 8018b7e:	f04f 0c0a 	mov.w	ip, #10
 8018b82:	4621      	mov	r1, r4
 8018b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b88:	3b30      	subs	r3, #48	; 0x30
 8018b8a:	2b09      	cmp	r3, #9
 8018b8c:	d94d      	bls.n	8018c2a <_vfiprintf_r+0x1a6>
 8018b8e:	b1b0      	cbz	r0, 8018bbe <_vfiprintf_r+0x13a>
 8018b90:	9207      	str	r2, [sp, #28]
 8018b92:	e014      	b.n	8018bbe <_vfiprintf_r+0x13a>
 8018b94:	eba0 0308 	sub.w	r3, r0, r8
 8018b98:	fa09 f303 	lsl.w	r3, r9, r3
 8018b9c:	4313      	orrs	r3, r2
 8018b9e:	9304      	str	r3, [sp, #16]
 8018ba0:	46a2      	mov	sl, r4
 8018ba2:	e7d2      	b.n	8018b4a <_vfiprintf_r+0xc6>
 8018ba4:	9b03      	ldr	r3, [sp, #12]
 8018ba6:	1d19      	adds	r1, r3, #4
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	9103      	str	r1, [sp, #12]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	bfbb      	ittet	lt
 8018bb0:	425b      	neglt	r3, r3
 8018bb2:	f042 0202 	orrlt.w	r2, r2, #2
 8018bb6:	9307      	strge	r3, [sp, #28]
 8018bb8:	9307      	strlt	r3, [sp, #28]
 8018bba:	bfb8      	it	lt
 8018bbc:	9204      	strlt	r2, [sp, #16]
 8018bbe:	7823      	ldrb	r3, [r4, #0]
 8018bc0:	2b2e      	cmp	r3, #46	; 0x2e
 8018bc2:	d10c      	bne.n	8018bde <_vfiprintf_r+0x15a>
 8018bc4:	7863      	ldrb	r3, [r4, #1]
 8018bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8018bc8:	d134      	bne.n	8018c34 <_vfiprintf_r+0x1b0>
 8018bca:	9b03      	ldr	r3, [sp, #12]
 8018bcc:	1d1a      	adds	r2, r3, #4
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	9203      	str	r2, [sp, #12]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	bfb8      	it	lt
 8018bd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8018bda:	3402      	adds	r4, #2
 8018bdc:	9305      	str	r3, [sp, #20]
 8018bde:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018cb4 <_vfiprintf_r+0x230>
 8018be2:	7821      	ldrb	r1, [r4, #0]
 8018be4:	2203      	movs	r2, #3
 8018be6:	4650      	mov	r0, sl
 8018be8:	f7e7 faf2 	bl	80001d0 <memchr>
 8018bec:	b138      	cbz	r0, 8018bfe <_vfiprintf_r+0x17a>
 8018bee:	9b04      	ldr	r3, [sp, #16]
 8018bf0:	eba0 000a 	sub.w	r0, r0, sl
 8018bf4:	2240      	movs	r2, #64	; 0x40
 8018bf6:	4082      	lsls	r2, r0
 8018bf8:	4313      	orrs	r3, r2
 8018bfa:	3401      	adds	r4, #1
 8018bfc:	9304      	str	r3, [sp, #16]
 8018bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c02:	4829      	ldr	r0, [pc, #164]	; (8018ca8 <_vfiprintf_r+0x224>)
 8018c04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018c08:	2206      	movs	r2, #6
 8018c0a:	f7e7 fae1 	bl	80001d0 <memchr>
 8018c0e:	2800      	cmp	r0, #0
 8018c10:	d03f      	beq.n	8018c92 <_vfiprintf_r+0x20e>
 8018c12:	4b26      	ldr	r3, [pc, #152]	; (8018cac <_vfiprintf_r+0x228>)
 8018c14:	bb1b      	cbnz	r3, 8018c5e <_vfiprintf_r+0x1da>
 8018c16:	9b03      	ldr	r3, [sp, #12]
 8018c18:	3307      	adds	r3, #7
 8018c1a:	f023 0307 	bic.w	r3, r3, #7
 8018c1e:	3308      	adds	r3, #8
 8018c20:	9303      	str	r3, [sp, #12]
 8018c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c24:	443b      	add	r3, r7
 8018c26:	9309      	str	r3, [sp, #36]	; 0x24
 8018c28:	e768      	b.n	8018afc <_vfiprintf_r+0x78>
 8018c2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8018c2e:	460c      	mov	r4, r1
 8018c30:	2001      	movs	r0, #1
 8018c32:	e7a6      	b.n	8018b82 <_vfiprintf_r+0xfe>
 8018c34:	2300      	movs	r3, #0
 8018c36:	3401      	adds	r4, #1
 8018c38:	9305      	str	r3, [sp, #20]
 8018c3a:	4619      	mov	r1, r3
 8018c3c:	f04f 0c0a 	mov.w	ip, #10
 8018c40:	4620      	mov	r0, r4
 8018c42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018c46:	3a30      	subs	r2, #48	; 0x30
 8018c48:	2a09      	cmp	r2, #9
 8018c4a:	d903      	bls.n	8018c54 <_vfiprintf_r+0x1d0>
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d0c6      	beq.n	8018bde <_vfiprintf_r+0x15a>
 8018c50:	9105      	str	r1, [sp, #20]
 8018c52:	e7c4      	b.n	8018bde <_vfiprintf_r+0x15a>
 8018c54:	fb0c 2101 	mla	r1, ip, r1, r2
 8018c58:	4604      	mov	r4, r0
 8018c5a:	2301      	movs	r3, #1
 8018c5c:	e7f0      	b.n	8018c40 <_vfiprintf_r+0x1bc>
 8018c5e:	ab03      	add	r3, sp, #12
 8018c60:	9300      	str	r3, [sp, #0]
 8018c62:	462a      	mov	r2, r5
 8018c64:	4b12      	ldr	r3, [pc, #72]	; (8018cb0 <_vfiprintf_r+0x22c>)
 8018c66:	a904      	add	r1, sp, #16
 8018c68:	4630      	mov	r0, r6
 8018c6a:	f7fc fcf3 	bl	8015654 <_printf_float>
 8018c6e:	4607      	mov	r7, r0
 8018c70:	1c78      	adds	r0, r7, #1
 8018c72:	d1d6      	bne.n	8018c22 <_vfiprintf_r+0x19e>
 8018c74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018c76:	07d9      	lsls	r1, r3, #31
 8018c78:	d405      	bmi.n	8018c86 <_vfiprintf_r+0x202>
 8018c7a:	89ab      	ldrh	r3, [r5, #12]
 8018c7c:	059a      	lsls	r2, r3, #22
 8018c7e:	d402      	bmi.n	8018c86 <_vfiprintf_r+0x202>
 8018c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018c82:	f7fd fd29 	bl	80166d8 <__retarget_lock_release_recursive>
 8018c86:	89ab      	ldrh	r3, [r5, #12]
 8018c88:	065b      	lsls	r3, r3, #25
 8018c8a:	f53f af1d 	bmi.w	8018ac8 <_vfiprintf_r+0x44>
 8018c8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018c90:	e71c      	b.n	8018acc <_vfiprintf_r+0x48>
 8018c92:	ab03      	add	r3, sp, #12
 8018c94:	9300      	str	r3, [sp, #0]
 8018c96:	462a      	mov	r2, r5
 8018c98:	4b05      	ldr	r3, [pc, #20]	; (8018cb0 <_vfiprintf_r+0x22c>)
 8018c9a:	a904      	add	r1, sp, #16
 8018c9c:	4630      	mov	r0, r6
 8018c9e:	f7fc ff7d 	bl	8015b9c <_printf_i>
 8018ca2:	e7e4      	b.n	8018c6e <_vfiprintf_r+0x1ea>
 8018ca4:	0801ce0c 	.word	0x0801ce0c
 8018ca8:	0801ce16 	.word	0x0801ce16
 8018cac:	08015655 	.word	0x08015655
 8018cb0:	08018a5f 	.word	0x08018a5f
 8018cb4:	0801ce12 	.word	0x0801ce12

08018cb8 <__swbuf_r>:
 8018cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cba:	460e      	mov	r6, r1
 8018cbc:	4614      	mov	r4, r2
 8018cbe:	4605      	mov	r5, r0
 8018cc0:	b118      	cbz	r0, 8018cca <__swbuf_r+0x12>
 8018cc2:	6a03      	ldr	r3, [r0, #32]
 8018cc4:	b90b      	cbnz	r3, 8018cca <__swbuf_r+0x12>
 8018cc6:	f7fd fb27 	bl	8016318 <__sinit>
 8018cca:	69a3      	ldr	r3, [r4, #24]
 8018ccc:	60a3      	str	r3, [r4, #8]
 8018cce:	89a3      	ldrh	r3, [r4, #12]
 8018cd0:	071a      	lsls	r2, r3, #28
 8018cd2:	d525      	bpl.n	8018d20 <__swbuf_r+0x68>
 8018cd4:	6923      	ldr	r3, [r4, #16]
 8018cd6:	b31b      	cbz	r3, 8018d20 <__swbuf_r+0x68>
 8018cd8:	6823      	ldr	r3, [r4, #0]
 8018cda:	6922      	ldr	r2, [r4, #16]
 8018cdc:	1a98      	subs	r0, r3, r2
 8018cde:	6963      	ldr	r3, [r4, #20]
 8018ce0:	b2f6      	uxtb	r6, r6
 8018ce2:	4283      	cmp	r3, r0
 8018ce4:	4637      	mov	r7, r6
 8018ce6:	dc04      	bgt.n	8018cf2 <__swbuf_r+0x3a>
 8018ce8:	4621      	mov	r1, r4
 8018cea:	4628      	mov	r0, r5
 8018cec:	f7ff fe00 	bl	80188f0 <_fflush_r>
 8018cf0:	b9e0      	cbnz	r0, 8018d2c <__swbuf_r+0x74>
 8018cf2:	68a3      	ldr	r3, [r4, #8]
 8018cf4:	3b01      	subs	r3, #1
 8018cf6:	60a3      	str	r3, [r4, #8]
 8018cf8:	6823      	ldr	r3, [r4, #0]
 8018cfa:	1c5a      	adds	r2, r3, #1
 8018cfc:	6022      	str	r2, [r4, #0]
 8018cfe:	701e      	strb	r6, [r3, #0]
 8018d00:	6962      	ldr	r2, [r4, #20]
 8018d02:	1c43      	adds	r3, r0, #1
 8018d04:	429a      	cmp	r2, r3
 8018d06:	d004      	beq.n	8018d12 <__swbuf_r+0x5a>
 8018d08:	89a3      	ldrh	r3, [r4, #12]
 8018d0a:	07db      	lsls	r3, r3, #31
 8018d0c:	d506      	bpl.n	8018d1c <__swbuf_r+0x64>
 8018d0e:	2e0a      	cmp	r6, #10
 8018d10:	d104      	bne.n	8018d1c <__swbuf_r+0x64>
 8018d12:	4621      	mov	r1, r4
 8018d14:	4628      	mov	r0, r5
 8018d16:	f7ff fdeb 	bl	80188f0 <_fflush_r>
 8018d1a:	b938      	cbnz	r0, 8018d2c <__swbuf_r+0x74>
 8018d1c:	4638      	mov	r0, r7
 8018d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d20:	4621      	mov	r1, r4
 8018d22:	4628      	mov	r0, r5
 8018d24:	f000 f806 	bl	8018d34 <__swsetup_r>
 8018d28:	2800      	cmp	r0, #0
 8018d2a:	d0d5      	beq.n	8018cd8 <__swbuf_r+0x20>
 8018d2c:	f04f 37ff 	mov.w	r7, #4294967295
 8018d30:	e7f4      	b.n	8018d1c <__swbuf_r+0x64>
	...

08018d34 <__swsetup_r>:
 8018d34:	b538      	push	{r3, r4, r5, lr}
 8018d36:	4b2a      	ldr	r3, [pc, #168]	; (8018de0 <__swsetup_r+0xac>)
 8018d38:	4605      	mov	r5, r0
 8018d3a:	6818      	ldr	r0, [r3, #0]
 8018d3c:	460c      	mov	r4, r1
 8018d3e:	b118      	cbz	r0, 8018d48 <__swsetup_r+0x14>
 8018d40:	6a03      	ldr	r3, [r0, #32]
 8018d42:	b90b      	cbnz	r3, 8018d48 <__swsetup_r+0x14>
 8018d44:	f7fd fae8 	bl	8016318 <__sinit>
 8018d48:	89a3      	ldrh	r3, [r4, #12]
 8018d4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018d4e:	0718      	lsls	r0, r3, #28
 8018d50:	d422      	bmi.n	8018d98 <__swsetup_r+0x64>
 8018d52:	06d9      	lsls	r1, r3, #27
 8018d54:	d407      	bmi.n	8018d66 <__swsetup_r+0x32>
 8018d56:	2309      	movs	r3, #9
 8018d58:	602b      	str	r3, [r5, #0]
 8018d5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018d5e:	81a3      	strh	r3, [r4, #12]
 8018d60:	f04f 30ff 	mov.w	r0, #4294967295
 8018d64:	e034      	b.n	8018dd0 <__swsetup_r+0x9c>
 8018d66:	0758      	lsls	r0, r3, #29
 8018d68:	d512      	bpl.n	8018d90 <__swsetup_r+0x5c>
 8018d6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018d6c:	b141      	cbz	r1, 8018d80 <__swsetup_r+0x4c>
 8018d6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d72:	4299      	cmp	r1, r3
 8018d74:	d002      	beq.n	8018d7c <__swsetup_r+0x48>
 8018d76:	4628      	mov	r0, r5
 8018d78:	f7fe fb6c 	bl	8017454 <_free_r>
 8018d7c:	2300      	movs	r3, #0
 8018d7e:	6363      	str	r3, [r4, #52]	; 0x34
 8018d80:	89a3      	ldrh	r3, [r4, #12]
 8018d82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018d86:	81a3      	strh	r3, [r4, #12]
 8018d88:	2300      	movs	r3, #0
 8018d8a:	6063      	str	r3, [r4, #4]
 8018d8c:	6923      	ldr	r3, [r4, #16]
 8018d8e:	6023      	str	r3, [r4, #0]
 8018d90:	89a3      	ldrh	r3, [r4, #12]
 8018d92:	f043 0308 	orr.w	r3, r3, #8
 8018d96:	81a3      	strh	r3, [r4, #12]
 8018d98:	6923      	ldr	r3, [r4, #16]
 8018d9a:	b94b      	cbnz	r3, 8018db0 <__swsetup_r+0x7c>
 8018d9c:	89a3      	ldrh	r3, [r4, #12]
 8018d9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018da6:	d003      	beq.n	8018db0 <__swsetup_r+0x7c>
 8018da8:	4621      	mov	r1, r4
 8018daa:	4628      	mov	r0, r5
 8018dac:	f000 f88c 	bl	8018ec8 <__smakebuf_r>
 8018db0:	89a0      	ldrh	r0, [r4, #12]
 8018db2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018db6:	f010 0301 	ands.w	r3, r0, #1
 8018dba:	d00a      	beq.n	8018dd2 <__swsetup_r+0x9e>
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	60a3      	str	r3, [r4, #8]
 8018dc0:	6963      	ldr	r3, [r4, #20]
 8018dc2:	425b      	negs	r3, r3
 8018dc4:	61a3      	str	r3, [r4, #24]
 8018dc6:	6923      	ldr	r3, [r4, #16]
 8018dc8:	b943      	cbnz	r3, 8018ddc <__swsetup_r+0xa8>
 8018dca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018dce:	d1c4      	bne.n	8018d5a <__swsetup_r+0x26>
 8018dd0:	bd38      	pop	{r3, r4, r5, pc}
 8018dd2:	0781      	lsls	r1, r0, #30
 8018dd4:	bf58      	it	pl
 8018dd6:	6963      	ldrpl	r3, [r4, #20]
 8018dd8:	60a3      	str	r3, [r4, #8]
 8018dda:	e7f4      	b.n	8018dc6 <__swsetup_r+0x92>
 8018ddc:	2000      	movs	r0, #0
 8018dde:	e7f7      	b.n	8018dd0 <__swsetup_r+0x9c>
 8018de0:	200002f4 	.word	0x200002f4

08018de4 <_raise_r>:
 8018de4:	291f      	cmp	r1, #31
 8018de6:	b538      	push	{r3, r4, r5, lr}
 8018de8:	4604      	mov	r4, r0
 8018dea:	460d      	mov	r5, r1
 8018dec:	d904      	bls.n	8018df8 <_raise_r+0x14>
 8018dee:	2316      	movs	r3, #22
 8018df0:	6003      	str	r3, [r0, #0]
 8018df2:	f04f 30ff 	mov.w	r0, #4294967295
 8018df6:	bd38      	pop	{r3, r4, r5, pc}
 8018df8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018dfa:	b112      	cbz	r2, 8018e02 <_raise_r+0x1e>
 8018dfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018e00:	b94b      	cbnz	r3, 8018e16 <_raise_r+0x32>
 8018e02:	4620      	mov	r0, r4
 8018e04:	f000 f830 	bl	8018e68 <_getpid_r>
 8018e08:	462a      	mov	r2, r5
 8018e0a:	4601      	mov	r1, r0
 8018e0c:	4620      	mov	r0, r4
 8018e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018e12:	f000 b817 	b.w	8018e44 <_kill_r>
 8018e16:	2b01      	cmp	r3, #1
 8018e18:	d00a      	beq.n	8018e30 <_raise_r+0x4c>
 8018e1a:	1c59      	adds	r1, r3, #1
 8018e1c:	d103      	bne.n	8018e26 <_raise_r+0x42>
 8018e1e:	2316      	movs	r3, #22
 8018e20:	6003      	str	r3, [r0, #0]
 8018e22:	2001      	movs	r0, #1
 8018e24:	e7e7      	b.n	8018df6 <_raise_r+0x12>
 8018e26:	2400      	movs	r4, #0
 8018e28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018e2c:	4628      	mov	r0, r5
 8018e2e:	4798      	blx	r3
 8018e30:	2000      	movs	r0, #0
 8018e32:	e7e0      	b.n	8018df6 <_raise_r+0x12>

08018e34 <raise>:
 8018e34:	4b02      	ldr	r3, [pc, #8]	; (8018e40 <raise+0xc>)
 8018e36:	4601      	mov	r1, r0
 8018e38:	6818      	ldr	r0, [r3, #0]
 8018e3a:	f7ff bfd3 	b.w	8018de4 <_raise_r>
 8018e3e:	bf00      	nop
 8018e40:	200002f4 	.word	0x200002f4

08018e44 <_kill_r>:
 8018e44:	b538      	push	{r3, r4, r5, lr}
 8018e46:	4d07      	ldr	r5, [pc, #28]	; (8018e64 <_kill_r+0x20>)
 8018e48:	2300      	movs	r3, #0
 8018e4a:	4604      	mov	r4, r0
 8018e4c:	4608      	mov	r0, r1
 8018e4e:	4611      	mov	r1, r2
 8018e50:	602b      	str	r3, [r5, #0]
 8018e52:	f7ec fb63 	bl	800551c <_kill>
 8018e56:	1c43      	adds	r3, r0, #1
 8018e58:	d102      	bne.n	8018e60 <_kill_r+0x1c>
 8018e5a:	682b      	ldr	r3, [r5, #0]
 8018e5c:	b103      	cbz	r3, 8018e60 <_kill_r+0x1c>
 8018e5e:	6023      	str	r3, [r4, #0]
 8018e60:	bd38      	pop	{r3, r4, r5, pc}
 8018e62:	bf00      	nop
 8018e64:	2000258c 	.word	0x2000258c

08018e68 <_getpid_r>:
 8018e68:	f7ec bb50 	b.w	800550c <_getpid>

08018e6c <_malloc_usable_size_r>:
 8018e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018e70:	1f18      	subs	r0, r3, #4
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	bfbc      	itt	lt
 8018e76:	580b      	ldrlt	r3, [r1, r0]
 8018e78:	18c0      	addlt	r0, r0, r3
 8018e7a:	4770      	bx	lr

08018e7c <__swhatbuf_r>:
 8018e7c:	b570      	push	{r4, r5, r6, lr}
 8018e7e:	460c      	mov	r4, r1
 8018e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e84:	2900      	cmp	r1, #0
 8018e86:	b096      	sub	sp, #88	; 0x58
 8018e88:	4615      	mov	r5, r2
 8018e8a:	461e      	mov	r6, r3
 8018e8c:	da0d      	bge.n	8018eaa <__swhatbuf_r+0x2e>
 8018e8e:	89a3      	ldrh	r3, [r4, #12]
 8018e90:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018e94:	f04f 0100 	mov.w	r1, #0
 8018e98:	bf0c      	ite	eq
 8018e9a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018e9e:	2340      	movne	r3, #64	; 0x40
 8018ea0:	2000      	movs	r0, #0
 8018ea2:	6031      	str	r1, [r6, #0]
 8018ea4:	602b      	str	r3, [r5, #0]
 8018ea6:	b016      	add	sp, #88	; 0x58
 8018ea8:	bd70      	pop	{r4, r5, r6, pc}
 8018eaa:	466a      	mov	r2, sp
 8018eac:	f000 f848 	bl	8018f40 <_fstat_r>
 8018eb0:	2800      	cmp	r0, #0
 8018eb2:	dbec      	blt.n	8018e8e <__swhatbuf_r+0x12>
 8018eb4:	9901      	ldr	r1, [sp, #4]
 8018eb6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018eba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018ebe:	4259      	negs	r1, r3
 8018ec0:	4159      	adcs	r1, r3
 8018ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018ec6:	e7eb      	b.n	8018ea0 <__swhatbuf_r+0x24>

08018ec8 <__smakebuf_r>:
 8018ec8:	898b      	ldrh	r3, [r1, #12]
 8018eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018ecc:	079d      	lsls	r5, r3, #30
 8018ece:	4606      	mov	r6, r0
 8018ed0:	460c      	mov	r4, r1
 8018ed2:	d507      	bpl.n	8018ee4 <__smakebuf_r+0x1c>
 8018ed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018ed8:	6023      	str	r3, [r4, #0]
 8018eda:	6123      	str	r3, [r4, #16]
 8018edc:	2301      	movs	r3, #1
 8018ede:	6163      	str	r3, [r4, #20]
 8018ee0:	b002      	add	sp, #8
 8018ee2:	bd70      	pop	{r4, r5, r6, pc}
 8018ee4:	ab01      	add	r3, sp, #4
 8018ee6:	466a      	mov	r2, sp
 8018ee8:	f7ff ffc8 	bl	8018e7c <__swhatbuf_r>
 8018eec:	9900      	ldr	r1, [sp, #0]
 8018eee:	4605      	mov	r5, r0
 8018ef0:	4630      	mov	r0, r6
 8018ef2:	f7fb fb7d 	bl	80145f0 <_malloc_r>
 8018ef6:	b948      	cbnz	r0, 8018f0c <__smakebuf_r+0x44>
 8018ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018efc:	059a      	lsls	r2, r3, #22
 8018efe:	d4ef      	bmi.n	8018ee0 <__smakebuf_r+0x18>
 8018f00:	f023 0303 	bic.w	r3, r3, #3
 8018f04:	f043 0302 	orr.w	r3, r3, #2
 8018f08:	81a3      	strh	r3, [r4, #12]
 8018f0a:	e7e3      	b.n	8018ed4 <__smakebuf_r+0xc>
 8018f0c:	89a3      	ldrh	r3, [r4, #12]
 8018f0e:	6020      	str	r0, [r4, #0]
 8018f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f14:	81a3      	strh	r3, [r4, #12]
 8018f16:	9b00      	ldr	r3, [sp, #0]
 8018f18:	6163      	str	r3, [r4, #20]
 8018f1a:	9b01      	ldr	r3, [sp, #4]
 8018f1c:	6120      	str	r0, [r4, #16]
 8018f1e:	b15b      	cbz	r3, 8018f38 <__smakebuf_r+0x70>
 8018f20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f24:	4630      	mov	r0, r6
 8018f26:	f000 f81d 	bl	8018f64 <_isatty_r>
 8018f2a:	b128      	cbz	r0, 8018f38 <__smakebuf_r+0x70>
 8018f2c:	89a3      	ldrh	r3, [r4, #12]
 8018f2e:	f023 0303 	bic.w	r3, r3, #3
 8018f32:	f043 0301 	orr.w	r3, r3, #1
 8018f36:	81a3      	strh	r3, [r4, #12]
 8018f38:	89a3      	ldrh	r3, [r4, #12]
 8018f3a:	431d      	orrs	r5, r3
 8018f3c:	81a5      	strh	r5, [r4, #12]
 8018f3e:	e7cf      	b.n	8018ee0 <__smakebuf_r+0x18>

08018f40 <_fstat_r>:
 8018f40:	b538      	push	{r3, r4, r5, lr}
 8018f42:	4d07      	ldr	r5, [pc, #28]	; (8018f60 <_fstat_r+0x20>)
 8018f44:	2300      	movs	r3, #0
 8018f46:	4604      	mov	r4, r0
 8018f48:	4608      	mov	r0, r1
 8018f4a:	4611      	mov	r1, r2
 8018f4c:	602b      	str	r3, [r5, #0]
 8018f4e:	f7ec fb44 	bl	80055da <_fstat>
 8018f52:	1c43      	adds	r3, r0, #1
 8018f54:	d102      	bne.n	8018f5c <_fstat_r+0x1c>
 8018f56:	682b      	ldr	r3, [r5, #0]
 8018f58:	b103      	cbz	r3, 8018f5c <_fstat_r+0x1c>
 8018f5a:	6023      	str	r3, [r4, #0]
 8018f5c:	bd38      	pop	{r3, r4, r5, pc}
 8018f5e:	bf00      	nop
 8018f60:	2000258c 	.word	0x2000258c

08018f64 <_isatty_r>:
 8018f64:	b538      	push	{r3, r4, r5, lr}
 8018f66:	4d06      	ldr	r5, [pc, #24]	; (8018f80 <_isatty_r+0x1c>)
 8018f68:	2300      	movs	r3, #0
 8018f6a:	4604      	mov	r4, r0
 8018f6c:	4608      	mov	r0, r1
 8018f6e:	602b      	str	r3, [r5, #0]
 8018f70:	f7ec fb43 	bl	80055fa <_isatty>
 8018f74:	1c43      	adds	r3, r0, #1
 8018f76:	d102      	bne.n	8018f7e <_isatty_r+0x1a>
 8018f78:	682b      	ldr	r3, [r5, #0]
 8018f7a:	b103      	cbz	r3, 8018f7e <_isatty_r+0x1a>
 8018f7c:	6023      	str	r3, [r4, #0]
 8018f7e:	bd38      	pop	{r3, r4, r5, pc}
 8018f80:	2000258c 	.word	0x2000258c
 8018f84:	00000000 	.word	0x00000000

08018f88 <cos>:
 8018f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018f8a:	ec53 2b10 	vmov	r2, r3, d0
 8018f8e:	4826      	ldr	r0, [pc, #152]	; (8019028 <cos+0xa0>)
 8018f90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018f94:	4281      	cmp	r1, r0
 8018f96:	dc06      	bgt.n	8018fa6 <cos+0x1e>
 8018f98:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8019020 <cos+0x98>
 8018f9c:	b005      	add	sp, #20
 8018f9e:	f85d eb04 	ldr.w	lr, [sp], #4
 8018fa2:	f000 b9b9 	b.w	8019318 <__kernel_cos>
 8018fa6:	4821      	ldr	r0, [pc, #132]	; (801902c <cos+0xa4>)
 8018fa8:	4281      	cmp	r1, r0
 8018faa:	dd09      	ble.n	8018fc0 <cos+0x38>
 8018fac:	ee10 0a10 	vmov	r0, s0
 8018fb0:	4619      	mov	r1, r3
 8018fb2:	f7e7 f969 	bl	8000288 <__aeabi_dsub>
 8018fb6:	ec41 0b10 	vmov	d0, r0, r1
 8018fba:	b005      	add	sp, #20
 8018fbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8018fc0:	4668      	mov	r0, sp
 8018fc2:	f000 fb31 	bl	8019628 <__ieee754_rem_pio2>
 8018fc6:	f000 0003 	and.w	r0, r0, #3
 8018fca:	2801      	cmp	r0, #1
 8018fcc:	d00b      	beq.n	8018fe6 <cos+0x5e>
 8018fce:	2802      	cmp	r0, #2
 8018fd0:	d016      	beq.n	8019000 <cos+0x78>
 8018fd2:	b9e0      	cbnz	r0, 801900e <cos+0x86>
 8018fd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018fd8:	ed9d 0b00 	vldr	d0, [sp]
 8018fdc:	f000 f99c 	bl	8019318 <__kernel_cos>
 8018fe0:	ec51 0b10 	vmov	r0, r1, d0
 8018fe4:	e7e7      	b.n	8018fb6 <cos+0x2e>
 8018fe6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018fea:	ed9d 0b00 	vldr	d0, [sp]
 8018fee:	f000 fa5b 	bl	80194a8 <__kernel_sin>
 8018ff2:	ec53 2b10 	vmov	r2, r3, d0
 8018ff6:	ee10 0a10 	vmov	r0, s0
 8018ffa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018ffe:	e7da      	b.n	8018fb6 <cos+0x2e>
 8019000:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019004:	ed9d 0b00 	vldr	d0, [sp]
 8019008:	f000 f986 	bl	8019318 <__kernel_cos>
 801900c:	e7f1      	b.n	8018ff2 <cos+0x6a>
 801900e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019012:	ed9d 0b00 	vldr	d0, [sp]
 8019016:	2001      	movs	r0, #1
 8019018:	f000 fa46 	bl	80194a8 <__kernel_sin>
 801901c:	e7e0      	b.n	8018fe0 <cos+0x58>
 801901e:	bf00      	nop
	...
 8019028:	3fe921fb 	.word	0x3fe921fb
 801902c:	7fefffff 	.word	0x7fefffff

08019030 <sin>:
 8019030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019032:	ec53 2b10 	vmov	r2, r3, d0
 8019036:	4828      	ldr	r0, [pc, #160]	; (80190d8 <sin+0xa8>)
 8019038:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801903c:	4281      	cmp	r1, r0
 801903e:	dc07      	bgt.n	8019050 <sin+0x20>
 8019040:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80190d0 <sin+0xa0>
 8019044:	2000      	movs	r0, #0
 8019046:	b005      	add	sp, #20
 8019048:	f85d eb04 	ldr.w	lr, [sp], #4
 801904c:	f000 ba2c 	b.w	80194a8 <__kernel_sin>
 8019050:	4822      	ldr	r0, [pc, #136]	; (80190dc <sin+0xac>)
 8019052:	4281      	cmp	r1, r0
 8019054:	dd09      	ble.n	801906a <sin+0x3a>
 8019056:	ee10 0a10 	vmov	r0, s0
 801905a:	4619      	mov	r1, r3
 801905c:	f7e7 f914 	bl	8000288 <__aeabi_dsub>
 8019060:	ec41 0b10 	vmov	d0, r0, r1
 8019064:	b005      	add	sp, #20
 8019066:	f85d fb04 	ldr.w	pc, [sp], #4
 801906a:	4668      	mov	r0, sp
 801906c:	f000 fadc 	bl	8019628 <__ieee754_rem_pio2>
 8019070:	f000 0003 	and.w	r0, r0, #3
 8019074:	2801      	cmp	r0, #1
 8019076:	d00c      	beq.n	8019092 <sin+0x62>
 8019078:	2802      	cmp	r0, #2
 801907a:	d011      	beq.n	80190a0 <sin+0x70>
 801907c:	b9f0      	cbnz	r0, 80190bc <sin+0x8c>
 801907e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019082:	ed9d 0b00 	vldr	d0, [sp]
 8019086:	2001      	movs	r0, #1
 8019088:	f000 fa0e 	bl	80194a8 <__kernel_sin>
 801908c:	ec51 0b10 	vmov	r0, r1, d0
 8019090:	e7e6      	b.n	8019060 <sin+0x30>
 8019092:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019096:	ed9d 0b00 	vldr	d0, [sp]
 801909a:	f000 f93d 	bl	8019318 <__kernel_cos>
 801909e:	e7f5      	b.n	801908c <sin+0x5c>
 80190a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80190a4:	ed9d 0b00 	vldr	d0, [sp]
 80190a8:	2001      	movs	r0, #1
 80190aa:	f000 f9fd 	bl	80194a8 <__kernel_sin>
 80190ae:	ec53 2b10 	vmov	r2, r3, d0
 80190b2:	ee10 0a10 	vmov	r0, s0
 80190b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80190ba:	e7d1      	b.n	8019060 <sin+0x30>
 80190bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80190c0:	ed9d 0b00 	vldr	d0, [sp]
 80190c4:	f000 f928 	bl	8019318 <__kernel_cos>
 80190c8:	e7f1      	b.n	80190ae <sin+0x7e>
 80190ca:	bf00      	nop
 80190cc:	f3af 8000 	nop.w
	...
 80190d8:	3fe921fb 	.word	0x3fe921fb
 80190dc:	7fefffff 	.word	0x7fefffff

080190e0 <expf>:
 80190e0:	b508      	push	{r3, lr}
 80190e2:	ed2d 8b02 	vpush	{d8}
 80190e6:	eef0 8a40 	vmov.f32	s17, s0
 80190ea:	f000 fce1 	bl	8019ab0 <__ieee754_expf>
 80190ee:	eeb0 8a40 	vmov.f32	s16, s0
 80190f2:	eeb0 0a68 	vmov.f32	s0, s17
 80190f6:	f000 f87b 	bl	80191f0 <finitef>
 80190fa:	b160      	cbz	r0, 8019116 <expf+0x36>
 80190fc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801913c <expf+0x5c>
 8019100:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019108:	dd0a      	ble.n	8019120 <expf+0x40>
 801910a:	f7fd fab9 	bl	8016680 <__errno>
 801910e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8019140 <expf+0x60>
 8019112:	2322      	movs	r3, #34	; 0x22
 8019114:	6003      	str	r3, [r0, #0]
 8019116:	eeb0 0a48 	vmov.f32	s0, s16
 801911a:	ecbd 8b02 	vpop	{d8}
 801911e:	bd08      	pop	{r3, pc}
 8019120:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019144 <expf+0x64>
 8019124:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801912c:	d5f3      	bpl.n	8019116 <expf+0x36>
 801912e:	f7fd faa7 	bl	8016680 <__errno>
 8019132:	2322      	movs	r3, #34	; 0x22
 8019134:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8019148 <expf+0x68>
 8019138:	6003      	str	r3, [r0, #0]
 801913a:	e7ec      	b.n	8019116 <expf+0x36>
 801913c:	42b17217 	.word	0x42b17217
 8019140:	7f800000 	.word	0x7f800000
 8019144:	c2cff1b5 	.word	0xc2cff1b5
 8019148:	00000000 	.word	0x00000000

0801914c <fmin>:
 801914c:	b508      	push	{r3, lr}
 801914e:	ed2d 8b04 	vpush	{d8-d9}
 8019152:	eeb0 8a40 	vmov.f32	s16, s0
 8019156:	eef0 8a60 	vmov.f32	s17, s1
 801915a:	eeb0 9a41 	vmov.f32	s18, s2
 801915e:	eef0 9a61 	vmov.f32	s19, s3
 8019162:	f000 f81b 	bl	801919c <__fpclassifyd>
 8019166:	b168      	cbz	r0, 8019184 <fmin+0x38>
 8019168:	eeb0 0a49 	vmov.f32	s0, s18
 801916c:	eef0 0a69 	vmov.f32	s1, s19
 8019170:	f000 f814 	bl	801919c <__fpclassifyd>
 8019174:	b150      	cbz	r0, 801918c <fmin+0x40>
 8019176:	ec53 2b19 	vmov	r2, r3, d9
 801917a:	ec51 0b18 	vmov	r0, r1, d8
 801917e:	f7e7 fcad 	bl	8000adc <__aeabi_dcmplt>
 8019182:	b918      	cbnz	r0, 801918c <fmin+0x40>
 8019184:	eeb0 8a49 	vmov.f32	s16, s18
 8019188:	eef0 8a69 	vmov.f32	s17, s19
 801918c:	eeb0 0a48 	vmov.f32	s0, s16
 8019190:	eef0 0a68 	vmov.f32	s1, s17
 8019194:	ecbd 8b04 	vpop	{d8-d9}
 8019198:	bd08      	pop	{r3, pc}
	...

0801919c <__fpclassifyd>:
 801919c:	ec51 0b10 	vmov	r0, r1, d0
 80191a0:	b510      	push	{r4, lr}
 80191a2:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80191a6:	460b      	mov	r3, r1
 80191a8:	d019      	beq.n	80191de <__fpclassifyd+0x42>
 80191aa:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 80191ae:	490e      	ldr	r1, [pc, #56]	; (80191e8 <__fpclassifyd+0x4c>)
 80191b0:	428a      	cmp	r2, r1
 80191b2:	d90e      	bls.n	80191d2 <__fpclassifyd+0x36>
 80191b4:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 80191b8:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 80191bc:	428a      	cmp	r2, r1
 80191be:	d908      	bls.n	80191d2 <__fpclassifyd+0x36>
 80191c0:	4a0a      	ldr	r2, [pc, #40]	; (80191ec <__fpclassifyd+0x50>)
 80191c2:	4213      	tst	r3, r2
 80191c4:	d007      	beq.n	80191d6 <__fpclassifyd+0x3a>
 80191c6:	4294      	cmp	r4, r2
 80191c8:	d107      	bne.n	80191da <__fpclassifyd+0x3e>
 80191ca:	fab0 f080 	clz	r0, r0
 80191ce:	0940      	lsrs	r0, r0, #5
 80191d0:	bd10      	pop	{r4, pc}
 80191d2:	2004      	movs	r0, #4
 80191d4:	e7fc      	b.n	80191d0 <__fpclassifyd+0x34>
 80191d6:	2003      	movs	r0, #3
 80191d8:	e7fa      	b.n	80191d0 <__fpclassifyd+0x34>
 80191da:	2000      	movs	r0, #0
 80191dc:	e7f8      	b.n	80191d0 <__fpclassifyd+0x34>
 80191de:	2800      	cmp	r0, #0
 80191e0:	d1ee      	bne.n	80191c0 <__fpclassifyd+0x24>
 80191e2:	2002      	movs	r0, #2
 80191e4:	e7f4      	b.n	80191d0 <__fpclassifyd+0x34>
 80191e6:	bf00      	nop
 80191e8:	7fdfffff 	.word	0x7fdfffff
 80191ec:	7ff00000 	.word	0x7ff00000

080191f0 <finitef>:
 80191f0:	b082      	sub	sp, #8
 80191f2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80191f6:	9801      	ldr	r0, [sp, #4]
 80191f8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80191fc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019200:	bfac      	ite	ge
 8019202:	2000      	movge	r0, #0
 8019204:	2001      	movlt	r0, #1
 8019206:	b002      	add	sp, #8
 8019208:	4770      	bx	lr

0801920a <cosl>:
 801920a:	f7ff bebd 	b.w	8018f88 <cos>

0801920e <sinl>:
 801920e:	f7ff bf0f 	b.w	8019030 <sin>

08019212 <acosl>:
 8019212:	f000 bc0f 	b.w	8019a34 <acos>
	...

08019218 <floor>:
 8019218:	ec51 0b10 	vmov	r0, r1, d0
 801921c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019224:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8019228:	2e13      	cmp	r6, #19
 801922a:	ee10 5a10 	vmov	r5, s0
 801922e:	ee10 8a10 	vmov	r8, s0
 8019232:	460c      	mov	r4, r1
 8019234:	dc31      	bgt.n	801929a <floor+0x82>
 8019236:	2e00      	cmp	r6, #0
 8019238:	da14      	bge.n	8019264 <floor+0x4c>
 801923a:	a333      	add	r3, pc, #204	; (adr r3, 8019308 <floor+0xf0>)
 801923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019240:	f7e7 f824 	bl	800028c <__adddf3>
 8019244:	2200      	movs	r2, #0
 8019246:	2300      	movs	r3, #0
 8019248:	f7e7 fc66 	bl	8000b18 <__aeabi_dcmpgt>
 801924c:	b138      	cbz	r0, 801925e <floor+0x46>
 801924e:	2c00      	cmp	r4, #0
 8019250:	da53      	bge.n	80192fa <floor+0xe2>
 8019252:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8019256:	4325      	orrs	r5, r4
 8019258:	d052      	beq.n	8019300 <floor+0xe8>
 801925a:	4c2d      	ldr	r4, [pc, #180]	; (8019310 <floor+0xf8>)
 801925c:	2500      	movs	r5, #0
 801925e:	4621      	mov	r1, r4
 8019260:	4628      	mov	r0, r5
 8019262:	e024      	b.n	80192ae <floor+0x96>
 8019264:	4f2b      	ldr	r7, [pc, #172]	; (8019314 <floor+0xfc>)
 8019266:	4137      	asrs	r7, r6
 8019268:	ea01 0307 	and.w	r3, r1, r7
 801926c:	4303      	orrs	r3, r0
 801926e:	d01e      	beq.n	80192ae <floor+0x96>
 8019270:	a325      	add	r3, pc, #148	; (adr r3, 8019308 <floor+0xf0>)
 8019272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019276:	f7e7 f809 	bl	800028c <__adddf3>
 801927a:	2200      	movs	r2, #0
 801927c:	2300      	movs	r3, #0
 801927e:	f7e7 fc4b 	bl	8000b18 <__aeabi_dcmpgt>
 8019282:	2800      	cmp	r0, #0
 8019284:	d0eb      	beq.n	801925e <floor+0x46>
 8019286:	2c00      	cmp	r4, #0
 8019288:	bfbe      	ittt	lt
 801928a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801928e:	4133      	asrlt	r3, r6
 8019290:	18e4      	addlt	r4, r4, r3
 8019292:	ea24 0407 	bic.w	r4, r4, r7
 8019296:	2500      	movs	r5, #0
 8019298:	e7e1      	b.n	801925e <floor+0x46>
 801929a:	2e33      	cmp	r6, #51	; 0x33
 801929c:	dd0b      	ble.n	80192b6 <floor+0x9e>
 801929e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80192a2:	d104      	bne.n	80192ae <floor+0x96>
 80192a4:	ee10 2a10 	vmov	r2, s0
 80192a8:	460b      	mov	r3, r1
 80192aa:	f7e6 ffef 	bl	800028c <__adddf3>
 80192ae:	ec41 0b10 	vmov	d0, r0, r1
 80192b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192b6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80192ba:	f04f 37ff 	mov.w	r7, #4294967295
 80192be:	40df      	lsrs	r7, r3
 80192c0:	4238      	tst	r0, r7
 80192c2:	d0f4      	beq.n	80192ae <floor+0x96>
 80192c4:	a310      	add	r3, pc, #64	; (adr r3, 8019308 <floor+0xf0>)
 80192c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192ca:	f7e6 ffdf 	bl	800028c <__adddf3>
 80192ce:	2200      	movs	r2, #0
 80192d0:	2300      	movs	r3, #0
 80192d2:	f7e7 fc21 	bl	8000b18 <__aeabi_dcmpgt>
 80192d6:	2800      	cmp	r0, #0
 80192d8:	d0c1      	beq.n	801925e <floor+0x46>
 80192da:	2c00      	cmp	r4, #0
 80192dc:	da0a      	bge.n	80192f4 <floor+0xdc>
 80192de:	2e14      	cmp	r6, #20
 80192e0:	d101      	bne.n	80192e6 <floor+0xce>
 80192e2:	3401      	adds	r4, #1
 80192e4:	e006      	b.n	80192f4 <floor+0xdc>
 80192e6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80192ea:	2301      	movs	r3, #1
 80192ec:	40b3      	lsls	r3, r6
 80192ee:	441d      	add	r5, r3
 80192f0:	45a8      	cmp	r8, r5
 80192f2:	d8f6      	bhi.n	80192e2 <floor+0xca>
 80192f4:	ea25 0507 	bic.w	r5, r5, r7
 80192f8:	e7b1      	b.n	801925e <floor+0x46>
 80192fa:	2500      	movs	r5, #0
 80192fc:	462c      	mov	r4, r5
 80192fe:	e7ae      	b.n	801925e <floor+0x46>
 8019300:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019304:	e7ab      	b.n	801925e <floor+0x46>
 8019306:	bf00      	nop
 8019308:	8800759c 	.word	0x8800759c
 801930c:	7e37e43c 	.word	0x7e37e43c
 8019310:	bff00000 	.word	0xbff00000
 8019314:	000fffff 	.word	0x000fffff

08019318 <__kernel_cos>:
 8019318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801931c:	ec57 6b10 	vmov	r6, r7, d0
 8019320:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019324:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8019328:	ed8d 1b00 	vstr	d1, [sp]
 801932c:	da07      	bge.n	801933e <__kernel_cos+0x26>
 801932e:	ee10 0a10 	vmov	r0, s0
 8019332:	4639      	mov	r1, r7
 8019334:	f7e7 fc10 	bl	8000b58 <__aeabi_d2iz>
 8019338:	2800      	cmp	r0, #0
 801933a:	f000 8088 	beq.w	801944e <__kernel_cos+0x136>
 801933e:	4632      	mov	r2, r6
 8019340:	463b      	mov	r3, r7
 8019342:	4630      	mov	r0, r6
 8019344:	4639      	mov	r1, r7
 8019346:	f7e7 f957 	bl	80005f8 <__aeabi_dmul>
 801934a:	4b51      	ldr	r3, [pc, #324]	; (8019490 <__kernel_cos+0x178>)
 801934c:	2200      	movs	r2, #0
 801934e:	4604      	mov	r4, r0
 8019350:	460d      	mov	r5, r1
 8019352:	f7e7 f951 	bl	80005f8 <__aeabi_dmul>
 8019356:	a340      	add	r3, pc, #256	; (adr r3, 8019458 <__kernel_cos+0x140>)
 8019358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801935c:	4682      	mov	sl, r0
 801935e:	468b      	mov	fp, r1
 8019360:	4620      	mov	r0, r4
 8019362:	4629      	mov	r1, r5
 8019364:	f7e7 f948 	bl	80005f8 <__aeabi_dmul>
 8019368:	a33d      	add	r3, pc, #244	; (adr r3, 8019460 <__kernel_cos+0x148>)
 801936a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801936e:	f7e6 ff8d 	bl	800028c <__adddf3>
 8019372:	4622      	mov	r2, r4
 8019374:	462b      	mov	r3, r5
 8019376:	f7e7 f93f 	bl	80005f8 <__aeabi_dmul>
 801937a:	a33b      	add	r3, pc, #236	; (adr r3, 8019468 <__kernel_cos+0x150>)
 801937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019380:	f7e6 ff82 	bl	8000288 <__aeabi_dsub>
 8019384:	4622      	mov	r2, r4
 8019386:	462b      	mov	r3, r5
 8019388:	f7e7 f936 	bl	80005f8 <__aeabi_dmul>
 801938c:	a338      	add	r3, pc, #224	; (adr r3, 8019470 <__kernel_cos+0x158>)
 801938e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019392:	f7e6 ff7b 	bl	800028c <__adddf3>
 8019396:	4622      	mov	r2, r4
 8019398:	462b      	mov	r3, r5
 801939a:	f7e7 f92d 	bl	80005f8 <__aeabi_dmul>
 801939e:	a336      	add	r3, pc, #216	; (adr r3, 8019478 <__kernel_cos+0x160>)
 80193a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193a4:	f7e6 ff70 	bl	8000288 <__aeabi_dsub>
 80193a8:	4622      	mov	r2, r4
 80193aa:	462b      	mov	r3, r5
 80193ac:	f7e7 f924 	bl	80005f8 <__aeabi_dmul>
 80193b0:	a333      	add	r3, pc, #204	; (adr r3, 8019480 <__kernel_cos+0x168>)
 80193b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193b6:	f7e6 ff69 	bl	800028c <__adddf3>
 80193ba:	4622      	mov	r2, r4
 80193bc:	462b      	mov	r3, r5
 80193be:	f7e7 f91b 	bl	80005f8 <__aeabi_dmul>
 80193c2:	4622      	mov	r2, r4
 80193c4:	462b      	mov	r3, r5
 80193c6:	f7e7 f917 	bl	80005f8 <__aeabi_dmul>
 80193ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80193ce:	4604      	mov	r4, r0
 80193d0:	460d      	mov	r5, r1
 80193d2:	4630      	mov	r0, r6
 80193d4:	4639      	mov	r1, r7
 80193d6:	f7e7 f90f 	bl	80005f8 <__aeabi_dmul>
 80193da:	460b      	mov	r3, r1
 80193dc:	4602      	mov	r2, r0
 80193de:	4629      	mov	r1, r5
 80193e0:	4620      	mov	r0, r4
 80193e2:	f7e6 ff51 	bl	8000288 <__aeabi_dsub>
 80193e6:	4b2b      	ldr	r3, [pc, #172]	; (8019494 <__kernel_cos+0x17c>)
 80193e8:	4598      	cmp	r8, r3
 80193ea:	4606      	mov	r6, r0
 80193ec:	460f      	mov	r7, r1
 80193ee:	dc10      	bgt.n	8019412 <__kernel_cos+0xfa>
 80193f0:	4602      	mov	r2, r0
 80193f2:	460b      	mov	r3, r1
 80193f4:	4650      	mov	r0, sl
 80193f6:	4659      	mov	r1, fp
 80193f8:	f7e6 ff46 	bl	8000288 <__aeabi_dsub>
 80193fc:	460b      	mov	r3, r1
 80193fe:	4926      	ldr	r1, [pc, #152]	; (8019498 <__kernel_cos+0x180>)
 8019400:	4602      	mov	r2, r0
 8019402:	2000      	movs	r0, #0
 8019404:	f7e6 ff40 	bl	8000288 <__aeabi_dsub>
 8019408:	ec41 0b10 	vmov	d0, r0, r1
 801940c:	b003      	add	sp, #12
 801940e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019412:	4b22      	ldr	r3, [pc, #136]	; (801949c <__kernel_cos+0x184>)
 8019414:	4920      	ldr	r1, [pc, #128]	; (8019498 <__kernel_cos+0x180>)
 8019416:	4598      	cmp	r8, r3
 8019418:	bfcc      	ite	gt
 801941a:	4d21      	ldrgt	r5, [pc, #132]	; (80194a0 <__kernel_cos+0x188>)
 801941c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8019420:	2400      	movs	r4, #0
 8019422:	4622      	mov	r2, r4
 8019424:	462b      	mov	r3, r5
 8019426:	2000      	movs	r0, #0
 8019428:	f7e6 ff2e 	bl	8000288 <__aeabi_dsub>
 801942c:	4622      	mov	r2, r4
 801942e:	4680      	mov	r8, r0
 8019430:	4689      	mov	r9, r1
 8019432:	462b      	mov	r3, r5
 8019434:	4650      	mov	r0, sl
 8019436:	4659      	mov	r1, fp
 8019438:	f7e6 ff26 	bl	8000288 <__aeabi_dsub>
 801943c:	4632      	mov	r2, r6
 801943e:	463b      	mov	r3, r7
 8019440:	f7e6 ff22 	bl	8000288 <__aeabi_dsub>
 8019444:	4602      	mov	r2, r0
 8019446:	460b      	mov	r3, r1
 8019448:	4640      	mov	r0, r8
 801944a:	4649      	mov	r1, r9
 801944c:	e7da      	b.n	8019404 <__kernel_cos+0xec>
 801944e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8019488 <__kernel_cos+0x170>
 8019452:	e7db      	b.n	801940c <__kernel_cos+0xf4>
 8019454:	f3af 8000 	nop.w
 8019458:	be8838d4 	.word	0xbe8838d4
 801945c:	bda8fae9 	.word	0xbda8fae9
 8019460:	bdb4b1c4 	.word	0xbdb4b1c4
 8019464:	3e21ee9e 	.word	0x3e21ee9e
 8019468:	809c52ad 	.word	0x809c52ad
 801946c:	3e927e4f 	.word	0x3e927e4f
 8019470:	19cb1590 	.word	0x19cb1590
 8019474:	3efa01a0 	.word	0x3efa01a0
 8019478:	16c15177 	.word	0x16c15177
 801947c:	3f56c16c 	.word	0x3f56c16c
 8019480:	5555554c 	.word	0x5555554c
 8019484:	3fa55555 	.word	0x3fa55555
 8019488:	00000000 	.word	0x00000000
 801948c:	3ff00000 	.word	0x3ff00000
 8019490:	3fe00000 	.word	0x3fe00000
 8019494:	3fd33332 	.word	0x3fd33332
 8019498:	3ff00000 	.word	0x3ff00000
 801949c:	3fe90000 	.word	0x3fe90000
 80194a0:	3fd20000 	.word	0x3fd20000
 80194a4:	00000000 	.word	0x00000000

080194a8 <__kernel_sin>:
 80194a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194ac:	ed2d 8b04 	vpush	{d8-d9}
 80194b0:	eeb0 8a41 	vmov.f32	s16, s2
 80194b4:	eef0 8a61 	vmov.f32	s17, s3
 80194b8:	ec55 4b10 	vmov	r4, r5, d0
 80194bc:	b083      	sub	sp, #12
 80194be:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80194c2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80194c6:	9001      	str	r0, [sp, #4]
 80194c8:	da06      	bge.n	80194d8 <__kernel_sin+0x30>
 80194ca:	ee10 0a10 	vmov	r0, s0
 80194ce:	4629      	mov	r1, r5
 80194d0:	f7e7 fb42 	bl	8000b58 <__aeabi_d2iz>
 80194d4:	2800      	cmp	r0, #0
 80194d6:	d051      	beq.n	801957c <__kernel_sin+0xd4>
 80194d8:	4622      	mov	r2, r4
 80194da:	462b      	mov	r3, r5
 80194dc:	4620      	mov	r0, r4
 80194de:	4629      	mov	r1, r5
 80194e0:	f7e7 f88a 	bl	80005f8 <__aeabi_dmul>
 80194e4:	4682      	mov	sl, r0
 80194e6:	468b      	mov	fp, r1
 80194e8:	4602      	mov	r2, r0
 80194ea:	460b      	mov	r3, r1
 80194ec:	4620      	mov	r0, r4
 80194ee:	4629      	mov	r1, r5
 80194f0:	f7e7 f882 	bl	80005f8 <__aeabi_dmul>
 80194f4:	a341      	add	r3, pc, #260	; (adr r3, 80195fc <__kernel_sin+0x154>)
 80194f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194fa:	4680      	mov	r8, r0
 80194fc:	4689      	mov	r9, r1
 80194fe:	4650      	mov	r0, sl
 8019500:	4659      	mov	r1, fp
 8019502:	f7e7 f879 	bl	80005f8 <__aeabi_dmul>
 8019506:	a33f      	add	r3, pc, #252	; (adr r3, 8019604 <__kernel_sin+0x15c>)
 8019508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801950c:	f7e6 febc 	bl	8000288 <__aeabi_dsub>
 8019510:	4652      	mov	r2, sl
 8019512:	465b      	mov	r3, fp
 8019514:	f7e7 f870 	bl	80005f8 <__aeabi_dmul>
 8019518:	a33c      	add	r3, pc, #240	; (adr r3, 801960c <__kernel_sin+0x164>)
 801951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801951e:	f7e6 feb5 	bl	800028c <__adddf3>
 8019522:	4652      	mov	r2, sl
 8019524:	465b      	mov	r3, fp
 8019526:	f7e7 f867 	bl	80005f8 <__aeabi_dmul>
 801952a:	a33a      	add	r3, pc, #232	; (adr r3, 8019614 <__kernel_sin+0x16c>)
 801952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019530:	f7e6 feaa 	bl	8000288 <__aeabi_dsub>
 8019534:	4652      	mov	r2, sl
 8019536:	465b      	mov	r3, fp
 8019538:	f7e7 f85e 	bl	80005f8 <__aeabi_dmul>
 801953c:	a337      	add	r3, pc, #220	; (adr r3, 801961c <__kernel_sin+0x174>)
 801953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019542:	f7e6 fea3 	bl	800028c <__adddf3>
 8019546:	9b01      	ldr	r3, [sp, #4]
 8019548:	4606      	mov	r6, r0
 801954a:	460f      	mov	r7, r1
 801954c:	b9eb      	cbnz	r3, 801958a <__kernel_sin+0xe2>
 801954e:	4602      	mov	r2, r0
 8019550:	460b      	mov	r3, r1
 8019552:	4650      	mov	r0, sl
 8019554:	4659      	mov	r1, fp
 8019556:	f7e7 f84f 	bl	80005f8 <__aeabi_dmul>
 801955a:	a325      	add	r3, pc, #148	; (adr r3, 80195f0 <__kernel_sin+0x148>)
 801955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019560:	f7e6 fe92 	bl	8000288 <__aeabi_dsub>
 8019564:	4642      	mov	r2, r8
 8019566:	464b      	mov	r3, r9
 8019568:	f7e7 f846 	bl	80005f8 <__aeabi_dmul>
 801956c:	4602      	mov	r2, r0
 801956e:	460b      	mov	r3, r1
 8019570:	4620      	mov	r0, r4
 8019572:	4629      	mov	r1, r5
 8019574:	f7e6 fe8a 	bl	800028c <__adddf3>
 8019578:	4604      	mov	r4, r0
 801957a:	460d      	mov	r5, r1
 801957c:	ec45 4b10 	vmov	d0, r4, r5
 8019580:	b003      	add	sp, #12
 8019582:	ecbd 8b04 	vpop	{d8-d9}
 8019586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801958a:	4b1b      	ldr	r3, [pc, #108]	; (80195f8 <__kernel_sin+0x150>)
 801958c:	ec51 0b18 	vmov	r0, r1, d8
 8019590:	2200      	movs	r2, #0
 8019592:	f7e7 f831 	bl	80005f8 <__aeabi_dmul>
 8019596:	4632      	mov	r2, r6
 8019598:	ec41 0b19 	vmov	d9, r0, r1
 801959c:	463b      	mov	r3, r7
 801959e:	4640      	mov	r0, r8
 80195a0:	4649      	mov	r1, r9
 80195a2:	f7e7 f829 	bl	80005f8 <__aeabi_dmul>
 80195a6:	4602      	mov	r2, r0
 80195a8:	460b      	mov	r3, r1
 80195aa:	ec51 0b19 	vmov	r0, r1, d9
 80195ae:	f7e6 fe6b 	bl	8000288 <__aeabi_dsub>
 80195b2:	4652      	mov	r2, sl
 80195b4:	465b      	mov	r3, fp
 80195b6:	f7e7 f81f 	bl	80005f8 <__aeabi_dmul>
 80195ba:	ec53 2b18 	vmov	r2, r3, d8
 80195be:	f7e6 fe63 	bl	8000288 <__aeabi_dsub>
 80195c2:	a30b      	add	r3, pc, #44	; (adr r3, 80195f0 <__kernel_sin+0x148>)
 80195c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195c8:	4606      	mov	r6, r0
 80195ca:	460f      	mov	r7, r1
 80195cc:	4640      	mov	r0, r8
 80195ce:	4649      	mov	r1, r9
 80195d0:	f7e7 f812 	bl	80005f8 <__aeabi_dmul>
 80195d4:	4602      	mov	r2, r0
 80195d6:	460b      	mov	r3, r1
 80195d8:	4630      	mov	r0, r6
 80195da:	4639      	mov	r1, r7
 80195dc:	f7e6 fe56 	bl	800028c <__adddf3>
 80195e0:	4602      	mov	r2, r0
 80195e2:	460b      	mov	r3, r1
 80195e4:	4620      	mov	r0, r4
 80195e6:	4629      	mov	r1, r5
 80195e8:	f7e6 fe4e 	bl	8000288 <__aeabi_dsub>
 80195ec:	e7c4      	b.n	8019578 <__kernel_sin+0xd0>
 80195ee:	bf00      	nop
 80195f0:	55555549 	.word	0x55555549
 80195f4:	3fc55555 	.word	0x3fc55555
 80195f8:	3fe00000 	.word	0x3fe00000
 80195fc:	5acfd57c 	.word	0x5acfd57c
 8019600:	3de5d93a 	.word	0x3de5d93a
 8019604:	8a2b9ceb 	.word	0x8a2b9ceb
 8019608:	3e5ae5e6 	.word	0x3e5ae5e6
 801960c:	57b1fe7d 	.word	0x57b1fe7d
 8019610:	3ec71de3 	.word	0x3ec71de3
 8019614:	19c161d5 	.word	0x19c161d5
 8019618:	3f2a01a0 	.word	0x3f2a01a0
 801961c:	1110f8a6 	.word	0x1110f8a6
 8019620:	3f811111 	.word	0x3f811111
 8019624:	00000000 	.word	0x00000000

08019628 <__ieee754_rem_pio2>:
 8019628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801962c:	ed2d 8b02 	vpush	{d8}
 8019630:	ec55 4b10 	vmov	r4, r5, d0
 8019634:	4bca      	ldr	r3, [pc, #808]	; (8019960 <__ieee754_rem_pio2+0x338>)
 8019636:	b08b      	sub	sp, #44	; 0x2c
 8019638:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801963c:	4598      	cmp	r8, r3
 801963e:	4682      	mov	sl, r0
 8019640:	9502      	str	r5, [sp, #8]
 8019642:	dc08      	bgt.n	8019656 <__ieee754_rem_pio2+0x2e>
 8019644:	2200      	movs	r2, #0
 8019646:	2300      	movs	r3, #0
 8019648:	ed80 0b00 	vstr	d0, [r0]
 801964c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019650:	f04f 0b00 	mov.w	fp, #0
 8019654:	e028      	b.n	80196a8 <__ieee754_rem_pio2+0x80>
 8019656:	4bc3      	ldr	r3, [pc, #780]	; (8019964 <__ieee754_rem_pio2+0x33c>)
 8019658:	4598      	cmp	r8, r3
 801965a:	dc78      	bgt.n	801974e <__ieee754_rem_pio2+0x126>
 801965c:	9b02      	ldr	r3, [sp, #8]
 801965e:	4ec2      	ldr	r6, [pc, #776]	; (8019968 <__ieee754_rem_pio2+0x340>)
 8019660:	2b00      	cmp	r3, #0
 8019662:	ee10 0a10 	vmov	r0, s0
 8019666:	a3b0      	add	r3, pc, #704	; (adr r3, 8019928 <__ieee754_rem_pio2+0x300>)
 8019668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801966c:	4629      	mov	r1, r5
 801966e:	dd39      	ble.n	80196e4 <__ieee754_rem_pio2+0xbc>
 8019670:	f7e6 fe0a 	bl	8000288 <__aeabi_dsub>
 8019674:	45b0      	cmp	r8, r6
 8019676:	4604      	mov	r4, r0
 8019678:	460d      	mov	r5, r1
 801967a:	d01b      	beq.n	80196b4 <__ieee754_rem_pio2+0x8c>
 801967c:	a3ac      	add	r3, pc, #688	; (adr r3, 8019930 <__ieee754_rem_pio2+0x308>)
 801967e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019682:	f7e6 fe01 	bl	8000288 <__aeabi_dsub>
 8019686:	4602      	mov	r2, r0
 8019688:	460b      	mov	r3, r1
 801968a:	e9ca 2300 	strd	r2, r3, [sl]
 801968e:	4620      	mov	r0, r4
 8019690:	4629      	mov	r1, r5
 8019692:	f7e6 fdf9 	bl	8000288 <__aeabi_dsub>
 8019696:	a3a6      	add	r3, pc, #664	; (adr r3, 8019930 <__ieee754_rem_pio2+0x308>)
 8019698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801969c:	f7e6 fdf4 	bl	8000288 <__aeabi_dsub>
 80196a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80196a4:	f04f 0b01 	mov.w	fp, #1
 80196a8:	4658      	mov	r0, fp
 80196aa:	b00b      	add	sp, #44	; 0x2c
 80196ac:	ecbd 8b02 	vpop	{d8}
 80196b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196b4:	a3a0      	add	r3, pc, #640	; (adr r3, 8019938 <__ieee754_rem_pio2+0x310>)
 80196b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196ba:	f7e6 fde5 	bl	8000288 <__aeabi_dsub>
 80196be:	a3a0      	add	r3, pc, #640	; (adr r3, 8019940 <__ieee754_rem_pio2+0x318>)
 80196c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196c4:	4604      	mov	r4, r0
 80196c6:	460d      	mov	r5, r1
 80196c8:	f7e6 fdde 	bl	8000288 <__aeabi_dsub>
 80196cc:	4602      	mov	r2, r0
 80196ce:	460b      	mov	r3, r1
 80196d0:	e9ca 2300 	strd	r2, r3, [sl]
 80196d4:	4620      	mov	r0, r4
 80196d6:	4629      	mov	r1, r5
 80196d8:	f7e6 fdd6 	bl	8000288 <__aeabi_dsub>
 80196dc:	a398      	add	r3, pc, #608	; (adr r3, 8019940 <__ieee754_rem_pio2+0x318>)
 80196de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196e2:	e7db      	b.n	801969c <__ieee754_rem_pio2+0x74>
 80196e4:	f7e6 fdd2 	bl	800028c <__adddf3>
 80196e8:	45b0      	cmp	r8, r6
 80196ea:	4604      	mov	r4, r0
 80196ec:	460d      	mov	r5, r1
 80196ee:	d016      	beq.n	801971e <__ieee754_rem_pio2+0xf6>
 80196f0:	a38f      	add	r3, pc, #572	; (adr r3, 8019930 <__ieee754_rem_pio2+0x308>)
 80196f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196f6:	f7e6 fdc9 	bl	800028c <__adddf3>
 80196fa:	4602      	mov	r2, r0
 80196fc:	460b      	mov	r3, r1
 80196fe:	e9ca 2300 	strd	r2, r3, [sl]
 8019702:	4620      	mov	r0, r4
 8019704:	4629      	mov	r1, r5
 8019706:	f7e6 fdbf 	bl	8000288 <__aeabi_dsub>
 801970a:	a389      	add	r3, pc, #548	; (adr r3, 8019930 <__ieee754_rem_pio2+0x308>)
 801970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019710:	f7e6 fdbc 	bl	800028c <__adddf3>
 8019714:	f04f 3bff 	mov.w	fp, #4294967295
 8019718:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801971c:	e7c4      	b.n	80196a8 <__ieee754_rem_pio2+0x80>
 801971e:	a386      	add	r3, pc, #536	; (adr r3, 8019938 <__ieee754_rem_pio2+0x310>)
 8019720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019724:	f7e6 fdb2 	bl	800028c <__adddf3>
 8019728:	a385      	add	r3, pc, #532	; (adr r3, 8019940 <__ieee754_rem_pio2+0x318>)
 801972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801972e:	4604      	mov	r4, r0
 8019730:	460d      	mov	r5, r1
 8019732:	f7e6 fdab 	bl	800028c <__adddf3>
 8019736:	4602      	mov	r2, r0
 8019738:	460b      	mov	r3, r1
 801973a:	e9ca 2300 	strd	r2, r3, [sl]
 801973e:	4620      	mov	r0, r4
 8019740:	4629      	mov	r1, r5
 8019742:	f7e6 fda1 	bl	8000288 <__aeabi_dsub>
 8019746:	a37e      	add	r3, pc, #504	; (adr r3, 8019940 <__ieee754_rem_pio2+0x318>)
 8019748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801974c:	e7e0      	b.n	8019710 <__ieee754_rem_pio2+0xe8>
 801974e:	4b87      	ldr	r3, [pc, #540]	; (801996c <__ieee754_rem_pio2+0x344>)
 8019750:	4598      	cmp	r8, r3
 8019752:	f300 80d8 	bgt.w	8019906 <__ieee754_rem_pio2+0x2de>
 8019756:	f000 f9a1 	bl	8019a9c <fabs>
 801975a:	ec55 4b10 	vmov	r4, r5, d0
 801975e:	ee10 0a10 	vmov	r0, s0
 8019762:	a379      	add	r3, pc, #484	; (adr r3, 8019948 <__ieee754_rem_pio2+0x320>)
 8019764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019768:	4629      	mov	r1, r5
 801976a:	f7e6 ff45 	bl	80005f8 <__aeabi_dmul>
 801976e:	4b80      	ldr	r3, [pc, #512]	; (8019970 <__ieee754_rem_pio2+0x348>)
 8019770:	2200      	movs	r2, #0
 8019772:	f7e6 fd8b 	bl	800028c <__adddf3>
 8019776:	f7e7 f9ef 	bl	8000b58 <__aeabi_d2iz>
 801977a:	4683      	mov	fp, r0
 801977c:	f7e6 fed2 	bl	8000524 <__aeabi_i2d>
 8019780:	4602      	mov	r2, r0
 8019782:	460b      	mov	r3, r1
 8019784:	ec43 2b18 	vmov	d8, r2, r3
 8019788:	a367      	add	r3, pc, #412	; (adr r3, 8019928 <__ieee754_rem_pio2+0x300>)
 801978a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801978e:	f7e6 ff33 	bl	80005f8 <__aeabi_dmul>
 8019792:	4602      	mov	r2, r0
 8019794:	460b      	mov	r3, r1
 8019796:	4620      	mov	r0, r4
 8019798:	4629      	mov	r1, r5
 801979a:	f7e6 fd75 	bl	8000288 <__aeabi_dsub>
 801979e:	a364      	add	r3, pc, #400	; (adr r3, 8019930 <__ieee754_rem_pio2+0x308>)
 80197a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197a4:	4606      	mov	r6, r0
 80197a6:	460f      	mov	r7, r1
 80197a8:	ec51 0b18 	vmov	r0, r1, d8
 80197ac:	f7e6 ff24 	bl	80005f8 <__aeabi_dmul>
 80197b0:	f1bb 0f1f 	cmp.w	fp, #31
 80197b4:	4604      	mov	r4, r0
 80197b6:	460d      	mov	r5, r1
 80197b8:	dc0d      	bgt.n	80197d6 <__ieee754_rem_pio2+0x1ae>
 80197ba:	4b6e      	ldr	r3, [pc, #440]	; (8019974 <__ieee754_rem_pio2+0x34c>)
 80197bc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80197c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80197c4:	4543      	cmp	r3, r8
 80197c6:	d006      	beq.n	80197d6 <__ieee754_rem_pio2+0x1ae>
 80197c8:	4622      	mov	r2, r4
 80197ca:	462b      	mov	r3, r5
 80197cc:	4630      	mov	r0, r6
 80197ce:	4639      	mov	r1, r7
 80197d0:	f7e6 fd5a 	bl	8000288 <__aeabi_dsub>
 80197d4:	e00e      	b.n	80197f4 <__ieee754_rem_pio2+0x1cc>
 80197d6:	462b      	mov	r3, r5
 80197d8:	4622      	mov	r2, r4
 80197da:	4630      	mov	r0, r6
 80197dc:	4639      	mov	r1, r7
 80197de:	f7e6 fd53 	bl	8000288 <__aeabi_dsub>
 80197e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80197e6:	9303      	str	r3, [sp, #12]
 80197e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80197ec:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80197f0:	2b10      	cmp	r3, #16
 80197f2:	dc02      	bgt.n	80197fa <__ieee754_rem_pio2+0x1d2>
 80197f4:	e9ca 0100 	strd	r0, r1, [sl]
 80197f8:	e039      	b.n	801986e <__ieee754_rem_pio2+0x246>
 80197fa:	a34f      	add	r3, pc, #316	; (adr r3, 8019938 <__ieee754_rem_pio2+0x310>)
 80197fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019800:	ec51 0b18 	vmov	r0, r1, d8
 8019804:	f7e6 fef8 	bl	80005f8 <__aeabi_dmul>
 8019808:	4604      	mov	r4, r0
 801980a:	460d      	mov	r5, r1
 801980c:	4602      	mov	r2, r0
 801980e:	460b      	mov	r3, r1
 8019810:	4630      	mov	r0, r6
 8019812:	4639      	mov	r1, r7
 8019814:	f7e6 fd38 	bl	8000288 <__aeabi_dsub>
 8019818:	4602      	mov	r2, r0
 801981a:	460b      	mov	r3, r1
 801981c:	4680      	mov	r8, r0
 801981e:	4689      	mov	r9, r1
 8019820:	4630      	mov	r0, r6
 8019822:	4639      	mov	r1, r7
 8019824:	f7e6 fd30 	bl	8000288 <__aeabi_dsub>
 8019828:	4622      	mov	r2, r4
 801982a:	462b      	mov	r3, r5
 801982c:	f7e6 fd2c 	bl	8000288 <__aeabi_dsub>
 8019830:	a343      	add	r3, pc, #268	; (adr r3, 8019940 <__ieee754_rem_pio2+0x318>)
 8019832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019836:	4604      	mov	r4, r0
 8019838:	460d      	mov	r5, r1
 801983a:	ec51 0b18 	vmov	r0, r1, d8
 801983e:	f7e6 fedb 	bl	80005f8 <__aeabi_dmul>
 8019842:	4622      	mov	r2, r4
 8019844:	462b      	mov	r3, r5
 8019846:	f7e6 fd1f 	bl	8000288 <__aeabi_dsub>
 801984a:	4602      	mov	r2, r0
 801984c:	460b      	mov	r3, r1
 801984e:	4604      	mov	r4, r0
 8019850:	460d      	mov	r5, r1
 8019852:	4640      	mov	r0, r8
 8019854:	4649      	mov	r1, r9
 8019856:	f7e6 fd17 	bl	8000288 <__aeabi_dsub>
 801985a:	9a03      	ldr	r2, [sp, #12]
 801985c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019860:	1ad3      	subs	r3, r2, r3
 8019862:	2b31      	cmp	r3, #49	; 0x31
 8019864:	dc24      	bgt.n	80198b0 <__ieee754_rem_pio2+0x288>
 8019866:	e9ca 0100 	strd	r0, r1, [sl]
 801986a:	4646      	mov	r6, r8
 801986c:	464f      	mov	r7, r9
 801986e:	e9da 8900 	ldrd	r8, r9, [sl]
 8019872:	4630      	mov	r0, r6
 8019874:	4642      	mov	r2, r8
 8019876:	464b      	mov	r3, r9
 8019878:	4639      	mov	r1, r7
 801987a:	f7e6 fd05 	bl	8000288 <__aeabi_dsub>
 801987e:	462b      	mov	r3, r5
 8019880:	4622      	mov	r2, r4
 8019882:	f7e6 fd01 	bl	8000288 <__aeabi_dsub>
 8019886:	9b02      	ldr	r3, [sp, #8]
 8019888:	2b00      	cmp	r3, #0
 801988a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801988e:	f6bf af0b 	bge.w	80196a8 <__ieee754_rem_pio2+0x80>
 8019892:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019896:	f8ca 3004 	str.w	r3, [sl, #4]
 801989a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801989e:	f8ca 8000 	str.w	r8, [sl]
 80198a2:	f8ca 0008 	str.w	r0, [sl, #8]
 80198a6:	f8ca 300c 	str.w	r3, [sl, #12]
 80198aa:	f1cb 0b00 	rsb	fp, fp, #0
 80198ae:	e6fb      	b.n	80196a8 <__ieee754_rem_pio2+0x80>
 80198b0:	a327      	add	r3, pc, #156	; (adr r3, 8019950 <__ieee754_rem_pio2+0x328>)
 80198b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198b6:	ec51 0b18 	vmov	r0, r1, d8
 80198ba:	f7e6 fe9d 	bl	80005f8 <__aeabi_dmul>
 80198be:	4604      	mov	r4, r0
 80198c0:	460d      	mov	r5, r1
 80198c2:	4602      	mov	r2, r0
 80198c4:	460b      	mov	r3, r1
 80198c6:	4640      	mov	r0, r8
 80198c8:	4649      	mov	r1, r9
 80198ca:	f7e6 fcdd 	bl	8000288 <__aeabi_dsub>
 80198ce:	4602      	mov	r2, r0
 80198d0:	460b      	mov	r3, r1
 80198d2:	4606      	mov	r6, r0
 80198d4:	460f      	mov	r7, r1
 80198d6:	4640      	mov	r0, r8
 80198d8:	4649      	mov	r1, r9
 80198da:	f7e6 fcd5 	bl	8000288 <__aeabi_dsub>
 80198de:	4622      	mov	r2, r4
 80198e0:	462b      	mov	r3, r5
 80198e2:	f7e6 fcd1 	bl	8000288 <__aeabi_dsub>
 80198e6:	a31c      	add	r3, pc, #112	; (adr r3, 8019958 <__ieee754_rem_pio2+0x330>)
 80198e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198ec:	4604      	mov	r4, r0
 80198ee:	460d      	mov	r5, r1
 80198f0:	ec51 0b18 	vmov	r0, r1, d8
 80198f4:	f7e6 fe80 	bl	80005f8 <__aeabi_dmul>
 80198f8:	4622      	mov	r2, r4
 80198fa:	462b      	mov	r3, r5
 80198fc:	f7e6 fcc4 	bl	8000288 <__aeabi_dsub>
 8019900:	4604      	mov	r4, r0
 8019902:	460d      	mov	r5, r1
 8019904:	e760      	b.n	80197c8 <__ieee754_rem_pio2+0x1a0>
 8019906:	4b1c      	ldr	r3, [pc, #112]	; (8019978 <__ieee754_rem_pio2+0x350>)
 8019908:	4598      	cmp	r8, r3
 801990a:	dd37      	ble.n	801997c <__ieee754_rem_pio2+0x354>
 801990c:	ee10 2a10 	vmov	r2, s0
 8019910:	462b      	mov	r3, r5
 8019912:	4620      	mov	r0, r4
 8019914:	4629      	mov	r1, r5
 8019916:	f7e6 fcb7 	bl	8000288 <__aeabi_dsub>
 801991a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801991e:	e9ca 0100 	strd	r0, r1, [sl]
 8019922:	e695      	b.n	8019650 <__ieee754_rem_pio2+0x28>
 8019924:	f3af 8000 	nop.w
 8019928:	54400000 	.word	0x54400000
 801992c:	3ff921fb 	.word	0x3ff921fb
 8019930:	1a626331 	.word	0x1a626331
 8019934:	3dd0b461 	.word	0x3dd0b461
 8019938:	1a600000 	.word	0x1a600000
 801993c:	3dd0b461 	.word	0x3dd0b461
 8019940:	2e037073 	.word	0x2e037073
 8019944:	3ba3198a 	.word	0x3ba3198a
 8019948:	6dc9c883 	.word	0x6dc9c883
 801994c:	3fe45f30 	.word	0x3fe45f30
 8019950:	2e000000 	.word	0x2e000000
 8019954:	3ba3198a 	.word	0x3ba3198a
 8019958:	252049c1 	.word	0x252049c1
 801995c:	397b839a 	.word	0x397b839a
 8019960:	3fe921fb 	.word	0x3fe921fb
 8019964:	4002d97b 	.word	0x4002d97b
 8019968:	3ff921fb 	.word	0x3ff921fb
 801996c:	413921fb 	.word	0x413921fb
 8019970:	3fe00000 	.word	0x3fe00000
 8019974:	0801ce20 	.word	0x0801ce20
 8019978:	7fefffff 	.word	0x7fefffff
 801997c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8019980:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8019984:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8019988:	4620      	mov	r0, r4
 801998a:	460d      	mov	r5, r1
 801998c:	f7e7 f8e4 	bl	8000b58 <__aeabi_d2iz>
 8019990:	f7e6 fdc8 	bl	8000524 <__aeabi_i2d>
 8019994:	4602      	mov	r2, r0
 8019996:	460b      	mov	r3, r1
 8019998:	4620      	mov	r0, r4
 801999a:	4629      	mov	r1, r5
 801999c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80199a0:	f7e6 fc72 	bl	8000288 <__aeabi_dsub>
 80199a4:	4b21      	ldr	r3, [pc, #132]	; (8019a2c <__ieee754_rem_pio2+0x404>)
 80199a6:	2200      	movs	r2, #0
 80199a8:	f7e6 fe26 	bl	80005f8 <__aeabi_dmul>
 80199ac:	460d      	mov	r5, r1
 80199ae:	4604      	mov	r4, r0
 80199b0:	f7e7 f8d2 	bl	8000b58 <__aeabi_d2iz>
 80199b4:	f7e6 fdb6 	bl	8000524 <__aeabi_i2d>
 80199b8:	4602      	mov	r2, r0
 80199ba:	460b      	mov	r3, r1
 80199bc:	4620      	mov	r0, r4
 80199be:	4629      	mov	r1, r5
 80199c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80199c4:	f7e6 fc60 	bl	8000288 <__aeabi_dsub>
 80199c8:	4b18      	ldr	r3, [pc, #96]	; (8019a2c <__ieee754_rem_pio2+0x404>)
 80199ca:	2200      	movs	r2, #0
 80199cc:	f7e6 fe14 	bl	80005f8 <__aeabi_dmul>
 80199d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80199d4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80199d8:	2703      	movs	r7, #3
 80199da:	2400      	movs	r4, #0
 80199dc:	2500      	movs	r5, #0
 80199de:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80199e2:	4622      	mov	r2, r4
 80199e4:	462b      	mov	r3, r5
 80199e6:	46b9      	mov	r9, r7
 80199e8:	3f01      	subs	r7, #1
 80199ea:	f7e7 f86d 	bl	8000ac8 <__aeabi_dcmpeq>
 80199ee:	2800      	cmp	r0, #0
 80199f0:	d1f5      	bne.n	80199de <__ieee754_rem_pio2+0x3b6>
 80199f2:	4b0f      	ldr	r3, [pc, #60]	; (8019a30 <__ieee754_rem_pio2+0x408>)
 80199f4:	9301      	str	r3, [sp, #4]
 80199f6:	2302      	movs	r3, #2
 80199f8:	9300      	str	r3, [sp, #0]
 80199fa:	4632      	mov	r2, r6
 80199fc:	464b      	mov	r3, r9
 80199fe:	4651      	mov	r1, sl
 8019a00:	a804      	add	r0, sp, #16
 8019a02:	f000 faa1 	bl	8019f48 <__kernel_rem_pio2>
 8019a06:	9b02      	ldr	r3, [sp, #8]
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	4683      	mov	fp, r0
 8019a0c:	f6bf ae4c 	bge.w	80196a8 <__ieee754_rem_pio2+0x80>
 8019a10:	e9da 2100 	ldrd	r2, r1, [sl]
 8019a14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019a18:	e9ca 2300 	strd	r2, r3, [sl]
 8019a1c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8019a20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019a24:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8019a28:	e73f      	b.n	80198aa <__ieee754_rem_pio2+0x282>
 8019a2a:	bf00      	nop
 8019a2c:	41700000 	.word	0x41700000
 8019a30:	0801cea0 	.word	0x0801cea0

08019a34 <acos>:
 8019a34:	b538      	push	{r3, r4, r5, lr}
 8019a36:	ed2d 8b02 	vpush	{d8}
 8019a3a:	ec55 4b10 	vmov	r4, r5, d0
 8019a3e:	f000 fdd3 	bl	801a5e8 <__ieee754_acos>
 8019a42:	4622      	mov	r2, r4
 8019a44:	462b      	mov	r3, r5
 8019a46:	4620      	mov	r0, r4
 8019a48:	4629      	mov	r1, r5
 8019a4a:	eeb0 8a40 	vmov.f32	s16, s0
 8019a4e:	eef0 8a60 	vmov.f32	s17, s1
 8019a52:	f7e7 f86b 	bl	8000b2c <__aeabi_dcmpun>
 8019a56:	b9a8      	cbnz	r0, 8019a84 <acos+0x50>
 8019a58:	ec45 4b10 	vmov	d0, r4, r5
 8019a5c:	f000 f81e 	bl	8019a9c <fabs>
 8019a60:	4b0c      	ldr	r3, [pc, #48]	; (8019a94 <acos+0x60>)
 8019a62:	ec51 0b10 	vmov	r0, r1, d0
 8019a66:	2200      	movs	r2, #0
 8019a68:	f7e7 f856 	bl	8000b18 <__aeabi_dcmpgt>
 8019a6c:	b150      	cbz	r0, 8019a84 <acos+0x50>
 8019a6e:	f7fc fe07 	bl	8016680 <__errno>
 8019a72:	ecbd 8b02 	vpop	{d8}
 8019a76:	2321      	movs	r3, #33	; 0x21
 8019a78:	6003      	str	r3, [r0, #0]
 8019a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a7e:	4806      	ldr	r0, [pc, #24]	; (8019a98 <acos+0x64>)
 8019a80:	f7fc be42 	b.w	8016708 <nan>
 8019a84:	eeb0 0a48 	vmov.f32	s0, s16
 8019a88:	eef0 0a68 	vmov.f32	s1, s17
 8019a8c:	ecbd 8b02 	vpop	{d8}
 8019a90:	bd38      	pop	{r3, r4, r5, pc}
 8019a92:	bf00      	nop
 8019a94:	3ff00000 	.word	0x3ff00000
 8019a98:	0801cbde 	.word	0x0801cbde

08019a9c <fabs>:
 8019a9c:	ec51 0b10 	vmov	r0, r1, d0
 8019aa0:	ee10 2a10 	vmov	r2, s0
 8019aa4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019aa8:	ec43 2b10 	vmov	d0, r2, r3
 8019aac:	4770      	bx	lr
	...

08019ab0 <__ieee754_expf>:
 8019ab0:	ee10 2a10 	vmov	r2, s0
 8019ab4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8019ab8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019abc:	d902      	bls.n	8019ac4 <__ieee754_expf+0x14>
 8019abe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019ac2:	4770      	bx	lr
 8019ac4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8019ac8:	d106      	bne.n	8019ad8 <__ieee754_expf+0x28>
 8019aca:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8019c04 <__ieee754_expf+0x154>
 8019ace:	2900      	cmp	r1, #0
 8019ad0:	bf18      	it	ne
 8019ad2:	eeb0 0a67 	vmovne.f32	s0, s15
 8019ad6:	4770      	bx	lr
 8019ad8:	484b      	ldr	r0, [pc, #300]	; (8019c08 <__ieee754_expf+0x158>)
 8019ada:	4282      	cmp	r2, r0
 8019adc:	dd02      	ble.n	8019ae4 <__ieee754_expf+0x34>
 8019ade:	2000      	movs	r0, #0
 8019ae0:	f000 b950 	b.w	8019d84 <__math_oflowf>
 8019ae4:	2a00      	cmp	r2, #0
 8019ae6:	da05      	bge.n	8019af4 <__ieee754_expf+0x44>
 8019ae8:	4a48      	ldr	r2, [pc, #288]	; (8019c0c <__ieee754_expf+0x15c>)
 8019aea:	4293      	cmp	r3, r2
 8019aec:	d902      	bls.n	8019af4 <__ieee754_expf+0x44>
 8019aee:	2000      	movs	r0, #0
 8019af0:	f000 b942 	b.w	8019d78 <__math_uflowf>
 8019af4:	4a46      	ldr	r2, [pc, #280]	; (8019c10 <__ieee754_expf+0x160>)
 8019af6:	4293      	cmp	r3, r2
 8019af8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8019afc:	d952      	bls.n	8019ba4 <__ieee754_expf+0xf4>
 8019afe:	4a45      	ldr	r2, [pc, #276]	; (8019c14 <__ieee754_expf+0x164>)
 8019b00:	4293      	cmp	r3, r2
 8019b02:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8019b06:	d834      	bhi.n	8019b72 <__ieee754_expf+0xc2>
 8019b08:	4b43      	ldr	r3, [pc, #268]	; (8019c18 <__ieee754_expf+0x168>)
 8019b0a:	4413      	add	r3, r2
 8019b0c:	ed93 7a00 	vldr	s14, [r3]
 8019b10:	4b42      	ldr	r3, [pc, #264]	; (8019c1c <__ieee754_expf+0x16c>)
 8019b12:	4413      	add	r3, r2
 8019b14:	ee30 7a47 	vsub.f32	s14, s0, s14
 8019b18:	f1c1 0201 	rsb	r2, r1, #1
 8019b1c:	edd3 7a00 	vldr	s15, [r3]
 8019b20:	1a52      	subs	r2, r2, r1
 8019b22:	ee37 0a67 	vsub.f32	s0, s14, s15
 8019b26:	ee20 6a00 	vmul.f32	s12, s0, s0
 8019b2a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8019c20 <__ieee754_expf+0x170>
 8019b2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8019c24 <__ieee754_expf+0x174>
 8019b32:	eee6 6a05 	vfma.f32	s13, s12, s10
 8019b36:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8019c28 <__ieee754_expf+0x178>
 8019b3a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8019b3e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8019c2c <__ieee754_expf+0x17c>
 8019b42:	eee5 6a06 	vfma.f32	s13, s10, s12
 8019b46:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8019c30 <__ieee754_expf+0x180>
 8019b4a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8019b4e:	eef0 6a40 	vmov.f32	s13, s0
 8019b52:	eee5 6a46 	vfms.f32	s13, s10, s12
 8019b56:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8019b5a:	ee20 5a26 	vmul.f32	s10, s0, s13
 8019b5e:	bb92      	cbnz	r2, 8019bc6 <__ieee754_expf+0x116>
 8019b60:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8019b64:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8019b68:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019b6c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8019b70:	4770      	bx	lr
 8019b72:	4b30      	ldr	r3, [pc, #192]	; (8019c34 <__ieee754_expf+0x184>)
 8019b74:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8019c38 <__ieee754_expf+0x188>
 8019b78:	eddf 6a30 	vldr	s13, [pc, #192]	; 8019c3c <__ieee754_expf+0x18c>
 8019b7c:	4413      	add	r3, r2
 8019b7e:	edd3 7a00 	vldr	s15, [r3]
 8019b82:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019b86:	eeb0 7a40 	vmov.f32	s14, s0
 8019b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b8e:	ee17 2a90 	vmov	r2, s15
 8019b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b96:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019b9a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8019c40 <__ieee754_expf+0x190>
 8019b9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019ba2:	e7be      	b.n	8019b22 <__ieee754_expf+0x72>
 8019ba4:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8019ba8:	d20b      	bcs.n	8019bc2 <__ieee754_expf+0x112>
 8019baa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8019c44 <__ieee754_expf+0x194>
 8019bae:	ee70 6a26 	vadd.f32	s13, s0, s13
 8019bb2:	eef4 6ae5 	vcmpe.f32	s13, s11
 8019bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bba:	dd02      	ble.n	8019bc2 <__ieee754_expf+0x112>
 8019bbc:	ee30 0a25 	vadd.f32	s0, s0, s11
 8019bc0:	4770      	bx	lr
 8019bc2:	2200      	movs	r2, #0
 8019bc4:	e7af      	b.n	8019b26 <__ieee754_expf+0x76>
 8019bc6:	ee36 6a66 	vsub.f32	s12, s12, s13
 8019bca:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8019bce:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8019bd2:	bfb8      	it	lt
 8019bd4:	3264      	addlt	r2, #100	; 0x64
 8019bd6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019bda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019bde:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8019be2:	ee17 3a90 	vmov	r3, s15
 8019be6:	bfab      	itete	ge
 8019be8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8019bec:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8019bf0:	ee00 3a10 	vmovge	s0, r3
 8019bf4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8019c48 <__ieee754_expf+0x198>
 8019bf8:	bfbc      	itt	lt
 8019bfa:	ee00 3a10 	vmovlt	s0, r3
 8019bfe:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8019c02:	4770      	bx	lr
 8019c04:	00000000 	.word	0x00000000
 8019c08:	42b17217 	.word	0x42b17217
 8019c0c:	42cff1b5 	.word	0x42cff1b5
 8019c10:	3eb17218 	.word	0x3eb17218
 8019c14:	3f851591 	.word	0x3f851591
 8019c18:	0801cfb0 	.word	0x0801cfb0
 8019c1c:	0801cfb8 	.word	0x0801cfb8
 8019c20:	3331bb4c 	.word	0x3331bb4c
 8019c24:	b5ddea0e 	.word	0xb5ddea0e
 8019c28:	388ab355 	.word	0x388ab355
 8019c2c:	bb360b61 	.word	0xbb360b61
 8019c30:	3e2aaaab 	.word	0x3e2aaaab
 8019c34:	0801cfa8 	.word	0x0801cfa8
 8019c38:	3fb8aa3b 	.word	0x3fb8aa3b
 8019c3c:	3f317180 	.word	0x3f317180
 8019c40:	3717f7d1 	.word	0x3717f7d1
 8019c44:	7149f2ca 	.word	0x7149f2ca
 8019c48:	0d800000 	.word	0x0d800000
 8019c4c:	00000000 	.word	0x00000000

08019c50 <scalbn>:
 8019c50:	b570      	push	{r4, r5, r6, lr}
 8019c52:	ec55 4b10 	vmov	r4, r5, d0
 8019c56:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8019c5a:	4606      	mov	r6, r0
 8019c5c:	462b      	mov	r3, r5
 8019c5e:	b999      	cbnz	r1, 8019c88 <scalbn+0x38>
 8019c60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019c64:	4323      	orrs	r3, r4
 8019c66:	d03f      	beq.n	8019ce8 <scalbn+0x98>
 8019c68:	4b35      	ldr	r3, [pc, #212]	; (8019d40 <scalbn+0xf0>)
 8019c6a:	4629      	mov	r1, r5
 8019c6c:	ee10 0a10 	vmov	r0, s0
 8019c70:	2200      	movs	r2, #0
 8019c72:	f7e6 fcc1 	bl	80005f8 <__aeabi_dmul>
 8019c76:	4b33      	ldr	r3, [pc, #204]	; (8019d44 <scalbn+0xf4>)
 8019c78:	429e      	cmp	r6, r3
 8019c7a:	4604      	mov	r4, r0
 8019c7c:	460d      	mov	r5, r1
 8019c7e:	da10      	bge.n	8019ca2 <scalbn+0x52>
 8019c80:	a327      	add	r3, pc, #156	; (adr r3, 8019d20 <scalbn+0xd0>)
 8019c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c86:	e01f      	b.n	8019cc8 <scalbn+0x78>
 8019c88:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8019c8c:	4291      	cmp	r1, r2
 8019c8e:	d10c      	bne.n	8019caa <scalbn+0x5a>
 8019c90:	ee10 2a10 	vmov	r2, s0
 8019c94:	4620      	mov	r0, r4
 8019c96:	4629      	mov	r1, r5
 8019c98:	f7e6 faf8 	bl	800028c <__adddf3>
 8019c9c:	4604      	mov	r4, r0
 8019c9e:	460d      	mov	r5, r1
 8019ca0:	e022      	b.n	8019ce8 <scalbn+0x98>
 8019ca2:	460b      	mov	r3, r1
 8019ca4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8019ca8:	3936      	subs	r1, #54	; 0x36
 8019caa:	f24c 3250 	movw	r2, #50000	; 0xc350
 8019cae:	4296      	cmp	r6, r2
 8019cb0:	dd0d      	ble.n	8019cce <scalbn+0x7e>
 8019cb2:	2d00      	cmp	r5, #0
 8019cb4:	a11c      	add	r1, pc, #112	; (adr r1, 8019d28 <scalbn+0xd8>)
 8019cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cba:	da02      	bge.n	8019cc2 <scalbn+0x72>
 8019cbc:	a11c      	add	r1, pc, #112	; (adr r1, 8019d30 <scalbn+0xe0>)
 8019cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cc2:	a319      	add	r3, pc, #100	; (adr r3, 8019d28 <scalbn+0xd8>)
 8019cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cc8:	f7e6 fc96 	bl	80005f8 <__aeabi_dmul>
 8019ccc:	e7e6      	b.n	8019c9c <scalbn+0x4c>
 8019cce:	1872      	adds	r2, r6, r1
 8019cd0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019cd4:	428a      	cmp	r2, r1
 8019cd6:	dcec      	bgt.n	8019cb2 <scalbn+0x62>
 8019cd8:	2a00      	cmp	r2, #0
 8019cda:	dd08      	ble.n	8019cee <scalbn+0x9e>
 8019cdc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019ce0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019ce4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019ce8:	ec45 4b10 	vmov	d0, r4, r5
 8019cec:	bd70      	pop	{r4, r5, r6, pc}
 8019cee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019cf2:	da08      	bge.n	8019d06 <scalbn+0xb6>
 8019cf4:	2d00      	cmp	r5, #0
 8019cf6:	a10a      	add	r1, pc, #40	; (adr r1, 8019d20 <scalbn+0xd0>)
 8019cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cfc:	dac0      	bge.n	8019c80 <scalbn+0x30>
 8019cfe:	a10e      	add	r1, pc, #56	; (adr r1, 8019d38 <scalbn+0xe8>)
 8019d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d04:	e7bc      	b.n	8019c80 <scalbn+0x30>
 8019d06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019d0a:	3236      	adds	r2, #54	; 0x36
 8019d0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019d10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8019d14:	4620      	mov	r0, r4
 8019d16:	4b0c      	ldr	r3, [pc, #48]	; (8019d48 <scalbn+0xf8>)
 8019d18:	2200      	movs	r2, #0
 8019d1a:	e7d5      	b.n	8019cc8 <scalbn+0x78>
 8019d1c:	f3af 8000 	nop.w
 8019d20:	c2f8f359 	.word	0xc2f8f359
 8019d24:	01a56e1f 	.word	0x01a56e1f
 8019d28:	8800759c 	.word	0x8800759c
 8019d2c:	7e37e43c 	.word	0x7e37e43c
 8019d30:	8800759c 	.word	0x8800759c
 8019d34:	fe37e43c 	.word	0xfe37e43c
 8019d38:	c2f8f359 	.word	0xc2f8f359
 8019d3c:	81a56e1f 	.word	0x81a56e1f
 8019d40:	43500000 	.word	0x43500000
 8019d44:	ffff3cb0 	.word	0xffff3cb0
 8019d48:	3c900000 	.word	0x3c900000

08019d4c <with_errnof>:
 8019d4c:	b513      	push	{r0, r1, r4, lr}
 8019d4e:	4604      	mov	r4, r0
 8019d50:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019d54:	f7fc fc94 	bl	8016680 <__errno>
 8019d58:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019d5c:	6004      	str	r4, [r0, #0]
 8019d5e:	b002      	add	sp, #8
 8019d60:	bd10      	pop	{r4, pc}

08019d62 <xflowf>:
 8019d62:	b130      	cbz	r0, 8019d72 <xflowf+0x10>
 8019d64:	eef1 7a40 	vneg.f32	s15, s0
 8019d68:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019d6c:	2022      	movs	r0, #34	; 0x22
 8019d6e:	f7ff bfed 	b.w	8019d4c <with_errnof>
 8019d72:	eef0 7a40 	vmov.f32	s15, s0
 8019d76:	e7f7      	b.n	8019d68 <xflowf+0x6>

08019d78 <__math_uflowf>:
 8019d78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019d80 <__math_uflowf+0x8>
 8019d7c:	f7ff bff1 	b.w	8019d62 <xflowf>
 8019d80:	10000000 	.word	0x10000000

08019d84 <__math_oflowf>:
 8019d84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019d8c <__math_oflowf+0x8>
 8019d88:	f7ff bfeb 	b.w	8019d62 <xflowf>
 8019d8c:	70000000 	.word	0x70000000

08019d90 <__ieee754_sqrt>:
 8019d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d94:	ec55 4b10 	vmov	r4, r5, d0
 8019d98:	4e67      	ldr	r6, [pc, #412]	; (8019f38 <__ieee754_sqrt+0x1a8>)
 8019d9a:	43ae      	bics	r6, r5
 8019d9c:	ee10 0a10 	vmov	r0, s0
 8019da0:	ee10 2a10 	vmov	r2, s0
 8019da4:	4629      	mov	r1, r5
 8019da6:	462b      	mov	r3, r5
 8019da8:	d10d      	bne.n	8019dc6 <__ieee754_sqrt+0x36>
 8019daa:	f7e6 fc25 	bl	80005f8 <__aeabi_dmul>
 8019dae:	4602      	mov	r2, r0
 8019db0:	460b      	mov	r3, r1
 8019db2:	4620      	mov	r0, r4
 8019db4:	4629      	mov	r1, r5
 8019db6:	f7e6 fa69 	bl	800028c <__adddf3>
 8019dba:	4604      	mov	r4, r0
 8019dbc:	460d      	mov	r5, r1
 8019dbe:	ec45 4b10 	vmov	d0, r4, r5
 8019dc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dc6:	2d00      	cmp	r5, #0
 8019dc8:	dc0b      	bgt.n	8019de2 <__ieee754_sqrt+0x52>
 8019dca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019dce:	4326      	orrs	r6, r4
 8019dd0:	d0f5      	beq.n	8019dbe <__ieee754_sqrt+0x2e>
 8019dd2:	b135      	cbz	r5, 8019de2 <__ieee754_sqrt+0x52>
 8019dd4:	f7e6 fa58 	bl	8000288 <__aeabi_dsub>
 8019dd8:	4602      	mov	r2, r0
 8019dda:	460b      	mov	r3, r1
 8019ddc:	f7e6 fd36 	bl	800084c <__aeabi_ddiv>
 8019de0:	e7eb      	b.n	8019dba <__ieee754_sqrt+0x2a>
 8019de2:	1509      	asrs	r1, r1, #20
 8019de4:	f000 808d 	beq.w	8019f02 <__ieee754_sqrt+0x172>
 8019de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019dec:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8019df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019df4:	07c9      	lsls	r1, r1, #31
 8019df6:	bf5c      	itt	pl
 8019df8:	005b      	lslpl	r3, r3, #1
 8019dfa:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8019dfe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019e02:	bf58      	it	pl
 8019e04:	0052      	lslpl	r2, r2, #1
 8019e06:	2500      	movs	r5, #0
 8019e08:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019e0c:	1076      	asrs	r6, r6, #1
 8019e0e:	0052      	lsls	r2, r2, #1
 8019e10:	f04f 0e16 	mov.w	lr, #22
 8019e14:	46ac      	mov	ip, r5
 8019e16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019e1a:	eb0c 0001 	add.w	r0, ip, r1
 8019e1e:	4298      	cmp	r0, r3
 8019e20:	bfde      	ittt	le
 8019e22:	1a1b      	suble	r3, r3, r0
 8019e24:	eb00 0c01 	addle.w	ip, r0, r1
 8019e28:	186d      	addle	r5, r5, r1
 8019e2a:	005b      	lsls	r3, r3, #1
 8019e2c:	f1be 0e01 	subs.w	lr, lr, #1
 8019e30:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019e34:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019e38:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019e3c:	d1ed      	bne.n	8019e1a <__ieee754_sqrt+0x8a>
 8019e3e:	4674      	mov	r4, lr
 8019e40:	2720      	movs	r7, #32
 8019e42:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019e46:	4563      	cmp	r3, ip
 8019e48:	eb01 000e 	add.w	r0, r1, lr
 8019e4c:	dc02      	bgt.n	8019e54 <__ieee754_sqrt+0xc4>
 8019e4e:	d113      	bne.n	8019e78 <__ieee754_sqrt+0xe8>
 8019e50:	4290      	cmp	r0, r2
 8019e52:	d811      	bhi.n	8019e78 <__ieee754_sqrt+0xe8>
 8019e54:	2800      	cmp	r0, #0
 8019e56:	eb00 0e01 	add.w	lr, r0, r1
 8019e5a:	da57      	bge.n	8019f0c <__ieee754_sqrt+0x17c>
 8019e5c:	f1be 0f00 	cmp.w	lr, #0
 8019e60:	db54      	blt.n	8019f0c <__ieee754_sqrt+0x17c>
 8019e62:	f10c 0801 	add.w	r8, ip, #1
 8019e66:	eba3 030c 	sub.w	r3, r3, ip
 8019e6a:	4290      	cmp	r0, r2
 8019e6c:	bf88      	it	hi
 8019e6e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8019e72:	1a12      	subs	r2, r2, r0
 8019e74:	440c      	add	r4, r1
 8019e76:	46c4      	mov	ip, r8
 8019e78:	005b      	lsls	r3, r3, #1
 8019e7a:	3f01      	subs	r7, #1
 8019e7c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019e80:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019e84:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019e88:	d1dd      	bne.n	8019e46 <__ieee754_sqrt+0xb6>
 8019e8a:	4313      	orrs	r3, r2
 8019e8c:	d01b      	beq.n	8019ec6 <__ieee754_sqrt+0x136>
 8019e8e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8019f3c <__ieee754_sqrt+0x1ac>
 8019e92:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8019f40 <__ieee754_sqrt+0x1b0>
 8019e96:	e9da 0100 	ldrd	r0, r1, [sl]
 8019e9a:	e9db 2300 	ldrd	r2, r3, [fp]
 8019e9e:	f7e6 f9f3 	bl	8000288 <__aeabi_dsub>
 8019ea2:	e9da 8900 	ldrd	r8, r9, [sl]
 8019ea6:	4602      	mov	r2, r0
 8019ea8:	460b      	mov	r3, r1
 8019eaa:	4640      	mov	r0, r8
 8019eac:	4649      	mov	r1, r9
 8019eae:	f7e6 fe1f 	bl	8000af0 <__aeabi_dcmple>
 8019eb2:	b140      	cbz	r0, 8019ec6 <__ieee754_sqrt+0x136>
 8019eb4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8019eb8:	e9da 0100 	ldrd	r0, r1, [sl]
 8019ebc:	e9db 2300 	ldrd	r2, r3, [fp]
 8019ec0:	d126      	bne.n	8019f10 <__ieee754_sqrt+0x180>
 8019ec2:	3501      	adds	r5, #1
 8019ec4:	463c      	mov	r4, r7
 8019ec6:	106a      	asrs	r2, r5, #1
 8019ec8:	0863      	lsrs	r3, r4, #1
 8019eca:	07e9      	lsls	r1, r5, #31
 8019ecc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019ed0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019ed4:	bf48      	it	mi
 8019ed6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8019eda:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8019ede:	461c      	mov	r4, r3
 8019ee0:	e76d      	b.n	8019dbe <__ieee754_sqrt+0x2e>
 8019ee2:	0ad3      	lsrs	r3, r2, #11
 8019ee4:	3815      	subs	r0, #21
 8019ee6:	0552      	lsls	r2, r2, #21
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d0fa      	beq.n	8019ee2 <__ieee754_sqrt+0x152>
 8019eec:	02dc      	lsls	r4, r3, #11
 8019eee:	d50a      	bpl.n	8019f06 <__ieee754_sqrt+0x176>
 8019ef0:	f1c1 0420 	rsb	r4, r1, #32
 8019ef4:	fa22 f404 	lsr.w	r4, r2, r4
 8019ef8:	1e4d      	subs	r5, r1, #1
 8019efa:	408a      	lsls	r2, r1
 8019efc:	4323      	orrs	r3, r4
 8019efe:	1b41      	subs	r1, r0, r5
 8019f00:	e772      	b.n	8019de8 <__ieee754_sqrt+0x58>
 8019f02:	4608      	mov	r0, r1
 8019f04:	e7f0      	b.n	8019ee8 <__ieee754_sqrt+0x158>
 8019f06:	005b      	lsls	r3, r3, #1
 8019f08:	3101      	adds	r1, #1
 8019f0a:	e7ef      	b.n	8019eec <__ieee754_sqrt+0x15c>
 8019f0c:	46e0      	mov	r8, ip
 8019f0e:	e7aa      	b.n	8019e66 <__ieee754_sqrt+0xd6>
 8019f10:	f7e6 f9bc 	bl	800028c <__adddf3>
 8019f14:	e9da 8900 	ldrd	r8, r9, [sl]
 8019f18:	4602      	mov	r2, r0
 8019f1a:	460b      	mov	r3, r1
 8019f1c:	4640      	mov	r0, r8
 8019f1e:	4649      	mov	r1, r9
 8019f20:	f7e6 fddc 	bl	8000adc <__aeabi_dcmplt>
 8019f24:	b120      	cbz	r0, 8019f30 <__ieee754_sqrt+0x1a0>
 8019f26:	1ca0      	adds	r0, r4, #2
 8019f28:	bf08      	it	eq
 8019f2a:	3501      	addeq	r5, #1
 8019f2c:	3402      	adds	r4, #2
 8019f2e:	e7ca      	b.n	8019ec6 <__ieee754_sqrt+0x136>
 8019f30:	3401      	adds	r4, #1
 8019f32:	f024 0401 	bic.w	r4, r4, #1
 8019f36:	e7c6      	b.n	8019ec6 <__ieee754_sqrt+0x136>
 8019f38:	7ff00000 	.word	0x7ff00000
 8019f3c:	200002f8 	.word	0x200002f8
 8019f40:	20000300 	.word	0x20000300
 8019f44:	00000000 	.word	0x00000000

08019f48 <__kernel_rem_pio2>:
 8019f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f4c:	ed2d 8b02 	vpush	{d8}
 8019f50:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8019f54:	f112 0f14 	cmn.w	r2, #20
 8019f58:	9306      	str	r3, [sp, #24]
 8019f5a:	9104      	str	r1, [sp, #16]
 8019f5c:	4bc2      	ldr	r3, [pc, #776]	; (801a268 <__kernel_rem_pio2+0x320>)
 8019f5e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8019f60:	9009      	str	r0, [sp, #36]	; 0x24
 8019f62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019f66:	9300      	str	r3, [sp, #0]
 8019f68:	9b06      	ldr	r3, [sp, #24]
 8019f6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8019f6e:	bfa8      	it	ge
 8019f70:	1ed4      	subge	r4, r2, #3
 8019f72:	9305      	str	r3, [sp, #20]
 8019f74:	bfb2      	itee	lt
 8019f76:	2400      	movlt	r4, #0
 8019f78:	2318      	movge	r3, #24
 8019f7a:	fb94 f4f3 	sdivge	r4, r4, r3
 8019f7e:	f06f 0317 	mvn.w	r3, #23
 8019f82:	fb04 3303 	mla	r3, r4, r3, r3
 8019f86:	eb03 0a02 	add.w	sl, r3, r2
 8019f8a:	9b00      	ldr	r3, [sp, #0]
 8019f8c:	9a05      	ldr	r2, [sp, #20]
 8019f8e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 801a258 <__kernel_rem_pio2+0x310>
 8019f92:	eb03 0802 	add.w	r8, r3, r2
 8019f96:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8019f98:	1aa7      	subs	r7, r4, r2
 8019f9a:	ae20      	add	r6, sp, #128	; 0x80
 8019f9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8019fa0:	2500      	movs	r5, #0
 8019fa2:	4545      	cmp	r5, r8
 8019fa4:	dd13      	ble.n	8019fce <__kernel_rem_pio2+0x86>
 8019fa6:	9b06      	ldr	r3, [sp, #24]
 8019fa8:	aa20      	add	r2, sp, #128	; 0x80
 8019faa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8019fae:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8019fb2:	f04f 0800 	mov.w	r8, #0
 8019fb6:	9b00      	ldr	r3, [sp, #0]
 8019fb8:	4598      	cmp	r8, r3
 8019fba:	dc31      	bgt.n	801a020 <__kernel_rem_pio2+0xd8>
 8019fbc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 801a258 <__kernel_rem_pio2+0x310>
 8019fc0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019fc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019fc8:	462f      	mov	r7, r5
 8019fca:	2600      	movs	r6, #0
 8019fcc:	e01b      	b.n	801a006 <__kernel_rem_pio2+0xbe>
 8019fce:	42ef      	cmn	r7, r5
 8019fd0:	d407      	bmi.n	8019fe2 <__kernel_rem_pio2+0x9a>
 8019fd2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8019fd6:	f7e6 faa5 	bl	8000524 <__aeabi_i2d>
 8019fda:	e8e6 0102 	strd	r0, r1, [r6], #8
 8019fde:	3501      	adds	r5, #1
 8019fe0:	e7df      	b.n	8019fa2 <__kernel_rem_pio2+0x5a>
 8019fe2:	ec51 0b18 	vmov	r0, r1, d8
 8019fe6:	e7f8      	b.n	8019fda <__kernel_rem_pio2+0x92>
 8019fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019fec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8019ff0:	f7e6 fb02 	bl	80005f8 <__aeabi_dmul>
 8019ff4:	4602      	mov	r2, r0
 8019ff6:	460b      	mov	r3, r1
 8019ff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ffc:	f7e6 f946 	bl	800028c <__adddf3>
 801a000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a004:	3601      	adds	r6, #1
 801a006:	9b05      	ldr	r3, [sp, #20]
 801a008:	429e      	cmp	r6, r3
 801a00a:	f1a7 0708 	sub.w	r7, r7, #8
 801a00e:	ddeb      	ble.n	8019fe8 <__kernel_rem_pio2+0xa0>
 801a010:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a014:	f108 0801 	add.w	r8, r8, #1
 801a018:	ecab 7b02 	vstmia	fp!, {d7}
 801a01c:	3508      	adds	r5, #8
 801a01e:	e7ca      	b.n	8019fb6 <__kernel_rem_pio2+0x6e>
 801a020:	9b00      	ldr	r3, [sp, #0]
 801a022:	aa0c      	add	r2, sp, #48	; 0x30
 801a024:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a028:	930b      	str	r3, [sp, #44]	; 0x2c
 801a02a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801a02c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a030:	9c00      	ldr	r4, [sp, #0]
 801a032:	930a      	str	r3, [sp, #40]	; 0x28
 801a034:	00e3      	lsls	r3, r4, #3
 801a036:	9308      	str	r3, [sp, #32]
 801a038:	ab98      	add	r3, sp, #608	; 0x260
 801a03a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a03e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801a042:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801a046:	ab70      	add	r3, sp, #448	; 0x1c0
 801a048:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801a04c:	46c3      	mov	fp, r8
 801a04e:	46a1      	mov	r9, r4
 801a050:	f1b9 0f00 	cmp.w	r9, #0
 801a054:	f1a5 0508 	sub.w	r5, r5, #8
 801a058:	dc77      	bgt.n	801a14a <__kernel_rem_pio2+0x202>
 801a05a:	ec47 6b10 	vmov	d0, r6, r7
 801a05e:	4650      	mov	r0, sl
 801a060:	f7ff fdf6 	bl	8019c50 <scalbn>
 801a064:	ec57 6b10 	vmov	r6, r7, d0
 801a068:	2200      	movs	r2, #0
 801a06a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a06e:	ee10 0a10 	vmov	r0, s0
 801a072:	4639      	mov	r1, r7
 801a074:	f7e6 fac0 	bl	80005f8 <__aeabi_dmul>
 801a078:	ec41 0b10 	vmov	d0, r0, r1
 801a07c:	f7ff f8cc 	bl	8019218 <floor>
 801a080:	4b7a      	ldr	r3, [pc, #488]	; (801a26c <__kernel_rem_pio2+0x324>)
 801a082:	ec51 0b10 	vmov	r0, r1, d0
 801a086:	2200      	movs	r2, #0
 801a088:	f7e6 fab6 	bl	80005f8 <__aeabi_dmul>
 801a08c:	4602      	mov	r2, r0
 801a08e:	460b      	mov	r3, r1
 801a090:	4630      	mov	r0, r6
 801a092:	4639      	mov	r1, r7
 801a094:	f7e6 f8f8 	bl	8000288 <__aeabi_dsub>
 801a098:	460f      	mov	r7, r1
 801a09a:	4606      	mov	r6, r0
 801a09c:	f7e6 fd5c 	bl	8000b58 <__aeabi_d2iz>
 801a0a0:	9002      	str	r0, [sp, #8]
 801a0a2:	f7e6 fa3f 	bl	8000524 <__aeabi_i2d>
 801a0a6:	4602      	mov	r2, r0
 801a0a8:	460b      	mov	r3, r1
 801a0aa:	4630      	mov	r0, r6
 801a0ac:	4639      	mov	r1, r7
 801a0ae:	f7e6 f8eb 	bl	8000288 <__aeabi_dsub>
 801a0b2:	f1ba 0f00 	cmp.w	sl, #0
 801a0b6:	4606      	mov	r6, r0
 801a0b8:	460f      	mov	r7, r1
 801a0ba:	dd6d      	ble.n	801a198 <__kernel_rem_pio2+0x250>
 801a0bc:	1e61      	subs	r1, r4, #1
 801a0be:	ab0c      	add	r3, sp, #48	; 0x30
 801a0c0:	9d02      	ldr	r5, [sp, #8]
 801a0c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a0c6:	f1ca 0018 	rsb	r0, sl, #24
 801a0ca:	fa43 f200 	asr.w	r2, r3, r0
 801a0ce:	4415      	add	r5, r2
 801a0d0:	4082      	lsls	r2, r0
 801a0d2:	1a9b      	subs	r3, r3, r2
 801a0d4:	aa0c      	add	r2, sp, #48	; 0x30
 801a0d6:	9502      	str	r5, [sp, #8]
 801a0d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a0dc:	f1ca 0217 	rsb	r2, sl, #23
 801a0e0:	fa43 fb02 	asr.w	fp, r3, r2
 801a0e4:	f1bb 0f00 	cmp.w	fp, #0
 801a0e8:	dd65      	ble.n	801a1b6 <__kernel_rem_pio2+0x26e>
 801a0ea:	9b02      	ldr	r3, [sp, #8]
 801a0ec:	2200      	movs	r2, #0
 801a0ee:	3301      	adds	r3, #1
 801a0f0:	9302      	str	r3, [sp, #8]
 801a0f2:	4615      	mov	r5, r2
 801a0f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a0f8:	4294      	cmp	r4, r2
 801a0fa:	f300 809f 	bgt.w	801a23c <__kernel_rem_pio2+0x2f4>
 801a0fe:	f1ba 0f00 	cmp.w	sl, #0
 801a102:	dd07      	ble.n	801a114 <__kernel_rem_pio2+0x1cc>
 801a104:	f1ba 0f01 	cmp.w	sl, #1
 801a108:	f000 80c1 	beq.w	801a28e <__kernel_rem_pio2+0x346>
 801a10c:	f1ba 0f02 	cmp.w	sl, #2
 801a110:	f000 80c7 	beq.w	801a2a2 <__kernel_rem_pio2+0x35a>
 801a114:	f1bb 0f02 	cmp.w	fp, #2
 801a118:	d14d      	bne.n	801a1b6 <__kernel_rem_pio2+0x26e>
 801a11a:	4632      	mov	r2, r6
 801a11c:	463b      	mov	r3, r7
 801a11e:	4954      	ldr	r1, [pc, #336]	; (801a270 <__kernel_rem_pio2+0x328>)
 801a120:	2000      	movs	r0, #0
 801a122:	f7e6 f8b1 	bl	8000288 <__aeabi_dsub>
 801a126:	4606      	mov	r6, r0
 801a128:	460f      	mov	r7, r1
 801a12a:	2d00      	cmp	r5, #0
 801a12c:	d043      	beq.n	801a1b6 <__kernel_rem_pio2+0x26e>
 801a12e:	4650      	mov	r0, sl
 801a130:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 801a260 <__kernel_rem_pio2+0x318>
 801a134:	f7ff fd8c 	bl	8019c50 <scalbn>
 801a138:	4630      	mov	r0, r6
 801a13a:	4639      	mov	r1, r7
 801a13c:	ec53 2b10 	vmov	r2, r3, d0
 801a140:	f7e6 f8a2 	bl	8000288 <__aeabi_dsub>
 801a144:	4606      	mov	r6, r0
 801a146:	460f      	mov	r7, r1
 801a148:	e035      	b.n	801a1b6 <__kernel_rem_pio2+0x26e>
 801a14a:	4b4a      	ldr	r3, [pc, #296]	; (801a274 <__kernel_rem_pio2+0x32c>)
 801a14c:	2200      	movs	r2, #0
 801a14e:	4630      	mov	r0, r6
 801a150:	4639      	mov	r1, r7
 801a152:	f7e6 fa51 	bl	80005f8 <__aeabi_dmul>
 801a156:	f7e6 fcff 	bl	8000b58 <__aeabi_d2iz>
 801a15a:	f7e6 f9e3 	bl	8000524 <__aeabi_i2d>
 801a15e:	4602      	mov	r2, r0
 801a160:	460b      	mov	r3, r1
 801a162:	ec43 2b18 	vmov	d8, r2, r3
 801a166:	4b44      	ldr	r3, [pc, #272]	; (801a278 <__kernel_rem_pio2+0x330>)
 801a168:	2200      	movs	r2, #0
 801a16a:	f7e6 fa45 	bl	80005f8 <__aeabi_dmul>
 801a16e:	4602      	mov	r2, r0
 801a170:	460b      	mov	r3, r1
 801a172:	4630      	mov	r0, r6
 801a174:	4639      	mov	r1, r7
 801a176:	f7e6 f887 	bl	8000288 <__aeabi_dsub>
 801a17a:	f7e6 fced 	bl	8000b58 <__aeabi_d2iz>
 801a17e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a182:	f84b 0b04 	str.w	r0, [fp], #4
 801a186:	ec51 0b18 	vmov	r0, r1, d8
 801a18a:	f7e6 f87f 	bl	800028c <__adddf3>
 801a18e:	f109 39ff 	add.w	r9, r9, #4294967295
 801a192:	4606      	mov	r6, r0
 801a194:	460f      	mov	r7, r1
 801a196:	e75b      	b.n	801a050 <__kernel_rem_pio2+0x108>
 801a198:	d106      	bne.n	801a1a8 <__kernel_rem_pio2+0x260>
 801a19a:	1e63      	subs	r3, r4, #1
 801a19c:	aa0c      	add	r2, sp, #48	; 0x30
 801a19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a1a2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801a1a6:	e79d      	b.n	801a0e4 <__kernel_rem_pio2+0x19c>
 801a1a8:	4b34      	ldr	r3, [pc, #208]	; (801a27c <__kernel_rem_pio2+0x334>)
 801a1aa:	2200      	movs	r2, #0
 801a1ac:	f7e6 fcaa 	bl	8000b04 <__aeabi_dcmpge>
 801a1b0:	2800      	cmp	r0, #0
 801a1b2:	d140      	bne.n	801a236 <__kernel_rem_pio2+0x2ee>
 801a1b4:	4683      	mov	fp, r0
 801a1b6:	2200      	movs	r2, #0
 801a1b8:	2300      	movs	r3, #0
 801a1ba:	4630      	mov	r0, r6
 801a1bc:	4639      	mov	r1, r7
 801a1be:	f7e6 fc83 	bl	8000ac8 <__aeabi_dcmpeq>
 801a1c2:	2800      	cmp	r0, #0
 801a1c4:	f000 80c1 	beq.w	801a34a <__kernel_rem_pio2+0x402>
 801a1c8:	1e65      	subs	r5, r4, #1
 801a1ca:	462b      	mov	r3, r5
 801a1cc:	2200      	movs	r2, #0
 801a1ce:	9900      	ldr	r1, [sp, #0]
 801a1d0:	428b      	cmp	r3, r1
 801a1d2:	da6d      	bge.n	801a2b0 <__kernel_rem_pio2+0x368>
 801a1d4:	2a00      	cmp	r2, #0
 801a1d6:	f000 808a 	beq.w	801a2ee <__kernel_rem_pio2+0x3a6>
 801a1da:	ab0c      	add	r3, sp, #48	; 0x30
 801a1dc:	f1aa 0a18 	sub.w	sl, sl, #24
 801a1e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	f000 80ae 	beq.w	801a346 <__kernel_rem_pio2+0x3fe>
 801a1ea:	4650      	mov	r0, sl
 801a1ec:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801a260 <__kernel_rem_pio2+0x318>
 801a1f0:	f7ff fd2e 	bl	8019c50 <scalbn>
 801a1f4:	1c6b      	adds	r3, r5, #1
 801a1f6:	00da      	lsls	r2, r3, #3
 801a1f8:	9205      	str	r2, [sp, #20]
 801a1fa:	ec57 6b10 	vmov	r6, r7, d0
 801a1fe:	aa70      	add	r2, sp, #448	; 0x1c0
 801a200:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801a274 <__kernel_rem_pio2+0x32c>
 801a204:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 801a208:	462c      	mov	r4, r5
 801a20a:	f04f 0800 	mov.w	r8, #0
 801a20e:	2c00      	cmp	r4, #0
 801a210:	f280 80d4 	bge.w	801a3bc <__kernel_rem_pio2+0x474>
 801a214:	462c      	mov	r4, r5
 801a216:	2c00      	cmp	r4, #0
 801a218:	f2c0 8102 	blt.w	801a420 <__kernel_rem_pio2+0x4d8>
 801a21c:	4b18      	ldr	r3, [pc, #96]	; (801a280 <__kernel_rem_pio2+0x338>)
 801a21e:	461e      	mov	r6, r3
 801a220:	ab70      	add	r3, sp, #448	; 0x1c0
 801a222:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801a226:	1b2b      	subs	r3, r5, r4
 801a228:	f04f 0900 	mov.w	r9, #0
 801a22c:	f04f 0a00 	mov.w	sl, #0
 801a230:	2700      	movs	r7, #0
 801a232:	9306      	str	r3, [sp, #24]
 801a234:	e0e6      	b.n	801a404 <__kernel_rem_pio2+0x4bc>
 801a236:	f04f 0b02 	mov.w	fp, #2
 801a23a:	e756      	b.n	801a0ea <__kernel_rem_pio2+0x1a2>
 801a23c:	f8d8 3000 	ldr.w	r3, [r8]
 801a240:	bb05      	cbnz	r5, 801a284 <__kernel_rem_pio2+0x33c>
 801a242:	b123      	cbz	r3, 801a24e <__kernel_rem_pio2+0x306>
 801a244:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a248:	f8c8 3000 	str.w	r3, [r8]
 801a24c:	2301      	movs	r3, #1
 801a24e:	3201      	adds	r2, #1
 801a250:	f108 0804 	add.w	r8, r8, #4
 801a254:	461d      	mov	r5, r3
 801a256:	e74f      	b.n	801a0f8 <__kernel_rem_pio2+0x1b0>
	...
 801a264:	3ff00000 	.word	0x3ff00000
 801a268:	0801d000 	.word	0x0801d000
 801a26c:	40200000 	.word	0x40200000
 801a270:	3ff00000 	.word	0x3ff00000
 801a274:	3e700000 	.word	0x3e700000
 801a278:	41700000 	.word	0x41700000
 801a27c:	3fe00000 	.word	0x3fe00000
 801a280:	0801cfc0 	.word	0x0801cfc0
 801a284:	1acb      	subs	r3, r1, r3
 801a286:	f8c8 3000 	str.w	r3, [r8]
 801a28a:	462b      	mov	r3, r5
 801a28c:	e7df      	b.n	801a24e <__kernel_rem_pio2+0x306>
 801a28e:	1e62      	subs	r2, r4, #1
 801a290:	ab0c      	add	r3, sp, #48	; 0x30
 801a292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a296:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a29a:	a90c      	add	r1, sp, #48	; 0x30
 801a29c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a2a0:	e738      	b.n	801a114 <__kernel_rem_pio2+0x1cc>
 801a2a2:	1e62      	subs	r2, r4, #1
 801a2a4:	ab0c      	add	r3, sp, #48	; 0x30
 801a2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a2aa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a2ae:	e7f4      	b.n	801a29a <__kernel_rem_pio2+0x352>
 801a2b0:	a90c      	add	r1, sp, #48	; 0x30
 801a2b2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a2b6:	3b01      	subs	r3, #1
 801a2b8:	430a      	orrs	r2, r1
 801a2ba:	e788      	b.n	801a1ce <__kernel_rem_pio2+0x286>
 801a2bc:	3301      	adds	r3, #1
 801a2be:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a2c2:	2900      	cmp	r1, #0
 801a2c4:	d0fa      	beq.n	801a2bc <__kernel_rem_pio2+0x374>
 801a2c6:	9a08      	ldr	r2, [sp, #32]
 801a2c8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801a2cc:	446a      	add	r2, sp
 801a2ce:	3a98      	subs	r2, #152	; 0x98
 801a2d0:	9208      	str	r2, [sp, #32]
 801a2d2:	9a06      	ldr	r2, [sp, #24]
 801a2d4:	a920      	add	r1, sp, #128	; 0x80
 801a2d6:	18a2      	adds	r2, r4, r2
 801a2d8:	18e3      	adds	r3, r4, r3
 801a2da:	f104 0801 	add.w	r8, r4, #1
 801a2de:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801a2e2:	9302      	str	r3, [sp, #8]
 801a2e4:	9b02      	ldr	r3, [sp, #8]
 801a2e6:	4543      	cmp	r3, r8
 801a2e8:	da04      	bge.n	801a2f4 <__kernel_rem_pio2+0x3ac>
 801a2ea:	461c      	mov	r4, r3
 801a2ec:	e6a2      	b.n	801a034 <__kernel_rem_pio2+0xec>
 801a2ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a2f0:	2301      	movs	r3, #1
 801a2f2:	e7e4      	b.n	801a2be <__kernel_rem_pio2+0x376>
 801a2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a2f6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801a2fa:	f7e6 f913 	bl	8000524 <__aeabi_i2d>
 801a2fe:	e8e5 0102 	strd	r0, r1, [r5], #8
 801a302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a304:	46ab      	mov	fp, r5
 801a306:	461c      	mov	r4, r3
 801a308:	f04f 0900 	mov.w	r9, #0
 801a30c:	2600      	movs	r6, #0
 801a30e:	2700      	movs	r7, #0
 801a310:	9b05      	ldr	r3, [sp, #20]
 801a312:	4599      	cmp	r9, r3
 801a314:	dd06      	ble.n	801a324 <__kernel_rem_pio2+0x3dc>
 801a316:	9b08      	ldr	r3, [sp, #32]
 801a318:	e8e3 6702 	strd	r6, r7, [r3], #8
 801a31c:	f108 0801 	add.w	r8, r8, #1
 801a320:	9308      	str	r3, [sp, #32]
 801a322:	e7df      	b.n	801a2e4 <__kernel_rem_pio2+0x39c>
 801a324:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a328:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a32c:	f7e6 f964 	bl	80005f8 <__aeabi_dmul>
 801a330:	4602      	mov	r2, r0
 801a332:	460b      	mov	r3, r1
 801a334:	4630      	mov	r0, r6
 801a336:	4639      	mov	r1, r7
 801a338:	f7e5 ffa8 	bl	800028c <__adddf3>
 801a33c:	f109 0901 	add.w	r9, r9, #1
 801a340:	4606      	mov	r6, r0
 801a342:	460f      	mov	r7, r1
 801a344:	e7e4      	b.n	801a310 <__kernel_rem_pio2+0x3c8>
 801a346:	3d01      	subs	r5, #1
 801a348:	e747      	b.n	801a1da <__kernel_rem_pio2+0x292>
 801a34a:	ec47 6b10 	vmov	d0, r6, r7
 801a34e:	f1ca 0000 	rsb	r0, sl, #0
 801a352:	f7ff fc7d 	bl	8019c50 <scalbn>
 801a356:	ec57 6b10 	vmov	r6, r7, d0
 801a35a:	4ba0      	ldr	r3, [pc, #640]	; (801a5dc <__kernel_rem_pio2+0x694>)
 801a35c:	ee10 0a10 	vmov	r0, s0
 801a360:	2200      	movs	r2, #0
 801a362:	4639      	mov	r1, r7
 801a364:	f7e6 fbce 	bl	8000b04 <__aeabi_dcmpge>
 801a368:	b1f8      	cbz	r0, 801a3aa <__kernel_rem_pio2+0x462>
 801a36a:	4b9d      	ldr	r3, [pc, #628]	; (801a5e0 <__kernel_rem_pio2+0x698>)
 801a36c:	2200      	movs	r2, #0
 801a36e:	4630      	mov	r0, r6
 801a370:	4639      	mov	r1, r7
 801a372:	f7e6 f941 	bl	80005f8 <__aeabi_dmul>
 801a376:	f7e6 fbef 	bl	8000b58 <__aeabi_d2iz>
 801a37a:	4680      	mov	r8, r0
 801a37c:	f7e6 f8d2 	bl	8000524 <__aeabi_i2d>
 801a380:	4b96      	ldr	r3, [pc, #600]	; (801a5dc <__kernel_rem_pio2+0x694>)
 801a382:	2200      	movs	r2, #0
 801a384:	f7e6 f938 	bl	80005f8 <__aeabi_dmul>
 801a388:	460b      	mov	r3, r1
 801a38a:	4602      	mov	r2, r0
 801a38c:	4639      	mov	r1, r7
 801a38e:	4630      	mov	r0, r6
 801a390:	f7e5 ff7a 	bl	8000288 <__aeabi_dsub>
 801a394:	f7e6 fbe0 	bl	8000b58 <__aeabi_d2iz>
 801a398:	1c65      	adds	r5, r4, #1
 801a39a:	ab0c      	add	r3, sp, #48	; 0x30
 801a39c:	f10a 0a18 	add.w	sl, sl, #24
 801a3a0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a3a4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801a3a8:	e71f      	b.n	801a1ea <__kernel_rem_pio2+0x2a2>
 801a3aa:	4630      	mov	r0, r6
 801a3ac:	4639      	mov	r1, r7
 801a3ae:	f7e6 fbd3 	bl	8000b58 <__aeabi_d2iz>
 801a3b2:	ab0c      	add	r3, sp, #48	; 0x30
 801a3b4:	4625      	mov	r5, r4
 801a3b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a3ba:	e716      	b.n	801a1ea <__kernel_rem_pio2+0x2a2>
 801a3bc:	ab0c      	add	r3, sp, #48	; 0x30
 801a3be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a3c2:	f7e6 f8af 	bl	8000524 <__aeabi_i2d>
 801a3c6:	4632      	mov	r2, r6
 801a3c8:	463b      	mov	r3, r7
 801a3ca:	f7e6 f915 	bl	80005f8 <__aeabi_dmul>
 801a3ce:	4642      	mov	r2, r8
 801a3d0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801a3d4:	464b      	mov	r3, r9
 801a3d6:	4630      	mov	r0, r6
 801a3d8:	4639      	mov	r1, r7
 801a3da:	f7e6 f90d 	bl	80005f8 <__aeabi_dmul>
 801a3de:	3c01      	subs	r4, #1
 801a3e0:	4606      	mov	r6, r0
 801a3e2:	460f      	mov	r7, r1
 801a3e4:	e713      	b.n	801a20e <__kernel_rem_pio2+0x2c6>
 801a3e6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801a3ea:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801a3ee:	f7e6 f903 	bl	80005f8 <__aeabi_dmul>
 801a3f2:	4602      	mov	r2, r0
 801a3f4:	460b      	mov	r3, r1
 801a3f6:	4648      	mov	r0, r9
 801a3f8:	4651      	mov	r1, sl
 801a3fa:	f7e5 ff47 	bl	800028c <__adddf3>
 801a3fe:	3701      	adds	r7, #1
 801a400:	4681      	mov	r9, r0
 801a402:	468a      	mov	sl, r1
 801a404:	9b00      	ldr	r3, [sp, #0]
 801a406:	429f      	cmp	r7, r3
 801a408:	dc02      	bgt.n	801a410 <__kernel_rem_pio2+0x4c8>
 801a40a:	9b06      	ldr	r3, [sp, #24]
 801a40c:	429f      	cmp	r7, r3
 801a40e:	ddea      	ble.n	801a3e6 <__kernel_rem_pio2+0x49e>
 801a410:	9a06      	ldr	r2, [sp, #24]
 801a412:	ab48      	add	r3, sp, #288	; 0x120
 801a414:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801a418:	e9c6 9a00 	strd	r9, sl, [r6]
 801a41c:	3c01      	subs	r4, #1
 801a41e:	e6fa      	b.n	801a216 <__kernel_rem_pio2+0x2ce>
 801a420:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801a422:	2b02      	cmp	r3, #2
 801a424:	dc0b      	bgt.n	801a43e <__kernel_rem_pio2+0x4f6>
 801a426:	2b00      	cmp	r3, #0
 801a428:	dc39      	bgt.n	801a49e <__kernel_rem_pio2+0x556>
 801a42a:	d05d      	beq.n	801a4e8 <__kernel_rem_pio2+0x5a0>
 801a42c:	9b02      	ldr	r3, [sp, #8]
 801a42e:	f003 0007 	and.w	r0, r3, #7
 801a432:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801a436:	ecbd 8b02 	vpop	{d8}
 801a43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a43e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801a440:	2b03      	cmp	r3, #3
 801a442:	d1f3      	bne.n	801a42c <__kernel_rem_pio2+0x4e4>
 801a444:	9b05      	ldr	r3, [sp, #20]
 801a446:	9500      	str	r5, [sp, #0]
 801a448:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801a44c:	eb0d 0403 	add.w	r4, sp, r3
 801a450:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801a454:	46a2      	mov	sl, r4
 801a456:	9b00      	ldr	r3, [sp, #0]
 801a458:	2b00      	cmp	r3, #0
 801a45a:	f1aa 0a08 	sub.w	sl, sl, #8
 801a45e:	dc69      	bgt.n	801a534 <__kernel_rem_pio2+0x5ec>
 801a460:	46aa      	mov	sl, r5
 801a462:	f1ba 0f01 	cmp.w	sl, #1
 801a466:	f1a4 0408 	sub.w	r4, r4, #8
 801a46a:	f300 8083 	bgt.w	801a574 <__kernel_rem_pio2+0x62c>
 801a46e:	9c05      	ldr	r4, [sp, #20]
 801a470:	ab48      	add	r3, sp, #288	; 0x120
 801a472:	441c      	add	r4, r3
 801a474:	2000      	movs	r0, #0
 801a476:	2100      	movs	r1, #0
 801a478:	2d01      	cmp	r5, #1
 801a47a:	f300 809a 	bgt.w	801a5b2 <__kernel_rem_pio2+0x66a>
 801a47e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801a482:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801a486:	f1bb 0f00 	cmp.w	fp, #0
 801a48a:	f040 8098 	bne.w	801a5be <__kernel_rem_pio2+0x676>
 801a48e:	9b04      	ldr	r3, [sp, #16]
 801a490:	e9c3 7800 	strd	r7, r8, [r3]
 801a494:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801a498:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a49c:	e7c6      	b.n	801a42c <__kernel_rem_pio2+0x4e4>
 801a49e:	9e05      	ldr	r6, [sp, #20]
 801a4a0:	ab48      	add	r3, sp, #288	; 0x120
 801a4a2:	441e      	add	r6, r3
 801a4a4:	462c      	mov	r4, r5
 801a4a6:	2000      	movs	r0, #0
 801a4a8:	2100      	movs	r1, #0
 801a4aa:	2c00      	cmp	r4, #0
 801a4ac:	da33      	bge.n	801a516 <__kernel_rem_pio2+0x5ce>
 801a4ae:	f1bb 0f00 	cmp.w	fp, #0
 801a4b2:	d036      	beq.n	801a522 <__kernel_rem_pio2+0x5da>
 801a4b4:	4602      	mov	r2, r0
 801a4b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a4ba:	9c04      	ldr	r4, [sp, #16]
 801a4bc:	e9c4 2300 	strd	r2, r3, [r4]
 801a4c0:	4602      	mov	r2, r0
 801a4c2:	460b      	mov	r3, r1
 801a4c4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801a4c8:	f7e5 fede 	bl	8000288 <__aeabi_dsub>
 801a4cc:	ae4a      	add	r6, sp, #296	; 0x128
 801a4ce:	2401      	movs	r4, #1
 801a4d0:	42a5      	cmp	r5, r4
 801a4d2:	da29      	bge.n	801a528 <__kernel_rem_pio2+0x5e0>
 801a4d4:	f1bb 0f00 	cmp.w	fp, #0
 801a4d8:	d002      	beq.n	801a4e0 <__kernel_rem_pio2+0x598>
 801a4da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a4de:	4619      	mov	r1, r3
 801a4e0:	9b04      	ldr	r3, [sp, #16]
 801a4e2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a4e6:	e7a1      	b.n	801a42c <__kernel_rem_pio2+0x4e4>
 801a4e8:	9c05      	ldr	r4, [sp, #20]
 801a4ea:	ab48      	add	r3, sp, #288	; 0x120
 801a4ec:	441c      	add	r4, r3
 801a4ee:	2000      	movs	r0, #0
 801a4f0:	2100      	movs	r1, #0
 801a4f2:	2d00      	cmp	r5, #0
 801a4f4:	da09      	bge.n	801a50a <__kernel_rem_pio2+0x5c2>
 801a4f6:	f1bb 0f00 	cmp.w	fp, #0
 801a4fa:	d002      	beq.n	801a502 <__kernel_rem_pio2+0x5ba>
 801a4fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a500:	4619      	mov	r1, r3
 801a502:	9b04      	ldr	r3, [sp, #16]
 801a504:	e9c3 0100 	strd	r0, r1, [r3]
 801a508:	e790      	b.n	801a42c <__kernel_rem_pio2+0x4e4>
 801a50a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a50e:	f7e5 febd 	bl	800028c <__adddf3>
 801a512:	3d01      	subs	r5, #1
 801a514:	e7ed      	b.n	801a4f2 <__kernel_rem_pio2+0x5aa>
 801a516:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801a51a:	f7e5 feb7 	bl	800028c <__adddf3>
 801a51e:	3c01      	subs	r4, #1
 801a520:	e7c3      	b.n	801a4aa <__kernel_rem_pio2+0x562>
 801a522:	4602      	mov	r2, r0
 801a524:	460b      	mov	r3, r1
 801a526:	e7c8      	b.n	801a4ba <__kernel_rem_pio2+0x572>
 801a528:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801a52c:	f7e5 feae 	bl	800028c <__adddf3>
 801a530:	3401      	adds	r4, #1
 801a532:	e7cd      	b.n	801a4d0 <__kernel_rem_pio2+0x588>
 801a534:	e9da 8900 	ldrd	r8, r9, [sl]
 801a538:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801a53c:	9b00      	ldr	r3, [sp, #0]
 801a53e:	3b01      	subs	r3, #1
 801a540:	9300      	str	r3, [sp, #0]
 801a542:	4632      	mov	r2, r6
 801a544:	463b      	mov	r3, r7
 801a546:	4640      	mov	r0, r8
 801a548:	4649      	mov	r1, r9
 801a54a:	f7e5 fe9f 	bl	800028c <__adddf3>
 801a54e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a552:	4602      	mov	r2, r0
 801a554:	460b      	mov	r3, r1
 801a556:	4640      	mov	r0, r8
 801a558:	4649      	mov	r1, r9
 801a55a:	f7e5 fe95 	bl	8000288 <__aeabi_dsub>
 801a55e:	4632      	mov	r2, r6
 801a560:	463b      	mov	r3, r7
 801a562:	f7e5 fe93 	bl	800028c <__adddf3>
 801a566:	ed9d 7b06 	vldr	d7, [sp, #24]
 801a56a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a56e:	ed8a 7b00 	vstr	d7, [sl]
 801a572:	e770      	b.n	801a456 <__kernel_rem_pio2+0x50e>
 801a574:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a578:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801a57c:	4640      	mov	r0, r8
 801a57e:	4632      	mov	r2, r6
 801a580:	463b      	mov	r3, r7
 801a582:	4649      	mov	r1, r9
 801a584:	f7e5 fe82 	bl	800028c <__adddf3>
 801a588:	e9cd 0100 	strd	r0, r1, [sp]
 801a58c:	4602      	mov	r2, r0
 801a58e:	460b      	mov	r3, r1
 801a590:	4640      	mov	r0, r8
 801a592:	4649      	mov	r1, r9
 801a594:	f7e5 fe78 	bl	8000288 <__aeabi_dsub>
 801a598:	4632      	mov	r2, r6
 801a59a:	463b      	mov	r3, r7
 801a59c:	f7e5 fe76 	bl	800028c <__adddf3>
 801a5a0:	ed9d 7b00 	vldr	d7, [sp]
 801a5a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a5a8:	ed84 7b00 	vstr	d7, [r4]
 801a5ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a5b0:	e757      	b.n	801a462 <__kernel_rem_pio2+0x51a>
 801a5b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a5b6:	f7e5 fe69 	bl	800028c <__adddf3>
 801a5ba:	3d01      	subs	r5, #1
 801a5bc:	e75c      	b.n	801a478 <__kernel_rem_pio2+0x530>
 801a5be:	9b04      	ldr	r3, [sp, #16]
 801a5c0:	9a04      	ldr	r2, [sp, #16]
 801a5c2:	601f      	str	r7, [r3, #0]
 801a5c4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801a5c8:	605c      	str	r4, [r3, #4]
 801a5ca:	609d      	str	r5, [r3, #8]
 801a5cc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801a5d0:	60d3      	str	r3, [r2, #12]
 801a5d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a5d6:	6110      	str	r0, [r2, #16]
 801a5d8:	6153      	str	r3, [r2, #20]
 801a5da:	e727      	b.n	801a42c <__kernel_rem_pio2+0x4e4>
 801a5dc:	41700000 	.word	0x41700000
 801a5e0:	3e700000 	.word	0x3e700000
 801a5e4:	00000000 	.word	0x00000000

0801a5e8 <__ieee754_acos>:
 801a5e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5ec:	ec55 4b10 	vmov	r4, r5, d0
 801a5f0:	49b7      	ldr	r1, [pc, #732]	; (801a8d0 <__ieee754_acos+0x2e8>)
 801a5f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a5f6:	428b      	cmp	r3, r1
 801a5f8:	dd1b      	ble.n	801a632 <__ieee754_acos+0x4a>
 801a5fa:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801a5fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a602:	4323      	orrs	r3, r4
 801a604:	d106      	bne.n	801a614 <__ieee754_acos+0x2c>
 801a606:	2d00      	cmp	r5, #0
 801a608:	f300 8211 	bgt.w	801aa2e <__ieee754_acos+0x446>
 801a60c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 801a868 <__ieee754_acos+0x280>
 801a610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a614:	ee10 2a10 	vmov	r2, s0
 801a618:	462b      	mov	r3, r5
 801a61a:	ee10 0a10 	vmov	r0, s0
 801a61e:	4629      	mov	r1, r5
 801a620:	f7e5 fe32 	bl	8000288 <__aeabi_dsub>
 801a624:	4602      	mov	r2, r0
 801a626:	460b      	mov	r3, r1
 801a628:	f7e6 f910 	bl	800084c <__aeabi_ddiv>
 801a62c:	ec41 0b10 	vmov	d0, r0, r1
 801a630:	e7ee      	b.n	801a610 <__ieee754_acos+0x28>
 801a632:	49a8      	ldr	r1, [pc, #672]	; (801a8d4 <__ieee754_acos+0x2ec>)
 801a634:	428b      	cmp	r3, r1
 801a636:	f300 8087 	bgt.w	801a748 <__ieee754_acos+0x160>
 801a63a:	4aa7      	ldr	r2, [pc, #668]	; (801a8d8 <__ieee754_acos+0x2f0>)
 801a63c:	4293      	cmp	r3, r2
 801a63e:	f340 81f9 	ble.w	801aa34 <__ieee754_acos+0x44c>
 801a642:	ee10 2a10 	vmov	r2, s0
 801a646:	ee10 0a10 	vmov	r0, s0
 801a64a:	462b      	mov	r3, r5
 801a64c:	4629      	mov	r1, r5
 801a64e:	f7e5 ffd3 	bl	80005f8 <__aeabi_dmul>
 801a652:	a387      	add	r3, pc, #540	; (adr r3, 801a870 <__ieee754_acos+0x288>)
 801a654:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a658:	4606      	mov	r6, r0
 801a65a:	460f      	mov	r7, r1
 801a65c:	f7e5 ffcc 	bl	80005f8 <__aeabi_dmul>
 801a660:	a385      	add	r3, pc, #532	; (adr r3, 801a878 <__ieee754_acos+0x290>)
 801a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a666:	f7e5 fe11 	bl	800028c <__adddf3>
 801a66a:	4632      	mov	r2, r6
 801a66c:	463b      	mov	r3, r7
 801a66e:	f7e5 ffc3 	bl	80005f8 <__aeabi_dmul>
 801a672:	a383      	add	r3, pc, #524	; (adr r3, 801a880 <__ieee754_acos+0x298>)
 801a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a678:	f7e5 fe06 	bl	8000288 <__aeabi_dsub>
 801a67c:	4632      	mov	r2, r6
 801a67e:	463b      	mov	r3, r7
 801a680:	f7e5 ffba 	bl	80005f8 <__aeabi_dmul>
 801a684:	a380      	add	r3, pc, #512	; (adr r3, 801a888 <__ieee754_acos+0x2a0>)
 801a686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a68a:	f7e5 fdff 	bl	800028c <__adddf3>
 801a68e:	4632      	mov	r2, r6
 801a690:	463b      	mov	r3, r7
 801a692:	f7e5 ffb1 	bl	80005f8 <__aeabi_dmul>
 801a696:	a37e      	add	r3, pc, #504	; (adr r3, 801a890 <__ieee754_acos+0x2a8>)
 801a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a69c:	f7e5 fdf4 	bl	8000288 <__aeabi_dsub>
 801a6a0:	4632      	mov	r2, r6
 801a6a2:	463b      	mov	r3, r7
 801a6a4:	f7e5 ffa8 	bl	80005f8 <__aeabi_dmul>
 801a6a8:	a37b      	add	r3, pc, #492	; (adr r3, 801a898 <__ieee754_acos+0x2b0>)
 801a6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ae:	f7e5 fded 	bl	800028c <__adddf3>
 801a6b2:	4632      	mov	r2, r6
 801a6b4:	463b      	mov	r3, r7
 801a6b6:	f7e5 ff9f 	bl	80005f8 <__aeabi_dmul>
 801a6ba:	a379      	add	r3, pc, #484	; (adr r3, 801a8a0 <__ieee754_acos+0x2b8>)
 801a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6c0:	4680      	mov	r8, r0
 801a6c2:	4689      	mov	r9, r1
 801a6c4:	4630      	mov	r0, r6
 801a6c6:	4639      	mov	r1, r7
 801a6c8:	f7e5 ff96 	bl	80005f8 <__aeabi_dmul>
 801a6cc:	a376      	add	r3, pc, #472	; (adr r3, 801a8a8 <__ieee754_acos+0x2c0>)
 801a6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6d2:	f7e5 fdd9 	bl	8000288 <__aeabi_dsub>
 801a6d6:	4632      	mov	r2, r6
 801a6d8:	463b      	mov	r3, r7
 801a6da:	f7e5 ff8d 	bl	80005f8 <__aeabi_dmul>
 801a6de:	a374      	add	r3, pc, #464	; (adr r3, 801a8b0 <__ieee754_acos+0x2c8>)
 801a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6e4:	f7e5 fdd2 	bl	800028c <__adddf3>
 801a6e8:	4632      	mov	r2, r6
 801a6ea:	463b      	mov	r3, r7
 801a6ec:	f7e5 ff84 	bl	80005f8 <__aeabi_dmul>
 801a6f0:	a371      	add	r3, pc, #452	; (adr r3, 801a8b8 <__ieee754_acos+0x2d0>)
 801a6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6f6:	f7e5 fdc7 	bl	8000288 <__aeabi_dsub>
 801a6fa:	4632      	mov	r2, r6
 801a6fc:	463b      	mov	r3, r7
 801a6fe:	f7e5 ff7b 	bl	80005f8 <__aeabi_dmul>
 801a702:	4b76      	ldr	r3, [pc, #472]	; (801a8dc <__ieee754_acos+0x2f4>)
 801a704:	2200      	movs	r2, #0
 801a706:	f7e5 fdc1 	bl	800028c <__adddf3>
 801a70a:	4602      	mov	r2, r0
 801a70c:	460b      	mov	r3, r1
 801a70e:	4640      	mov	r0, r8
 801a710:	4649      	mov	r1, r9
 801a712:	f7e6 f89b 	bl	800084c <__aeabi_ddiv>
 801a716:	4622      	mov	r2, r4
 801a718:	462b      	mov	r3, r5
 801a71a:	f7e5 ff6d 	bl	80005f8 <__aeabi_dmul>
 801a71e:	4602      	mov	r2, r0
 801a720:	460b      	mov	r3, r1
 801a722:	a167      	add	r1, pc, #412	; (adr r1, 801a8c0 <__ieee754_acos+0x2d8>)
 801a724:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a728:	f7e5 fdae 	bl	8000288 <__aeabi_dsub>
 801a72c:	4602      	mov	r2, r0
 801a72e:	460b      	mov	r3, r1
 801a730:	4620      	mov	r0, r4
 801a732:	4629      	mov	r1, r5
 801a734:	f7e5 fda8 	bl	8000288 <__aeabi_dsub>
 801a738:	4602      	mov	r2, r0
 801a73a:	460b      	mov	r3, r1
 801a73c:	a162      	add	r1, pc, #392	; (adr r1, 801a8c8 <__ieee754_acos+0x2e0>)
 801a73e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a742:	f7e5 fda1 	bl	8000288 <__aeabi_dsub>
 801a746:	e771      	b.n	801a62c <__ieee754_acos+0x44>
 801a748:	2d00      	cmp	r5, #0
 801a74a:	f280 80cb 	bge.w	801a8e4 <__ieee754_acos+0x2fc>
 801a74e:	ee10 0a10 	vmov	r0, s0
 801a752:	4b62      	ldr	r3, [pc, #392]	; (801a8dc <__ieee754_acos+0x2f4>)
 801a754:	2200      	movs	r2, #0
 801a756:	4629      	mov	r1, r5
 801a758:	f7e5 fd98 	bl	800028c <__adddf3>
 801a75c:	4b60      	ldr	r3, [pc, #384]	; (801a8e0 <__ieee754_acos+0x2f8>)
 801a75e:	2200      	movs	r2, #0
 801a760:	f7e5 ff4a 	bl	80005f8 <__aeabi_dmul>
 801a764:	a342      	add	r3, pc, #264	; (adr r3, 801a870 <__ieee754_acos+0x288>)
 801a766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a76a:	4604      	mov	r4, r0
 801a76c:	460d      	mov	r5, r1
 801a76e:	f7e5 ff43 	bl	80005f8 <__aeabi_dmul>
 801a772:	a341      	add	r3, pc, #260	; (adr r3, 801a878 <__ieee754_acos+0x290>)
 801a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a778:	f7e5 fd88 	bl	800028c <__adddf3>
 801a77c:	4622      	mov	r2, r4
 801a77e:	462b      	mov	r3, r5
 801a780:	f7e5 ff3a 	bl	80005f8 <__aeabi_dmul>
 801a784:	a33e      	add	r3, pc, #248	; (adr r3, 801a880 <__ieee754_acos+0x298>)
 801a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a78a:	f7e5 fd7d 	bl	8000288 <__aeabi_dsub>
 801a78e:	4622      	mov	r2, r4
 801a790:	462b      	mov	r3, r5
 801a792:	f7e5 ff31 	bl	80005f8 <__aeabi_dmul>
 801a796:	a33c      	add	r3, pc, #240	; (adr r3, 801a888 <__ieee754_acos+0x2a0>)
 801a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a79c:	f7e5 fd76 	bl	800028c <__adddf3>
 801a7a0:	4622      	mov	r2, r4
 801a7a2:	462b      	mov	r3, r5
 801a7a4:	f7e5 ff28 	bl	80005f8 <__aeabi_dmul>
 801a7a8:	a339      	add	r3, pc, #228	; (adr r3, 801a890 <__ieee754_acos+0x2a8>)
 801a7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7ae:	f7e5 fd6b 	bl	8000288 <__aeabi_dsub>
 801a7b2:	4622      	mov	r2, r4
 801a7b4:	462b      	mov	r3, r5
 801a7b6:	f7e5 ff1f 	bl	80005f8 <__aeabi_dmul>
 801a7ba:	a337      	add	r3, pc, #220	; (adr r3, 801a898 <__ieee754_acos+0x2b0>)
 801a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7c0:	f7e5 fd64 	bl	800028c <__adddf3>
 801a7c4:	4622      	mov	r2, r4
 801a7c6:	462b      	mov	r3, r5
 801a7c8:	f7e5 ff16 	bl	80005f8 <__aeabi_dmul>
 801a7cc:	ec45 4b10 	vmov	d0, r4, r5
 801a7d0:	4680      	mov	r8, r0
 801a7d2:	4689      	mov	r9, r1
 801a7d4:	f7ff fadc 	bl	8019d90 <__ieee754_sqrt>
 801a7d8:	a331      	add	r3, pc, #196	; (adr r3, 801a8a0 <__ieee754_acos+0x2b8>)
 801a7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7de:	4620      	mov	r0, r4
 801a7e0:	4629      	mov	r1, r5
 801a7e2:	ec57 6b10 	vmov	r6, r7, d0
 801a7e6:	f7e5 ff07 	bl	80005f8 <__aeabi_dmul>
 801a7ea:	a32f      	add	r3, pc, #188	; (adr r3, 801a8a8 <__ieee754_acos+0x2c0>)
 801a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7f0:	f7e5 fd4a 	bl	8000288 <__aeabi_dsub>
 801a7f4:	4622      	mov	r2, r4
 801a7f6:	462b      	mov	r3, r5
 801a7f8:	f7e5 fefe 	bl	80005f8 <__aeabi_dmul>
 801a7fc:	a32c      	add	r3, pc, #176	; (adr r3, 801a8b0 <__ieee754_acos+0x2c8>)
 801a7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a802:	f7e5 fd43 	bl	800028c <__adddf3>
 801a806:	4622      	mov	r2, r4
 801a808:	462b      	mov	r3, r5
 801a80a:	f7e5 fef5 	bl	80005f8 <__aeabi_dmul>
 801a80e:	a32a      	add	r3, pc, #168	; (adr r3, 801a8b8 <__ieee754_acos+0x2d0>)
 801a810:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a814:	f7e5 fd38 	bl	8000288 <__aeabi_dsub>
 801a818:	4622      	mov	r2, r4
 801a81a:	462b      	mov	r3, r5
 801a81c:	f7e5 feec 	bl	80005f8 <__aeabi_dmul>
 801a820:	4b2e      	ldr	r3, [pc, #184]	; (801a8dc <__ieee754_acos+0x2f4>)
 801a822:	2200      	movs	r2, #0
 801a824:	f7e5 fd32 	bl	800028c <__adddf3>
 801a828:	4602      	mov	r2, r0
 801a82a:	460b      	mov	r3, r1
 801a82c:	4640      	mov	r0, r8
 801a82e:	4649      	mov	r1, r9
 801a830:	f7e6 f80c 	bl	800084c <__aeabi_ddiv>
 801a834:	4632      	mov	r2, r6
 801a836:	463b      	mov	r3, r7
 801a838:	f7e5 fede 	bl	80005f8 <__aeabi_dmul>
 801a83c:	a320      	add	r3, pc, #128	; (adr r3, 801a8c0 <__ieee754_acos+0x2d8>)
 801a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a842:	f7e5 fd21 	bl	8000288 <__aeabi_dsub>
 801a846:	4632      	mov	r2, r6
 801a848:	463b      	mov	r3, r7
 801a84a:	f7e5 fd1f 	bl	800028c <__adddf3>
 801a84e:	4602      	mov	r2, r0
 801a850:	460b      	mov	r3, r1
 801a852:	f7e5 fd1b 	bl	800028c <__adddf3>
 801a856:	4602      	mov	r2, r0
 801a858:	460b      	mov	r3, r1
 801a85a:	a103      	add	r1, pc, #12	; (adr r1, 801a868 <__ieee754_acos+0x280>)
 801a85c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a860:	e76f      	b.n	801a742 <__ieee754_acos+0x15a>
 801a862:	bf00      	nop
 801a864:	f3af 8000 	nop.w
 801a868:	54442d18 	.word	0x54442d18
 801a86c:	400921fb 	.word	0x400921fb
 801a870:	0dfdf709 	.word	0x0dfdf709
 801a874:	3f023de1 	.word	0x3f023de1
 801a878:	7501b288 	.word	0x7501b288
 801a87c:	3f49efe0 	.word	0x3f49efe0
 801a880:	b5688f3b 	.word	0xb5688f3b
 801a884:	3fa48228 	.word	0x3fa48228
 801a888:	0e884455 	.word	0x0e884455
 801a88c:	3fc9c155 	.word	0x3fc9c155
 801a890:	03eb6f7d 	.word	0x03eb6f7d
 801a894:	3fd4d612 	.word	0x3fd4d612
 801a898:	55555555 	.word	0x55555555
 801a89c:	3fc55555 	.word	0x3fc55555
 801a8a0:	b12e9282 	.word	0xb12e9282
 801a8a4:	3fb3b8c5 	.word	0x3fb3b8c5
 801a8a8:	1b8d0159 	.word	0x1b8d0159
 801a8ac:	3fe6066c 	.word	0x3fe6066c
 801a8b0:	9c598ac8 	.word	0x9c598ac8
 801a8b4:	40002ae5 	.word	0x40002ae5
 801a8b8:	1c8a2d4b 	.word	0x1c8a2d4b
 801a8bc:	40033a27 	.word	0x40033a27
 801a8c0:	33145c07 	.word	0x33145c07
 801a8c4:	3c91a626 	.word	0x3c91a626
 801a8c8:	54442d18 	.word	0x54442d18
 801a8cc:	3ff921fb 	.word	0x3ff921fb
 801a8d0:	3fefffff 	.word	0x3fefffff
 801a8d4:	3fdfffff 	.word	0x3fdfffff
 801a8d8:	3c600000 	.word	0x3c600000
 801a8dc:	3ff00000 	.word	0x3ff00000
 801a8e0:	3fe00000 	.word	0x3fe00000
 801a8e4:	ee10 2a10 	vmov	r2, s0
 801a8e8:	462b      	mov	r3, r5
 801a8ea:	496d      	ldr	r1, [pc, #436]	; (801aaa0 <__ieee754_acos+0x4b8>)
 801a8ec:	2000      	movs	r0, #0
 801a8ee:	f7e5 fccb 	bl	8000288 <__aeabi_dsub>
 801a8f2:	4b6c      	ldr	r3, [pc, #432]	; (801aaa4 <__ieee754_acos+0x4bc>)
 801a8f4:	2200      	movs	r2, #0
 801a8f6:	f7e5 fe7f 	bl	80005f8 <__aeabi_dmul>
 801a8fa:	4604      	mov	r4, r0
 801a8fc:	460d      	mov	r5, r1
 801a8fe:	ec45 4b10 	vmov	d0, r4, r5
 801a902:	f7ff fa45 	bl	8019d90 <__ieee754_sqrt>
 801a906:	a34e      	add	r3, pc, #312	; (adr r3, 801aa40 <__ieee754_acos+0x458>)
 801a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a90c:	4620      	mov	r0, r4
 801a90e:	4629      	mov	r1, r5
 801a910:	ec59 8b10 	vmov	r8, r9, d0
 801a914:	f7e5 fe70 	bl	80005f8 <__aeabi_dmul>
 801a918:	a34b      	add	r3, pc, #300	; (adr r3, 801aa48 <__ieee754_acos+0x460>)
 801a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a91e:	f7e5 fcb5 	bl	800028c <__adddf3>
 801a922:	4622      	mov	r2, r4
 801a924:	462b      	mov	r3, r5
 801a926:	f7e5 fe67 	bl	80005f8 <__aeabi_dmul>
 801a92a:	a349      	add	r3, pc, #292	; (adr r3, 801aa50 <__ieee754_acos+0x468>)
 801a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a930:	f7e5 fcaa 	bl	8000288 <__aeabi_dsub>
 801a934:	4622      	mov	r2, r4
 801a936:	462b      	mov	r3, r5
 801a938:	f7e5 fe5e 	bl	80005f8 <__aeabi_dmul>
 801a93c:	a346      	add	r3, pc, #280	; (adr r3, 801aa58 <__ieee754_acos+0x470>)
 801a93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a942:	f7e5 fca3 	bl	800028c <__adddf3>
 801a946:	4622      	mov	r2, r4
 801a948:	462b      	mov	r3, r5
 801a94a:	f7e5 fe55 	bl	80005f8 <__aeabi_dmul>
 801a94e:	a344      	add	r3, pc, #272	; (adr r3, 801aa60 <__ieee754_acos+0x478>)
 801a950:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a954:	f7e5 fc98 	bl	8000288 <__aeabi_dsub>
 801a958:	4622      	mov	r2, r4
 801a95a:	462b      	mov	r3, r5
 801a95c:	f7e5 fe4c 	bl	80005f8 <__aeabi_dmul>
 801a960:	a341      	add	r3, pc, #260	; (adr r3, 801aa68 <__ieee754_acos+0x480>)
 801a962:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a966:	f7e5 fc91 	bl	800028c <__adddf3>
 801a96a:	4622      	mov	r2, r4
 801a96c:	462b      	mov	r3, r5
 801a96e:	f7e5 fe43 	bl	80005f8 <__aeabi_dmul>
 801a972:	a33f      	add	r3, pc, #252	; (adr r3, 801aa70 <__ieee754_acos+0x488>)
 801a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a978:	4682      	mov	sl, r0
 801a97a:	468b      	mov	fp, r1
 801a97c:	4620      	mov	r0, r4
 801a97e:	4629      	mov	r1, r5
 801a980:	f7e5 fe3a 	bl	80005f8 <__aeabi_dmul>
 801a984:	a33c      	add	r3, pc, #240	; (adr r3, 801aa78 <__ieee754_acos+0x490>)
 801a986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a98a:	f7e5 fc7d 	bl	8000288 <__aeabi_dsub>
 801a98e:	4622      	mov	r2, r4
 801a990:	462b      	mov	r3, r5
 801a992:	f7e5 fe31 	bl	80005f8 <__aeabi_dmul>
 801a996:	a33a      	add	r3, pc, #232	; (adr r3, 801aa80 <__ieee754_acos+0x498>)
 801a998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a99c:	f7e5 fc76 	bl	800028c <__adddf3>
 801a9a0:	4622      	mov	r2, r4
 801a9a2:	462b      	mov	r3, r5
 801a9a4:	f7e5 fe28 	bl	80005f8 <__aeabi_dmul>
 801a9a8:	a337      	add	r3, pc, #220	; (adr r3, 801aa88 <__ieee754_acos+0x4a0>)
 801a9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9ae:	f7e5 fc6b 	bl	8000288 <__aeabi_dsub>
 801a9b2:	4622      	mov	r2, r4
 801a9b4:	462b      	mov	r3, r5
 801a9b6:	f7e5 fe1f 	bl	80005f8 <__aeabi_dmul>
 801a9ba:	4b39      	ldr	r3, [pc, #228]	; (801aaa0 <__ieee754_acos+0x4b8>)
 801a9bc:	2200      	movs	r2, #0
 801a9be:	f7e5 fc65 	bl	800028c <__adddf3>
 801a9c2:	4602      	mov	r2, r0
 801a9c4:	460b      	mov	r3, r1
 801a9c6:	4650      	mov	r0, sl
 801a9c8:	4659      	mov	r1, fp
 801a9ca:	f7e5 ff3f 	bl	800084c <__aeabi_ddiv>
 801a9ce:	4642      	mov	r2, r8
 801a9d0:	464b      	mov	r3, r9
 801a9d2:	f7e5 fe11 	bl	80005f8 <__aeabi_dmul>
 801a9d6:	2600      	movs	r6, #0
 801a9d8:	4682      	mov	sl, r0
 801a9da:	468b      	mov	fp, r1
 801a9dc:	4632      	mov	r2, r6
 801a9de:	464b      	mov	r3, r9
 801a9e0:	4630      	mov	r0, r6
 801a9e2:	4649      	mov	r1, r9
 801a9e4:	f7e5 fe08 	bl	80005f8 <__aeabi_dmul>
 801a9e8:	4602      	mov	r2, r0
 801a9ea:	460b      	mov	r3, r1
 801a9ec:	4620      	mov	r0, r4
 801a9ee:	4629      	mov	r1, r5
 801a9f0:	f7e5 fc4a 	bl	8000288 <__aeabi_dsub>
 801a9f4:	4632      	mov	r2, r6
 801a9f6:	4604      	mov	r4, r0
 801a9f8:	460d      	mov	r5, r1
 801a9fa:	464b      	mov	r3, r9
 801a9fc:	4640      	mov	r0, r8
 801a9fe:	4649      	mov	r1, r9
 801aa00:	f7e5 fc44 	bl	800028c <__adddf3>
 801aa04:	4602      	mov	r2, r0
 801aa06:	460b      	mov	r3, r1
 801aa08:	4620      	mov	r0, r4
 801aa0a:	4629      	mov	r1, r5
 801aa0c:	f7e5 ff1e 	bl	800084c <__aeabi_ddiv>
 801aa10:	4602      	mov	r2, r0
 801aa12:	460b      	mov	r3, r1
 801aa14:	4650      	mov	r0, sl
 801aa16:	4659      	mov	r1, fp
 801aa18:	f7e5 fc38 	bl	800028c <__adddf3>
 801aa1c:	4632      	mov	r2, r6
 801aa1e:	464b      	mov	r3, r9
 801aa20:	f7e5 fc34 	bl	800028c <__adddf3>
 801aa24:	4602      	mov	r2, r0
 801aa26:	460b      	mov	r3, r1
 801aa28:	f7e5 fc30 	bl	800028c <__adddf3>
 801aa2c:	e5fe      	b.n	801a62c <__ieee754_acos+0x44>
 801aa2e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801aa90 <__ieee754_acos+0x4a8>
 801aa32:	e5ed      	b.n	801a610 <__ieee754_acos+0x28>
 801aa34:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801aa98 <__ieee754_acos+0x4b0>
 801aa38:	e5ea      	b.n	801a610 <__ieee754_acos+0x28>
 801aa3a:	bf00      	nop
 801aa3c:	f3af 8000 	nop.w
 801aa40:	0dfdf709 	.word	0x0dfdf709
 801aa44:	3f023de1 	.word	0x3f023de1
 801aa48:	7501b288 	.word	0x7501b288
 801aa4c:	3f49efe0 	.word	0x3f49efe0
 801aa50:	b5688f3b 	.word	0xb5688f3b
 801aa54:	3fa48228 	.word	0x3fa48228
 801aa58:	0e884455 	.word	0x0e884455
 801aa5c:	3fc9c155 	.word	0x3fc9c155
 801aa60:	03eb6f7d 	.word	0x03eb6f7d
 801aa64:	3fd4d612 	.word	0x3fd4d612
 801aa68:	55555555 	.word	0x55555555
 801aa6c:	3fc55555 	.word	0x3fc55555
 801aa70:	b12e9282 	.word	0xb12e9282
 801aa74:	3fb3b8c5 	.word	0x3fb3b8c5
 801aa78:	1b8d0159 	.word	0x1b8d0159
 801aa7c:	3fe6066c 	.word	0x3fe6066c
 801aa80:	9c598ac8 	.word	0x9c598ac8
 801aa84:	40002ae5 	.word	0x40002ae5
 801aa88:	1c8a2d4b 	.word	0x1c8a2d4b
 801aa8c:	40033a27 	.word	0x40033a27
	...
 801aa98:	54442d18 	.word	0x54442d18
 801aa9c:	3ff921fb 	.word	0x3ff921fb
 801aaa0:	3ff00000 	.word	0x3ff00000
 801aaa4:	3fe00000 	.word	0x3fe00000

0801aaa8 <_init>:
 801aaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aaaa:	bf00      	nop
 801aaac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aaae:	bc08      	pop	{r3}
 801aab0:	469e      	mov	lr, r3
 801aab2:	4770      	bx	lr

0801aab4 <_fini>:
 801aab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aab6:	bf00      	nop
 801aab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aaba:	bc08      	pop	{r3}
 801aabc:	469e      	mov	lr, r3
 801aabe:	4770      	bx	lr
