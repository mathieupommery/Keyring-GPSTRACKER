
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b7a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002570  0801b938  0801b938  0002b938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dea8  0801dea8  00030308  2**0
                  CONTENTS
  4 .ARM          00000008  0801dea8  0801dea8  0002dea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801deb0  0801deb0  00030308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801deb0  0801deb0  0002deb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801deb4  0801deb4  0002deb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  0801deb8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022b4  20000308  0801e1c0  00030308  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200025bc  0801e1c0  000325bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002da2a  00000000  00000000  0003037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006465  00000000  00000000  0005dda5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002338  00000000  00000000  00064210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b0f  00000000  00000000  00066548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a43f  00000000  00000000  00068057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030ed1  00000000  00000000  00092496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8c29  00000000  00000000  000c3367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000af4c  00000000  00000000  001abf90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001b6edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000308 	.word	0x20000308
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b920 	.word	0x0801b920

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000030c 	.word	0x2000030c
 80001cc:	0801b920 	.word	0x0801b920

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <PADS_continuous_init>:


}


uint8_t PADS_continuous_init(I2C_HandleTypeDef *i2c){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]

	uint8_t ctrl_2=0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	72fb      	strb	r3, [r7, #11]
	uint8_t ctrl_1=0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	72bb      	strb	r3, [r7, #10]
	int check=0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x11, 1, &ctrl_2, 1, 100)!=HAL_OK){
 8001004:	2364      	movs	r3, #100	; 0x64
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2301      	movs	r3, #1
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	f107 030b 	add.w	r3, r7, #11
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	2211      	movs	r2, #17
 8001016:	21bb      	movs	r1, #187	; 0xbb
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f007 fdf7 	bl	8008c0c <HAL_I2C_Mem_Read>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <PADS_continuous_init+0x38>
			check=1;
 8001024:	2301      	movs	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
		}

	ctrl_2|=0b00000010;
 8001028:	7afb      	ldrb	r3, [r7, #11]
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	b2db      	uxtb	r3, r3
 8001030:	72fb      	strb	r3, [r7, #11]

	if(HAL_I2C_Mem_Write(i2c, 0xBA, 0x11, 1, &ctrl_2, 1, 100)!=HAL_OK){
 8001032:	2364      	movs	r3, #100	; 0x64
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030b 	add.w	r3, r7, #11
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2211      	movs	r2, #17
 8001044:	21ba      	movs	r1, #186	; 0xba
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f007 fccc 	bl	80089e4 <HAL_I2C_Mem_Write>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <PADS_continuous_init+0x66>
			check=1;
 8001052:	2301      	movs	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
		}

	if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x10, 1, &ctrl_1, 1, 100)!=HAL_OK){
 8001056:	2364      	movs	r3, #100	; 0x64
 8001058:	9302      	str	r3, [sp, #8]
 800105a:	2301      	movs	r3, #1
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	f107 030a 	add.w	r3, r7, #10
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	2210      	movs	r2, #16
 8001068:	21bb      	movs	r1, #187	; 0xbb
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f007 fdce 	bl	8008c0c <HAL_I2C_Mem_Read>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <PADS_continuous_init+0x8a>
				check=1;
 8001076:	2301      	movs	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
			}


	ctrl_1|=0b01001110;
 800107a:	7abb      	ldrb	r3, [r7, #10]
 800107c:	f043 034e 	orr.w	r3, r3, #78	; 0x4e
 8001080:	b2db      	uxtb	r3, r3
 8001082:	72bb      	strb	r3, [r7, #10]

	ctrl_1&=0b11001111;
 8001084:	7abb      	ldrb	r3, [r7, #10]
 8001086:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800108a:	b2db      	uxtb	r3, r3
 800108c:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Mem_Write(i2c, 0xBA, 0x10, 1, &ctrl_1, 1, 100)!=HAL_OK){
 800108e:	2364      	movs	r3, #100	; 0x64
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	2301      	movs	r3, #1
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	f107 030a 	add.w	r3, r7, #10
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	2210      	movs	r2, #16
 80010a0:	21ba      	movs	r1, #186	; 0xba
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f007 fc9e 	bl	80089e4 <HAL_I2C_Mem_Write>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <PADS_continuous_init+0xc2>
				check=1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	60fb      	str	r3, [r7, #12]
			}



	return check;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	b2db      	uxtb	r3, r3

}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <PADS_continuous_read>:

uint8_t PADS_continuous_read(I2C_HandleTypeDef *i2c){
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b08e      	sub	sp, #56	; 0x38
 80010c4:	af04      	add	r7, sp, #16
 80010c6:	6078      	str	r0, [r7, #4]
		int check=0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
		uint8_t recarray[5];
		int16_t intbuffertemp=0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	847b      	strh	r3, [r7, #34]	; 0x22
		int32_t intbufferpres=0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
		double tmoy=0;
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x28, 1, &recarray[0], 1, 100)!=HAL_OK){
 80010e0:	2364      	movs	r3, #100	; 0x64
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	2301      	movs	r3, #1
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	2228      	movs	r2, #40	; 0x28
 80010f2:	21bb      	movs	r1, #187	; 0xbb
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f007 fd89 	bl	8008c0c <HAL_I2C_Mem_Read>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <PADS_continuous_read+0x44>
			check=1;
 8001100:	2301      	movs	r3, #1
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x29, 1, &recarray[1], 1, 100)!=HAL_OK){
 8001104:	2364      	movs	r3, #100	; 0x64
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2301      	movs	r3, #1
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	3301      	adds	r3, #1
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	2229      	movs	r2, #41	; 0x29
 8001118:	21bb      	movs	r1, #187	; 0xbb
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f007 fd76 	bl	8008c0c <HAL_I2C_Mem_Read>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <PADS_continuous_read+0x6a>
			check=1;
 8001126:	2301      	movs	r3, #1
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x2A, 1, &recarray[2], 1, 100)!=HAL_OK){
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2301      	movs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	3302      	adds	r3, #2
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	222a      	movs	r2, #42	; 0x2a
 800113e:	21bb      	movs	r1, #187	; 0xbb
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f007 fd63 	bl	8008c0c <HAL_I2C_Mem_Read>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <PADS_continuous_read+0x90>
			check=1;
 800114c:	2301      	movs	r3, #1
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x2B, 1, &recarray[3], 1, 100)!=HAL_OK){
 8001150:	2364      	movs	r3, #100	; 0x64
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	3303      	adds	r3, #3
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2301      	movs	r3, #1
 8001162:	222b      	movs	r2, #43	; 0x2b
 8001164:	21bb      	movs	r1, #187	; 0xbb
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f007 fd50 	bl	8008c0c <HAL_I2C_Mem_Read>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <PADS_continuous_read+0xb6>
			check=1;
 8001172:	2301      	movs	r3, #1
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x2C, 1, &recarray[4], 1, 100)!=HAL_OK){
 8001176:	2364      	movs	r3, #100	; 0x64
 8001178:	9302      	str	r3, [sp, #8]
 800117a:	2301      	movs	r3, #1
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	3304      	adds	r3, #4
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2301      	movs	r3, #1
 8001188:	222c      	movs	r2, #44	; 0x2c
 800118a:	21bb      	movs	r1, #187	; 0xbb
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f007 fd3d 	bl	8008c0c <HAL_I2C_Mem_Read>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <PADS_continuous_read+0xdc>
			check=1;
 8001198:	2301      	movs	r3, #1
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
		}

		if(check==0){
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f040 80b0 	bne.w	8001304 <PADS_continuous_read+0x244>

		intbufferpres=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 80011a4:	7abb      	ldrb	r3, [r7, #10]
 80011a6:	041a      	lsls	r2, r3, #16
 80011a8:	7a7b      	ldrb	r3, [r7, #9]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	4313      	orrs	r3, r2
 80011ae:	7a3a      	ldrb	r2, [r7, #8]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61fb      	str	r3, [r7, #28]
		intbuffertemp=(recarray[4]<<8)|(recarray[3]);
 80011b4:	7b3b      	ldrb	r3, [r7, #12]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	7afb      	ldrb	r3, [r7, #11]
 80011bc:	b21b      	sxth	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	847b      	strh	r3, [r7, #34]	; 0x22
		finaltemp=(double)intbuffertemp*0.01;
 80011c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f9ac 	bl	8000524 <__aeabi_i2d>
 80011cc:	a362      	add	r3, pc, #392	; (adr r3, 8001358 <PADS_continuous_read+0x298>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	f7ff fa11 	bl	80005f8 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	495b      	ldr	r1, [pc, #364]	; (8001348 <PADS_continuous_read+0x288>)
 80011dc:	e9c1 2300 	strd	r2, r3, [r1]
		finalpress=(double) intbufferpres*(0.00002441406);
 80011e0:	69f8      	ldr	r0, [r7, #28]
 80011e2:	f7ff f99f 	bl	8000524 <__aeabi_i2d>
 80011e6:	a34a      	add	r3, pc, #296	; (adr r3, 8001310 <PADS_continuous_read+0x250>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff fa04 	bl	80005f8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4955      	ldr	r1, [pc, #340]	; (800134c <PADS_continuous_read+0x28c>)
 80011f6:	e9c1 2300 	strd	r2, r3, [r1]

		//alt=(double)(288.15/0.0065)*(1-pow((double)(finalpress*1000.0)/101325.0, (double)(287.05*0.0065)/(9.80665)));
		alt=(double) ((8.314*293.15)/(9.80665*0.028964))*log((double)101325.0/(finalpress*1000.0));
 80011fa:	4b54      	ldr	r3, [pc, #336]	; (800134c <PADS_continuous_read+0x28c>)
 80011fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	4b52      	ldr	r3, [pc, #328]	; (8001350 <PADS_continuous_read+0x290>)
 8001206:	f7ff f9f7 	bl	80005f8 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	a142      	add	r1, pc, #264	; (adr r1, 8001318 <PADS_continuous_read+0x258>)
 8001210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001214:	f7ff fb1a 	bl	800084c <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	ec43 2b17 	vmov	d7, r2, r3
 8001220:	eeb0 0a47 	vmov.f32	s0, s14
 8001224:	eef0 0a67 	vmov.f32	s1, s15
 8001228:	f018 fbee 	bl	8019a08 <log>
 800122c:	ec51 0b10 	vmov	r0, r1, d0
 8001230:	a33b      	add	r3, pc, #236	; (adr r3, 8001320 <PADS_continuous_read+0x260>)
 8001232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001236:	f7ff f9df 	bl	80005f8 <__aeabi_dmul>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4945      	ldr	r1, [pc, #276]	; (8001354 <PADS_continuous_read+0x294>)
 8001240:	e9c1 2300 	strd	r2, r3, [r1]
		tmoy=(double) 293.15+finaltemp+(0.0065*alt)/2;
 8001244:	4b40      	ldr	r3, [pc, #256]	; (8001348 <PADS_continuous_read+0x288>)
 8001246:	e9d3 0100 	ldrd	r0, r1, [r3]
 800124a:	a337      	add	r3, pc, #220	; (adr r3, 8001328 <PADS_continuous_read+0x268>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	f7ff f81c 	bl	800028c <__adddf3>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4614      	mov	r4, r2
 800125a:	461d      	mov	r5, r3
 800125c:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <PADS_continuous_read+0x294>)
 800125e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001262:	a333      	add	r3, pc, #204	; (adr r3, 8001330 <PADS_continuous_read+0x270>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f9c6 	bl	80005f8 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800127c:	f7ff fae6 	bl	800084c <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4620      	mov	r0, r4
 8001286:	4629      	mov	r1, r5
 8001288:	f7ff f800 	bl	800028c <__adddf3>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	e9c7 2304 	strd	r2, r3, [r7, #16]
		alt=(double) ((8.314*tmoy)/(9.80665*0.028964))*log((double)101325.0/(finalpress*1000.0));
 8001294:	a328      	add	r3, pc, #160	; (adr r3, 8001338 <PADS_continuous_read+0x278>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800129e:	f7ff f9ab 	bl	80005f8 <__aeabi_dmul>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	a325      	add	r3, pc, #148	; (adr r3, 8001340 <PADS_continuous_read+0x280>)
 80012ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b0:	f7ff facc 	bl	800084c <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4614      	mov	r4, r2
 80012ba:	461d      	mov	r5, r3
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <PADS_continuous_read+0x28c>)
 80012be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b22      	ldr	r3, [pc, #136]	; (8001350 <PADS_continuous_read+0x290>)
 80012c8:	f7ff f996 	bl	80005f8 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	a111      	add	r1, pc, #68	; (adr r1, 8001318 <PADS_continuous_read+0x258>)
 80012d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012d6:	f7ff fab9 	bl	800084c <__aeabi_ddiv>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	ec43 2b17 	vmov	d7, r2, r3
 80012e2:	eeb0 0a47 	vmov.f32	s0, s14
 80012e6:	eef0 0a67 	vmov.f32	s1, s15
 80012ea:	f018 fb8d 	bl	8019a08 <log>
 80012ee:	ec53 2b10 	vmov	r2, r3, d0
 80012f2:	4620      	mov	r0, r4
 80012f4:	4629      	mov	r1, r5
 80012f6:	f7ff f97f 	bl	80005f8 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4915      	ldr	r1, [pc, #84]	; (8001354 <PADS_continuous_read+0x294>)
 8001300:	e9c1 2300 	strd	r2, r3, [r1]



		}

		return check;
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	b2db      	uxtb	r3, r3





}
 8001308:	4618      	mov	r0, r3
 800130a:	3728      	adds	r7, #40	; 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bdb0      	pop	{r4, r5, r7, pc}
 8001310:	6d9e99d7 	.word	0x6d9e99d7
 8001314:	3ef99999 	.word	0x3ef99999
 8001318:	00000000 	.word	0x00000000
 800131c:	40f8bcd0 	.word	0x40f8bcd0
 8001320:	81a9275b 	.word	0x81a9275b
 8001324:	40c0c254 	.word	0x40c0c254
 8001328:	66666666 	.word	0x66666666
 800132c:	40725266 	.word	0x40725266
 8001330:	76c8b439 	.word	0x76c8b439
 8001334:	3f7a9fbe 	.word	0x3f7a9fbe
 8001338:	9ba5e354 	.word	0x9ba5e354
 800133c:	4020a0c4 	.word	0x4020a0c4
 8001340:	50527f89 	.word	0x50527f89
 8001344:	3fd22db5 	.word	0x3fd22db5
 8001348:	20000328 	.word	0x20000328
 800134c:	20000330 	.word	0x20000330
 8001350:	408f4000 	.word	0x408f4000
 8001354:	20000338 	.word	0x20000338
 8001358:	47ae147b 	.word	0x47ae147b
 800135c:	3f847ae1 	.word	0x3f847ae1

08001360 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001366:	463b      	mov	r3, r7
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
 8001374:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001376:	4b38      	ldr	r3, [pc, #224]	; (8001458 <MX_ADC1_Init+0xf8>)
 8001378:	4a38      	ldr	r2, [pc, #224]	; (800145c <MX_ADC1_Init+0xfc>)
 800137a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800137c:	4b36      	ldr	r3, [pc, #216]	; (8001458 <MX_ADC1_Init+0xf8>)
 800137e:	2200      	movs	r2, #0
 8001380:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <MX_ADC1_Init+0xf8>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001388:	4b33      	ldr	r3, [pc, #204]	; (8001458 <MX_ADC1_Init+0xf8>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800138e:	4b32      	ldr	r3, [pc, #200]	; (8001458 <MX_ADC1_Init+0xf8>)
 8001390:	2201      	movs	r2, #1
 8001392:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001394:	4b30      	ldr	r3, [pc, #192]	; (8001458 <MX_ADC1_Init+0xf8>)
 8001396:	2204      	movs	r2, #4
 8001398:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800139a:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <MX_ADC1_Init+0xf8>)
 800139c:	2200      	movs	r2, #0
 800139e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013a0:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <MX_ADC1_Init+0xf8>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80013a6:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <MX_ADC1_Init+0xf8>)
 80013a8:	2203      	movs	r2, #3
 80013aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ac:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <MX_ADC1_Init+0xf8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <MX_ADC1_Init+0xf8>)
 80013b6:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013bc:	4b26      	ldr	r3, [pc, #152]	; (8001458 <MX_ADC1_Init+0xf8>)
 80013be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <MX_ADC1_Init+0xf8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013cc:	4b22      	ldr	r3, [pc, #136]	; (8001458 <MX_ADC1_Init+0xf8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013d2:	4b21      	ldr	r3, [pc, #132]	; (8001458 <MX_ADC1_Init+0xf8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013da:	481f      	ldr	r0, [pc, #124]	; (8001458 <MX_ADC1_Init+0xf8>)
 80013dc:	f005 fc5a 	bl	8006c94 <HAL_ADC_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80013e6:	f000 fd16 	bl	8001e16 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <MX_ADC1_Init+0x100>)
 80013ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ee:	2306      	movs	r3, #6
 80013f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80013f2:	2307      	movs	r3, #7
 80013f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013f6:	237f      	movs	r3, #127	; 0x7f
 80013f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013fa:	2304      	movs	r3, #4
 80013fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	4619      	mov	r1, r3
 8001406:	4814      	ldr	r0, [pc, #80]	; (8001458 <MX_ADC1_Init+0xf8>)
 8001408:	f005 ffdc 	bl	80073c4 <HAL_ADC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001412:	f000 fd00 	bl	8001e16 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <MX_ADC1_Init+0x104>)
 8001418:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800141a:	230c      	movs	r3, #12
 800141c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <MX_ADC1_Init+0xf8>)
 8001424:	f005 ffce 	bl	80073c4 <HAL_ADC_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800142e:	f000 fcf2 	bl	8001e16 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <MX_ADC1_Init+0x108>)
 8001434:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001436:	2312      	movs	r3, #18
 8001438:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143a:	463b      	mov	r3, r7
 800143c:	4619      	mov	r1, r3
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <MX_ADC1_Init+0xf8>)
 8001440:	f005 ffc0 	bl	80073c4 <HAL_ADC_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800144a:	f000 fce4 	bl	8001e16 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000340 	.word	0x20000340
 800145c:	50040000 	.word	0x50040000
 8001460:	80000001 	.word	0x80000001
 8001464:	c7520000 	.word	0xc7520000
 8001468:	25b00200 	.word	0x25b00200

0800146c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a2f      	ldr	r2, [pc, #188]	; (8001548 <HAL_ADC_MspInit+0xdc>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d157      	bne.n	800153e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800148e:	4b2f      	ldr	r3, [pc, #188]	; (800154c <HAL_ADC_MspInit+0xe0>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	4a2e      	ldr	r2, [pc, #184]	; (800154c <HAL_ADC_MspInit+0xe0>)
 8001494:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149a:	4b2c      	ldr	r3, [pc, #176]	; (800154c <HAL_ADC_MspInit+0xe0>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b29      	ldr	r3, [pc, #164]	; (800154c <HAL_ADC_MspInit+0xe0>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	4a28      	ldr	r2, [pc, #160]	; (800154c <HAL_ADC_MspInit+0xe0>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b2:	4b26      	ldr	r3, [pc, #152]	; (800154c <HAL_ADC_MspInit+0xe0>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014be:	2310      	movs	r3, #16
 80014c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014c2:	230b      	movs	r3, #11
 80014c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d4:	f007 f838 	bl	8008548 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 80014da:	4a1e      	ldr	r2, [pc, #120]	; (8001554 <HAL_ADC_MspInit+0xe8>)
 80014dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 80014f2:	2280      	movs	r2, #128	; 0x80
 80014f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 80014f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 8001500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001504:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 8001508:	2200      	movs	r2, #0
 800150a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001512:	480f      	ldr	r0, [pc, #60]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 8001514:	f006 fd96 	bl	8008044 <HAL_DMA_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800151e:	f000 fc7a 	bl	8001e16 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 8001526:	64da      	str	r2, [r3, #76]	; 0x4c
 8001528:	4a09      	ldr	r2, [pc, #36]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2012      	movs	r0, #18
 8001534:	f006 fd4f 	bl	8007fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001538:	2012      	movs	r0, #18
 800153a:	f006 fd68 	bl	800800e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	; 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	50040000 	.word	0x50040000
 800154c:	40021000 	.word	0x40021000
 8001550:	200003a4 	.word	0x200003a4
 8001554:	40020008 	.word	0x40020008

08001558 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001558:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a54      	ldr	r2, [pc, #336]	; (80016b8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001568:	4293      	cmp	r3, r2
 800156a:	f040 8091 	bne.w	8001690 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 800156e:	4b53      	ldr	r3, [pc, #332]	; (80016bc <HAL_ADC_ConvCpltCallback+0x164>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffd6 	bl	8000524 <__aeabi_i2d>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	a14a      	add	r1, pc, #296	; (adr r1, 80016a8 <HAL_ADC_ConvCpltCallback+0x150>)
 800157e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001582:	f7ff f963 	bl	800084c <__aeabi_ddiv>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fb2b 	bl	8000be8 <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	4a4a      	ldr	r2, [pc, #296]	; (80016c0 <HAL_ADC_ConvCpltCallback+0x168>)
 8001596:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001598:	4b4a      	ldr	r3, [pc, #296]	; (80016c4 <HAL_ADC_ConvCpltCallback+0x16c>)
 800159a:	ed93 7a00 	vldr	s14, [r3]
 800159e:	4b4a      	ldr	r3, [pc, #296]	; (80016c8 <HAL_ADC_ConvCpltCallback+0x170>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a8:	ee17 0a90 	vmov	r0, s15
 80015ac:	f7fe ffcc 	bl	8000548 <__aeabi_f2d>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	f04f 0000 	mov.w	r0, #0
 80015b8:	4944      	ldr	r1, [pc, #272]	; (80016cc <HAL_ADC_ConvCpltCallback+0x174>)
 80015ba:	f7ff f947 	bl	800084c <__aeabi_ddiv>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4690      	mov	r8, r2
 80015c4:	4699      	mov	r9, r3
 80015c6:	4b3d      	ldr	r3, [pc, #244]	; (80016bc <HAL_ADC_ConvCpltCallback+0x164>)
 80015c8:	885b      	ldrh	r3, [r3, #2]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffaa 	bl	8000524 <__aeabi_i2d>
 80015d0:	4604      	mov	r4, r0
 80015d2:	460d      	mov	r5, r1
 80015d4:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <HAL_ADC_ConvCpltCallback+0x168>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffb5 	bl	8000548 <__aeabi_f2d>
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <HAL_ADC_ConvCpltCallback+0x178>)
 80015e4:	f7ff f932 	bl	800084c <__aeabi_ddiv>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4620      	mov	r0, r4
 80015ee:	4629      	mov	r1, r5
 80015f0:	f7ff f802 	bl	80005f8 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4614      	mov	r4, r2
 80015fa:	461d      	mov	r5, r3
 80015fc:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <HAL_ADC_ConvCpltCallback+0x170>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ffa1 	bl	8000548 <__aeabi_f2d>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4620      	mov	r0, r4
 800160c:	4629      	mov	r1, r5
 800160e:	f7fe fe3b 	bl	8000288 <__aeabi_dsub>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4640      	mov	r0, r8
 8001618:	4649      	mov	r1, r9
 800161a:	f7fe ffed 	bl	80005f8 <__aeabi_dmul>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fadf 	bl	8000be8 <__aeabi_d2f>
 800162a:	ee07 0a10 	vmov	s14, r0
 800162e:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001636:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001638:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <HAL_ADC_ConvCpltCallback+0x164>)
 800163e:	889b      	ldrh	r3, [r3, #4]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff6f 	bl	8000524 <__aeabi_i2d>
 8001646:	a31a      	add	r3, pc, #104	; (adr r3, 80016b0 <HAL_ADC_ConvCpltCallback+0x158>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7ff f8fe 	bl	800084c <__aeabi_ddiv>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	f7fe fe16 	bl	800028c <__adddf3>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4614      	mov	r4, r2
 8001666:	461d      	mov	r5, r3
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_ADC_ConvCpltCallback+0x168>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff6b 	bl	8000548 <__aeabi_f2d>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4620      	mov	r0, r4
 8001678:	4629      	mov	r1, r5
 800167a:	f7fe ffbd 	bl	80005f8 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff faaf 	bl	8000be8 <__aeabi_d2f>
 800168a:	4603      	mov	r3, r0
 800168c:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <HAL_ADC_ConvCpltCallback+0x180>)
 800168e:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001690:	2203      	movs	r2, #3
 8001692:	490a      	ldr	r1, [pc, #40]	; (80016bc <HAL_ADC_ConvCpltCallback+0x164>)
 8001694:	4811      	ldr	r0, [pc, #68]	; (80016dc <HAL_ADC_ConvCpltCallback+0x184>)
 8001696:	f005 fc3f 	bl	8006f18 <HAL_ADC_Start_DMA>



}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016a4:	f3af 8000 	nop.w
 80016a8:	d70a3d70 	.word	0xd70a3d70
 80016ac:	40b36323 	.word	0x40b36323
 80016b0:	00000000 	.word	0x00000000
 80016b4:	40affe00 	.word	0x40affe00
 80016b8:	50040000 	.word	0x50040000
 80016bc:	20000748 	.word	0x20000748
 80016c0:	20000754 	.word	0x20000754
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000004 	.word	0x20000004
 80016cc:	40590000 	.word	0x40590000
 80016d0:	40080000 	.word	0x40080000
 80016d4:	20000750 	.word	0x20000750
 80016d8:	20000758 	.word	0x20000758
 80016dc:	20000340 	.word	0x20000340

080016e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016e6:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <MX_DMA_Init+0x80>)
 80016e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ea:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <MX_DMA_Init+0x80>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6493      	str	r3, [r2, #72]	; 0x48
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <MX_DMA_Init+0x80>)
 80016f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MX_DMA_Init+0x80>)
 8001700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001702:	4a17      	ldr	r2, [pc, #92]	; (8001760 <MX_DMA_Init+0x80>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	6493      	str	r3, [r2, #72]	; 0x48
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <MX_DMA_Init+0x80>)
 800170c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	200b      	movs	r0, #11
 800171c:	f006 fc5b 	bl	8007fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001720:	200b      	movs	r0, #11
 8001722:	f006 fc74 	bl	800800e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	200c      	movs	r0, #12
 800172c:	f006 fc53 	bl	8007fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001730:	200c      	movs	r0, #12
 8001732:	f006 fc6c 	bl	800800e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	200d      	movs	r0, #13
 800173c:	f006 fc4b 	bl	8007fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001740:	200d      	movs	r0, #13
 8001742:	f006 fc64 	bl	800800e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	2045      	movs	r0, #69	; 0x45
 800174c:	f006 fc43 	bl	8007fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8001750:	2045      	movs	r0, #69	; 0x45
 8001752:	f006 fc5c 	bl	800800e <HAL_NVIC_EnableIRQ>

}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000

08001764 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	4b38      	ldr	r3, [pc, #224]	; (800185c <MX_GPIO_Init+0xf8>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	4a37      	ldr	r2, [pc, #220]	; (800185c <MX_GPIO_Init+0xf8>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001786:	4b35      	ldr	r3, [pc, #212]	; (800185c <MX_GPIO_Init+0xf8>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	4b32      	ldr	r3, [pc, #200]	; (800185c <MX_GPIO_Init+0xf8>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	4a31      	ldr	r2, [pc, #196]	; (800185c <MX_GPIO_Init+0xf8>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179e:	4b2f      	ldr	r3, [pc, #188]	; (800185c <MX_GPIO_Init+0xf8>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2102      	movs	r1, #2
 80017ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b2:	f007 f84b 	bl	800884c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2101      	movs	r1, #1
 80017ba:	4829      	ldr	r0, [pc, #164]	; (8001860 <MX_GPIO_Init+0xfc>)
 80017bc:	f007 f846 	bl	800884c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017c0:	2302      	movs	r3, #2
 80017c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	4619      	mov	r1, r3
 80017d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017da:	f006 feb5 	bl	8008548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80017de:	2301      	movs	r3, #1
 80017e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	4619      	mov	r1, r3
 80017f4:	481a      	ldr	r0, [pc, #104]	; (8001860 <MX_GPIO_Init+0xfc>)
 80017f6:	f006 fea7 	bl	8008548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017fa:	2302      	movs	r3, #2
 80017fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80017fe:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4619      	mov	r1, r3
 800180e:	4814      	ldr	r0, [pc, #80]	; (8001860 <MX_GPIO_Init+0xfc>)
 8001810:	f006 fe9a 	bl	8008548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800181a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800181e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	4619      	mov	r1, r3
 800182a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182e:	f006 fe8b 	bl	8008548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2101      	movs	r1, #1
 8001836:	2007      	movs	r0, #7
 8001838:	f006 fbcd 	bl	8007fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800183c:	2007      	movs	r0, #7
 800183e:	f006 fbe6 	bl	800800e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2102      	movs	r1, #2
 8001846:	2017      	movs	r0, #23
 8001848:	f006 fbc5 	bl	8007fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800184c:	2017      	movs	r0, #23
 800184e:	f006 fbde 	bl	800800e <HAL_NVIC_EnableIRQ>

}
 8001852:	bf00      	nop
 8001854:	3720      	adds	r7, #32
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000
 8001860:	48000400 	.word	0x48000400

08001864 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <MX_I2C1_Init+0x74>)
 800186a:	4a1c      	ldr	r2, [pc, #112]	; (80018dc <MX_I2C1_Init+0x78>)
 800186c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 800186e:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <MX_I2C1_Init+0x74>)
 8001870:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <MX_I2C1_Init+0x7c>)
 8001872:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <MX_I2C1_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <MX_I2C1_Init+0x74>)
 800187c:	2201      	movs	r2, #1
 800187e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <MX_I2C1_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_I2C1_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_I2C1_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_I2C1_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_I2C1_Init+0x74>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800189e:	480e      	ldr	r0, [pc, #56]	; (80018d8 <MX_I2C1_Init+0x74>)
 80018a0:	f007 f804 	bl	80088ac <HAL_I2C_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018aa:	f000 fab4 	bl	8001e16 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018ae:	2100      	movs	r1, #0
 80018b0:	4809      	ldr	r0, [pc, #36]	; (80018d8 <MX_I2C1_Init+0x74>)
 80018b2:	f007 fd7d 	bl	80093b0 <HAL_I2CEx_ConfigAnalogFilter>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018bc:	f000 faab 	bl	8001e16 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018c0:	2100      	movs	r1, #0
 80018c2:	4805      	ldr	r0, [pc, #20]	; (80018d8 <MX_I2C1_Init+0x74>)
 80018c4:	f007 fdbf 	bl	8009446 <HAL_I2CEx_ConfigDigitalFilter>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018ce:	f000 faa2 	bl	8001e16 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200003ec 	.word	0x200003ec
 80018dc:	40005400 	.word	0x40005400
 80018e0:	00202538 	.word	0x00202538

080018e4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <MX_I2C3_Init+0x7c>)
 80018ea:	4a1e      	ldr	r2, [pc, #120]	; (8001964 <MX_I2C3_Init+0x80>)
 80018ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100618;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <MX_I2C3_Init+0x7c>)
 80018f0:	4a1d      	ldr	r2, [pc, #116]	; (8001968 <MX_I2C3_Init+0x84>)
 80018f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <MX_I2C3_Init+0x7c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <MX_I2C3_Init+0x7c>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <MX_I2C3_Init+0x7c>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <MX_I2C3_Init+0x7c>)
 8001908:	2200      	movs	r2, #0
 800190a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_I2C3_Init+0x7c>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <MX_I2C3_Init+0x7c>)
 8001914:	2200      	movs	r2, #0
 8001916:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_I2C3_Init+0x7c>)
 800191a:	2200      	movs	r2, #0
 800191c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800191e:	4810      	ldr	r0, [pc, #64]	; (8001960 <MX_I2C3_Init+0x7c>)
 8001920:	f006 ffc4 	bl	80088ac <HAL_I2C_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800192a:	f000 fa74 	bl	8001e16 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800192e:	2100      	movs	r1, #0
 8001930:	480b      	ldr	r0, [pc, #44]	; (8001960 <MX_I2C3_Init+0x7c>)
 8001932:	f007 fd3d 	bl	80093b0 <HAL_I2CEx_ConfigAnalogFilter>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800193c:	f000 fa6b 	bl	8001e16 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001940:	2100      	movs	r1, #0
 8001942:	4807      	ldr	r0, [pc, #28]	; (8001960 <MX_I2C3_Init+0x7c>)
 8001944:	f007 fd7f 	bl	8009446 <HAL_I2CEx_ConfigDigitalFilter>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800194e:	f000 fa62 	bl	8001e16 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8001952:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001956:	f007 fdc3 	bl	80094e0 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000440 	.word	0x20000440
 8001964:	40005c00 	.word	0x40005c00
 8001968:	00100618 	.word	0x00100618

0800196c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b0a2      	sub	sp, #136	; 0x88
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001984:	f107 0320 	add.w	r3, r7, #32
 8001988:	2254      	movs	r2, #84	; 0x54
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f015 fad0 	bl	8016f32 <memset>
  if(i2cHandle->Instance==I2C1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a50      	ldr	r2, [pc, #320]	; (8001ad8 <HAL_I2C_MspInit+0x16c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d13a      	bne.n	8001a12 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800199c:	2340      	movs	r3, #64	; 0x40
 800199e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a4:	f107 0320 	add.w	r3, r7, #32
 80019a8:	4618      	mov	r0, r3
 80019aa:	f00a f9e3 	bl	800bd74 <HAL_RCCEx_PeriphCLKConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019b4:	f000 fa2f 	bl	8001e16 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	4b48      	ldr	r3, [pc, #288]	; (8001adc <HAL_I2C_MspInit+0x170>)
 80019ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019bc:	4a47      	ldr	r2, [pc, #284]	; (8001adc <HAL_I2C_MspInit+0x170>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c4:	4b45      	ldr	r3, [pc, #276]	; (8001adc <HAL_I2C_MspInit+0x170>)
 80019c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019d4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d6:	2312      	movs	r3, #18
 80019d8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019e4:	2304      	movs	r3, #4
 80019e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019ee:	4619      	mov	r1, r3
 80019f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f4:	f006 fda8 	bl	8008548 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f8:	4b38      	ldr	r3, [pc, #224]	; (8001adc <HAL_I2C_MspInit+0x170>)
 80019fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fc:	4a37      	ldr	r2, [pc, #220]	; (8001adc <HAL_I2C_MspInit+0x170>)
 80019fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a02:	6593      	str	r3, [r2, #88]	; 0x58
 8001a04:	4b35      	ldr	r3, [pc, #212]	; (8001adc <HAL_I2C_MspInit+0x170>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001a10:	e05d      	b.n	8001ace <HAL_I2C_MspInit+0x162>
  else if(i2cHandle->Instance==I2C3)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a32      	ldr	r2, [pc, #200]	; (8001ae0 <HAL_I2C_MspInit+0x174>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d158      	bne.n	8001ace <HAL_I2C_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a20:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8001a22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a26:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a28:	f107 0320 	add.w	r3, r7, #32
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f00a f9a1 	bl	800bd74 <HAL_RCCEx_PeriphCLKConfig>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001a38:	f000 f9ed 	bl	8001e16 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	4b27      	ldr	r3, [pc, #156]	; (8001adc <HAL_I2C_MspInit+0x170>)
 8001a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a40:	4a26      	ldr	r2, [pc, #152]	; (8001adc <HAL_I2C_MspInit+0x170>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a48:	4b24      	ldr	r3, [pc, #144]	; (8001adc <HAL_I2C_MspInit+0x170>)
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a54:	4b21      	ldr	r3, [pc, #132]	; (8001adc <HAL_I2C_MspInit+0x170>)
 8001a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a58:	4a20      	ldr	r2, [pc, #128]	; (8001adc <HAL_I2C_MspInit+0x170>)
 8001a5a:	f043 0302 	orr.w	r3, r3, #2
 8001a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <HAL_I2C_MspInit+0x170>)
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a70:	2312      	movs	r3, #18
 8001a72:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a7e:	2304      	movs	r3, #4
 8001a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8e:	f006 fd5b 	bl	8008548 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a92:	2310      	movs	r3, #16
 8001a94:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a96:	2312      	movs	r3, #18
 8001a98:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aaa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <HAL_I2C_MspInit+0x178>)
 8001ab2:	f006 fd49 	bl	8008548 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_I2C_MspInit+0x170>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	4a08      	ldr	r2, [pc, #32]	; (8001adc <HAL_I2C_MspInit+0x170>)
 8001abc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_I2C_MspInit+0x170>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
}
 8001ace:	bf00      	nop
 8001ad0:	3788      	adds	r7, #136	; 0x88
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40005400 	.word	0x40005400
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40005c00 	.word	0x40005c00
 8001ae4:	48000400 	.word	0x48000400

08001ae8 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_8){
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001af8:	d130      	bne.n	8001b5c <HAL_GPIO_EXTI_Callback+0x74>

		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8)== GPIO_PIN_RESET){
 8001afa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b02:	f006 fe8b 	bl	800881c <HAL_GPIO_ReadPin>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d109      	bne.n	8001b20 <HAL_GPIO_EXTI_Callback+0x38>

					boutonAtime=0;
 8001b0c:	4b2e      	ldr	r3, [pc, #184]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
					tbtn1=HAL_GetTick();
 8001b12:	f004 feb5 	bl	8006880 <HAL_GetTick>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b2c      	ldr	r3, [pc, #176]	; (8001bcc <HAL_GPIO_EXTI_Callback+0xe4>)
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	e010      	b.n	8001b42 <HAL_GPIO_EXTI_Callback+0x5a>


				}
				else{
					BTN_A++;
 8001b20:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	4a2a      	ldr	r2, [pc, #168]	; (8001bd0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001b28:	6013      	str	r3, [r2, #0]

					boutonAtime=HAL_GetTick()-tbtn1;
 8001b2a:	f004 fea9 	bl	8006880 <HAL_GetTick>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a26      	ldr	r2, [pc, #152]	; (8001bcc <HAL_GPIO_EXTI_Callback+0xe4>)
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001b3a:	601a      	str	r2, [r3, #0]
					tbtn1=0;
 8001b3c:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <HAL_GPIO_EXTI_Callback+0xe4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]


				}

				if(boutonAtime>=400){
 8001b42:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001b4a:	db07      	blt.n	8001b5c <HAL_GPIO_EXTI_Callback+0x74>
					BTN_A_LONG++;
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0xec>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3301      	adds	r3, #1
 8001b52:	4a20      	ldr	r2, [pc, #128]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0xec>)
 8001b54:	6013      	str	r3, [r2, #0]
					BTN_A=0;
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
				}

	}
	if(GPIO_Pin==GPIO_PIN_1){
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d12e      	bne.n	8001bc0 <HAL_GPIO_EXTI_Callback+0xd8>

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)== GPIO_PIN_RESET){
 8001b62:	2102      	movs	r1, #2
 8001b64:	481c      	ldr	r0, [pc, #112]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001b66:	f006 fe59 	bl	800881c <HAL_GPIO_ReadPin>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d109      	bne.n	8001b84 <HAL_GPIO_EXTI_Callback+0x9c>

			boutonBtime=0;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
			tbtn2=HAL_GetTick();
 8001b76:	f004 fe83 	bl	8006880 <HAL_GetTick>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e010      	b.n	8001ba6 <HAL_GPIO_EXTI_Callback+0xbe>


		}
		else{
			BTN_B++;
 8001b84:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	4a16      	ldr	r2, [pc, #88]	; (8001be4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001b8c:	6013      	str	r3, [r2, #0]

			boutonBtime=HAL_GetTick()-tbtn2;
 8001b8e:	f004 fe77 	bl	8006880 <HAL_GetTick>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	1a9b      	subs	r3, r3, r2
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001b9e:	601a      	str	r2, [r3, #0]
			tbtn2=0;
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]


		}

		if(boutonBtime>=400){
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001bae:	db07      	blt.n	8001bc0 <HAL_GPIO_EXTI_Callback+0xd8>
			BTN_B_LONG++;
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x100>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x100>)
 8001bb8:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
		}



	}
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000a58 	.word	0x20000a58
 8001bcc:	20000a60 	.word	0x20000a60
 8001bd0:	20000720 	.word	0x20000720
 8001bd4:	20000a6c 	.word	0x20000a6c
 8001bd8:	48000400 	.word	0x48000400
 8001bdc:	20000a5c 	.word	0x20000a5c
 8001be0:	20000a64 	.word	0x20000a64
 8001be4:	20000724 	.word	0x20000724
 8001be8:	20000a68 	.word	0x20000a68

08001bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf2:	f004 fddc 	bl	80067ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf6:	f000 f88d 	bl	8001d14 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001bfa:	f000 f8de 	bl	8001dba <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bfe:	f7ff fdb1 	bl	8001764 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c02:	f7ff fd6d 	bl	80016e0 <MX_DMA_Init>
  MX_I2C3_Init();
 8001c06:	f7ff fe6d 	bl	80018e4 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8001c0a:	f004 fc0d 	bl	8006428 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001c0e:	f7ff fba7 	bl	8001360 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001c12:	f004 f90b 	bl	8005e2c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8001c16:	f012 fc5d 	bl	80144d4 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001c1a:	f7ff fe23 	bl	8001864 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c1e:	f004 fc2f 	bl	8006480 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001c22:	f000 fd91 	bl	8002748 <MX_SPI1_Init>
  MX_TIM7_Init();
 8001c26:	f004 f985 	bl	8005f34 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001c2a:	f004 f94d 	bl	8005ec8 <MX_TIM6_Init>
  MX_TIM15_Init();
 8001c2e:	f004 f9b9 	bl	8005fa4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */



	ssd1306_Init();
 8001c32:	f001 f889 	bl	8002d48 <ssd1306_Init>

	HAL_Delay(100);
 8001c36:	2064      	movs	r0, #100	; 0x64
 8001c38:	f004 fe2e 	bl	8006898 <HAL_Delay>
	ssd1306_Fill(Black);
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f001 f8ed 	bl	8002e1c <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);
 8001c42:	2301      	movs	r3, #1
 8001c44:	9301      	str	r3, [sp, #4]
 8001c46:	2340      	movs	r3, #64	; 0x40
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2340      	movs	r3, #64	; 0x40
 8001c4c:	4a22      	ldr	r2, [pc, #136]	; (8001cd8 <main+0xec>)
 8001c4e:	2120      	movs	r1, #32
 8001c50:	2020      	movs	r0, #32
 8001c52:	f001 fbb5 	bl	80033c0 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001c56:	f001 f8f9 	bl	8002e4c <ssd1306_UpdateScreen>


	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	491f      	ldr	r1, [pc, #124]	; (8001cdc <main+0xf0>)
 8001c5e:	4820      	ldr	r0, [pc, #128]	; (8001ce0 <main+0xf4>)
 8001c60:	f005 f95a 	bl	8006f18 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8001c64:	481f      	ldr	r0, [pc, #124]	; (8001ce4 <main+0xf8>)
 8001c66:	f00b fc8f 	bl	800d588 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim15);
 8001c6a:	481f      	ldr	r0, [pc, #124]	; (8001ce8 <main+0xfc>)
 8001c6c:	f00b fcd8 	bl	800d620 <HAL_TIM_Base_Start_IT>

	HAL_UART_Abort(&hlpuart1);
 8001c70:	481e      	ldr	r0, [pc, #120]	; (8001cec <main+0x100>)
 8001c72:	f00c f971 	bl	800df58 <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8001c76:	2240      	movs	r2, #64	; 0x40
 8001c78:	491d      	ldr	r1, [pc, #116]	; (8001cf0 <main+0x104>)
 8001c7a:	481c      	ldr	r0, [pc, #112]	; (8001cec <main+0x100>)
 8001c7c:	f00c f920 	bl	800dec0 <HAL_UART_Receive_DMA>

	memset(flashread,'1',256);
 8001c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c84:	2131      	movs	r1, #49	; 0x31
 8001c86:	481b      	ldr	r0, [pc, #108]	; (8001cf4 <main+0x108>)
 8001c88:	f015 f953 	bl	8016f32 <memset>
	memset(flashwrite,'\0',256);
 8001c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c90:	2100      	movs	r1, #0
 8001c92:	4819      	ldr	r0, [pc, #100]	; (8001cf8 <main+0x10c>)
 8001c94:	f015 f94d 	bl	8016f32 <memset>
	memset((uint8_t *)bufferscreen ,'\0',50);
 8001c98:	2232      	movs	r2, #50	; 0x32
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4817      	ldr	r0, [pc, #92]	; (8001cfc <main+0x110>)
 8001c9e:	f015 f948 	bl	8016f32 <memset>

	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_0);
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	4a16      	ldr	r2, [pc, #88]	; (8001d00 <main+0x114>)
 8001ca6:	4917      	ldr	r1, [pc, #92]	; (8001d04 <main+0x118>)
 8001ca8:	4817      	ldr	r0, [pc, #92]	; (8001d08 <main+0x11c>)
 8001caa:	f012 fafa 	bl	80142a2 <SPIF_Init>

	barostatecheck=PADS_continuous_init(&hi2c1);
 8001cae:	4817      	ldr	r0, [pc, #92]	; (8001d0c <main+0x120>)
 8001cb0:	f7ff f99e 	bl	8000ff0 <PADS_continuous_init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <main+0x124>)
 8001cba:	601a      	str	r2, [r3, #0]



	getindex();
 8001cbc:	f000 ff10 	bl	8002ae0 <getindex>

	ssd1306_Fill(Black);
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f001 f8ab 	bl	8002e1c <ssd1306_Fill>

	HAL_Delay(700);
 8001cc6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001cca:	f004 fde5 	bl	8006898 <HAL_Delay>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		statemachine();
 8001cce:	f001 fddf 	bl	8003890 <statemachine>
		ssd1306_UpdateScreen();
 8001cd2:	f001 f8bb 	bl	8002e4c <ssd1306_UpdateScreen>
		statemachine();
 8001cd6:	e7fa      	b.n	8001cce <main+0xe2>
 8001cd8:	0801bc30 	.word	0x0801bc30
 8001cdc:	20000748 	.word	0x20000748
 8001ce0:	20000340 	.word	0x20000340
 8001ce4:	20000fec 	.word	0x20000fec
 8001ce8:	200010d0 	.word	0x200010d0
 8001cec:	2000111c 	.word	0x2000111c
 8001cf0:	200004a0 	.word	0x200004a0
 8001cf4:	20000870 	.word	0x20000870
 8001cf8:	20000770 	.word	0x20000770
 8001cfc:	20000994 	.word	0x20000994
 8001d00:	48000400 	.word	0x48000400
 8001d04:	20000ae0 	.word	0x20000ae0
 8001d08:	20000728 	.word	0x20000728
 8001d0c:	200003ec 	.word	0x200003ec
 8001d10:	20000fe4 	.word	0x20000fe4

08001d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b096      	sub	sp, #88	; 0x58
 8001d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	2244      	movs	r2, #68	; 0x44
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f015 f905 	bl	8016f32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d3a:	f009 f97d 	bl	800b038 <HAL_PWREx_ControlVoltageScaling>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d44:	f000 f867 	bl	8001e16 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001d48:	2310      	movs	r3, #16
 8001d4a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d54:	2360      	movs	r3, #96	; 0x60
 8001d56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d60:	2301      	movs	r3, #1
 8001d62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001d64:	2314      	movs	r3, #20
 8001d66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d68:	2307      	movs	r3, #7
 8001d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d70:	2302      	movs	r3, #2
 8001d72:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f009 f9c3 	bl	800b104 <HAL_RCC_OscConfig>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001d84:	f000 f847 	bl	8001e16 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d88:	230f      	movs	r3, #15
 8001d8a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d94:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001d98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d9e:	463b      	mov	r3, r7
 8001da0:	2102      	movs	r1, #2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f009 fdc2 	bl	800b92c <HAL_RCC_ClockConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001dae:	f000 f832 	bl	8001e16 <Error_Handler>
  }
}
 8001db2:	bf00      	nop
 8001db4:	3758      	adds	r7, #88	; 0x58
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b096      	sub	sp, #88	; 0x58
 8001dbe:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2254      	movs	r2, #84	; 0x54
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f015 f8b3 	bl	8016f32 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001dcc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001dd0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001dd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001dd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ddc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001dde:	2301      	movs	r3, #1
 8001de0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001de2:	2301      	movs	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001de6:	2318      	movs	r3, #24
 8001de8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001dea:	2307      	movs	r3, #7
 8001dec:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001dee:	2302      	movs	r3, #2
 8001df0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001df2:	2302      	movs	r3, #2
 8001df4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001df6:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001dfa:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f009 ffb8 	bl	800bd74 <HAL_RCCEx_PeriphCLKConfig>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001e0a:	f000 f804 	bl	8001e16 <Error_Handler>
  }
}
 8001e0e:	bf00      	nop
 8001e10:	3758      	adds	r7, #88	; 0x58
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e1a:	b672      	cpsid	i
}
 8001e1c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e1e:	e7fe      	b.n	8001e1e <Error_Handler+0x8>

08001e20 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7fe fa21 	bl	8000270 <strlen>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d801      	bhi.n	8001e38 <gps_checksum+0x18>
 8001e34:	2300      	movs	r3, #0
 8001e36:	e038      	b.n	8001eaa <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7fe fa19 	bl	8000270 <strlen>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	3b04      	subs	r3, #4
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fa10 	bl	8000270 <strlen>
 8001e50:	4603      	mov	r3, r0
 8001e52:	3b03      	subs	r3, #3
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	e00a      	b.n	8001e7c <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	4053      	eors	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7fe f9f7 	bl	8000270 <strlen>
 8001e82:	4603      	mov	r3, r0
 8001e84:	1f5a      	subs	r2, r3, #5
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d8ec      	bhi.n	8001e66 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8001e8c:	f107 0308 	add.w	r3, r7, #8
 8001e90:	2210      	movs	r2, #16
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f014 f873 	bl	8015f80 <strtol>
 8001e9a:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d101      	bne.n	8001ea8 <gps_checksum+0x88>
        return 1;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <gps_checksum+0x8a>
    }
    else{
        return 0;
 8001ea8:	2300      	movs	r3, #0
    }
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b0b7      	sub	sp, #220	; 0xdc
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8001ec4:	f107 0320 	add.w	r3, r7, #32
 8001ec8:	2264      	movs	r2, #100	; 0x64
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f015 f830 	bl	8016f32 <memset>
    char *marker = strtok(inputString, ",");
 8001ed2:	49c2      	ldr	r1, [pc, #776]	; (80021dc <nmea_GPGGA+0x328>)
 8001ed4:	6838      	ldr	r0, [r7, #0]
 8001ed6:	f015 f847 	bl	8016f68 <strtok>
 8001eda:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001ede:	e027      	b.n	8001f30 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001ee0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001ee4:	f7fe f9c4 	bl	8000270 <strlen>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001ef0:	1c63      	adds	r3, r4, #1
 8001ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	f013 f888 	bl	801500c <malloc>
 8001efc:	4603      	mov	r3, r0
 8001efe:	461a      	mov	r2, r3
 8001f00:	00a3      	lsls	r3, r4, #2
 8001f02:	33d8      	adds	r3, #216	; 0xd8
 8001f04:	443b      	add	r3, r7
 8001f06:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	33d8      	adds	r3, #216	; 0xd8
 8001f14:	443b      	add	r3, r7
 8001f16:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001f1a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f015 f91b 	bl	801715a <strcpy>
        marker = strtok(NULL, ",");
 8001f24:	49ad      	ldr	r1, [pc, #692]	; (80021dc <nmea_GPGGA+0x328>)
 8001f26:	2000      	movs	r0, #0
 8001f28:	f015 f81e 	bl	8016f68 <strtok>
 8001f2c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001f30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1d3      	bne.n	8001ee0 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8001f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8001f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	332c      	adds	r3, #44	; 0x2c
 8001f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f015 f902 	bl	801715a <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8001f56:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001f5a:	2b53      	cmp	r3, #83	; 0x53
 8001f5c:	d004      	beq.n	8001f68 <nmea_GPGGA+0xb4>
 8001f5e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001f62:	2b4e      	cmp	r3, #78	; 0x4e
 8001f64:	f040 8159 	bne.w	800221a <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f6e:	e010      	b.n	8001f92 <nmea_GPGGA+0xde>
 8001f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f76:	4413      	add	r3, r2
 8001f78:	7819      	ldrb	r1, [r3, #0]
 8001f7a:	f107 021c 	add.w	r2, r7, #28
 8001f7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f82:	4413      	add	r3, r2
 8001f84:	460a      	mov	r2, r1
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	ddea      	ble.n	8001f70 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001fa0:	e011      	b.n	8001fc6 <nmea_GPGGA+0x112>
 8001fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fa4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fa8:	3302      	adds	r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	7819      	ldrb	r1, [r3, #0]
 8001fae:	f107 0214 	add.w	r2, r7, #20
 8001fb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fb6:	4413      	add	r3, r2
 8001fb8:	460a      	mov	r2, r1
 8001fba:	701a      	strb	r2, [r3, #0]
 8001fbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001fc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	dde9      	ble.n	8001fa2 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	220a      	movs	r2, #10
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f013 ffd2 	bl	8015f80 <strtol>
 8001fdc:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f013 fee0 	bl	8015dac <strtof>
 8001fec:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001ff0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ff4:	ee07 3a90 	vmov	s15, r3
 8001ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ffc:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8002000:	ed9f 6a77 	vldr	s12, [pc, #476]	; 80021e0 <nmea_GPGGA+0x32c>
 8002004:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200c:	ee17 0a90 	vmov	r0, s15
 8002010:	f7fe fa9a 	bl	8000548 <__aeabi_f2d>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 800201c:	2300      	movs	r3, #0
 800201e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002022:	e010      	b.n	8002046 <nmea_GPGGA+0x192>
 8002024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002026:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800202a:	4413      	add	r3, r2
 800202c:	7819      	ldrb	r1, [r3, #0]
 800202e:	f107 0210 	add.w	r2, r7, #16
 8002032:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002036:	4413      	add	r3, r2
 8002038:	460a      	mov	r2, r1
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002040:	3301      	adds	r3, #1
 8002042:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002046:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800204a:	2b02      	cmp	r3, #2
 800204c:	ddea      	ble.n	8002024 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 800204e:	2300      	movs	r3, #0
 8002050:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002054:	e011      	b.n	800207a <nmea_GPGGA+0x1c6>
 8002056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002058:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800205c:	3303      	adds	r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	7819      	ldrb	r1, [r3, #0]
 8002062:	f107 0208 	add.w	r2, r7, #8
 8002066:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800206a:	4413      	add	r3, r2
 800206c:	460a      	mov	r2, r1
 800206e:	701a      	strb	r2, [r3, #0]
 8002070:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002074:	3301      	adds	r3, #1
 8002076:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800207a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800207e:	2b05      	cmp	r3, #5
 8002080:	dde9      	ble.n	8002056 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8002082:	f107 0310 	add.w	r3, r7, #16
 8002086:	220a      	movs	r2, #10
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f013 ff78 	bl	8015f80 <strtol>
 8002090:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8002094:	f107 0308 	add.w	r3, r7, #8
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f013 fe86 	bl	8015dac <strtof>
 80020a0:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 80020a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b0:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80020b4:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 80021e0 <nmea_GPGGA+0x32c>
 80020b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80020bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c0:	ee17 0a90 	vmov	r0, s15
 80020c4:	f7fe fa40 	bl	8000548 <__aeabi_f2d>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80020dc:	f7fe fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d176      	bne.n	80021d4 <nmea_GPGGA+0x320>
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	f04f 0300 	mov.w	r3, #0
 80020ee:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80020f2:	f7fe fce9 	bl	8000ac8 <__aeabi_dcmpeq>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d16b      	bne.n	80021d4 <nmea_GPGGA+0x320>
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	4b38      	ldr	r3, [pc, #224]	; (80021e4 <nmea_GPGGA+0x330>)
 8002102:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002106:	f7fe fce9 	bl	8000adc <__aeabi_dcmplt>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d061      	beq.n	80021d4 <nmea_GPGGA+0x320>
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	4b34      	ldr	r3, [pc, #208]	; (80021e8 <nmea_GPGGA+0x334>)
 8002116:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800211a:	f7fe fcdf 	bl	8000adc <__aeabi_dcmplt>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d057      	beq.n	80021d4 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800212a:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8002134:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800213c:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8002146:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8002148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800214a:	2100      	movs	r1, #0
 800214c:	4618      	mov	r0, r3
 800214e:	f013 fe2d 	bl	8015dac <strtof>
 8002152:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8002156:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800215a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002162:	d102      	bne.n	800216a <nmea_GPGGA+0x2b6>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	e001      	b.n	800216e <nmea_GPGGA+0x2ba>
 800216a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8002172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002174:	220a      	movs	r2, #10
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f013 ff01 	bl	8015f80 <strtol>
 800217e:	4602      	mov	r2, r0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8002184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002186:	220a      	movs	r2, #10
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f013 fef8 	bl	8015f80 <strtol>
 8002190:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8002194:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002198:	2b00      	cmp	r3, #0
 800219a:	bfcc      	ite	gt
 800219c:	2301      	movgt	r3, #1
 800219e:	2300      	movle	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 80021a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f013 fdfd 	bl	8015dac <strtof>
 80021b2:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 80021b6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80021ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c2:	d102      	bne.n	80021ca <nmea_GPGGA+0x316>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	e001      	b.n	80021ce <nmea_GPGGA+0x31a>
 80021ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80021d2:	e022      	b.n	800221a <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80021da:	e016      	b.n	800220a <nmea_GPGGA+0x356>
 80021dc:	0801b938 	.word	0x0801b938
 80021e0:	42700000 	.word	0x42700000
 80021e4:	40568000 	.word	0x40568000
 80021e8:	40668000 	.word	0x40668000
 80021ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	33d8      	adds	r3, #216	; 0xd8
 80021f4:	443b      	add	r3, r7
 80021f6:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f012 ff0e 	bl	801501c <free>
 8002200:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002204:	3301      	adds	r3, #1
 8002206:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800220a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800220e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002212:	429a      	cmp	r2, r3
 8002214:	dbea      	blt.n	80021ec <nmea_GPGGA+0x338>
            return 0;
 8002216:	2300      	movs	r3, #0
 8002218:	e019      	b.n	800224e <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002220:	e00e      	b.n	8002240 <nmea_GPGGA+0x38c>
 8002222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	33d8      	adds	r3, #216	; 0xd8
 800222a:	443b      	add	r3, r7
 800222c:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002230:	4618      	mov	r0, r3
 8002232:	f012 fef3 	bl	801501c <free>
 8002236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800223a:	3301      	adds	r3, #1
 800223c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002240:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002244:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002248:	429a      	cmp	r2, r3
 800224a:	dbea      	blt.n	8002222 <nmea_GPGGA+0x36e>
    return 1;
 800224c:	2301      	movs	r3, #1
}
 800224e:	4618      	mov	r0, r3
 8002250:	37dc      	adds	r7, #220	; 0xdc
 8002252:	46bd      	mov	sp, r7
 8002254:	bd90      	pop	{r4, r7, pc}
 8002256:	bf00      	nop

08002258 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b0a3      	sub	sp, #140	; 0x8c
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	2264      	movs	r2, #100	; 0x64
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f014 fe5e 	bl	8016f32 <memset>
    char *marker = strtok(inputString, ",");
 8002276:	493b      	ldr	r1, [pc, #236]	; (8002364 <nmea_GPGSA+0x10c>)
 8002278:	6838      	ldr	r0, [r7, #0]
 800227a:	f014 fe75 	bl	8016f68 <strtok>
 800227e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8002282:	e027      	b.n	80022d4 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002284:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002288:	f7fd fff2 	bl	8000270 <strlen>
 800228c:	4603      	mov	r3, r0
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8002294:	1c63      	adds	r3, r4, #1
 8002296:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800229a:	4610      	mov	r0, r2
 800229c:	f012 feb6 	bl	801500c <malloc>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	00a3      	lsls	r3, r4, #2
 80022a6:	3388      	adds	r3, #136	; 0x88
 80022a8:	443b      	add	r3, r7
 80022aa:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 80022ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022b2:	3b01      	subs	r3, #1
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	3388      	adds	r3, #136	; 0x88
 80022b8:	443b      	add	r3, r7
 80022ba:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80022be:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80022c2:	4618      	mov	r0, r3
 80022c4:	f014 ff49 	bl	801715a <strcpy>
        marker = strtok(NULL, ",");
 80022c8:	4926      	ldr	r1, [pc, #152]	; (8002364 <nmea_GPGSA+0x10c>)
 80022ca:	2000      	movs	r0, #0
 80022cc:	f014 fe4c 	bl	8016f68 <strtok>
 80022d0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 80022d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1d3      	bne.n	8002284 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	220a      	movs	r2, #10
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f013 fe4c 	bl	8015f80 <strtol>
 80022e8:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 80022ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	bfcc      	ite	gt
 80022f0:	2301      	movgt	r3, #1
 80022f2:	2300      	movle	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8002300:	2303      	movs	r3, #3
 8002302:	67bb      	str	r3, [r7, #120]	; 0x78
 8002304:	e00e      	b.n	8002324 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8002306:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	3388      	adds	r3, #136	; 0x88
 800230c:	443b      	add	r3, r7
 800230e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <nmea_GPGSA+0xc6>
            satelliteCount++;
 8002318:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800231a:	3301      	adds	r3, #1
 800231c:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 800231e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002320:	3301      	adds	r3, #1
 8002322:	67bb      	str	r3, [r7, #120]	; 0x78
 8002324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002326:	2b0e      	cmp	r3, #14
 8002328:	dded      	ble.n	8002306 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800232e:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8002330:	2300      	movs	r3, #0
 8002332:	677b      	str	r3, [r7, #116]	; 0x74
 8002334:	e00b      	b.n	800234e <nmea_GPGSA+0xf6>
 8002336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	3388      	adds	r3, #136	; 0x88
 800233c:	443b      	add	r3, r7
 800233e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002342:	4618      	mov	r0, r3
 8002344:	f012 fe6a 	bl	801501c <free>
 8002348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800234a:	3301      	adds	r3, #1
 800234c:	677b      	str	r3, [r7, #116]	; 0x74
 800234e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002350:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002354:	429a      	cmp	r2, r3
 8002356:	dbee      	blt.n	8002336 <nmea_GPGSA+0xde>
    return 1;
 8002358:	2301      	movs	r3, #1
}
 800235a:	4618      	mov	r0, r3
 800235c:	378c      	adds	r7, #140	; 0x8c
 800235e:	46bd      	mov	sp, r7
 8002360:	bd90      	pop	{r4, r7, pc}
 8002362:	bf00      	nop
 8002364:	0801b938 	.word	0x0801b938

08002368 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b0a1      	sub	sp, #132	; 0x84
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8002376:	f107 030c 	add.w	r3, r7, #12
 800237a:	2264      	movs	r2, #100	; 0x64
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f014 fdd7 	bl	8016f32 <memset>
    char *marker = strtok(inputString, ",");
 8002384:	4930      	ldr	r1, [pc, #192]	; (8002448 <nmea_GNRMC+0xe0>)
 8002386:	6838      	ldr	r0, [r7, #0]
 8002388:	f014 fdee 	bl	8016f68 <strtok>
 800238c:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 800238e:	e021      	b.n	80023d4 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002390:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002392:	f7fd ff6d 	bl	8000270 <strlen>
 8002396:	4603      	mov	r3, r0
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 800239c:	1c63      	adds	r3, r4, #1
 800239e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023a0:	4610      	mov	r0, r2
 80023a2:	f012 fe33 	bl	801500c <malloc>
 80023a6:	4603      	mov	r3, r0
 80023a8:	461a      	mov	r2, r3
 80023aa:	00a3      	lsls	r3, r4, #2
 80023ac:	3380      	adds	r3, #128	; 0x80
 80023ae:	443b      	add	r3, r7
 80023b0:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 80023b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023b6:	3b01      	subs	r3, #1
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	3380      	adds	r3, #128	; 0x80
 80023bc:	443b      	add	r3, r7
 80023be:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80023c2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80023c4:	4618      	mov	r0, r3
 80023c6:	f014 fec8 	bl	801715a <strcpy>
        marker = strtok(NULL, ",");
 80023ca:	491f      	ldr	r1, [pc, #124]	; (8002448 <nmea_GNRMC+0xe0>)
 80023cc:	2000      	movs	r0, #0
 80023ce:	f014 fdcb 	bl	8016f68 <strtok>
 80023d2:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 80023d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1da      	bne.n	8002390 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	2100      	movs	r1, #0
 80023de:	4618      	mov	r0, r3
 80023e0:	f013 fce4 	bl	8015dac <strtof>
 80023e4:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 80023e8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80023ea:	f7fe f8ad 	bl	8000548 <__aeabi_f2d>
 80023ee:	a314      	add	r3, pc, #80	; (adr r3, 8002440 <nmea_GNRMC+0xd8>)
 80023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f4:	f7fe fa2a 	bl	800084c <__aeabi_ddiv>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	f7fe fbf2 	bl	8000be8 <__aeabi_d2f>
 8002404:	4602      	mov	r2, r0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 800240a:	2300      	movs	r3, #0
 800240c:	677b      	str	r3, [r7, #116]	; 0x74
 800240e:	e00b      	b.n	8002428 <nmea_GNRMC+0xc0>
 8002410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	3380      	adds	r3, #128	; 0x80
 8002416:	443b      	add	r3, r7
 8002418:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800241c:	4618      	mov	r0, r3
 800241e:	f012 fdfd 	bl	801501c <free>
 8002422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002424:	3301      	adds	r3, #1
 8002426:	677b      	str	r3, [r7, #116]	; 0x74
 8002428:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800242a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800242c:	429a      	cmp	r2, r3
 800242e:	dbef      	blt.n	8002410 <nmea_GNRMC+0xa8>
    return 1;
 8002430:	2301      	movs	r3, #1
}
 8002432:	4618      	mov	r0, r3
 8002434:	3784      	adds	r7, #132	; 0x84
 8002436:	46bd      	mov	sp, r7
 8002438:	bd90      	pop	{r4, r7, pc}
 800243a:	bf00      	nop
 800243c:	f3af 8000 	nop.w
 8002440:	be76c8b4 	.word	0xbe76c8b4
 8002444:	3fff1a9f 	.word	0x3fff1a9f
 8002448:	0801b938 	.word	0x0801b938

0800244c <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8002456:	223c      	movs	r2, #60	; 0x3c
 8002458:	2100      	movs	r1, #0
 800245a:	484e      	ldr	r0, [pc, #312]	; (8002594 <nmea_parse+0x148>)
 800245c:	f014 fd69 	bl	8016f32 <memset>
    char * token = strtok(buffer, "$");
 8002460:	494d      	ldr	r1, [pc, #308]	; (8002598 <nmea_parse+0x14c>)
 8002462:	6838      	ldr	r0, [r7, #0]
 8002464:	f014 fd80 	bl	8016f68 <strtok>
 8002468:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 800246e:	e01d      	b.n	80024ac <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8002470:	6978      	ldr	r0, [r7, #20]
 8002472:	f7fd fefd 	bl	8000270 <strlen>
 8002476:	4603      	mov	r3, r0
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	693c      	ldr	r4, [r7, #16]
 800247c:	1c63      	adds	r3, r4, #1
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	4610      	mov	r0, r2
 8002482:	f012 fdc3 	bl	801500c <malloc>
 8002486:	4603      	mov	r3, r0
 8002488:	461a      	mov	r2, r3
 800248a:	4b42      	ldr	r3, [pc, #264]	; (8002594 <nmea_parse+0x148>)
 800248c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	3b01      	subs	r3, #1
 8002494:	4a3f      	ldr	r2, [pc, #252]	; (8002594 <nmea_parse+0x148>)
 8002496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249a:	6979      	ldr	r1, [r7, #20]
 800249c:	4618      	mov	r0, r3
 800249e:	f014 fe5c 	bl	801715a <strcpy>
        token = strtok(NULL, "$");
 80024a2:	493d      	ldr	r1, [pc, #244]	; (8002598 <nmea_parse+0x14c>)
 80024a4:	2000      	movs	r0, #0
 80024a6:	f014 fd5f 	bl	8016f68 <strtok>
 80024aa:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1de      	bne.n	8002470 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	e052      	b.n	800255e <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 80024b8:	4a36      	ldr	r2, [pc, #216]	; (8002594 <nmea_parse+0x148>)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c0:	4936      	ldr	r1, [pc, #216]	; (800259c <nmea_parse+0x150>)
 80024c2:	4618      	mov	r0, r3
 80024c4:	f014 fdac 	bl	8017020 <strstr>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d044      	beq.n	8002558 <nmea_parse+0x10c>
 80024ce:	4a31      	ldr	r2, [pc, #196]	; (8002594 <nmea_parse+0x148>)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fca2 	bl	8001e20 <gps_checksum>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d03a      	beq.n	8002558 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 80024e2:	4a2c      	ldr	r2, [pc, #176]	; (8002594 <nmea_parse+0x148>)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ea:	492d      	ldr	r1, [pc, #180]	; (80025a0 <nmea_parse+0x154>)
 80024ec:	4618      	mov	r0, r3
 80024ee:	f014 fd97 	bl	8017020 <strstr>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 80024f8:	4a26      	ldr	r2, [pc, #152]	; (8002594 <nmea_parse+0x148>)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002500:	4619      	mov	r1, r3
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ff30 	bl	8002368 <nmea_GNRMC>
 8002508:	e026      	b.n	8002558 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 800250a:	4a22      	ldr	r2, [pc, #136]	; (8002594 <nmea_parse+0x148>)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	4924      	ldr	r1, [pc, #144]	; (80025a4 <nmea_parse+0x158>)
 8002514:	4618      	mov	r0, r3
 8002516:	f014 fd83 	bl	8017020 <strstr>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8002520:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <nmea_parse+0x148>)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002528:	4619      	mov	r1, r3
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff fe94 	bl	8002258 <nmea_GPGSA>
 8002530:	e012      	b.n	8002558 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 8002532:	4a18      	ldr	r2, [pc, #96]	; (8002594 <nmea_parse+0x148>)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253a:	491b      	ldr	r1, [pc, #108]	; (80025a8 <nmea_parse+0x15c>)
 800253c:	4618      	mov	r0, r3
 800253e:	f014 fd6f 	bl	8017020 <strstr>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8002548:	4a12      	ldr	r2, [pc, #72]	; (8002594 <nmea_parse+0x148>)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002550:	4619      	mov	r1, r3
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff fcae 	bl	8001eb4 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3301      	adds	r3, #1
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	429a      	cmp	r2, r3
 8002564:	dba8      	blt.n	80024b8 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	e009      	b.n	8002580 <nmea_parse+0x134>
 800256c:	4a09      	ldr	r2, [pc, #36]	; (8002594 <nmea_parse+0x148>)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002574:	4618      	mov	r0, r3
 8002576:	f012 fd51 	bl	801501c <free>
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	3301      	adds	r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	429a      	cmp	r2, r3
 8002586:	dbf1      	blt.n	800256c <nmea_parse+0x120>


}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd90      	pop	{r4, r7, pc}
 8002592:	bf00      	nop
 8002594:	20000a70 	.word	0x20000a70
 8002598:	0801b93c 	.word	0x0801b93c
 800259c:	0801b940 	.word	0x0801b940
 80025a0:	0801b944 	.word	0x0801b944
 80025a4:	0801b94c 	.word	0x0801b94c
 80025a8:	0801b954 	.word	0x0801b954
 80025ac:	00000000 	.word	0x00000000

080025b0 <distancecalc>:

}



double distancecalc(double lat1, double lat2, double long1, double long2){
 80025b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025b4:	b08a      	sub	sp, #40	; 0x28
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	ed87 0b06 	vstr	d0, [r7, #24]
 80025bc:	ed87 1b04 	vstr	d1, [r7, #16]
 80025c0:	ed87 2b02 	vstr	d2, [r7, #8]
 80025c4:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 80025d4:	a358      	add	r3, pc, #352	; (adr r3, 8002738 <distancecalc+0x188>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025de:	f7fe f80b 	bl	80005f8 <__aeabi_dmul>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	ec43 2b17 	vmov	d7, r2, r3
 80025ea:	eeb0 0a47 	vmov.f32	s0, s14
 80025ee:	eef0 0a67 	vmov.f32	s1, s15
 80025f2:	f017 fb8c 	bl	8019d0e <sinl>
 80025f6:	ec55 4b10 	vmov	r4, r5, d0
 80025fa:	a34f      	add	r3, pc, #316	; (adr r3, 8002738 <distancecalc+0x188>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002604:	f7fd fff8 	bl	80005f8 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	ec43 2b17 	vmov	d7, r2, r3
 8002610:	eeb0 0a47 	vmov.f32	s0, s14
 8002614:	eef0 0a67 	vmov.f32	s1, s15
 8002618:	f017 fb79 	bl	8019d0e <sinl>
 800261c:	ec53 2b10 	vmov	r2, r3, d0
 8002620:	4620      	mov	r0, r4
 8002622:	4629      	mov	r1, r5
 8002624:	f7fd ffe8 	bl	80005f8 <__aeabi_dmul>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4614      	mov	r4, r2
 800262e:	461d      	mov	r5, r3
 8002630:	a341      	add	r3, pc, #260	; (adr r3, 8002738 <distancecalc+0x188>)
 8002632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002636:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800263a:	f7fd ffdd 	bl	80005f8 <__aeabi_dmul>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	ec43 2b17 	vmov	d7, r2, r3
 8002646:	eeb0 0a47 	vmov.f32	s0, s14
 800264a:	eef0 0a67 	vmov.f32	s1, s15
 800264e:	f017 fb5c 	bl	8019d0a <cosl>
 8002652:	ec59 8b10 	vmov	r8, r9, d0
 8002656:	a338      	add	r3, pc, #224	; (adr r3, 8002738 <distancecalc+0x188>)
 8002658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002660:	f7fd ffca 	bl	80005f8 <__aeabi_dmul>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	ec43 2b17 	vmov	d7, r2, r3
 800266c:	eeb0 0a47 	vmov.f32	s0, s14
 8002670:	eef0 0a67 	vmov.f32	s1, s15
 8002674:	f017 fb49 	bl	8019d0a <cosl>
 8002678:	ec53 2b10 	vmov	r2, r3, d0
 800267c:	4640      	mov	r0, r8
 800267e:	4649      	mov	r1, r9
 8002680:	f7fd ffba 	bl	80005f8 <__aeabi_dmul>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4690      	mov	r8, r2
 800268a:	4699      	mov	r9, r3
 800268c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002690:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002694:	f7fd fdf8 	bl	8000288 <__aeabi_dsub>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	a325      	add	r3, pc, #148	; (adr r3, 8002738 <distancecalc+0x188>)
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	f7fd ffa7 	bl	80005f8 <__aeabi_dmul>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	ec43 2b17 	vmov	d7, r2, r3
 80026b2:	eeb0 0a47 	vmov.f32	s0, s14
 80026b6:	eef0 0a67 	vmov.f32	s1, s15
 80026ba:	f017 fb26 	bl	8019d0a <cosl>
 80026be:	ec53 2b10 	vmov	r2, r3, d0
 80026c2:	4640      	mov	r0, r8
 80026c4:	4649      	mov	r1, r9
 80026c6:	f7fd ff97 	bl	80005f8 <__aeabi_dmul>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4620      	mov	r0, r4
 80026d0:	4629      	mov	r1, r5
 80026d2:	f7fd fddb 	bl	800028c <__adddf3>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	ec43 2b17 	vmov	d7, r2, r3
 80026de:	eeb0 1a47 	vmov.f32	s2, s14
 80026e2:	eef0 1a67 	vmov.f32	s3, s15
 80026e6:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002730 <distancecalc+0x180>
 80026ea:	f017 faaf 	bl	8019c4c <fmin>
 80026ee:	eeb0 7a40 	vmov.f32	s14, s0
 80026f2:	eef0 7a60 	vmov.f32	s15, s1
 80026f6:	eeb0 0a47 	vmov.f32	s0, s14
 80026fa:	eef0 0a67 	vmov.f32	s1, s15
 80026fe:	f017 fb08 	bl	8019d12 <acosl>
 8002702:	ec51 0b10 	vmov	r0, r1, d0
 8002706:	a30e      	add	r3, pc, #56	; (adr r3, 8002740 <distancecalc+0x190>)
 8002708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270c:	f7fd ff74 	bl	80005f8 <__aeabi_dmul>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 8002718:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800271c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002720:	eeb0 0a47 	vmov.f32	s0, s14
 8002724:	eef0 0a67 	vmov.f32	s1, s15
 8002728:	3728      	adds	r7, #40	; 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002730:	00000000 	.word	0x00000000
 8002734:	3ff00000 	.word	0x3ff00000
 8002738:	a2529d39 	.word	0xa2529d39
 800273c:	3f91df46 	.word	0x3f91df46
 8002740:	00000000 	.word	0x00000000
 8002744:	41584dae 	.word	0x41584dae

08002748 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800274c:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <MX_SPI1_Init+0x74>)
 800274e:	4a1c      	ldr	r2, [pc, #112]	; (80027c0 <MX_SPI1_Init+0x78>)
 8002750:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002752:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <MX_SPI1_Init+0x74>)
 8002754:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002758:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <MX_SPI1_Init+0x74>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002760:	4b16      	ldr	r3, [pc, #88]	; (80027bc <MX_SPI1_Init+0x74>)
 8002762:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002766:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002768:	4b14      	ldr	r3, [pc, #80]	; (80027bc <MX_SPI1_Init+0x74>)
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <MX_SPI1_Init+0x74>)
 8002770:	2200      	movs	r2, #0
 8002772:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <MX_SPI1_Init+0x74>)
 8002776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800277a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <MX_SPI1_Init+0x74>)
 800277e:	2210      	movs	r2, #16
 8002780:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <MX_SPI1_Init+0x74>)
 8002784:	2200      	movs	r2, #0
 8002786:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <MX_SPI1_Init+0x74>)
 800278a:	2200      	movs	r2, #0
 800278c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <MX_SPI1_Init+0x74>)
 8002790:	2200      	movs	r2, #0
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002794:	4b09      	ldr	r3, [pc, #36]	; (80027bc <MX_SPI1_Init+0x74>)
 8002796:	2207      	movs	r2, #7
 8002798:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <MX_SPI1_Init+0x74>)
 800279c:	2200      	movs	r2, #0
 800279e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <MX_SPI1_Init+0x74>)
 80027a2:	2208      	movs	r2, #8
 80027a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027a6:	4805      	ldr	r0, [pc, #20]	; (80027bc <MX_SPI1_Init+0x74>)
 80027a8:	f009 fdcc 	bl	800c344 <HAL_SPI_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80027b2:	f7ff fb30 	bl	8001e16 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000ae0 	.word	0x20000ae0
 80027c0:	40013000 	.word	0x40013000

080027c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a53      	ldr	r2, [pc, #332]	; (8002930 <HAL_SPI_MspInit+0x16c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	f040 809f 	bne.w	8002926 <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027e8:	4b52      	ldr	r3, [pc, #328]	; (8002934 <HAL_SPI_MspInit+0x170>)
 80027ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ec:	4a51      	ldr	r2, [pc, #324]	; (8002934 <HAL_SPI_MspInit+0x170>)
 80027ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027f2:	6613      	str	r3, [r2, #96]	; 0x60
 80027f4:	4b4f      	ldr	r3, [pc, #316]	; (8002934 <HAL_SPI_MspInit+0x170>)
 80027f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002800:	4b4c      	ldr	r3, [pc, #304]	; (8002934 <HAL_SPI_MspInit+0x170>)
 8002802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002804:	4a4b      	ldr	r2, [pc, #300]	; (8002934 <HAL_SPI_MspInit+0x170>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800280c:	4b49      	ldr	r3, [pc, #292]	; (8002934 <HAL_SPI_MspInit+0x170>)
 800280e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002818:	4b46      	ldr	r3, [pc, #280]	; (8002934 <HAL_SPI_MspInit+0x170>)
 800281a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281c:	4a45      	ldr	r2, [pc, #276]	; (8002934 <HAL_SPI_MspInit+0x170>)
 800281e:	f043 0302 	orr.w	r3, r3, #2
 8002822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002824:	4b43      	ldr	r3, [pc, #268]	; (8002934 <HAL_SPI_MspInit+0x170>)
 8002826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002830:	2360      	movs	r3, #96	; 0x60
 8002832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283c:	2303      	movs	r3, #3
 800283e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002840:	2305      	movs	r3, #5
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	4619      	mov	r1, r3
 800284a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800284e:	f005 fe7b 	bl	8008548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002852:	2320      	movs	r3, #32
 8002854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285e:	2303      	movs	r3, #3
 8002860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002862:	2305      	movs	r3, #5
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	4832      	ldr	r0, [pc, #200]	; (8002938 <HAL_SPI_MspInit+0x174>)
 800286e:	f005 fe6b 	bl	8008548 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002872:	4b32      	ldr	r3, [pc, #200]	; (800293c <HAL_SPI_MspInit+0x178>)
 8002874:	4a32      	ldr	r2, [pc, #200]	; (8002940 <HAL_SPI_MspInit+0x17c>)
 8002876:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8002878:	4b30      	ldr	r3, [pc, #192]	; (800293c <HAL_SPI_MspInit+0x178>)
 800287a:	2201      	movs	r2, #1
 800287c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800287e:	4b2f      	ldr	r3, [pc, #188]	; (800293c <HAL_SPI_MspInit+0x178>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002884:	4b2d      	ldr	r3, [pc, #180]	; (800293c <HAL_SPI_MspInit+0x178>)
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800288a:	4b2c      	ldr	r3, [pc, #176]	; (800293c <HAL_SPI_MspInit+0x178>)
 800288c:	2280      	movs	r2, #128	; 0x80
 800288e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002890:	4b2a      	ldr	r3, [pc, #168]	; (800293c <HAL_SPI_MspInit+0x178>)
 8002892:	2200      	movs	r2, #0
 8002894:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002896:	4b29      	ldr	r3, [pc, #164]	; (800293c <HAL_SPI_MspInit+0x178>)
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800289c:	4b27      	ldr	r3, [pc, #156]	; (800293c <HAL_SPI_MspInit+0x178>)
 800289e:	2200      	movs	r2, #0
 80028a0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028a2:	4b26      	ldr	r3, [pc, #152]	; (800293c <HAL_SPI_MspInit+0x178>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80028a8:	4824      	ldr	r0, [pc, #144]	; (800293c <HAL_SPI_MspInit+0x178>)
 80028aa:	f005 fbcb 	bl	8008044 <HAL_DMA_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 80028b4:	f7ff faaf 	bl	8001e16 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a20      	ldr	r2, [pc, #128]	; (800293c <HAL_SPI_MspInit+0x178>)
 80028bc:	659a      	str	r2, [r3, #88]	; 0x58
 80028be:	4a1f      	ldr	r2, [pc, #124]	; (800293c <HAL_SPI_MspInit+0x178>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80028c4:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <HAL_SPI_MspInit+0x180>)
 80028c6:	4a20      	ldr	r2, [pc, #128]	; (8002948 <HAL_SPI_MspInit+0x184>)
 80028c8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80028ca:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <HAL_SPI_MspInit+0x180>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028d0:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <HAL_SPI_MspInit+0x180>)
 80028d2:	2210      	movs	r2, #16
 80028d4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d6:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_SPI_MspInit+0x180>)
 80028d8:	2200      	movs	r2, #0
 80028da:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028dc:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_SPI_MspInit+0x180>)
 80028de:	2280      	movs	r2, #128	; 0x80
 80028e0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <HAL_SPI_MspInit+0x180>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e8:	4b16      	ldr	r3, [pc, #88]	; (8002944 <HAL_SPI_MspInit+0x180>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80028ee:	4b15      	ldr	r3, [pc, #84]	; (8002944 <HAL_SPI_MspInit+0x180>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_SPI_MspInit+0x180>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80028fa:	4812      	ldr	r0, [pc, #72]	; (8002944 <HAL_SPI_MspInit+0x180>)
 80028fc:	f005 fba2 	bl	8008044 <HAL_DMA_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_SPI_MspInit+0x146>
    {
      Error_Handler();
 8002906:	f7ff fa86 	bl	8001e16 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <HAL_SPI_MspInit+0x180>)
 800290e:	655a      	str	r2, [r3, #84]	; 0x54
 8002910:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <HAL_SPI_MspInit+0x180>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	2023      	movs	r0, #35	; 0x23
 800291c:	f005 fb5b 	bl	8007fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002920:	2023      	movs	r0, #35	; 0x23
 8002922:	f005 fb74 	bl	800800e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002926:	bf00      	nop
 8002928:	3728      	adds	r7, #40	; 0x28
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40013000 	.word	0x40013000
 8002934:	40021000 	.word	0x40021000
 8002938:	48000400 	.word	0x48000400
 800293c:	20000b44 	.word	0x20000b44
 8002940:	4002001c 	.word	0x4002001c
 8002944:	20000b8c 	.word	0x20000b8c
 8002948:	40020030 	.word	0x40020030
 800294c:	00000000 	.word	0x00000000

08002950 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 8002950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002954:	ed2d 8b02 	vpush	{d8}
 8002958:	b0a7      	sub	sp, #156	; 0x9c
 800295a:	af16      	add	r7, sp, #88	; 0x58
 800295c:	6378      	str	r0, [r7, #52]	; 0x34
 800295e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
 8002962:	edc7 0a0b 	vstr	s1, [r7, #44]	; 0x2c
 8002966:	62b9      	str	r1, [r7, #40]	; 0x28
 8002968:	627a      	str	r2, [r7, #36]	; 0x24
 800296a:	ed87 1a08 	vstr	s2, [r7, #32]
	int framesize=0;
 800296e:	2300      	movs	r3, #0
 8002970:	63fb      	str	r3, [r7, #60]	; 0x3c
	framesize=snprintf((uint8_t*)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 8002972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002974:	f7fd fde8 	bl	8000548 <__aeabi_f2d>
 8002978:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800297c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800297e:	f7fd fde3 	bl	8000548 <__aeabi_f2d>
 8002982:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	4618      	mov	r0, r3
 800298c:	f7fd fddc 	bl	8000548 <__aeabi_f2d>
 8002990:	a332      	add	r3, pc, #200	; (adr r3, 8002a5c <csvframe+0x10c>)
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f7fd fe2f 	bl	80005f8 <__aeabi_dmul>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	ec43 2b18 	vmov	d8, r2, r3
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80029a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029aa:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fd fdc8 	bl	8000548 <__aeabi_f2d>
 80029b8:	4682      	mov	sl, r0
 80029ba:	468b      	mov	fp, r1
 80029bc:	6a38      	ldr	r0, [r7, #32]
 80029be:	f7fd fdc3 	bl	8000548 <__aeabi_f2d>
 80029c2:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <csvframe+0xf0>)
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <csvframe+0xf4>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	4b1e      	ldr	r3, [pc, #120]	; (8002a48 <csvframe+0xf8>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <csvframe+0xfc>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	461e      	mov	r6, r3
 80029da:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <csvframe+0x100>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <csvframe+0x104>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	9315      	str	r3, [sp, #84]	; 0x54
 80029e6:	9214      	str	r2, [sp, #80]	; 0x50
 80029e8:	9613      	str	r6, [sp, #76]	; 0x4c
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	9212      	str	r2, [sp, #72]	; 0x48
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	9211      	str	r2, [sp, #68]	; 0x44
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	9310      	str	r3, [sp, #64]	; 0x40
 80029f6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	930c      	str	r3, [sp, #48]	; 0x30
 80029fe:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002a02:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002a06:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002a0a:	ed8d 8b04 	vstr	d8, [sp, #16]
 8002a0e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a12:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002a16:	ed97 7b06 	vldr	d7, [r7, #24]
 8002a1a:	ed8d 7b00 	vstr	d7, [sp]
 8002a1e:	4a0e      	ldr	r2, [pc, #56]	; (8002a58 <csvframe+0x108>)
 8002a20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a26:	f014 f9ed 	bl	8016e04 <sniprintf>
 8002a2a:	63f8      	str	r0, [r7, #60]	; 0x3c
	return framesize;
 8002a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3744      	adds	r7, #68	; 0x44
 8002a32:	46bd      	mov	sp, r7
 8002a34:	ecbd 8b02 	vpop	{d8}
 8002a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a3c:	f3af 8000 	nop.w
 8002a40:	2000000a 	.word	0x2000000a
 8002a44:	20000009 	.word	0x20000009
 8002a48:	20000008 	.word	0x20000008
 8002a4c:	20000a55 	.word	0x20000a55
 8002a50:	20000a56 	.word	0x20000a56
 8002a54:	20000a54 	.word	0x20000a54
 8002a58:	0801b95c 	.word	0x0801b95c
 8002a5c:	cccccccd 	.word	0xcccccccd
 8002a60:	400ccccc 	.word	0x400ccccc

08002a64 <storeindex>:


void storeindex(void){
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b09c      	sub	sp, #112	; 0x70
 8002a68:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 8002a6a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002a6e:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8002a70:	463b      	mov	r3, r7
 8002a72:	2264      	movs	r2, #100	; 0x64
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f014 fa5b 	bl	8016f32 <memset>
	snprintf((uint8_t*)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <storeindex+0x6c>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <storeindex+0x70>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4638      	mov	r0, r7
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	4a13      	ldr	r2, [pc, #76]	; (8002ad8 <storeindex+0x74>)
 8002a8c:	2164      	movs	r1, #100	; 0x64
 8002a8e:	f014 f9b9 	bl	8016e04 <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8002a92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	da00      	bge.n	8002a9a <storeindex+0x36>
 8002a98:	330f      	adds	r3, #15
 8002a9a:	111b      	asrs	r3, r3, #4
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fd41 	bl	8000524 <__aeabi_i2d>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f7fe f855 	bl	8000b58 <__aeabi_d2iz>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	480a      	ldr	r0, [pc, #40]	; (8002adc <storeindex+0x78>)
 8002ab4:	f011 fc41 	bl	801433a <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8002ab8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002aba:	463a      	mov	r2, r7
 8002abc:	2300      	movs	r3, #0
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2364      	movs	r3, #100	; 0x64
 8002ac2:	4806      	ldr	r0, [pc, #24]	; (8002adc <storeindex+0x78>)
 8002ac4:	f011 fcbc 	bl	8014440 <SPIF_WritePage>

}
 8002ac8:	bf00      	nop
 8002aca:	3768      	adds	r7, #104	; 0x68
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000970 	.word	0x20000970
 8002ad4:	20000974 	.word	0x20000974
 8002ad8:	0801b9b0 	.word	0x0801b9b0
 8002adc:	20000728 	.word	0x20000728

08002ae0 <getindex>:

void getindex(void){
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8002ae6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002aea:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	2300      	movs	r3, #0
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	2332      	movs	r3, #50	; 0x32
 8002af4:	4a2b      	ldr	r2, [pc, #172]	; (8002ba4 <getindex+0xc4>)
 8002af6:	482c      	ldr	r0, [pc, #176]	; (8002ba8 <getindex+0xc8>)
 8002af8:	f011 fcc0 	bl	801447c <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 8002afc:	220a      	movs	r2, #10
 8002afe:	2124      	movs	r1, #36	; 0x24
 8002b00:	482a      	ldr	r0, [pc, #168]	; (8002bac <getindex+0xcc>)
 8002b02:	f014 fa16 	bl	8016f32 <memset>
	memset(numbuf2,'$',10);
 8002b06:	220a      	movs	r2, #10
 8002b08:	2124      	movs	r1, #36	; 0x24
 8002b0a:	4829      	ldr	r0, [pc, #164]	; (8002bb0 <getindex+0xd0>)
 8002b0c:	f014 fa11 	bl	8016f32 <memset>
	int cnt=0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8002b14:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <getindex+0xc4>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	2b09      	cmp	r3, #9
 8002b1e:	dc3a      	bgt.n	8002b96 <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8002b20:	e00b      	b.n	8002b3a <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 8002b22:	4a20      	ldr	r2, [pc, #128]	; (8002ba4 <getindex+0xc4>)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4413      	add	r3, r2
 8002b28:	7819      	ldrb	r1, [r3, #0]
 8002b2a:	4a20      	ldr	r2, [pc, #128]	; (8002bac <getindex+0xcc>)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	460a      	mov	r2, r1
 8002b32:	701a      	strb	r2, [r3, #0]
			  cnt++;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3301      	adds	r3, #1
 8002b38:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 8002b3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ba4 <getindex+0xc4>)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b24      	cmp	r3, #36	; 0x24
 8002b44:	d1ed      	bne.n	8002b22 <getindex+0x42>
		  }
		  cnt++;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8002b50:	e00e      	b.n	8002b70 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8002b52:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <getindex+0xc4>)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	7819      	ldrb	r1, [r3, #0]
 8002b5a:	4a15      	ldr	r2, [pc, #84]	; (8002bb0 <getindex+0xd0>)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4413      	add	r3, r2
 8002b60:	460a      	mov	r2, r1
 8002b62:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	3301      	adds	r3, #1
 8002b68:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8002b70:	4a0c      	ldr	r2, [pc, #48]	; (8002ba4 <getindex+0xc4>)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4413      	add	r3, r2
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b24      	cmp	r3, #36	; 0x24
 8002b7a:	d1ea      	bne.n	8002b52 <getindex+0x72>
		  	  }

		 pageoffset=atoi((uint8_t*)numbuf1);
 8002b7c:	480b      	ldr	r0, [pc, #44]	; (8002bac <getindex+0xcc>)
 8002b7e:	f012 fa41 	bl	8015004 <atoi>
 8002b82:	4603      	mov	r3, r0
 8002b84:	4a0b      	ldr	r2, [pc, #44]	; (8002bb4 <getindex+0xd4>)
 8002b86:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((uint8_t*)numbuf2);
 8002b88:	4809      	ldr	r0, [pc, #36]	; (8002bb0 <getindex+0xd0>)
 8002b8a:	f012 fa3b 	bl	8015004 <atoi>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <getindex+0xd8>)
 8002b92:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8002b94:	e001      	b.n	8002b9a <getindex+0xba>
		storeindex();
 8002b96:	f7ff ff65 	bl	8002a64 <storeindex>
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000aac 	.word	0x20000aac
 8002ba8:	20000728 	.word	0x20000728
 8002bac:	2000097c 	.word	0x2000097c
 8002bb0:	20000988 	.word	0x20000988
 8002bb4:	20000970 	.word	0x20000970
 8002bb8:	20000974 	.word	0x20000974

08002bbc <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 8002bc6:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <writebuffertoflash+0x108>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f003 030f 	and.w	r3, r3, #15
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d11b      	bne.n	8002c0c <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8002bd4:	4b3c      	ldr	r3, [pc, #240]	; (8002cc8 <writebuffertoflash+0x10c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d117      	bne.n	8002c0c <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8002bdc:	4b39      	ldr	r3, [pc, #228]	; (8002cc4 <writebuffertoflash+0x108>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3301      	adds	r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	da00      	bge.n	8002be8 <writebuffertoflash+0x2c>
 8002be6:	330f      	adds	r3, #15
 8002be8:	111b      	asrs	r3, r3, #4
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fd fc9a 	bl	8000524 <__aeabi_i2d>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f7fd ffae 	bl	8000b58 <__aeabi_d2iz>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4832      	ldr	r0, [pc, #200]	; (8002ccc <writebuffertoflash+0x110>)
 8002c02:	f011 fb9a 	bl	801433a <SPIF_EraseSector>
		sectoreraseen=1;
 8002c06:	4b30      	ldr	r3, [pc, #192]	; (8002cc8 <writebuffertoflash+0x10c>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8002c0c:	4b30      	ldr	r3, [pc, #192]	; (8002cd0 <writebuffertoflash+0x114>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4413      	add	r3, r2
 8002c14:	2bff      	cmp	r3, #255	; 0xff
 8002c16:	dc11      	bgt.n	8002c3c <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8002c18:	4b2a      	ldr	r3, [pc, #168]	; (8002cc4 <writebuffertoflash+0x108>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	4a2b      	ldr	r2, [pc, #172]	; (8002cd0 <writebuffertoflash+0x114>)
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	9200      	str	r2, [sp, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	4828      	ldr	r0, [pc, #160]	; (8002ccc <writebuffertoflash+0x110>)
 8002c2a:	f011 fc09 	bl	8014440 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8002c2e:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <writebuffertoflash+0x114>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	4413      	add	r3, r2
 8002c36:	4a26      	ldr	r2, [pc, #152]	; (8002cd0 <writebuffertoflash+0x114>)
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e03c      	b.n	8002cb6 <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 8002c3c:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <writebuffertoflash+0x108>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4619      	mov	r1, r3
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <writebuffertoflash+0x114>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <writebuffertoflash+0x114>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	4613      	mov	r3, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	481d      	ldr	r0, [pc, #116]	; (8002ccc <writebuffertoflash+0x110>)
 8002c58:	f011 fbf2 	bl	8014440 <SPIF_WritePage>
		HAL_Delay(100);
 8002c5c:	2064      	movs	r0, #100	; 0x64
 8002c5e:	f003 fe1b 	bl	8006898 <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8002c62:	4b18      	ldr	r3, [pc, #96]	; (8002cc4 <writebuffertoflash+0x108>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	4618      	mov	r0, r3
 8002c6a:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <writebuffertoflash+0x114>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002c72:	461a      	mov	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	1899      	adds	r1, r3, r2
 8002c78:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <writebuffertoflash+0x114>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	2300      	movs	r3, #0
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	460a      	mov	r2, r1
 8002c8e:	4601      	mov	r1, r0
 8002c90:	480e      	ldr	r0, [pc, #56]	; (8002ccc <writebuffertoflash+0x110>)
 8002c92:	f011 fbd5 	bl	8014440 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 8002c96:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <writebuffertoflash+0x108>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <writebuffertoflash+0x108>)
 8002c9e:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <writebuffertoflash+0x10c>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <writebuffertoflash+0x114>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	4a07      	ldr	r2, [pc, #28]	; (8002cd0 <writebuffertoflash+0x114>)
 8002cb4:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 8002cb6:	f7ff fed5 	bl	8002a64 <storeindex>

}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000974 	.word	0x20000974
 8002cc8:	20000978 	.word	0x20000978
 8002ccc:	20000728 	.word	0x20000728
 8002cd0:	20000970 	.word	0x20000970

08002cd4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern char str[20];

void ssd1306_Reset(void) {
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af04      	add	r7, sp, #16
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf2:	9302      	str	r3, [sp, #8]
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	9301      	str	r3, [sp, #4]
 8002cf8:	1dfb      	adds	r3, r7, #7
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2178      	movs	r1, #120	; 0x78
 8002d02:	4803      	ldr	r0, [pc, #12]	; (8002d10 <ssd1306_WriteCommand+0x2c>)
 8002d04:	f005 fe6e 	bl	80089e4 <HAL_I2C_Mem_Write>
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20000440 	.word	0x20000440

08002d14 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af04      	add	r7, sp, #16
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f04f 32ff 	mov.w	r2, #4294967295
 8002d26:	9202      	str	r2, [sp, #8]
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2301      	movs	r3, #1
 8002d30:	2240      	movs	r2, #64	; 0x40
 8002d32:	2178      	movs	r1, #120	; 0x78
 8002d34:	4803      	ldr	r0, [pc, #12]	; (8002d44 <ssd1306_WriteData+0x30>)
 8002d36:	f005 fe55 	bl	80089e4 <HAL_I2C_Mem_Write>
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000440 	.word	0x20000440

08002d48 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002d4c:	f7ff ffc2 	bl	8002cd4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002d50:	2064      	movs	r0, #100	; 0x64
 8002d52:	f003 fda1 	bl	8006898 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002d56:	2000      	movs	r0, #0
 8002d58:	f000 fba0 	bl	800349c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002d5c:	2020      	movs	r0, #32
 8002d5e:	f7ff ffc1 	bl	8002ce4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002d62:	2000      	movs	r0, #0
 8002d64:	f7ff ffbe 	bl	8002ce4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002d68:	20b0      	movs	r0, #176	; 0xb0
 8002d6a:	f7ff ffbb 	bl	8002ce4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002d6e:	20c8      	movs	r0, #200	; 0xc8
 8002d70:	f7ff ffb8 	bl	8002ce4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7ff ffb5 	bl	8002ce4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002d7a:	2010      	movs	r0, #16
 8002d7c:	f7ff ffb2 	bl	8002ce4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002d80:	2040      	movs	r0, #64	; 0x40
 8002d82:	f7ff ffaf 	bl	8002ce4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002d86:	20ff      	movs	r0, #255	; 0xff
 8002d88:	f000 fb75 	bl	8003476 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002d8c:	20a1      	movs	r0, #161	; 0xa1
 8002d8e:	f7ff ffa9 	bl	8002ce4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002d92:	20a6      	movs	r0, #166	; 0xa6
 8002d94:	f7ff ffa6 	bl	8002ce4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002d98:	20a8      	movs	r0, #168	; 0xa8
 8002d9a:	f7ff ffa3 	bl	8002ce4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002d9e:	203f      	movs	r0, #63	; 0x3f
 8002da0:	f7ff ffa0 	bl	8002ce4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002da4:	20a4      	movs	r0, #164	; 0xa4
 8002da6:	f7ff ff9d 	bl	8002ce4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002daa:	20d3      	movs	r0, #211	; 0xd3
 8002dac:	f7ff ff9a 	bl	8002ce4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002db0:	2000      	movs	r0, #0
 8002db2:	f7ff ff97 	bl	8002ce4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002db6:	20d5      	movs	r0, #213	; 0xd5
 8002db8:	f7ff ff94 	bl	8002ce4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002dbc:	20f0      	movs	r0, #240	; 0xf0
 8002dbe:	f7ff ff91 	bl	8002ce4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002dc2:	20d9      	movs	r0, #217	; 0xd9
 8002dc4:	f7ff ff8e 	bl	8002ce4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002dc8:	2022      	movs	r0, #34	; 0x22
 8002dca:	f7ff ff8b 	bl	8002ce4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002dce:	20da      	movs	r0, #218	; 0xda
 8002dd0:	f7ff ff88 	bl	8002ce4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002dd4:	2012      	movs	r0, #18
 8002dd6:	f7ff ff85 	bl	8002ce4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002dda:	20db      	movs	r0, #219	; 0xdb
 8002ddc:	f7ff ff82 	bl	8002ce4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002de0:	2020      	movs	r0, #32
 8002de2:	f7ff ff7f 	bl	8002ce4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002de6:	208d      	movs	r0, #141	; 0x8d
 8002de8:	f7ff ff7c 	bl	8002ce4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002dec:	2014      	movs	r0, #20
 8002dee:	f7ff ff79 	bl	8002ce4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002df2:	2001      	movs	r0, #1
 8002df4:	f000 fb52 	bl	800349c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f000 f80f 	bl	8002e1c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002dfe:	f000 f825 	bl	8002e4c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <ssd1306_Init+0xd0>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <ssd1306_Init+0xd0>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002e0e:	4b02      	ldr	r3, [pc, #8]	; (8002e18 <ssd1306_Init+0xd0>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	711a      	strb	r2, [r3, #4]
}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000fd4 	.word	0x20000fd4

08002e1c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <ssd1306_Fill+0x14>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e000      	b.n	8002e32 <ssd1306_Fill+0x16>
 8002e30:	23ff      	movs	r3, #255	; 0xff
 8002e32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e36:	4619      	mov	r1, r3
 8002e38:	4803      	ldr	r0, [pc, #12]	; (8002e48 <ssd1306_Fill+0x2c>)
 8002e3a:	f014 f87a 	bl	8016f32 <memset>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000bd4 	.word	0x20000bd4

08002e4c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002e52:	2300      	movs	r3, #0
 8002e54:	71fb      	strb	r3, [r7, #7]
 8002e56:	e016      	b.n	8002e86 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	3b50      	subs	r3, #80	; 0x50
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff ff40 	bl	8002ce4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002e64:	2000      	movs	r0, #0
 8002e66:	f7ff ff3d 	bl	8002ce4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002e6a:	2010      	movs	r0, #16
 8002e6c:	f7ff ff3a 	bl	8002ce4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	01db      	lsls	r3, r3, #7
 8002e74:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <ssd1306_UpdateScreen+0x4c>)
 8002e76:	4413      	add	r3, r2
 8002e78:	2180      	movs	r1, #128	; 0x80
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff ff4a 	bl	8002d14 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	3301      	adds	r3, #1
 8002e84:	71fb      	strb	r3, [r7, #7]
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	2b07      	cmp	r3, #7
 8002e8a:	d9e5      	bls.n	8002e58 <ssd1306_UpdateScreen+0xc>
    }
}
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000bd4 	.word	0x20000bd4

08002e9c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	71bb      	strb	r3, [r7, #6]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	db3d      	blt.n	8002f32 <ssd1306_DrawPixel+0x96>
 8002eb6:	79bb      	ldrb	r3, [r7, #6]
 8002eb8:	2b3f      	cmp	r3, #63	; 0x3f
 8002eba:	d83a      	bhi.n	8002f32 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002ebc:	797b      	ldrb	r3, [r7, #5]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d11a      	bne.n	8002ef8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002ec2:	79fa      	ldrb	r2, [r7, #7]
 8002ec4:	79bb      	ldrb	r3, [r7, #6]
 8002ec6:	08db      	lsrs	r3, r3, #3
 8002ec8:	b2d8      	uxtb	r0, r3
 8002eca:	4603      	mov	r3, r0
 8002ecc:	01db      	lsls	r3, r3, #7
 8002ece:	4413      	add	r3, r2
 8002ed0:	4a1b      	ldr	r2, [pc, #108]	; (8002f40 <ssd1306_DrawPixel+0xa4>)
 8002ed2:	5cd3      	ldrb	r3, [r2, r3]
 8002ed4:	b25a      	sxtb	r2, r3
 8002ed6:	79bb      	ldrb	r3, [r7, #6]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	2101      	movs	r1, #1
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	b259      	sxtb	r1, r3
 8002ee8:	79fa      	ldrb	r2, [r7, #7]
 8002eea:	4603      	mov	r3, r0
 8002eec:	01db      	lsls	r3, r3, #7
 8002eee:	4413      	add	r3, r2
 8002ef0:	b2c9      	uxtb	r1, r1
 8002ef2:	4a13      	ldr	r2, [pc, #76]	; (8002f40 <ssd1306_DrawPixel+0xa4>)
 8002ef4:	54d1      	strb	r1, [r2, r3]
 8002ef6:	e01d      	b.n	8002f34 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002ef8:	79fa      	ldrb	r2, [r7, #7]
 8002efa:	79bb      	ldrb	r3, [r7, #6]
 8002efc:	08db      	lsrs	r3, r3, #3
 8002efe:	b2d8      	uxtb	r0, r3
 8002f00:	4603      	mov	r3, r0
 8002f02:	01db      	lsls	r3, r3, #7
 8002f04:	4413      	add	r3, r2
 8002f06:	4a0e      	ldr	r2, [pc, #56]	; (8002f40 <ssd1306_DrawPixel+0xa4>)
 8002f08:	5cd3      	ldrb	r3, [r2, r3]
 8002f0a:	b25a      	sxtb	r2, r3
 8002f0c:	79bb      	ldrb	r3, [r7, #6]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	2101      	movs	r1, #1
 8002f14:	fa01 f303 	lsl.w	r3, r1, r3
 8002f18:	b25b      	sxtb	r3, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	b25b      	sxtb	r3, r3
 8002f1e:	4013      	ands	r3, r2
 8002f20:	b259      	sxtb	r1, r3
 8002f22:	79fa      	ldrb	r2, [r7, #7]
 8002f24:	4603      	mov	r3, r0
 8002f26:	01db      	lsls	r3, r3, #7
 8002f28:	4413      	add	r3, r2
 8002f2a:	b2c9      	uxtb	r1, r1
 8002f2c:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <ssd1306_DrawPixel+0xa4>)
 8002f2e:	54d1      	strb	r1, [r2, r3]
 8002f30:	e000      	b.n	8002f34 <ssd1306_DrawPixel+0x98>
        return;
 8002f32:	bf00      	nop
    }
}
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	20000bd4 	.word	0x20000bd4

08002f44 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4604      	mov	r4, r0
 8002f4c:	1d38      	adds	r0, r7, #4
 8002f4e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002f52:	461a      	mov	r2, r3
 8002f54:	4623      	mov	r3, r4
 8002f56:	73fb      	strb	r3, [r7, #15]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b1f      	cmp	r3, #31
 8002f60:	d902      	bls.n	8002f68 <ssd1306_WriteChar+0x24>
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	2b7e      	cmp	r3, #126	; 0x7e
 8002f66:	d901      	bls.n	8002f6c <ssd1306_WriteChar+0x28>
        return 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e06d      	b.n	8003048 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002f6c:	4b38      	ldr	r3, [pc, #224]	; (8003050 <ssd1306_WriteChar+0x10c>)
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	793b      	ldrb	r3, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	2b80      	cmp	r3, #128	; 0x80
 8002f78:	dc06      	bgt.n	8002f88 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002f7a:	4b35      	ldr	r3, [pc, #212]	; (8003050 <ssd1306_WriteChar+0x10c>)
 8002f7c:	885b      	ldrh	r3, [r3, #2]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	797b      	ldrb	r3, [r7, #5]
 8002f82:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002f84:	2b40      	cmp	r3, #64	; 0x40
 8002f86:	dd01      	ble.n	8002f8c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e05d      	b.n	8003048 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	e04c      	b.n	800302c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	3b20      	subs	r3, #32
 8002f98:	7979      	ldrb	r1, [r7, #5]
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	440b      	add	r3, r1
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002fac:	2300      	movs	r3, #0
 8002fae:	61bb      	str	r3, [r7, #24]
 8002fb0:	e034      	b.n	800301c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d012      	beq.n	8002fe8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002fc2:	4b23      	ldr	r3, [pc, #140]	; (8003050 <ssd1306_WriteChar+0x10c>)
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	b2d8      	uxtb	r0, r3
 8002fd0:	4b1f      	ldr	r3, [pc, #124]	; (8003050 <ssd1306_WriteChar+0x10c>)
 8002fd2:	885b      	ldrh	r3, [r3, #2]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	7bba      	ldrb	r2, [r7, #14]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f7ff ff5b 	bl	8002e9c <ssd1306_DrawPixel>
 8002fe6:	e016      	b.n	8003016 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002fe8:	4b19      	ldr	r3, [pc, #100]	; (8003050 <ssd1306_WriteChar+0x10c>)
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	b2d8      	uxtb	r0, r3
 8002ff6:	4b16      	ldr	r3, [pc, #88]	; (8003050 <ssd1306_WriteChar+0x10c>)
 8002ff8:	885b      	ldrh	r3, [r3, #2]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	4413      	add	r3, r2
 8003002:	b2d9      	uxtb	r1, r3
 8003004:	7bbb      	ldrb	r3, [r7, #14]
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf0c      	ite	eq
 800300a:	2301      	moveq	r3, #1
 800300c:	2300      	movne	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	f7ff ff43 	bl	8002e9c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	3301      	adds	r3, #1
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	793b      	ldrb	r3, [r7, #4]
 800301e:	461a      	mov	r2, r3
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	4293      	cmp	r3, r2
 8003024:	d3c5      	bcc.n	8002fb2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3301      	adds	r3, #1
 800302a:	61fb      	str	r3, [r7, #28]
 800302c:	797b      	ldrb	r3, [r7, #5]
 800302e:	461a      	mov	r2, r3
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	4293      	cmp	r3, r2
 8003034:	d3ad      	bcc.n	8002f92 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <ssd1306_WriteChar+0x10c>)
 8003038:	881a      	ldrh	r2, [r3, #0]
 800303a:	793b      	ldrb	r3, [r7, #4]
 800303c:	b29b      	uxth	r3, r3
 800303e:	4413      	add	r3, r2
 8003040:	b29a      	uxth	r2, r3
 8003042:	4b03      	ldr	r3, [pc, #12]	; (8003050 <ssd1306_WriteChar+0x10c>)
 8003044:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003046:	7bfb      	ldrb	r3, [r7, #15]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3724      	adds	r7, #36	; 0x24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd90      	pop	{r4, r7, pc}
 8003050:	20000fd4 	.word	0x20000fd4

08003054 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	1d38      	adds	r0, r7, #4
 800305e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003062:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8003064:	e012      	b.n	800308c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	7818      	ldrb	r0, [r3, #0]
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	1d3a      	adds	r2, r7, #4
 800306e:	ca06      	ldmia	r2, {r1, r2}
 8003070:	f7ff ff68 	bl	8002f44 <ssd1306_WriteChar>
 8003074:	4603      	mov	r3, r0
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d002      	beq.n	8003086 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	e008      	b.n	8003098 <ssd1306_WriteString+0x44>
        }
        str++;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3301      	adds	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e8      	bne.n	8003066 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	781b      	ldrb	r3, [r3, #0]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	460a      	mov	r2, r1
 80030aa:	71fb      	strb	r3, [r7, #7]
 80030ac:	4613      	mov	r3, r2
 80030ae:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <ssd1306_SetCursor+0x2c>)
 80030b6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80030b8:	79bb      	ldrb	r3, [r7, #6]
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <ssd1306_SetCursor+0x2c>)
 80030be:	805a      	strh	r2, [r3, #2]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	20000fd4 	.word	0x20000fd4

080030d0 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80030d0:	b590      	push	{r4, r7, lr}
 80030d2:	b089      	sub	sp, #36	; 0x24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4604      	mov	r4, r0
 80030d8:	4608      	mov	r0, r1
 80030da:	4611      	mov	r1, r2
 80030dc:	461a      	mov	r2, r3
 80030de:	4623      	mov	r3, r4
 80030e0:	71fb      	strb	r3, [r7, #7]
 80030e2:	4603      	mov	r3, r0
 80030e4:	71bb      	strb	r3, [r7, #6]
 80030e6:	460b      	mov	r3, r1
 80030e8:	717b      	strb	r3, [r7, #5]
 80030ea:	4613      	mov	r3, r2
 80030ec:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80030ee:	797a      	ldrb	r2, [r7, #5]
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bfb8      	it	lt
 80030f8:	425b      	neglt	r3, r3
 80030fa:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80030fc:	793a      	ldrb	r2, [r7, #4]
 80030fe:	79bb      	ldrb	r3, [r7, #6]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	bfb8      	it	lt
 8003106:	425b      	neglt	r3, r3
 8003108:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800310a:	79fa      	ldrb	r2, [r7, #7]
 800310c:	797b      	ldrb	r3, [r7, #5]
 800310e:	429a      	cmp	r2, r3
 8003110:	d201      	bcs.n	8003116 <ssd1306_Line+0x46>
 8003112:	2301      	movs	r3, #1
 8003114:	e001      	b.n	800311a <ssd1306_Line+0x4a>
 8003116:	f04f 33ff 	mov.w	r3, #4294967295
 800311a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800311c:	79ba      	ldrb	r2, [r7, #6]
 800311e:	793b      	ldrb	r3, [r7, #4]
 8003120:	429a      	cmp	r2, r3
 8003122:	d201      	bcs.n	8003128 <ssd1306_Line+0x58>
 8003124:	2301      	movs	r3, #1
 8003126:	e001      	b.n	800312c <ssd1306_Line+0x5c>
 8003128:	f04f 33ff 	mov.w	r3, #4294967295
 800312c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8003136:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800313a:	7939      	ldrb	r1, [r7, #4]
 800313c:	797b      	ldrb	r3, [r7, #5]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff feac 	bl	8002e9c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8003144:	e024      	b.n	8003190 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8003146:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800314a:	79b9      	ldrb	r1, [r7, #6]
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fea4 	bl	8002e9c <ssd1306_DrawPixel>
        error2 = error * 2;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	425b      	negs	r3, r3
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	429a      	cmp	r2, r3
 8003162:	dd08      	ble.n	8003176 <ssd1306_Line+0xa6>
            error -= deltaY;
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	b2da      	uxtb	r2, r3
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	4413      	add	r3, r2
 8003174:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	429a      	cmp	r2, r3
 800317c:	da08      	bge.n	8003190 <ssd1306_Line+0xc0>
            error += deltaX;
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	4413      	add	r3, r2
 8003184:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	79bb      	ldrb	r3, [r7, #6]
 800318c:	4413      	add	r3, r2
 800318e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8003190:	79fa      	ldrb	r2, [r7, #7]
 8003192:	797b      	ldrb	r3, [r7, #5]
 8003194:	429a      	cmp	r2, r3
 8003196:	d1d6      	bne.n	8003146 <ssd1306_Line+0x76>
 8003198:	79ba      	ldrb	r2, [r7, #6]
 800319a:	793b      	ldrb	r3, [r7, #4]
 800319c:	429a      	cmp	r2, r3
 800319e:	d1d2      	bne.n	8003146 <ssd1306_Line+0x76>
        }
    }
    return;
 80031a0:	bf00      	nop
}
 80031a2:	3724      	adds	r7, #36	; 0x24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd90      	pop	{r4, r7, pc}

080031a8 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4604      	mov	r4, r0
 80031b0:	4608      	mov	r0, r1
 80031b2:	4611      	mov	r1, r2
 80031b4:	461a      	mov	r2, r3
 80031b6:	4623      	mov	r3, r4
 80031b8:	71fb      	strb	r3, [r7, #7]
 80031ba:	4603      	mov	r3, r0
 80031bc:	71bb      	strb	r3, [r7, #6]
 80031be:	460b      	mov	r3, r1
 80031c0:	717b      	strb	r3, [r7, #5]
 80031c2:	4613      	mov	r3, r2
 80031c4:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 80031c6:	797b      	ldrb	r3, [r7, #5]
 80031c8:	425b      	negs	r3, r3
 80031ca:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 80031d0:	797b      	ldrb	r3, [r7, #5]
 80031d2:	f1c3 0301 	rsb	r3, r3, #1
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	db65      	blt.n	80032ae <ssd1306_DrawCircle+0x106>
 80031e2:	79bb      	ldrb	r3, [r7, #6]
 80031e4:	2b3f      	cmp	r3, #63	; 0x3f
 80031e6:	d862      	bhi.n	80032ae <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	79fa      	ldrb	r2, [r7, #7]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	b2d8      	uxtb	r0, r3
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	79bb      	ldrb	r3, [r7, #6]
 80031f8:	4413      	add	r3, r2
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	793a      	ldrb	r2, [r7, #4]
 80031fe:	4619      	mov	r1, r3
 8003200:	f7ff fe4c 	bl	8002e9c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	b2da      	uxtb	r2, r3
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	4413      	add	r3, r2
 800320c:	b2d8      	uxtb	r0, r3
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	79bb      	ldrb	r3, [r7, #6]
 8003214:	4413      	add	r3, r2
 8003216:	b2db      	uxtb	r3, r3
 8003218:	793a      	ldrb	r2, [r7, #4]
 800321a:	4619      	mov	r1, r3
 800321c:	f7ff fe3e 	bl	8002e9c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	4413      	add	r3, r2
 8003228:	b2d8      	uxtb	r0, r3
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	79ba      	ldrb	r2, [r7, #6]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	793a      	ldrb	r2, [r7, #4]
 8003236:	4619      	mov	r1, r3
 8003238:	f7ff fe30 	bl	8002e9c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	79fa      	ldrb	r2, [r7, #7]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	b2d8      	uxtb	r0, r3
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	79ba      	ldrb	r2, [r7, #6]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	793a      	ldrb	r2, [r7, #4]
 8003252:	4619      	mov	r1, r3
 8003254:	f7ff fe22 	bl	8002e9c <ssd1306_DrawPixel>
        e2 = err;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	429a      	cmp	r2, r3
 8003262:	dc13      	bgt.n	800328c <ssd1306_DrawCircle+0xe4>
            y++;
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	3301      	adds	r3, #1
 8003268:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	3301      	adds	r3, #1
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4413      	add	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	425b      	negs	r3, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	429a      	cmp	r2, r3
 800327e:	d105      	bne.n	800328c <ssd1306_DrawCircle+0xe4>
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	429a      	cmp	r2, r3
 8003286:	dc01      	bgt.n	800328c <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	429a      	cmp	r2, r3
 8003292:	dd08      	ble.n	80032a6 <ssd1306_DrawCircle+0xfe>
            x++;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	3301      	adds	r3, #1
 8003298:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	3301      	adds	r3, #1
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4413      	add	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	dd9d      	ble.n	80031e8 <ssd1306_DrawCircle+0x40>

    return;
 80032ac:	e000      	b.n	80032b0 <ssd1306_DrawCircle+0x108>
        return;
 80032ae:	bf00      	nop
}
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd90      	pop	{r4, r7, pc}

080032b6 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80032b6:	b590      	push	{r4, r7, lr}
 80032b8:	b085      	sub	sp, #20
 80032ba:	af02      	add	r7, sp, #8
 80032bc:	4604      	mov	r4, r0
 80032be:	4608      	mov	r0, r1
 80032c0:	4611      	mov	r1, r2
 80032c2:	461a      	mov	r2, r3
 80032c4:	4623      	mov	r3, r4
 80032c6:	71fb      	strb	r3, [r7, #7]
 80032c8:	4603      	mov	r3, r0
 80032ca:	71bb      	strb	r3, [r7, #6]
 80032cc:	460b      	mov	r3, r1
 80032ce:	717b      	strb	r3, [r7, #5]
 80032d0:	4613      	mov	r3, r2
 80032d2:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80032d4:	79bc      	ldrb	r4, [r7, #6]
 80032d6:	797a      	ldrb	r2, [r7, #5]
 80032d8:	79b9      	ldrb	r1, [r7, #6]
 80032da:	79f8      	ldrb	r0, [r7, #7]
 80032dc:	7e3b      	ldrb	r3, [r7, #24]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	4623      	mov	r3, r4
 80032e2:	f7ff fef5 	bl	80030d0 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80032e6:	793c      	ldrb	r4, [r7, #4]
 80032e8:	797a      	ldrb	r2, [r7, #5]
 80032ea:	79b9      	ldrb	r1, [r7, #6]
 80032ec:	7978      	ldrb	r0, [r7, #5]
 80032ee:	7e3b      	ldrb	r3, [r7, #24]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	4623      	mov	r3, r4
 80032f4:	f7ff feec 	bl	80030d0 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80032f8:	793c      	ldrb	r4, [r7, #4]
 80032fa:	79fa      	ldrb	r2, [r7, #7]
 80032fc:	7939      	ldrb	r1, [r7, #4]
 80032fe:	7978      	ldrb	r0, [r7, #5]
 8003300:	7e3b      	ldrb	r3, [r7, #24]
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	4623      	mov	r3, r4
 8003306:	f7ff fee3 	bl	80030d0 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 800330a:	79bc      	ldrb	r4, [r7, #6]
 800330c:	79fa      	ldrb	r2, [r7, #7]
 800330e:	7939      	ldrb	r1, [r7, #4]
 8003310:	79f8      	ldrb	r0, [r7, #7]
 8003312:	7e3b      	ldrb	r3, [r7, #24]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	4623      	mov	r3, r4
 8003318:	f7ff feda 	bl	80030d0 <ssd1306_Line>

    return;
 800331c:	bf00      	nop
}
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	bd90      	pop	{r4, r7, pc}

08003324 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003324:	b590      	push	{r4, r7, lr}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	4604      	mov	r4, r0
 800332c:	4608      	mov	r0, r1
 800332e:	4611      	mov	r1, r2
 8003330:	461a      	mov	r2, r3
 8003332:	4623      	mov	r3, r4
 8003334:	71fb      	strb	r3, [r7, #7]
 8003336:	4603      	mov	r3, r0
 8003338:	71bb      	strb	r3, [r7, #6]
 800333a:	460b      	mov	r3, r1
 800333c:	717b      	strb	r3, [r7, #5]
 800333e:	4613      	mov	r3, r2
 8003340:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8003342:	79fa      	ldrb	r2, [r7, #7]
 8003344:	797b      	ldrb	r3, [r7, #5]
 8003346:	4293      	cmp	r3, r2
 8003348:	bf28      	it	cs
 800334a:	4613      	movcs	r3, r2
 800334c:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 800334e:	797a      	ldrb	r2, [r7, #5]
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	4293      	cmp	r3, r2
 8003354:	bf38      	it	cc
 8003356:	4613      	movcc	r3, r2
 8003358:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800335a:	79ba      	ldrb	r2, [r7, #6]
 800335c:	793b      	ldrb	r3, [r7, #4]
 800335e:	4293      	cmp	r3, r2
 8003360:	bf28      	it	cs
 8003362:	4613      	movcs	r3, r2
 8003364:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8003366:	793a      	ldrb	r2, [r7, #4]
 8003368:	79bb      	ldrb	r3, [r7, #6]
 800336a:	4293      	cmp	r3, r2
 800336c:	bf38      	it	cc
 800336e:	4613      	movcc	r3, r2
 8003370:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8003372:	7afb      	ldrb	r3, [r7, #11]
 8003374:	73fb      	strb	r3, [r7, #15]
 8003376:	e017      	b.n	80033a8 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8003378:	7b7b      	ldrb	r3, [r7, #13]
 800337a:	73bb      	strb	r3, [r7, #14]
 800337c:	e009      	b.n	8003392 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 800337e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003382:	7bf9      	ldrb	r1, [r7, #15]
 8003384:	7bbb      	ldrb	r3, [r7, #14]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fd88 	bl	8002e9c <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800338c:	7bbb      	ldrb	r3, [r7, #14]
 800338e:	3301      	adds	r3, #1
 8003390:	73bb      	strb	r3, [r7, #14]
 8003392:	7bba      	ldrb	r2, [r7, #14]
 8003394:	7b3b      	ldrb	r3, [r7, #12]
 8003396:	429a      	cmp	r2, r3
 8003398:	d803      	bhi.n	80033a2 <ssd1306_FillRectangle+0x7e>
 800339a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	daed      	bge.n	800337e <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	3301      	adds	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
 80033a8:	7bfa      	ldrb	r2, [r7, #15]
 80033aa:	7abb      	ldrb	r3, [r7, #10]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d803      	bhi.n	80033b8 <ssd1306_FillRectangle+0x94>
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b3f      	cmp	r3, #63	; 0x3f
 80033b4:	d9e0      	bls.n	8003378 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80033b6:	bf00      	nop
 80033b8:	bf00      	nop
}
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd90      	pop	{r4, r7, pc}

080033c0 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	603a      	str	r2, [r7, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
 80033ce:	460b      	mov	r3, r1
 80033d0:	71bb      	strb	r3, [r7, #6]
 80033d2:	4613      	mov	r3, r2
 80033d4:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80033d6:	797b      	ldrb	r3, [r7, #5]
 80033d8:	3307      	adds	r3, #7
 80033da:	2b00      	cmp	r3, #0
 80033dc:	da00      	bge.n	80033e0 <ssd1306_DrawBitmap+0x20>
 80033de:	3307      	adds	r3, #7
 80033e0:	10db      	asrs	r3, r3, #3
 80033e2:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	db3e      	blt.n	800346e <ssd1306_DrawBitmap+0xae>
 80033f0:	79bb      	ldrb	r3, [r7, #6]
 80033f2:	2b3f      	cmp	r3, #63	; 0x3f
 80033f4:	d83b      	bhi.n	800346e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80033f6:	2300      	movs	r3, #0
 80033f8:	73bb      	strb	r3, [r7, #14]
 80033fa:	e033      	b.n	8003464 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80033fc:	2300      	movs	r3, #0
 80033fe:	737b      	strb	r3, [r7, #13]
 8003400:	e026      	b.n	8003450 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8003402:	7b7b      	ldrb	r3, [r7, #13]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
 8003412:	e00d      	b.n	8003430 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8003414:	7bbb      	ldrb	r3, [r7, #14]
 8003416:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800341a:	fb02 f303 	mul.w	r3, r2, r3
 800341e:	7b7a      	ldrb	r2, [r7, #13]
 8003420:	08d2      	lsrs	r2, r2, #3
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	4413      	add	r3, r2
 8003426:	461a      	mov	r2, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4413      	add	r3, r2
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8003430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003434:	2b00      	cmp	r3, #0
 8003436:	da08      	bge.n	800344a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8003438:	79fa      	ldrb	r2, [r7, #7]
 800343a:	7b7b      	ldrb	r3, [r7, #13]
 800343c:	4413      	add	r3, r2
 800343e:	b2db      	uxtb	r3, r3
 8003440:	7f3a      	ldrb	r2, [r7, #28]
 8003442:	79b9      	ldrb	r1, [r7, #6]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fd29 	bl	8002e9c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800344a:	7b7b      	ldrb	r3, [r7, #13]
 800344c:	3301      	adds	r3, #1
 800344e:	737b      	strb	r3, [r7, #13]
 8003450:	7b7a      	ldrb	r2, [r7, #13]
 8003452:	797b      	ldrb	r3, [r7, #5]
 8003454:	429a      	cmp	r2, r3
 8003456:	d3d4      	bcc.n	8003402 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8003458:	7bbb      	ldrb	r3, [r7, #14]
 800345a:	3301      	adds	r3, #1
 800345c:	73bb      	strb	r3, [r7, #14]
 800345e:	79bb      	ldrb	r3, [r7, #6]
 8003460:	3301      	adds	r3, #1
 8003462:	71bb      	strb	r3, [r7, #6]
 8003464:	7bba      	ldrb	r2, [r7, #14]
 8003466:	7e3b      	ldrb	r3, [r7, #24]
 8003468:	429a      	cmp	r2, r3
 800346a:	d3c7      	bcc.n	80033fc <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800346c:	e000      	b.n	8003470 <ssd1306_DrawBitmap+0xb0>
        return;
 800346e:	bf00      	nop
}
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	4603      	mov	r3, r0
 800347e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003480:	2381      	movs	r3, #129	; 0x81
 8003482:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff fc2c 	bl	8002ce4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fc28 	bl	8002ce4 <ssd1306_WriteCommand>
}
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80034ac:	23af      	movs	r3, #175	; 0xaf
 80034ae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <ssd1306_SetDisplayOn+0x38>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	715a      	strb	r2, [r3, #5]
 80034b6:	e004      	b.n	80034c2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80034b8:	23ae      	movs	r3, #174	; 0xae
 80034ba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <ssd1306_SetDisplayOn+0x38>)
 80034be:	2200      	movs	r2, #0
 80034c0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fc0d 	bl	8002ce4 <ssd1306_WriteCommand>
}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000fd4 	.word	0x20000fd4

080034d8 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b087      	sub	sp, #28
 80034dc:	af02      	add	r7, sp, #8
 80034de:	ed87 0a03 	vstr	s0, [r7, #12]
 80034e2:	60b8      	str	r0, [r7, #8]
 80034e4:	6079      	str	r1, [r7, #4]
 80034e6:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	330f      	adds	r3, #15
 80034ee:	b2d8      	uxtb	r0, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	3301      	adds	r3, #1
 80034f6:	b2d9      	uxtb	r1, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	330f      	adds	r3, #15
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	3305      	adds	r3, #5
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2401      	movs	r4, #1
 800350a:	9400      	str	r4, [sp, #0]
 800350c:	f7ff fde0 	bl	80030d0 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	3310      	adds	r3, #16
 8003516:	b2d8      	uxtb	r0, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	3301      	adds	r3, #1
 800351e:	b2d9      	uxtb	r1, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	3310      	adds	r3, #16
 8003526:	b2da      	uxtb	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	3305      	adds	r3, #5
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2401      	movs	r4, #1
 8003532:	9400      	str	r4, [sp, #0]
 8003534:	f7ff fdcc 	bl	80030d0 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	b2d8      	uxtb	r0, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	b2d9      	uxtb	r1, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	330e      	adds	r3, #14
 8003546:	b2da      	uxtb	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	3306      	adds	r3, #6
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2401      	movs	r4, #1
 8003552:	9400      	str	r4, [sp, #0]
 8003554:	f7ff feaf 	bl	80032b6 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f7fc fff5 	bl	8000548 <__aeabi_f2d>
 800355e:	a396      	add	r3, pc, #600	; (adr r3, 80037b8 <batterygauge+0x2e0>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f7fd fac4 	bl	8000af0 <__aeabi_dcmple>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d02a      	beq.n	80035c4 <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	3302      	adds	r3, #2
 8003574:	b2d8      	uxtb	r0, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	3302      	adds	r3, #2
 800357c:	b2d9      	uxtb	r1, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	3303      	adds	r3, #3
 8003584:	b2da      	uxtb	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	3304      	adds	r3, #4
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2401      	movs	r4, #1
 8003590:	9400      	str	r4, [sp, #0]
 8003592:	f7ff fe90 	bl	80032b6 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d113      	bne.n	80035c4 <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	3302      	adds	r3, #2
 80035a2:	b2d8      	uxtb	r0, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	3302      	adds	r3, #2
 80035aa:	b2d9      	uxtb	r1, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	3303      	adds	r3, #3
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	3304      	adds	r3, #4
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2401      	movs	r4, #1
 80035be:	9400      	str	r4, [sp, #0]
 80035c0:	f7ff fe79 	bl	80032b6 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f7fc ffbf 	bl	8000548 <__aeabi_f2d>
 80035ca:	a37b      	add	r3, pc, #492	; (adr r3, 80037b8 <batterygauge+0x2e0>)
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f7fd faa2 	bl	8000b18 <__aeabi_dcmpgt>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d035      	beq.n	8003646 <batterygauge+0x16e>
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f7fc ffb4 	bl	8000548 <__aeabi_f2d>
 80035e0:	a377      	add	r3, pc, #476	; (adr r3, 80037c0 <batterygauge+0x2e8>)
 80035e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e6:	f7fd fa83 	bl	8000af0 <__aeabi_dcmple>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d02a      	beq.n	8003646 <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	3302      	adds	r3, #2
 80035f6:	b2d8      	uxtb	r0, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	3302      	adds	r3, #2
 80035fe:	b2d9      	uxtb	r1, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	3303      	adds	r3, #3
 8003606:	b2da      	uxtb	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	3304      	adds	r3, #4
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2401      	movs	r4, #1
 8003612:	9400      	str	r4, [sp, #0]
 8003614:	f7ff fe4f 	bl	80032b6 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d113      	bne.n	8003646 <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	3305      	adds	r3, #5
 8003624:	b2d8      	uxtb	r0, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	3302      	adds	r3, #2
 800362c:	b2d9      	uxtb	r1, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	3306      	adds	r3, #6
 8003634:	b2da      	uxtb	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	3304      	adds	r3, #4
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2401      	movs	r4, #1
 8003640:	9400      	str	r4, [sp, #0]
 8003642:	f7ff fe38 	bl	80032b6 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f7fc ff7e 	bl	8000548 <__aeabi_f2d>
 800364c:	a35c      	add	r3, pc, #368	; (adr r3, 80037c0 <batterygauge+0x2e8>)
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	f7fd fa61 	bl	8000b18 <__aeabi_dcmpgt>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d049      	beq.n	80036f0 <batterygauge+0x218>
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7fc ff73 	bl	8000548 <__aeabi_f2d>
 8003662:	a359      	add	r3, pc, #356	; (adr r3, 80037c8 <batterygauge+0x2f0>)
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	f7fd fa42 	bl	8000af0 <__aeabi_dcmple>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d03e      	beq.n	80036f0 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	3302      	adds	r3, #2
 8003678:	b2d8      	uxtb	r0, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	3302      	adds	r3, #2
 8003680:	b2d9      	uxtb	r1, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	3303      	adds	r3, #3
 8003688:	b2da      	uxtb	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	3304      	adds	r3, #4
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2401      	movs	r4, #1
 8003694:	9400      	str	r4, [sp, #0]
 8003696:	f7ff fe0e 	bl	80032b6 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	3305      	adds	r3, #5
 80036a0:	b2d8      	uxtb	r0, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	3302      	adds	r3, #2
 80036a8:	b2d9      	uxtb	r1, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	3306      	adds	r3, #6
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	3304      	adds	r3, #4
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2401      	movs	r4, #1
 80036bc:	9400      	str	r4, [sp, #0]
 80036be:	f7ff fdfa 	bl	80032b6 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d113      	bne.n	80036f0 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	3308      	adds	r3, #8
 80036ce:	b2d8      	uxtb	r0, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	3302      	adds	r3, #2
 80036d6:	b2d9      	uxtb	r1, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	3309      	adds	r3, #9
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	3304      	adds	r3, #4
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2401      	movs	r4, #1
 80036ea:	9400      	str	r4, [sp, #0]
 80036ec:	f7ff fde3 	bl	80032b6 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f7fc ff29 	bl	8000548 <__aeabi_f2d>
 80036f6:	a334      	add	r3, pc, #208	; (adr r3, 80037c8 <batterygauge+0x2f0>)
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	f7fd fa0c 	bl	8000b18 <__aeabi_dcmpgt>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d100      	bne.n	8003708 <batterygauge+0x230>
	}




}
 8003706:	e052      	b.n	80037ae <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	3302      	adds	r3, #2
 800370e:	b2d8      	uxtb	r0, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	3302      	adds	r3, #2
 8003716:	b2d9      	uxtb	r1, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	3303      	adds	r3, #3
 800371e:	b2da      	uxtb	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	3304      	adds	r3, #4
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2401      	movs	r4, #1
 800372a:	9400      	str	r4, [sp, #0]
 800372c:	f7ff fdc3 	bl	80032b6 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	3305      	adds	r3, #5
 8003736:	b2d8      	uxtb	r0, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	3302      	adds	r3, #2
 800373e:	b2d9      	uxtb	r1, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	3306      	adds	r3, #6
 8003746:	b2da      	uxtb	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	3304      	adds	r3, #4
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2401      	movs	r4, #1
 8003752:	9400      	str	r4, [sp, #0]
 8003754:	f7ff fdaf 	bl	80032b6 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	3308      	adds	r3, #8
 800375e:	b2d8      	uxtb	r0, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	3302      	adds	r3, #2
 8003766:	b2d9      	uxtb	r1, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	3309      	adds	r3, #9
 800376e:	b2da      	uxtb	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	3304      	adds	r3, #4
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2401      	movs	r4, #1
 800377a:	9400      	str	r4, [sp, #0]
 800377c:	f7ff fd9b 	bl	80032b6 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d113      	bne.n	80037ae <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	330b      	adds	r3, #11
 800378c:	b2d8      	uxtb	r0, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	b2db      	uxtb	r3, r3
 8003792:	3302      	adds	r3, #2
 8003794:	b2d9      	uxtb	r1, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	330c      	adds	r3, #12
 800379c:	b2da      	uxtb	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	3304      	adds	r3, #4
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2401      	movs	r4, #1
 80037a8:	9400      	str	r4, [sp, #0]
 80037aa:	f7ff fd84 	bl	80032b6 <ssd1306_DrawRectangle>
}
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd90      	pop	{r4, r7, pc}
 80037b6:	bf00      	nop
 80037b8:	9999999a 	.word	0x9999999a
 80037bc:	400d9999 	.word	0x400d9999
 80037c0:	33333333 	.word	0x33333333
 80037c4:	400f3333 	.word	0x400f3333
 80037c8:	66666666 	.word	0x66666666
 80037cc:	40106666 	.word	0x40106666

080037d0 <percentage>:

void percentage(float percent){
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 40, floor(0.64*percent+32), 56, White);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fc feb4 	bl	8000548 <__aeabi_f2d>
 80037e0:	a329      	add	r3, pc, #164	; (adr r3, 8003888 <percentage+0xb8>)
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	f7fc ff07 	bl	80005f8 <__aeabi_dmul>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4610      	mov	r0, r2
 80037f0:	4619      	mov	r1, r3
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	4b20      	ldr	r3, [pc, #128]	; (8003878 <percentage+0xa8>)
 80037f8:	f7fc fd48 	bl	800028c <__adddf3>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	ec43 2b17 	vmov	d7, r2, r3
 8003804:	eeb0 0a47 	vmov.f32	s0, s14
 8003808:	eef0 0a67 	vmov.f32	s1, s15
 800380c:	f016 fa84 	bl	8019d18 <floor>
 8003810:	ec53 2b10 	vmov	r2, r3, d0
 8003814:	4610      	mov	r0, r2
 8003816:	4619      	mov	r1, r3
 8003818:	f7fd f9c6 	bl	8000ba8 <__aeabi_d2uiz>
 800381c:	4603      	mov	r3, r0
 800381e:	b2da      	uxtb	r2, r3
 8003820:	2301      	movs	r3, #1
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	2338      	movs	r3, #56	; 0x38
 8003826:	2128      	movs	r1, #40	; 0x28
 8003828:	2020      	movs	r0, #32
 800382a:	f7ff fd7b 	bl	8003324 <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 40, 95, 56, White);
 800382e:	2301      	movs	r3, #1
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	2338      	movs	r3, #56	; 0x38
 8003834:	225f      	movs	r2, #95	; 0x5f
 8003836:	2128      	movs	r1, #40	; 0x28
 8003838:	2020      	movs	r0, #32
 800383a:	f7ff fd3c 	bl	80032b6 <ssd1306_DrawRectangle>
	snprintf((uint8_t *)str,20,"%0.2f %%",(float) percent);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fc fe82 	bl	8000548 <__aeabi_f2d>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	e9cd 2300 	strd	r2, r3, [sp]
 800384c:	4a0b      	ldr	r2, [pc, #44]	; (800387c <percentage+0xac>)
 800384e:	2114      	movs	r1, #20
 8003850:	480b      	ldr	r0, [pc, #44]	; (8003880 <percentage+0xb0>)
 8003852:	f013 fad7 	bl	8016e04 <sniprintf>
	ssd1306_SetCursor(45,44);
 8003856:	212c      	movs	r1, #44	; 0x2c
 8003858:	202d      	movs	r0, #45	; 0x2d
 800385a:	f7ff fc21 	bl	80030a0 <ssd1306_SetCursor>
	ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 800385e:	4a09      	ldr	r2, [pc, #36]	; (8003884 <percentage+0xb4>)
 8003860:	2301      	movs	r3, #1
 8003862:	ca06      	ldmia	r2, {r1, r2}
 8003864:	4806      	ldr	r0, [pc, #24]	; (8003880 <percentage+0xb0>)
 8003866:	f7ff fbf5 	bl	8003054 <ssd1306_WriteString>


}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	f3af 8000 	nop.w
 8003878:	40400000 	.word	0x40400000
 800387c:	0801b9b8 	.word	0x0801b9b8
 8003880:	2000075c 	.word	0x2000075c
 8003884:	2000000c 	.word	0x2000000c
 8003888:	47ae147b 	.word	0x47ae147b
 800388c:	3fe47ae1 	.word	0x3fe47ae1

08003890 <statemachine>:





void statemachine(void){
 8003890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003892:	ed2d 8b02 	vpush	{d8}
 8003896:	b09f      	sub	sp, #124	; 0x7c
 8003898:	af04      	add	r7, sp, #16
	switch(state){
 800389a:	4b9f      	ldr	r3, [pc, #636]	; (8003b18 <statemachine+0x288>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b07      	cmp	r3, #7
 80038a0:	f202 80f5 	bhi.w	8005a8e <statemachine+0x21fe>
 80038a4:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <statemachine+0x1c>)
 80038a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038aa:	bf00      	nop
 80038ac:	080038cd 	.word	0x080038cd
 80038b0:	08003d7d 	.word	0x08003d7d
 80038b4:	0800438b 	.word	0x0800438b
 80038b8:	080049f5 	.word	0x080049f5
 80038bc:	08004bd5 	.word	0x08004bd5
 80038c0:	08004e03 	.word	0x08004e03
 80038c4:	080053cb 	.word	0x080053cb
 80038c8:	080058ef 	.word	0x080058ef
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 80038cc:	2000      	movs	r0, #0
 80038ce:	f7ff faa5 	bl	8002e1c <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 80038d2:	2120      	movs	r1, #32
 80038d4:	2020      	movs	r0, #32
 80038d6:	f7ff fbe3 	bl	80030a0 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 80038da:	4990      	ldr	r1, [pc, #576]	; (8003b1c <statemachine+0x28c>)
 80038dc:	4890      	ldr	r0, [pc, #576]	; (8003b20 <statemachine+0x290>)
 80038de:	f7fe fdb5 	bl	800244c <nmea_parse>
				 if(myData.speed>=vitmax){
 80038e2:	4b8f      	ldr	r3, [pc, #572]	; (8003b20 <statemachine+0x290>)
 80038e4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80038e8:	4b8e      	ldr	r3, [pc, #568]	; (8003b24 <statemachine+0x294>)
 80038ea:	edd3 7a00 	vldr	s15, [r3]
 80038ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f6:	db03      	blt.n	8003900 <statemachine+0x70>
									 vitmax=myData.speed;
 80038f8:	4b89      	ldr	r3, [pc, #548]	; (8003b20 <statemachine+0x290>)
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	4a89      	ldr	r2, [pc, #548]	; (8003b24 <statemachine+0x294>)
 80038fe:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	667b      	str	r3, [r7, #100]	; 0x64
								 float sec=0;
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	663b      	str	r3, [r7, #96]	; 0x60
								 if (myData.speed!=0){
 800390c:	4b84      	ldr	r3, [pc, #528]	; (8003b20 <statemachine+0x290>)
 800390e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003912:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391a:	d032      	beq.n	8003982 <statemachine+0xf2>
									 pace=1000/(60*myData.speed);
 800391c:	4b80      	ldr	r3, [pc, #512]	; (8003b20 <statemachine+0x290>)
 800391e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003922:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8003b28 <statemachine+0x298>
 8003926:	ee27 7a87 	vmul.f32	s14, s15, s14
 800392a:	eddf 6a80 	vldr	s13, [pc, #512]	; 8003b2c <statemachine+0x29c>
 800392e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003932:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
									 sec=(pace-floor(pace))*60;
 8003936:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003938:	f7fc fe06 	bl	8000548 <__aeabi_f2d>
 800393c:	4604      	mov	r4, r0
 800393e:	460d      	mov	r5, r1
 8003940:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003942:	f7fc fe01 	bl	8000548 <__aeabi_f2d>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	ec43 2b10 	vmov	d0, r2, r3
 800394e:	f016 f9e3 	bl	8019d18 <floor>
 8003952:	ec53 2b10 	vmov	r2, r3, d0
 8003956:	4620      	mov	r0, r4
 8003958:	4629      	mov	r1, r5
 800395a:	f7fc fc95 	bl	8000288 <__aeabi_dsub>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4610      	mov	r0, r2
 8003964:	4619      	mov	r1, r3
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	4b71      	ldr	r3, [pc, #452]	; (8003b30 <statemachine+0x2a0>)
 800396c:	f7fc fe44 	bl	80005f8 <__aeabi_dmul>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4610      	mov	r0, r2
 8003976:	4619      	mov	r1, r3
 8003978:	f7fd f936 	bl	8000be8 <__aeabi_d2f>
 800397c:	4603      	mov	r3, r0
 800397e:	663b      	str	r3, [r7, #96]	; 0x60
 8003980:	e001      	b.n	8003986 <statemachine+0xf6>
								 }
								 else {
									 pace=9999;
 8003982:	4b6c      	ldr	r3, [pc, #432]	; (8003b34 <statemachine+0x2a4>)
 8003984:	667b      	str	r3, [r7, #100]	; 0x64
								 }


				  switch(spdstate){
 8003986:	4b6c      	ldr	r3, [pc, #432]	; (8003b38 <statemachine+0x2a8>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b02      	cmp	r3, #2
 800398c:	f000 8170 	beq.w	8003c70 <statemachine+0x3e0>
 8003990:	2b02      	cmp	r3, #2
 8003992:	f300 81e0 	bgt.w	8003d56 <statemachine+0x4c6>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <statemachine+0x112>
 800399a:	2b01      	cmp	r3, #1
 800399c:	f000 80e0 	beq.w	8003b60 <statemachine+0x2d0>
 80039a0:	e1d9      	b.n	8003d56 <statemachine+0x4c6>


				 case STATE_SUMMARY:
					 if(myData.fix == 1){
 80039a2:	4b5f      	ldr	r3, [pc, #380]	; (8003b20 <statemachine+0x290>)
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d16f      	bne.n	8003a8a <statemachine+0x1fa>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 80039aa:	2014      	movs	r0, #20
 80039ac:	f011 fb2e 	bl	801500c <malloc>
 80039b0:	4603      	mov	r3, r0
 80039b2:	60bb      	str	r3, [r7, #8]
					 				 						snprintf(str,15, "MaxV=%.1f",vitmax*3.6);
 80039b4:	4b5b      	ldr	r3, [pc, #364]	; (8003b24 <statemachine+0x294>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fc fdc5 	bl	8000548 <__aeabi_f2d>
 80039be:	a354      	add	r3, pc, #336	; (adr r3, 8003b10 <statemachine+0x280>)
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f7fc fe18 	bl	80005f8 <__aeabi_dmul>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	e9cd 2300 	strd	r2, r3, [sp]
 80039d0:	4a5a      	ldr	r2, [pc, #360]	; (8003b3c <statemachine+0x2ac>)
 80039d2:	210f      	movs	r1, #15
 80039d4:	68b8      	ldr	r0, [r7, #8]
 80039d6:	f013 fa15 	bl	8016e04 <sniprintf>
					 				 						ssd1306_SetCursor(32, 32);
 80039da:	2120      	movs	r1, #32
 80039dc:	2020      	movs	r0, #32
 80039de:	f7ff fb5f 	bl	80030a0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 80039e2:	4a57      	ldr	r2, [pc, #348]	; (8003b40 <statemachine+0x2b0>)
 80039e4:	2301      	movs	r3, #1
 80039e6:	ca06      	ldmia	r2, {r1, r2}
 80039e8:	68b8      	ldr	r0, [r7, #8]
 80039ea:	f7ff fb33 	bl	8003054 <ssd1306_WriteString>
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 80039ee:	4b4c      	ldr	r3, [pc, #304]	; (8003b20 <statemachine+0x290>)
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fc fda8 	bl	8000548 <__aeabi_f2d>
 80039f8:	a345      	add	r3, pc, #276	; (adr r3, 8003b10 <statemachine+0x280>)
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	f7fc fdfb 	bl	80005f8 <__aeabi_dmul>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	e9cd 2300 	strd	r2, r3, [sp]
 8003a0a:	4a4e      	ldr	r2, [pc, #312]	; (8003b44 <statemachine+0x2b4>)
 8003a0c:	210f      	movs	r1, #15
 8003a0e:	68b8      	ldr	r0, [r7, #8]
 8003a10:	f013 f9f8 	bl	8016e04 <sniprintf>
					 				 						ssd1306_SetCursor(32, 42);
 8003a14:	212a      	movs	r1, #42	; 0x2a
 8003a16:	2020      	movs	r0, #32
 8003a18:	f7ff fb42 	bl	80030a0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8003a1c:	4a48      	ldr	r2, [pc, #288]	; (8003b40 <statemachine+0x2b0>)
 8003a1e:	2301      	movs	r3, #1
 8003a20:	ca06      	ldmia	r2, {r1, r2}
 8003a22:	68b8      	ldr	r0, [r7, #8]
 8003a24:	f7ff fb16 	bl	8003054 <ssd1306_WriteString>
					 				 						snprintf(str,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));
 8003a28:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003a2a:	f7fc fd8d 	bl	8000548 <__aeabi_f2d>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	ec43 2b10 	vmov	d0, r2, r3
 8003a36:	f016 f96f 	bl	8019d18 <floor>
 8003a3a:	eeb0 8a40 	vmov.f32	s16, s0
 8003a3e:	eef0 8a60 	vmov.f32	s17, s1
 8003a42:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003a44:	f7fc fd80 	bl	8000548 <__aeabi_f2d>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	ec43 2b10 	vmov	d0, r2, r3
 8003a50:	f016 f962 	bl	8019d18 <floor>
 8003a54:	eeb0 7a40 	vmov.f32	s14, s0
 8003a58:	eef0 7a60 	vmov.f32	s15, s1
 8003a5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003a60:	ed8d 8b00 	vstr	d8, [sp]
 8003a64:	4a38      	ldr	r2, [pc, #224]	; (8003b48 <statemachine+0x2b8>)
 8003a66:	210f      	movs	r1, #15
 8003a68:	68b8      	ldr	r0, [r7, #8]
 8003a6a:	f013 f9cb 	bl	8016e04 <sniprintf>
					 				 						ssd1306_SetCursor(32, 52);
 8003a6e:	2134      	movs	r1, #52	; 0x34
 8003a70:	2020      	movs	r0, #32
 8003a72:	f7ff fb15 	bl	80030a0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8003a76:	4a32      	ldr	r2, [pc, #200]	; (8003b40 <statemachine+0x2b0>)
 8003a78:	2301      	movs	r3, #1
 8003a7a:	ca06      	ldmia	r2, {r1, r2}
 8003a7c:	68b8      	ldr	r0, [r7, #8]
 8003a7e:	f7ff fae9 	bl	8003054 <ssd1306_WriteString>
					 				 						free(str);
 8003a82:	68b8      	ldr	r0, [r7, #8]
 8003a84:	f011 faca 	bl	801501c <free>
 8003a88:	e025      	b.n	8003ad6 <statemachine+0x246>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);
 8003a8a:	2014      	movs	r0, #20
 8003a8c:	f011 fabe 	bl	801500c <malloc>
 8003a90:	4603      	mov	r3, r0
 8003a92:	60fb      	str	r3, [r7, #12]
					 				 						ssd1306_SetCursor(32, 32);
 8003a94:	2120      	movs	r1, #32
 8003a96:	2020      	movs	r0, #32
 8003a98:	f7ff fb02 	bl	80030a0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 1", Font_6x8, White);
 8003a9c:	4a28      	ldr	r2, [pc, #160]	; (8003b40 <statemachine+0x2b0>)
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	ca06      	ldmia	r2, {r1, r2}
 8003aa2:	482a      	ldr	r0, [pc, #168]	; (8003b4c <statemachine+0x2bc>)
 8003aa4:	f7ff fad6 	bl	8003054 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8003aa8:	212c      	movs	r1, #44	; 0x2c
 8003aaa:	2020      	movs	r0, #32
 8003aac:	f7ff faf8 	bl	80030a0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003ab0:	4a23      	ldr	r2, [pc, #140]	; (8003b40 <statemachine+0x2b0>)
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	ca06      	ldmia	r2, {r1, r2}
 8003ab6:	4826      	ldr	r0, [pc, #152]	; (8003b50 <statemachine+0x2c0>)
 8003ab8:	f7ff facc 	bl	8003054 <ssd1306_WriteString>
					 				 						batterygauge(vbat,35, 54,1);
 8003abc:	4b25      	ldr	r3, [pc, #148]	; (8003b54 <statemachine+0x2c4>)
 8003abe:	edd3 7a00 	vldr	s15, [r3]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	2136      	movs	r1, #54	; 0x36
 8003ac6:	2023      	movs	r0, #35	; 0x23
 8003ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8003acc:	f7ff fd04 	bl	80034d8 <batterygauge>
					 				 						free(str);
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f011 faa3 	bl	801501c <free>
					 				 					}
					 if(BTN_B>=1){
 8003ad6:	4b20      	ldr	r3, [pc, #128]	; (8003b58 <statemachine+0x2c8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	dd08      	ble.n	8003af0 <statemachine+0x260>
					 					 				 					spdstate++;
 8003ade:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <statemachine+0x2a8>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <statemachine+0x2a8>)
 8003ae8:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8003aea:	4b1b      	ldr	r3, [pc, #108]	; (8003b58 <statemachine+0x2c8>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]
					 					 				  	}
					 if(BTN_B_LONG>=1){
 8003af0:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <statemachine+0x2cc>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f340 8129 	ble.w	8003d4c <statemachine+0x4bc>
					 					  vitmax=0;
 8003afa:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <statemachine+0x294>)
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
					 					BTN_B_LONG=0;
 8003b02:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <statemachine+0x2cc>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
					 				}



					 break;
 8003b08:	e120      	b.n	8003d4c <statemachine+0x4bc>
 8003b0a:	bf00      	nop
 8003b0c:	f3af 8000 	nop.w
 8003b10:	cccccccd 	.word	0xcccccccd
 8003b14:	400ccccc 	.word	0x400ccccc
 8003b18:	20000494 	.word	0x20000494
 8003b1c:	200004e0 	.word	0x200004e0
 8003b20:	200006e0 	.word	0x200006e0
 8003b24:	20000a08 	.word	0x20000a08
 8003b28:	42700000 	.word	0x42700000
 8003b2c:	447a0000 	.word	0x447a0000
 8003b30:	404e0000 	.word	0x404e0000
 8003b34:	461c3c00 	.word	0x461c3c00
 8003b38:	20000496 	.word	0x20000496
 8003b3c:	0801b9c4 	.word	0x0801b9c4
 8003b40:	2000000c 	.word	0x2000000c
 8003b44:	0801b9d0 	.word	0x0801b9d0
 8003b48:	0801b9d8 	.word	0x0801b9d8
 8003b4c:	0801b9ec 	.word	0x0801b9ec
 8003b50:	0801b9f4 	.word	0x0801b9f4
 8003b54:	20000758 	.word	0x20000758
 8003b58:	20000724 	.word	0x20000724
 8003b5c:	20000a68 	.word	0x20000a68
				 case STATE_COMPTEUR:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 8003b60:	4b97      	ldr	r3, [pc, #604]	; (8003dc0 <statemachine+0x530>)
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d159      	bne.n	8003c1c <statemachine+0x38c>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 8003b68:	2014      	movs	r0, #20
 8003b6a:	f011 fa4f 	bl	801500c <malloc>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	613b      	str	r3, [r7, #16]
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 8003b72:	4b93      	ldr	r3, [pc, #588]	; (8003dc0 <statemachine+0x530>)
 8003b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fc fce6 	bl	8000548 <__aeabi_f2d>
 8003b7c:	a38c      	add	r3, pc, #560	; (adr r3, 8003db0 <statemachine+0x520>)
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	f7fc fd39 	bl	80005f8 <__aeabi_dmul>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	e9cd 2300 	strd	r2, r3, [sp]
 8003b8e:	4a8d      	ldr	r2, [pc, #564]	; (8003dc4 <statemachine+0x534>)
 8003b90:	210f      	movs	r1, #15
 8003b92:	6938      	ldr	r0, [r7, #16]
 8003b94:	f013 f936 	bl	8016e04 <sniprintf>
					 				 						ssd1306_SetCursor(32, 54);
 8003b98:	2136      	movs	r1, #54	; 0x36
 8003b9a:	2020      	movs	r0, #32
 8003b9c:	f7ff fa80 	bl	80030a0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8003ba0:	4a89      	ldr	r2, [pc, #548]	; (8003dc8 <statemachine+0x538>)
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	ca06      	ldmia	r2, {r1, r2}
 8003ba6:	6938      	ldr	r0, [r7, #16]
 8003ba8:	f7ff fa54 	bl	8003054 <ssd1306_WriteString>
					 				 						ssd1306_DrawRectangle(32, 38, 95, 53, White);
 8003bac:	2301      	movs	r3, #1
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	2335      	movs	r3, #53	; 0x35
 8003bb2:	225f      	movs	r2, #95	; 0x5f
 8003bb4:	2126      	movs	r1, #38	; 0x26
 8003bb6:	2020      	movs	r0, #32
 8003bb8:	f7ff fb7d 	bl	80032b6 <ssd1306_DrawRectangle>
					 				 						ssd1306_FillRectangle(32, 38,(int) floor(32+(myData.speed*0.63)), 53, White);
 8003bbc:	4b80      	ldr	r3, [pc, #512]	; (8003dc0 <statemachine+0x530>)
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fc fcc1 	bl	8000548 <__aeabi_f2d>
 8003bc6:	a37c      	add	r3, pc, #496	; (adr r3, 8003db8 <statemachine+0x528>)
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f7fc fd14 	bl	80005f8 <__aeabi_dmul>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	4b7b      	ldr	r3, [pc, #492]	; (8003dcc <statemachine+0x53c>)
 8003bde:	f7fc fb55 	bl	800028c <__adddf3>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	ec43 2b17 	vmov	d7, r2, r3
 8003bea:	eeb0 0a47 	vmov.f32	s0, s14
 8003bee:	eef0 0a67 	vmov.f32	s1, s15
 8003bf2:	f016 f891 	bl	8019d18 <floor>
 8003bf6:	ec53 2b10 	vmov	r2, r3, d0
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f7fc ffab 	bl	8000b58 <__aeabi_d2iz>
 8003c02:	4603      	mov	r3, r0
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	2301      	movs	r3, #1
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	2335      	movs	r3, #53	; 0x35
 8003c0c:	2126      	movs	r1, #38	; 0x26
 8003c0e:	2020      	movs	r0, #32
 8003c10:	f7ff fb88 	bl	8003324 <ssd1306_FillRectangle>

					 				 						free(str);
 8003c14:	6938      	ldr	r0, [r7, #16]
 8003c16:	f011 fa01 	bl	801501c <free>
 8003c1a:	e01b      	b.n	8003c54 <statemachine+0x3c4>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8003c1c:	2014      	movs	r0, #20
 8003c1e:	f011 f9f5 	bl	801500c <malloc>
 8003c22:	4603      	mov	r3, r0
 8003c24:	617b      	str	r3, [r7, #20]
					 				 						ssd1306_SetCursor(32, 32);
 8003c26:	2120      	movs	r1, #32
 8003c28:	2020      	movs	r0, #32
 8003c2a:	f7ff fa39 	bl	80030a0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 2", Font_6x8, White);
 8003c2e:	4a66      	ldr	r2, [pc, #408]	; (8003dc8 <statemachine+0x538>)
 8003c30:	2301      	movs	r3, #1
 8003c32:	ca06      	ldmia	r2, {r1, r2}
 8003c34:	4866      	ldr	r0, [pc, #408]	; (8003dd0 <statemachine+0x540>)
 8003c36:	f7ff fa0d 	bl	8003054 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8003c3a:	212c      	movs	r1, #44	; 0x2c
 8003c3c:	2020      	movs	r0, #32
 8003c3e:	f7ff fa2f 	bl	80030a0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003c42:	4a61      	ldr	r2, [pc, #388]	; (8003dc8 <statemachine+0x538>)
 8003c44:	2301      	movs	r3, #1
 8003c46:	ca06      	ldmia	r2, {r1, r2}
 8003c48:	4862      	ldr	r0, [pc, #392]	; (8003dd4 <statemachine+0x544>)
 8003c4a:	f7ff fa03 	bl	8003054 <ssd1306_WriteString>
					 				 						free(str);
 8003c4e:	6978      	ldr	r0, [r7, #20]
 8003c50:	f011 f9e4 	bl	801501c <free>
					 				 					}
					 if(BTN_B>=1){
 8003c54:	4b60      	ldr	r3, [pc, #384]	; (8003dd8 <statemachine+0x548>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	dd79      	ble.n	8003d50 <statemachine+0x4c0>
					 				 					spdstate++;
 8003c5c:	4b5f      	ldr	r3, [pc, #380]	; (8003ddc <statemachine+0x54c>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	4b5d      	ldr	r3, [pc, #372]	; (8003ddc <statemachine+0x54c>)
 8003c66:	701a      	strb	r2, [r3, #0]
					 				 					BTN_B=0;
 8003c68:	4b5b      	ldr	r3, [pc, #364]	; (8003dd8 <statemachine+0x548>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 8003c6e:	e06f      	b.n	8003d50 <statemachine+0x4c0>
				 case STATE_GRAPH:
					 if(myData.fix == 1){
 8003c70:	4b53      	ldr	r3, [pc, #332]	; (8003dc0 <statemachine+0x530>)
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d12f      	bne.n	8003cd8 <statemachine+0x448>
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8003c78:	2014      	movs	r0, #20
 8003c7a:	f011 f9c7 	bl	801500c <malloc>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	61bb      	str	r3, [r7, #24]

					 				 						ssd1306_SetCursor(32, 32);
 8003c82:	2120      	movs	r1, #32
 8003c84:	2020      	movs	r0, #32
 8003c86:	f7ff fa0b 	bl	80030a0 <ssd1306_SetCursor>
					 				 						snprintf(str,15, "%0.1f",(myData.speed)*3.6);
 8003c8a:	4b4d      	ldr	r3, [pc, #308]	; (8003dc0 <statemachine+0x530>)
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fc fc5a 	bl	8000548 <__aeabi_f2d>
 8003c94:	a346      	add	r3, pc, #280	; (adr r3, 8003db0 <statemachine+0x520>)
 8003c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9a:	f7fc fcad 	bl	80005f8 <__aeabi_dmul>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	e9cd 2300 	strd	r2, r3, [sp]
 8003ca6:	4a4e      	ldr	r2, [pc, #312]	; (8003de0 <statemachine+0x550>)
 8003ca8:	210f      	movs	r1, #15
 8003caa:	69b8      	ldr	r0, [r7, #24]
 8003cac:	f013 f8aa 	bl	8016e04 <sniprintf>
					 				 						ssd1306_WriteString(str, Font_11x18, White);
 8003cb0:	4a4c      	ldr	r2, [pc, #304]	; (8003de4 <statemachine+0x554>)
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	ca06      	ldmia	r2, {r1, r2}
 8003cb6:	69b8      	ldr	r0, [r7, #24]
 8003cb8:	f7ff f9cc 	bl	8003054 <ssd1306_WriteString>
					 				 						batterygauge(vbat,35, 54,1);
 8003cbc:	4b4a      	ldr	r3, [pc, #296]	; (8003de8 <statemachine+0x558>)
 8003cbe:	edd3 7a00 	vldr	s15, [r3]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	2136      	movs	r1, #54	; 0x36
 8003cc6:	2023      	movs	r0, #35	; 0x23
 8003cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ccc:	f7ff fc04 	bl	80034d8 <batterygauge>

					 				 						free(str);
 8003cd0:	69b8      	ldr	r0, [r7, #24]
 8003cd2:	f011 f9a3 	bl	801501c <free>
 8003cd6:	e025      	b.n	8003d24 <statemachine+0x494>
					 }
					 else{
						 char *str = (char*)malloc(sizeof(char)*20);
 8003cd8:	2014      	movs	r0, #20
 8003cda:	f011 f997 	bl	801500c <malloc>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	61fb      	str	r3, [r7, #28]
						 ssd1306_SetCursor(32, 32);
 8003ce2:	2120      	movs	r1, #32
 8003ce4:	2020      	movs	r0, #32
 8003ce6:	f7ff f9db 	bl	80030a0 <ssd1306_SetCursor>
						 ssd1306_WriteString("Speed 3", Font_6x8, White);
 8003cea:	4a37      	ldr	r2, [pc, #220]	; (8003dc8 <statemachine+0x538>)
 8003cec:	2301      	movs	r3, #1
 8003cee:	ca06      	ldmia	r2, {r1, r2}
 8003cf0:	483e      	ldr	r0, [pc, #248]	; (8003dec <statemachine+0x55c>)
 8003cf2:	f7ff f9af 	bl	8003054 <ssd1306_WriteString>
						 ssd1306_SetCursor(32, 44);
 8003cf6:	212c      	movs	r1, #44	; 0x2c
 8003cf8:	2020      	movs	r0, #32
 8003cfa:	f7ff f9d1 	bl	80030a0 <ssd1306_SetCursor>
						 ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003cfe:	4a32      	ldr	r2, [pc, #200]	; (8003dc8 <statemachine+0x538>)
 8003d00:	2301      	movs	r3, #1
 8003d02:	ca06      	ldmia	r2, {r1, r2}
 8003d04:	4833      	ldr	r0, [pc, #204]	; (8003dd4 <statemachine+0x544>)
 8003d06:	f7ff f9a5 	bl	8003054 <ssd1306_WriteString>
						 batterygauge(vbat,35, 54,1);
 8003d0a:	4b37      	ldr	r3, [pc, #220]	; (8003de8 <statemachine+0x558>)
 8003d0c:	edd3 7a00 	vldr	s15, [r3]
 8003d10:	2201      	movs	r2, #1
 8003d12:	2136      	movs	r1, #54	; 0x36
 8003d14:	2023      	movs	r0, #35	; 0x23
 8003d16:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1a:	f7ff fbdd 	bl	80034d8 <batterygauge>
						 free(str);
 8003d1e:	69f8      	ldr	r0, [r7, #28]
 8003d20:	f011 f97c 	bl	801501c <free>
					 }

					 if(BTN_B>=1){
 8003d24:	4b2c      	ldr	r3, [pc, #176]	; (8003dd8 <statemachine+0x548>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	dd13      	ble.n	8003d54 <statemachine+0x4c4>
					 					 				 					spdstate--;
 8003d2c:	4b2b      	ldr	r3, [pc, #172]	; (8003ddc <statemachine+0x54c>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	4b29      	ldr	r3, [pc, #164]	; (8003ddc <statemachine+0x54c>)
 8003d36:	701a      	strb	r2, [r3, #0]
					 					 				 					spdstate--;
 8003d38:	4b28      	ldr	r3, [pc, #160]	; (8003ddc <statemachine+0x54c>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	4b26      	ldr	r3, [pc, #152]	; (8003ddc <statemachine+0x54c>)
 8003d42:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8003d44:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <statemachine+0x548>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 8003d4a:	e003      	b.n	8003d54 <statemachine+0x4c4>
					 break;
 8003d4c:	bf00      	nop
 8003d4e:	e002      	b.n	8003d56 <statemachine+0x4c6>
					 break;
 8003d50:	bf00      	nop
 8003d52:	e000      	b.n	8003d56 <statemachine+0x4c6>
					 break;
 8003d54:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 8003d56:	4b26      	ldr	r3, [pc, #152]	; (8003df0 <statemachine+0x560>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f341 8687 	ble.w	8005a6e <statemachine+0x21de>
				 					state++;
 8003d60:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <statemachine+0x564>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	3301      	adds	r3, #1
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	4b22      	ldr	r3, [pc, #136]	; (8003df4 <statemachine+0x564>)
 8003d6a:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 8003d6c:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <statemachine+0x560>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
				 					BTN_B=0;
 8003d72:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <statemachine+0x548>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
				  	}
				  break;
 8003d78:	f001 be79 	b.w	8005a6e <statemachine+0x21de>


	case STATE_POS:
			  ssd1306_Fill(Black);
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	f7ff f84d 	bl	8002e1c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8003d82:	491d      	ldr	r1, [pc, #116]	; (8003df8 <statemachine+0x568>)
 8003d84:	480e      	ldr	r0, [pc, #56]	; (8003dc0 <statemachine+0x530>)
 8003d86:	f7fe fb61 	bl	800244c <nmea_parse>
			  switch(posstate){
 8003d8a:	4b1c      	ldr	r3, [pc, #112]	; (8003dfc <statemachine+0x56c>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	f200 82d5 	bhi.w	800433e <statemachine+0xaae>
 8003d94:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <statemachine+0x50c>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003e01 	.word	0x08003e01
 8003da0:	08003f19 	.word	0x08003f19
 8003da4:	08004061 	.word	0x08004061
 8003da8:	08004171 	.word	0x08004171
 8003dac:	f3af 8000 	nop.w
 8003db0:	cccccccd 	.word	0xcccccccd
 8003db4:	400ccccc 	.word	0x400ccccc
 8003db8:	c28f5c29 	.word	0xc28f5c29
 8003dbc:	3fe428f5 	.word	0x3fe428f5
 8003dc0:	200006e0 	.word	0x200006e0
 8003dc4:	0801b9d0 	.word	0x0801b9d0
 8003dc8:	2000000c 	.word	0x2000000c
 8003dcc:	40400000 	.word	0x40400000
 8003dd0:	0801ba00 	.word	0x0801ba00
 8003dd4:	0801b9f4 	.word	0x0801b9f4
 8003dd8:	20000724 	.word	0x20000724
 8003ddc:	20000496 	.word	0x20000496
 8003de0:	0801ba08 	.word	0x0801ba08
 8003de4:	2000001c 	.word	0x2000001c
 8003de8:	20000758 	.word	0x20000758
 8003dec:	0801ba10 	.word	0x0801ba10
 8003df0:	20000720 	.word	0x20000720
 8003df4:	20000494 	.word	0x20000494
 8003df8:	200004e0 	.word	0x200004e0
 8003dfc:	20000497 	.word	0x20000497

			  case STATE_SUMMARY1:
				  if(myData.fix == 1){
 8003e00:	4b89      	ldr	r3, [pc, #548]	; (8004028 <statemachine+0x798>)
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d14e      	bne.n	8003ea6 <statemachine+0x616>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003e08:	2014      	movs	r0, #20
 8003e0a:	f011 f8ff 	bl	801500c <malloc>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	623b      	str	r3, [r7, #32]
				  						ssd1306_SetCursor(32, 32);
 8003e12:	2120      	movs	r1, #32
 8003e14:	2020      	movs	r0, #32
 8003e16:	f7ff f943 	bl	80030a0 <ssd1306_SetCursor>
				  						snprintf(str,15, "Latitude:");
 8003e1a:	4a84      	ldr	r2, [pc, #528]	; (800402c <statemachine+0x79c>)
 8003e1c:	210f      	movs	r1, #15
 8003e1e:	6a38      	ldr	r0, [r7, #32]
 8003e20:	f012 fff0 	bl	8016e04 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003e24:	4a82      	ldr	r2, [pc, #520]	; (8004030 <statemachine+0x7a0>)
 8003e26:	2301      	movs	r3, #1
 8003e28:	ca06      	ldmia	r2, {r1, r2}
 8003e2a:	6a38      	ldr	r0, [r7, #32]
 8003e2c:	f7ff f912 	bl	8003054 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003e30:	4b7d      	ldr	r3, [pc, #500]	; (8004028 <statemachine+0x798>)
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	e9cd 2300 	strd	r2, r3, [sp]
 8003e3a:	4a7e      	ldr	r2, [pc, #504]	; (8004034 <statemachine+0x7a4>)
 8003e3c:	210f      	movs	r1, #15
 8003e3e:	6a38      	ldr	r0, [r7, #32]
 8003e40:	f012 ffe0 	bl	8016e04 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003e44:	2128      	movs	r1, #40	; 0x28
 8003e46:	2020      	movs	r0, #32
 8003e48:	f7ff f92a 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003e4c:	4a78      	ldr	r2, [pc, #480]	; (8004030 <statemachine+0x7a0>)
 8003e4e:	2301      	movs	r3, #1
 8003e50:	ca06      	ldmia	r2, {r1, r2}
 8003e52:	6a38      	ldr	r0, [r7, #32]
 8003e54:	f7ff f8fe 	bl	8003054 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8003e58:	4a77      	ldr	r2, [pc, #476]	; (8004038 <statemachine+0x7a8>)
 8003e5a:	210f      	movs	r1, #15
 8003e5c:	6a38      	ldr	r0, [r7, #32]
 8003e5e:	f012 ffd1 	bl	8016e04 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003e62:	2130      	movs	r1, #48	; 0x30
 8003e64:	2020      	movs	r0, #32
 8003e66:	f7ff f91b 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003e6a:	4a71      	ldr	r2, [pc, #452]	; (8004030 <statemachine+0x7a0>)
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	ca06      	ldmia	r2, {r1, r2}
 8003e70:	6a38      	ldr	r0, [r7, #32]
 8003e72:	f7ff f8ef 	bl	8003054 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8003e76:	4b6c      	ldr	r3, [pc, #432]	; (8004028 <statemachine+0x798>)
 8003e78:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003e7c:	e9cd 2300 	strd	r2, r3, [sp]
 8003e80:	4a6c      	ldr	r2, [pc, #432]	; (8004034 <statemachine+0x7a4>)
 8003e82:	210f      	movs	r1, #15
 8003e84:	6a38      	ldr	r0, [r7, #32]
 8003e86:	f012 ffbd 	bl	8016e04 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003e8a:	2138      	movs	r1, #56	; 0x38
 8003e8c:	2020      	movs	r0, #32
 8003e8e:	f7ff f907 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003e92:	4a67      	ldr	r2, [pc, #412]	; (8004030 <statemachine+0x7a0>)
 8003e94:	2301      	movs	r3, #1
 8003e96:	ca06      	ldmia	r2, {r1, r2}
 8003e98:	6a38      	ldr	r0, [r7, #32]
 8003e9a:	f7ff f8db 	bl	8003054 <ssd1306_WriteString>
				  						free(str);
 8003e9e:	6a38      	ldr	r0, [r7, #32]
 8003ea0:	f011 f8bc 	bl	801501c <free>
 8003ea4:	e029      	b.n	8003efa <statemachine+0x66a>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003ea6:	2014      	movs	r0, #20
 8003ea8:	f011 f8b0 	bl	801500c <malloc>
 8003eac:	4603      	mov	r3, r0
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
				  						ssd1306_SetCursor(32, 32);
 8003eb0:	2120      	movs	r1, #32
 8003eb2:	2020      	movs	r0, #32
 8003eb4:	f7ff f8f4 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos1", Font_6x8, White);
 8003eb8:	4a5d      	ldr	r2, [pc, #372]	; (8004030 <statemachine+0x7a0>)
 8003eba:	2301      	movs	r3, #1
 8003ebc:	ca06      	ldmia	r2, {r1, r2}
 8003ebe:	485f      	ldr	r0, [pc, #380]	; (800403c <statemachine+0x7ac>)
 8003ec0:	f7ff f8c8 	bl	8003054 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003ec4:	212c      	movs	r1, #44	; 0x2c
 8003ec6:	2020      	movs	r0, #32
 8003ec8:	f7ff f8ea 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003ecc:	4a58      	ldr	r2, [pc, #352]	; (8004030 <statemachine+0x7a0>)
 8003ece:	2301      	movs	r3, #1
 8003ed0:	ca06      	ldmia	r2, {r1, r2}
 8003ed2:	485b      	ldr	r0, [pc, #364]	; (8004040 <statemachine+0x7b0>)
 8003ed4:	f7ff f8be 	bl	8003054 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 54);
 8003ed8:	2136      	movs	r1, #54	; 0x36
 8003eda:	2020      	movs	r0, #32
 8003edc:	f7ff f8e0 	bl	80030a0 <ssd1306_SetCursor>
				  						batterygauge(vbat,35, 54,1);
 8003ee0:	4b58      	ldr	r3, [pc, #352]	; (8004044 <statemachine+0x7b4>)
 8003ee2:	edd3 7a00 	vldr	s15, [r3]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	2136      	movs	r1, #54	; 0x36
 8003eea:	2023      	movs	r0, #35	; 0x23
 8003eec:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef0:	f7ff faf2 	bl	80034d8 <batterygauge>
				  						free(str);
 8003ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ef6:	f011 f891 	bl	801501c <free>
				  					}
				  if(BTN_B>=1){
 8003efa:	4b53      	ldr	r3, [pc, #332]	; (8004048 <statemachine+0x7b8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f340 81ee 	ble.w	80042e0 <statemachine+0xa50>
					  posstate++;
 8003f04:	4b51      	ldr	r3, [pc, #324]	; (800404c <statemachine+0x7bc>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	4b4f      	ldr	r3, [pc, #316]	; (800404c <statemachine+0x7bc>)
 8003f0e:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8003f10:	4b4d      	ldr	r3, [pc, #308]	; (8004048 <statemachine+0x7b8>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]





				  break;
 8003f16:	e1e3      	b.n	80042e0 <statemachine+0xa50>
			  case STATE_LAT:
				  if(myData.fix == 1){
 8003f18:	4b43      	ldr	r3, [pc, #268]	; (8004028 <statemachine+0x798>)
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d14b      	bne.n	8003fb8 <statemachine+0x728>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003f20:	2014      	movs	r0, #20
 8003f22:	f011 f873 	bl	801500c <malloc>
 8003f26:	4603      	mov	r3, r0
 8003f28:	62bb      	str	r3, [r7, #40]	; 0x28
				  						ssd1306_SetCursor(32, 32);
 8003f2a:	2120      	movs	r1, #32
 8003f2c:	2020      	movs	r0, #32
 8003f2e:	f7ff f8b7 	bl	80030a0 <ssd1306_SetCursor>
				  						snprintf(str,15, "LatSide:");
 8003f32:	4a47      	ldr	r2, [pc, #284]	; (8004050 <statemachine+0x7c0>)
 8003f34:	210f      	movs	r1, #15
 8003f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f38:	f012 ff64 	bl	8016e04 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003f3c:	4a3c      	ldr	r2, [pc, #240]	; (8004030 <statemachine+0x7a0>)
 8003f3e:	2301      	movs	r3, #1
 8003f40:	ca06      	ldmia	r2, {r1, r2}
 8003f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f44:	f7ff f886 	bl	8003054 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003f48:	4b37      	ldr	r3, [pc, #220]	; (8004028 <statemachine+0x798>)
 8003f4a:	7a1b      	ldrb	r3, [r3, #8]
 8003f4c:	4a41      	ldr	r2, [pc, #260]	; (8004054 <statemachine+0x7c4>)
 8003f4e:	210f      	movs	r1, #15
 8003f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f52:	f012 ff57 	bl	8016e04 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003f56:	2128      	movs	r1, #40	; 0x28
 8003f58:	2020      	movs	r0, #32
 8003f5a:	f7ff f8a1 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003f5e:	4a34      	ldr	r2, [pc, #208]	; (8004030 <statemachine+0x7a0>)
 8003f60:	2301      	movs	r3, #1
 8003f62:	ca06      	ldmia	r2, {r1, r2}
 8003f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f66:	f7ff f875 	bl	8003054 <ssd1306_WriteString>
				  						snprintf(str,15, "Latitude:");
 8003f6a:	4a30      	ldr	r2, [pc, #192]	; (800402c <statemachine+0x79c>)
 8003f6c:	210f      	movs	r1, #15
 8003f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f70:	f012 ff48 	bl	8016e04 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003f74:	2130      	movs	r1, #48	; 0x30
 8003f76:	2020      	movs	r0, #32
 8003f78:	f7ff f892 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <statemachine+0x7a0>)
 8003f7e:	2301      	movs	r3, #1
 8003f80:	ca06      	ldmia	r2, {r1, r2}
 8003f82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f84:	f7ff f866 	bl	8003054 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);
 8003f88:	4b27      	ldr	r3, [pc, #156]	; (8004028 <statemachine+0x798>)
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	e9cd 2300 	strd	r2, r3, [sp]
 8003f92:	4a28      	ldr	r2, [pc, #160]	; (8004034 <statemachine+0x7a4>)
 8003f94:	210f      	movs	r1, #15
 8003f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f98:	f012 ff34 	bl	8016e04 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003f9c:	2138      	movs	r1, #56	; 0x38
 8003f9e:	2020      	movs	r0, #32
 8003fa0:	f7ff f87e 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003fa4:	4a22      	ldr	r2, [pc, #136]	; (8004030 <statemachine+0x7a0>)
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	ca06      	ldmia	r2, {r1, r2}
 8003faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fac:	f7ff f852 	bl	8003054 <ssd1306_WriteString>
				  						free(str);
 8003fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fb2:	f011 f833 	bl	801501c <free>
 8003fb6:	e01b      	b.n	8003ff0 <statemachine+0x760>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003fb8:	2014      	movs	r0, #20
 8003fba:	f011 f827 	bl	801500c <malloc>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
				  						ssd1306_SetCursor(32, 32);
 8003fc2:	2120      	movs	r1, #32
 8003fc4:	2020      	movs	r0, #32
 8003fc6:	f7ff f86b 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos2", Font_6x8, White);
 8003fca:	4a19      	ldr	r2, [pc, #100]	; (8004030 <statemachine+0x7a0>)
 8003fcc:	2301      	movs	r3, #1
 8003fce:	ca06      	ldmia	r2, {r1, r2}
 8003fd0:	4821      	ldr	r0, [pc, #132]	; (8004058 <statemachine+0x7c8>)
 8003fd2:	f7ff f83f 	bl	8003054 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003fd6:	212c      	movs	r1, #44	; 0x2c
 8003fd8:	2020      	movs	r0, #32
 8003fda:	f7ff f861 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003fde:	4a14      	ldr	r2, [pc, #80]	; (8004030 <statemachine+0x7a0>)
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	ca06      	ldmia	r2, {r1, r2}
 8003fe4:	4816      	ldr	r0, [pc, #88]	; (8004040 <statemachine+0x7b0>)
 8003fe6:	f7ff f835 	bl	8003054 <ssd1306_WriteString>
				  						free(str);
 8003fea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fec:	f011 f816 	bl	801501c <free>
				  					}
				  if(BTN_B>=1){
 8003ff0:	4b15      	ldr	r3, [pc, #84]	; (8004048 <statemachine+0x7b8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	dd08      	ble.n	800400a <statemachine+0x77a>
				  					  posstate++;
 8003ff8:	4b14      	ldr	r3, [pc, #80]	; (800404c <statemachine+0x7bc>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	4b12      	ldr	r3, [pc, #72]	; (800404c <statemachine+0x7bc>)
 8004002:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8004004:	4b10      	ldr	r3, [pc, #64]	; (8004048 <statemachine+0x7b8>)
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 800400a:	4b14      	ldr	r3, [pc, #80]	; (800405c <statemachine+0x7cc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	f340 8168 	ble.w	80042e4 <statemachine+0xa54>
									  posstate--;
 8004014:	4b0d      	ldr	r3, [pc, #52]	; (800404c <statemachine+0x7bc>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	3b01      	subs	r3, #1
 800401a:	b2da      	uxtb	r2, r3
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <statemachine+0x7bc>)
 800401e:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8004020:	4b0e      	ldr	r3, [pc, #56]	; (800405c <statemachine+0x7cc>)
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
								}



				  break;
 8004026:	e15d      	b.n	80042e4 <statemachine+0xa54>
 8004028:	200006e0 	.word	0x200006e0
 800402c:	0801ba18 	.word	0x0801ba18
 8004030:	2000000c 	.word	0x2000000c
 8004034:	0801ba24 	.word	0x0801ba24
 8004038:	0801ba2c 	.word	0x0801ba2c
 800403c:	0801ba38 	.word	0x0801ba38
 8004040:	0801b9f4 	.word	0x0801b9f4
 8004044:	20000758 	.word	0x20000758
 8004048:	20000724 	.word	0x20000724
 800404c:	20000497 	.word	0x20000497
 8004050:	0801ba40 	.word	0x0801ba40
 8004054:	0801ba4c 	.word	0x0801ba4c
 8004058:	0801ba50 	.word	0x0801ba50
 800405c:	20000a68 	.word	0x20000a68
			  case STATE_LONG:
				  if(myData.fix == 1){
 8004060:	4ba5      	ldr	r3, [pc, #660]	; (80042f8 <statemachine+0xa68>)
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	2b01      	cmp	r3, #1
 8004066:	d14b      	bne.n	8004100 <statemachine+0x870>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8004068:	2014      	movs	r0, #20
 800406a:	f010 ffcf 	bl	801500c <malloc>
 800406e:	4603      	mov	r3, r0
 8004070:	633b      	str	r3, [r7, #48]	; 0x30
				  						ssd1306_SetCursor(32, 32);
 8004072:	2120      	movs	r1, #32
 8004074:	2020      	movs	r0, #32
 8004076:	f7ff f813 	bl	80030a0 <ssd1306_SetCursor>
				  						snprintf(str,15, "LonSide:");
 800407a:	4aa0      	ldr	r2, [pc, #640]	; (80042fc <statemachine+0xa6c>)
 800407c:	210f      	movs	r1, #15
 800407e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004080:	f012 fec0 	bl	8016e04 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8004084:	4a9e      	ldr	r2, [pc, #632]	; (8004300 <statemachine+0xa70>)
 8004086:	2301      	movs	r3, #1
 8004088:	ca06      	ldmia	r2, {r1, r2}
 800408a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800408c:	f7fe ffe2 	bl	8003054 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8004090:	4b99      	ldr	r3, [pc, #612]	; (80042f8 <statemachine+0xa68>)
 8004092:	7e1b      	ldrb	r3, [r3, #24]
 8004094:	4a9b      	ldr	r2, [pc, #620]	; (8004304 <statemachine+0xa74>)
 8004096:	210f      	movs	r1, #15
 8004098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800409a:	f012 feb3 	bl	8016e04 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 800409e:	2128      	movs	r1, #40	; 0x28
 80040a0:	2020      	movs	r0, #32
 80040a2:	f7fe fffd 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80040a6:	4a96      	ldr	r2, [pc, #600]	; (8004300 <statemachine+0xa70>)
 80040a8:	2301      	movs	r3, #1
 80040aa:	ca06      	ldmia	r2, {r1, r2}
 80040ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040ae:	f7fe ffd1 	bl	8003054 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 80040b2:	4a95      	ldr	r2, [pc, #596]	; (8004308 <statemachine+0xa78>)
 80040b4:	210f      	movs	r1, #15
 80040b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040b8:	f012 fea4 	bl	8016e04 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 80040bc:	2130      	movs	r1, #48	; 0x30
 80040be:	2020      	movs	r0, #32
 80040c0:	f7fe ffee 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80040c4:	4a8e      	ldr	r2, [pc, #568]	; (8004300 <statemachine+0xa70>)
 80040c6:	2301      	movs	r3, #1
 80040c8:	ca06      	ldmia	r2, {r1, r2}
 80040ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040cc:	f7fe ffc2 	bl	8003054 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 80040d0:	4b89      	ldr	r3, [pc, #548]	; (80042f8 <statemachine+0xa68>)
 80040d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80040d6:	e9cd 2300 	strd	r2, r3, [sp]
 80040da:	4a8c      	ldr	r2, [pc, #560]	; (800430c <statemachine+0xa7c>)
 80040dc:	210f      	movs	r1, #15
 80040de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040e0:	f012 fe90 	bl	8016e04 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80040e4:	2138      	movs	r1, #56	; 0x38
 80040e6:	2020      	movs	r0, #32
 80040e8:	f7fe ffda 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80040ec:	4a84      	ldr	r2, [pc, #528]	; (8004300 <statemachine+0xa70>)
 80040ee:	2301      	movs	r3, #1
 80040f0:	ca06      	ldmia	r2, {r1, r2}
 80040f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040f4:	f7fe ffae 	bl	8003054 <ssd1306_WriteString>
				  						free(str);
 80040f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040fa:	f010 ff8f 	bl	801501c <free>
 80040fe:	e01b      	b.n	8004138 <statemachine+0x8a8>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8004100:	2014      	movs	r0, #20
 8004102:	f010 ff83 	bl	801500c <malloc>
 8004106:	4603      	mov	r3, r0
 8004108:	637b      	str	r3, [r7, #52]	; 0x34
				  						ssd1306_SetCursor(32, 32);
 800410a:	2120      	movs	r1, #32
 800410c:	2020      	movs	r0, #32
 800410e:	f7fe ffc7 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos3", Font_6x8, White);
 8004112:	4a7b      	ldr	r2, [pc, #492]	; (8004300 <statemachine+0xa70>)
 8004114:	2301      	movs	r3, #1
 8004116:	ca06      	ldmia	r2, {r1, r2}
 8004118:	487d      	ldr	r0, [pc, #500]	; (8004310 <statemachine+0xa80>)
 800411a:	f7fe ff9b 	bl	8003054 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 800411e:	212c      	movs	r1, #44	; 0x2c
 8004120:	2020      	movs	r0, #32
 8004122:	f7fe ffbd 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8004126:	4a76      	ldr	r2, [pc, #472]	; (8004300 <statemachine+0xa70>)
 8004128:	2301      	movs	r3, #1
 800412a:	ca06      	ldmia	r2, {r1, r2}
 800412c:	4879      	ldr	r0, [pc, #484]	; (8004314 <statemachine+0xa84>)
 800412e:	f7fe ff91 	bl	8003054 <ssd1306_WriteString>
				  						free(str);
 8004132:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004134:	f010 ff72 	bl	801501c <free>
				  					}
				  if(BTN_B>=1){
 8004138:	4b77      	ldr	r3, [pc, #476]	; (8004318 <statemachine+0xa88>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	dd08      	ble.n	8004152 <statemachine+0x8c2>
				  					  posstate++;
 8004140:	4b76      	ldr	r3, [pc, #472]	; (800431c <statemachine+0xa8c>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	3301      	adds	r3, #1
 8004146:	b2da      	uxtb	r2, r3
 8004148:	4b74      	ldr	r3, [pc, #464]	; (800431c <statemachine+0xa8c>)
 800414a:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 800414c:	4b72      	ldr	r3, [pc, #456]	; (8004318 <statemachine+0xa88>)
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8004152:	4b73      	ldr	r3, [pc, #460]	; (8004320 <statemachine+0xa90>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f340 80c6 	ble.w	80042e8 <statemachine+0xa58>
									  posstate--;
 800415c:	4b6f      	ldr	r3, [pc, #444]	; (800431c <statemachine+0xa8c>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	3b01      	subs	r3, #1
 8004162:	b2da      	uxtb	r2, r3
 8004164:	4b6d      	ldr	r3, [pc, #436]	; (800431c <statemachine+0xa8c>)
 8004166:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8004168:	4b6d      	ldr	r3, [pc, #436]	; (8004320 <statemachine+0xa90>)
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
								}

				  break;
 800416e:	e0bb      	b.n	80042e8 <statemachine+0xa58>
			  case STATE_ALT:
				  if(myData.fix == 1){
 8004170:	4b61      	ldr	r3, [pc, #388]	; (80042f8 <statemachine+0xa68>)
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	2b01      	cmp	r3, #1
 8004176:	d170      	bne.n	800425a <statemachine+0x9ca>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8004178:	2014      	movs	r0, #20
 800417a:	f010 ff47 	bl	801500c <malloc>
 800417e:	4603      	mov	r3, r0
 8004180:	63bb      	str	r3, [r7, #56]	; 0x38
				  						ssd1306_SetCursor(32, 32);
 8004182:	2120      	movs	r1, #32
 8004184:	2020      	movs	r0, #32
 8004186:	f7fe ff8b 	bl	80030a0 <ssd1306_SetCursor>
				  						snprintf(str,15, "altitude:");
 800418a:	4a66      	ldr	r2, [pc, #408]	; (8004324 <statemachine+0xa94>)
 800418c:	210f      	movs	r1, #15
 800418e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004190:	f012 fe38 	bl	8016e04 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8004194:	4a5a      	ldr	r2, [pc, #360]	; (8004300 <statemachine+0xa70>)
 8004196:	2301      	movs	r3, #1
 8004198:	ca06      	ldmia	r2, {r1, r2}
 800419a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800419c:	f7fe ff5a 	bl	8003054 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80041a0:	4b55      	ldr	r3, [pc, #340]	; (80042f8 <statemachine+0xa68>)
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fc f9cf 	bl	8000548 <__aeabi_f2d>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	e9cd 2300 	strd	r2, r3, [sp]
 80041b2:	4a5d      	ldr	r2, [pc, #372]	; (8004328 <statemachine+0xa98>)
 80041b4:	210f      	movs	r1, #15
 80041b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80041b8:	f012 fe24 	bl	8016e04 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 80041bc:	2128      	movs	r1, #40	; 0x28
 80041be:	2020      	movs	r0, #32
 80041c0:	f7fe ff6e 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80041c4:	4a4e      	ldr	r2, [pc, #312]	; (8004300 <statemachine+0xa70>)
 80041c6:	2301      	movs	r3, #1
 80041c8:	ca06      	ldmia	r2, {r1, r2}
 80041ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80041cc:	f7fe ff42 	bl	8003054 <ssd1306_WriteString>
				  						snprintf(str,15, "Pressure:");
 80041d0:	4a56      	ldr	r2, [pc, #344]	; (800432c <statemachine+0xa9c>)
 80041d2:	210f      	movs	r1, #15
 80041d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80041d6:	f012 fe15 	bl	8016e04 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 80041da:	2130      	movs	r1, #48	; 0x30
 80041dc:	2020      	movs	r0, #32
 80041de:	f7fe ff5f 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80041e2:	4a47      	ldr	r2, [pc, #284]	; (8004300 <statemachine+0xa70>)
 80041e4:	2301      	movs	r3, #1
 80041e6:	ca06      	ldmia	r2, {r1, r2}
 80041e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80041ea:	f7fe ff33 	bl	8003054 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 80041ee:	4b42      	ldr	r3, [pc, #264]	; (80042f8 <statemachine+0xa68>)
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fc f9a8 	bl	8000548 <__aeabi_f2d>
 80041f8:	a33d      	add	r3, pc, #244	; (adr r3, 80042f0 <statemachine+0xa60>)
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	f7fc f9fb 	bl	80005f8 <__aeabi_dmul>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4610      	mov	r0, r2
 8004208:	4619      	mov	r1, r3
 800420a:	f7fc fced 	bl	8000be8 <__aeabi_d2f>
 800420e:	4603      	mov	r3, r0
 8004210:	ee00 3a10 	vmov	s0, r3
 8004214:	f015 fce4 	bl	8019be0 <expf>
 8004218:	eef0 7a40 	vmov.f32	s15, s0
 800421c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8004330 <statemachine+0xaa0>
 8004220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004224:	ee17 0a90 	vmov	r0, s15
 8004228:	f7fc f98e 	bl	8000548 <__aeabi_f2d>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	e9cd 2300 	strd	r2, r3, [sp]
 8004234:	4a3f      	ldr	r2, [pc, #252]	; (8004334 <statemachine+0xaa4>)
 8004236:	210f      	movs	r1, #15
 8004238:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800423a:	f012 fde3 	bl	8016e04 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 800423e:	2138      	movs	r1, #56	; 0x38
 8004240:	2020      	movs	r0, #32
 8004242:	f7fe ff2d 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8004246:	4a2e      	ldr	r2, [pc, #184]	; (8004300 <statemachine+0xa70>)
 8004248:	2301      	movs	r3, #1
 800424a:	ca06      	ldmia	r2, {r1, r2}
 800424c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800424e:	f7fe ff01 	bl	8003054 <ssd1306_WriteString>
				  						free(str);
 8004252:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004254:	f010 fee2 	bl	801501c <free>
 8004258:	e01b      	b.n	8004292 <statemachine+0xa02>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 800425a:	2014      	movs	r0, #20
 800425c:	f010 fed6 	bl	801500c <malloc>
 8004260:	4603      	mov	r3, r0
 8004262:	63fb      	str	r3, [r7, #60]	; 0x3c
				  						ssd1306_SetCursor(32, 32);
 8004264:	2120      	movs	r1, #32
 8004266:	2020      	movs	r0, #32
 8004268:	f7fe ff1a 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos4", Font_6x8, White);
 800426c:	4a24      	ldr	r2, [pc, #144]	; (8004300 <statemachine+0xa70>)
 800426e:	2301      	movs	r3, #1
 8004270:	ca06      	ldmia	r2, {r1, r2}
 8004272:	4831      	ldr	r0, [pc, #196]	; (8004338 <statemachine+0xaa8>)
 8004274:	f7fe feee 	bl	8003054 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8004278:	212c      	movs	r1, #44	; 0x2c
 800427a:	2020      	movs	r0, #32
 800427c:	f7fe ff10 	bl	80030a0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8004280:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <statemachine+0xa70>)
 8004282:	2301      	movs	r3, #1
 8004284:	ca06      	ldmia	r2, {r1, r2}
 8004286:	4823      	ldr	r0, [pc, #140]	; (8004314 <statemachine+0xa84>)
 8004288:	f7fe fee4 	bl	8003054 <ssd1306_WriteString>
				  						free(str);
 800428c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800428e:	f010 fec5 	bl	801501c <free>
				  					}
				  if(BTN_B>=1){
 8004292:	4b21      	ldr	r3, [pc, #132]	; (8004318 <statemachine+0xa88>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	dd14      	ble.n	80042c4 <statemachine+0xa34>
				  					posstate--;
 800429a:	4b20      	ldr	r3, [pc, #128]	; (800431c <statemachine+0xa8c>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	3b01      	subs	r3, #1
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	4b1e      	ldr	r3, [pc, #120]	; (800431c <statemachine+0xa8c>)
 80042a4:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 80042a6:	4b1d      	ldr	r3, [pc, #116]	; (800431c <statemachine+0xa8c>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4b1b      	ldr	r3, [pc, #108]	; (800431c <statemachine+0xa8c>)
 80042b0:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 80042b2:	4b1a      	ldr	r3, [pc, #104]	; (800431c <statemachine+0xa8c>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	4b18      	ldr	r3, [pc, #96]	; (800431c <statemachine+0xa8c>)
 80042bc:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 80042be:	4b16      	ldr	r3, [pc, #88]	; (8004318 <statemachine+0xa88>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80042c4:	4b16      	ldr	r3, [pc, #88]	; (8004320 <statemachine+0xa90>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	dd37      	ble.n	800433c <statemachine+0xaac>
					  posstate--;
 80042cc:	4b13      	ldr	r3, [pc, #76]	; (800431c <statemachine+0xa8c>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	4b11      	ldr	r3, [pc, #68]	; (800431c <statemachine+0xa8c>)
 80042d6:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 80042d8:	4b11      	ldr	r3, [pc, #68]	; (8004320 <statemachine+0xa90>)
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
				}
				  break;
 80042de:	e02d      	b.n	800433c <statemachine+0xaac>
				  break;
 80042e0:	bf00      	nop
 80042e2:	e02c      	b.n	800433e <statemachine+0xaae>
				  break;
 80042e4:	bf00      	nop
 80042e6:	e02a      	b.n	800433e <statemachine+0xaae>
				  break;
 80042e8:	bf00      	nop
 80042ea:	e028      	b.n	800433e <statemachine+0xaae>
 80042ec:	f3af 8000 	nop.w
 80042f0:	fb798882 	.word	0xfb798882
 80042f4:	bf1e1818 	.word	0xbf1e1818
 80042f8:	200006e0 	.word	0x200006e0
 80042fc:	0801ba58 	.word	0x0801ba58
 8004300:	2000000c 	.word	0x2000000c
 8004304:	0801ba4c 	.word	0x0801ba4c
 8004308:	0801ba2c 	.word	0x0801ba2c
 800430c:	0801ba24 	.word	0x0801ba24
 8004310:	0801ba64 	.word	0x0801ba64
 8004314:	0801b9f4 	.word	0x0801b9f4
 8004318:	20000724 	.word	0x20000724
 800431c:	20000497 	.word	0x20000497
 8004320:	20000a68 	.word	0x20000a68
 8004324:	0801ba6c 	.word	0x0801ba6c
 8004328:	0801ba78 	.word	0x0801ba78
 800432c:	0801ba80 	.word	0x0801ba80
 8004330:	447a0000 	.word	0x447a0000
 8004334:	0801ba8c 	.word	0x0801ba8c
 8004338:	0801ba98 	.word	0x0801ba98
				  break;
 800433c:	bf00      	nop
			  }

					if(BTN_A>=1){
 800433e:	4b6a      	ldr	r3, [pc, #424]	; (80044e8 <statemachine+0xc58>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	dd0b      	ble.n	800435e <statemachine+0xace>
							state++;
 8004346:	4b69      	ldr	r3, [pc, #420]	; (80044ec <statemachine+0xc5c>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	3301      	adds	r3, #1
 800434c:	b2da      	uxtb	r2, r3
 800434e:	4b67      	ldr	r3, [pc, #412]	; (80044ec <statemachine+0xc5c>)
 8004350:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8004352:	4b65      	ldr	r3, [pc, #404]	; (80044e8 <statemachine+0xc58>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8004358:	4b65      	ldr	r3, [pc, #404]	; (80044f0 <statemachine+0xc60>)
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]


						}
					if(BTN_A_LONG>=1){
 800435e:	4b65      	ldr	r3, [pc, #404]	; (80044f4 <statemachine+0xc64>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f341 8385 	ble.w	8005a72 <statemachine+0x21e2>
									 									 									  			 	state--;
 8004368:	4b60      	ldr	r3, [pc, #384]	; (80044ec <statemachine+0xc5c>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	3b01      	subs	r3, #1
 800436e:	b2da      	uxtb	r2, r3
 8004370:	4b5e      	ldr	r3, [pc, #376]	; (80044ec <statemachine+0xc5c>)
 8004372:	701a      	strb	r2, [r3, #0]
									 									 									  			 	BTN_A=0;
 8004374:	4b5c      	ldr	r3, [pc, #368]	; (80044e8 <statemachine+0xc58>)
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_B=0;
 800437a:	4b5d      	ldr	r3, [pc, #372]	; (80044f0 <statemachine+0xc60>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_A_LONG=0;
 8004380:	4b5c      	ldr	r3, [pc, #368]	; (80044f4 <statemachine+0xc64>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
									 									 									  	}
			  break;
 8004386:	f001 bb74 	b.w	8005a72 <statemachine+0x21e2>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 800438a:	2000      	movs	r0, #0
 800438c:	f7fe fd46 	bl	8002e1c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8004390:	4959      	ldr	r1, [pc, #356]	; (80044f8 <statemachine+0xc68>)
 8004392:	485a      	ldr	r0, [pc, #360]	; (80044fc <statemachine+0xc6c>)
 8004394:	f7fe f85a 	bl	800244c <nmea_parse>
			  if(settimeen==0){
 8004398:	4b59      	ldr	r3, [pc, #356]	; (8004500 <statemachine+0xc70>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d145      	bne.n	800442c <statemachine+0xb9c>

						  if(myData.fix==1){
 80043a0:	4b56      	ldr	r3, [pc, #344]	; (80044fc <statemachine+0xc6c>)
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d141      	bne.n	800442c <statemachine+0xb9c>
							settimeen=1;
 80043a8:	4b55      	ldr	r3, [pc, #340]	; (8004500 <statemachine+0xc70>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 80043ae:	4b53      	ldr	r3, [pc, #332]	; (80044fc <statemachine+0xc6c>)
 80043b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	0092      	lsls	r2, r2, #2
 80043be:	4413      	add	r3, r2
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	4b4d      	ldr	r3, [pc, #308]	; (80044fc <statemachine+0xc6c>)
 80043c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	4413      	add	r3, r2
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	4b4b      	ldr	r3, [pc, #300]	; (8004504 <statemachine+0xc74>)
 80043d6:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 80043d8:	4b48      	ldr	r3, [pc, #288]	; (80044fc <statemachine+0xc6c>)
 80043da:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	0092      	lsls	r2, r2, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	4b43      	ldr	r3, [pc, #268]	; (80044fc <statemachine+0xc6c>)
 80043f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	4413      	add	r3, r2
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	4b42      	ldr	r3, [pc, #264]	; (8004508 <statemachine+0xc78>)
 8004400:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004402:	4b3e      	ldr	r3, [pc, #248]	; (80044fc <statemachine+0xc6c>)
 8004404:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	b2db      	uxtb	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	0092      	lsls	r2, r2, #2
 8004412:	4413      	add	r3, r2
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	b2da      	uxtb	r2, r3
 8004418:	4b38      	ldr	r3, [pc, #224]	; (80044fc <statemachine+0xc6c>)
 800441a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	b2db      	uxtb	r3, r3
 8004424:	4413      	add	r3, r2
 8004426:	b2da      	uxtb	r2, r3
 8004428:	4b38      	ldr	r3, [pc, #224]	; (800450c <statemachine+0xc7c>)
 800442a:	701a      	strb	r2, [r3, #0]

					  }



			  if(myData.fix == 0){
 800442c:	4b33      	ldr	r3, [pc, #204]	; (80044fc <statemachine+0xc6c>)
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <statemachine+0xbba>
				  ssd1306_SetCursor(32, 32);
 8004434:	2120      	movs	r1, #32
 8004436:	2020      	movs	r0, #32
 8004438:	f7fe fe32 	bl	80030a0 <ssd1306_SetCursor>
				  ssd1306_WriteString("no fix", Font_6x8, White);
 800443c:	4a34      	ldr	r2, [pc, #208]	; (8004510 <statemachine+0xc80>)
 800443e:	2301      	movs	r3, #1
 8004440:	ca06      	ldmia	r2, {r1, r2}
 8004442:	4834      	ldr	r0, [pc, #208]	; (8004514 <statemachine+0xc84>)
 8004444:	f7fe fe06 	bl	8003054 <ssd1306_WriteString>
 8004448:	e009      	b.n	800445e <statemachine+0xbce>

			  }
			  else{

				  ssd1306_SetCursor(32, 32);
 800444a:	2120      	movs	r1, #32
 800444c:	2020      	movs	r0, #32
 800444e:	f7fe fe27 	bl	80030a0 <ssd1306_SetCursor>
				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 8004452:	4a2f      	ldr	r2, [pc, #188]	; (8004510 <statemachine+0xc80>)
 8004454:	2301      	movs	r3, #1
 8004456:	ca06      	ldmia	r2, {r1, r2}
 8004458:	482f      	ldr	r0, [pc, #188]	; (8004518 <statemachine+0xc88>)
 800445a:	f7fe fdfb 	bl	8003054 <ssd1306_WriteString>

			  }



				  switch(hrstate){
 800445e:	4b2f      	ldr	r3, [pc, #188]	; (800451c <statemachine+0xc8c>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <statemachine+0xbdc>
 8004466:	2b01      	cmp	r3, #1
 8004468:	d060      	beq.n	800452c <statemachine+0xc9c>
 800446a:	e29a      	b.n	80049a2 <statemachine+0x1112>
				  case STATE_DIGIT:
					  char * str = (char*)malloc(sizeof(char)*20);
 800446c:	2014      	movs	r0, #20
 800446e:	f010 fdcd 	bl	801500c <malloc>
 8004472:	4603      	mov	r3, r0
 8004474:	643b      	str	r3, [r7, #64]	; 0x40


					 ssd1306_SetCursor(32, 42);
 8004476:	212a      	movs	r1, #42	; 0x2a
 8004478:	2020      	movs	r0, #32
 800447a:	f7fe fe11 	bl	80030a0 <ssd1306_SetCursor>
					 snprintf(str,15, "%02d:%02d",HR,MINUTE);
 800447e:	4b21      	ldr	r3, [pc, #132]	; (8004504 <statemachine+0xc74>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	4b20      	ldr	r3, [pc, #128]	; (8004508 <statemachine+0xc78>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	4613      	mov	r3, r2
 800448c:	4a24      	ldr	r2, [pc, #144]	; (8004520 <statemachine+0xc90>)
 800448e:	210f      	movs	r1, #15
 8004490:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004492:	f012 fcb7 	bl	8016e04 <sniprintf>
					ssd1306_WriteString(str, Font_7x10, White);
 8004496:	4a23      	ldr	r2, [pc, #140]	; (8004524 <statemachine+0xc94>)
 8004498:	2301      	movs	r3, #1
 800449a:	ca06      	ldmia	r2, {r1, r2}
 800449c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800449e:	f7fe fdd9 	bl	8003054 <ssd1306_WriteString>
					ssd1306_SetCursor(32, 50);
 80044a2:	2132      	movs	r1, #50	; 0x32
 80044a4:	2020      	movs	r0, #32
 80044a6:	f7fe fdfb 	bl	80030a0 <ssd1306_SetCursor>
					snprintf(str,15, "%02d sec",SEC);
 80044aa:	4b18      	ldr	r3, [pc, #96]	; (800450c <statemachine+0xc7c>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <statemachine+0xc98>)
 80044b0:	210f      	movs	r1, #15
 80044b2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80044b4:	f012 fca6 	bl	8016e04 <sniprintf>
					ssd1306_WriteString(str, Font_6x8, White);
 80044b8:	4a15      	ldr	r2, [pc, #84]	; (8004510 <statemachine+0xc80>)
 80044ba:	2301      	movs	r3, #1
 80044bc:	ca06      	ldmia	r2, {r1, r2}
 80044be:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80044c0:	f7fe fdc8 	bl	8003054 <ssd1306_WriteString>
					free(str);
 80044c4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80044c6:	f010 fda9 	bl	801501c <free>
					if(BTN_B>=1){
 80044ca:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <statemachine+0xc60>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f340 8264 	ble.w	800499c <statemachine+0x110c>
												hrstate++;
 80044d4:	4b11      	ldr	r3, [pc, #68]	; (800451c <statemachine+0xc8c>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	3301      	adds	r3, #1
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	4b0f      	ldr	r3, [pc, #60]	; (800451c <statemachine+0xc8c>)
 80044de:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 80044e0:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <statemachine+0xc60>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
											}




					  break;
 80044e6:	e259      	b.n	800499c <statemachine+0x110c>
 80044e8:	20000720 	.word	0x20000720
 80044ec:	20000494 	.word	0x20000494
 80044f0:	20000724 	.word	0x20000724
 80044f4:	20000a6c 	.word	0x20000a6c
 80044f8:	200004e0 	.word	0x200004e0
 80044fc:	200006e0 	.word	0x200006e0
 8004500:	20000fe0 	.word	0x20000fe0
 8004504:	20000a55 	.word	0x20000a55
 8004508:	20000a56 	.word	0x20000a56
 800450c:	20000a54 	.word	0x20000a54
 8004510:	2000000c 	.word	0x2000000c
 8004514:	0801baa0 	.word	0x0801baa0
 8004518:	0801baa8 	.word	0x0801baa8
 800451c:	20000495 	.word	0x20000495
 8004520:	0801bab0 	.word	0x0801bab0
 8004524:	20000014 	.word	0x20000014
 8004528:	0801babc 	.word	0x0801babc
				  case STATE_OLD:
					  if(HR>12){
 800452c:	4b90      	ldr	r3, [pc, #576]	; (8004770 <statemachine+0xee0>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b0c      	cmp	r3, #12
 8004532:	d905      	bls.n	8004540 <statemachine+0xcb0>
						  HR=HR-12;
 8004534:	4b8e      	ldr	r3, [pc, #568]	; (8004770 <statemachine+0xee0>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	3b0c      	subs	r3, #12
 800453a:	b2da      	uxtb	r2, r3
 800453c:	4b8c      	ldr	r3, [pc, #560]	; (8004770 <statemachine+0xee0>)
 800453e:	701a      	strb	r2, [r3, #0]
					  }
					  ssd1306_DrawCircle(64, 48, 12, White);
 8004540:	2301      	movs	r3, #1
 8004542:	220c      	movs	r2, #12
 8004544:	2130      	movs	r1, #48	; 0x30
 8004546:	2040      	movs	r0, #64	; 0x40
 8004548:	f7fe fe2e 	bl	80031a8 <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-HR)*M_PI/6)),48-floor(6*sin((3-HR)*M_PI/6)),White);
 800454c:	4b88      	ldr	r3, [pc, #544]	; (8004770 <statemachine+0xee0>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	f1c3 0303 	rsb	r3, r3, #3
 8004554:	4618      	mov	r0, r3
 8004556:	f7fb ffe5 	bl	8000524 <__aeabi_i2d>
 800455a:	a383      	add	r3, pc, #524	; (adr r3, 8004768 <statemachine+0xed8>)
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	f7fc f84a 	bl	80005f8 <__aeabi_dmul>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4610      	mov	r0, r2
 800456a:	4619      	mov	r1, r3
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	4b80      	ldr	r3, [pc, #512]	; (8004774 <statemachine+0xee4>)
 8004572:	f7fc f96b 	bl	800084c <__aeabi_ddiv>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	ec43 2b17 	vmov	d7, r2, r3
 800457e:	eeb0 0a47 	vmov.f32	s0, s14
 8004582:	eef0 0a67 	vmov.f32	s1, s15
 8004586:	f015 fa7f 	bl	8019a88 <cos>
 800458a:	ec51 0b10 	vmov	r0, r1, d0
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	4b78      	ldr	r3, [pc, #480]	; (8004774 <statemachine+0xee4>)
 8004594:	f7fc f830 	bl	80005f8 <__aeabi_dmul>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	ec43 2b17 	vmov	d7, r2, r3
 80045a0:	eeb0 0a47 	vmov.f32	s0, s14
 80045a4:	eef0 0a67 	vmov.f32	s1, s15
 80045a8:	f015 fbb6 	bl	8019d18 <floor>
 80045ac:	ec51 0b10 	vmov	r0, r1, d0
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	4b70      	ldr	r3, [pc, #448]	; (8004778 <statemachine+0xee8>)
 80045b6:	f7fb fe69 	bl	800028c <__adddf3>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	4610      	mov	r0, r2
 80045c0:	4619      	mov	r1, r3
 80045c2:	f7fc faf1 	bl	8000ba8 <__aeabi_d2uiz>
 80045c6:	4603      	mov	r3, r0
 80045c8:	b2dc      	uxtb	r4, r3
 80045ca:	4b69      	ldr	r3, [pc, #420]	; (8004770 <statemachine+0xee0>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	f1c3 0303 	rsb	r3, r3, #3
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fb ffa6 	bl	8000524 <__aeabi_i2d>
 80045d8:	a363      	add	r3, pc, #396	; (adr r3, 8004768 <statemachine+0xed8>)
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	f7fc f80b 	bl	80005f8 <__aeabi_dmul>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	4b61      	ldr	r3, [pc, #388]	; (8004774 <statemachine+0xee4>)
 80045f0:	f7fc f92c 	bl	800084c <__aeabi_ddiv>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	ec43 2b17 	vmov	d7, r2, r3
 80045fc:	eeb0 0a47 	vmov.f32	s0, s14
 8004600:	eef0 0a67 	vmov.f32	s1, s15
 8004604:	f015 fa94 	bl	8019b30 <sin>
 8004608:	ec51 0b10 	vmov	r0, r1, d0
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	4b58      	ldr	r3, [pc, #352]	; (8004774 <statemachine+0xee4>)
 8004612:	f7fb fff1 	bl	80005f8 <__aeabi_dmul>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	ec43 2b17 	vmov	d7, r2, r3
 800461e:	eeb0 0a47 	vmov.f32	s0, s14
 8004622:	eef0 0a67 	vmov.f32	s1, s15
 8004626:	f015 fb77 	bl	8019d18 <floor>
 800462a:	ec53 2b10 	vmov	r2, r3, d0
 800462e:	f04f 0000 	mov.w	r0, #0
 8004632:	4952      	ldr	r1, [pc, #328]	; (800477c <statemachine+0xeec>)
 8004634:	f7fb fe28 	bl	8000288 <__aeabi_dsub>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	4610      	mov	r0, r2
 800463e:	4619      	mov	r1, r3
 8004640:	f7fc fab2 	bl	8000ba8 <__aeabi_d2uiz>
 8004644:	4603      	mov	r3, r0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2201      	movs	r2, #1
 800464a:	9200      	str	r2, [sp, #0]
 800464c:	4622      	mov	r2, r4
 800464e:	2130      	movs	r1, #48	; 0x30
 8004650:	2040      	movs	r0, #64	; 0x40
 8004652:	f7fe fd3d 	bl	80030d0 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-MINUTE)*M_PI/30)),48-floor(12*sin((15-MINUTE)*M_PI/30)),White);
 8004656:	4b4a      	ldr	r3, [pc, #296]	; (8004780 <statemachine+0xef0>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	f1c3 030f 	rsb	r3, r3, #15
 800465e:	4618      	mov	r0, r3
 8004660:	f7fb ff60 	bl	8000524 <__aeabi_i2d>
 8004664:	a340      	add	r3, pc, #256	; (adr r3, 8004768 <statemachine+0xed8>)
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	f7fb ffc5 	bl	80005f8 <__aeabi_dmul>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4610      	mov	r0, r2
 8004674:	4619      	mov	r1, r3
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	4b42      	ldr	r3, [pc, #264]	; (8004784 <statemachine+0xef4>)
 800467c:	f7fc f8e6 	bl	800084c <__aeabi_ddiv>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	ec43 2b17 	vmov	d7, r2, r3
 8004688:	eeb0 0a47 	vmov.f32	s0, s14
 800468c:	eef0 0a67 	vmov.f32	s1, s15
 8004690:	f015 f9fa 	bl	8019a88 <cos>
 8004694:	ec51 0b10 	vmov	r0, r1, d0
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	4b3a      	ldr	r3, [pc, #232]	; (8004788 <statemachine+0xef8>)
 800469e:	f7fb ffab 	bl	80005f8 <__aeabi_dmul>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	ec43 2b17 	vmov	d7, r2, r3
 80046aa:	eeb0 0a47 	vmov.f32	s0, s14
 80046ae:	eef0 0a67 	vmov.f32	s1, s15
 80046b2:	f015 fb31 	bl	8019d18 <floor>
 80046b6:	ec51 0b10 	vmov	r0, r1, d0
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	4b2e      	ldr	r3, [pc, #184]	; (8004778 <statemachine+0xee8>)
 80046c0:	f7fb fde4 	bl	800028c <__adddf3>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4610      	mov	r0, r2
 80046ca:	4619      	mov	r1, r3
 80046cc:	f7fc fa6c 	bl	8000ba8 <__aeabi_d2uiz>
 80046d0:	4603      	mov	r3, r0
 80046d2:	b2dc      	uxtb	r4, r3
 80046d4:	4b2a      	ldr	r3, [pc, #168]	; (8004780 <statemachine+0xef0>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	f1c3 030f 	rsb	r3, r3, #15
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fb ff21 	bl	8000524 <__aeabi_i2d>
 80046e2:	a321      	add	r3, pc, #132	; (adr r3, 8004768 <statemachine+0xed8>)
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	f7fb ff86 	bl	80005f8 <__aeabi_dmul>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4610      	mov	r0, r2
 80046f2:	4619      	mov	r1, r3
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	4b22      	ldr	r3, [pc, #136]	; (8004784 <statemachine+0xef4>)
 80046fa:	f7fc f8a7 	bl	800084c <__aeabi_ddiv>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	ec43 2b17 	vmov	d7, r2, r3
 8004706:	eeb0 0a47 	vmov.f32	s0, s14
 800470a:	eef0 0a67 	vmov.f32	s1, s15
 800470e:	f015 fa0f 	bl	8019b30 <sin>
 8004712:	ec51 0b10 	vmov	r0, r1, d0
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	4b1b      	ldr	r3, [pc, #108]	; (8004788 <statemachine+0xef8>)
 800471c:	f7fb ff6c 	bl	80005f8 <__aeabi_dmul>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	ec43 2b17 	vmov	d7, r2, r3
 8004728:	eeb0 0a47 	vmov.f32	s0, s14
 800472c:	eef0 0a67 	vmov.f32	s1, s15
 8004730:	f015 faf2 	bl	8019d18 <floor>
 8004734:	ec53 2b10 	vmov	r2, r3, d0
 8004738:	f04f 0000 	mov.w	r0, #0
 800473c:	490f      	ldr	r1, [pc, #60]	; (800477c <statemachine+0xeec>)
 800473e:	f7fb fda3 	bl	8000288 <__aeabi_dsub>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4610      	mov	r0, r2
 8004748:	4619      	mov	r1, r3
 800474a:	f7fc fa2d 	bl	8000ba8 <__aeabi_d2uiz>
 800474e:	4603      	mov	r3, r0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2201      	movs	r2, #1
 8004754:	9200      	str	r2, [sp, #0]
 8004756:	4622      	mov	r2, r4
 8004758:	2130      	movs	r1, #48	; 0x30
 800475a:	2040      	movs	r0, #64	; 0x40
 800475c:	f7fe fcb8 	bl	80030d0 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8004760:	2300      	movs	r3, #0
 8004762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004764:	e108      	b.n	8004978 <statemachine+0x10e8>
 8004766:	bf00      	nop
 8004768:	54442d18 	.word	0x54442d18
 800476c:	400921fb 	.word	0x400921fb
 8004770:	20000a55 	.word	0x20000a55
 8004774:	40180000 	.word	0x40180000
 8004778:	40500000 	.word	0x40500000
 800477c:	40480000 	.word	0x40480000
 8004780:	20000a56 	.word	0x20000a56
 8004784:	403e0000 	.word	0x403e0000
 8004788:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 800478c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800478e:	f7fb fec9 	bl	8000524 <__aeabi_i2d>
 8004792:	a3c7      	add	r3, pc, #796	; (adr r3, 8004ab0 <statemachine+0x1220>)
 8004794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004798:	f7fb ff2e 	bl	80005f8 <__aeabi_dmul>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4610      	mov	r0, r2
 80047a2:	4619      	mov	r1, r3
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	4bc3      	ldr	r3, [pc, #780]	; (8004ab8 <statemachine+0x1228>)
 80047aa:	f7fc f84f 	bl	800084c <__aeabi_ddiv>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	ec43 2b17 	vmov	d7, r2, r3
 80047b6:	eeb0 0a47 	vmov.f32	s0, s14
 80047ba:	eef0 0a67 	vmov.f32	s1, s15
 80047be:	f015 f963 	bl	8019a88 <cos>
 80047c2:	ec51 0b10 	vmov	r0, r1, d0
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	4bbc      	ldr	r3, [pc, #752]	; (8004abc <statemachine+0x122c>)
 80047cc:	f7fb ff14 	bl	80005f8 <__aeabi_dmul>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	ec43 2b17 	vmov	d7, r2, r3
 80047d8:	eeb0 0a47 	vmov.f32	s0, s14
 80047dc:	eef0 0a67 	vmov.f32	s1, s15
 80047e0:	f015 fa9a 	bl	8019d18 <floor>
 80047e4:	ec51 0b10 	vmov	r0, r1, d0
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	4bb4      	ldr	r3, [pc, #720]	; (8004ac0 <statemachine+0x1230>)
 80047ee:	f7fb fd4d 	bl	800028c <__adddf3>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4610      	mov	r0, r2
 80047f8:	4619      	mov	r1, r3
 80047fa:	f7fc f9d5 	bl	8000ba8 <__aeabi_d2uiz>
 80047fe:	4603      	mov	r3, r0
 8004800:	b2dc      	uxtb	r4, r3
 8004802:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004804:	f7fb fe8e 	bl	8000524 <__aeabi_i2d>
 8004808:	a3a9      	add	r3, pc, #676	; (adr r3, 8004ab0 <statemachine+0x1220>)
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	f7fb fef3 	bl	80005f8 <__aeabi_dmul>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	4ba6      	ldr	r3, [pc, #664]	; (8004ab8 <statemachine+0x1228>)
 8004820:	f7fc f814 	bl	800084c <__aeabi_ddiv>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	ec43 2b17 	vmov	d7, r2, r3
 800482c:	eeb0 0a47 	vmov.f32	s0, s14
 8004830:	eef0 0a67 	vmov.f32	s1, s15
 8004834:	f015 f97c 	bl	8019b30 <sin>
 8004838:	ec51 0b10 	vmov	r0, r1, d0
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	4b9e      	ldr	r3, [pc, #632]	; (8004abc <statemachine+0x122c>)
 8004842:	f7fb fed9 	bl	80005f8 <__aeabi_dmul>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	ec43 2b17 	vmov	d7, r2, r3
 800484e:	eeb0 0a47 	vmov.f32	s0, s14
 8004852:	eef0 0a67 	vmov.f32	s1, s15
 8004856:	f015 fa5f 	bl	8019d18 <floor>
 800485a:	ec51 0b10 	vmov	r0, r1, d0
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	4b98      	ldr	r3, [pc, #608]	; (8004ac4 <statemachine+0x1234>)
 8004864:	f7fb fd12 	bl	800028c <__adddf3>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4610      	mov	r0, r2
 800486e:	4619      	mov	r1, r3
 8004870:	f7fc f99a 	bl	8000ba8 <__aeabi_d2uiz>
 8004874:	4603      	mov	r3, r0
 8004876:	b2dd      	uxtb	r5, r3
 8004878:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800487a:	f7fb fe53 	bl	8000524 <__aeabi_i2d>
 800487e:	a38c      	add	r3, pc, #560	; (adr r3, 8004ab0 <statemachine+0x1220>)
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	f7fb feb8 	bl	80005f8 <__aeabi_dmul>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4610      	mov	r0, r2
 800488e:	4619      	mov	r1, r3
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	4b88      	ldr	r3, [pc, #544]	; (8004ab8 <statemachine+0x1228>)
 8004896:	f7fb ffd9 	bl	800084c <__aeabi_ddiv>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	ec43 2b17 	vmov	d7, r2, r3
 80048a2:	eeb0 0a47 	vmov.f32	s0, s14
 80048a6:	eef0 0a67 	vmov.f32	s1, s15
 80048aa:	f015 f8ed 	bl	8019a88 <cos>
 80048ae:	ec51 0b10 	vmov	r0, r1, d0
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	4b84      	ldr	r3, [pc, #528]	; (8004ac8 <statemachine+0x1238>)
 80048b8:	f7fb fe9e 	bl	80005f8 <__aeabi_dmul>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	ec43 2b17 	vmov	d7, r2, r3
 80048c4:	eeb0 0a47 	vmov.f32	s0, s14
 80048c8:	eef0 0a67 	vmov.f32	s1, s15
 80048cc:	f015 fa24 	bl	8019d18 <floor>
 80048d0:	ec51 0b10 	vmov	r0, r1, d0
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	4b79      	ldr	r3, [pc, #484]	; (8004ac0 <statemachine+0x1230>)
 80048da:	f7fb fcd7 	bl	800028c <__adddf3>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	4610      	mov	r0, r2
 80048e4:	4619      	mov	r1, r3
 80048e6:	f7fc f95f 	bl	8000ba8 <__aeabi_d2uiz>
 80048ea:	4603      	mov	r3, r0
 80048ec:	b2de      	uxtb	r6, r3
 80048ee:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80048f0:	f7fb fe18 	bl	8000524 <__aeabi_i2d>
 80048f4:	a36e      	add	r3, pc, #440	; (adr r3, 8004ab0 <statemachine+0x1220>)
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f7fb fe7d 	bl	80005f8 <__aeabi_dmul>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4610      	mov	r0, r2
 8004904:	4619      	mov	r1, r3
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	4b6b      	ldr	r3, [pc, #428]	; (8004ab8 <statemachine+0x1228>)
 800490c:	f7fb ff9e 	bl	800084c <__aeabi_ddiv>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	ec43 2b17 	vmov	d7, r2, r3
 8004918:	eeb0 0a47 	vmov.f32	s0, s14
 800491c:	eef0 0a67 	vmov.f32	s1, s15
 8004920:	f015 f906 	bl	8019b30 <sin>
 8004924:	ec51 0b10 	vmov	r0, r1, d0
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	4b66      	ldr	r3, [pc, #408]	; (8004ac8 <statemachine+0x1238>)
 800492e:	f7fb fe63 	bl	80005f8 <__aeabi_dmul>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	ec43 2b17 	vmov	d7, r2, r3
 800493a:	eeb0 0a47 	vmov.f32	s0, s14
 800493e:	eef0 0a67 	vmov.f32	s1, s15
 8004942:	f015 f9e9 	bl	8019d18 <floor>
 8004946:	ec51 0b10 	vmov	r0, r1, d0
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	4b5d      	ldr	r3, [pc, #372]	; (8004ac4 <statemachine+0x1234>)
 8004950:	f7fb fc9c 	bl	800028c <__adddf3>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4610      	mov	r0, r2
 800495a:	4619      	mov	r1, r3
 800495c:	f7fc f924 	bl	8000ba8 <__aeabi_d2uiz>
 8004960:	4603      	mov	r3, r0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2201      	movs	r2, #1
 8004966:	9200      	str	r2, [sp, #0]
 8004968:	4632      	mov	r2, r6
 800496a:	4629      	mov	r1, r5
 800496c:	4620      	mov	r0, r4
 800496e:	f7fe fbaf 	bl	80030d0 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8004972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004974:	3301      	adds	r3, #1
 8004976:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800497a:	2b0c      	cmp	r3, #12
 800497c:	f77f af06 	ble.w	800478c <statemachine+0xefc>
					  }
					  if(BTN_B>=1){
 8004980:	4b52      	ldr	r3, [pc, #328]	; (8004acc <statemachine+0x123c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	dd0b      	ble.n	80049a0 <statemachine+0x1110>
					  	hrstate--;
 8004988:	4b51      	ldr	r3, [pc, #324]	; (8004ad0 <statemachine+0x1240>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	3b01      	subs	r3, #1
 800498e:	b2da      	uxtb	r2, r3
 8004990:	4b4f      	ldr	r3, [pc, #316]	; (8004ad0 <statemachine+0x1240>)
 8004992:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 8004994:	4b4d      	ldr	r3, [pc, #308]	; (8004acc <statemachine+0x123c>)
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
					  }


					  break;
 800499a:	e001      	b.n	80049a0 <statemachine+0x1110>
					  break;
 800499c:	bf00      	nop
 800499e:	e000      	b.n	80049a2 <statemachine+0x1112>
					  break;
 80049a0:	bf00      	nop

				  }

				  if(BTN_A>=1){
 80049a2:	4b4c      	ldr	r3, [pc, #304]	; (8004ad4 <statemachine+0x1244>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	dd0e      	ble.n	80049c8 <statemachine+0x1138>
			  		state++;
 80049aa:	4b4b      	ldr	r3, [pc, #300]	; (8004ad8 <statemachine+0x1248>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	3301      	adds	r3, #1
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	4b49      	ldr	r3, [pc, #292]	; (8004ad8 <statemachine+0x1248>)
 80049b4:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 80049b6:	4b47      	ldr	r3, [pc, #284]	; (8004ad4 <statemachine+0x1244>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 80049bc:	4b43      	ldr	r3, [pc, #268]	; (8004acc <statemachine+0x123c>)
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
			  		settimeen=0;
 80049c2:	4b46      	ldr	r3, [pc, #280]	; (8004adc <statemachine+0x124c>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
			  		}
				  if(BTN_A_LONG>=1){
 80049c8:	4b45      	ldr	r3, [pc, #276]	; (8004ae0 <statemachine+0x1250>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f341 8052 	ble.w	8005a76 <statemachine+0x21e6>
				  									 									 									  			 	state--;
 80049d2:	4b41      	ldr	r3, [pc, #260]	; (8004ad8 <statemachine+0x1248>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	4b3f      	ldr	r3, [pc, #252]	; (8004ad8 <statemachine+0x1248>)
 80049dc:	701a      	strb	r2, [r3, #0]
				  									 									 									  			 	BTN_A=0;
 80049de:	4b3d      	ldr	r3, [pc, #244]	; (8004ad4 <statemachine+0x1244>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
				  									 									 									  			 	BTN_B=0;
 80049e4:	4b39      	ldr	r3, [pc, #228]	; (8004acc <statemachine+0x123c>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]
				  									 									 									  			 	BTN_A_LONG=0;
 80049ea:	4b3d      	ldr	r3, [pc, #244]	; (8004ae0 <statemachine+0x1250>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]





			  break;
 80049f0:	f001 b841 	b.w	8005a76 <statemachine+0x21e6>
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 80049f4:	2000      	movs	r0, #0
 80049f6:	f7fe fa11 	bl	8002e1c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 80049fa:	493a      	ldr	r1, [pc, #232]	; (8004ae4 <statemachine+0x1254>)
 80049fc:	483a      	ldr	r0, [pc, #232]	; (8004ae8 <statemachine+0x1258>)
 80049fe:	f7fd fd25 	bl	800244c <nmea_parse>
			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8004a02:	4b39      	ldr	r3, [pc, #228]	; (8004ae8 <statemachine+0x1258>)
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d17c      	bne.n	8004b04 <statemachine+0x1274>
			 			 						char * str = (char*)malloc(sizeof(char)*20);
 8004a0a:	2014      	movs	r0, #20
 8004a0c:	f010 fafe 	bl	801500c <malloc>
 8004a10:	4603      	mov	r3, r0
 8004a12:	647b      	str	r3, [r7, #68]	; 0x44
			 			 						snprintf(str,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8004a14:	4b34      	ldr	r3, [pc, #208]	; (8004ae8 <statemachine+0x1258>)
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fb fd95 	bl	8000548 <__aeabi_f2d>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	e9cd 2300 	strd	r2, r3, [sp]
 8004a26:	4a31      	ldr	r2, [pc, #196]	; (8004aec <statemachine+0x125c>)
 8004a28:	210f      	movs	r1, #15
 8004a2a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004a2c:	f012 f9ea 	bl	8016e04 <sniprintf>
			 			 						ssd1306_SetCursor(32, 32);
 8004a30:	2120      	movs	r1, #32
 8004a32:	2020      	movs	r0, #32
 8004a34:	f7fe fb34 	bl	80030a0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004a38:	4a2d      	ldr	r2, [pc, #180]	; (8004af0 <statemachine+0x1260>)
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	ca06      	ldmia	r2, {r1, r2}
 8004a3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004a40:	f7fe fb08 	bl	8003054 <ssd1306_WriteString>
			 			 						snprintf(str,20, "v=%0.2fV",vbat);
 8004a44:	4b2b      	ldr	r3, [pc, #172]	; (8004af4 <statemachine+0x1264>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fb fd7d 	bl	8000548 <__aeabi_f2d>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	e9cd 2300 	strd	r2, r3, [sp]
 8004a56:	4a28      	ldr	r2, [pc, #160]	; (8004af8 <statemachine+0x1268>)
 8004a58:	2114      	movs	r1, #20
 8004a5a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004a5c:	f012 f9d2 	bl	8016e04 <sniprintf>
			 			 						ssd1306_SetCursor(32, 42);
 8004a60:	212a      	movs	r1, #42	; 0x2a
 8004a62:	2020      	movs	r0, #32
 8004a64:	f7fe fb1c 	bl	80030a0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004a68:	4a21      	ldr	r2, [pc, #132]	; (8004af0 <statemachine+0x1260>)
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	ca06      	ldmia	r2, {r1, r2}
 8004a6e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004a70:	f7fe faf0 	bl	8003054 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 8004a74:	2132      	movs	r1, #50	; 0x32
 8004a76:	2020      	movs	r0, #32
 8004a78:	f7fe fb12 	bl	80030a0 <ssd1306_SetCursor>
			 			 						snprintf(str,15,  "T=%0.2fC",temp);
 8004a7c:	4b1f      	ldr	r3, [pc, #124]	; (8004afc <statemachine+0x126c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fb fd61 	bl	8000548 <__aeabi_f2d>
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	e9cd 2300 	strd	r2, r3, [sp]
 8004a8e:	4a1c      	ldr	r2, [pc, #112]	; (8004b00 <statemachine+0x1270>)
 8004a90:	210f      	movs	r1, #15
 8004a92:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004a94:	f012 f9b6 	bl	8016e04 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004a98:	4a15      	ldr	r2, [pc, #84]	; (8004af0 <statemachine+0x1260>)
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	ca06      	ldmia	r2, {r1, r2}
 8004a9e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004aa0:	f7fe fad8 	bl	8003054 <ssd1306_WriteString>
			 			 						free(str);
 8004aa4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004aa6:	f010 fab9 	bl	801501c <free>
 8004aaa:	e06d      	b.n	8004b88 <statemachine+0x12f8>
 8004aac:	f3af 8000 	nop.w
 8004ab0:	54442d18 	.word	0x54442d18
 8004ab4:	400921fb 	.word	0x400921fb
 8004ab8:	40180000 	.word	0x40180000
 8004abc:	40240000 	.word	0x40240000
 8004ac0:	40500000 	.word	0x40500000
 8004ac4:	40480000 	.word	0x40480000
 8004ac8:	40280000 	.word	0x40280000
 8004acc:	20000724 	.word	0x20000724
 8004ad0:	20000495 	.word	0x20000495
 8004ad4:	20000720 	.word	0x20000720
 8004ad8:	20000494 	.word	0x20000494
 8004adc:	20000fe0 	.word	0x20000fe0
 8004ae0:	20000a6c 	.word	0x20000a6c
 8004ae4:	200004e0 	.word	0x200004e0
 8004ae8:	200006e0 	.word	0x200006e0
 8004aec:	0801bac8 	.word	0x0801bac8
 8004af0:	2000000c 	.word	0x2000000c
 8004af4:	20000758 	.word	0x20000758
 8004af8:	0801bad4 	.word	0x0801bad4
 8004afc:	20000750 	.word	0x20000750
 8004b00:	0801bae0 	.word	0x0801bae0
			 			 					}
			 			 	else{ //if the GPS doesn't have a fix, print a message
			 			 						char *str = (char*)malloc(sizeof(char)*20);
 8004b04:	2014      	movs	r0, #20
 8004b06:	f010 fa81 	bl	801500c <malloc>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	64bb      	str	r3, [r7, #72]	; 0x48
			 			 						ssd1306_SetCursor(32, 32);
 8004b0e:	2120      	movs	r1, #32
 8004b10:	2020      	movs	r0, #32
 8004b12:	f7fe fac5 	bl	80030a0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("INFO", Font_6x8, White);
 8004b16:	4a65      	ldr	r2, [pc, #404]	; (8004cac <statemachine+0x141c>)
 8004b18:	2301      	movs	r3, #1
 8004b1a:	ca06      	ldmia	r2, {r1, r2}
 8004b1c:	4864      	ldr	r0, [pc, #400]	; (8004cb0 <statemachine+0x1420>)
 8004b1e:	f7fe fa99 	bl	8003054 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 41);
 8004b22:	2129      	movs	r1, #41	; 0x29
 8004b24:	2020      	movs	r0, #32
 8004b26:	f7fe fabb 	bl	80030a0 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "vbat=%0.2fV",vbat);
 8004b2a:	4b62      	ldr	r3, [pc, #392]	; (8004cb4 <statemachine+0x1424>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fb fd0a 	bl	8000548 <__aeabi_f2d>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	e9cd 2300 	strd	r2, r3, [sp]
 8004b3c:	4a5e      	ldr	r2, [pc, #376]	; (8004cb8 <statemachine+0x1428>)
 8004b3e:	210f      	movs	r1, #15
 8004b40:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004b42:	f012 f95f 	bl	8016e04 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004b46:	4a59      	ldr	r2, [pc, #356]	; (8004cac <statemachine+0x141c>)
 8004b48:	2301      	movs	r3, #1
 8004b4a:	ca06      	ldmia	r2, {r1, r2}
 8004b4c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004b4e:	f7fe fa81 	bl	8003054 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 8004b52:	2132      	movs	r1, #50	; 0x32
 8004b54:	2020      	movs	r0, #32
 8004b56:	f7fe faa3 	bl	80030a0 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "T=%0.2fC",temp);
 8004b5a:	4b58      	ldr	r3, [pc, #352]	; (8004cbc <statemachine+0x142c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fb fcf2 	bl	8000548 <__aeabi_f2d>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	e9cd 2300 	strd	r2, r3, [sp]
 8004b6c:	4a54      	ldr	r2, [pc, #336]	; (8004cc0 <statemachine+0x1430>)
 8004b6e:	210f      	movs	r1, #15
 8004b70:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004b72:	f012 f947 	bl	8016e04 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8004b76:	4a4d      	ldr	r2, [pc, #308]	; (8004cac <statemachine+0x141c>)
 8004b78:	2301      	movs	r3, #1
 8004b7a:	ca06      	ldmia	r2, {r1, r2}
 8004b7c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004b7e:	f7fe fa69 	bl	8003054 <ssd1306_WriteString>
			 			 						free(str);
 8004b82:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004b84:	f010 fa4a 	bl	801501c <free>
			 			 					}
			  if(BTN_A>=1){
 8004b88:	4b4e      	ldr	r3, [pc, #312]	; (8004cc4 <statemachine+0x1434>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	dd0b      	ble.n	8004ba8 <statemachine+0x1318>
			  		state++;
 8004b90:	4b4d      	ldr	r3, [pc, #308]	; (8004cc8 <statemachine+0x1438>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	3301      	adds	r3, #1
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	4b4b      	ldr	r3, [pc, #300]	; (8004cc8 <statemachine+0x1438>)
 8004b9a:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8004b9c:	4b49      	ldr	r3, [pc, #292]	; (8004cc4 <statemachine+0x1434>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8004ba2:	4b4a      	ldr	r3, [pc, #296]	; (8004ccc <statemachine+0x143c>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
			  		}
			  if(BTN_A_LONG>=1){
 8004ba8:	4b49      	ldr	r3, [pc, #292]	; (8004cd0 <statemachine+0x1440>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f340 8764 	ble.w	8005a7a <statemachine+0x21ea>
			  				 									 									  			 	state--;
 8004bb2:	4b45      	ldr	r3, [pc, #276]	; (8004cc8 <statemachine+0x1438>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	4b43      	ldr	r3, [pc, #268]	; (8004cc8 <statemachine+0x1438>)
 8004bbc:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8004bbe:	4b41      	ldr	r3, [pc, #260]	; (8004cc4 <statemachine+0x1434>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8004bc4:	4b41      	ldr	r3, [pc, #260]	; (8004ccc <statemachine+0x143c>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8004bca:	4b41      	ldr	r3, [pc, #260]	; (8004cd0 <statemachine+0x1440>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8004bd0:	f000 bf53 	b.w	8005a7a <statemachine+0x21ea>

		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	f7fe f921 	bl	8002e1c <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 8004bda:	2120      	movs	r1, #32
 8004bdc:	2020      	movs	r0, #32
 8004bde:	f7fe fa5f 	bl	80030a0 <ssd1306_SetCursor>
			  char *str = (char*)malloc(sizeof(char)*20);
 8004be2:	2014      	movs	r0, #20
 8004be4:	f010 fa12 	bl	801500c <malloc>
 8004be8:	4603      	mov	r3, r0
 8004bea:	64fb      	str	r3, [r7, #76]	; 0x4c
			  ssd1306_WriteString("chrono", Font_6x8, White);
 8004bec:	4a2f      	ldr	r2, [pc, #188]	; (8004cac <statemachine+0x141c>)
 8004bee:	2301      	movs	r3, #1
 8004bf0:	ca06      	ldmia	r2, {r1, r2}
 8004bf2:	4838      	ldr	r0, [pc, #224]	; (8004cd4 <statemachine+0x1444>)
 8004bf4:	f7fe fa2e 	bl	8003054 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 40);
 8004bf8:	2128      	movs	r1, #40	; 0x28
 8004bfa:	2020      	movs	r0, #32
 8004bfc:	f7fe fa50 	bl	80030a0 <ssd1306_SetCursor>

			  switch(chronostate){
 8004c00:	4b35      	ldr	r3, [pc, #212]	; (8004cd8 <statemachine+0x1448>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d038      	beq.n	8004c7a <statemachine+0x13ea>
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	dc72      	bgt.n	8004cf2 <statemachine+0x1462>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <statemachine+0x1386>
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d01d      	beq.n	8004c50 <statemachine+0x13c0>
 8004c14:	e06d      	b.n	8004cf2 <statemachine+0x1462>
			  case STATE_RESET:
				  min=0;
 8004c16:	4b31      	ldr	r3, [pc, #196]	; (8004cdc <statemachine+0x144c>)
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8004c1e:	4b30      	ldr	r3, [pc, #192]	; (8004ce0 <statemachine+0x1450>)
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8004c26:	4b2f      	ldr	r3, [pc, #188]	; (8004ce4 <statemachine+0x1454>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]
				  	 if(BTN_B>=1){
 8004c2c:	4b27      	ldr	r3, [pc, #156]	; (8004ccc <statemachine+0x143c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	dd36      	ble.n	8004ca2 <statemachine+0x1412>
				  		chronostate++;
 8004c34:	4b28      	ldr	r3, [pc, #160]	; (8004cd8 <statemachine+0x1448>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	4b26      	ldr	r3, [pc, #152]	; (8004cd8 <statemachine+0x1448>)
 8004c3e:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8004c40:	4b22      	ldr	r3, [pc, #136]	; (8004ccc <statemachine+0x143c>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8004c46:	4b28      	ldr	r3, [pc, #160]	; (8004ce8 <statemachine+0x1458>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a28      	ldr	r2, [pc, #160]	; (8004cec <statemachine+0x145c>)
 8004c4c:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8004c4e:	e028      	b.n	8004ca2 <statemachine+0x1412>
			  case STATE_RUN:
				  calctime=uwTick-starttime;
 8004c50:	4b25      	ldr	r3, [pc, #148]	; (8004ce8 <statemachine+0x1458>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	4b25      	ldr	r3, [pc, #148]	; (8004cec <statemachine+0x145c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	4a22      	ldr	r2, [pc, #136]	; (8004ce4 <statemachine+0x1454>)
 8004c5c:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8004c5e:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <statemachine+0x143c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	dd1f      	ble.n	8004ca6 <statemachine+0x1416>
				  		chronostate++;
 8004c66:	4b1c      	ldr	r3, [pc, #112]	; (8004cd8 <statemachine+0x1448>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	4b1a      	ldr	r3, [pc, #104]	; (8004cd8 <statemachine+0x1448>)
 8004c70:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8004c72:	4b16      	ldr	r3, [pc, #88]	; (8004ccc <statemachine+0x143c>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8004c78:	e015      	b.n	8004ca6 <statemachine+0x1416>
			  case STATE_PAUSE:
				  if(BTN_B>=1){
 8004c7a:	4b14      	ldr	r3, [pc, #80]	; (8004ccc <statemachine+0x143c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	dd36      	ble.n	8004cf0 <statemachine+0x1460>
				  			chronostate--;
 8004c82:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <statemachine+0x1448>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	4b13      	ldr	r3, [pc, #76]	; (8004cd8 <statemachine+0x1448>)
 8004c8c:	701a      	strb	r2, [r3, #0]
				  			chronostate--;
 8004c8e:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <statemachine+0x1448>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <statemachine+0x1448>)
 8004c98:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8004c9a:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <statemachine+0x143c>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]
			 }

				  break;
 8004ca0:	e026      	b.n	8004cf0 <statemachine+0x1460>
				  break;
 8004ca2:	bf00      	nop
 8004ca4:	e025      	b.n	8004cf2 <statemachine+0x1462>
				  break;
 8004ca6:	bf00      	nop
 8004ca8:	e023      	b.n	8004cf2 <statemachine+0x1462>
 8004caa:	bf00      	nop
 8004cac:	2000000c 	.word	0x2000000c
 8004cb0:	0801baec 	.word	0x0801baec
 8004cb4:	20000758 	.word	0x20000758
 8004cb8:	0801baf4 	.word	0x0801baf4
 8004cbc:	20000750 	.word	0x20000750
 8004cc0:	0801bae0 	.word	0x0801bae0
 8004cc4:	20000720 	.word	0x20000720
 8004cc8:	20000494 	.word	0x20000494
 8004ccc:	20000724 	.word	0x20000724
 8004cd0:	20000a6c 	.word	0x20000a6c
 8004cd4:	0801bb00 	.word	0x0801bb00
 8004cd8:	20000498 	.word	0x20000498
 8004cdc:	20000a10 	.word	0x20000a10
 8004ce0:	20000a0c 	.word	0x20000a0c
 8004ce4:	20000a18 	.word	0x20000a18
 8004ce8:	20001274 	.word	0x20001274
 8004cec:	20000a14 	.word	0x20000a14
				  break;
 8004cf0:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8004cf2:	4ba5      	ldr	r3, [pc, #660]	; (8004f88 <statemachine+0x16f8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfe:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8004f8c <statemachine+0x16fc>
 8004d02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004d06:	ee16 0a90 	vmov	r0, s13
 8004d0a:	f7fb fc1d 	bl	8000548 <__aeabi_f2d>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	ec43 2b10 	vmov	d0, r2, r3
 8004d16:	f014 ffff 	bl	8019d18 <floor>
 8004d1a:	ec53 2b10 	vmov	r2, r3, d0
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4619      	mov	r1, r3
 8004d22:	f7fb ff61 	bl	8000be8 <__aeabi_d2f>
 8004d26:	4603      	mov	r3, r0
 8004d28:	4a99      	ldr	r2, [pc, #612]	; (8004f90 <statemachine+0x1700>)
 8004d2a:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8004d2c:	4b96      	ldr	r3, [pc, #600]	; (8004f88 <statemachine+0x16f8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	ee07 3a90 	vmov	s15, r3
 8004d34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d38:	4b95      	ldr	r3, [pc, #596]	; (8004f90 <statemachine+0x1700>)
 8004d3a:	edd3 7a00 	vldr	s15, [r3]
 8004d3e:	eddf 6a93 	vldr	s13, [pc, #588]	; 8004f8c <statemachine+0x16fc>
 8004d42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d4a:	eddf 6a92 	vldr	s13, [pc, #584]	; 8004f94 <statemachine+0x1704>
 8004d4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d52:	4b91      	ldr	r3, [pc, #580]	; (8004f98 <statemachine+0x1708>)
 8004d54:	edc3 7a00 	vstr	s15, [r3]
			  snprintf(str,15, "%0.0fmin",min);
 8004d58:	4b8d      	ldr	r3, [pc, #564]	; (8004f90 <statemachine+0x1700>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fb fbf3 	bl	8000548 <__aeabi_f2d>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	e9cd 2300 	strd	r2, r3, [sp]
 8004d6a:	4a8c      	ldr	r2, [pc, #560]	; (8004f9c <statemachine+0x170c>)
 8004d6c:	210f      	movs	r1, #15
 8004d6e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d70:	f012 f848 	bl	8016e04 <sniprintf>
			  ssd1306_WriteString(str, Font_7x10, White);
 8004d74:	4a8a      	ldr	r2, [pc, #552]	; (8004fa0 <statemachine+0x1710>)
 8004d76:	2301      	movs	r3, #1
 8004d78:	ca06      	ldmia	r2, {r1, r2}
 8004d7a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d7c:	f7fe f96a 	bl	8003054 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8004d80:	2132      	movs	r1, #50	; 0x32
 8004d82:	2020      	movs	r0, #32
 8004d84:	f7fe f98c 	bl	80030a0 <ssd1306_SetCursor>
			  snprintf(str,15, "%0.3fsec",seconde);
 8004d88:	4b83      	ldr	r3, [pc, #524]	; (8004f98 <statemachine+0x1708>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fb fbdb 	bl	8000548 <__aeabi_f2d>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	e9cd 2300 	strd	r2, r3, [sp]
 8004d9a:	4a82      	ldr	r2, [pc, #520]	; (8004fa4 <statemachine+0x1714>)
 8004d9c:	210f      	movs	r1, #15
 8004d9e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004da0:	f012 f830 	bl	8016e04 <sniprintf>
			  ssd1306_WriteString(str, Font_6x8, White);
 8004da4:	4a80      	ldr	r2, [pc, #512]	; (8004fa8 <statemachine+0x1718>)
 8004da6:	2301      	movs	r3, #1
 8004da8:	ca06      	ldmia	r2, {r1, r2}
 8004daa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004dac:	f7fe f952 	bl	8003054 <ssd1306_WriteString>
			  free(str);
 8004db0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004db2:	f010 f933 	bl	801501c <free>


			  if(BTN_A>=1){
 8004db6:	4b7d      	ldr	r3, [pc, #500]	; (8004fac <statemachine+0x171c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	dd0b      	ble.n	8004dd6 <statemachine+0x1546>
			 	state++;
 8004dbe:	4b7c      	ldr	r3, [pc, #496]	; (8004fb0 <statemachine+0x1720>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	4b7a      	ldr	r3, [pc, #488]	; (8004fb0 <statemachine+0x1720>)
 8004dc8:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8004dca:	4b78      	ldr	r3, [pc, #480]	; (8004fac <statemachine+0x171c>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8004dd0:	4b78      	ldr	r3, [pc, #480]	; (8004fb4 <statemachine+0x1724>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]


	}
			  if(BTN_A_LONG>=1){
 8004dd6:	4b78      	ldr	r3, [pc, #480]	; (8004fb8 <statemachine+0x1728>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f340 864f 	ble.w	8005a7e <statemachine+0x21ee>
			  				 									 									  			 	state--;
 8004de0:	4b73      	ldr	r3, [pc, #460]	; (8004fb0 <statemachine+0x1720>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	4b71      	ldr	r3, [pc, #452]	; (8004fb0 <statemachine+0x1720>)
 8004dea:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8004dec:	4b6f      	ldr	r3, [pc, #444]	; (8004fac <statemachine+0x171c>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8004df2:	4b70      	ldr	r3, [pc, #448]	; (8004fb4 <statemachine+0x1724>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8004df8:	4b6f      	ldr	r3, [pc, #444]	; (8004fb8 <statemachine+0x1728>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8004dfe:	f000 be3e 	b.w	8005a7e <statemachine+0x21ee>


			  case STATE_BALISE:
				  ssd1306_Fill(Black);
 8004e02:	2000      	movs	r0, #0
 8004e04:	f7fe f80a 	bl	8002e1c <ssd1306_Fill>

				  if(settimeen==0){
 8004e08:	4b6c      	ldr	r3, [pc, #432]	; (8004fbc <statemachine+0x172c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d145      	bne.n	8004e9c <statemachine+0x160c>

					  if(myData.fix==1){
 8004e10:	4b6b      	ldr	r3, [pc, #428]	; (8004fc0 <statemachine+0x1730>)
 8004e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d141      	bne.n	8004e9c <statemachine+0x160c>
						settimeen=1;
 8004e18:	4b68      	ldr	r3, [pc, #416]	; (8004fbc <statemachine+0x172c>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]
						HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8004e1e:	4b68      	ldr	r3, [pc, #416]	; (8004fc0 <statemachine+0x1730>)
 8004e20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	0092      	lsls	r2, r2, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	4b62      	ldr	r3, [pc, #392]	; (8004fc0 <statemachine+0x1730>)
 8004e36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	4413      	add	r3, r2
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	4b5f      	ldr	r3, [pc, #380]	; (8004fc4 <statemachine+0x1734>)
 8004e46:	701a      	strb	r2, [r3, #0]
						MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8004e48:	4b5d      	ldr	r3, [pc, #372]	; (8004fc0 <statemachine+0x1730>)
 8004e4a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	0092      	lsls	r2, r2, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	4b58      	ldr	r3, [pc, #352]	; (8004fc0 <statemachine+0x1730>)
 8004e60:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004e64:	f003 030f 	and.w	r3, r3, #15
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	4b56      	ldr	r3, [pc, #344]	; (8004fc8 <statemachine+0x1738>)
 8004e70:	701a      	strb	r2, [r3, #0]
						SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004e72:	4b53      	ldr	r3, [pc, #332]	; (8004fc0 <statemachine+0x1730>)
 8004e74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	0092      	lsls	r2, r2, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	4b4d      	ldr	r3, [pc, #308]	; (8004fc0 <statemachine+0x1730>)
 8004e8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	4413      	add	r3, r2
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	4b4c      	ldr	r3, [pc, #304]	; (8004fcc <statemachine+0x173c>)
 8004e9a:	701a      	strb	r2, [r3, #0]





				  switch(balisestate){
 8004e9c:	4b4c      	ldr	r3, [pc, #304]	; (8004fd0 <statemachine+0x1740>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	f000 823d 	beq.w	8005320 <statemachine+0x1a90>
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	f300 85eb 	bgt.w	8005a82 <statemachine+0x21f2>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d004      	beq.n	8004eba <statemachine+0x162a>
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	f000 809d 	beq.w	8004ff0 <statemachine+0x1760>
					  				 									 									  	}

				  }


				  break;
 8004eb6:	f000 bde4 	b.w	8005a82 <statemachine+0x21f2>
					  ssd1306_SetCursor(32,32);
 8004eba:	2120      	movs	r1, #32
 8004ebc:	2020      	movs	r0, #32
 8004ebe:	f7fe f8ef 	bl	80030a0 <ssd1306_SetCursor>
					  ssd1306_WriteString("Tracker",Font_6x8,White);
 8004ec2:	4a39      	ldr	r2, [pc, #228]	; (8004fa8 <statemachine+0x1718>)
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	ca06      	ldmia	r2, {r1, r2}
 8004ec8:	4842      	ldr	r0, [pc, #264]	; (8004fd4 <statemachine+0x1744>)
 8004eca:	f7fe f8c3 	bl	8003054 <ssd1306_WriteString>
					  snprintf((char *)bufferscreen,50, "off=%d",pageoffset);
 8004ece:	4b42      	ldr	r3, [pc, #264]	; (8004fd8 <statemachine+0x1748>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a42      	ldr	r2, [pc, #264]	; (8004fdc <statemachine+0x174c>)
 8004ed4:	2132      	movs	r1, #50	; 0x32
 8004ed6:	4842      	ldr	r0, [pc, #264]	; (8004fe0 <statemachine+0x1750>)
 8004ed8:	f011 ff94 	bl	8016e04 <sniprintf>
					  ssd1306_SetCursor(32,40);
 8004edc:	2128      	movs	r1, #40	; 0x28
 8004ede:	2020      	movs	r0, #32
 8004ee0:	f7fe f8de 	bl	80030a0 <ssd1306_SetCursor>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004ee4:	4a30      	ldr	r2, [pc, #192]	; (8004fa8 <statemachine+0x1718>)
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	ca06      	ldmia	r2, {r1, r2}
 8004eea:	483d      	ldr	r0, [pc, #244]	; (8004fe0 <statemachine+0x1750>)
 8004eec:	f7fe f8b2 	bl	8003054 <ssd1306_WriteString>
					  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 8004ef0:	4b3c      	ldr	r3, [pc, #240]	; (8004fe4 <statemachine+0x1754>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a3c      	ldr	r2, [pc, #240]	; (8004fe8 <statemachine+0x1758>)
 8004ef6:	2132      	movs	r1, #50	; 0x32
 8004ef8:	4839      	ldr	r0, [pc, #228]	; (8004fe0 <statemachine+0x1750>)
 8004efa:	f011 ff83 	bl	8016e04 <sniprintf>
					  ssd1306_SetCursor(32,48);
 8004efe:	2130      	movs	r1, #48	; 0x30
 8004f00:	2020      	movs	r0, #32
 8004f02:	f7fe f8cd 	bl	80030a0 <ssd1306_SetCursor>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004f06:	4a28      	ldr	r2, [pc, #160]	; (8004fa8 <statemachine+0x1718>)
 8004f08:	2301      	movs	r3, #1
 8004f0a:	ca06      	ldmia	r2, {r1, r2}
 8004f0c:	4834      	ldr	r0, [pc, #208]	; (8004fe0 <statemachine+0x1750>)
 8004f0e:	f7fe f8a1 	bl	8003054 <ssd1306_WriteString>
					  if(BTN_B>=1){
 8004f12:	4b28      	ldr	r3, [pc, #160]	; (8004fb4 <statemachine+0x1724>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	dd0e      	ble.n	8004f38 <statemachine+0x16a8>
						balisestate++;
 8004f1a:	4b2d      	ldr	r3, [pc, #180]	; (8004fd0 <statemachine+0x1740>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	4b2b      	ldr	r3, [pc, #172]	; (8004fd0 <statemachine+0x1740>)
 8004f24:	701a      	strb	r2, [r3, #0]
						BTN_B=0;
 8004f26:	4b23      	ldr	r3, [pc, #140]	; (8004fb4 <statemachine+0x1724>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
						BTN_A=0;
 8004f2c:	4b1f      	ldr	r3, [pc, #124]	; (8004fac <statemachine+0x171c>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim7);
 8004f32:	482e      	ldr	r0, [pc, #184]	; (8004fec <statemachine+0x175c>)
 8004f34:	f008 fb74 	bl	800d620 <HAL_TIM_Base_Start_IT>
					  if(BTN_A>=1){
 8004f38:	4b1c      	ldr	r3, [pc, #112]	; (8004fac <statemachine+0x171c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	dd0e      	ble.n	8004f5e <statemachine+0x16ce>
					  				  			 	state++;
 8004f40:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <statemachine+0x1720>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	3301      	adds	r3, #1
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	4b19      	ldr	r3, [pc, #100]	; (8004fb0 <statemachine+0x1720>)
 8004f4a:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 8004f4c:	4b17      	ldr	r3, [pc, #92]	; (8004fac <statemachine+0x171c>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 8004f52:	4b18      	ldr	r3, [pc, #96]	; (8004fb4 <statemachine+0x1724>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
					  				  			 	settimeen=0;
 8004f58:	4b18      	ldr	r3, [pc, #96]	; (8004fbc <statemachine+0x172c>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]
					  if(BTN_A_LONG>=1){
 8004f5e:	4b16      	ldr	r3, [pc, #88]	; (8004fb8 <statemachine+0x1728>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f340 822d 	ble.w	80053c2 <statemachine+0x1b32>
					  				 									 									  			 	state--;
 8004f68:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <statemachine+0x1720>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <statemachine+0x1720>)
 8004f72:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 8004f74:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <statemachine+0x171c>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 8004f7a:	4b0e      	ldr	r3, [pc, #56]	; (8004fb4 <statemachine+0x1724>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 8004f80:	4b0d      	ldr	r3, [pc, #52]	; (8004fb8 <statemachine+0x1728>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
					  break;
 8004f86:	e21c      	b.n	80053c2 <statemachine+0x1b32>
 8004f88:	20000a18 	.word	0x20000a18
 8004f8c:	476a6000 	.word	0x476a6000
 8004f90:	20000a10 	.word	0x20000a10
 8004f94:	447a0000 	.word	0x447a0000
 8004f98:	20000a0c 	.word	0x20000a0c
 8004f9c:	0801bb08 	.word	0x0801bb08
 8004fa0:	20000014 	.word	0x20000014
 8004fa4:	0801bb14 	.word	0x0801bb14
 8004fa8:	2000000c 	.word	0x2000000c
 8004fac:	20000720 	.word	0x20000720
 8004fb0:	20000494 	.word	0x20000494
 8004fb4:	20000724 	.word	0x20000724
 8004fb8:	20000a6c 	.word	0x20000a6c
 8004fbc:	20000fe0 	.word	0x20000fe0
 8004fc0:	200006e0 	.word	0x200006e0
 8004fc4:	20000a55 	.word	0x20000a55
 8004fc8:	20000a56 	.word	0x20000a56
 8004fcc:	20000a54 	.word	0x20000a54
 8004fd0:	2000049a 	.word	0x2000049a
 8004fd4:	0801bb20 	.word	0x0801bb20
 8004fd8:	20000970 	.word	0x20000970
 8004fdc:	0801bb28 	.word	0x0801bb28
 8004fe0:	20000994 	.word	0x20000994
 8004fe4:	20000974 	.word	0x20000974
 8004fe8:	0801bb30 	.word	0x0801bb30
 8004fec:	20001084 	.word	0x20001084
					  erasetime=HAL_GetTick();
 8004ff0:	f001 fc46 	bl	8006880 <HAL_GetTick>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	4b6f      	ldr	r3, [pc, #444]	; (80051b8 <statemachine+0x1928>)
 8004ffa:	601a      	str	r2, [r3, #0]
					  if(pagenumber+1>=MAX_WRITE_PAGE){
 8004ffc:	4b6f      	ldr	r3, [pc, #444]	; (80051bc <statemachine+0x192c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f246 32fd 	movw	r2, #25597	; 0x63fd
 8005004:	4293      	cmp	r3, r2
 8005006:	dd05      	ble.n	8005014 <statemachine+0x1784>
						  HAL_TIM_Base_Stop_IT(&htim7);
 8005008:	486d      	ldr	r0, [pc, #436]	; (80051c0 <statemachine+0x1930>)
 800500a:	f008 fb5d 	bl	800d6c8 <HAL_TIM_Base_Stop_IT>
						  balisestate=2;
 800500e:	4b6d      	ldr	r3, [pc, #436]	; (80051c4 <statemachine+0x1934>)
 8005010:	2202      	movs	r2, #2
 8005012:	701a      	strb	r2, [r3, #0]
					  if(enablewrite==1){
 8005014:	4b6c      	ldr	r3, [pc, #432]	; (80051c8 <statemachine+0x1938>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b01      	cmp	r3, #1
 800501a:	f040 80b0 	bne.w	800517e <statemachine+0x18ee>
						  oldlat=myData.latitude;
 800501e:	4b6b      	ldr	r3, [pc, #428]	; (80051cc <statemachine+0x193c>)
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	496a      	ldr	r1, [pc, #424]	; (80051d0 <statemachine+0x1940>)
 8005026:	e9c1 2300 	strd	r2, r3, [r1]
						  oldlong=myData.longitude;
 800502a:	4b68      	ldr	r3, [pc, #416]	; (80051cc <statemachine+0x193c>)
 800502c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005030:	4968      	ldr	r1, [pc, #416]	; (80051d4 <statemachine+0x1944>)
 8005032:	e9c1 2300 	strd	r2, r3, [r1]
						  nmea_parse(&myData, DataBuffer);
 8005036:	4968      	ldr	r1, [pc, #416]	; (80051d8 <statemachine+0x1948>)
 8005038:	4864      	ldr	r0, [pc, #400]	; (80051cc <statemachine+0x193c>)
 800503a:	f7fd fa07 	bl	800244c <nmea_parse>
						  if(distancecalc(oldlat, myData.latitude,oldlong, myData.longitude) > 139.0){//correspond à 500kmh pendant 1sec
 800503e:	4b64      	ldr	r3, [pc, #400]	; (80051d0 <statemachine+0x1940>)
 8005040:	ed93 7b00 	vldr	d7, [r3]
 8005044:	4b61      	ldr	r3, [pc, #388]	; (80051cc <statemachine+0x193c>)
 8005046:	ed93 6b00 	vldr	d6, [r3]
 800504a:	4b62      	ldr	r3, [pc, #392]	; (80051d4 <statemachine+0x1944>)
 800504c:	ed93 5b00 	vldr	d5, [r3]
 8005050:	4b5e      	ldr	r3, [pc, #376]	; (80051cc <statemachine+0x193c>)
 8005052:	ed93 4b04 	vldr	d4, [r3, #16]
 8005056:	eeb0 3a44 	vmov.f32	s6, s8
 800505a:	eef0 3a64 	vmov.f32	s7, s9
 800505e:	eeb0 2a45 	vmov.f32	s4, s10
 8005062:	eef0 2a65 	vmov.f32	s5, s11
 8005066:	eeb0 1a46 	vmov.f32	s2, s12
 800506a:	eef0 1a66 	vmov.f32	s3, s13
 800506e:	eeb0 0a47 	vmov.f32	s0, s14
 8005072:	eef0 0a67 	vmov.f32	s1, s15
 8005076:	f7fd fa9b 	bl	80025b0 <distancecalc>
 800507a:	ec51 0b10 	vmov	r0, r1, d0
 800507e:	a34c      	add	r3, pc, #304	; (adr r3, 80051b0 <statemachine+0x1920>)
 8005080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005084:	f7fb fd48 	bl	8000b18 <__aeabi_dcmpgt>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d02b      	beq.n	80050e6 <statemachine+0x1856>
							  myData.latitude=oldlat;
 800508e:	4b50      	ldr	r3, [pc, #320]	; (80051d0 <statemachine+0x1940>)
 8005090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005094:	494d      	ldr	r1, [pc, #308]	; (80051cc <statemachine+0x193c>)
 8005096:	e9c1 2300 	strd	r2, r3, [r1]
							  myData.longitude=oldlong;
 800509a:	4b4e      	ldr	r3, [pc, #312]	; (80051d4 <statemachine+0x1944>)
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	494a      	ldr	r1, [pc, #296]	; (80051cc <statemachine+0x193c>)
 80050a2:	e9c1 2304 	strd	r2, r3, [r1, #16]
							  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 80050a6:	4b4d      	ldr	r3, [pc, #308]	; (80051dc <statemachine+0x194c>)
 80050a8:	edd3 7a00 	vldr	s15, [r3]
 80050ac:	4b4c      	ldr	r3, [pc, #304]	; (80051e0 <statemachine+0x1950>)
 80050ae:	ed93 7a00 	vldr	s14, [r3]
 80050b2:	4b46      	ldr	r3, [pc, #280]	; (80051cc <statemachine+0x193c>)
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	4a45      	ldr	r2, [pc, #276]	; (80051cc <statemachine+0x193c>)
 80050b8:	edd2 6a08 	vldr	s13, [r2, #32]
 80050bc:	eeb0 1a66 	vmov.f32	s2, s13
 80050c0:	461a      	mov	r2, r3
 80050c2:	4942      	ldr	r1, [pc, #264]	; (80051cc <statemachine+0x193c>)
 80050c4:	eef0 0a47 	vmov.f32	s1, s14
 80050c8:	eeb0 0a67 	vmov.f32	s0, s15
 80050cc:	4845      	ldr	r0, [pc, #276]	; (80051e4 <statemachine+0x1954>)
 80050ce:	f7fd fc3f 	bl	8002950 <csvframe>
 80050d2:	4603      	mov	r3, r0
 80050d4:	4a44      	ldr	r2, [pc, #272]	; (80051e8 <statemachine+0x1958>)
 80050d6:	6013      	str	r3, [r2, #0]
							  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 80050d8:	4b43      	ldr	r3, [pc, #268]	; (80051e8 <statemachine+0x1958>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4619      	mov	r1, r3
 80050de:	4841      	ldr	r0, [pc, #260]	; (80051e4 <statemachine+0x1954>)
 80050e0:	f7fd fd6c 	bl	8002bbc <writebuffertoflash>
 80050e4:	e048      	b.n	8005178 <statemachine+0x18e8>
							  distanceparcouru=distanceparcouru + distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 80050e6:	4b3a      	ldr	r3, [pc, #232]	; (80051d0 <statemachine+0x1940>)
 80050e8:	ed93 7b00 	vldr	d7, [r3]
 80050ec:	4b37      	ldr	r3, [pc, #220]	; (80051cc <statemachine+0x193c>)
 80050ee:	ed93 6b00 	vldr	d6, [r3]
 80050f2:	4b38      	ldr	r3, [pc, #224]	; (80051d4 <statemachine+0x1944>)
 80050f4:	ed93 5b00 	vldr	d5, [r3]
 80050f8:	4b34      	ldr	r3, [pc, #208]	; (80051cc <statemachine+0x193c>)
 80050fa:	ed93 4b04 	vldr	d4, [r3, #16]
 80050fe:	eeb0 3a44 	vmov.f32	s6, s8
 8005102:	eef0 3a64 	vmov.f32	s7, s9
 8005106:	eeb0 2a45 	vmov.f32	s4, s10
 800510a:	eef0 2a65 	vmov.f32	s5, s11
 800510e:	eeb0 1a46 	vmov.f32	s2, s12
 8005112:	eef0 1a66 	vmov.f32	s3, s13
 8005116:	eeb0 0a47 	vmov.f32	s0, s14
 800511a:	eef0 0a67 	vmov.f32	s1, s15
 800511e:	f7fd fa47 	bl	80025b0 <distancecalc>
 8005122:	ec51 0b10 	vmov	r0, r1, d0
 8005126:	4b31      	ldr	r3, [pc, #196]	; (80051ec <statemachine+0x195c>)
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	f7fb f8ae 	bl	800028c <__adddf3>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	492d      	ldr	r1, [pc, #180]	; (80051ec <statemachine+0x195c>)
 8005136:	e9c1 2300 	strd	r2, r3, [r1]
							  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 800513a:	4b28      	ldr	r3, [pc, #160]	; (80051dc <statemachine+0x194c>)
 800513c:	edd3 7a00 	vldr	s15, [r3]
 8005140:	4b27      	ldr	r3, [pc, #156]	; (80051e0 <statemachine+0x1950>)
 8005142:	ed93 7a00 	vldr	s14, [r3]
 8005146:	4b21      	ldr	r3, [pc, #132]	; (80051cc <statemachine+0x193c>)
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	4a20      	ldr	r2, [pc, #128]	; (80051cc <statemachine+0x193c>)
 800514c:	edd2 6a08 	vldr	s13, [r2, #32]
 8005150:	eeb0 1a66 	vmov.f32	s2, s13
 8005154:	461a      	mov	r2, r3
 8005156:	491d      	ldr	r1, [pc, #116]	; (80051cc <statemachine+0x193c>)
 8005158:	eef0 0a47 	vmov.f32	s1, s14
 800515c:	eeb0 0a67 	vmov.f32	s0, s15
 8005160:	4820      	ldr	r0, [pc, #128]	; (80051e4 <statemachine+0x1954>)
 8005162:	f7fd fbf5 	bl	8002950 <csvframe>
 8005166:	4603      	mov	r3, r0
 8005168:	4a1f      	ldr	r2, [pc, #124]	; (80051e8 <statemachine+0x1958>)
 800516a:	6013      	str	r3, [r2, #0]
							  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 800516c:	4b1e      	ldr	r3, [pc, #120]	; (80051e8 <statemachine+0x1958>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4619      	mov	r1, r3
 8005172:	481c      	ldr	r0, [pc, #112]	; (80051e4 <statemachine+0x1954>)
 8005174:	f7fd fd22 	bl	8002bbc <writebuffertoflash>
						  enablewrite=0;
 8005178:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <statemachine+0x1938>)
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
					  if(doubledonnee==0){
 800517e:	4b1c      	ldr	r3, [pc, #112]	; (80051f0 <statemachine+0x1960>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d13c      	bne.n	8005200 <statemachine+0x1970>
					 	ssd1306_SetCursor(32,32);
 8005186:	2120      	movs	r1, #32
 8005188:	2020      	movs	r0, #32
 800518a:	f7fd ff89 	bl	80030a0 <ssd1306_SetCursor>
					 	snprintf((char *)bufferscreen,50,"p=%d",pagenumber);
 800518e:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <statemachine+0x192c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <statemachine+0x1964>)
 8005194:	2132      	movs	r1, #50	; 0x32
 8005196:	4818      	ldr	r0, [pc, #96]	; (80051f8 <statemachine+0x1968>)
 8005198:	f011 fe34 	bl	8016e04 <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 800519c:	4a17      	ldr	r2, [pc, #92]	; (80051fc <statemachine+0x196c>)
 800519e:	2301      	movs	r3, #1
 80051a0:	ca06      	ldmia	r2, {r1, r2}
 80051a2:	4815      	ldr	r0, [pc, #84]	; (80051f8 <statemachine+0x1968>)
 80051a4:	f7fd ff56 	bl	8003054 <ssd1306_WriteString>
 80051a8:	e03e      	b.n	8005228 <statemachine+0x1998>
 80051aa:	bf00      	nop
 80051ac:	f3af 8000 	nop.w
 80051b0:	00000000 	.word	0x00000000
 80051b4:	40616000 	.word	0x40616000
 80051b8:	20000a20 	.word	0x20000a20
 80051bc:	20000974 	.word	0x20000974
 80051c0:	20001084 	.word	0x20001084
 80051c4:	2000049a 	.word	0x2000049a
 80051c8:	20000a50 	.word	0x20000a50
 80051cc:	200006e0 	.word	0x200006e0
 80051d0:	20000a40 	.word	0x20000a40
 80051d4:	20000a48 	.word	0x20000a48
 80051d8:	200004e0 	.word	0x200004e0
 80051dc:	20000750 	.word	0x20000750
 80051e0:	20000758 	.word	0x20000758
 80051e4:	20000770 	.word	0x20000770
 80051e8:	20000a1c 	.word	0x20000a1c
 80051ec:	20000a38 	.word	0x20000a38
 80051f0:	20000a30 	.word	0x20000a30
 80051f4:	0801bb38 	.word	0x0801bb38
 80051f8:	20000994 	.word	0x20000994
 80051fc:	20000014 	.word	0x20000014
					 	ssd1306_SetCursor(32,32);
 8005200:	2120      	movs	r1, #32
 8005202:	2020      	movs	r0, #32
 8005204:	f7fd ff4c 	bl	80030a0 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50,"d=%0.1lfm",distanceparcouru);
 8005208:	4b9e      	ldr	r3, [pc, #632]	; (8005484 <statemachine+0x1bf4>)
 800520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520e:	e9cd 2300 	strd	r2, r3, [sp]
 8005212:	4a9d      	ldr	r2, [pc, #628]	; (8005488 <statemachine+0x1bf8>)
 8005214:	2132      	movs	r1, #50	; 0x32
 8005216:	489d      	ldr	r0, [pc, #628]	; (800548c <statemachine+0x1bfc>)
 8005218:	f011 fdf4 	bl	8016e04 <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 800521c:	4a9c      	ldr	r2, [pc, #624]	; (8005490 <statemachine+0x1c00>)
 800521e:	2301      	movs	r3, #1
 8005220:	ca06      	ldmia	r2, {r1, r2}
 8005222:	489a      	ldr	r0, [pc, #616]	; (800548c <statemachine+0x1bfc>)
 8005224:	f7fd ff16 	bl	8003054 <ssd1306_WriteString>
					 	ssd1306_SetCursor(32,42);
 8005228:	212a      	movs	r1, #42	; 0x2a
 800522a:	2020      	movs	r0, #32
 800522c:	f7fd ff38 	bl	80030a0 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 8005230:	4b98      	ldr	r3, [pc, #608]	; (8005494 <statemachine+0x1c04>)
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	4a98      	ldr	r2, [pc, #608]	; (8005498 <statemachine+0x1c08>)
 8005236:	2132      	movs	r1, #50	; 0x32
 8005238:	4894      	ldr	r0, [pc, #592]	; (800548c <statemachine+0x1bfc>)
 800523a:	f011 fde3 	bl	8016e04 <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 800523e:	4a97      	ldr	r2, [pc, #604]	; (800549c <statemachine+0x1c0c>)
 8005240:	2301      	movs	r3, #1
 8005242:	ca06      	ldmia	r2, {r1, r2}
 8005244:	4891      	ldr	r0, [pc, #580]	; (800548c <statemachine+0x1bfc>)
 8005246:	f7fd ff05 	bl	8003054 <ssd1306_WriteString>
					 	batterygauge(vbat,34, 50,1);
 800524a:	4b95      	ldr	r3, [pc, #596]	; (80054a0 <statemachine+0x1c10>)
 800524c:	edd3 7a00 	vldr	s15, [r3]
 8005250:	2201      	movs	r2, #1
 8005252:	2132      	movs	r1, #50	; 0x32
 8005254:	2022      	movs	r0, #34	; 0x22
 8005256:	eeb0 0a67 	vmov.f32	s0, s15
 800525a:	f7fe f93d 	bl	80034d8 <batterygauge>
					 	ssd1306_SetCursor(60,50);
 800525e:	2132      	movs	r1, #50	; 0x32
 8005260:	203c      	movs	r0, #60	; 0x3c
 8005262:	f7fd ff1d 	bl	80030a0 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 8005266:	4b8e      	ldr	r3, [pc, #568]	; (80054a0 <statemachine+0x1c10>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4618      	mov	r0, r3
 800526c:	f7fb f96c 	bl	8000548 <__aeabi_f2d>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	e9cd 2300 	strd	r2, r3, [sp]
 8005278:	4a8a      	ldr	r2, [pc, #552]	; (80054a4 <statemachine+0x1c14>)
 800527a:	2132      	movs	r1, #50	; 0x32
 800527c:	4883      	ldr	r0, [pc, #524]	; (800548c <statemachine+0x1bfc>)
 800527e:	f011 fdc1 	bl	8016e04 <sniprintf>
					 	if(cptdoubledonnee==3){
 8005282:	4b89      	ldr	r3, [pc, #548]	; (80054a8 <statemachine+0x1c18>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b03      	cmp	r3, #3
 8005288:	d108      	bne.n	800529c <statemachine+0x1a0c>
					 	  		doubledonnee=1-doubledonnee;
 800528a:	4b88      	ldr	r3, [pc, #544]	; (80054ac <statemachine+0x1c1c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f1c3 0301 	rsb	r3, r3, #1
 8005292:	4a86      	ldr	r2, [pc, #536]	; (80054ac <statemachine+0x1c1c>)
 8005294:	6013      	str	r3, [r2, #0]
					 	  		cptdoubledonnee=0;
 8005296:	4b84      	ldr	r3, [pc, #528]	; (80054a8 <statemachine+0x1c18>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
					 	erasetime=HAL_GetTick()-erasetime;
 800529c:	f001 faf0 	bl	8006880 <HAL_GetTick>
 80052a0:	4603      	mov	r3, r0
 80052a2:	4a83      	ldr	r2, [pc, #524]	; (80054b0 <statemachine+0x1c20>)
 80052a4:	6812      	ldr	r2, [r2, #0]
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	461a      	mov	r2, r3
 80052aa:	4b81      	ldr	r3, [pc, #516]	; (80054b0 <statemachine+0x1c20>)
 80052ac:	601a      	str	r2, [r3, #0]
					 	if(maxtesttime<=erasetime){
 80052ae:	4b81      	ldr	r3, [pc, #516]	; (80054b4 <statemachine+0x1c24>)
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4b7f      	ldr	r3, [pc, #508]	; (80054b0 <statemachine+0x1c20>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	dc03      	bgt.n	80052c2 <statemachine+0x1a32>
					 		maxtesttime=erasetime;
 80052ba:	4b7d      	ldr	r3, [pc, #500]	; (80054b0 <statemachine+0x1c20>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a7d      	ldr	r2, [pc, #500]	; (80054b4 <statemachine+0x1c24>)
 80052c0:	6013      	str	r3, [r2, #0]
					 	snprintf((char  *)bufferscreen,50,"%d",maxtesttime);
 80052c2:	4b7c      	ldr	r3, [pc, #496]	; (80054b4 <statemachine+0x1c24>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a7c      	ldr	r2, [pc, #496]	; (80054b8 <statemachine+0x1c28>)
 80052c8:	2132      	movs	r1, #50	; 0x32
 80052ca:	4870      	ldr	r0, [pc, #448]	; (800548c <statemachine+0x1bfc>)
 80052cc:	f011 fd9a 	bl	8016e04 <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80052d0:	4a72      	ldr	r2, [pc, #456]	; (800549c <statemachine+0x1c0c>)
 80052d2:	2301      	movs	r3, #1
 80052d4:	ca06      	ldmia	r2, {r1, r2}
 80052d6:	486d      	ldr	r0, [pc, #436]	; (800548c <statemachine+0x1bfc>)
 80052d8:	f7fd febc 	bl	8003054 <ssd1306_WriteString>
					  if(BTN_B>=1){
 80052dc:	4b77      	ldr	r3, [pc, #476]	; (80054bc <statemachine+0x1c2c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	dd0e      	ble.n	8005302 <statemachine+0x1a72>
					  						  balisestate--;
 80052e4:	4b76      	ldr	r3, [pc, #472]	; (80054c0 <statemachine+0x1c30>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	4b74      	ldr	r3, [pc, #464]	; (80054c0 <statemachine+0x1c30>)
 80052ee:	701a      	strb	r2, [r3, #0]
					  						  BTN_B=0;
 80052f0:	4b72      	ldr	r3, [pc, #456]	; (80054bc <statemachine+0x1c2c>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
					  						  BTN_A=0;
 80052f6:	4b73      	ldr	r3, [pc, #460]	; (80054c4 <statemachine+0x1c34>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
					  						  HAL_TIM_Base_Stop_IT(&htim7);
 80052fc:	4872      	ldr	r0, [pc, #456]	; (80054c8 <statemachine+0x1c38>)
 80052fe:	f008 f9e3 	bl	800d6c8 <HAL_TIM_Base_Stop_IT>
					  if(BTN_B_LONG>=1){
 8005302:	4b72      	ldr	r3, [pc, #456]	; (80054cc <statemachine+0x1c3c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	dd5d      	ble.n	80053c6 <statemachine+0x1b36>
						distanceparcouru=0;
 800530a:	495e      	ldr	r1, [pc, #376]	; (8005484 <statemachine+0x1bf4>)
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	e9c1 2300 	strd	r2, r3, [r1]
					  	BTN_B_LONG=0;
 8005318:	4b6c      	ldr	r3, [pc, #432]	; (80054cc <statemachine+0x1c3c>)
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
					  break;
 800531e:	e052      	b.n	80053c6 <statemachine+0x1b36>
					  ssd1306_SetCursor(32,32);
 8005320:	2120      	movs	r1, #32
 8005322:	2020      	movs	r0, #32
 8005324:	f7fd febc 	bl	80030a0 <ssd1306_SetCursor>
					  ssd1306_WriteString("fin de",Font_6x8,White);
 8005328:	4a5c      	ldr	r2, [pc, #368]	; (800549c <statemachine+0x1c0c>)
 800532a:	2301      	movs	r3, #1
 800532c:	ca06      	ldmia	r2, {r1, r2}
 800532e:	4868      	ldr	r0, [pc, #416]	; (80054d0 <statemachine+0x1c40>)
 8005330:	f7fd fe90 	bl	8003054 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 8005334:	2128      	movs	r1, #40	; 0x28
 8005336:	2020      	movs	r0, #32
 8005338:	f7fd feb2 	bl	80030a0 <ssd1306_SetCursor>
					  ssd1306_WriteString("memoire",Font_6x8,White);
 800533c:	4a57      	ldr	r2, [pc, #348]	; (800549c <statemachine+0x1c0c>)
 800533e:	2301      	movs	r3, #1
 8005340:	ca06      	ldmia	r2, {r1, r2}
 8005342:	4864      	ldr	r0, [pc, #400]	; (80054d4 <statemachine+0x1c44>)
 8005344:	f7fd fe86 	bl	8003054 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,48);
 8005348:	2130      	movs	r1, #48	; 0x30
 800534a:	2020      	movs	r0, #32
 800534c:	f7fd fea8 	bl	80030a0 <ssd1306_SetCursor>
					  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 8005350:	4b61      	ldr	r3, [pc, #388]	; (80054d8 <statemachine+0x1c48>)
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	4b61      	ldr	r3, [pc, #388]	; (80054dc <statemachine+0x1c4c>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	4613      	mov	r3, r2
 800535c:	4a60      	ldr	r2, [pc, #384]	; (80054e0 <statemachine+0x1c50>)
 800535e:	2132      	movs	r1, #50	; 0x32
 8005360:	484a      	ldr	r0, [pc, #296]	; (800548c <statemachine+0x1bfc>)
 8005362:	f011 fd4f 	bl	8016e04 <sniprintf>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005366:	4a4d      	ldr	r2, [pc, #308]	; (800549c <statemachine+0x1c0c>)
 8005368:	2301      	movs	r3, #1
 800536a:	ca06      	ldmia	r2, {r1, r2}
 800536c:	4847      	ldr	r0, [pc, #284]	; (800548c <statemachine+0x1bfc>)
 800536e:	f7fd fe71 	bl	8003054 <ssd1306_WriteString>
					  if(BTN_A>=1){
 8005372:	4b54      	ldr	r3, [pc, #336]	; (80054c4 <statemachine+0x1c34>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	dd0e      	ble.n	8005398 <statemachine+0x1b08>
					  				  			 	state++;
 800537a:	4b5a      	ldr	r3, [pc, #360]	; (80054e4 <statemachine+0x1c54>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	3301      	adds	r3, #1
 8005380:	b2da      	uxtb	r2, r3
 8005382:	4b58      	ldr	r3, [pc, #352]	; (80054e4 <statemachine+0x1c54>)
 8005384:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 8005386:	4b4f      	ldr	r3, [pc, #316]	; (80054c4 <statemachine+0x1c34>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 800538c:	4b4b      	ldr	r3, [pc, #300]	; (80054bc <statemachine+0x1c2c>)
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
					  				  			settimeen=0;
 8005392:	4b55      	ldr	r3, [pc, #340]	; (80054e8 <statemachine+0x1c58>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
					  if(BTN_A_LONG>=1){
 8005398:	4b54      	ldr	r3, [pc, #336]	; (80054ec <statemachine+0x1c5c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f340 8370 	ble.w	8005a82 <statemachine+0x21f2>
					  				 									 									  			 	state--;
 80053a2:	4b50      	ldr	r3, [pc, #320]	; (80054e4 <statemachine+0x1c54>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	4b4e      	ldr	r3, [pc, #312]	; (80054e4 <statemachine+0x1c54>)
 80053ac:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 80053ae:	4b45      	ldr	r3, [pc, #276]	; (80054c4 <statemachine+0x1c34>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 80053b4:	4b41      	ldr	r3, [pc, #260]	; (80054bc <statemachine+0x1c2c>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 80053ba:	4b4c      	ldr	r3, [pc, #304]	; (80054ec <statemachine+0x1c5c>)
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]
				  break;
 80053c0:	e35f      	b.n	8005a82 <statemachine+0x21f2>
					  break;
 80053c2:	bf00      	nop
 80053c4:	e35d      	b.n	8005a82 <statemachine+0x21f2>
					  break;
 80053c6:	bf00      	nop
				  break;
 80053c8:	e35b      	b.n	8005a82 <statemachine+0x21f2>


			  case STATE_USB:
				  ssd1306_Fill(Black);
 80053ca:	2000      	movs	r0, #0
 80053cc:	f7fd fd26 	bl	8002e1c <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 80053d0:	2120      	movs	r1, #32
 80053d2:	2020      	movs	r0, #32
 80053d4:	f7fd fe64 	bl	80030a0 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 80053d8:	4a30      	ldr	r2, [pc, #192]	; (800549c <statemachine+0x1c0c>)
 80053da:	2301      	movs	r3, #1
 80053dc:	ca06      	ldmia	r2, {r1, r2}
 80053de:	4844      	ldr	r0, [pc, #272]	; (80054f0 <statemachine+0x1c60>)
 80053e0:	f7fd fe38 	bl	8003054 <ssd1306_WriteString>
				  switch(usbstate){
 80053e4:	4b43      	ldr	r3, [pc, #268]	; (80054f4 <statemachine+0x1c64>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	f000 816a 	beq.w	80056c2 <statemachine+0x1e32>
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	f300 8349 	bgt.w	8005a86 <statemachine+0x21f6>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <statemachine+0x1b70>
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	f000 8081 	beq.w	8005500 <statemachine+0x1c70>
				 									 									  			 	BTN_B=0;
				 									 									  			 	BTN_A_LONG=0;
				 									 									  	}
				 					 break;
				 				  }
				  break;
 80053fe:	e342      	b.n	8005a86 <statemachine+0x21f6>
				 					  ssd1306_SetCursor(32,40);
 8005400:	2128      	movs	r1, #40	; 0x28
 8005402:	2020      	movs	r0, #32
 8005404:	f7fd fe4c 	bl	80030a0 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8005408:	4a24      	ldr	r2, [pc, #144]	; (800549c <statemachine+0x1c0c>)
 800540a:	2301      	movs	r3, #1
 800540c:	ca06      	ldmia	r2, {r1, r2}
 800540e:	483a      	ldr	r0, [pc, #232]	; (80054f8 <statemachine+0x1c68>)
 8005410:	f7fd fe20 	bl	8003054 <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8005414:	4b39      	ldr	r3, [pc, #228]	; (80054fc <statemachine+0x1c6c>)
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 800541a:	4b28      	ldr	r3, [pc, #160]	; (80054bc <statemachine+0x1c2c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	dd0b      	ble.n	800543a <statemachine+0x1baa>
				 						  usbstate++;
 8005422:	4b34      	ldr	r3, [pc, #208]	; (80054f4 <statemachine+0x1c64>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	3301      	adds	r3, #1
 8005428:	b2da      	uxtb	r2, r3
 800542a:	4b32      	ldr	r3, [pc, #200]	; (80054f4 <statemachine+0x1c64>)
 800542c:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 800542e:	4b23      	ldr	r3, [pc, #140]	; (80054bc <statemachine+0x1c2c>)
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 8005434:	4b23      	ldr	r3, [pc, #140]	; (80054c4 <statemachine+0x1c34>)
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 800543a:	4b22      	ldr	r3, [pc, #136]	; (80054c4 <statemachine+0x1c34>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	dd0b      	ble.n	800545a <statemachine+0x1bca>
				 						 state++;
 8005442:	4b28      	ldr	r3, [pc, #160]	; (80054e4 <statemachine+0x1c54>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	3301      	adds	r3, #1
 8005448:	b2da      	uxtb	r2, r3
 800544a:	4b26      	ldr	r3, [pc, #152]	; (80054e4 <statemachine+0x1c54>)
 800544c:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 800544e:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <statemachine+0x1c34>)
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005454:	4b19      	ldr	r3, [pc, #100]	; (80054bc <statemachine+0x1c2c>)
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 800545a:	4b24      	ldr	r3, [pc, #144]	; (80054ec <statemachine+0x1c5c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	f340 823f 	ble.w	80058e2 <statemachine+0x2052>
				 									 									 									  			 	state--;
 8005464:	4b1f      	ldr	r3, [pc, #124]	; (80054e4 <statemachine+0x1c54>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	3b01      	subs	r3, #1
 800546a:	b2da      	uxtb	r2, r3
 800546c:	4b1d      	ldr	r3, [pc, #116]	; (80054e4 <statemachine+0x1c54>)
 800546e:	701a      	strb	r2, [r3, #0]
				 									 									 									  			 	BTN_A=0;
 8005470:	4b14      	ldr	r3, [pc, #80]	; (80054c4 <statemachine+0x1c34>)
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_B=0;
 8005476:	4b11      	ldr	r3, [pc, #68]	; (80054bc <statemachine+0x1c2c>)
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_A_LONG=0;
 800547c:	4b1b      	ldr	r3, [pc, #108]	; (80054ec <statemachine+0x1c5c>)
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
				 					  break;
 8005482:	e22e      	b.n	80058e2 <statemachine+0x2052>
 8005484:	20000a38 	.word	0x20000a38
 8005488:	0801bb40 	.word	0x0801bb40
 800548c:	20000994 	.word	0x20000994
 8005490:	20000014 	.word	0x20000014
 8005494:	200006e0 	.word	0x200006e0
 8005498:	0801bb4c 	.word	0x0801bb4c
 800549c:	2000000c 	.word	0x2000000c
 80054a0:	20000758 	.word	0x20000758
 80054a4:	0801bb54 	.word	0x0801bb54
 80054a8:	20000a34 	.word	0x20000a34
 80054ac:	20000a30 	.word	0x20000a30
 80054b0:	20000a20 	.word	0x20000a20
 80054b4:	20000fdc 	.word	0x20000fdc
 80054b8:	0801bb5c 	.word	0x0801bb5c
 80054bc:	20000724 	.word	0x20000724
 80054c0:	2000049a 	.word	0x2000049a
 80054c4:	20000720 	.word	0x20000720
 80054c8:	20001084 	.word	0x20001084
 80054cc:	20000a68 	.word	0x20000a68
 80054d0:	0801bb60 	.word	0x0801bb60
 80054d4:	0801bb68 	.word	0x0801bb68
 80054d8:	20000970 	.word	0x20000970
 80054dc:	20000974 	.word	0x20000974
 80054e0:	0801bb70 	.word	0x0801bb70
 80054e4:	20000494 	.word	0x20000494
 80054e8:	20000fe0 	.word	0x20000fe0
 80054ec:	20000a6c 	.word	0x20000a6c
 80054f0:	0801bb78 	.word	0x0801bb78
 80054f4:	20000499 	.word	0x20000499
 80054f8:	0801bb7c 	.word	0x0801bb7c
 80054fc:	20000a28 	.word	0x20000a28
				 					 ssd1306_SetCursor(32,40);
 8005500:	2128      	movs	r1, #40	; 0x28
 8005502:	2020      	movs	r0, #32
 8005504:	f7fd fdcc 	bl	80030a0 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8005508:	4ab4      	ldr	r2, [pc, #720]	; (80057dc <statemachine+0x1f4c>)
 800550a:	2301      	movs	r3, #1
 800550c:	ca06      	ldmia	r2, {r1, r2}
 800550e:	48b4      	ldr	r0, [pc, #720]	; (80057e0 <statemachine+0x1f50>)
 8005510:	f7fd fda0 	bl	8003054 <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,48);
 8005514:	2130      	movs	r1, #48	; 0x30
 8005516:	2020      	movs	r0, #32
 8005518:	f7fd fdc2 	bl	80030a0 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 800551c:	4aaf      	ldr	r2, [pc, #700]	; (80057dc <statemachine+0x1f4c>)
 800551e:	2301      	movs	r3, #1
 8005520:	ca06      	ldmia	r2, {r1, r2}
 8005522:	48b0      	ldr	r0, [pc, #704]	; (80057e4 <statemachine+0x1f54>)
 8005524:	f7fd fd96 	bl	8003054 <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8005528:	4baf      	ldr	r3, [pc, #700]	; (80057e8 <statemachine+0x1f58>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d137      	bne.n	80055a0 <statemachine+0x1d10>
					 					 ssd1306_Fill(Black);
 8005530:	2000      	movs	r0, #0
 8005532:	f7fd fc73 	bl	8002e1c <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,32);
 8005536:	2120      	movs	r1, #32
 8005538:	2020      	movs	r0, #32
 800553a:	f7fd fdb1 	bl	80030a0 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 800553e:	4aa7      	ldr	r2, [pc, #668]	; (80057dc <statemachine+0x1f4c>)
 8005540:	2301      	movs	r3, #1
 8005542:	ca06      	ldmia	r2, {r1, r2}
 8005544:	48a9      	ldr	r0, [pc, #676]	; (80057ec <statemachine+0x1f5c>)
 8005546:	f7fd fd85 	bl	8003054 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,40);
 800554a:	2128      	movs	r1, #40	; 0x28
 800554c:	2020      	movs	r0, #32
 800554e:	f7fd fda7 	bl	80030a0 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 8005552:	4aa7      	ldr	r2, [pc, #668]	; (80057f0 <statemachine+0x1f60>)
 8005554:	2301      	movs	r3, #1
 8005556:	ca06      	ldmia	r2, {r1, r2}
 8005558:	48a6      	ldr	r0, [pc, #664]	; (80057f4 <statemachine+0x1f64>)
 800555a:	f7fd fd7b 	bl	8003054 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,56);
 800555e:	2138      	movs	r1, #56	; 0x38
 8005560:	2020      	movs	r0, #32
 8005562:	f7fd fd9d 	bl	80030a0 <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 8005566:	4ba4      	ldr	r3, [pc, #656]	; (80057f8 <statemachine+0x1f68>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005572:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80057fc <statemachine+0x1f6c>
 8005576:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800557a:	ee16 0a90 	vmov	r0, s13
 800557e:	f7fa ffe3 	bl	8000548 <__aeabi_f2d>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	e9cd 2300 	strd	r2, r3, [sp]
 800558a:	4a9d      	ldr	r2, [pc, #628]	; (8005800 <statemachine+0x1f70>)
 800558c:	2132      	movs	r1, #50	; 0x32
 800558e:	489d      	ldr	r0, [pc, #628]	; (8005804 <statemachine+0x1f74>)
 8005590:	f011 fc38 	bl	8016e04 <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005594:	4a91      	ldr	r2, [pc, #580]	; (80057dc <statemachine+0x1f4c>)
 8005596:	2301      	movs	r3, #1
 8005598:	ca06      	ldmia	r2, {r1, r2}
 800559a:	489a      	ldr	r0, [pc, #616]	; (8005804 <statemachine+0x1f74>)
 800559c:	f7fd fd5a 	bl	8003054 <ssd1306_WriteString>
				 					if(BTN_A>=1){
 80055a0:	4b99      	ldr	r3, [pc, #612]	; (8005808 <statemachine+0x1f78>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	dd7a      	ble.n	800569e <statemachine+0x1e0e>
				 						erasetime=HAL_GetTick();
 80055a8:	f001 f96a 	bl	8006880 <HAL_GetTick>
 80055ac:	4603      	mov	r3, r0
 80055ae:	461a      	mov	r2, r3
 80055b0:	4b91      	ldr	r3, [pc, #580]	; (80057f8 <statemachine+0x1f68>)
 80055b2:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 80055b4:	2300      	movs	r3, #0
 80055b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80055b8:	e03f      	b.n	800563a <statemachine+0x1daa>
				 							ssd1306_Fill(Black);
 80055ba:	2000      	movs	r0, #0
 80055bc:	f7fd fc2e 	bl	8002e1c <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 80055c0:	2120      	movs	r1, #32
 80055c2:	2020      	movs	r0, #32
 80055c4:	f7fd fd6c 	bl	80030a0 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 80055c8:	4a84      	ldr	r2, [pc, #528]	; (80057dc <statemachine+0x1f4c>)
 80055ca:	2301      	movs	r3, #1
 80055cc:	ca06      	ldmia	r2, {r1, r2}
 80055ce:	4887      	ldr	r0, [pc, #540]	; (80057ec <statemachine+0x1f5c>)
 80055d0:	f7fd fd40 	bl	8003054 <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 80055d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055d6:	4619      	mov	r1, r3
 80055d8:	488c      	ldr	r0, [pc, #560]	; (800580c <statemachine+0x1f7c>)
 80055da:	f00e feae 	bl	801433a <SPIF_EraseSector>
				 							if(i>=1){
 80055de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	dd21      	ble.n	8005628 <statemachine+0x1d98>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 80055e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055e6:	2264      	movs	r2, #100	; 0x64
 80055e8:	fb02 f303 	mul.w	r3, r2, r3
 80055ec:	ee07 3a90 	vmov	s15, r3
 80055f0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80055f4:	4b86      	ldr	r3, [pc, #536]	; (8005810 <statemachine+0x1f80>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	da00      	bge.n	80055fe <statemachine+0x1d6e>
 80055fc:	330f      	adds	r3, #15
 80055fe:	111b      	asrs	r3, r3, #4
 8005600:	4618      	mov	r0, r3
 8005602:	f7fa ff8f 	bl	8000524 <__aeabi_i2d>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4610      	mov	r0, r2
 800560c:	4619      	mov	r1, r3
 800560e:	f7fb faa3 	bl	8000b58 <__aeabi_d2iz>
 8005612:	ee07 0a90 	vmov	s15, r0
 8005616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800561a:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800561e:	eeb0 0a47 	vmov.f32	s0, s14
 8005622:	f7fe f8d5 	bl	80037d0 <percentage>
 8005626:	e003      	b.n	8005630 <statemachine+0x1da0>
				 								percentage((float) 0);
 8005628:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8005814 <statemachine+0x1f84>
 800562c:	f7fe f8d0 	bl	80037d0 <percentage>
				 							ssd1306_UpdateScreen();
 8005630:	f7fd fc0c 	bl	8002e4c <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8005634:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005636:	3301      	adds	r3, #1
 8005638:	65bb      	str	r3, [r7, #88]	; 0x58
 800563a:	4b75      	ldr	r3, [pc, #468]	; (8005810 <statemachine+0x1f80>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	da00      	bge.n	8005644 <statemachine+0x1db4>
 8005642:	330f      	adds	r3, #15
 8005644:	111b      	asrs	r3, r3, #4
 8005646:	4618      	mov	r0, r3
 8005648:	f7fa ff6c 	bl	8000524 <__aeabi_i2d>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4610      	mov	r0, r2
 8005652:	4619      	mov	r1, r3
 8005654:	f7fb fa80 	bl	8000b58 <__aeabi_d2iz>
 8005658:	4602      	mov	r2, r0
 800565a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800565c:	4293      	cmp	r3, r2
 800565e:	ddac      	ble.n	80055ba <statemachine+0x1d2a>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 8005660:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8005664:	4869      	ldr	r0, [pc, #420]	; (800580c <statemachine+0x1f7c>)
 8005666:	f00e fe68 	bl	801433a <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 800566a:	f001 f909 	bl	8006880 <HAL_GetTick>
 800566e:	4603      	mov	r3, r0
 8005670:	4a61      	ldr	r2, [pc, #388]	; (80057f8 <statemachine+0x1f68>)
 8005672:	6812      	ldr	r2, [r2, #0]
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	461a      	mov	r2, r3
 8005678:	4b5f      	ldr	r3, [pc, #380]	; (80057f8 <statemachine+0x1f68>)
 800567a:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 800567c:	4b5a      	ldr	r3, [pc, #360]	; (80057e8 <statemachine+0x1f58>)
 800567e:	2201      	movs	r2, #1
 8005680:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 8005682:	4b65      	ldr	r3, [pc, #404]	; (8005818 <statemachine+0x1f88>)
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 8005688:	4b61      	ldr	r3, [pc, #388]	; (8005810 <statemachine+0x1f80>)
 800568a:	2200      	movs	r2, #0
 800568c:	601a      	str	r2, [r3, #0]
				 						storeindex();
 800568e:	f7fd f9e9 	bl	8002a64 <storeindex>
				 						BTN_A=0;
 8005692:	4b5d      	ldr	r3, [pc, #372]	; (8005808 <statemachine+0x1f78>)
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 8005698:	4b60      	ldr	r3, [pc, #384]	; (800581c <statemachine+0x1f8c>)
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 800569e:	4b5f      	ldr	r3, [pc, #380]	; (800581c <statemachine+0x1f8c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f340 811f 	ble.w	80058e6 <statemachine+0x2056>
					 						usbstate++;
 80056a8:	4b5d      	ldr	r3, [pc, #372]	; (8005820 <statemachine+0x1f90>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	3301      	adds	r3, #1
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	4b5b      	ldr	r3, [pc, #364]	; (8005820 <statemachine+0x1f90>)
 80056b2:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 80056b4:	4b59      	ldr	r3, [pc, #356]	; (800581c <statemachine+0x1f8c>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 80056ba:	4b53      	ldr	r3, [pc, #332]	; (8005808 <statemachine+0x1f78>)
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
				 			  break;
 80056c0:	e111      	b.n	80058e6 <statemachine+0x2056>
				 					ssd1306_Fill(Black);
 80056c2:	2000      	movs	r0, #0
 80056c4:	f7fd fbaa 	bl	8002e1c <ssd1306_Fill>
				 					ssd1306_SetCursor(32,40);
 80056c8:	2128      	movs	r1, #40	; 0x28
 80056ca:	2020      	movs	r0, #32
 80056cc:	f7fd fce8 	bl	80030a0 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 80056d0:	4a42      	ldr	r2, [pc, #264]	; (80057dc <statemachine+0x1f4c>)
 80056d2:	2301      	movs	r3, #1
 80056d4:	ca06      	ldmia	r2, {r1, r2}
 80056d6:	4853      	ldr	r0, [pc, #332]	; (8005824 <statemachine+0x1f94>)
 80056d8:	f7fd fcbc 	bl	8003054 <ssd1306_WriteString>
				 					if(pagenumber>0){
 80056dc:	4b4c      	ldr	r3, [pc, #304]	; (8005810 <statemachine+0x1f80>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f340 80ad 	ble.w	8005840 <statemachine+0x1fb0>
				 					int i=0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	657b      	str	r3, [r7, #84]	; 0x54
				 					if(usbtransmiten==0){
 80056ea:	4b4f      	ldr	r3, [pc, #316]	; (8005828 <statemachine+0x1f98>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d162      	bne.n	80057b8 <statemachine+0x1f28>
				 						while(i<pagenumber){
 80056f2:	e036      	b.n	8005762 <statemachine+0x1ed2>
				 							ssd1306_Fill(Black);
 80056f4:	2000      	movs	r0, #0
 80056f6:	f7fd fb91 	bl	8002e1c <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 80056fa:	2120      	movs	r1, #32
 80056fc:	2020      	movs	r0, #32
 80056fe:	f7fd fccf 	bl	80030a0 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8005702:	4a36      	ldr	r2, [pc, #216]	; (80057dc <statemachine+0x1f4c>)
 8005704:	2301      	movs	r3, #1
 8005706:	ca06      	ldmia	r2, {r1, r2}
 8005708:	4846      	ldr	r0, [pc, #280]	; (8005824 <statemachine+0x1f94>)
 800570a:	f7fd fca3 	bl	8003054 <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t  *)flashread, 256, 0);
 800570e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005710:	2300      	movs	r3, #0
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005718:	4a44      	ldr	r2, [pc, #272]	; (800582c <statemachine+0x1f9c>)
 800571a:	483c      	ldr	r0, [pc, #240]	; (800580c <statemachine+0x1f7c>)
 800571c:	f00e feae 	bl	801447c <SPIF_ReadPage>
				 							CDC_Transmit_FS((char  * )flashread,256);
 8005720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005724:	4841      	ldr	r0, [pc, #260]	; (800582c <statemachine+0x1f9c>)
 8005726:	f00e ff93 	bl	8014650 <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 800572a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800572c:	2264      	movs	r2, #100	; 0x64
 800572e:	fb02 f303 	mul.w	r3, r2, r3
 8005732:	ee07 3a90 	vmov	s15, r3
 8005736:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800573a:	4b35      	ldr	r3, [pc, #212]	; (8005810 <statemachine+0x1f80>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005746:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800574a:	eeb0 0a66 	vmov.f32	s0, s13
 800574e:	f7fe f83f 	bl	80037d0 <percentage>
				 							ssd1306_UpdateScreen();
 8005752:	f7fd fb7b 	bl	8002e4c <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 8005756:	207d      	movs	r0, #125	; 0x7d
 8005758:	f001 f89e 	bl	8006898 <HAL_Delay>
				 							i++;
 800575c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800575e:	3301      	adds	r3, #1
 8005760:	657b      	str	r3, [r7, #84]	; 0x54
				 						while(i<pagenumber){
 8005762:	4b2b      	ldr	r3, [pc, #172]	; (8005810 <statemachine+0x1f80>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005768:	429a      	cmp	r2, r3
 800576a:	dbc3      	blt.n	80056f4 <statemachine+0x1e64>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 800576c:	4b28      	ldr	r3, [pc, #160]	; (8005810 <statemachine+0x1f80>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4619      	mov	r1, r3
 8005772:	4b29      	ldr	r3, [pc, #164]	; (8005818 <statemachine+0x1f88>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	2300      	movs	r3, #0
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	4613      	mov	r3, r2
 800577e:	4a2b      	ldr	r2, [pc, #172]	; (800582c <statemachine+0x1f9c>)
 8005780:	4822      	ldr	r0, [pc, #136]	; (800580c <statemachine+0x1f7c>)
 8005782:	f00e fe7b 	bl	801447c <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 8005786:	4b24      	ldr	r3, [pc, #144]	; (8005818 <statemachine+0x1f88>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4619      	mov	r1, r3
 800578c:	4827      	ldr	r0, [pc, #156]	; (800582c <statemachine+0x1f9c>)
 800578e:	f00e ff5f 	bl	8014650 <CDC_Transmit_FS>
				 						HAL_Delay(125);
 8005792:	207d      	movs	r0, #125	; 0x7d
 8005794:	f001 f880 	bl	8006898 <HAL_Delay>
				 						int taillefin=0;
 8005798:	2300      	movs	r3, #0
 800579a:	653b      	str	r3, [r7, #80]	; 0x50
										taillefin = snprintf((char  *)usbbuffer,64,"kawakobeme\n\r");
 800579c:	4a24      	ldr	r2, [pc, #144]	; (8005830 <statemachine+0x1fa0>)
 800579e:	2140      	movs	r1, #64	; 0x40
 80057a0:	4824      	ldr	r0, [pc, #144]	; (8005834 <statemachine+0x1fa4>)
 80057a2:	f011 fb2f 	bl	8016e04 <sniprintf>
 80057a6:	6538      	str	r0, [r7, #80]	; 0x50
				 						CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 80057a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057aa:	4822      	ldr	r0, [pc, #136]	; (8005834 <statemachine+0x1fa4>)
 80057ac:	f00e ff50 	bl	8014650 <CDC_Transmit_FS>
				 						usbtransmiten=1;
 80057b0:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <statemachine+0x1f98>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	e003      	b.n	80057c0 <statemachine+0x1f30>
				 						usbpercent=1;
 80057b8:	4b1f      	ldr	r3, [pc, #124]	; (8005838 <statemachine+0x1fa8>)
 80057ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80057be:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 80057c0:	2000      	movs	r0, #0
 80057c2:	f7fd fb2b 	bl	8002e1c <ssd1306_Fill>
				 					ssd1306_SetCursor(32,45);
 80057c6:	212d      	movs	r1, #45	; 0x2d
 80057c8:	2020      	movs	r0, #32
 80057ca:	f7fd fc69 	bl	80030a0 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 80057ce:	4a08      	ldr	r2, [pc, #32]	; (80057f0 <statemachine+0x1f60>)
 80057d0:	2301      	movs	r3, #1
 80057d2:	ca06      	ldmia	r2, {r1, r2}
 80057d4:	4819      	ldr	r0, [pc, #100]	; (800583c <statemachine+0x1fac>)
 80057d6:	f7fd fc3d 	bl	8003054 <ssd1306_WriteString>
 80057da:	e048      	b.n	800586e <statemachine+0x1fde>
 80057dc:	2000000c 	.word	0x2000000c
 80057e0:	0801bb88 	.word	0x0801bb88
 80057e4:	0801bb90 	.word	0x0801bb90
 80057e8:	20000a24 	.word	0x20000a24
 80057ec:	0801bb78 	.word	0x0801bb78
 80057f0:	20000014 	.word	0x20000014
 80057f4:	0801bb9c 	.word	0x0801bb9c
 80057f8:	20000a20 	.word	0x20000a20
 80057fc:	447a0000 	.word	0x447a0000
 8005800:	0801bba0 	.word	0x0801bba0
 8005804:	20000994 	.word	0x20000994
 8005808:	20000720 	.word	0x20000720
 800580c:	20000728 	.word	0x20000728
 8005810:	20000974 	.word	0x20000974
 8005814:	00000000 	.word	0x00000000
 8005818:	20000970 	.word	0x20000970
 800581c:	20000724 	.word	0x20000724
 8005820:	20000499 	.word	0x20000499
 8005824:	0801bba8 	.word	0x0801bba8
 8005828:	20000a28 	.word	0x20000a28
 800582c:	20000870 	.word	0x20000870
 8005830:	0801bbb0 	.word	0x0801bbb0
 8005834:	200009c8 	.word	0x200009c8
 8005838:	20000a2c 	.word	0x20000a2c
 800583c:	0801bbc0 	.word	0x0801bbc0
				 							ssd1306_Fill(Black);
 8005840:	2000      	movs	r0, #0
 8005842:	f7fd faeb 	bl	8002e1c <ssd1306_Fill>
				 							ssd1306_SetCursor(32,40);
 8005846:	2128      	movs	r1, #40	; 0x28
 8005848:	2020      	movs	r0, #32
 800584a:	f7fd fc29 	bl	80030a0 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 800584e:	4a93      	ldr	r2, [pc, #588]	; (8005a9c <statemachine+0x220c>)
 8005850:	2301      	movs	r3, #1
 8005852:	ca06      	ldmia	r2, {r1, r2}
 8005854:	4892      	ldr	r0, [pc, #584]	; (8005aa0 <statemachine+0x2210>)
 8005856:	f7fd fbfd 	bl	8003054 <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,48);
 800585a:	2130      	movs	r1, #48	; 0x30
 800585c:	2020      	movs	r0, #32
 800585e:	f7fd fc1f 	bl	80030a0 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_6x8,White);
 8005862:	4a8e      	ldr	r2, [pc, #568]	; (8005a9c <statemachine+0x220c>)
 8005864:	2301      	movs	r3, #1
 8005866:	ca06      	ldmia	r2, {r1, r2}
 8005868:	488e      	ldr	r0, [pc, #568]	; (8005aa4 <statemachine+0x2214>)
 800586a:	f7fd fbf3 	bl	8003054 <ssd1306_WriteString>
				 					if(BTN_B>=1){
 800586e:	4b8e      	ldr	r3, [pc, #568]	; (8005aa8 <statemachine+0x2218>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	dd11      	ble.n	800589a <statemachine+0x200a>
				 									 						usbstate--;
 8005876:	4b8d      	ldr	r3, [pc, #564]	; (8005aac <statemachine+0x221c>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	3b01      	subs	r3, #1
 800587c:	b2da      	uxtb	r2, r3
 800587e:	4b8b      	ldr	r3, [pc, #556]	; (8005aac <statemachine+0x221c>)
 8005880:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 8005882:	4b8a      	ldr	r3, [pc, #552]	; (8005aac <statemachine+0x221c>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	3b01      	subs	r3, #1
 8005888:	b2da      	uxtb	r2, r3
 800588a:	4b88      	ldr	r3, [pc, #544]	; (8005aac <statemachine+0x221c>)
 800588c:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 800588e:	4b86      	ldr	r3, [pc, #536]	; (8005aa8 <statemachine+0x2218>)
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 8005894:	4b86      	ldr	r3, [pc, #536]	; (8005ab0 <statemachine+0x2220>)
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 800589a:	4b85      	ldr	r3, [pc, #532]	; (8005ab0 <statemachine+0x2220>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	dd0b      	ble.n	80058ba <statemachine+0x202a>
				 									  			 	state++;
 80058a2:	4b84      	ldr	r3, [pc, #528]	; (8005ab4 <statemachine+0x2224>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	3301      	adds	r3, #1
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	4b82      	ldr	r3, [pc, #520]	; (8005ab4 <statemachine+0x2224>)
 80058ac:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 80058ae:	4b80      	ldr	r3, [pc, #512]	; (8005ab0 <statemachine+0x2220>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 80058b4:	4b7c      	ldr	r3, [pc, #496]	; (8005aa8 <statemachine+0x2218>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 80058ba:	4b7f      	ldr	r3, [pc, #508]	; (8005ab8 <statemachine+0x2228>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	dd13      	ble.n	80058ea <statemachine+0x205a>
				 									 									  			 	state--;
 80058c2:	4b7c      	ldr	r3, [pc, #496]	; (8005ab4 <statemachine+0x2224>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	4b7a      	ldr	r3, [pc, #488]	; (8005ab4 <statemachine+0x2224>)
 80058cc:	701a      	strb	r2, [r3, #0]
				 									 									  			 	BTN_A=0;
 80058ce:	4b78      	ldr	r3, [pc, #480]	; (8005ab0 <statemachine+0x2220>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_B=0;
 80058d4:	4b74      	ldr	r3, [pc, #464]	; (8005aa8 <statemachine+0x2218>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_A_LONG=0;
 80058da:	4b77      	ldr	r3, [pc, #476]	; (8005ab8 <statemachine+0x2228>)
 80058dc:	2200      	movs	r2, #0
 80058de:	601a      	str	r2, [r3, #0]
				 					 break;
 80058e0:	e003      	b.n	80058ea <statemachine+0x205a>
				 					  break;
 80058e2:	bf00      	nop
 80058e4:	e0cf      	b.n	8005a86 <statemachine+0x21f6>
				 			  break;
 80058e6:	bf00      	nop
 80058e8:	e0cd      	b.n	8005a86 <statemachine+0x21f6>
				 					 break;
 80058ea:	bf00      	nop
				  break;
 80058ec:	e0cb      	b.n	8005a86 <statemachine+0x21f6>

				  case STATE_TEST:
					  ssd1306_Fill(Black);
 80058ee:	2000      	movs	r0, #0
 80058f0:	f7fd fa94 	bl	8002e1c <ssd1306_Fill>
					  ssd1306_SetCursor(32,32);
 80058f4:	2120      	movs	r1, #32
 80058f6:	2020      	movs	r0, #32
 80058f8:	f7fd fbd2 	bl	80030a0 <ssd1306_SetCursor>
					  ssd1306_WriteString("test",Font_6x8,White);
 80058fc:	4a67      	ldr	r2, [pc, #412]	; (8005a9c <statemachine+0x220c>)
 80058fe:	2301      	movs	r3, #1
 8005900:	ca06      	ldmia	r2, {r1, r2}
 8005902:	486e      	ldr	r0, [pc, #440]	; (8005abc <statemachine+0x222c>)
 8005904:	f7fd fba6 	bl	8003054 <ssd1306_WriteString>


					  if(BTN_B>=1){
 8005908:	4b67      	ldr	r3, [pc, #412]	; (8005aa8 <statemachine+0x2218>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	dd29      	ble.n	8005964 <statemachine+0x20d4>
						  ssd1306_Fill(Black);
 8005910:	2000      	movs	r0, #0
 8005912:	f7fd fa83 	bl	8002e1c <ssd1306_Fill>
						  ssd1306_SetCursor(32,40);
 8005916:	2128      	movs	r1, #40	; 0x28
 8005918:	2020      	movs	r0, #32
 800591a:	f7fd fbc1 	bl	80030a0 <ssd1306_SetCursor>
						  uint8_t dataBA=0;
 800591e:	2300      	movs	r3, #0
 8005920:	71fb      	strb	r3, [r7, #7]
						  HAL_I2C_Mem_Read(&hi2c1, 0xBA, 0x0F, 1, &dataBA, 1, 100);
 8005922:	2364      	movs	r3, #100	; 0x64
 8005924:	9302      	str	r3, [sp, #8]
 8005926:	2301      	movs	r3, #1
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	1dfb      	adds	r3, r7, #7
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	2301      	movs	r3, #1
 8005930:	220f      	movs	r2, #15
 8005932:	21ba      	movs	r1, #186	; 0xba
 8005934:	4862      	ldr	r0, [pc, #392]	; (8005ac0 <statemachine+0x2230>)
 8005936:	f003 f969 	bl	8008c0c <HAL_I2C_Mem_Read>
						  snprintf((char  *)bufferscreen,50,"BA=%d",dataBA);
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	4a61      	ldr	r2, [pc, #388]	; (8005ac4 <statemachine+0x2234>)
 800593e:	2132      	movs	r1, #50	; 0x32
 8005940:	4861      	ldr	r0, [pc, #388]	; (8005ac8 <statemachine+0x2238>)
 8005942:	f011 fa5f 	bl	8016e04 <sniprintf>
						  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005946:	4a55      	ldr	r2, [pc, #340]	; (8005a9c <statemachine+0x220c>)
 8005948:	2301      	movs	r3, #1
 800594a:	ca06      	ldmia	r2, {r1, r2}
 800594c:	485e      	ldr	r0, [pc, #376]	; (8005ac8 <statemachine+0x2238>)
 800594e:	f7fd fb81 	bl	8003054 <ssd1306_WriteString>
						  ssd1306_UpdateScreen();
 8005952:	f7fd fa7b 	bl	8002e4c <ssd1306_UpdateScreen>
						  HAL_Delay(1000);
 8005956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800595a:	f000 ff9d 	bl	8006898 <HAL_Delay>
						  //HAL_I2C_Init(&hi2c1);
						  //HAL_Delay(20);
						  //barostatecheck=PADS_continuous_init(&hi2c1);


						  BTN_B=0;
 800595e:	4b52      	ldr	r3, [pc, #328]	; (8005aa8 <statemachine+0x2218>)
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]
					  }

					  barostatecheck=PADS_continuous_read(&hi2c1);
 8005964:	4856      	ldr	r0, [pc, #344]	; (8005ac0 <statemachine+0x2230>)
 8005966:	f7fb fbab 	bl	80010c0 <PADS_continuous_read>
 800596a:	4603      	mov	r3, r0
 800596c:	4a57      	ldr	r2, [pc, #348]	; (8005acc <statemachine+0x223c>)
 800596e:	6013      	str	r3, [r2, #0]
					  //ssd1306_SetCursor(32,40);
					  //snprintf((char  *)bufferscreen,50,"c=%d",barostatecheck);
					  //ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
					  ssd1306_SetCursor(32,48);
 8005970:	2130      	movs	r1, #48	; 0x30
 8005972:	2020      	movs	r0, #32
 8005974:	f7fd fb94 	bl	80030a0 <ssd1306_SetCursor>
					  snprintf((char  *)bufferscreen,50,"alt=%d",(int)floor(alt));
 8005978:	4b55      	ldr	r3, [pc, #340]	; (8005ad0 <statemachine+0x2240>)
 800597a:	ed93 7b00 	vldr	d7, [r3]
 800597e:	eeb0 0a47 	vmov.f32	s0, s14
 8005982:	eef0 0a67 	vmov.f32	s1, s15
 8005986:	f014 f9c7 	bl	8019d18 <floor>
 800598a:	ec53 2b10 	vmov	r2, r3, d0
 800598e:	4610      	mov	r0, r2
 8005990:	4619      	mov	r1, r3
 8005992:	f7fb f8e1 	bl	8000b58 <__aeabi_d2iz>
 8005996:	4603      	mov	r3, r0
 8005998:	4a4e      	ldr	r2, [pc, #312]	; (8005ad4 <statemachine+0x2244>)
 800599a:	2132      	movs	r1, #50	; 0x32
 800599c:	484a      	ldr	r0, [pc, #296]	; (8005ac8 <statemachine+0x2238>)
 800599e:	f011 fa31 	bl	8016e04 <sniprintf>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80059a2:	4a3e      	ldr	r2, [pc, #248]	; (8005a9c <statemachine+0x220c>)
 80059a4:	2301      	movs	r3, #1
 80059a6:	ca06      	ldmia	r2, {r1, r2}
 80059a8:	4847      	ldr	r0, [pc, #284]	; (8005ac8 <statemachine+0x2238>)
 80059aa:	f7fd fb53 	bl	8003054 <ssd1306_WriteString>

					  ssd1306_SetCursor(32,56);
 80059ae:	2138      	movs	r1, #56	; 0x38
 80059b0:	2020      	movs	r0, #32
 80059b2:	f7fd fb75 	bl	80030a0 <ssd1306_SetCursor>
					  snprintf((char  *)bufferscreen,50,"alt=%0.2lf",(double)alt);
 80059b6:	4b46      	ldr	r3, [pc, #280]	; (8005ad0 <statemachine+0x2240>)
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	e9cd 2300 	strd	r2, r3, [sp]
 80059c0:	4a45      	ldr	r2, [pc, #276]	; (8005ad8 <statemachine+0x2248>)
 80059c2:	2132      	movs	r1, #50	; 0x32
 80059c4:	4840      	ldr	r0, [pc, #256]	; (8005ac8 <statemachine+0x2238>)
 80059c6:	f011 fa1d 	bl	8016e04 <sniprintf>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80059ca:	4a34      	ldr	r2, [pc, #208]	; (8005a9c <statemachine+0x220c>)
 80059cc:	2301      	movs	r3, #1
 80059ce:	ca06      	ldmia	r2, {r1, r2}
 80059d0:	483d      	ldr	r0, [pc, #244]	; (8005ac8 <statemachine+0x2238>)
 80059d2:	f7fd fb3f 	bl	8003054 <ssd1306_WriteString>
				  HAL_Delay(1000);
 80059d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059da:	f000 ff5d 	bl	8006898 <HAL_Delay>





					  if(BTN_A>=1){
 80059de:	4b34      	ldr	r3, [pc, #208]	; (8005ab0 <statemachine+0x2220>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	dd2f      	ble.n	8005a46 <statemachine+0x21b6>
					 				 									state--;
 80059e6:	4b33      	ldr	r3, [pc, #204]	; (8005ab4 <statemachine+0x2224>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	4b31      	ldr	r3, [pc, #196]	; (8005ab4 <statemachine+0x2224>)
 80059f0:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80059f2:	4b30      	ldr	r3, [pc, #192]	; (8005ab4 <statemachine+0x2224>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	4b2e      	ldr	r3, [pc, #184]	; (8005ab4 <statemachine+0x2224>)
 80059fc:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80059fe:	4b2d      	ldr	r3, [pc, #180]	; (8005ab4 <statemachine+0x2224>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	4b2b      	ldr	r3, [pc, #172]	; (8005ab4 <statemachine+0x2224>)
 8005a08:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8005a0a:	4b2a      	ldr	r3, [pc, #168]	; (8005ab4 <statemachine+0x2224>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	4b28      	ldr	r3, [pc, #160]	; (8005ab4 <statemachine+0x2224>)
 8005a14:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8005a16:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <statemachine+0x2224>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <statemachine+0x2224>)
 8005a20:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8005a22:	4b24      	ldr	r3, [pc, #144]	; (8005ab4 <statemachine+0x2224>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	4b22      	ldr	r3, [pc, #136]	; (8005ab4 <statemachine+0x2224>)
 8005a2c:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8005a2e:	4b21      	ldr	r3, [pc, #132]	; (8005ab4 <statemachine+0x2224>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	4b1f      	ldr	r3, [pc, #124]	; (8005ab4 <statemachine+0x2224>)
 8005a38:	701a      	strb	r2, [r3, #0]
					 				 									  			 	BTN_A=0;
 8005a3a:	4b1d      	ldr	r3, [pc, #116]	; (8005ab0 <statemachine+0x2220>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
					 				 									  			 	BTN_B=0;
 8005a40:	4b19      	ldr	r3, [pc, #100]	; (8005aa8 <statemachine+0x2218>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
					 				 									  	}
					  if(BTN_A_LONG>=1){
 8005a46:	4b1c      	ldr	r3, [pc, #112]	; (8005ab8 <statemachine+0x2228>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	dd1d      	ble.n	8005a8a <statemachine+0x21fa>
					  				 									 									  			 	state--;
 8005a4e:	4b19      	ldr	r3, [pc, #100]	; (8005ab4 <statemachine+0x2224>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	4b17      	ldr	r3, [pc, #92]	; (8005ab4 <statemachine+0x2224>)
 8005a58:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 8005a5a:	4b15      	ldr	r3, [pc, #84]	; (8005ab0 <statemachine+0x2220>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 8005a60:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <statemachine+0x2218>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 8005a66:	4b14      	ldr	r3, [pc, #80]	; (8005ab8 <statemachine+0x2228>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]
					  				 									 									  	}



					  break;
 8005a6c:	e00d      	b.n	8005a8a <statemachine+0x21fa>
				  break;
 8005a6e:	bf00      	nop
 8005a70:	e00c      	b.n	8005a8c <statemachine+0x21fc>
			  break;
 8005a72:	bf00      	nop
 8005a74:	e00a      	b.n	8005a8c <statemachine+0x21fc>
			  break;
 8005a76:	bf00      	nop
 8005a78:	e008      	b.n	8005a8c <statemachine+0x21fc>
			  break;
 8005a7a:	bf00      	nop
 8005a7c:	e006      	b.n	8005a8c <statemachine+0x21fc>
			  break;
 8005a7e:	bf00      	nop
 8005a80:	e004      	b.n	8005a8c <statemachine+0x21fc>
				  break;
 8005a82:	bf00      	nop
 8005a84:	e002      	b.n	8005a8c <statemachine+0x21fc>
				  break;
 8005a86:	bf00      	nop
 8005a88:	e000      	b.n	8005a8c <statemachine+0x21fc>
					  break;
 8005a8a:	bf00      	nop
	}
return ;
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
}
 8005a90:	376c      	adds	r7, #108	; 0x6c
 8005a92:	46bd      	mov	sp, r7
 8005a94:	ecbd 8b02 	vpop	{d8}
 8005a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	2000000c 	.word	0x2000000c
 8005aa0:	0801bba8 	.word	0x0801bba8
 8005aa4:	0801bbc8 	.word	0x0801bbc8
 8005aa8:	20000724 	.word	0x20000724
 8005aac:	20000499 	.word	0x20000499
 8005ab0:	20000720 	.word	0x20000720
 8005ab4:	20000494 	.word	0x20000494
 8005ab8:	20000a6c 	.word	0x20000a6c
 8005abc:	0801bbd0 	.word	0x0801bbd0
 8005ac0:	200003ec 	.word	0x200003ec
 8005ac4:	0801bbd8 	.word	0x0801bbd8
 8005ac8:	20000994 	.word	0x20000994
 8005acc:	20000fe4 	.word	0x20000fe4
 8005ad0:	20000338 	.word	0x20000338
 8005ad4:	0801bbe0 	.word	0x0801bbe0
 8005ad8:	0801bbe8 	.word	0x0801bbe8

08005adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ae2:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <HAL_MspInit+0x44>)
 8005ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae6:	4a0e      	ldr	r2, [pc, #56]	; (8005b20 <HAL_MspInit+0x44>)
 8005ae8:	f043 0301 	orr.w	r3, r3, #1
 8005aec:	6613      	str	r3, [r2, #96]	; 0x60
 8005aee:	4b0c      	ldr	r3, [pc, #48]	; (8005b20 <HAL_MspInit+0x44>)
 8005af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	607b      	str	r3, [r7, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005afa:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <HAL_MspInit+0x44>)
 8005afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afe:	4a08      	ldr	r2, [pc, #32]	; (8005b20 <HAL_MspInit+0x44>)
 8005b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b04:	6593      	str	r3, [r2, #88]	; 0x58
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <HAL_MspInit+0x44>)
 8005b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40021000 	.word	0x40021000

08005b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005b28:	e7fe      	b.n	8005b28 <NMI_Handler+0x4>

08005b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b2e:	e7fe      	b.n	8005b2e <HardFault_Handler+0x4>

08005b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b34:	e7fe      	b.n	8005b34 <MemManage_Handler+0x4>

08005b36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b36:	b480      	push	{r7}
 8005b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b3a:	e7fe      	b.n	8005b3a <BusFault_Handler+0x4>

08005b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b40:	e7fe      	b.n	8005b40 <UsageFault_Handler+0x4>

08005b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b42:	b480      	push	{r7}
 8005b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b46:	bf00      	nop
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b54:	bf00      	nop
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b62:	bf00      	nop
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b70:	f000 fe72 	bl	8006858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b74:	bf00      	nop
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005b7c:	2002      	movs	r0, #2
 8005b7e:	f002 fe7d 	bl	800887c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005b82:	bf00      	nop
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005b8c:	4802      	ldr	r0, [pc, #8]	; (8005b98 <DMA1_Channel1_IRQHandler+0x10>)
 8005b8e:	f002 fbf0 	bl	8008372 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005b92:	bf00      	nop
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	200003a4 	.word	0x200003a4

08005b9c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005ba0:	4802      	ldr	r0, [pc, #8]	; (8005bac <DMA1_Channel2_IRQHandler+0x10>)
 8005ba2:	f002 fbe6 	bl	8008372 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005ba6:	bf00      	nop
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	20000b44 	.word	0x20000b44

08005bb0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005bb4:	4802      	ldr	r0, [pc, #8]	; (8005bc0 <DMA1_Channel3_IRQHandler+0x10>)
 8005bb6:	f002 fbdc 	bl	8008372 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005bba:	bf00      	nop
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000b8c 	.word	0x20000b8c

08005bc4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005bc8:	4802      	ldr	r0, [pc, #8]	; (8005bd4 <ADC1_IRQHandler+0x10>)
 8005bca:	f001 fa29 	bl	8007020 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005bce:	bf00      	nop
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000340 	.word	0x20000340

08005bd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005bdc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005be0:	f002 fe4c 	bl	800887c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005be4:	bf00      	nop
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8005bec:	4803      	ldr	r0, [pc, #12]	; (8005bfc <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8005bee:	f007 fd9a 	bl	800d726 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  updatedate();
 8005bf2:	f000 fa91 	bl	8006118 <updatedate>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8005bf6:	bf00      	nop
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	200010d0 	.word	0x200010d0

08005c00 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005c04:	4802      	ldr	r0, [pc, #8]	; (8005c10 <SPI1_IRQHandler+0x10>)
 8005c06:	f007 f815 	bl	800cc34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005c0a:	bf00      	nop
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20000ae0 	.word	0x20000ae0

08005c14 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  	cptdoubledonnee+=1;
 8005c18:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <TIM7_IRQHandler+0x20>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	4a05      	ldr	r2, [pc, #20]	; (8005c34 <TIM7_IRQHandler+0x20>)
 8005c20:	6013      	str	r3, [r2, #0]
  	enablewrite=1;
 8005c22:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <TIM7_IRQHandler+0x24>)
 8005c24:	2201      	movs	r2, #1
 8005c26:	601a      	str	r2, [r3, #0]



  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005c28:	4804      	ldr	r0, [pc, #16]	; (8005c3c <TIM7_IRQHandler+0x28>)
 8005c2a:	f007 fd7c 	bl	800d726 <HAL_TIM_IRQHandler>




  /* USER CODE END TIM7_IRQn 1 */
}
 8005c2e:	bf00      	nop
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000a34 	.word	0x20000a34
 8005c38:	20000a50 	.word	0x20000a50
 8005c3c:	20001084 	.word	0x20001084

08005c40 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005c44:	4802      	ldr	r0, [pc, #8]	; (8005c50 <USB_IRQHandler+0x10>)
 8005c46:	f003 fd93 	bl	8009770 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8005c4a:	bf00      	nop
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20001f58 	.word	0x20001f58

08005c54 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 8005c58:	4802      	ldr	r0, [pc, #8]	; (8005c64 <DMA2_Channel7_IRQHandler+0x10>)
 8005c5a:	f002 fb8a 	bl	8008372 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8005c5e:	bf00      	nop
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	2000122c 	.word	0x2000122c

08005c68 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8005c6c:	4802      	ldr	r0, [pc, #8]	; (8005c78 <LPUART1_IRQHandler+0x10>)
 8005c6e:	f008 fa6f 	bl	800e150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8005c72:	bf00      	nop
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	2000111c 	.word	0x2000111c

08005c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
  return 1;
 8005c80:	2301      	movs	r3, #1
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <_kill>:

int _kill(int pid, int sig)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005c96:	f011 fa33 	bl	8017100 <__errno>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2216      	movs	r2, #22
 8005c9e:	601a      	str	r2, [r3, #0]
  return -1;
 8005ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <_exit>:

void _exit (int status)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff ffe7 	bl	8005c8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8005cbe:	e7fe      	b.n	8005cbe <_exit+0x12>

08005cc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ccc:	2300      	movs	r3, #0
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	e00a      	b.n	8005ce8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005cd2:	f3af 8000 	nop.w
 8005cd6:	4601      	mov	r1, r0
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	60ba      	str	r2, [r7, #8]
 8005cde:	b2ca      	uxtb	r2, r1
 8005ce0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	dbf0      	blt.n	8005cd2 <_read+0x12>
  }

  return len;
 8005cf0:	687b      	ldr	r3, [r7, #4]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3718      	adds	r7, #24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b086      	sub	sp, #24
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]
 8005d0a:	e009      	b.n	8005d20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	60ba      	str	r2, [r7, #8]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	dbf1      	blt.n	8005d0c <_write+0x12>
  }
  return len;
 8005d28:	687b      	ldr	r3, [r7, #4]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <_close>:

int _close(int file)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d5a:	605a      	str	r2, [r3, #4]
  return 0;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <_isatty>:

int _isatty(int file)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005d72:	2301      	movs	r3, #1
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
	...

08005d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005da4:	4a14      	ldr	r2, [pc, #80]	; (8005df8 <_sbrk+0x5c>)
 8005da6:	4b15      	ldr	r3, [pc, #84]	; (8005dfc <_sbrk+0x60>)
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005db0:	4b13      	ldr	r3, [pc, #76]	; (8005e00 <_sbrk+0x64>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d102      	bne.n	8005dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005db8:	4b11      	ldr	r3, [pc, #68]	; (8005e00 <_sbrk+0x64>)
 8005dba:	4a12      	ldr	r2, [pc, #72]	; (8005e04 <_sbrk+0x68>)
 8005dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005dbe:	4b10      	ldr	r3, [pc, #64]	; (8005e00 <_sbrk+0x64>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d207      	bcs.n	8005ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005dcc:	f011 f998 	bl	8017100 <__errno>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	220c      	movs	r2, #12
 8005dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dda:	e009      	b.n	8005df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ddc:	4b08      	ldr	r3, [pc, #32]	; (8005e00 <_sbrk+0x64>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005de2:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <_sbrk+0x64>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4413      	add	r3, r2
 8005dea:	4a05      	ldr	r2, [pc, #20]	; (8005e00 <_sbrk+0x64>)
 8005dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005dee:	68fb      	ldr	r3, [r7, #12]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	20010000 	.word	0x20010000
 8005dfc:	00000400 	.word	0x00000400
 8005e00:	20000fe8 	.word	0x20000fe8
 8005e04:	200025c0 	.word	0x200025c0

08005e08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005e0c:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <SystemInit+0x20>)
 8005e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e12:	4a05      	ldr	r2, [pc, #20]	; (8005e28 <SystemInit+0x20>)
 8005e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005e1c:	bf00      	nop
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	e000ed00 	.word	0xe000ed00

08005e2c <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e32:	f107 0310 	add.w	r3, r7, #16
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	605a      	str	r2, [r3, #4]
 8005e3c:	609a      	str	r2, [r3, #8]
 8005e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e40:	1d3b      	adds	r3, r7, #4
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	605a      	str	r2, [r3, #4]
 8005e48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005e4a:	4b1e      	ldr	r3, [pc, #120]	; (8005ec4 <MX_TIM2_Init+0x98>)
 8005e4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 8005e52:	4b1c      	ldr	r3, [pc, #112]	; (8005ec4 <MX_TIM2_Init+0x98>)
 8005e54:	f240 128f 	movw	r2, #399	; 0x18f
 8005e58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e5a:	4b1a      	ldr	r3, [pc, #104]	; (8005ec4 <MX_TIM2_Init+0x98>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8005e60:	4b18      	ldr	r3, [pc, #96]	; (8005ec4 <MX_TIM2_Init+0x98>)
 8005e62:	f242 720f 	movw	r2, #9999	; 0x270f
 8005e66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e68:	4b16      	ldr	r3, [pc, #88]	; (8005ec4 <MX_TIM2_Init+0x98>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e6e:	4b15      	ldr	r3, [pc, #84]	; (8005ec4 <MX_TIM2_Init+0x98>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005e74:	4813      	ldr	r0, [pc, #76]	; (8005ec4 <MX_TIM2_Init+0x98>)
 8005e76:	f007 fb2f 	bl	800d4d8 <HAL_TIM_Base_Init>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8005e80:	f7fb ffc9 	bl	8001e16 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005e8a:	f107 0310 	add.w	r3, r7, #16
 8005e8e:	4619      	mov	r1, r3
 8005e90:	480c      	ldr	r0, [pc, #48]	; (8005ec4 <MX_TIM2_Init+0x98>)
 8005e92:	f007 fd4a 	bl	800d92a <HAL_TIM_ConfigClockSource>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8005e9c:	f7fb ffbb 	bl	8001e16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005ea0:	2320      	movs	r3, #32
 8005ea2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005ea8:	1d3b      	adds	r3, r7, #4
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4805      	ldr	r0, [pc, #20]	; (8005ec4 <MX_TIM2_Init+0x98>)
 8005eae:	f007 ff35 	bl	800dd1c <HAL_TIMEx_MasterConfigSynchronization>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8005eb8:	f7fb ffad 	bl	8001e16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005ebc:	bf00      	nop
 8005ebe:	3720      	adds	r7, #32
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20000fec 	.word	0x20000fec

08005ec8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ece:	1d3b      	adds	r3, r7, #4
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	605a      	str	r2, [r3, #4]
 8005ed6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005ed8:	4b14      	ldr	r3, [pc, #80]	; (8005f2c <MX_TIM6_Init+0x64>)
 8005eda:	4a15      	ldr	r2, [pc, #84]	; (8005f30 <MX_TIM6_Init+0x68>)
 8005edc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8005ede:	4b13      	ldr	r3, [pc, #76]	; (8005f2c <MX_TIM6_Init+0x64>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ee4:	4b11      	ldr	r3, [pc, #68]	; (8005f2c <MX_TIM6_Init+0x64>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8005eea:	4b10      	ldr	r3, [pc, #64]	; (8005f2c <MX_TIM6_Init+0x64>)
 8005eec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ef0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ef2:	4b0e      	ldr	r3, [pc, #56]	; (8005f2c <MX_TIM6_Init+0x64>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005ef8:	480c      	ldr	r0, [pc, #48]	; (8005f2c <MX_TIM6_Init+0x64>)
 8005efa:	f007 faed 	bl	800d4d8 <HAL_TIM_Base_Init>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005f04:	f7fb ff87 	bl	8001e16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005f10:	1d3b      	adds	r3, r7, #4
 8005f12:	4619      	mov	r1, r3
 8005f14:	4805      	ldr	r0, [pc, #20]	; (8005f2c <MX_TIM6_Init+0x64>)
 8005f16:	f007 ff01 	bl	800dd1c <HAL_TIMEx_MasterConfigSynchronization>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005f20:	f7fb ff79 	bl	8001e16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005f24:	bf00      	nop
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	20001038 	.word	0x20001038
 8005f30:	40001000 	.word	0x40001000

08005f34 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f3a:	1d3b      	adds	r3, r7, #4
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	605a      	str	r2, [r3, #4]
 8005f42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005f44:	4b15      	ldr	r3, [pc, #84]	; (8005f9c <MX_TIM7_Init+0x68>)
 8005f46:	4a16      	ldr	r2, [pc, #88]	; (8005fa0 <MX_TIM7_Init+0x6c>)
 8005f48:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 20000-1;
 8005f4a:	4b14      	ldr	r3, [pc, #80]	; (8005f9c <MX_TIM7_Init+0x68>)
 8005f4c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005f50:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f52:	4b12      	ldr	r3, [pc, #72]	; (8005f9c <MX_TIM7_Init+0x68>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8005f58:	4b10      	ldr	r3, [pc, #64]	; (8005f9c <MX_TIM7_Init+0x68>)
 8005f5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005f5e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f60:	4b0e      	ldr	r3, [pc, #56]	; (8005f9c <MX_TIM7_Init+0x68>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005f66:	480d      	ldr	r0, [pc, #52]	; (8005f9c <MX_TIM7_Init+0x68>)
 8005f68:	f007 fab6 	bl	800d4d8 <HAL_TIM_Base_Init>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8005f72:	f7fb ff50 	bl	8001e16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f76:	2300      	movs	r3, #0
 8005f78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005f7e:	1d3b      	adds	r3, r7, #4
 8005f80:	4619      	mov	r1, r3
 8005f82:	4806      	ldr	r0, [pc, #24]	; (8005f9c <MX_TIM7_Init+0x68>)
 8005f84:	f007 feca 	bl	800dd1c <HAL_TIMEx_MasterConfigSynchronization>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8005f8e:	f7fb ff42 	bl	8001e16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005f92:	bf00      	nop
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20001084 	.word	0x20001084
 8005fa0:	40001400 	.word	0x40001400

08005fa4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005faa:	f107 0310 	add.w	r3, r7, #16
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	605a      	str	r2, [r3, #4]
 8005fb4:	609a      	str	r2, [r3, #8]
 8005fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fb8:	1d3b      	adds	r3, r7, #4
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	605a      	str	r2, [r3, #4]
 8005fc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005fc2:	4b1f      	ldr	r3, [pc, #124]	; (8006040 <MX_TIM15_Init+0x9c>)
 8005fc4:	4a1f      	ldr	r2, [pc, #124]	; (8006044 <MX_TIM15_Init+0xa0>)
 8005fc6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 39999;
 8005fc8:	4b1d      	ldr	r3, [pc, #116]	; (8006040 <MX_TIM15_Init+0x9c>)
 8005fca:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8005fce:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fd0:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <MX_TIM15_Init+0x9c>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8005fd6:	4b1a      	ldr	r3, [pc, #104]	; (8006040 <MX_TIM15_Init+0x9c>)
 8005fd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005fdc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fde:	4b18      	ldr	r3, [pc, #96]	; (8006040 <MX_TIM15_Init+0x9c>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005fe4:	4b16      	ldr	r3, [pc, #88]	; (8006040 <MX_TIM15_Init+0x9c>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fea:	4b15      	ldr	r3, [pc, #84]	; (8006040 <MX_TIM15_Init+0x9c>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005ff0:	4813      	ldr	r0, [pc, #76]	; (8006040 <MX_TIM15_Init+0x9c>)
 8005ff2:	f007 fa71 	bl	800d4d8 <HAL_TIM_Base_Init>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8005ffc:	f7fb ff0b 	bl	8001e16 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006004:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8006006:	f107 0310 	add.w	r3, r7, #16
 800600a:	4619      	mov	r1, r3
 800600c:	480c      	ldr	r0, [pc, #48]	; (8006040 <MX_TIM15_Init+0x9c>)
 800600e:	f007 fc8c 	bl	800d92a <HAL_TIM_ConfigClockSource>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8006018:	f7fb fefd 	bl	8001e16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800601c:	2300      	movs	r3, #0
 800601e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8006024:	1d3b      	adds	r3, r7, #4
 8006026:	4619      	mov	r1, r3
 8006028:	4805      	ldr	r0, [pc, #20]	; (8006040 <MX_TIM15_Init+0x9c>)
 800602a:	f007 fe77 	bl	800dd1c <HAL_TIMEx_MasterConfigSynchronization>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8006034:	f7fb feef 	bl	8001e16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8006038:	bf00      	nop
 800603a:	3720      	adds	r7, #32
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	200010d0 	.word	0x200010d0
 8006044:	40014000 	.word	0x40014000

08006048 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006058:	d10c      	bne.n	8006074 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800605a:	4b2b      	ldr	r3, [pc, #172]	; (8006108 <HAL_TIM_Base_MspInit+0xc0>)
 800605c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800605e:	4a2a      	ldr	r2, [pc, #168]	; (8006108 <HAL_TIM_Base_MspInit+0xc0>)
 8006060:	f043 0301 	orr.w	r3, r3, #1
 8006064:	6593      	str	r3, [r2, #88]	; 0x58
 8006066:	4b28      	ldr	r3, [pc, #160]	; (8006108 <HAL_TIM_Base_MspInit+0xc0>)
 8006068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8006072:	e044      	b.n	80060fe <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM6)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a24      	ldr	r2, [pc, #144]	; (800610c <HAL_TIM_Base_MspInit+0xc4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d10c      	bne.n	8006098 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800607e:	4b22      	ldr	r3, [pc, #136]	; (8006108 <HAL_TIM_Base_MspInit+0xc0>)
 8006080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006082:	4a21      	ldr	r2, [pc, #132]	; (8006108 <HAL_TIM_Base_MspInit+0xc0>)
 8006084:	f043 0310 	orr.w	r3, r3, #16
 8006088:	6593      	str	r3, [r2, #88]	; 0x58
 800608a:	4b1f      	ldr	r3, [pc, #124]	; (8006108 <HAL_TIM_Base_MspInit+0xc0>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608e:	f003 0310 	and.w	r3, r3, #16
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	693b      	ldr	r3, [r7, #16]
}
 8006096:	e032      	b.n	80060fe <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM7)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1c      	ldr	r2, [pc, #112]	; (8006110 <HAL_TIM_Base_MspInit+0xc8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d114      	bne.n	80060cc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80060a2:	4b19      	ldr	r3, [pc, #100]	; (8006108 <HAL_TIM_Base_MspInit+0xc0>)
 80060a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a6:	4a18      	ldr	r2, [pc, #96]	; (8006108 <HAL_TIM_Base_MspInit+0xc0>)
 80060a8:	f043 0320 	orr.w	r3, r3, #32
 80060ac:	6593      	str	r3, [r2, #88]	; 0x58
 80060ae:	4b16      	ldr	r3, [pc, #88]	; (8006108 <HAL_TIM_Base_MspInit+0xc0>)
 80060b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80060ba:	2200      	movs	r2, #0
 80060bc:	2100      	movs	r1, #0
 80060be:	2037      	movs	r0, #55	; 0x37
 80060c0:	f001 ff89 	bl	8007fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80060c4:	2037      	movs	r0, #55	; 0x37
 80060c6:	f001 ffa2 	bl	800800e <HAL_NVIC_EnableIRQ>
}
 80060ca:	e018      	b.n	80060fe <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM15)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a10      	ldr	r2, [pc, #64]	; (8006114 <HAL_TIM_Base_MspInit+0xcc>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d113      	bne.n	80060fe <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80060d6:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <HAL_TIM_Base_MspInit+0xc0>)
 80060d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060da:	4a0b      	ldr	r2, [pc, #44]	; (8006108 <HAL_TIM_Base_MspInit+0xc0>)
 80060dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060e0:	6613      	str	r3, [r2, #96]	; 0x60
 80060e2:	4b09      	ldr	r3, [pc, #36]	; (8006108 <HAL_TIM_Base_MspInit+0xc0>)
 80060e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ea:	60bb      	str	r3, [r7, #8]
 80060ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80060ee:	2200      	movs	r2, #0
 80060f0:	2100      	movs	r1, #0
 80060f2:	2018      	movs	r0, #24
 80060f4:	f001 ff6f 	bl	8007fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80060f8:	2018      	movs	r0, #24
 80060fa:	f001 ff88 	bl	800800e <HAL_NVIC_EnableIRQ>
}
 80060fe:	bf00      	nop
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	40021000 	.word	0x40021000
 800610c:	40001000 	.word	0x40001000
 8006110:	40001400 	.word	0x40001400
 8006114:	40014000 	.word	0x40014000

08006118 <updatedate>:
  /* USER CODE END TIM15_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 8006118:	b480      	push	{r7}
 800611a:	af00      	add	r7, sp, #0

	SEC+=1;
 800611c:	4b98      	ldr	r3, [pc, #608]	; (8006380 <updatedate+0x268>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	3301      	adds	r3, #1
 8006122:	b2da      	uxtb	r2, r3
 8006124:	4b96      	ldr	r3, [pc, #600]	; (8006380 <updatedate+0x268>)
 8006126:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 8006128:	4b95      	ldr	r3, [pc, #596]	; (8006380 <updatedate+0x268>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b3b      	cmp	r3, #59	; 0x3b
 800612e:	d908      	bls.n	8006142 <updatedate+0x2a>
		SEC=0;
 8006130:	4b93      	ldr	r3, [pc, #588]	; (8006380 <updatedate+0x268>)
 8006132:	2200      	movs	r2, #0
 8006134:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 8006136:	4b93      	ldr	r3, [pc, #588]	; (8006384 <updatedate+0x26c>)
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	3301      	adds	r3, #1
 800613c:	b2da      	uxtb	r2, r3
 800613e:	4b91      	ldr	r3, [pc, #580]	; (8006384 <updatedate+0x26c>)
 8006140:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 8006142:	4b90      	ldr	r3, [pc, #576]	; (8006384 <updatedate+0x26c>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b3b      	cmp	r3, #59	; 0x3b
 8006148:	d908      	bls.n	800615c <updatedate+0x44>

		MINUTE=0;
 800614a:	4b8e      	ldr	r3, [pc, #568]	; (8006384 <updatedate+0x26c>)
 800614c:	2200      	movs	r2, #0
 800614e:	701a      	strb	r2, [r3, #0]
		HR+=1;
 8006150:	4b8d      	ldr	r3, [pc, #564]	; (8006388 <updatedate+0x270>)
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	3301      	adds	r3, #1
 8006156:	b2da      	uxtb	r2, r3
 8006158:	4b8b      	ldr	r3, [pc, #556]	; (8006388 <updatedate+0x270>)
 800615a:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 800615c:	4b8a      	ldr	r3, [pc, #552]	; (8006388 <updatedate+0x270>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b17      	cmp	r3, #23
 8006162:	d908      	bls.n	8006176 <updatedate+0x5e>
		HR=0;
 8006164:	4b88      	ldr	r3, [pc, #544]	; (8006388 <updatedate+0x270>)
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 800616a:	4b88      	ldr	r3, [pc, #544]	; (800638c <updatedate+0x274>)
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	3301      	adds	r3, #1
 8006170:	b2da      	uxtb	r2, r3
 8006172:	4b86      	ldr	r3, [pc, #536]	; (800638c <updatedate+0x274>)
 8006174:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 8006176:	4b86      	ldr	r3, [pc, #536]	; (8006390 <updatedate+0x278>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b0b      	cmp	r3, #11
 800617c:	f200 8137 	bhi.w	80063ee <updatedate+0x2d6>
 8006180:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <updatedate+0x70>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	080061b9 	.word	0x080061b9
 800618c:	080061e3 	.word	0x080061e3
 8006190:	0800620d 	.word	0x0800620d
 8006194:	08006237 	.word	0x08006237
 8006198:	08006261 	.word	0x08006261
 800619c:	0800628b 	.word	0x0800628b
 80061a0:	080062b5 	.word	0x080062b5
 80061a4:	080062df 	.word	0x080062df
 80061a8:	08006307 	.word	0x08006307
 80061ac:	0800632f 	.word	0x0800632f
 80061b0:	08006357 	.word	0x08006357
 80061b4:	08006399 	.word	0x08006399

	case JANVIER:
		if(JOURS>31){
 80061b8:	4b74      	ldr	r3, [pc, #464]	; (800638c <updatedate+0x274>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b1f      	cmp	r3, #31
 80061be:	f240 80ff 	bls.w	80063c0 <updatedate+0x2a8>
			JOURS=1;
 80061c2:	4b72      	ldr	r3, [pc, #456]	; (800638c <updatedate+0x274>)
 80061c4:	2201      	movs	r2, #1
 80061c6:	701a      	strb	r2, [r3, #0]
			mois++;
 80061c8:	4b71      	ldr	r3, [pc, #452]	; (8006390 <updatedate+0x278>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	3301      	adds	r3, #1
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	4b6f      	ldr	r3, [pc, #444]	; (8006390 <updatedate+0x278>)
 80061d2:	701a      	strb	r2, [r3, #0]
			MOIS++;
 80061d4:	4b6f      	ldr	r3, [pc, #444]	; (8006394 <updatedate+0x27c>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	3301      	adds	r3, #1
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	4b6d      	ldr	r3, [pc, #436]	; (8006394 <updatedate+0x27c>)
 80061de:	701a      	strb	r2, [r3, #0]
		}

		break;
 80061e0:	e0ee      	b.n	80063c0 <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 80061e2:	4b6a      	ldr	r3, [pc, #424]	; (800638c <updatedate+0x274>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2b1d      	cmp	r3, #29
 80061e8:	f240 80ec 	bls.w	80063c4 <updatedate+0x2ac>
					JOURS=1;
 80061ec:	4b67      	ldr	r3, [pc, #412]	; (800638c <updatedate+0x274>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	701a      	strb	r2, [r3, #0]
					mois++;
 80061f2:	4b67      	ldr	r3, [pc, #412]	; (8006390 <updatedate+0x278>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	3301      	adds	r3, #1
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	4b65      	ldr	r3, [pc, #404]	; (8006390 <updatedate+0x278>)
 80061fc:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80061fe:	4b65      	ldr	r3, [pc, #404]	; (8006394 <updatedate+0x27c>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	3301      	adds	r3, #1
 8006204:	b2da      	uxtb	r2, r3
 8006206:	4b63      	ldr	r3, [pc, #396]	; (8006394 <updatedate+0x27c>)
 8006208:	701a      	strb	r2, [r3, #0]
				}
		break;
 800620a:	e0db      	b.n	80063c4 <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 800620c:	4b5f      	ldr	r3, [pc, #380]	; (800638c <updatedate+0x274>)
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b1f      	cmp	r3, #31
 8006212:	f240 80d9 	bls.w	80063c8 <updatedate+0x2b0>
					JOURS=1;
 8006216:	4b5d      	ldr	r3, [pc, #372]	; (800638c <updatedate+0x274>)
 8006218:	2201      	movs	r2, #1
 800621a:	701a      	strb	r2, [r3, #0]
					mois++;
 800621c:	4b5c      	ldr	r3, [pc, #368]	; (8006390 <updatedate+0x278>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	3301      	adds	r3, #1
 8006222:	b2da      	uxtb	r2, r3
 8006224:	4b5a      	ldr	r3, [pc, #360]	; (8006390 <updatedate+0x278>)
 8006226:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006228:	4b5a      	ldr	r3, [pc, #360]	; (8006394 <updatedate+0x27c>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	3301      	adds	r3, #1
 800622e:	b2da      	uxtb	r2, r3
 8006230:	4b58      	ldr	r3, [pc, #352]	; (8006394 <updatedate+0x27c>)
 8006232:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006234:	e0c8      	b.n	80063c8 <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 8006236:	4b55      	ldr	r3, [pc, #340]	; (800638c <updatedate+0x274>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	2b1e      	cmp	r3, #30
 800623c:	f240 80c6 	bls.w	80063cc <updatedate+0x2b4>
					JOURS=1;
 8006240:	4b52      	ldr	r3, [pc, #328]	; (800638c <updatedate+0x274>)
 8006242:	2201      	movs	r2, #1
 8006244:	701a      	strb	r2, [r3, #0]
					mois++;
 8006246:	4b52      	ldr	r3, [pc, #328]	; (8006390 <updatedate+0x278>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	3301      	adds	r3, #1
 800624c:	b2da      	uxtb	r2, r3
 800624e:	4b50      	ldr	r3, [pc, #320]	; (8006390 <updatedate+0x278>)
 8006250:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006252:	4b50      	ldr	r3, [pc, #320]	; (8006394 <updatedate+0x27c>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	3301      	adds	r3, #1
 8006258:	b2da      	uxtb	r2, r3
 800625a:	4b4e      	ldr	r3, [pc, #312]	; (8006394 <updatedate+0x27c>)
 800625c:	701a      	strb	r2, [r3, #0]
				}
		break;
 800625e:	e0b5      	b.n	80063cc <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 8006260:	4b4a      	ldr	r3, [pc, #296]	; (800638c <updatedate+0x274>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b1f      	cmp	r3, #31
 8006266:	f240 80b3 	bls.w	80063d0 <updatedate+0x2b8>
					JOURS=1;
 800626a:	4b48      	ldr	r3, [pc, #288]	; (800638c <updatedate+0x274>)
 800626c:	2201      	movs	r2, #1
 800626e:	701a      	strb	r2, [r3, #0]
					mois++;
 8006270:	4b47      	ldr	r3, [pc, #284]	; (8006390 <updatedate+0x278>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	b2da      	uxtb	r2, r3
 8006278:	4b45      	ldr	r3, [pc, #276]	; (8006390 <updatedate+0x278>)
 800627a:	701a      	strb	r2, [r3, #0]
					MOIS++;
 800627c:	4b45      	ldr	r3, [pc, #276]	; (8006394 <updatedate+0x27c>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	3301      	adds	r3, #1
 8006282:	b2da      	uxtb	r2, r3
 8006284:	4b43      	ldr	r3, [pc, #268]	; (8006394 <updatedate+0x27c>)
 8006286:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006288:	e0a2      	b.n	80063d0 <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 800628a:	4b40      	ldr	r3, [pc, #256]	; (800638c <updatedate+0x274>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	2b1e      	cmp	r3, #30
 8006290:	f240 80a0 	bls.w	80063d4 <updatedate+0x2bc>
					JOURS=1;
 8006294:	4b3d      	ldr	r3, [pc, #244]	; (800638c <updatedate+0x274>)
 8006296:	2201      	movs	r2, #1
 8006298:	701a      	strb	r2, [r3, #0]
					mois++;
 800629a:	4b3d      	ldr	r3, [pc, #244]	; (8006390 <updatedate+0x278>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	3301      	adds	r3, #1
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	4b3b      	ldr	r3, [pc, #236]	; (8006390 <updatedate+0x278>)
 80062a4:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80062a6:	4b3b      	ldr	r3, [pc, #236]	; (8006394 <updatedate+0x27c>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	3301      	adds	r3, #1
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	4b39      	ldr	r3, [pc, #228]	; (8006394 <updatedate+0x27c>)
 80062b0:	701a      	strb	r2, [r3, #0]
				}
		break;
 80062b2:	e08f      	b.n	80063d4 <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 80062b4:	4b35      	ldr	r3, [pc, #212]	; (800638c <updatedate+0x274>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b1f      	cmp	r3, #31
 80062ba:	f240 808d 	bls.w	80063d8 <updatedate+0x2c0>
					JOURS=1;
 80062be:	4b33      	ldr	r3, [pc, #204]	; (800638c <updatedate+0x274>)
 80062c0:	2201      	movs	r2, #1
 80062c2:	701a      	strb	r2, [r3, #0]
					mois++;
 80062c4:	4b32      	ldr	r3, [pc, #200]	; (8006390 <updatedate+0x278>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	3301      	adds	r3, #1
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	4b30      	ldr	r3, [pc, #192]	; (8006390 <updatedate+0x278>)
 80062ce:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80062d0:	4b30      	ldr	r3, [pc, #192]	; (8006394 <updatedate+0x27c>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	3301      	adds	r3, #1
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	4b2e      	ldr	r3, [pc, #184]	; (8006394 <updatedate+0x27c>)
 80062da:	701a      	strb	r2, [r3, #0]
				}
		break;
 80062dc:	e07c      	b.n	80063d8 <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 80062de:	4b2b      	ldr	r3, [pc, #172]	; (800638c <updatedate+0x274>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	2b1f      	cmp	r3, #31
 80062e4:	d97a      	bls.n	80063dc <updatedate+0x2c4>
					JOURS=1;
 80062e6:	4b29      	ldr	r3, [pc, #164]	; (800638c <updatedate+0x274>)
 80062e8:	2201      	movs	r2, #1
 80062ea:	701a      	strb	r2, [r3, #0]
					mois++;
 80062ec:	4b28      	ldr	r3, [pc, #160]	; (8006390 <updatedate+0x278>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	3301      	adds	r3, #1
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	4b26      	ldr	r3, [pc, #152]	; (8006390 <updatedate+0x278>)
 80062f6:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80062f8:	4b26      	ldr	r3, [pc, #152]	; (8006394 <updatedate+0x27c>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	3301      	adds	r3, #1
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	4b24      	ldr	r3, [pc, #144]	; (8006394 <updatedate+0x27c>)
 8006302:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006304:	e06a      	b.n	80063dc <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 8006306:	4b21      	ldr	r3, [pc, #132]	; (800638c <updatedate+0x274>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b1e      	cmp	r3, #30
 800630c:	d968      	bls.n	80063e0 <updatedate+0x2c8>
					JOURS=1;
 800630e:	4b1f      	ldr	r3, [pc, #124]	; (800638c <updatedate+0x274>)
 8006310:	2201      	movs	r2, #1
 8006312:	701a      	strb	r2, [r3, #0]
					mois++;
 8006314:	4b1e      	ldr	r3, [pc, #120]	; (8006390 <updatedate+0x278>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	3301      	adds	r3, #1
 800631a:	b2da      	uxtb	r2, r3
 800631c:	4b1c      	ldr	r3, [pc, #112]	; (8006390 <updatedate+0x278>)
 800631e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006320:	4b1c      	ldr	r3, [pc, #112]	; (8006394 <updatedate+0x27c>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	3301      	adds	r3, #1
 8006326:	b2da      	uxtb	r2, r3
 8006328:	4b1a      	ldr	r3, [pc, #104]	; (8006394 <updatedate+0x27c>)
 800632a:	701a      	strb	r2, [r3, #0]
				}
		break;
 800632c:	e058      	b.n	80063e0 <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 800632e:	4b17      	ldr	r3, [pc, #92]	; (800638c <updatedate+0x274>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	2b1f      	cmp	r3, #31
 8006334:	d956      	bls.n	80063e4 <updatedate+0x2cc>
					JOURS=1;
 8006336:	4b15      	ldr	r3, [pc, #84]	; (800638c <updatedate+0x274>)
 8006338:	2201      	movs	r2, #1
 800633a:	701a      	strb	r2, [r3, #0]
					mois++;
 800633c:	4b14      	ldr	r3, [pc, #80]	; (8006390 <updatedate+0x278>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	3301      	adds	r3, #1
 8006342:	b2da      	uxtb	r2, r3
 8006344:	4b12      	ldr	r3, [pc, #72]	; (8006390 <updatedate+0x278>)
 8006346:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006348:	4b12      	ldr	r3, [pc, #72]	; (8006394 <updatedate+0x27c>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	3301      	adds	r3, #1
 800634e:	b2da      	uxtb	r2, r3
 8006350:	4b10      	ldr	r3, [pc, #64]	; (8006394 <updatedate+0x27c>)
 8006352:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006354:	e046      	b.n	80063e4 <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 8006356:	4b0d      	ldr	r3, [pc, #52]	; (800638c <updatedate+0x274>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b1e      	cmp	r3, #30
 800635c:	d944      	bls.n	80063e8 <updatedate+0x2d0>
					JOURS=1;
 800635e:	4b0b      	ldr	r3, [pc, #44]	; (800638c <updatedate+0x274>)
 8006360:	2201      	movs	r2, #1
 8006362:	701a      	strb	r2, [r3, #0]
					mois++;
 8006364:	4b0a      	ldr	r3, [pc, #40]	; (8006390 <updatedate+0x278>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	3301      	adds	r3, #1
 800636a:	b2da      	uxtb	r2, r3
 800636c:	4b08      	ldr	r3, [pc, #32]	; (8006390 <updatedate+0x278>)
 800636e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006370:	4b08      	ldr	r3, [pc, #32]	; (8006394 <updatedate+0x27c>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	3301      	adds	r3, #1
 8006376:	b2da      	uxtb	r2, r3
 8006378:	4b06      	ldr	r3, [pc, #24]	; (8006394 <updatedate+0x27c>)
 800637a:	701a      	strb	r2, [r3, #0]
				}
		break;
 800637c:	e034      	b.n	80063e8 <updatedate+0x2d0>
 800637e:	bf00      	nop
 8006380:	20000a54 	.word	0x20000a54
 8006384:	20000a56 	.word	0x20000a56
 8006388:	20000a55 	.word	0x20000a55
 800638c:	20000008 	.word	0x20000008
 8006390:	20000a57 	.word	0x20000a57
 8006394:	20000009 	.word	0x20000009
	case DECEMBRE:
		if(JOURS>31){
 8006398:	4b1f      	ldr	r3, [pc, #124]	; (8006418 <updatedate+0x300>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b1f      	cmp	r3, #31
 800639e:	d925      	bls.n	80063ec <updatedate+0x2d4>
					JOURS=1;
 80063a0:	4b1d      	ldr	r3, [pc, #116]	; (8006418 <updatedate+0x300>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	701a      	strb	r2, [r3, #0]
					mois++;
 80063a6:	4b1d      	ldr	r3, [pc, #116]	; (800641c <updatedate+0x304>)
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	3301      	adds	r3, #1
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	4b1b      	ldr	r3, [pc, #108]	; (800641c <updatedate+0x304>)
 80063b0:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80063b2:	4b1b      	ldr	r3, [pc, #108]	; (8006420 <updatedate+0x308>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	3301      	adds	r3, #1
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	4b19      	ldr	r3, [pc, #100]	; (8006420 <updatedate+0x308>)
 80063bc:	701a      	strb	r2, [r3, #0]
				}
		break;
 80063be:	e015      	b.n	80063ec <updatedate+0x2d4>
		break;
 80063c0:	bf00      	nop
 80063c2:	e014      	b.n	80063ee <updatedate+0x2d6>
		break;
 80063c4:	bf00      	nop
 80063c6:	e012      	b.n	80063ee <updatedate+0x2d6>
		break;
 80063c8:	bf00      	nop
 80063ca:	e010      	b.n	80063ee <updatedate+0x2d6>
		break;
 80063cc:	bf00      	nop
 80063ce:	e00e      	b.n	80063ee <updatedate+0x2d6>
		break;
 80063d0:	bf00      	nop
 80063d2:	e00c      	b.n	80063ee <updatedate+0x2d6>
		break;
 80063d4:	bf00      	nop
 80063d6:	e00a      	b.n	80063ee <updatedate+0x2d6>
		break;
 80063d8:	bf00      	nop
 80063da:	e008      	b.n	80063ee <updatedate+0x2d6>
		break;
 80063dc:	bf00      	nop
 80063de:	e006      	b.n	80063ee <updatedate+0x2d6>
		break;
 80063e0:	bf00      	nop
 80063e2:	e004      	b.n	80063ee <updatedate+0x2d6>
		break;
 80063e4:	bf00      	nop
 80063e6:	e002      	b.n	80063ee <updatedate+0x2d6>
		break;
 80063e8:	bf00      	nop
 80063ea:	e000      	b.n	80063ee <updatedate+0x2d6>
		break;
 80063ec:	bf00      	nop

	}

	if(MOIS>12){
 80063ee:	4b0c      	ldr	r3, [pc, #48]	; (8006420 <updatedate+0x308>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b0c      	cmp	r3, #12
 80063f4:	d90b      	bls.n	800640e <updatedate+0x2f6>
		mois=JANVIER;
 80063f6:	4b09      	ldr	r3, [pc, #36]	; (800641c <updatedate+0x304>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 80063fc:	4b08      	ldr	r3, [pc, #32]	; (8006420 <updatedate+0x308>)
 80063fe:	2201      	movs	r2, #1
 8006400:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 8006402:	4b08      	ldr	r3, [pc, #32]	; (8006424 <updatedate+0x30c>)
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	3301      	adds	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	4b06      	ldr	r3, [pc, #24]	; (8006424 <updatedate+0x30c>)
 800640c:	801a      	strh	r2, [r3, #0]
	}
}
 800640e:	bf00      	nop
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	20000008 	.word	0x20000008
 800641c:	20000a57 	.word	0x20000a57
 8006420:	20000009 	.word	0x20000009
 8006424:	2000000a 	.word	0x2000000a

08006428 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800642c:	4b12      	ldr	r3, [pc, #72]	; (8006478 <MX_LPUART1_UART_Init+0x50>)
 800642e:	4a13      	ldr	r2, [pc, #76]	; (800647c <MX_LPUART1_UART_Init+0x54>)
 8006430:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8006432:	4b11      	ldr	r3, [pc, #68]	; (8006478 <MX_LPUART1_UART_Init+0x50>)
 8006434:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006438:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800643a:	4b0f      	ldr	r3, [pc, #60]	; (8006478 <MX_LPUART1_UART_Init+0x50>)
 800643c:	2200      	movs	r2, #0
 800643e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006440:	4b0d      	ldr	r3, [pc, #52]	; (8006478 <MX_LPUART1_UART_Init+0x50>)
 8006442:	2200      	movs	r2, #0
 8006444:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006446:	4b0c      	ldr	r3, [pc, #48]	; (8006478 <MX_LPUART1_UART_Init+0x50>)
 8006448:	2200      	movs	r2, #0
 800644a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <MX_LPUART1_UART_Init+0x50>)
 800644e:	220c      	movs	r2, #12
 8006450:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006452:	4b09      	ldr	r3, [pc, #36]	; (8006478 <MX_LPUART1_UART_Init+0x50>)
 8006454:	2200      	movs	r2, #0
 8006456:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006458:	4b07      	ldr	r3, [pc, #28]	; (8006478 <MX_LPUART1_UART_Init+0x50>)
 800645a:	2200      	movs	r2, #0
 800645c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800645e:	4b06      	ldr	r3, [pc, #24]	; (8006478 <MX_LPUART1_UART_Init+0x50>)
 8006460:	2200      	movs	r2, #0
 8006462:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006464:	4804      	ldr	r0, [pc, #16]	; (8006478 <MX_LPUART1_UART_Init+0x50>)
 8006466:	f007 fcdd 	bl	800de24 <HAL_UART_Init>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8006470:	f7fb fcd1 	bl	8001e16 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006474:	bf00      	nop
 8006476:	bd80      	pop	{r7, pc}
 8006478:	2000111c 	.word	0x2000111c
 800647c:	40008000 	.word	0x40008000

08006480 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006484:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <MX_USART1_UART_Init+0x58>)
 8006486:	4a15      	ldr	r2, [pc, #84]	; (80064dc <MX_USART1_UART_Init+0x5c>)
 8006488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800648a:	4b13      	ldr	r3, [pc, #76]	; (80064d8 <MX_USART1_UART_Init+0x58>)
 800648c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006492:	4b11      	ldr	r3, [pc, #68]	; (80064d8 <MX_USART1_UART_Init+0x58>)
 8006494:	2200      	movs	r2, #0
 8006496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006498:	4b0f      	ldr	r3, [pc, #60]	; (80064d8 <MX_USART1_UART_Init+0x58>)
 800649a:	2200      	movs	r2, #0
 800649c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800649e:	4b0e      	ldr	r3, [pc, #56]	; (80064d8 <MX_USART1_UART_Init+0x58>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80064a4:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <MX_USART1_UART_Init+0x58>)
 80064a6:	220c      	movs	r2, #12
 80064a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80064aa:	4b0b      	ldr	r3, [pc, #44]	; (80064d8 <MX_USART1_UART_Init+0x58>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80064b0:	4b09      	ldr	r3, [pc, #36]	; (80064d8 <MX_USART1_UART_Init+0x58>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80064b6:	4b08      	ldr	r3, [pc, #32]	; (80064d8 <MX_USART1_UART_Init+0x58>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80064bc:	4b06      	ldr	r3, [pc, #24]	; (80064d8 <MX_USART1_UART_Init+0x58>)
 80064be:	2200      	movs	r2, #0
 80064c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80064c2:	4805      	ldr	r0, [pc, #20]	; (80064d8 <MX_USART1_UART_Init+0x58>)
 80064c4:	f007 fcae 	bl	800de24 <HAL_UART_Init>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80064ce:	f7fb fca2 	bl	8001e16 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80064d2:	bf00      	nop
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	200011a4 	.word	0x200011a4
 80064dc:	40013800 	.word	0x40013800

080064e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b0a0      	sub	sp, #128	; 0x80
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80064ec:	2200      	movs	r2, #0
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	605a      	str	r2, [r3, #4]
 80064f2:	609a      	str	r2, [r3, #8]
 80064f4:	60da      	str	r2, [r3, #12]
 80064f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80064f8:	f107 0318 	add.w	r3, r7, #24
 80064fc:	2254      	movs	r2, #84	; 0x54
 80064fe:	2100      	movs	r1, #0
 8006500:	4618      	mov	r0, r3
 8006502:	f010 fd16 	bl	8016f32 <memset>
  if(uartHandle->Instance==LPUART1)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a55      	ldr	r2, [pc, #340]	; (8006660 <HAL_UART_MspInit+0x180>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d168      	bne.n	80065e2 <HAL_UART_MspInit+0x102>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006510:	2320      	movs	r3, #32
 8006512:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006514:	2300      	movs	r3, #0
 8006516:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006518:	f107 0318 	add.w	r3, r7, #24
 800651c:	4618      	mov	r0, r3
 800651e:	f005 fc29 	bl	800bd74 <HAL_RCCEx_PeriphCLKConfig>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006528:	f7fb fc75 	bl	8001e16 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800652c:	4b4d      	ldr	r3, [pc, #308]	; (8006664 <HAL_UART_MspInit+0x184>)
 800652e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006530:	4a4c      	ldr	r2, [pc, #304]	; (8006664 <HAL_UART_MspInit+0x184>)
 8006532:	f043 0301 	orr.w	r3, r3, #1
 8006536:	65d3      	str	r3, [r2, #92]	; 0x5c
 8006538:	4b4a      	ldr	r3, [pc, #296]	; (8006664 <HAL_UART_MspInit+0x184>)
 800653a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006544:	4b47      	ldr	r3, [pc, #284]	; (8006664 <HAL_UART_MspInit+0x184>)
 8006546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006548:	4a46      	ldr	r2, [pc, #280]	; (8006664 <HAL_UART_MspInit+0x184>)
 800654a:	f043 0301 	orr.w	r3, r3, #1
 800654e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006550:	4b44      	ldr	r3, [pc, #272]	; (8006664 <HAL_UART_MspInit+0x184>)
 8006552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	613b      	str	r3, [r7, #16]
 800655a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800655c:	230c      	movs	r3, #12
 800655e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006560:	2302      	movs	r3, #2
 8006562:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006564:	2300      	movs	r3, #0
 8006566:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006568:	2303      	movs	r3, #3
 800656a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800656c:	2308      	movs	r3, #8
 800656e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006570:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006574:	4619      	mov	r1, r3
 8006576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800657a:	f001 ffe5 	bl	8008548 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 800657e:	4b3a      	ldr	r3, [pc, #232]	; (8006668 <HAL_UART_MspInit+0x188>)
 8006580:	4a3a      	ldr	r2, [pc, #232]	; (800666c <HAL_UART_MspInit+0x18c>)
 8006582:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 8006584:	4b38      	ldr	r3, [pc, #224]	; (8006668 <HAL_UART_MspInit+0x188>)
 8006586:	2204      	movs	r2, #4
 8006588:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800658a:	4b37      	ldr	r3, [pc, #220]	; (8006668 <HAL_UART_MspInit+0x188>)
 800658c:	2200      	movs	r2, #0
 800658e:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006590:	4b35      	ldr	r3, [pc, #212]	; (8006668 <HAL_UART_MspInit+0x188>)
 8006592:	2200      	movs	r2, #0
 8006594:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006596:	4b34      	ldr	r3, [pc, #208]	; (8006668 <HAL_UART_MspInit+0x188>)
 8006598:	2280      	movs	r2, #128	; 0x80
 800659a:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800659c:	4b32      	ldr	r3, [pc, #200]	; (8006668 <HAL_UART_MspInit+0x188>)
 800659e:	2200      	movs	r2, #0
 80065a0:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065a2:	4b31      	ldr	r3, [pc, #196]	; (8006668 <HAL_UART_MspInit+0x188>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_NORMAL;
 80065a8:	4b2f      	ldr	r3, [pc, #188]	; (8006668 <HAL_UART_MspInit+0x188>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_LOW;
 80065ae:	4b2e      	ldr	r3, [pc, #184]	; (8006668 <HAL_UART_MspInit+0x188>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 80065b4:	482c      	ldr	r0, [pc, #176]	; (8006668 <HAL_UART_MspInit+0x188>)
 80065b6:	f001 fd45 	bl	8008044 <HAL_DMA_Init>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80065c0:	f7fb fc29 	bl	8001e16 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart_rx);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a28      	ldr	r2, [pc, #160]	; (8006668 <HAL_UART_MspInit+0x188>)
 80065c8:	675a      	str	r2, [r3, #116]	; 0x74
 80065ca:	4a27      	ldr	r2, [pc, #156]	; (8006668 <HAL_UART_MspInit+0x188>)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80065d0:	2200      	movs	r2, #0
 80065d2:	2100      	movs	r1, #0
 80065d4:	2046      	movs	r0, #70	; 0x46
 80065d6:	f001 fcfe 	bl	8007fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80065da:	2046      	movs	r0, #70	; 0x46
 80065dc:	f001 fd17 	bl	800800e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80065e0:	e03a      	b.n	8006658 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART1)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a22      	ldr	r2, [pc, #136]	; (8006670 <HAL_UART_MspInit+0x190>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d135      	bne.n	8006658 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80065ec:	2301      	movs	r3, #1
 80065ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80065f0:	2300      	movs	r3, #0
 80065f2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80065f4:	f107 0318 	add.w	r3, r7, #24
 80065f8:	4618      	mov	r0, r3
 80065fa:	f005 fbbb 	bl	800bd74 <HAL_RCCEx_PeriphCLKConfig>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8006604:	f7fb fc07 	bl	8001e16 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006608:	4b16      	ldr	r3, [pc, #88]	; (8006664 <HAL_UART_MspInit+0x184>)
 800660a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800660c:	4a15      	ldr	r2, [pc, #84]	; (8006664 <HAL_UART_MspInit+0x184>)
 800660e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006612:	6613      	str	r3, [r2, #96]	; 0x60
 8006614:	4b13      	ldr	r3, [pc, #76]	; (8006664 <HAL_UART_MspInit+0x184>)
 8006616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006620:	4b10      	ldr	r3, [pc, #64]	; (8006664 <HAL_UART_MspInit+0x184>)
 8006622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006624:	4a0f      	ldr	r2, [pc, #60]	; (8006664 <HAL_UART_MspInit+0x184>)
 8006626:	f043 0302 	orr.w	r3, r3, #2
 800662a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800662c:	4b0d      	ldr	r3, [pc, #52]	; (8006664 <HAL_UART_MspInit+0x184>)
 800662e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	60bb      	str	r3, [r7, #8]
 8006636:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006638:	23c0      	movs	r3, #192	; 0xc0
 800663a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800663c:	2302      	movs	r3, #2
 800663e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006640:	2300      	movs	r3, #0
 8006642:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006644:	2303      	movs	r3, #3
 8006646:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006648:	2307      	movs	r3, #7
 800664a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800664c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006650:	4619      	mov	r1, r3
 8006652:	4808      	ldr	r0, [pc, #32]	; (8006674 <HAL_UART_MspInit+0x194>)
 8006654:	f001 ff78 	bl	8008548 <HAL_GPIO_Init>
}
 8006658:	bf00      	nop
 800665a:	3780      	adds	r7, #128	; 0x80
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40008000 	.word	0x40008000
 8006664:	40021000 	.word	0x40021000
 8006668:	2000122c 	.word	0x2000122c
 800666c:	40020480 	.word	0x40020480
 8006670:	40013800 	.word	0x40013800
 8006674:	48000400 	.word	0x48000400

08006678 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8006680:	4b30      	ldr	r3, [pc, #192]	; (8006744 <HAL_UART_RxCpltCallback+0xcc>)
 8006682:	881a      	ldrh	r2, [r3, #0]
 8006684:	4b30      	ldr	r3, [pc, #192]	; (8006748 <HAL_UART_RxCpltCallback+0xd0>)
 8006686:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8006688:	4b2f      	ldr	r3, [pc, #188]	; (8006748 <HAL_UART_RxCpltCallback+0xd0>)
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8006690:	d922      	bls.n	80066d8 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 8006692:	4b2d      	ldr	r3, [pc, #180]	; (8006748 <HAL_UART_RxCpltCallback+0xd0>)
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800669a:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 800669c:	4b2a      	ldr	r3, [pc, #168]	; (8006748 <HAL_UART_RxCpltCallback+0xd0>)
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	461a      	mov	r2, r3
 80066a2:	4b2a      	ldr	r3, [pc, #168]	; (800674c <HAL_UART_RxCpltCallback+0xd4>)
 80066a4:	4413      	add	r3, r2
 80066a6:	89fa      	ldrh	r2, [r7, #14]
 80066a8:	4929      	ldr	r1, [pc, #164]	; (8006750 <HAL_UART_RxCpltCallback+0xd8>)
 80066aa:	4618      	mov	r0, r3
 80066ac:	f010 fd5d 	bl	801716a <memcpy>

				oldPos = 0;  // point to the start of the buffer
 80066b0:	4b25      	ldr	r3, [pc, #148]	; (8006748 <HAL_UART_RxCpltCallback+0xd0>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 80066b6:	89fb      	ldrh	r3, [r7, #14]
 80066b8:	4a25      	ldr	r2, [pc, #148]	; (8006750 <HAL_UART_RxCpltCallback+0xd8>)
 80066ba:	1899      	adds	r1, r3, r2
 80066bc:	89fb      	ldrh	r3, [r7, #14]
 80066be:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80066c2:	461a      	mov	r2, r3
 80066c4:	4821      	ldr	r0, [pc, #132]	; (800674c <HAL_UART_RxCpltCallback+0xd4>)
 80066c6:	f010 fd50 	bl	801716a <memcpy>
				newPos = (64-datatocopy);  // update the position
 80066ca:	89fb      	ldrh	r3, [r7, #14]
 80066cc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <HAL_UART_RxCpltCallback+0xcc>)
 80066d4:	801a      	strh	r2, [r3, #0]
 80066d6:	e01e      	b.n	8006716 <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 80066d8:	4b1b      	ldr	r3, [pc, #108]	; (8006748 <HAL_UART_RxCpltCallback+0xd0>)
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	461a      	mov	r2, r3
 80066de:	4b1b      	ldr	r3, [pc, #108]	; (800674c <HAL_UART_RxCpltCallback+0xd4>)
 80066e0:	441a      	add	r2, r3
 80066e2:	4b1b      	ldr	r3, [pc, #108]	; (8006750 <HAL_UART_RxCpltCallback+0xd8>)
 80066e4:	4610      	mov	r0, r2
 80066e6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80066ea:	4602      	mov	r2, r0
 80066ec:	4619      	mov	r1, r3
 80066ee:	f8d1 c000 	ldr.w	ip, [r1]
 80066f2:	684e      	ldr	r6, [r1, #4]
 80066f4:	688d      	ldr	r5, [r1, #8]
 80066f6:	68c9      	ldr	r1, [r1, #12]
 80066f8:	f8c2 c000 	str.w	ip, [r2]
 80066fc:	6056      	str	r6, [r2, #4]
 80066fe:	6095      	str	r5, [r2, #8]
 8006700:	60d1      	str	r1, [r2, #12]
 8006702:	3310      	adds	r3, #16
 8006704:	3010      	adds	r0, #16
 8006706:	42a3      	cmp	r3, r4
 8006708:	d1ef      	bne.n	80066ea <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 800670a:	4b0f      	ldr	r3, [pc, #60]	; (8006748 <HAL_UART_RxCpltCallback+0xd0>)
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	3340      	adds	r3, #64	; 0x40
 8006710:	b29a      	uxth	r2, r3
 8006712:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <HAL_UART_RxCpltCallback+0xcc>)
 8006714:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 8006716:	2240      	movs	r2, #64	; 0x40
 8006718:	490d      	ldr	r1, [pc, #52]	; (8006750 <HAL_UART_RxCpltCallback+0xd8>)
 800671a:	480e      	ldr	r0, [pc, #56]	; (8006754 <HAL_UART_RxCpltCallback+0xdc>)
 800671c:	f007 fbd0 	bl	800dec0 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8006720:	4b0d      	ldr	r3, [pc, #52]	; (8006758 <HAL_UART_RxCpltCallback+0xe0>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <HAL_UART_RxCpltCallback+0xe0>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0204 	bic.w	r2, r2, #4
 800672e:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 8006730:	2240      	movs	r2, #64	; 0x40
 8006732:	4907      	ldr	r1, [pc, #28]	; (8006750 <HAL_UART_RxCpltCallback+0xd8>)
 8006734:	4807      	ldr	r0, [pc, #28]	; (8006754 <HAL_UART_RxCpltCallback+0xdc>)
 8006736:	f007 fbc3 	bl	800dec0 <HAL_UART_Receive_DMA>
}
 800673a:	bf00      	nop
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006742:	bf00      	nop
 8006744:	2000049e 	.word	0x2000049e
 8006748:	2000049c 	.word	0x2000049c
 800674c:	200004e0 	.word	0x200004e0
 8006750:	200004a0 	.word	0x200004a0
 8006754:	2000111c 	.word	0x2000111c
 8006758:	2000122c 	.word	0x2000122c

0800675c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800675c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006794 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006760:	f7ff fb52 	bl	8005e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006764:	480c      	ldr	r0, [pc, #48]	; (8006798 <LoopForever+0x6>)
  ldr r1, =_edata
 8006766:	490d      	ldr	r1, [pc, #52]	; (800679c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006768:	4a0d      	ldr	r2, [pc, #52]	; (80067a0 <LoopForever+0xe>)
  movs r3, #0
 800676a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800676c:	e002      	b.n	8006774 <LoopCopyDataInit>

0800676e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800676e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006772:	3304      	adds	r3, #4

08006774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006778:	d3f9      	bcc.n	800676e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800677a:	4a0a      	ldr	r2, [pc, #40]	; (80067a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800677c:	4c0a      	ldr	r4, [pc, #40]	; (80067a8 <LoopForever+0x16>)
  movs r3, #0
 800677e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006780:	e001      	b.n	8006786 <LoopFillZerobss>

08006782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006784:	3204      	adds	r2, #4

08006786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006788:	d3fb      	bcc.n	8006782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800678a:	f010 fcbf 	bl	801710c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800678e:	f7fb fa2d 	bl	8001bec <main>

08006792 <LoopForever>:

LoopForever:
    b LoopForever
 8006792:	e7fe      	b.n	8006792 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006794:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8006798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800679c:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 80067a0:	0801deb8 	.word	0x0801deb8
  ldr r2, =_sbss
 80067a4:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 80067a8:	200025bc 	.word	0x200025bc

080067ac <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80067ac:	e7fe      	b.n	80067ac <CAN1_RX0_IRQHandler>

080067ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b082      	sub	sp, #8
 80067b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067b8:	2003      	movs	r0, #3
 80067ba:	f001 fc01 	bl	8007fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80067be:	200f      	movs	r0, #15
 80067c0:	f000 f80e 	bl	80067e0 <HAL_InitTick>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	71fb      	strb	r3, [r7, #7]
 80067ce:	e001      	b.n	80067d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80067d0:	f7ff f984 	bl	8005adc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80067d4:	79fb      	ldrb	r3, [r7, #7]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80067ec:	4b17      	ldr	r3, [pc, #92]	; (800684c <HAL_InitTick+0x6c>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d023      	beq.n	800683c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80067f4:	4b16      	ldr	r3, [pc, #88]	; (8006850 <HAL_InitTick+0x70>)
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	4b14      	ldr	r3, [pc, #80]	; (800684c <HAL_InitTick+0x6c>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	4619      	mov	r1, r3
 80067fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006802:	fbb3 f3f1 	udiv	r3, r3, r1
 8006806:	fbb2 f3f3 	udiv	r3, r2, r3
 800680a:	4618      	mov	r0, r3
 800680c:	f001 fc0d 	bl	800802a <HAL_SYSTICK_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10f      	bne.n	8006836 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b0f      	cmp	r3, #15
 800681a:	d809      	bhi.n	8006830 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800681c:	2200      	movs	r2, #0
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	f04f 30ff 	mov.w	r0, #4294967295
 8006824:	f001 fbd7 	bl	8007fd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006828:	4a0a      	ldr	r2, [pc, #40]	; (8006854 <HAL_InitTick+0x74>)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	e007      	b.n	8006840 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	73fb      	strb	r3, [r7, #15]
 8006834:	e004      	b.n	8006840 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	73fb      	strb	r3, [r7, #15]
 800683a:	e001      	b.n	8006840 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006840:	7bfb      	ldrb	r3, [r7, #15]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	2000002c 	.word	0x2000002c
 8006850:	20000024 	.word	0x20000024
 8006854:	20000028 	.word	0x20000028

08006858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800685c:	4b06      	ldr	r3, [pc, #24]	; (8006878 <HAL_IncTick+0x20>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	4b06      	ldr	r3, [pc, #24]	; (800687c <HAL_IncTick+0x24>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4413      	add	r3, r2
 8006868:	4a04      	ldr	r2, [pc, #16]	; (800687c <HAL_IncTick+0x24>)
 800686a:	6013      	str	r3, [r2, #0]
}
 800686c:	bf00      	nop
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	2000002c 	.word	0x2000002c
 800687c:	20001274 	.word	0x20001274

08006880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
  return uwTick;
 8006884:	4b03      	ldr	r3, [pc, #12]	; (8006894 <HAL_GetTick+0x14>)
 8006886:	681b      	ldr	r3, [r3, #0]
}
 8006888:	4618      	mov	r0, r3
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	20001274 	.word	0x20001274

08006898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80068a0:	f7ff ffee 	bl	8006880 <HAL_GetTick>
 80068a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b0:	d005      	beq.n	80068be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80068b2:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <HAL_Delay+0x44>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4413      	add	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80068be:	bf00      	nop
 80068c0:	f7ff ffde 	bl	8006880 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d8f7      	bhi.n	80068c0 <HAL_Delay+0x28>
  {
  }
}
 80068d0:	bf00      	nop
 80068d2:	bf00      	nop
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	2000002c 	.word	0x2000002c

080068e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	609a      	str	r2, [r3, #8]
}
 80068fa:	bf00      	nop
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	431a      	orrs	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	609a      	str	r2, [r3, #8]
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800693c:	4618      	mov	r0, r3
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3360      	adds	r3, #96	; 0x60
 800695a:	461a      	mov	r2, r3
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	4b08      	ldr	r3, [pc, #32]	; (800698c <LL_ADC_SetOffset+0x44>)
 800696a:	4013      	ands	r3, r2
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	4313      	orrs	r3, r2
 8006978:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006980:	bf00      	nop
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	03fff000 	.word	0x03fff000

08006990 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3360      	adds	r3, #96	; 0x60
 800699e:	461a      	mov	r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3360      	adds	r3, #96	; 0x60
 80069cc:	461a      	mov	r2, r3
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	431a      	orrs	r2, r3
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80069e6:	bf00      	nop
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3330      	adds	r3, #48	; 0x30
 8006a28:	461a      	mov	r2, r3
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	0a1b      	lsrs	r3, r3, #8
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	f003 030c 	and.w	r3, r3, #12
 8006a34:	4413      	add	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f003 031f 	and.w	r3, r3, #31
 8006a42:	211f      	movs	r1, #31
 8006a44:	fa01 f303 	lsl.w	r3, r1, r3
 8006a48:	43db      	mvns	r3, r3
 8006a4a:	401a      	ands	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	0e9b      	lsrs	r3, r3, #26
 8006a50:	f003 011f 	and.w	r1, r3, #31
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f003 031f 	and.w	r3, r3, #31
 8006a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006a64:	bf00      	nop
 8006a66:	371c      	adds	r7, #28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006a84:	2301      	movs	r3, #1
 8006a86:	e000      	b.n	8006a8a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b087      	sub	sp, #28
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	60b9      	str	r1, [r7, #8]
 8006aa0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3314      	adds	r3, #20
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	0e5b      	lsrs	r3, r3, #25
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	f003 0304 	and.w	r3, r3, #4
 8006ab2:	4413      	add	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	0d1b      	lsrs	r3, r3, #20
 8006abe:	f003 031f 	and.w	r3, r3, #31
 8006ac2:	2107      	movs	r1, #7
 8006ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac8:	43db      	mvns	r3, r3
 8006aca:	401a      	ands	r2, r3
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	0d1b      	lsrs	r3, r3, #20
 8006ad0:	f003 031f 	and.w	r3, r3, #31
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8006ada:	431a      	orrs	r2, r3
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006ae0:	bf00      	nop
 8006ae2:	371c      	adds	r7, #28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b04:	43db      	mvns	r3, r3
 8006b06:	401a      	ands	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f003 0318 	and.w	r3, r3, #24
 8006b0e:	4908      	ldr	r1, [pc, #32]	; (8006b30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006b10:	40d9      	lsrs	r1, r3
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	400b      	ands	r3, r1
 8006b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006b22:	bf00      	nop
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	0007ffff 	.word	0x0007ffff

08006b34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6093      	str	r3, [r2, #8]
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b6c:	d101      	bne.n	8006b72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006b90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006b94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bbc:	d101      	bne.n	8006bc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006be0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006be4:	f043 0201 	orr.w	r2, r3, #1
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <LL_ADC_IsEnabled+0x18>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e000      	b.n	8006c12 <LL_ADC_IsEnabled+0x1a>
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c32:	f043 0204 	orr.w	r2, r3, #4
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006c3a:	bf00      	nop
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 0304 	and.w	r3, r3, #4
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d101      	bne.n	8006c5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e000      	b.n	8006c60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d101      	bne.n	8006c84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006c80:	2301      	movs	r3, #1
 8006c82:	e000      	b.n	8006c86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
	...

08006c94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e126      	b.n	8006efc <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d109      	bne.n	8006cd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7fa fbd5 	bl	800146c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7ff ff3f 	bl	8006b58 <LL_ADC_IsDeepPowerDownEnabled>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d004      	beq.n	8006cea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff ff25 	bl	8006b34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff ff5a 	bl	8006ba8 <LL_ADC_IsInternalRegulatorEnabled>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d115      	bne.n	8006d26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff ff3e 	bl	8006b80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d04:	4b7f      	ldr	r3, [pc, #508]	; (8006f04 <HAL_ADC_Init+0x270>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	099b      	lsrs	r3, r3, #6
 8006d0a:	4a7f      	ldr	r2, [pc, #508]	; (8006f08 <HAL_ADC_Init+0x274>)
 8006d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d10:	099b      	lsrs	r3, r3, #6
 8006d12:	3301      	adds	r3, #1
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006d18:	e002      	b.n	8006d20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1f9      	bne.n	8006d1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7ff ff3c 	bl	8006ba8 <LL_ADC_IsInternalRegulatorEnabled>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10d      	bne.n	8006d52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d3a:	f043 0210 	orr.w	r2, r3, #16
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d46:	f043 0201 	orr.w	r2, r3, #1
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff ff75 	bl	8006c46 <LL_ADC_REG_IsConversionOngoing>
 8006d5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d62:	f003 0310 	and.w	r3, r3, #16
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f040 80bf 	bne.w	8006eea <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f040 80bb 	bne.w	8006eea <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d78:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006d7c:	f043 0202 	orr.w	r2, r3, #2
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff ff35 	bl	8006bf8 <LL_ADC_IsEnabled>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10b      	bne.n	8006dac <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d94:	485d      	ldr	r0, [pc, #372]	; (8006f0c <HAL_ADC_Init+0x278>)
 8006d96:	f7ff ff2f 	bl	8006bf8 <LL_ADC_IsEnabled>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d105      	bne.n	8006dac <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	4619      	mov	r1, r3
 8006da6:	485a      	ldr	r0, [pc, #360]	; (8006f10 <HAL_ADC_Init+0x27c>)
 8006da8:	f7ff fd9a 	bl	80068e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	7e5b      	ldrb	r3, [r3, #25]
 8006db0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006db6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006dbc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006dc2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006dca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d106      	bne.n	8006de8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	3b01      	subs	r3, #1
 8006de0:	045b      	lsls	r3, r3, #17
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d009      	beq.n	8006e04 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	4b42      	ldr	r3, [pc, #264]	; (8006f14 <HAL_ADC_Init+0x280>)
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	6812      	ldr	r2, [r2, #0]
 8006e12:	69b9      	ldr	r1, [r7, #24]
 8006e14:	430b      	orrs	r3, r1
 8006e16:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7ff ff25 	bl	8006c6c <LL_ADC_INJ_IsConversionOngoing>
 8006e22:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d13d      	bne.n	8006ea6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d13a      	bne.n	8006ea6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006e34:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e3c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e4c:	f023 0302 	bic.w	r3, r3, #2
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	6812      	ldr	r2, [r2, #0]
 8006e54:	69b9      	ldr	r1, [r7, #24]
 8006e56:	430b      	orrs	r3, r1
 8006e58:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d118      	bne.n	8006e96 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e6e:	f023 0304 	bic.w	r3, r3, #4
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006e7a:	4311      	orrs	r1, r2
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006e80:	4311      	orrs	r1, r2
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006e86:	430a      	orrs	r2, r1
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f042 0201 	orr.w	r2, r2, #1
 8006e92:	611a      	str	r2, [r3, #16]
 8006e94:	e007      	b.n	8006ea6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691a      	ldr	r2, [r3, #16]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f022 0201 	bic.w	r2, r2, #1
 8006ea4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d10c      	bne.n	8006ec8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb4:	f023 010f 	bic.w	r1, r3, #15
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	1e5a      	subs	r2, r3, #1
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8006ec6:	e007      	b.n	8006ed8 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 020f 	bic.w	r2, r2, #15
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006edc:	f023 0303 	bic.w	r3, r3, #3
 8006ee0:	f043 0201 	orr.w	r2, r3, #1
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	655a      	str	r2, [r3, #84]	; 0x54
 8006ee8:	e007      	b.n	8006efa <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eee:	f043 0210 	orr.w	r2, r3, #16
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006efa:	7ffb      	ldrb	r3, [r7, #31]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3720      	adds	r7, #32
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	20000024 	.word	0x20000024
 8006f08:	053e2d63 	.word	0x053e2d63
 8006f0c:	50040000 	.word	0x50040000
 8006f10:	50040300 	.word	0x50040300
 8006f14:	fff0c007 	.word	0xfff0c007

08006f18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7ff fe8c 	bl	8006c46 <LL_ADC_REG_IsConversionOngoing>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d167      	bne.n	8007004 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d101      	bne.n	8006f42 <HAL_ADC_Start_DMA+0x2a>
 8006f3e:	2302      	movs	r3, #2
 8006f40:	e063      	b.n	800700a <HAL_ADC_Start_DMA+0xf2>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 fe1c 	bl	8007b88 <ADC_Enable>
 8006f50:	4603      	mov	r3, r0
 8006f52:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d14f      	bne.n	8006ffa <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006f62:	f023 0301 	bic.w	r3, r3, #1
 8006f66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d006      	beq.n	8006f88 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7e:	f023 0206 	bic.w	r2, r3, #6
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	659a      	str	r2, [r3, #88]	; 0x58
 8006f86:	e002      	b.n	8006f8e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f92:	4a20      	ldr	r2, [pc, #128]	; (8007014 <HAL_ADC_Start_DMA+0xfc>)
 8006f94:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9a:	4a1f      	ldr	r2, [pc, #124]	; (8007018 <HAL_ADC_Start_DMA+0x100>)
 8006f9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa2:	4a1e      	ldr	r2, [pc, #120]	; (800701c <HAL_ADC_Start_DMA+0x104>)
 8006fa4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	221c      	movs	r2, #28
 8006fac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f042 0210 	orr.w	r2, r2, #16
 8006fc4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f042 0201 	orr.w	r2, r2, #1
 8006fd4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3340      	adds	r3, #64	; 0x40
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f001 f8e5 	bl	80081b4 <HAL_DMA_Start_IT>
 8006fea:	4603      	mov	r3, r0
 8006fec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff fe13 	bl	8006c1e <LL_ADC_REG_StartConversion>
 8006ff8:	e006      	b.n	8007008 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007002:	e001      	b.n	8007008 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007004:	2302      	movs	r3, #2
 8007006:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007008:	7dfb      	ldrb	r3, [r7, #23]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	08007c95 	.word	0x08007c95
 8007018:	08007d6d 	.word	0x08007d6d
 800701c:	08007d89 	.word	0x08007d89

08007020 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007028:	2300      	movs	r3, #0
 800702a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d017      	beq.n	8007076 <HAL_ADC_IRQHandler+0x56>
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d012      	beq.n	8007076 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007054:	f003 0310 	and.w	r3, r3, #16
 8007058:	2b00      	cmp	r3, #0
 800705a:	d105      	bne.n	8007068 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007060:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fecf 	bl	8007e0c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2202      	movs	r2, #2
 8007074:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	2b00      	cmp	r3, #0
 800707e:	d004      	beq.n	800708a <HAL_ADC_IRQHandler+0x6a>
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f003 0304 	and.w	r3, r3, #4
 8007086:	2b00      	cmp	r3, #0
 8007088:	d109      	bne.n	800709e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007090:	2b00      	cmp	r3, #0
 8007092:	d05e      	beq.n	8007152 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f003 0308 	and.w	r3, r3, #8
 800709a:	2b00      	cmp	r3, #0
 800709c:	d059      	beq.n	8007152 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a2:	f003 0310 	and.w	r3, r3, #16
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d105      	bne.n	80070b6 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff fc99 	bl	80069f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d03e      	beq.n	8007144 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d135      	bne.n	8007144 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0308 	and.w	r3, r3, #8
 80070e2:	2b08      	cmp	r3, #8
 80070e4:	d12e      	bne.n	8007144 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff fdab 	bl	8006c46 <LL_ADC_REG_IsConversionOngoing>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d11a      	bne.n	800712c <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 020c 	bic.w	r2, r2, #12
 8007104:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d112      	bne.n	8007144 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007122:	f043 0201 	orr.w	r2, r3, #1
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	655a      	str	r2, [r3, #84]	; 0x54
 800712a:	e00b      	b.n	8007144 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007130:	f043 0210 	orr.w	r2, r3, #16
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713c:	f043 0201 	orr.w	r2, r3, #1
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7fa fa07 	bl	8001558 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	220c      	movs	r2, #12
 8007150:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	f003 0320 	and.w	r3, r3, #32
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <HAL_ADC_IRQHandler+0x146>
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b00      	cmp	r3, #0
 8007164:	d109      	bne.n	800717a <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800716c:	2b00      	cmp	r3, #0
 800716e:	d072      	beq.n	8007256 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007176:	2b00      	cmp	r3, #0
 8007178:	d06d      	beq.n	8007256 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717e:	f003 0310 	and.w	r3, r3, #16
 8007182:	2b00      	cmp	r3, #0
 8007184:	d105      	bne.n	8007192 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4618      	mov	r0, r3
 8007198:	f7ff fc6a 	bl	8006a70 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800719c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7ff fc25 	bl	80069f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80071a8:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d047      	beq.n	8007248 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <HAL_ADC_IRQHandler+0x1b2>
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d03f      	beq.n	8007248 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d13a      	bne.n	8007248 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071dc:	2b40      	cmp	r3, #64	; 0x40
 80071de:	d133      	bne.n	8007248 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d12e      	bne.n	8007248 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff fd3c 	bl	8006c6c <LL_ADC_INJ_IsConversionOngoing>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d11a      	bne.n	8007230 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007208:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721e:	2b00      	cmp	r3, #0
 8007220:	d112      	bne.n	8007248 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007226:	f043 0201 	orr.w	r2, r3, #1
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	655a      	str	r2, [r3, #84]	; 0x54
 800722e:	e00b      	b.n	8007248 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007234:	f043 0210 	orr.w	r2, r3, #16
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007240:	f043 0201 	orr.w	r2, r3, #1
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fdb7 	bl	8007dbc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2260      	movs	r2, #96	; 0x60
 8007254:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800725c:	2b00      	cmp	r3, #0
 800725e:	d011      	beq.n	8007284 <HAL_ADC_IRQHandler+0x264>
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00c      	beq.n	8007284 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f890 	bl	800739c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2280      	movs	r2, #128	; 0x80
 8007282:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728a:	2b00      	cmp	r3, #0
 800728c:	d012      	beq.n	80072b4 <HAL_ADC_IRQHandler+0x294>
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00d      	beq.n	80072b4 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fd9d 	bl	8007de4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d012      	beq.n	80072e4 <HAL_ADC_IRQHandler+0x2c4>
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00d      	beq.n	80072e4 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fd8f 	bl	8007df8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	f003 0310 	and.w	r3, r3, #16
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d02a      	beq.n	8007344 <HAL_ADC_IRQHandler+0x324>
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f003 0310 	and.w	r3, r3, #16
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d025      	beq.n	8007344 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d102      	bne.n	8007306 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8007300:	2301      	movs	r3, #1
 8007302:	61fb      	str	r3, [r7, #28]
 8007304:	e008      	b.n	8007318 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8007314:	2301      	movs	r3, #1
 8007316:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d10e      	bne.n	800733c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007322:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800732e:	f043 0202 	orr.w	r2, r3, #2
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f83a 	bl	80073b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2210      	movs	r2, #16
 8007342:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800734a:	2b00      	cmp	r3, #0
 800734c:	d018      	beq.n	8007380 <HAL_ADC_IRQHandler+0x360>
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007354:	2b00      	cmp	r3, #0
 8007356:	d013      	beq.n	8007380 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007368:	f043 0208 	orr.w	r2, r3, #8
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007378:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fd28 	bl	8007dd0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007380:	bf00      	nop
 8007382:	3720      	adds	r7, #32
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b0b6      	sub	sp, #216	; 0xd8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80073d4:	2300      	movs	r3, #0
 80073d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d101      	bne.n	80073e6 <HAL_ADC_ConfigChannel+0x22>
 80073e2:	2302      	movs	r3, #2
 80073e4:	e3bb      	b.n	8007b5e <HAL_ADC_ConfigChannel+0x79a>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7ff fc27 	bl	8006c46 <LL_ADC_REG_IsConversionOngoing>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f040 83a0 	bne.w	8007b40 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	2b05      	cmp	r3, #5
 800740e:	d824      	bhi.n	800745a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	3b02      	subs	r3, #2
 8007416:	2b03      	cmp	r3, #3
 8007418:	d81b      	bhi.n	8007452 <HAL_ADC_ConfigChannel+0x8e>
 800741a:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <HAL_ADC_ConfigChannel+0x5c>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007431 	.word	0x08007431
 8007424:	08007439 	.word	0x08007439
 8007428:	08007441 	.word	0x08007441
 800742c:	08007449 	.word	0x08007449
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8007430:	230c      	movs	r3, #12
 8007432:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8007436:	e010      	b.n	800745a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8007438:	2312      	movs	r3, #18
 800743a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800743e:	e00c      	b.n	800745a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8007440:	2318      	movs	r3, #24
 8007442:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8007446:	e008      	b.n	800745a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8007448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800744c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8007450:	e003      	b.n	800745a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8007452:	2306      	movs	r3, #6
 8007454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8007458:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6818      	ldr	r0, [r3, #0]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007468:	f7ff fad6 	bl	8006a18 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff fbe8 	bl	8006c46 <LL_ADC_REG_IsConversionOngoing>
 8007476:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff fbf4 	bl	8006c6c <LL_ADC_INJ_IsConversionOngoing>
 8007484:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007488:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800748c:	2b00      	cmp	r3, #0
 800748e:	f040 81a4 	bne.w	80077da <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007492:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007496:	2b00      	cmp	r3, #0
 8007498:	f040 819f 	bne.w	80077da <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6818      	ldr	r0, [r3, #0]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	6819      	ldr	r1, [r3, #0]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	461a      	mov	r2, r3
 80074aa:	f7ff faf4 	bl	8006a96 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	695a      	ldr	r2, [r3, #20]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	08db      	lsrs	r3, r3, #3
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	fa02 f303 	lsl.w	r3, r2, r3
 80074c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d00a      	beq.n	80074e6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	6919      	ldr	r1, [r3, #16]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074e0:	f7ff fa32 	bl	8006948 <LL_ADC_SetOffset>
 80074e4:	e179      	b.n	80077da <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2100      	movs	r1, #0
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff fa4f 	bl	8006990 <LL_ADC_GetOffsetChannel>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10a      	bne.n	8007512 <HAL_ADC_ConfigChannel+0x14e>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2100      	movs	r1, #0
 8007502:	4618      	mov	r0, r3
 8007504:	f7ff fa44 	bl	8006990 <LL_ADC_GetOffsetChannel>
 8007508:	4603      	mov	r3, r0
 800750a:	0e9b      	lsrs	r3, r3, #26
 800750c:	f003 021f 	and.w	r2, r3, #31
 8007510:	e01e      	b.n	8007550 <HAL_ADC_ConfigChannel+0x18c>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2100      	movs	r1, #0
 8007518:	4618      	mov	r0, r3
 800751a:	f7ff fa39 	bl	8006990 <LL_ADC_GetOffsetChannel>
 800751e:	4603      	mov	r3, r0
 8007520:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007524:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007528:	fa93 f3a3 	rbit	r3, r3
 800752c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007530:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007534:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007538:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800753c:	2b00      	cmp	r3, #0
 800753e:	d101      	bne.n	8007544 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8007540:	2320      	movs	r3, #32
 8007542:	e004      	b.n	800754e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8007544:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007548:	fab3 f383 	clz	r3, r3
 800754c:	b2db      	uxtb	r3, r3
 800754e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007558:	2b00      	cmp	r3, #0
 800755a:	d105      	bne.n	8007568 <HAL_ADC_ConfigChannel+0x1a4>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	0e9b      	lsrs	r3, r3, #26
 8007562:	f003 031f 	and.w	r3, r3, #31
 8007566:	e018      	b.n	800759a <HAL_ADC_ConfigChannel+0x1d6>
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007574:	fa93 f3a3 	rbit	r3, r3
 8007578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800757c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8007584:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800758c:	2320      	movs	r3, #32
 800758e:	e004      	b.n	800759a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8007590:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007594:	fab3 f383 	clz	r3, r3
 8007598:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800759a:	429a      	cmp	r2, r3
 800759c:	d106      	bne.n	80075ac <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2200      	movs	r2, #0
 80075a4:	2100      	movs	r1, #0
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7ff fa08 	bl	80069bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2101      	movs	r1, #1
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff f9ec 	bl	8006990 <LL_ADC_GetOffsetChannel>
 80075b8:	4603      	mov	r3, r0
 80075ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10a      	bne.n	80075d8 <HAL_ADC_ConfigChannel+0x214>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2101      	movs	r1, #1
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff f9e1 	bl	8006990 <LL_ADC_GetOffsetChannel>
 80075ce:	4603      	mov	r3, r0
 80075d0:	0e9b      	lsrs	r3, r3, #26
 80075d2:	f003 021f 	and.w	r2, r3, #31
 80075d6:	e01e      	b.n	8007616 <HAL_ADC_ConfigChannel+0x252>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2101      	movs	r1, #1
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff f9d6 	bl	8006990 <LL_ADC_GetOffsetChannel>
 80075e4:	4603      	mov	r3, r0
 80075e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075ee:	fa93 f3a3 	rbit	r3, r3
 80075f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80075f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80075fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8007606:	2320      	movs	r3, #32
 8007608:	e004      	b.n	8007614 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800760a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800760e:	fab3 f383 	clz	r3, r3
 8007612:	b2db      	uxtb	r3, r3
 8007614:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800761e:	2b00      	cmp	r3, #0
 8007620:	d105      	bne.n	800762e <HAL_ADC_ConfigChannel+0x26a>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	0e9b      	lsrs	r3, r3, #26
 8007628:	f003 031f 	and.w	r3, r3, #31
 800762c:	e018      	b.n	8007660 <HAL_ADC_ConfigChannel+0x29c>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007636:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800763a:	fa93 f3a3 	rbit	r3, r3
 800763e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8007642:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007646:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800764a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8007652:	2320      	movs	r3, #32
 8007654:	e004      	b.n	8007660 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8007656:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800765a:	fab3 f383 	clz	r3, r3
 800765e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007660:	429a      	cmp	r2, r3
 8007662:	d106      	bne.n	8007672 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2200      	movs	r2, #0
 800766a:	2101      	movs	r1, #1
 800766c:	4618      	mov	r0, r3
 800766e:	f7ff f9a5 	bl	80069bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2102      	movs	r1, #2
 8007678:	4618      	mov	r0, r3
 800767a:	f7ff f989 	bl	8006990 <LL_ADC_GetOffsetChannel>
 800767e:	4603      	mov	r3, r0
 8007680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10a      	bne.n	800769e <HAL_ADC_ConfigChannel+0x2da>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2102      	movs	r1, #2
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff f97e 	bl	8006990 <LL_ADC_GetOffsetChannel>
 8007694:	4603      	mov	r3, r0
 8007696:	0e9b      	lsrs	r3, r3, #26
 8007698:	f003 021f 	and.w	r2, r3, #31
 800769c:	e01e      	b.n	80076dc <HAL_ADC_ConfigChannel+0x318>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2102      	movs	r1, #2
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7ff f973 	bl	8006990 <LL_ADC_GetOffsetChannel>
 80076aa:	4603      	mov	r3, r0
 80076ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076b4:	fa93 f3a3 	rbit	r3, r3
 80076b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80076bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80076c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80076cc:	2320      	movs	r3, #32
 80076ce:	e004      	b.n	80076da <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80076d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076d4:	fab3 f383 	clz	r3, r3
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d105      	bne.n	80076f4 <HAL_ADC_ConfigChannel+0x330>
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	0e9b      	lsrs	r3, r3, #26
 80076ee:	f003 031f 	and.w	r3, r3, #31
 80076f2:	e014      	b.n	800771e <HAL_ADC_ConfigChannel+0x35a>
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076fc:	fa93 f3a3 	rbit	r3, r3
 8007700:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8007702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8007708:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8007710:	2320      	movs	r3, #32
 8007712:	e004      	b.n	800771e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8007714:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007718:	fab3 f383 	clz	r3, r3
 800771c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800771e:	429a      	cmp	r2, r3
 8007720:	d106      	bne.n	8007730 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2200      	movs	r2, #0
 8007728:	2102      	movs	r1, #2
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff f946 	bl	80069bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2103      	movs	r1, #3
 8007736:	4618      	mov	r0, r3
 8007738:	f7ff f92a 	bl	8006990 <LL_ADC_GetOffsetChannel>
 800773c:	4603      	mov	r3, r0
 800773e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10a      	bne.n	800775c <HAL_ADC_ConfigChannel+0x398>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2103      	movs	r1, #3
 800774c:	4618      	mov	r0, r3
 800774e:	f7ff f91f 	bl	8006990 <LL_ADC_GetOffsetChannel>
 8007752:	4603      	mov	r3, r0
 8007754:	0e9b      	lsrs	r3, r3, #26
 8007756:	f003 021f 	and.w	r2, r3, #31
 800775a:	e017      	b.n	800778c <HAL_ADC_ConfigChannel+0x3c8>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2103      	movs	r1, #3
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff f914 	bl	8006990 <LL_ADC_GetOffsetChannel>
 8007768:	4603      	mov	r3, r0
 800776a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800776c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800776e:	fa93 f3a3 	rbit	r3, r3
 8007772:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007776:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8007778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800777e:	2320      	movs	r3, #32
 8007780:	e003      	b.n	800778a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8007782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007784:	fab3 f383 	clz	r3, r3
 8007788:	b2db      	uxtb	r3, r3
 800778a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007794:	2b00      	cmp	r3, #0
 8007796:	d105      	bne.n	80077a4 <HAL_ADC_ConfigChannel+0x3e0>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	0e9b      	lsrs	r3, r3, #26
 800779e:	f003 031f 	and.w	r3, r3, #31
 80077a2:	e011      	b.n	80077c8 <HAL_ADC_ConfigChannel+0x404>
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ac:	fa93 f3a3 	rbit	r3, r3
 80077b0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80077b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077b4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80077b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80077bc:	2320      	movs	r3, #32
 80077be:	e003      	b.n	80077c8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80077c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077c2:	fab3 f383 	clz	r3, r3
 80077c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d106      	bne.n	80077da <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2200      	movs	r2, #0
 80077d2:	2103      	movs	r1, #3
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7ff f8f1 	bl	80069bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4618      	mov	r0, r3
 80077e0:	f7ff fa0a 	bl	8006bf8 <LL_ADC_IsEnabled>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f040 8140 	bne.w	8007a6c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6818      	ldr	r0, [r3, #0]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	6819      	ldr	r1, [r3, #0]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	461a      	mov	r2, r3
 80077fa:	f7ff f977 	bl	8006aec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	4a8f      	ldr	r2, [pc, #572]	; (8007a40 <HAL_ADC_ConfigChannel+0x67c>)
 8007804:	4293      	cmp	r3, r2
 8007806:	f040 8131 	bne.w	8007a6c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10b      	bne.n	8007832 <HAL_ADC_ConfigChannel+0x46e>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	0e9b      	lsrs	r3, r3, #26
 8007820:	3301      	adds	r3, #1
 8007822:	f003 031f 	and.w	r3, r3, #31
 8007826:	2b09      	cmp	r3, #9
 8007828:	bf94      	ite	ls
 800782a:	2301      	movls	r3, #1
 800782c:	2300      	movhi	r3, #0
 800782e:	b2db      	uxtb	r3, r3
 8007830:	e019      	b.n	8007866 <HAL_ADC_ConfigChannel+0x4a2>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800783a:	fa93 f3a3 	rbit	r3, r3
 800783e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8007840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007842:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8007844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800784a:	2320      	movs	r3, #32
 800784c:	e003      	b.n	8007856 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800784e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007850:	fab3 f383 	clz	r3, r3
 8007854:	b2db      	uxtb	r3, r3
 8007856:	3301      	adds	r3, #1
 8007858:	f003 031f 	and.w	r3, r3, #31
 800785c:	2b09      	cmp	r3, #9
 800785e:	bf94      	ite	ls
 8007860:	2301      	movls	r3, #1
 8007862:	2300      	movhi	r3, #0
 8007864:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007866:	2b00      	cmp	r3, #0
 8007868:	d079      	beq.n	800795e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007872:	2b00      	cmp	r3, #0
 8007874:	d107      	bne.n	8007886 <HAL_ADC_ConfigChannel+0x4c2>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	0e9b      	lsrs	r3, r3, #26
 800787c:	3301      	adds	r3, #1
 800787e:	069b      	lsls	r3, r3, #26
 8007880:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007884:	e015      	b.n	80078b2 <HAL_ADC_ConfigChannel+0x4ee>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800788c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800788e:	fa93 f3a3 	rbit	r3, r3
 8007892:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8007894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007896:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8007898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800789e:	2320      	movs	r3, #32
 80078a0:	e003      	b.n	80078aa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80078a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078a4:	fab3 f383 	clz	r3, r3
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	3301      	adds	r3, #1
 80078ac:	069b      	lsls	r3, r3, #26
 80078ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d109      	bne.n	80078d2 <HAL_ADC_ConfigChannel+0x50e>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	0e9b      	lsrs	r3, r3, #26
 80078c4:	3301      	adds	r3, #1
 80078c6:	f003 031f 	and.w	r3, r3, #31
 80078ca:	2101      	movs	r1, #1
 80078cc:	fa01 f303 	lsl.w	r3, r1, r3
 80078d0:	e017      	b.n	8007902 <HAL_ADC_ConfigChannel+0x53e>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078da:	fa93 f3a3 	rbit	r3, r3
 80078de:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80078e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80078e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80078ea:	2320      	movs	r3, #32
 80078ec:	e003      	b.n	80078f6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80078ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078f0:	fab3 f383 	clz	r3, r3
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	3301      	adds	r3, #1
 80078f8:	f003 031f 	and.w	r3, r3, #31
 80078fc:	2101      	movs	r1, #1
 80078fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007902:	ea42 0103 	orr.w	r1, r2, r3
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10a      	bne.n	8007928 <HAL_ADC_ConfigChannel+0x564>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	0e9b      	lsrs	r3, r3, #26
 8007918:	3301      	adds	r3, #1
 800791a:	f003 021f 	and.w	r2, r3, #31
 800791e:	4613      	mov	r3, r2
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	4413      	add	r3, r2
 8007924:	051b      	lsls	r3, r3, #20
 8007926:	e018      	b.n	800795a <HAL_ADC_ConfigChannel+0x596>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800792e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007930:	fa93 f3a3 	rbit	r3, r3
 8007934:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8007936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007938:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8007940:	2320      	movs	r3, #32
 8007942:	e003      	b.n	800794c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8007944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007946:	fab3 f383 	clz	r3, r3
 800794a:	b2db      	uxtb	r3, r3
 800794c:	3301      	adds	r3, #1
 800794e:	f003 021f 	and.w	r2, r3, #31
 8007952:	4613      	mov	r3, r2
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	4413      	add	r3, r2
 8007958:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800795a:	430b      	orrs	r3, r1
 800795c:	e081      	b.n	8007a62 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007966:	2b00      	cmp	r3, #0
 8007968:	d107      	bne.n	800797a <HAL_ADC_ConfigChannel+0x5b6>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	0e9b      	lsrs	r3, r3, #26
 8007970:	3301      	adds	r3, #1
 8007972:	069b      	lsls	r3, r3, #26
 8007974:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007978:	e015      	b.n	80079a6 <HAL_ADC_ConfigChannel+0x5e2>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	fa93 f3a3 	rbit	r3, r3
 8007986:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800798c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8007992:	2320      	movs	r3, #32
 8007994:	e003      	b.n	800799e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	fab3 f383 	clz	r3, r3
 800799c:	b2db      	uxtb	r3, r3
 800799e:	3301      	adds	r3, #1
 80079a0:	069b      	lsls	r3, r3, #26
 80079a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d109      	bne.n	80079c6 <HAL_ADC_ConfigChannel+0x602>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	0e9b      	lsrs	r3, r3, #26
 80079b8:	3301      	adds	r3, #1
 80079ba:	f003 031f 	and.w	r3, r3, #31
 80079be:	2101      	movs	r1, #1
 80079c0:	fa01 f303 	lsl.w	r3, r1, r3
 80079c4:	e017      	b.n	80079f6 <HAL_ADC_ConfigChannel+0x632>
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	fa93 f3a3 	rbit	r3, r3
 80079d2:	61bb      	str	r3, [r7, #24]
  return result;
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80079de:	2320      	movs	r3, #32
 80079e0:	e003      	b.n	80079ea <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	fab3 f383 	clz	r3, r3
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	3301      	adds	r3, #1
 80079ec:	f003 031f 	and.w	r3, r3, #31
 80079f0:	2101      	movs	r1, #1
 80079f2:	fa01 f303 	lsl.w	r3, r1, r3
 80079f6:	ea42 0103 	orr.w	r1, r2, r3
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10d      	bne.n	8007a22 <HAL_ADC_ConfigChannel+0x65e>
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	0e9b      	lsrs	r3, r3, #26
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	f003 021f 	and.w	r2, r3, #31
 8007a12:	4613      	mov	r3, r2
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	4413      	add	r3, r2
 8007a18:	3b1e      	subs	r3, #30
 8007a1a:	051b      	lsls	r3, r3, #20
 8007a1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007a20:	e01e      	b.n	8007a60 <HAL_ADC_ConfigChannel+0x69c>
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	fa93 f3a3 	rbit	r3, r3
 8007a2e:	60fb      	str	r3, [r7, #12]
  return result;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d104      	bne.n	8007a44 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8007a3a:	2320      	movs	r3, #32
 8007a3c:	e006      	b.n	8007a4c <HAL_ADC_ConfigChannel+0x688>
 8007a3e:	bf00      	nop
 8007a40:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	fab3 f383 	clz	r3, r3
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	f003 021f 	and.w	r2, r3, #31
 8007a52:	4613      	mov	r3, r2
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	4413      	add	r3, r2
 8007a58:	3b1e      	subs	r3, #30
 8007a5a:	051b      	lsls	r3, r3, #20
 8007a5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007a60:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007a66:	4619      	mov	r1, r3
 8007a68:	f7ff f815 	bl	8006a96 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	4b3d      	ldr	r3, [pc, #244]	; (8007b68 <HAL_ADC_ConfigChannel+0x7a4>)
 8007a72:	4013      	ands	r3, r2
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d06c      	beq.n	8007b52 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007a78:	483c      	ldr	r0, [pc, #240]	; (8007b6c <HAL_ADC_ConfigChannel+0x7a8>)
 8007a7a:	f7fe ff57 	bl	800692c <LL_ADC_GetCommonPathInternalCh>
 8007a7e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a3a      	ldr	r2, [pc, #232]	; (8007b70 <HAL_ADC_ConfigChannel+0x7ac>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d127      	bne.n	8007adc <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007a8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d121      	bne.n	8007adc <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a35      	ldr	r2, [pc, #212]	; (8007b74 <HAL_ADC_ConfigChannel+0x7b0>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d157      	bne.n	8007b52 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007aa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007aa6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007aaa:	4619      	mov	r1, r3
 8007aac:	482f      	ldr	r0, [pc, #188]	; (8007b6c <HAL_ADC_ConfigChannel+0x7a8>)
 8007aae:	f7fe ff2a 	bl	8006906 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007ab2:	4b31      	ldr	r3, [pc, #196]	; (8007b78 <HAL_ADC_ConfigChannel+0x7b4>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	099b      	lsrs	r3, r3, #6
 8007ab8:	4a30      	ldr	r2, [pc, #192]	; (8007b7c <HAL_ADC_ConfigChannel+0x7b8>)
 8007aba:	fba2 2303 	umull	r2, r3, r2, r3
 8007abe:	099b      	lsrs	r3, r3, #6
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	005b      	lsls	r3, r3, #1
 8007ac6:	4413      	add	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007acc:	e002      	b.n	8007ad4 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1f9      	bne.n	8007ace <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007ada:	e03a      	b.n	8007b52 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a27      	ldr	r2, [pc, #156]	; (8007b80 <HAL_ADC_ConfigChannel+0x7bc>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d113      	bne.n	8007b0e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007ae6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007aea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10d      	bne.n	8007b0e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a1f      	ldr	r2, [pc, #124]	; (8007b74 <HAL_ADC_ConfigChannel+0x7b0>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d12a      	bne.n	8007b52 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007afc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b04:	4619      	mov	r1, r3
 8007b06:	4819      	ldr	r0, [pc, #100]	; (8007b6c <HAL_ADC_ConfigChannel+0x7a8>)
 8007b08:	f7fe fefd 	bl	8006906 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007b0c:	e021      	b.n	8007b52 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a1c      	ldr	r2, [pc, #112]	; (8007b84 <HAL_ADC_ConfigChannel+0x7c0>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d11c      	bne.n	8007b52 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007b18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d116      	bne.n	8007b52 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a12      	ldr	r2, [pc, #72]	; (8007b74 <HAL_ADC_ConfigChannel+0x7b0>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d111      	bne.n	8007b52 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007b2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b36:	4619      	mov	r1, r3
 8007b38:	480c      	ldr	r0, [pc, #48]	; (8007b6c <HAL_ADC_ConfigChannel+0x7a8>)
 8007b3a:	f7fe fee4 	bl	8006906 <LL_ADC_SetCommonPathInternalCh>
 8007b3e:	e008      	b.n	8007b52 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b44:	f043 0220 	orr.w	r2, r3, #32
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007b5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	37d8      	adds	r7, #216	; 0xd8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	80080000 	.word	0x80080000
 8007b6c:	50040300 	.word	0x50040300
 8007b70:	c7520000 	.word	0xc7520000
 8007b74:	50040000 	.word	0x50040000
 8007b78:	20000024 	.word	0x20000024
 8007b7c:	053e2d63 	.word	0x053e2d63
 8007b80:	cb840000 	.word	0xcb840000
 8007b84:	80000001 	.word	0x80000001

08007b88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff f82d 	bl	8006bf8 <LL_ADC_IsEnabled>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d169      	bne.n	8007c78 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	4b36      	ldr	r3, [pc, #216]	; (8007c84 <ADC_Enable+0xfc>)
 8007bac:	4013      	ands	r3, r2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00d      	beq.n	8007bce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb6:	f043 0210 	orr.w	r2, r3, #16
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc2:	f043 0201 	orr.w	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e055      	b.n	8007c7a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fe fffc 	bl	8006bd0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007bd8:	482b      	ldr	r0, [pc, #172]	; (8007c88 <ADC_Enable+0x100>)
 8007bda:	f7fe fea7 	bl	800692c <LL_ADC_GetCommonPathInternalCh>
 8007bde:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007be0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d013      	beq.n	8007c10 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007be8:	4b28      	ldr	r3, [pc, #160]	; (8007c8c <ADC_Enable+0x104>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	099b      	lsrs	r3, r3, #6
 8007bee:	4a28      	ldr	r2, [pc, #160]	; (8007c90 <ADC_Enable+0x108>)
 8007bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf4:	099b      	lsrs	r3, r3, #6
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	005b      	lsls	r3, r3, #1
 8007bfc:	4413      	add	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007c02:	e002      	b.n	8007c0a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1f9      	bne.n	8007c04 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007c10:	f7fe fe36 	bl	8006880 <HAL_GetTick>
 8007c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007c16:	e028      	b.n	8007c6a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fe ffeb 	bl	8006bf8 <LL_ADC_IsEnabled>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d104      	bne.n	8007c32 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fe ffcf 	bl	8006bd0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007c32:	f7fe fe25 	bl	8006880 <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d914      	bls.n	8007c6a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d00d      	beq.n	8007c6a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c52:	f043 0210 	orr.w	r2, r3, #16
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c5e:	f043 0201 	orr.w	r2, r3, #1
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e007      	b.n	8007c7a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d1cf      	bne.n	8007c18 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	8000003f 	.word	0x8000003f
 8007c88:	50040300 	.word	0x50040300
 8007c8c:	20000024 	.word	0x20000024
 8007c90:	053e2d63 	.word	0x053e2d63

08007c94 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d14b      	bne.n	8007d46 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0308 	and.w	r3, r3, #8
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d021      	beq.n	8007d0c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fe fe90 	bl	80069f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d032      	beq.n	8007d3e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d12b      	bne.n	8007d3e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d11f      	bne.n	8007d3e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d02:	f043 0201 	orr.w	r2, r3, #1
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	655a      	str	r2, [r3, #84]	; 0x54
 8007d0a:	e018      	b.n	8007d3e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d111      	bne.n	8007d3e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d105      	bne.n	8007d3e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d36:	f043 0201 	orr.w	r2, r3, #1
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f7f9 fc0a 	bl	8001558 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007d44:	e00e      	b.n	8007d64 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4a:	f003 0310 	and.w	r3, r3, #16
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f7ff fb2c 	bl	80073b0 <HAL_ADC_ErrorCallback>
}
 8007d58:	e004      	b.n	8007d64 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	4798      	blx	r3
}
 8007d64:	bf00      	nop
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d78:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f7ff fb04 	bl	8007388 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d80:	bf00      	nop
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d94:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da6:	f043 0204 	orr.w	r2, r3, #4
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f7ff fafe 	bl	80073b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007db4:	bf00      	nop
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f003 0307 	and.w	r3, r3, #7
 8007e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e30:	4b0c      	ldr	r3, [pc, #48]	; (8007e64 <__NVIC_SetPriorityGrouping+0x44>)
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e52:	4a04      	ldr	r2, [pc, #16]	; (8007e64 <__NVIC_SetPriorityGrouping+0x44>)
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	60d3      	str	r3, [r2, #12]
}
 8007e58:	bf00      	nop
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	e000ed00 	.word	0xe000ed00

08007e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e6c:	4b04      	ldr	r3, [pc, #16]	; (8007e80 <__NVIC_GetPriorityGrouping+0x18>)
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	0a1b      	lsrs	r3, r3, #8
 8007e72:	f003 0307 	and.w	r3, r3, #7
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	e000ed00 	.word	0xe000ed00

08007e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	db0b      	blt.n	8007eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e96:	79fb      	ldrb	r3, [r7, #7]
 8007e98:	f003 021f 	and.w	r2, r3, #31
 8007e9c:	4907      	ldr	r1, [pc, #28]	; (8007ebc <__NVIC_EnableIRQ+0x38>)
 8007e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ea2:	095b      	lsrs	r3, r3, #5
 8007ea4:	2001      	movs	r0, #1
 8007ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8007eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007eae:	bf00      	nop
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	e000e100 	.word	0xe000e100

08007ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	6039      	str	r1, [r7, #0]
 8007eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	db0a      	blt.n	8007eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	490c      	ldr	r1, [pc, #48]	; (8007f0c <__NVIC_SetPriority+0x4c>)
 8007eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ede:	0112      	lsls	r2, r2, #4
 8007ee0:	b2d2      	uxtb	r2, r2
 8007ee2:	440b      	add	r3, r1
 8007ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ee8:	e00a      	b.n	8007f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	4908      	ldr	r1, [pc, #32]	; (8007f10 <__NVIC_SetPriority+0x50>)
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	f003 030f 	and.w	r3, r3, #15
 8007ef6:	3b04      	subs	r3, #4
 8007ef8:	0112      	lsls	r2, r2, #4
 8007efa:	b2d2      	uxtb	r2, r2
 8007efc:	440b      	add	r3, r1
 8007efe:	761a      	strb	r2, [r3, #24]
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	e000e100 	.word	0xe000e100
 8007f10:	e000ed00 	.word	0xe000ed00

08007f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b089      	sub	sp, #36	; 0x24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f003 0307 	and.w	r3, r3, #7
 8007f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	f1c3 0307 	rsb	r3, r3, #7
 8007f2e:	2b04      	cmp	r3, #4
 8007f30:	bf28      	it	cs
 8007f32:	2304      	movcs	r3, #4
 8007f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	3304      	adds	r3, #4
 8007f3a:	2b06      	cmp	r3, #6
 8007f3c:	d902      	bls.n	8007f44 <NVIC_EncodePriority+0x30>
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	3b03      	subs	r3, #3
 8007f42:	e000      	b.n	8007f46 <NVIC_EncodePriority+0x32>
 8007f44:	2300      	movs	r3, #0
 8007f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f48:	f04f 32ff 	mov.w	r2, #4294967295
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f52:	43da      	mvns	r2, r3
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	401a      	ands	r2, r3
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	fa01 f303 	lsl.w	r3, r1, r3
 8007f66:	43d9      	mvns	r1, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f6c:	4313      	orrs	r3, r2
         );
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3724      	adds	r7, #36	; 0x24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
	...

08007f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	3b01      	subs	r3, #1
 8007f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f8c:	d301      	bcc.n	8007f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e00f      	b.n	8007fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f92:	4a0a      	ldr	r2, [pc, #40]	; (8007fbc <SysTick_Config+0x40>)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3b01      	subs	r3, #1
 8007f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f9a:	210f      	movs	r1, #15
 8007f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa0:	f7ff ff8e 	bl	8007ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fa4:	4b05      	ldr	r3, [pc, #20]	; (8007fbc <SysTick_Config+0x40>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007faa:	4b04      	ldr	r3, [pc, #16]	; (8007fbc <SysTick_Config+0x40>)
 8007fac:	2207      	movs	r2, #7
 8007fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	e000e010 	.word	0xe000e010

08007fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff ff29 	bl	8007e20 <__NVIC_SetPriorityGrouping>
}
 8007fce:	bf00      	nop
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b086      	sub	sp, #24
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	4603      	mov	r3, r0
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	607a      	str	r2, [r7, #4]
 8007fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007fe8:	f7ff ff3e 	bl	8007e68 <__NVIC_GetPriorityGrouping>
 8007fec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	68b9      	ldr	r1, [r7, #8]
 8007ff2:	6978      	ldr	r0, [r7, #20]
 8007ff4:	f7ff ff8e 	bl	8007f14 <NVIC_EncodePriority>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ffe:	4611      	mov	r1, r2
 8008000:	4618      	mov	r0, r3
 8008002:	f7ff ff5d 	bl	8007ec0 <__NVIC_SetPriority>
}
 8008006:	bf00      	nop
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	4603      	mov	r3, r0
 8008016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800801c:	4618      	mov	r0, r3
 800801e:	f7ff ff31 	bl	8007e84 <__NVIC_EnableIRQ>
}
 8008022:	bf00      	nop
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b082      	sub	sp, #8
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7ff ffa2 	bl	8007f7c <SysTick_Config>
 8008038:	4603      	mov	r3, r0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e098      	b.n	8008188 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	461a      	mov	r2, r3
 800805c:	4b4d      	ldr	r3, [pc, #308]	; (8008194 <HAL_DMA_Init+0x150>)
 800805e:	429a      	cmp	r2, r3
 8008060:	d80f      	bhi.n	8008082 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	4b4b      	ldr	r3, [pc, #300]	; (8008198 <HAL_DMA_Init+0x154>)
 800806a:	4413      	add	r3, r2
 800806c:	4a4b      	ldr	r2, [pc, #300]	; (800819c <HAL_DMA_Init+0x158>)
 800806e:	fba2 2303 	umull	r2, r3, r2, r3
 8008072:	091b      	lsrs	r3, r3, #4
 8008074:	009a      	lsls	r2, r3, #2
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a48      	ldr	r2, [pc, #288]	; (80081a0 <HAL_DMA_Init+0x15c>)
 800807e:	641a      	str	r2, [r3, #64]	; 0x40
 8008080:	e00e      	b.n	80080a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	4b46      	ldr	r3, [pc, #280]	; (80081a4 <HAL_DMA_Init+0x160>)
 800808a:	4413      	add	r3, r2
 800808c:	4a43      	ldr	r2, [pc, #268]	; (800819c <HAL_DMA_Init+0x158>)
 800808e:	fba2 2303 	umull	r2, r3, r2, r3
 8008092:	091b      	lsrs	r3, r3, #4
 8008094:	009a      	lsls	r2, r3, #2
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a42      	ldr	r2, [pc, #264]	; (80081a8 <HAL_DMA_Init+0x164>)
 800809e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2202      	movs	r2, #2
 80080a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80080b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80080c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080fa:	d039      	beq.n	8008170 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008100:	4a27      	ldr	r2, [pc, #156]	; (80081a0 <HAL_DMA_Init+0x15c>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d11a      	bne.n	800813c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008106:	4b29      	ldr	r3, [pc, #164]	; (80081ac <HAL_DMA_Init+0x168>)
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810e:	f003 031c 	and.w	r3, r3, #28
 8008112:	210f      	movs	r1, #15
 8008114:	fa01 f303 	lsl.w	r3, r1, r3
 8008118:	43db      	mvns	r3, r3
 800811a:	4924      	ldr	r1, [pc, #144]	; (80081ac <HAL_DMA_Init+0x168>)
 800811c:	4013      	ands	r3, r2
 800811e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008120:	4b22      	ldr	r3, [pc, #136]	; (80081ac <HAL_DMA_Init+0x168>)
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6859      	ldr	r1, [r3, #4]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800812c:	f003 031c 	and.w	r3, r3, #28
 8008130:	fa01 f303 	lsl.w	r3, r1, r3
 8008134:	491d      	ldr	r1, [pc, #116]	; (80081ac <HAL_DMA_Init+0x168>)
 8008136:	4313      	orrs	r3, r2
 8008138:	600b      	str	r3, [r1, #0]
 800813a:	e019      	b.n	8008170 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800813c:	4b1c      	ldr	r3, [pc, #112]	; (80081b0 <HAL_DMA_Init+0x16c>)
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008144:	f003 031c 	and.w	r3, r3, #28
 8008148:	210f      	movs	r1, #15
 800814a:	fa01 f303 	lsl.w	r3, r1, r3
 800814e:	43db      	mvns	r3, r3
 8008150:	4917      	ldr	r1, [pc, #92]	; (80081b0 <HAL_DMA_Init+0x16c>)
 8008152:	4013      	ands	r3, r2
 8008154:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008156:	4b16      	ldr	r3, [pc, #88]	; (80081b0 <HAL_DMA_Init+0x16c>)
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6859      	ldr	r1, [r3, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008162:	f003 031c 	and.w	r3, r3, #28
 8008166:	fa01 f303 	lsl.w	r3, r1, r3
 800816a:	4911      	ldr	r1, [pc, #68]	; (80081b0 <HAL_DMA_Init+0x16c>)
 800816c:	4313      	orrs	r3, r2
 800816e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr
 8008194:	40020407 	.word	0x40020407
 8008198:	bffdfff8 	.word	0xbffdfff8
 800819c:	cccccccd 	.word	0xcccccccd
 80081a0:	40020000 	.word	0x40020000
 80081a4:	bffdfbf8 	.word	0xbffdfbf8
 80081a8:	40020400 	.word	0x40020400
 80081ac:	400200a8 	.word	0x400200a8
 80081b0:	400204a8 	.word	0x400204a8

080081b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <HAL_DMA_Start_IT+0x20>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e04b      	b.n	800826c <HAL_DMA_Start_IT+0xb8>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d13a      	bne.n	800825e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f022 0201 	bic.w	r2, r2, #1
 8008204:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	68b9      	ldr	r1, [r7, #8]
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 f96b 	bl	80084e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008216:	2b00      	cmp	r3, #0
 8008218:	d008      	beq.n	800822c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f042 020e 	orr.w	r2, r2, #14
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	e00f      	b.n	800824c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 0204 	bic.w	r2, r2, #4
 800823a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 020a 	orr.w	r2, r2, #10
 800824a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f042 0201 	orr.w	r2, r2, #1
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	e005      	b.n	800826a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008266:	2302      	movs	r3, #2
 8008268:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800826a:	7dfb      	ldrb	r3, [r7, #23]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b02      	cmp	r3, #2
 800828a:	d008      	beq.n	800829e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2204      	movs	r2, #4
 8008290:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e022      	b.n	80082e4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 020e 	bic.w	r2, r2, #14
 80082ac:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0201 	bic.w	r2, r2, #1
 80082bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c2:	f003 021c 	and.w	r2, r3, #28
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ca:	2101      	movs	r1, #1
 80082cc:	fa01 f202 	lsl.w	r2, r1, r2
 80082d0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008302:	b2db      	uxtb	r3, r3
 8008304:	2b02      	cmp	r3, #2
 8008306:	d005      	beq.n	8008314 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2204      	movs	r2, #4
 800830c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	73fb      	strb	r3, [r7, #15]
 8008312:	e029      	b.n	8008368 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 020e 	bic.w	r2, r2, #14
 8008322:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f022 0201 	bic.w	r2, r2, #1
 8008332:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008338:	f003 021c 	and.w	r2, r3, #28
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008340:	2101      	movs	r1, #1
 8008342:	fa01 f202 	lsl.w	r2, r1, r2
 8008346:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835c:	2b00      	cmp	r3, #0
 800835e:	d003      	beq.n	8008368 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	4798      	blx	r3
    }
  }
  return status;
 8008368:	7bfb      	ldrb	r3, [r7, #15]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b084      	sub	sp, #16
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800838e:	f003 031c 	and.w	r3, r3, #28
 8008392:	2204      	movs	r2, #4
 8008394:	409a      	lsls	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	4013      	ands	r3, r2
 800839a:	2b00      	cmp	r3, #0
 800839c:	d026      	beq.n	80083ec <HAL_DMA_IRQHandler+0x7a>
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	f003 0304 	and.w	r3, r3, #4
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d021      	beq.n	80083ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 0320 	and.w	r3, r3, #32
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d107      	bne.n	80083c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f022 0204 	bic.w	r2, r2, #4
 80083c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ca:	f003 021c 	and.w	r2, r3, #28
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	2104      	movs	r1, #4
 80083d4:	fa01 f202 	lsl.w	r2, r1, r2
 80083d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d071      	beq.n	80084c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80083ea:	e06c      	b.n	80084c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f0:	f003 031c 	and.w	r3, r3, #28
 80083f4:	2202      	movs	r2, #2
 80083f6:	409a      	lsls	r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4013      	ands	r3, r2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d02e      	beq.n	800845e <HAL_DMA_IRQHandler+0xec>
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d029      	beq.n	800845e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0320 	and.w	r3, r3, #32
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10b      	bne.n	8008430 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 020a 	bic.w	r2, r2, #10
 8008426:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008434:	f003 021c 	and.w	r2, r3, #28
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843c:	2102      	movs	r1, #2
 800843e:	fa01 f202 	lsl.w	r2, r1, r2
 8008442:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	2b00      	cmp	r3, #0
 8008452:	d038      	beq.n	80084c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800845c:	e033      	b.n	80084c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008462:	f003 031c 	and.w	r3, r3, #28
 8008466:	2208      	movs	r2, #8
 8008468:	409a      	lsls	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	4013      	ands	r3, r2
 800846e:	2b00      	cmp	r3, #0
 8008470:	d02a      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x156>
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	f003 0308 	and.w	r3, r3, #8
 8008478:	2b00      	cmp	r3, #0
 800847a:	d025      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 020e 	bic.w	r2, r2, #14
 800848a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008490:	f003 021c 	and.w	r2, r3, #28
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008498:	2101      	movs	r1, #1
 800849a:	fa01 f202 	lsl.w	r2, r1, r2
 800849e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d004      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80084c6:	bf00      	nop
 80084c8:	bf00      	nop
}
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80084dc:	4618      	mov	r0, r3
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
 80084f4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fa:	f003 021c 	and.w	r2, r3, #28
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008502:	2101      	movs	r1, #1
 8008504:	fa01 f202 	lsl.w	r2, r1, r2
 8008508:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	2b10      	cmp	r3, #16
 8008518:	d108      	bne.n	800852c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800852a:	e007      	b.n	800853c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	60da      	str	r2, [r3, #12]
}
 800853c:	bf00      	nop
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008548:	b480      	push	{r7}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008552:	2300      	movs	r3, #0
 8008554:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008556:	e148      	b.n	80087ea <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	2101      	movs	r1, #1
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	fa01 f303 	lsl.w	r3, r1, r3
 8008564:	4013      	ands	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 813a 	beq.w	80087e4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f003 0303 	and.w	r3, r3, #3
 8008578:	2b01      	cmp	r3, #1
 800857a:	d005      	beq.n	8008588 <HAL_GPIO_Init+0x40>
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f003 0303 	and.w	r3, r3, #3
 8008584:	2b02      	cmp	r3, #2
 8008586:	d130      	bne.n	80085ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	005b      	lsls	r3, r3, #1
 8008592:	2203      	movs	r2, #3
 8008594:	fa02 f303 	lsl.w	r3, r2, r3
 8008598:	43db      	mvns	r3, r3
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	4013      	ands	r3, r2
 800859e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	68da      	ldr	r2, [r3, #12]
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	005b      	lsls	r3, r3, #1
 80085a8:	fa02 f303 	lsl.w	r3, r2, r3
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80085be:	2201      	movs	r2, #1
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	fa02 f303 	lsl.w	r3, r2, r3
 80085c6:	43db      	mvns	r3, r3
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	4013      	ands	r3, r2
 80085cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	091b      	lsrs	r3, r3, #4
 80085d4:	f003 0201 	and.w	r2, r3, #1
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	fa02 f303 	lsl.w	r3, r2, r3
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d017      	beq.n	8008626 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	005b      	lsls	r3, r3, #1
 8008600:	2203      	movs	r2, #3
 8008602:	fa02 f303 	lsl.w	r3, r2, r3
 8008606:	43db      	mvns	r3, r3
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	4013      	ands	r3, r2
 800860c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	689a      	ldr	r2, [r3, #8]
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	005b      	lsls	r3, r3, #1
 8008616:	fa02 f303 	lsl.w	r3, r2, r3
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	4313      	orrs	r3, r2
 800861e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f003 0303 	and.w	r3, r3, #3
 800862e:	2b02      	cmp	r3, #2
 8008630:	d123      	bne.n	800867a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	08da      	lsrs	r2, r3, #3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3208      	adds	r2, #8
 800863a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800863e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f003 0307 	and.w	r3, r3, #7
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	220f      	movs	r2, #15
 800864a:	fa02 f303 	lsl.w	r3, r2, r3
 800864e:	43db      	mvns	r3, r3
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	4013      	ands	r3, r2
 8008654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	691a      	ldr	r2, [r3, #16]
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f003 0307 	and.w	r3, r3, #7
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	fa02 f303 	lsl.w	r3, r2, r3
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	4313      	orrs	r3, r2
 800866a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	08da      	lsrs	r2, r3, #3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	3208      	adds	r2, #8
 8008674:	6939      	ldr	r1, [r7, #16]
 8008676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	005b      	lsls	r3, r3, #1
 8008684:	2203      	movs	r2, #3
 8008686:	fa02 f303 	lsl.w	r3, r2, r3
 800868a:	43db      	mvns	r3, r3
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	4013      	ands	r3, r2
 8008690:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f003 0203 	and.w	r2, r3, #3
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	fa02 f303 	lsl.w	r3, r2, r3
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 8094 	beq.w	80087e4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086bc:	4b52      	ldr	r3, [pc, #328]	; (8008808 <HAL_GPIO_Init+0x2c0>)
 80086be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086c0:	4a51      	ldr	r2, [pc, #324]	; (8008808 <HAL_GPIO_Init+0x2c0>)
 80086c2:	f043 0301 	orr.w	r3, r3, #1
 80086c6:	6613      	str	r3, [r2, #96]	; 0x60
 80086c8:	4b4f      	ldr	r3, [pc, #316]	; (8008808 <HAL_GPIO_Init+0x2c0>)
 80086ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	60bb      	str	r3, [r7, #8]
 80086d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80086d4:	4a4d      	ldr	r2, [pc, #308]	; (800880c <HAL_GPIO_Init+0x2c4>)
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	089b      	lsrs	r3, r3, #2
 80086da:	3302      	adds	r3, #2
 80086dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f003 0303 	and.w	r3, r3, #3
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	220f      	movs	r2, #15
 80086ec:	fa02 f303 	lsl.w	r3, r2, r3
 80086f0:	43db      	mvns	r3, r3
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	4013      	ands	r3, r2
 80086f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80086fe:	d00d      	beq.n	800871c <HAL_GPIO_Init+0x1d4>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a43      	ldr	r2, [pc, #268]	; (8008810 <HAL_GPIO_Init+0x2c8>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d007      	beq.n	8008718 <HAL_GPIO_Init+0x1d0>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a42      	ldr	r2, [pc, #264]	; (8008814 <HAL_GPIO_Init+0x2cc>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d101      	bne.n	8008714 <HAL_GPIO_Init+0x1cc>
 8008710:	2302      	movs	r3, #2
 8008712:	e004      	b.n	800871e <HAL_GPIO_Init+0x1d6>
 8008714:	2307      	movs	r3, #7
 8008716:	e002      	b.n	800871e <HAL_GPIO_Init+0x1d6>
 8008718:	2301      	movs	r3, #1
 800871a:	e000      	b.n	800871e <HAL_GPIO_Init+0x1d6>
 800871c:	2300      	movs	r3, #0
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	f002 0203 	and.w	r2, r2, #3
 8008724:	0092      	lsls	r2, r2, #2
 8008726:	4093      	lsls	r3, r2
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	4313      	orrs	r3, r2
 800872c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800872e:	4937      	ldr	r1, [pc, #220]	; (800880c <HAL_GPIO_Init+0x2c4>)
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	089b      	lsrs	r3, r3, #2
 8008734:	3302      	adds	r3, #2
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800873c:	4b36      	ldr	r3, [pc, #216]	; (8008818 <HAL_GPIO_Init+0x2d0>)
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	43db      	mvns	r3, r3
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	4013      	ands	r3, r2
 800874a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d003      	beq.n	8008760 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	4313      	orrs	r3, r2
 800875e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008760:	4a2d      	ldr	r2, [pc, #180]	; (8008818 <HAL_GPIO_Init+0x2d0>)
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008766:	4b2c      	ldr	r3, [pc, #176]	; (8008818 <HAL_GPIO_Init+0x2d0>)
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	43db      	mvns	r3, r3
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	4013      	ands	r3, r2
 8008774:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d003      	beq.n	800878a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4313      	orrs	r3, r2
 8008788:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800878a:	4a23      	ldr	r2, [pc, #140]	; (8008818 <HAL_GPIO_Init+0x2d0>)
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008790:	4b21      	ldr	r3, [pc, #132]	; (8008818 <HAL_GPIO_Init+0x2d0>)
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	43db      	mvns	r3, r3
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	4013      	ands	r3, r2
 800879e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80087b4:	4a18      	ldr	r2, [pc, #96]	; (8008818 <HAL_GPIO_Init+0x2d0>)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80087ba:	4b17      	ldr	r3, [pc, #92]	; (8008818 <HAL_GPIO_Init+0x2d0>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	43db      	mvns	r3, r3
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	4013      	ands	r3, r2
 80087c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	4313      	orrs	r3, r2
 80087dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80087de:	4a0e      	ldr	r2, [pc, #56]	; (8008818 <HAL_GPIO_Init+0x2d0>)
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	3301      	adds	r3, #1
 80087e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	fa22 f303 	lsr.w	r3, r2, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f47f aeaf 	bne.w	8008558 <HAL_GPIO_Init+0x10>
  }
}
 80087fa:	bf00      	nop
 80087fc:	bf00      	nop
 80087fe:	371c      	adds	r7, #28
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr
 8008808:	40021000 	.word	0x40021000
 800880c:	40010000 	.word	0x40010000
 8008810:	48000400 	.word	0x48000400
 8008814:	48000800 	.word	0x48000800
 8008818:	40010400 	.word	0x40010400

0800881c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	460b      	mov	r3, r1
 8008826:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	691a      	ldr	r2, [r3, #16]
 800882c:	887b      	ldrh	r3, [r7, #2]
 800882e:	4013      	ands	r3, r2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008834:	2301      	movs	r3, #1
 8008836:	73fb      	strb	r3, [r7, #15]
 8008838:	e001      	b.n	800883e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800883a:	2300      	movs	r3, #0
 800883c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800883e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	807b      	strh	r3, [r7, #2]
 8008858:	4613      	mov	r3, r2
 800885a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800885c:	787b      	ldrb	r3, [r7, #1]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008862:	887a      	ldrh	r2, [r7, #2]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008868:	e002      	b.n	8008870 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800886a:	887a      	ldrh	r2, [r7, #2]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	4603      	mov	r3, r0
 8008884:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008886:	4b08      	ldr	r3, [pc, #32]	; (80088a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008888:	695a      	ldr	r2, [r3, #20]
 800888a:	88fb      	ldrh	r3, [r7, #6]
 800888c:	4013      	ands	r3, r2
 800888e:	2b00      	cmp	r3, #0
 8008890:	d006      	beq.n	80088a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008892:	4a05      	ldr	r2, [pc, #20]	; (80088a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008894:	88fb      	ldrh	r3, [r7, #6]
 8008896:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008898:	88fb      	ldrh	r3, [r7, #6]
 800889a:	4618      	mov	r0, r3
 800889c:	f7f9 f924 	bl	8001ae8 <HAL_GPIO_EXTI_Callback>
  }
}
 80088a0:	bf00      	nop
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	40010400 	.word	0x40010400

080088ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d101      	bne.n	80088be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e08d      	b.n	80089da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d106      	bne.n	80088d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7f9 f84a 	bl	800196c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2224      	movs	r2, #36	; 0x24
 80088dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f022 0201 	bic.w	r2, r2, #1
 80088ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80088fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	689a      	ldr	r2, [r3, #8]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800890c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d107      	bne.n	8008926 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	689a      	ldr	r2, [r3, #8]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008922:	609a      	str	r2, [r3, #8]
 8008924:	e006      	b.n	8008934 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	689a      	ldr	r2, [r3, #8]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008932:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	2b02      	cmp	r3, #2
 800893a:	d108      	bne.n	800894e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685a      	ldr	r2, [r3, #4]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800894a:	605a      	str	r2, [r3, #4]
 800894c:	e007      	b.n	800895e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800895c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	6812      	ldr	r2, [r2, #0]
 8008968:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800896c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008970:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68da      	ldr	r2, [r3, #12]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008980:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	691a      	ldr	r2, [r3, #16]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	430a      	orrs	r2, r1
 800899a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	69d9      	ldr	r1, [r3, #28]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a1a      	ldr	r2, [r3, #32]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	430a      	orrs	r2, r1
 80089aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f042 0201 	orr.w	r2, r2, #1
 80089ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2220      	movs	r2, #32
 80089c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
	...

080089e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b088      	sub	sp, #32
 80089e8:	af02      	add	r7, sp, #8
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	4608      	mov	r0, r1
 80089ee:	4611      	mov	r1, r2
 80089f0:	461a      	mov	r2, r3
 80089f2:	4603      	mov	r3, r0
 80089f4:	817b      	strh	r3, [r7, #10]
 80089f6:	460b      	mov	r3, r1
 80089f8:	813b      	strh	r3, [r7, #8]
 80089fa:	4613      	mov	r3, r2
 80089fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	2b20      	cmp	r3, #32
 8008a08:	f040 80f9 	bne.w	8008bfe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d002      	beq.n	8008a18 <HAL_I2C_Mem_Write+0x34>
 8008a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d105      	bne.n	8008a24 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e0ed      	b.n	8008c00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d101      	bne.n	8008a32 <HAL_I2C_Mem_Write+0x4e>
 8008a2e:	2302      	movs	r3, #2
 8008a30:	e0e6      	b.n	8008c00 <HAL_I2C_Mem_Write+0x21c>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a3a:	f7fd ff21 	bl	8006880 <HAL_GetTick>
 8008a3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	2319      	movs	r3, #25
 8008a46:	2201      	movs	r2, #1
 8008a48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 fac3 	bl	8008fd8 <I2C_WaitOnFlagUntilTimeout>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e0d1      	b.n	8008c00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2221      	movs	r2, #33	; 0x21
 8008a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2240      	movs	r2, #64	; 0x40
 8008a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6a3a      	ldr	r2, [r7, #32]
 8008a76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a84:	88f8      	ldrh	r0, [r7, #6]
 8008a86:	893a      	ldrh	r2, [r7, #8]
 8008a88:	8979      	ldrh	r1, [r7, #10]
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	4603      	mov	r3, r0
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 f9d3 	bl	8008e40 <I2C_RequestMemoryWrite>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d005      	beq.n	8008aac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e0a9      	b.n	8008c00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	2bff      	cmp	r3, #255	; 0xff
 8008ab4:	d90e      	bls.n	8008ad4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	22ff      	movs	r2, #255	; 0xff
 8008aba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	8979      	ldrh	r1, [r7, #10]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 fc3d 	bl	800934c <I2C_TransferConfig>
 8008ad2:	e00f      	b.n	8008af4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	8979      	ldrh	r1, [r7, #10]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 fc2c 	bl	800934c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008af4:	697a      	ldr	r2, [r7, #20]
 8008af6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 fabc 	bl	8009076 <I2C_WaitOnTXISFlagUntilTimeout>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e07b      	b.n	8008c00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	781a      	ldrb	r2, [r3, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	1c5a      	adds	r2, r3, #1
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	3b01      	subs	r3, #1
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b30:	3b01      	subs	r3, #1
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d034      	beq.n	8008bac <HAL_I2C_Mem_Write+0x1c8>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d130      	bne.n	8008bac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b50:	2200      	movs	r2, #0
 8008b52:	2180      	movs	r1, #128	; 0x80
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 fa3f 	bl	8008fd8 <I2C_WaitOnFlagUntilTimeout>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e04d      	b.n	8008c00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	2bff      	cmp	r3, #255	; 0xff
 8008b6c:	d90e      	bls.n	8008b8c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	22ff      	movs	r2, #255	; 0xff
 8008b72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	8979      	ldrh	r1, [r7, #10]
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f000 fbe1 	bl	800934c <I2C_TransferConfig>
 8008b8a:	e00f      	b.n	8008bac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	8979      	ldrh	r1, [r7, #10]
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f000 fbd0 	bl	800934c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d19e      	bne.n	8008af4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 faa2 	bl	8009104 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e01a      	b.n	8008c00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2220      	movs	r2, #32
 8008bd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6859      	ldr	r1, [r3, #4]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	4b0a      	ldr	r3, [pc, #40]	; (8008c08 <HAL_I2C_Mem_Write+0x224>)
 8008bde:	400b      	ands	r3, r1
 8008be0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2220      	movs	r2, #32
 8008be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	e000      	b.n	8008c00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008bfe:	2302      	movs	r3, #2
  }
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3718      	adds	r7, #24
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	fe00e800 	.word	0xfe00e800

08008c0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af02      	add	r7, sp, #8
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	4608      	mov	r0, r1
 8008c16:	4611      	mov	r1, r2
 8008c18:	461a      	mov	r2, r3
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	817b      	strh	r3, [r7, #10]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	813b      	strh	r3, [r7, #8]
 8008c22:	4613      	mov	r3, r2
 8008c24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b20      	cmp	r3, #32
 8008c30:	f040 80fd 	bne.w	8008e2e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c34:	6a3b      	ldr	r3, [r7, #32]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d002      	beq.n	8008c40 <HAL_I2C_Mem_Read+0x34>
 8008c3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d105      	bne.n	8008c4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e0f1      	b.n	8008e30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d101      	bne.n	8008c5a <HAL_I2C_Mem_Read+0x4e>
 8008c56:	2302      	movs	r3, #2
 8008c58:	e0ea      	b.n	8008e30 <HAL_I2C_Mem_Read+0x224>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008c62:	f7fd fe0d 	bl	8006880 <HAL_GetTick>
 8008c66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	2319      	movs	r3, #25
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 f9af 	bl	8008fd8 <I2C_WaitOnFlagUntilTimeout>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d001      	beq.n	8008c84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e0d5      	b.n	8008e30 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2222      	movs	r2, #34	; 0x22
 8008c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2240      	movs	r2, #64	; 0x40
 8008c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6a3a      	ldr	r2, [r7, #32]
 8008c9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008cac:	88f8      	ldrh	r0, [r7, #6]
 8008cae:	893a      	ldrh	r2, [r7, #8]
 8008cb0:	8979      	ldrh	r1, [r7, #10]
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	4603      	mov	r3, r0
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 f913 	bl	8008ee8 <I2C_RequestMemoryRead>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d005      	beq.n	8008cd4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e0ad      	b.n	8008e30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	2bff      	cmp	r3, #255	; 0xff
 8008cdc:	d90e      	bls.n	8008cfc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	22ff      	movs	r2, #255	; 0xff
 8008ce2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	8979      	ldrh	r1, [r7, #10]
 8008cec:	4b52      	ldr	r3, [pc, #328]	; (8008e38 <HAL_I2C_Mem_Read+0x22c>)
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f000 fb29 	bl	800934c <I2C_TransferConfig>
 8008cfa:	e00f      	b.n	8008d1c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	8979      	ldrh	r1, [r7, #10]
 8008d0e:	4b4a      	ldr	r3, [pc, #296]	; (8008e38 <HAL_I2C_Mem_Read+0x22c>)
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 fb18 	bl	800934c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d22:	2200      	movs	r2, #0
 8008d24:	2104      	movs	r1, #4
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f000 f956 	bl	8008fd8 <I2C_WaitOnFlagUntilTimeout>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e07c      	b.n	8008e30 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d40:	b2d2      	uxtb	r2, r2
 8008d42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	1c5a      	adds	r2, r3, #1
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d52:	3b01      	subs	r3, #1
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	3b01      	subs	r3, #1
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d034      	beq.n	8008ddc <HAL_I2C_Mem_Read+0x1d0>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d130      	bne.n	8008ddc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d80:	2200      	movs	r2, #0
 8008d82:	2180      	movs	r1, #128	; 0x80
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 f927 	bl	8008fd8 <I2C_WaitOnFlagUntilTimeout>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e04d      	b.n	8008e30 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	2bff      	cmp	r3, #255	; 0xff
 8008d9c:	d90e      	bls.n	8008dbc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	22ff      	movs	r2, #255	; 0xff
 8008da2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	8979      	ldrh	r1, [r7, #10]
 8008dac:	2300      	movs	r3, #0
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 fac9 	bl	800934c <I2C_TransferConfig>
 8008dba:	e00f      	b.n	8008ddc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	8979      	ldrh	r1, [r7, #10]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 fab8 	bl	800934c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d19a      	bne.n	8008d1c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 f98a 	bl	8009104 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e01a      	b.n	8008e30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2220      	movs	r2, #32
 8008e00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6859      	ldr	r1, [r3, #4]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	4b0b      	ldr	r3, [pc, #44]	; (8008e3c <HAL_I2C_Mem_Read+0x230>)
 8008e0e:	400b      	ands	r3, r1
 8008e10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2220      	movs	r2, #32
 8008e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	e000      	b.n	8008e30 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008e2e:	2302      	movs	r3, #2
  }
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3718      	adds	r7, #24
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	80002400 	.word	0x80002400
 8008e3c:	fe00e800 	.word	0xfe00e800

08008e40 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af02      	add	r7, sp, #8
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	4608      	mov	r0, r1
 8008e4a:	4611      	mov	r1, r2
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	4603      	mov	r3, r0
 8008e50:	817b      	strh	r3, [r7, #10]
 8008e52:	460b      	mov	r3, r1
 8008e54:	813b      	strh	r3, [r7, #8]
 8008e56:	4613      	mov	r3, r2
 8008e58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008e5a:	88fb      	ldrh	r3, [r7, #6]
 8008e5c:	b2da      	uxtb	r2, r3
 8008e5e:	8979      	ldrh	r1, [r7, #10]
 8008e60:	4b20      	ldr	r3, [pc, #128]	; (8008ee4 <I2C_RequestMemoryWrite+0xa4>)
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f000 fa6f 	bl	800934c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e6e:	69fa      	ldr	r2, [r7, #28]
 8008e70:	69b9      	ldr	r1, [r7, #24]
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 f8ff 	bl	8009076 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d001      	beq.n	8008e82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e02c      	b.n	8008edc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e82:	88fb      	ldrh	r3, [r7, #6]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d105      	bne.n	8008e94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e88:	893b      	ldrh	r3, [r7, #8]
 8008e8a:	b2da      	uxtb	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	629a      	str	r2, [r3, #40]	; 0x28
 8008e92:	e015      	b.n	8008ec0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008e94:	893b      	ldrh	r3, [r7, #8]
 8008e96:	0a1b      	lsrs	r3, r3, #8
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ea2:	69fa      	ldr	r2, [r7, #28]
 8008ea4:	69b9      	ldr	r1, [r7, #24]
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 f8e5 	bl	8009076 <I2C_WaitOnTXISFlagUntilTimeout>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e012      	b.n	8008edc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008eb6:	893b      	ldrh	r3, [r7, #8]
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	9300      	str	r3, [sp, #0]
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	2180      	movs	r1, #128	; 0x80
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 f884 	bl	8008fd8 <I2C_WaitOnFlagUntilTimeout>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e000      	b.n	8008edc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	80002000 	.word	0x80002000

08008ee8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af02      	add	r7, sp, #8
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	817b      	strh	r3, [r7, #10]
 8008efa:	460b      	mov	r3, r1
 8008efc:	813b      	strh	r3, [r7, #8]
 8008efe:	4613      	mov	r3, r2
 8008f00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008f02:	88fb      	ldrh	r3, [r7, #6]
 8008f04:	b2da      	uxtb	r2, r3
 8008f06:	8979      	ldrh	r1, [r7, #10]
 8008f08:	4b20      	ldr	r3, [pc, #128]	; (8008f8c <I2C_RequestMemoryRead+0xa4>)
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f000 fa1c 	bl	800934c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f14:	69fa      	ldr	r2, [r7, #28]
 8008f16:	69b9      	ldr	r1, [r7, #24]
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f000 f8ac 	bl	8009076 <I2C_WaitOnTXISFlagUntilTimeout>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e02c      	b.n	8008f82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008f28:	88fb      	ldrh	r3, [r7, #6]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d105      	bne.n	8008f3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008f2e:	893b      	ldrh	r3, [r7, #8]
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	629a      	str	r2, [r3, #40]	; 0x28
 8008f38:	e015      	b.n	8008f66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008f3a:	893b      	ldrh	r3, [r7, #8]
 8008f3c:	0a1b      	lsrs	r3, r3, #8
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f48:	69fa      	ldr	r2, [r7, #28]
 8008f4a:	69b9      	ldr	r1, [r7, #24]
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f000 f892 	bl	8009076 <I2C_WaitOnTXISFlagUntilTimeout>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e012      	b.n	8008f82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008f5c:	893b      	ldrh	r3, [r7, #8]
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2140      	movs	r1, #64	; 0x40
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 f831 	bl	8008fd8 <I2C_WaitOnFlagUntilTimeout>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e000      	b.n	8008f82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	80002000 	.word	0x80002000

08008f90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	f003 0302 	and.w	r3, r3, #2
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d103      	bne.n	8008fae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2200      	movs	r2, #0
 8008fac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d007      	beq.n	8008fcc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	699a      	ldr	r2, [r3, #24]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f042 0201 	orr.w	r2, r2, #1
 8008fca:	619a      	str	r2, [r3, #24]
  }
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fe8:	e031      	b.n	800904e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff0:	d02d      	beq.n	800904e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ff2:	f7fd fc45 	bl	8006880 <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d302      	bcc.n	8009008 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d122      	bne.n	800904e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699a      	ldr	r2, [r3, #24]
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	4013      	ands	r3, r2
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	429a      	cmp	r2, r3
 8009016:	bf0c      	ite	eq
 8009018:	2301      	moveq	r3, #1
 800901a:	2300      	movne	r3, #0
 800901c:	b2db      	uxtb	r3, r3
 800901e:	461a      	mov	r2, r3
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	429a      	cmp	r2, r3
 8009024:	d113      	bne.n	800904e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800902a:	f043 0220 	orr.w	r2, r3, #32
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2220      	movs	r2, #32
 8009036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e00f      	b.n	800906e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	699a      	ldr	r2, [r3, #24]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	4013      	ands	r3, r2
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	429a      	cmp	r2, r3
 800905c:	bf0c      	ite	eq
 800905e:	2301      	moveq	r3, #1
 8009060:	2300      	movne	r3, #0
 8009062:	b2db      	uxtb	r3, r3
 8009064:	461a      	mov	r2, r3
 8009066:	79fb      	ldrb	r3, [r7, #7]
 8009068:	429a      	cmp	r2, r3
 800906a:	d0be      	beq.n	8008fea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b084      	sub	sp, #16
 800907a:	af00      	add	r7, sp, #0
 800907c:	60f8      	str	r0, [r7, #12]
 800907e:	60b9      	str	r1, [r7, #8]
 8009080:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009082:	e033      	b.n	80090ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f000 f87f 	bl	800918c <I2C_IsErrorOccurred>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d001      	beq.n	8009098 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e031      	b.n	80090fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909e:	d025      	beq.n	80090ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090a0:	f7fd fbee 	bl	8006880 <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d302      	bcc.n	80090b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d11a      	bne.n	80090ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	f003 0302 	and.w	r3, r3, #2
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d013      	beq.n	80090ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c8:	f043 0220 	orr.w	r2, r3, #32
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2220      	movs	r2, #32
 80090d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e007      	b.n	80090fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	f003 0302 	and.w	r3, r3, #2
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d1c4      	bne.n	8009084 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009110:	e02f      	b.n	8009172 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	68b9      	ldr	r1, [r7, #8]
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f000 f838 	bl	800918c <I2C_IsErrorOccurred>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e02d      	b.n	8009182 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009126:	f7fd fbab 	bl	8006880 <HAL_GetTick>
 800912a:	4602      	mov	r2, r0
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	429a      	cmp	r2, r3
 8009134:	d302      	bcc.n	800913c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d11a      	bne.n	8009172 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	f003 0320 	and.w	r3, r3, #32
 8009146:	2b20      	cmp	r3, #32
 8009148:	d013      	beq.n	8009172 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800914e:	f043 0220 	orr.w	r2, r3, #32
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2220      	movs	r2, #32
 800915a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e007      	b.n	8009182 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	f003 0320 	and.w	r3, r3, #32
 800917c:	2b20      	cmp	r3, #32
 800917e:	d1c8      	bne.n	8009112 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
	...

0800918c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b08a      	sub	sp, #40	; 0x28
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80091a6:	2300      	movs	r3, #0
 80091a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	f003 0310 	and.w	r3, r3, #16
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d068      	beq.n	800928a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2210      	movs	r2, #16
 80091be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80091c0:	e049      	b.n	8009256 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c8:	d045      	beq.n	8009256 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80091ca:	f7fd fb59 	bl	8006880 <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d302      	bcc.n	80091e0 <I2C_IsErrorOccurred+0x54>
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d13a      	bne.n	8009256 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80091f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009202:	d121      	bne.n	8009248 <I2C_IsErrorOccurred+0xbc>
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800920a:	d01d      	beq.n	8009248 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800920c:	7cfb      	ldrb	r3, [r7, #19]
 800920e:	2b20      	cmp	r3, #32
 8009210:	d01a      	beq.n	8009248 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	685a      	ldr	r2, [r3, #4]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009220:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009222:	f7fd fb2d 	bl	8006880 <HAL_GetTick>
 8009226:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009228:	e00e      	b.n	8009248 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800922a:	f7fd fb29 	bl	8006880 <HAL_GetTick>
 800922e:	4602      	mov	r2, r0
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	1ad3      	subs	r3, r2, r3
 8009234:	2b19      	cmp	r3, #25
 8009236:	d907      	bls.n	8009248 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	f043 0320 	orr.w	r3, r3, #32
 800923e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009246:	e006      	b.n	8009256 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	f003 0320 	and.w	r3, r3, #32
 8009252:	2b20      	cmp	r3, #32
 8009254:	d1e9      	bne.n	800922a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	f003 0320 	and.w	r3, r3, #32
 8009260:	2b20      	cmp	r3, #32
 8009262:	d003      	beq.n	800926c <I2C_IsErrorOccurred+0xe0>
 8009264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009268:	2b00      	cmp	r3, #0
 800926a:	d0aa      	beq.n	80091c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800926c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009270:	2b00      	cmp	r3, #0
 8009272:	d103      	bne.n	800927c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2220      	movs	r2, #32
 800927a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	f043 0304 	orr.w	r3, r3, #4
 8009282:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00b      	beq.n	80092b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	f043 0301 	orr.w	r3, r3, #1
 80092a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00b      	beq.n	80092d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80092be:	6a3b      	ldr	r3, [r7, #32]
 80092c0:	f043 0308 	orr.w	r3, r3, #8
 80092c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80092ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00b      	beq.n	80092f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	f043 0302 	orr.w	r3, r3, #2
 80092e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80092f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d01c      	beq.n	800933a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f7ff fe45 	bl	8008f90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6859      	ldr	r1, [r3, #4]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	4b0d      	ldr	r3, [pc, #52]	; (8009348 <I2C_IsErrorOccurred+0x1bc>)
 8009312:	400b      	ands	r3, r1
 8009314:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	431a      	orrs	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2220      	movs	r2, #32
 8009326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800933a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800933e:	4618      	mov	r0, r3
 8009340:	3728      	adds	r7, #40	; 0x28
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	fe00e800 	.word	0xfe00e800

0800934c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800934c:	b480      	push	{r7}
 800934e:	b087      	sub	sp, #28
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	607b      	str	r3, [r7, #4]
 8009356:	460b      	mov	r3, r1
 8009358:	817b      	strh	r3, [r7, #10]
 800935a:	4613      	mov	r3, r2
 800935c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800935e:	897b      	ldrh	r3, [r7, #10]
 8009360:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009364:	7a7b      	ldrb	r3, [r7, #9]
 8009366:	041b      	lsls	r3, r3, #16
 8009368:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800936c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009372:	6a3b      	ldr	r3, [r7, #32]
 8009374:	4313      	orrs	r3, r2
 8009376:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800937a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	6a3b      	ldr	r3, [r7, #32]
 8009384:	0d5b      	lsrs	r3, r3, #21
 8009386:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800938a:	4b08      	ldr	r3, [pc, #32]	; (80093ac <I2C_TransferConfig+0x60>)
 800938c:	430b      	orrs	r3, r1
 800938e:	43db      	mvns	r3, r3
 8009390:	ea02 0103 	and.w	r1, r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	697a      	ldr	r2, [r7, #20]
 800939a:	430a      	orrs	r2, r1
 800939c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800939e:	bf00      	nop
 80093a0:	371c      	adds	r7, #28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	03ff63ff 	.word	0x03ff63ff

080093b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b20      	cmp	r3, #32
 80093c4:	d138      	bne.n	8009438 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d101      	bne.n	80093d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80093d0:	2302      	movs	r3, #2
 80093d2:	e032      	b.n	800943a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2224      	movs	r2, #36	; 0x24
 80093e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f022 0201 	bic.w	r2, r2, #1
 80093f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009402:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6819      	ldr	r1, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	430a      	orrs	r2, r1
 8009412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f042 0201 	orr.w	r2, r2, #1
 8009422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2220      	movs	r2, #32
 8009428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	e000      	b.n	800943a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009438:	2302      	movs	r3, #2
  }
}
 800943a:	4618      	mov	r0, r3
 800943c:	370c      	adds	r7, #12
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr

08009446 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009446:	b480      	push	{r7}
 8009448:	b085      	sub	sp, #20
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2b20      	cmp	r3, #32
 800945a:	d139      	bne.n	80094d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009462:	2b01      	cmp	r3, #1
 8009464:	d101      	bne.n	800946a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009466:	2302      	movs	r3, #2
 8009468:	e033      	b.n	80094d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2201      	movs	r2, #1
 800946e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2224      	movs	r2, #36	; 0x24
 8009476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f022 0201 	bic.w	r2, r2, #1
 8009488:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009498:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	021b      	lsls	r3, r3, #8
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f042 0201 	orr.w	r2, r2, #1
 80094ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2220      	movs	r2, #32
 80094c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	e000      	b.n	80094d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80094d0:	2302      	movs	r3, #2
  }
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
	...

080094e0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80094e8:	4b0b      	ldr	r3, [pc, #44]	; (8009518 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80094ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094ec:	4a0a      	ldr	r2, [pc, #40]	; (8009518 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80094ee:	f043 0301 	orr.w	r3, r3, #1
 80094f2:	6613      	str	r3, [r2, #96]	; 0x60
 80094f4:	4b08      	ldr	r3, [pc, #32]	; (8009518 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80094f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094f8:	f003 0301 	and.w	r3, r3, #1
 80094fc:	60fb      	str	r3, [r7, #12]
 80094fe:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8009500:	4b06      	ldr	r3, [pc, #24]	; (800951c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009502:	685a      	ldr	r2, [r3, #4]
 8009504:	4905      	ldr	r1, [pc, #20]	; (800951c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4313      	orrs	r3, r2
 800950a:	604b      	str	r3, [r1, #4]
}
 800950c:	bf00      	nop
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	40021000 	.word	0x40021000
 800951c:	40010000 	.word	0x40010000

08009520 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009522:	b08b      	sub	sp, #44	; 0x2c
 8009524:	af06      	add	r7, sp, #24
 8009526:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d101      	bne.n	8009532 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e0f8      	b.n	8009724 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8009538:	b2db      	uxtb	r3, r3
 800953a:	2b00      	cmp	r3, #0
 800953c:	d106      	bne.n	800954c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f00b f9dc 	bl	8014904 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2203      	movs	r2, #3
 8009550:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4618      	mov	r0, r3
 800955a:	f005 ff7b 	bl	800f454 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	603b      	str	r3, [r7, #0]
 8009564:	687e      	ldr	r6, [r7, #4]
 8009566:	466d      	mov	r5, sp
 8009568:	f106 0410 	add.w	r4, r6, #16
 800956c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800956e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009570:	6823      	ldr	r3, [r4, #0]
 8009572:	602b      	str	r3, [r5, #0]
 8009574:	1d33      	adds	r3, r6, #4
 8009576:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009578:	6838      	ldr	r0, [r7, #0]
 800957a:	f005 ff43 	bl	800f404 <USB_CoreInit>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d005      	beq.n	8009590 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2202      	movs	r2, #2
 8009588:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e0c9      	b.n	8009724 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2100      	movs	r1, #0
 8009596:	4618      	mov	r0, r3
 8009598:	f005 ff77 	bl	800f48a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800959c:	2300      	movs	r3, #0
 800959e:	73fb      	strb	r3, [r7, #15]
 80095a0:	e040      	b.n	8009624 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80095a2:	7bfb      	ldrb	r3, [r7, #15]
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	1c5a      	adds	r2, r3, #1
 80095a8:	4613      	mov	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	4413      	add	r3, r2
 80095ae:	00db      	lsls	r3, r3, #3
 80095b0:	440b      	add	r3, r1
 80095b2:	3301      	adds	r3, #1
 80095b4:	2201      	movs	r2, #1
 80095b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	6879      	ldr	r1, [r7, #4]
 80095bc:	1c5a      	adds	r2, r3, #1
 80095be:	4613      	mov	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	00db      	lsls	r3, r3, #3
 80095c6:	440b      	add	r3, r1
 80095c8:	7bfa      	ldrb	r2, [r7, #15]
 80095ca:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	6879      	ldr	r1, [r7, #4]
 80095d0:	1c5a      	adds	r2, r3, #1
 80095d2:	4613      	mov	r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4413      	add	r3, r2
 80095d8:	00db      	lsls	r3, r3, #3
 80095da:	440b      	add	r3, r1
 80095dc:	3303      	adds	r3, #3
 80095de:	2200      	movs	r2, #0
 80095e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80095e2:	7bfa      	ldrb	r2, [r7, #15]
 80095e4:	6879      	ldr	r1, [r7, #4]
 80095e6:	4613      	mov	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	00db      	lsls	r3, r3, #3
 80095ee:	440b      	add	r3, r1
 80095f0:	3338      	adds	r3, #56	; 0x38
 80095f2:	2200      	movs	r2, #0
 80095f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80095f6:	7bfa      	ldrb	r2, [r7, #15]
 80095f8:	6879      	ldr	r1, [r7, #4]
 80095fa:	4613      	mov	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	00db      	lsls	r3, r3, #3
 8009602:	440b      	add	r3, r1
 8009604:	333c      	adds	r3, #60	; 0x3c
 8009606:	2200      	movs	r2, #0
 8009608:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800960a:	7bfa      	ldrb	r2, [r7, #15]
 800960c:	6879      	ldr	r1, [r7, #4]
 800960e:	4613      	mov	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4413      	add	r3, r2
 8009614:	00db      	lsls	r3, r3, #3
 8009616:	440b      	add	r3, r1
 8009618:	3340      	adds	r3, #64	; 0x40
 800961a:	2200      	movs	r2, #0
 800961c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	3301      	adds	r3, #1
 8009622:	73fb      	strb	r3, [r7, #15]
 8009624:	7bfa      	ldrb	r2, [r7, #15]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	429a      	cmp	r2, r3
 800962c:	d3b9      	bcc.n	80095a2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800962e:	2300      	movs	r3, #0
 8009630:	73fb      	strb	r3, [r7, #15]
 8009632:	e044      	b.n	80096be <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009634:	7bfa      	ldrb	r2, [r7, #15]
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	4613      	mov	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	440b      	add	r3, r1
 8009642:	f203 1369 	addw	r3, r3, #361	; 0x169
 8009646:	2200      	movs	r2, #0
 8009648:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800964a:	7bfa      	ldrb	r2, [r7, #15]
 800964c:	6879      	ldr	r1, [r7, #4]
 800964e:	4613      	mov	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	00db      	lsls	r3, r3, #3
 8009656:	440b      	add	r3, r1
 8009658:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800965c:	7bfa      	ldrb	r2, [r7, #15]
 800965e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009660:	7bfa      	ldrb	r2, [r7, #15]
 8009662:	6879      	ldr	r1, [r7, #4]
 8009664:	4613      	mov	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	00db      	lsls	r3, r3, #3
 800966c:	440b      	add	r3, r1
 800966e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8009672:	2200      	movs	r2, #0
 8009674:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009676:	7bfa      	ldrb	r2, [r7, #15]
 8009678:	6879      	ldr	r1, [r7, #4]
 800967a:	4613      	mov	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4413      	add	r3, r2
 8009680:	00db      	lsls	r3, r3, #3
 8009682:	440b      	add	r3, r1
 8009684:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8009688:	2200      	movs	r2, #0
 800968a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800968c:	7bfa      	ldrb	r2, [r7, #15]
 800968e:	6879      	ldr	r1, [r7, #4]
 8009690:	4613      	mov	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	00db      	lsls	r3, r3, #3
 8009698:	440b      	add	r3, r1
 800969a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800969e:	2200      	movs	r2, #0
 80096a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80096a2:	7bfa      	ldrb	r2, [r7, #15]
 80096a4:	6879      	ldr	r1, [r7, #4]
 80096a6:	4613      	mov	r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	4413      	add	r3, r2
 80096ac:	00db      	lsls	r3, r3, #3
 80096ae:	440b      	add	r3, r1
 80096b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80096b4:	2200      	movs	r2, #0
 80096b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
 80096ba:	3301      	adds	r3, #1
 80096bc:	73fb      	strb	r3, [r7, #15]
 80096be:	7bfa      	ldrb	r2, [r7, #15]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d3b5      	bcc.n	8009634 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	603b      	str	r3, [r7, #0]
 80096ce:	687e      	ldr	r6, [r7, #4]
 80096d0:	466d      	mov	r5, sp
 80096d2:	f106 0410 	add.w	r4, r6, #16
 80096d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	602b      	str	r3, [r5, #0]
 80096de:	1d33      	adds	r3, r6, #4
 80096e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096e2:	6838      	ldr	r0, [r7, #0]
 80096e4:	f005 fede 	bl	800f4a4 <USB_DevInit>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d005      	beq.n	80096fa <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2202      	movs	r2, #2
 80096f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e014      	b.n	8009724 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	69db      	ldr	r3, [r3, #28]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d102      	bne.n	8009718 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f001 fc58 	bl	800afc8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4618      	mov	r0, r3
 800971e:	f008 f96f 	bl	8011a00 <USB_DevDisconnect>

  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800972c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800973a:	2b01      	cmp	r3, #1
 800973c:	d101      	bne.n	8009742 <HAL_PCD_Start+0x16>
 800973e:	2302      	movs	r3, #2
 8009740:	e012      	b.n	8009768 <HAL_PCD_Start+0x3c>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2201      	movs	r2, #1
 8009746:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4618      	mov	r0, r3
 8009750:	f005 fe69 	bl	800f426 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4618      	mov	r0, r3
 800975a:	f008 f93a 	bl	80119d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4618      	mov	r0, r3
 800977e:	f008 f954 	bl	8011a2a <USB_ReadInterrupts>
 8009782:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d003      	beq.n	8009796 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fb13 	bl	8009dba <PCD_EP_ISR_Handler>

    return;
 8009794:	e110      	b.n	80099b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800979c:	2b00      	cmp	r3, #0
 800979e:	d013      	beq.n	80097c8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097b2:	b292      	uxth	r2, r2
 80097b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f00b f91e 	bl	80149fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80097be:	2100      	movs	r1, #0
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f8fc 	bl	80099be <HAL_PCD_SetAddress>

    return;
 80097c6:	e0f7      	b.n	80099b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00c      	beq.n	80097ec <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80097da:	b29a      	uxth	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097e4:	b292      	uxth	r2, r2
 80097e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80097ea:	e0e5      	b.n	80099b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00c      	beq.n	8009810 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80097fe:	b29a      	uxth	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009808:	b292      	uxth	r2, r2
 800980a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800980e:	e0d3      	b.n	80099b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009816:	2b00      	cmp	r3, #0
 8009818:	d034      	beq.n	8009884 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009822:	b29a      	uxth	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f022 0204 	bic.w	r2, r2, #4
 800982c:	b292      	uxth	r2, r2
 800982e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800983a:	b29a      	uxth	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f022 0208 	bic.w	r2, r2, #8
 8009844:	b292      	uxth	r2, r2
 8009846:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8009850:	2b01      	cmp	r3, #1
 8009852:	d107      	bne.n	8009864 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800985c:	2100      	movs	r1, #0
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f00b fb7c 	bl	8014f5c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f00b f901 	bl	8014a6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009872:	b29a      	uxth	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800987c:	b292      	uxth	r2, r2
 800987e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009882:	e099      	b.n	80099b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800988a:	2b00      	cmp	r3, #0
 800988c:	d027      	beq.n	80098de <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009896:	b29a      	uxth	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f042 0208 	orr.w	r2, r2, #8
 80098a0:	b292      	uxth	r2, r2
 80098a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098b8:	b292      	uxth	r2, r2
 80098ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f042 0204 	orr.w	r2, r2, #4
 80098d0:	b292      	uxth	r2, r2
 80098d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f00b f8ae 	bl	8014a38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80098dc:	e06c      	b.n	80099b8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d040      	beq.n	800996a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098fa:	b292      	uxth	r2, r2
 80098fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d12b      	bne.n	8009962 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009912:	b29a      	uxth	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f042 0204 	orr.w	r2, r2, #4
 800991c:	b292      	uxth	r2, r2
 800991e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800992a:	b29a      	uxth	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f042 0208 	orr.w	r2, r2, #8
 8009934:	b292      	uxth	r2, r2
 8009936:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800994a:	b29b      	uxth	r3, r3
 800994c:	089b      	lsrs	r3, r3, #2
 800994e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009958:	2101      	movs	r1, #1
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f00b fafe 	bl	8014f5c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8009960:	e02a      	b.n	80099b8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f00b f868 	bl	8014a38 <HAL_PCD_SuspendCallback>
    return;
 8009968:	e026      	b.n	80099b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00f      	beq.n	8009994 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800997c:	b29a      	uxth	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009986:	b292      	uxth	r2, r2
 8009988:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f00b f826 	bl	80149de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009992:	e011      	b.n	80099b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00c      	beq.n	80099b8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099b0:	b292      	uxth	r2, r2
 80099b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80099b6:	bf00      	nop
  }
}
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b082      	sub	sp, #8
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	460b      	mov	r3, r1
 80099c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d101      	bne.n	80099d8 <HAL_PCD_SetAddress+0x1a>
 80099d4:	2302      	movs	r3, #2
 80099d6:	e013      	b.n	8009a00 <HAL_PCD_SetAddress+0x42>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	78fa      	ldrb	r2, [r7, #3]
 80099e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	78fa      	ldrb	r2, [r7, #3]
 80099ee:	4611      	mov	r1, r2
 80099f0:	4618      	mov	r0, r3
 80099f2:	f007 ffda 	bl	80119aa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	4608      	mov	r0, r1
 8009a12:	4611      	mov	r1, r2
 8009a14:	461a      	mov	r2, r3
 8009a16:	4603      	mov	r3, r0
 8009a18:	70fb      	strb	r3, [r7, #3]
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	803b      	strh	r3, [r7, #0]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009a26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	da0e      	bge.n	8009a4c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a2e:	78fb      	ldrb	r3, [r7, #3]
 8009a30:	f003 0307 	and.w	r3, r3, #7
 8009a34:	1c5a      	adds	r2, r3, #1
 8009a36:	4613      	mov	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4413      	add	r3, r2
 8009a3c:	00db      	lsls	r3, r3, #3
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	4413      	add	r3, r2
 8009a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2201      	movs	r2, #1
 8009a48:	705a      	strb	r2, [r3, #1]
 8009a4a:	e00e      	b.n	8009a6a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a4c:	78fb      	ldrb	r3, [r7, #3]
 8009a4e:	f003 0207 	and.w	r2, r3, #7
 8009a52:	4613      	mov	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	00db      	lsls	r3, r3, #3
 8009a5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	4413      	add	r3, r2
 8009a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2200      	movs	r2, #0
 8009a68:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009a6a:	78fb      	ldrb	r3, [r7, #3]
 8009a6c:	f003 0307 	and.w	r3, r3, #7
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009a76:	883a      	ldrh	r2, [r7, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	78ba      	ldrb	r2, [r7, #2]
 8009a80:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009a82:	78bb      	ldrb	r3, [r7, #2]
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d102      	bne.n	8009a8e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d101      	bne.n	8009a9c <HAL_PCD_EP_Open+0x94>
 8009a98:	2302      	movs	r3, #2
 8009a9a:	e00e      	b.n	8009aba <HAL_PCD_EP_Open+0xb2>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68f9      	ldr	r1, [r7, #12]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f005 fd1c 	bl	800f4e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8009ab8:	7afb      	ldrb	r3, [r7, #11]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b084      	sub	sp, #16
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	460b      	mov	r3, r1
 8009acc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009ace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	da0e      	bge.n	8009af4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ad6:	78fb      	ldrb	r3, [r7, #3]
 8009ad8:	f003 0307 	and.w	r3, r3, #7
 8009adc:	1c5a      	adds	r2, r3, #1
 8009ade:	4613      	mov	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	00db      	lsls	r3, r3, #3
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	4413      	add	r3, r2
 8009aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2201      	movs	r2, #1
 8009af0:	705a      	strb	r2, [r3, #1]
 8009af2:	e00e      	b.n	8009b12 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009af4:	78fb      	ldrb	r3, [r7, #3]
 8009af6:	f003 0207 	and.w	r2, r3, #7
 8009afa:	4613      	mov	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4413      	add	r3, r2
 8009b00:	00db      	lsls	r3, r3, #3
 8009b02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	4413      	add	r3, r2
 8009b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b12:	78fb      	ldrb	r3, [r7, #3]
 8009b14:	f003 0307 	and.w	r3, r3, #7
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d101      	bne.n	8009b2c <HAL_PCD_EP_Close+0x6a>
 8009b28:	2302      	movs	r3, #2
 8009b2a:	e00e      	b.n	8009b4a <HAL_PCD_EP_Close+0x88>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68f9      	ldr	r1, [r7, #12]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f006 f898 	bl	800fc70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b086      	sub	sp, #24
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	60f8      	str	r0, [r7, #12]
 8009b5a:	607a      	str	r2, [r7, #4]
 8009b5c:	603b      	str	r3, [r7, #0]
 8009b5e:	460b      	mov	r3, r1
 8009b60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b62:	7afb      	ldrb	r3, [r7, #11]
 8009b64:	f003 0207 	and.w	r2, r3, #7
 8009b68:	4613      	mov	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	4413      	add	r3, r2
 8009b6e:	00db      	lsls	r3, r3, #3
 8009b70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	4413      	add	r3, r2
 8009b78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b92:	7afb      	ldrb	r3, [r7, #11]
 8009b94:	f003 0307 	and.w	r3, r3, #7
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	6979      	ldr	r1, [r7, #20]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f006 fa50 	bl	801004a <USB_EPStartXfer>

  return HAL_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3718      	adds	r7, #24
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	f003 0207 	and.w	r2, r3, #7
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4413      	add	r3, r2
 8009bce:	00db      	lsls	r3, r3, #3
 8009bd0:	440b      	add	r3, r1
 8009bd2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8009bd6:	681b      	ldr	r3, [r3, #0]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b086      	sub	sp, #24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	607a      	str	r2, [r7, #4]
 8009bee:	603b      	str	r3, [r7, #0]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009bf4:	7afb      	ldrb	r3, [r7, #11]
 8009bf6:	f003 0307 	and.w	r3, r3, #7
 8009bfa:	1c5a      	adds	r2, r3, #1
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4413      	add	r3, r2
 8009c02:	00db      	lsls	r3, r3, #3
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	4413      	add	r3, r2
 8009c08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	683a      	ldr	r2, [r7, #0]
 8009c14:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2200      	movs	r2, #0
 8009c28:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c30:	7afb      	ldrb	r3, [r7, #11]
 8009c32:	f003 0307 	and.w	r3, r3, #7
 8009c36:	b2da      	uxtb	r2, r3
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6979      	ldr	r1, [r7, #20]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f006 fa01 	bl	801004a <USB_EPStartXfer>

  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3718      	adds	r7, #24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b084      	sub	sp, #16
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009c5e:	78fb      	ldrb	r3, [r7, #3]
 8009c60:	f003 0207 	and.w	r2, r3, #7
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d901      	bls.n	8009c70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e04c      	b.n	8009d0a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	da0e      	bge.n	8009c96 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c78:	78fb      	ldrb	r3, [r7, #3]
 8009c7a:	f003 0307 	and.w	r3, r3, #7
 8009c7e:	1c5a      	adds	r2, r3, #1
 8009c80:	4613      	mov	r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	00db      	lsls	r3, r3, #3
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2201      	movs	r2, #1
 8009c92:	705a      	strb	r2, [r3, #1]
 8009c94:	e00c      	b.n	8009cb0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009c96:	78fa      	ldrb	r2, [r7, #3]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	00db      	lsls	r3, r3, #3
 8009ca0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009cb6:	78fb      	ldrb	r3, [r7, #3]
 8009cb8:	f003 0307 	and.w	r3, r3, #7
 8009cbc:	b2da      	uxtb	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d101      	bne.n	8009cd0 <HAL_PCD_EP_SetStall+0x7e>
 8009ccc:	2302      	movs	r3, #2
 8009cce:	e01c      	b.n	8009d0a <HAL_PCD_EP_SetStall+0xb8>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68f9      	ldr	r1, [r7, #12]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f007 fd64 	bl	80117ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009ce4:	78fb      	ldrb	r3, [r7, #3]
 8009ce6:	f003 0307 	and.w	r3, r3, #7
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d108      	bne.n	8009d00 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	f007 fea5 	bl	8011a4a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b084      	sub	sp, #16
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009d1e:	78fb      	ldrb	r3, [r7, #3]
 8009d20:	f003 020f 	and.w	r2, r3, #15
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d901      	bls.n	8009d30 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e040      	b.n	8009db2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	da0e      	bge.n	8009d56 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d38:	78fb      	ldrb	r3, [r7, #3]
 8009d3a:	f003 0307 	and.w	r3, r3, #7
 8009d3e:	1c5a      	adds	r2, r3, #1
 8009d40:	4613      	mov	r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	4413      	add	r3, r2
 8009d46:	00db      	lsls	r3, r3, #3
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2201      	movs	r2, #1
 8009d52:	705a      	strb	r2, [r3, #1]
 8009d54:	e00e      	b.n	8009d74 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d56:	78fb      	ldrb	r3, [r7, #3]
 8009d58:	f003 0207 	and.w	r2, r3, #7
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	4413      	add	r3, r2
 8009d62:	00db      	lsls	r3, r3, #3
 8009d64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	f003 0307 	and.w	r3, r3, #7
 8009d80:	b2da      	uxtb	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d101      	bne.n	8009d94 <HAL_PCD_EP_ClrStall+0x82>
 8009d90:	2302      	movs	r3, #2
 8009d92:	e00e      	b.n	8009db2 <HAL_PCD_EP_ClrStall+0xa0>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68f9      	ldr	r1, [r7, #12]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f007 fd53 	bl	801184e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b096      	sub	sp, #88	; 0x58
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009dc2:	e3b1      	b.n	800a528 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009dcc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009dd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	f003 030f 	and.w	r3, r3, #15
 8009dda:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8009dde:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f040 8173 	bne.w	800a0ce <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009de8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009dec:	f003 0310 	and.w	r3, r3, #16
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d150      	bne.n	8009e96 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	881b      	ldrh	r3, [r3, #0]
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e04:	81fb      	strh	r3, [r7, #14]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	89fb      	ldrh	r3, [r7, #14]
 8009e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	3328      	adds	r3, #40	; 0x28
 8009e1c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	461a      	mov	r2, r3
 8009e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	00db      	lsls	r3, r3, #3
 8009e30:	4413      	add	r3, r2
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	6812      	ldr	r2, [r2, #0]
 8009e36:	4413      	add	r3, r2
 8009e38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e3c:	881b      	ldrh	r3, [r3, #0]
 8009e3e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e44:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8009e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e48:	695a      	ldr	r2, [r3, #20]
 8009e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e4c:	69db      	ldr	r3, [r3, #28]
 8009e4e:	441a      	add	r2, r3
 8009e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e52:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009e54:	2100      	movs	r1, #0
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f00a fda7 	bl	80149aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f000 835f 	beq.w	800a528 <PCD_EP_ISR_Handler+0x76e>
 8009e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e6c:	699b      	ldr	r3, [r3, #24]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f040 835a 	bne.w	800a528 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	b292      	uxth	r2, r2
 8009e88:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009e94:	e348      	b.n	800a528 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009e9c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009ea8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d032      	beq.n	8009f1a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	00db      	lsls	r3, r3, #3
 8009ec6:	4413      	add	r3, r2
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	6812      	ldr	r2, [r2, #0]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ed2:	881b      	ldrh	r3, [r3, #0]
 8009ed4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eda:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6818      	ldr	r0, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8009ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ee8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eec:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	f007 fdf9 	bl	8011ae6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009f00:	4013      	ands	r3, r2
 8009f02:	823b      	strh	r3, [r7, #16]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	8a3a      	ldrh	r2, [r7, #16]
 8009f0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f0e:	b292      	uxth	r2, r2
 8009f10:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f00a fd1c 	bl	8014950 <HAL_PCD_SetupStageCallback>
 8009f18:	e306      	b.n	800a528 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009f1a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f280 8302 	bge.w	800a528 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	881b      	ldrh	r3, [r3, #0]
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009f30:	4013      	ands	r3, r2
 8009f32:	83fb      	strh	r3, [r7, #30]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	8bfa      	ldrh	r2, [r7, #30]
 8009f3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f3e:	b292      	uxth	r2, r2
 8009f40:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	00db      	lsls	r3, r3, #3
 8009f54:	4413      	add	r3, r2
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	6812      	ldr	r2, [r2, #0]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f60:	881b      	ldrh	r3, [r3, #0]
 8009f62:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f68:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f6c:	69db      	ldr	r3, [r3, #28]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d019      	beq.n	8009fa6 <PCD_EP_ISR_Handler+0x1ec>
 8009f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f74:	695b      	ldr	r3, [r3, #20]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d015      	beq.n	8009fa6 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6818      	ldr	r0, [r3, #0]
 8009f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f80:	6959      	ldr	r1, [r3, #20]
 8009f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f84:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f88:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	f007 fdab 	bl	8011ae6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f92:	695a      	ldr	r2, [r3, #20]
 8009f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f96:	69db      	ldr	r3, [r3, #28]
 8009f98:	441a      	add	r2, r3
 8009f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f9c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f00a fce7 	bl	8014974 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	881b      	ldrh	r3, [r3, #0]
 8009fac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009fb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f040 82b5 	bne.w	800a528 <PCD_EP_ISR_Handler+0x76e>
 8009fbe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009fc2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009fc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fca:	f000 82ad 	beq.w	800a528 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	61bb      	str	r3, [r7, #24]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	461a      	mov	r2, r3
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	61bb      	str	r3, [r7, #24]
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009fec:	617b      	str	r3, [r7, #20]
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	881b      	ldrh	r3, [r3, #0]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	801a      	strh	r2, [r3, #0]
 8009ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	2b3e      	cmp	r3, #62	; 0x3e
 800a004:	d91d      	bls.n	800a042 <PCD_EP_ISR_Handler+0x288>
 800a006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	095b      	lsrs	r3, r3, #5
 800a00c:	647b      	str	r3, [r7, #68]	; 0x44
 800a00e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	f003 031f 	and.w	r3, r3, #31
 800a016:	2b00      	cmp	r3, #0
 800a018:	d102      	bne.n	800a020 <PCD_EP_ISR_Handler+0x266>
 800a01a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a01c:	3b01      	subs	r3, #1
 800a01e:	647b      	str	r3, [r7, #68]	; 0x44
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	881b      	ldrh	r3, [r3, #0]
 800a024:	b29a      	uxth	r2, r3
 800a026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a028:	b29b      	uxth	r3, r3
 800a02a:	029b      	lsls	r3, r3, #10
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	4313      	orrs	r3, r2
 800a030:	b29b      	uxth	r3, r3
 800a032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	801a      	strh	r2, [r3, #0]
 800a040:	e026      	b.n	800a090 <PCD_EP_ISR_Handler+0x2d6>
 800a042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10a      	bne.n	800a060 <PCD_EP_ISR_Handler+0x2a6>
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	881b      	ldrh	r3, [r3, #0]
 800a04e:	b29b      	uxth	r3, r3
 800a050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a058:	b29a      	uxth	r2, r3
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	801a      	strh	r2, [r3, #0]
 800a05e:	e017      	b.n	800a090 <PCD_EP_ISR_Handler+0x2d6>
 800a060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	085b      	lsrs	r3, r3, #1
 800a066:	647b      	str	r3, [r7, #68]	; 0x44
 800a068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	f003 0301 	and.w	r3, r3, #1
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <PCD_EP_ISR_Handler+0x2c0>
 800a074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a076:	3301      	adds	r3, #1
 800a078:	647b      	str	r3, [r7, #68]	; 0x44
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	881b      	ldrh	r3, [r3, #0]
 800a07e:	b29a      	uxth	r2, r3
 800a080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a082:	b29b      	uxth	r3, r3
 800a084:	029b      	lsls	r3, r3, #10
 800a086:	b29b      	uxth	r3, r3
 800a088:	4313      	orrs	r3, r2
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	881b      	ldrh	r3, [r3, #0]
 800a096:	b29b      	uxth	r3, r3
 800a098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a09c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0a0:	827b      	strh	r3, [r7, #18]
 800a0a2:	8a7b      	ldrh	r3, [r7, #18]
 800a0a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a0a8:	827b      	strh	r3, [r7, #18]
 800a0aa:	8a7b      	ldrh	r3, [r7, #18]
 800a0ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a0b0:	827b      	strh	r3, [r7, #18]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	8a7b      	ldrh	r3, [r7, #18]
 800a0b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	8013      	strh	r3, [r2, #0]
 800a0cc:	e22c      	b.n	800a528 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	881b      	ldrh	r3, [r3, #0]
 800a0de:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a0e2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f280 80f6 	bge.w	800a2d8 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	4413      	add	r3, r2
 800a0fa:	881b      	ldrh	r3, [r3, #0]
 800a0fc:	b29a      	uxth	r2, r3
 800a0fe:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a102:	4013      	ands	r3, r2
 800a104:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	461a      	mov	r2, r3
 800a10e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4413      	add	r3, r2
 800a116:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800a11a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a11e:	b292      	uxth	r2, r2
 800a120:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a122:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800a126:	4613      	mov	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	4413      	add	r3, r2
 800a12c:	00db      	lsls	r3, r3, #3
 800a12e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	4413      	add	r3, r2
 800a136:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a13a:	7b1b      	ldrb	r3, [r3, #12]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d123      	bne.n	800a188 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a148:	b29b      	uxth	r3, r3
 800a14a:	461a      	mov	r2, r3
 800a14c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	00db      	lsls	r3, r3, #3
 800a152:	4413      	add	r3, r2
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	6812      	ldr	r2, [r2, #0]
 800a158:	4413      	add	r3, r2
 800a15a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a15e:	881b      	ldrh	r3, [r3, #0]
 800a160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a164:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800a168:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f000 808e 	beq.w	800a28e <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6818      	ldr	r0, [r3, #0]
 800a176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a178:	6959      	ldr	r1, [r3, #20]
 800a17a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a17c:	88da      	ldrh	r2, [r3, #6]
 800a17e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a182:	f007 fcb0 	bl	8011ae6 <USB_ReadPMA>
 800a186:	e082      	b.n	800a28e <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a18a:	78db      	ldrb	r3, [r3, #3]
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d10a      	bne.n	800a1a6 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a190:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a194:	461a      	mov	r2, r3
 800a196:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f9d3 	bl	800a544 <HAL_PCD_EP_DB_Receive>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800a1a4:	e073      	b.n	800a28e <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1c0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	441a      	add	r2, r3
 800a1d2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a1d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	4413      	add	r3, r2
 800a1f8:	881b      	ldrh	r3, [r3, #0]
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a200:	2b00      	cmp	r3, #0
 800a202:	d022      	beq.n	800a24a <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	461a      	mov	r2, r3
 800a210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	00db      	lsls	r3, r3, #3
 800a216:	4413      	add	r3, r2
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	6812      	ldr	r2, [r2, #0]
 800a21c:	4413      	add	r3, r2
 800a21e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a222:	881b      	ldrh	r3, [r3, #0]
 800a224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a228:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a22c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a230:	2b00      	cmp	r3, #0
 800a232:	d02c      	beq.n	800a28e <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6818      	ldr	r0, [r3, #0]
 800a238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a23a:	6959      	ldr	r1, [r3, #20]
 800a23c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a23e:	891a      	ldrh	r2, [r3, #8]
 800a240:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a244:	f007 fc4f 	bl	8011ae6 <USB_ReadPMA>
 800a248:	e021      	b.n	800a28e <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a252:	b29b      	uxth	r3, r3
 800a254:	461a      	mov	r2, r3
 800a256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	4413      	add	r3, r2
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	6812      	ldr	r2, [r2, #0]
 800a262:	4413      	add	r3, r2
 800a264:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a268:	881b      	ldrh	r3, [r3, #0]
 800a26a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a26e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a272:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a276:	2b00      	cmp	r3, #0
 800a278:	d009      	beq.n	800a28e <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6818      	ldr	r0, [r3, #0]
 800a27e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a280:	6959      	ldr	r1, [r3, #20]
 800a282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a284:	895a      	ldrh	r2, [r3, #10]
 800a286:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a28a:	f007 fc2c 	bl	8011ae6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a28e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a290:	69da      	ldr	r2, [r3, #28]
 800a292:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a296:	441a      	add	r2, r3
 800a298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a29a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a29c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a29e:	695a      	ldr	r2, [r3, #20]
 800a2a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a2a4:	441a      	add	r2, r3
 800a2a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2a8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a2aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d005      	beq.n	800a2be <PCD_EP_ISR_Handler+0x504>
 800a2b2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800a2b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d206      	bcs.n	800a2cc <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a2be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f00a fb55 	bl	8014974 <HAL_PCD_DataOutStageCallback>
 800a2ca:	e005      	b.n	800a2d8 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f005 feb9 	bl	801004a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a2d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a2dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f000 8121 	beq.w	800a528 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 800a2e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a2ea:	1c5a      	adds	r2, r3, #1
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	00db      	lsls	r3, r3, #3
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	881b      	ldrh	r3, [r3, #0]
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a314:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	461a      	mov	r2, r3
 800a31e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	441a      	add	r2, r3
 800a326:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a32a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a32e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a332:	b29b      	uxth	r3, r3
 800a334:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a338:	78db      	ldrb	r3, [r3, #3]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	f040 80a2 	bne.w	800a484 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 800a340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a342:	2200      	movs	r2, #0
 800a344:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a348:	7b1b      	ldrb	r3, [r3, #12]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 8093 	beq.w	800a476 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a350:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d046      	beq.n	800a3ea <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a35c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a35e:	785b      	ldrb	r3, [r3, #1]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d126      	bne.n	800a3b2 <PCD_EP_ISR_Handler+0x5f8>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	627b      	str	r3, [r7, #36]	; 0x24
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a372:	b29b      	uxth	r3, r3
 800a374:	461a      	mov	r2, r3
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	4413      	add	r3, r2
 800a37a:	627b      	str	r3, [r7, #36]	; 0x24
 800a37c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	00da      	lsls	r2, r3, #3
 800a382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a384:	4413      	add	r3, r2
 800a386:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a38a:	623b      	str	r3, [r7, #32]
 800a38c:	6a3b      	ldr	r3, [r7, #32]
 800a38e:	881b      	ldrh	r3, [r3, #0]
 800a390:	b29b      	uxth	r3, r3
 800a392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a396:	b29a      	uxth	r2, r3
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	801a      	strh	r2, [r3, #0]
 800a39c:	6a3b      	ldr	r3, [r7, #32]
 800a39e:	881b      	ldrh	r3, [r3, #0]
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	6a3b      	ldr	r3, [r7, #32]
 800a3ae:	801a      	strh	r2, [r3, #0]
 800a3b0:	e061      	b.n	800a476 <PCD_EP_ISR_Handler+0x6bc>
 800a3b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3b4:	785b      	ldrb	r3, [r3, #1]
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d15d      	bne.n	800a476 <PCD_EP_ISR_Handler+0x6bc>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ce:	4413      	add	r3, r2
 800a3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	00da      	lsls	r2, r3, #3
 800a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3da:	4413      	add	r3, r2
 800a3dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a3e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	801a      	strh	r2, [r3, #0]
 800a3e8:	e045      	b.n	800a476 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3f2:	785b      	ldrb	r3, [r3, #1]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d126      	bne.n	800a446 <PCD_EP_ISR_Handler+0x68c>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	637b      	str	r3, [r7, #52]	; 0x34
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a406:	b29b      	uxth	r3, r3
 800a408:	461a      	mov	r2, r3
 800a40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a40c:	4413      	add	r3, r2
 800a40e:	637b      	str	r3, [r7, #52]	; 0x34
 800a410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	00da      	lsls	r2, r3, #3
 800a416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a418:	4413      	add	r3, r2
 800a41a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a41e:	633b      	str	r3, [r7, #48]	; 0x30
 800a420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a422:	881b      	ldrh	r3, [r3, #0]
 800a424:	b29b      	uxth	r3, r3
 800a426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	801a      	strh	r2, [r3, #0]
 800a430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a432:	881b      	ldrh	r3, [r3, #0]
 800a434:	b29b      	uxth	r3, r3
 800a436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a43a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a43e:	b29a      	uxth	r2, r3
 800a440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a442:	801a      	strh	r2, [r3, #0]
 800a444:	e017      	b.n	800a476 <PCD_EP_ISR_Handler+0x6bc>
 800a446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a448:	785b      	ldrb	r3, [r3, #1]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d113      	bne.n	800a476 <PCD_EP_ISR_Handler+0x6bc>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a456:	b29b      	uxth	r3, r3
 800a458:	461a      	mov	r2, r3
 800a45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a45c:	4413      	add	r3, r2
 800a45e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	00da      	lsls	r2, r3, #3
 800a466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a468:	4413      	add	r3, r2
 800a46a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a46e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a472:	2200      	movs	r2, #0
 800a474:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f00a fa94 	bl	80149aa <HAL_PCD_DataInStageCallback>
 800a482:	e051      	b.n	800a528 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800a484:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d144      	bne.n	800a51a <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a498:	b29b      	uxth	r3, r3
 800a49a:	461a      	mov	r2, r3
 800a49c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	00db      	lsls	r3, r3, #3
 800a4a2:	4413      	add	r3, r2
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	6812      	ldr	r2, [r2, #0]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4ae:	881b      	ldrh	r3, [r3, #0]
 800a4b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800a4b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4ba:	699a      	ldr	r2, [r3, #24]
 800a4bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d907      	bls.n	800a4d4 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 800a4c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4c6:	699a      	ldr	r2, [r3, #24]
 800a4c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a4cc:	1ad2      	subs	r2, r2, r3
 800a4ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4d0:	619a      	str	r2, [r3, #24]
 800a4d2:	e002      	b.n	800a4da <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 800a4d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800a4da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d106      	bne.n	800a4f0 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a4e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f00a fa5e 	bl	80149aa <HAL_PCD_DataInStageCallback>
 800a4ee:	e01b      	b.n	800a528 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800a4f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4f2:	695a      	ldr	r2, [r3, #20]
 800a4f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a4f8:	441a      	add	r2, r3
 800a4fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4fc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800a4fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a500:	69da      	ldr	r2, [r3, #28]
 800a502:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a506:	441a      	add	r2, r3
 800a508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a50a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a512:	4618      	mov	r0, r3
 800a514:	f005 fd99 	bl	801004a <USB_EPStartXfer>
 800a518:	e006      	b.n	800a528 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a51a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a51e:	461a      	mov	r2, r3
 800a520:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f917 	bl	800a756 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a530:	b29b      	uxth	r3, r3
 800a532:	b21b      	sxth	r3, r3
 800a534:	2b00      	cmp	r3, #0
 800a536:	f6ff ac45 	blt.w	8009dc4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3758      	adds	r7, #88	; 0x58
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	4613      	mov	r3, r2
 800a550:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a552:	88fb      	ldrh	r3, [r7, #6]
 800a554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d07c      	beq.n	800a656 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a564:	b29b      	uxth	r3, r3
 800a566:	461a      	mov	r2, r3
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	00db      	lsls	r3, r3, #3
 800a56e:	4413      	add	r3, r2
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	6812      	ldr	r2, [r2, #0]
 800a574:	4413      	add	r3, r2
 800a576:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a57a:	881b      	ldrh	r3, [r3, #0]
 800a57c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a580:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	699a      	ldr	r2, [r3, #24]
 800a586:	8b7b      	ldrh	r3, [r7, #26]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d306      	bcc.n	800a59a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	699a      	ldr	r2, [r3, #24]
 800a590:	8b7b      	ldrh	r3, [r7, #26]
 800a592:	1ad2      	subs	r2, r2, r3
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	619a      	str	r2, [r3, #24]
 800a598:	e002      	b.n	800a5a0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	2200      	movs	r2, #0
 800a59e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d123      	bne.n	800a5f0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	4413      	add	r3, r2
 800a5b6:	881b      	ldrh	r3, [r3, #0]
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5c2:	833b      	strh	r3, [r7, #24]
 800a5c4:	8b3b      	ldrh	r3, [r7, #24]
 800a5c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a5ca:	833b      	strh	r3, [r7, #24]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	441a      	add	r2, r3
 800a5da:	8b3b      	ldrh	r3, [r7, #24]
 800a5dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a5f0:	88fb      	ldrh	r3, [r7, #6]
 800a5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d01f      	beq.n	800a63a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	461a      	mov	r2, r3
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a614:	82fb      	strh	r3, [r7, #22]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	461a      	mov	r2, r3
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	441a      	add	r2, r3
 800a624:	8afb      	ldrh	r3, [r7, #22]
 800a626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a62a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a62e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a632:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a636:	b29b      	uxth	r3, r3
 800a638:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a63a:	8b7b      	ldrh	r3, [r7, #26]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f000 8085 	beq.w	800a74c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6818      	ldr	r0, [r3, #0]
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	6959      	ldr	r1, [r3, #20]
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	891a      	ldrh	r2, [r3, #8]
 800a64e:	8b7b      	ldrh	r3, [r7, #26]
 800a650:	f007 fa49 	bl	8011ae6 <USB_ReadPMA>
 800a654:	e07a      	b.n	800a74c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a65e:	b29b      	uxth	r3, r3
 800a660:	461a      	mov	r2, r3
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	00db      	lsls	r3, r3, #3
 800a668:	4413      	add	r3, r2
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	6812      	ldr	r2, [r2, #0]
 800a66e:	4413      	add	r3, r2
 800a670:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a67a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	699a      	ldr	r2, [r3, #24]
 800a680:	8b7b      	ldrh	r3, [r7, #26]
 800a682:	429a      	cmp	r2, r3
 800a684:	d306      	bcc.n	800a694 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	699a      	ldr	r2, [r3, #24]
 800a68a:	8b7b      	ldrh	r3, [r7, #26]
 800a68c:	1ad2      	subs	r2, r2, r3
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	619a      	str	r2, [r3, #24]
 800a692:	e002      	b.n	800a69a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	2200      	movs	r2, #0
 800a698:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d123      	bne.n	800a6ea <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	881b      	ldrh	r3, [r3, #0]
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6bc:	83fb      	strh	r3, [r7, #30]
 800a6be:	8bfb      	ldrh	r3, [r7, #30]
 800a6c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a6c4:	83fb      	strh	r3, [r7, #30]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	441a      	add	r2, r3
 800a6d4:	8bfb      	ldrh	r3, [r7, #30]
 800a6d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a6ea:	88fb      	ldrh	r3, [r7, #6]
 800a6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d11f      	bne.n	800a734 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4413      	add	r3, r2
 800a702:	881b      	ldrh	r3, [r3, #0]
 800a704:	b29b      	uxth	r3, r3
 800a706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a70a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a70e:	83bb      	strh	r3, [r7, #28]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	461a      	mov	r2, r3
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	441a      	add	r2, r3
 800a71e:	8bbb      	ldrh	r3, [r7, #28]
 800a720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a72c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a730:	b29b      	uxth	r3, r3
 800a732:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a734:	8b7b      	ldrh	r3, [r7, #26]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d008      	beq.n	800a74c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6818      	ldr	r0, [r3, #0]
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	6959      	ldr	r1, [r3, #20]
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	895a      	ldrh	r2, [r3, #10]
 800a746:	8b7b      	ldrh	r3, [r7, #26]
 800a748:	f007 f9cd 	bl	8011ae6 <USB_ReadPMA>
    }
  }

  return count;
 800a74c:	8b7b      	ldrh	r3, [r7, #26]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3720      	adds	r7, #32
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b0a4      	sub	sp, #144	; 0x90
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	60f8      	str	r0, [r7, #12]
 800a75e:	60b9      	str	r1, [r7, #8]
 800a760:	4613      	mov	r3, r2
 800a762:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a764:	88fb      	ldrh	r3, [r7, #6]
 800a766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f000 81db 	beq.w	800ab26 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a778:	b29b      	uxth	r3, r3
 800a77a:	461a      	mov	r2, r3
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	00db      	lsls	r3, r3, #3
 800a782:	4413      	add	r3, r2
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	6812      	ldr	r2, [r2, #0]
 800a788:	4413      	add	r3, r2
 800a78a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a78e:	881b      	ldrh	r3, [r3, #0]
 800a790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a794:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	699a      	ldr	r2, [r3, #24]
 800a79c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d907      	bls.n	800a7b4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	699a      	ldr	r2, [r3, #24]
 800a7a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a7ac:	1ad2      	subs	r2, r2, r3
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	619a      	str	r2, [r3, #24]
 800a7b2:	e002      	b.n	800a7ba <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f040 80b9 	bne.w	800a936 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	785b      	ldrb	r3, [r3, #1]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d126      	bne.n	800a81a <HAL_PCD_EP_DB_Transmit+0xc4>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	461a      	mov	r2, r3
 800a7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e0:	4413      	add	r3, r2
 800a7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	00da      	lsls	r2, r3, #3
 800a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ec:	4413      	add	r3, r2
 800a7ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f6:	881b      	ldrh	r3, [r3, #0]
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	801a      	strh	r2, [r3, #0]
 800a804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a806:	881b      	ldrh	r3, [r3, #0]
 800a808:	b29b      	uxth	r3, r3
 800a80a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a80e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a812:	b29a      	uxth	r2, r3
 800a814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a816:	801a      	strh	r2, [r3, #0]
 800a818:	e01a      	b.n	800a850 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	785b      	ldrb	r3, [r3, #1]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d116      	bne.n	800a850 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	637b      	str	r3, [r7, #52]	; 0x34
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a830:	b29b      	uxth	r3, r3
 800a832:	461a      	mov	r2, r3
 800a834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a836:	4413      	add	r3, r2
 800a838:	637b      	str	r3, [r7, #52]	; 0x34
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	00da      	lsls	r2, r3, #3
 800a840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a842:	4413      	add	r3, r2
 800a844:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a848:	633b      	str	r3, [r7, #48]	; 0x30
 800a84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84c:	2200      	movs	r2, #0
 800a84e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	627b      	str	r3, [r7, #36]	; 0x24
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	785b      	ldrb	r3, [r3, #1]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d126      	bne.n	800a8ac <HAL_PCD_EP_DB_Transmit+0x156>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	61fb      	str	r3, [r7, #28]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	461a      	mov	r2, r3
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	4413      	add	r3, r2
 800a874:	61fb      	str	r3, [r7, #28]
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	00da      	lsls	r2, r3, #3
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	4413      	add	r3, r2
 800a880:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a884:	61bb      	str	r3, [r7, #24]
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a890:	b29a      	uxth	r2, r3
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	801a      	strh	r2, [r3, #0]
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	881b      	ldrh	r3, [r3, #0]
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	801a      	strh	r2, [r3, #0]
 800a8aa:	e017      	b.n	800a8dc <HAL_PCD_EP_DB_Transmit+0x186>
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	785b      	ldrb	r3, [r3, #1]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d113      	bne.n	800a8dc <HAL_PCD_EP_DB_Transmit+0x186>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	461a      	mov	r2, r3
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c2:	4413      	add	r3, r2
 800a8c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	00da      	lsls	r2, r3, #3
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	4413      	add	r3, r2
 800a8d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a8d4:	623b      	str	r3, [r7, #32]
 800a8d6:	6a3b      	ldr	r3, [r7, #32]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f00a f861 	bl	80149aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a8e8:	88fb      	ldrh	r3, [r7, #6]
 800a8ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 82fa 	beq.w	800aee8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	4413      	add	r3, r2
 800a902:	881b      	ldrh	r3, [r3, #0]
 800a904:	b29b      	uxth	r3, r3
 800a906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a90a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a90e:	82fb      	strh	r3, [r7, #22]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	461a      	mov	r2, r3
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	441a      	add	r2, r3
 800a91e:	8afb      	ldrh	r3, [r7, #22]
 800a920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a928:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a92c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a930:	b29b      	uxth	r3, r3
 800a932:	8013      	strh	r3, [r2, #0]
 800a934:	e2d8      	b.n	800aee8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a936:	88fb      	ldrh	r3, [r7, #6]
 800a938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d021      	beq.n	800a984 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	461a      	mov	r2, r3
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4413      	add	r3, r2
 800a94e:	881b      	ldrh	r3, [r3, #0]
 800a950:	b29b      	uxth	r3, r3
 800a952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a95a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	461a      	mov	r2, r3
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	441a      	add	r2, r3
 800a96c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a97c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a980:	b29b      	uxth	r3, r3
 800a982:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	f040 82ac 	bne.w	800aee8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	695a      	ldr	r2, [r3, #20]
 800a994:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a998:	441a      	add	r2, r3
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	69da      	ldr	r2, [r3, #28]
 800a9a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a9a6:	441a      	add	r2, r3
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	6a1a      	ldr	r2, [r3, #32]
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	691b      	ldr	r3, [r3, #16]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d30b      	bcc.n	800a9d0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	6a1a      	ldr	r2, [r3, #32]
 800a9c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9c8:	1ad2      	subs	r2, r2, r3
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	621a      	str	r2, [r3, #32]
 800a9ce:	e017      	b.n	800aa00 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	6a1b      	ldr	r3, [r3, #32]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d108      	bne.n	800a9ea <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800a9d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a9dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a9e8:	e00a      	b.n	800aa00 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	785b      	ldrb	r3, [r3, #1]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d165      	bne.n	800aad4 <HAL_PCD_EP_DB_Transmit+0x37e>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	461a      	mov	r2, r3
 800aa1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa1c:	4413      	add	r3, r2
 800aa1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	00da      	lsls	r2, r3, #3
 800aa26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa28:	4413      	add	r3, r2
 800aa2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa2e:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3e:	801a      	strh	r2, [r3, #0]
 800aa40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa44:	2b3e      	cmp	r3, #62	; 0x3e
 800aa46:	d91d      	bls.n	800aa84 <HAL_PCD_EP_DB_Transmit+0x32e>
 800aa48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa4c:	095b      	lsrs	r3, r3, #5
 800aa4e:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa54:	f003 031f 	and.w	r3, r3, #31
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d102      	bne.n	800aa62 <HAL_PCD_EP_DB_Transmit+0x30c>
 800aa5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa64:	881b      	ldrh	r3, [r3, #0]
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	029b      	lsls	r3, r3, #10
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	4313      	orrs	r3, r2
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa80:	801a      	strh	r2, [r3, #0]
 800aa82:	e044      	b.n	800ab0e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800aa84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10a      	bne.n	800aaa2 <HAL_PCD_EP_DB_Transmit+0x34c>
 800aa8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8e:	881b      	ldrh	r3, [r3, #0]
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa9a:	b29a      	uxth	r2, r3
 800aa9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9e:	801a      	strh	r2, [r3, #0]
 800aaa0:	e035      	b.n	800ab0e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800aaa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aaa6:	085b      	lsrs	r3, r3, #1
 800aaa8:	64bb      	str	r3, [r7, #72]	; 0x48
 800aaaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aaae:	f003 0301 	and.w	r3, r3, #1
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d002      	beq.n	800aabc <HAL_PCD_EP_DB_Transmit+0x366>
 800aab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aab8:	3301      	adds	r3, #1
 800aaba:	64bb      	str	r3, [r7, #72]	; 0x48
 800aabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aabe:	881b      	ldrh	r3, [r3, #0]
 800aac0:	b29a      	uxth	r2, r3
 800aac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	029b      	lsls	r3, r3, #10
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	4313      	orrs	r3, r2
 800aacc:	b29a      	uxth	r2, r3
 800aace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad0:	801a      	strh	r2, [r3, #0]
 800aad2:	e01c      	b.n	800ab0e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	785b      	ldrb	r3, [r3, #1]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d118      	bne.n	800ab0e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	647b      	str	r3, [r7, #68]	; 0x44
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	461a      	mov	r2, r3
 800aaee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaf0:	4413      	add	r3, r2
 800aaf2:	647b      	str	r3, [r7, #68]	; 0x44
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	00da      	lsls	r2, r3, #3
 800aafa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aafc:	4413      	add	r3, r2
 800aafe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab02:	643b      	str	r3, [r7, #64]	; 0x40
 800ab04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab0c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6818      	ldr	r0, [r3, #0]
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	6959      	ldr	r1, [r3, #20]
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	891a      	ldrh	r2, [r3, #8]
 800ab1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	f006 ff9f 	bl	8011a62 <USB_WritePMA>
 800ab24:	e1e0      	b.n	800aee8 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	461a      	mov	r2, r3
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	00db      	lsls	r3, r3, #3
 800ab38:	4413      	add	r3, r2
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	6812      	ldr	r2, [r2, #0]
 800ab3e:	4413      	add	r3, r2
 800ab40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab44:	881b      	ldrh	r3, [r3, #0]
 800ab46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab4a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	699a      	ldr	r2, [r3, #24]
 800ab52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d307      	bcc.n	800ab6a <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	699a      	ldr	r2, [r3, #24]
 800ab5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ab62:	1ad2      	subs	r2, r2, r3
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	619a      	str	r2, [r3, #24]
 800ab68:	e002      	b.n	800ab70 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f040 80c0 	bne.w	800acfa <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	785b      	ldrb	r3, [r3, #1]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d126      	bne.n	800abd0 <HAL_PCD_EP_DB_Transmit+0x47a>
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	461a      	mov	r2, r3
 800ab94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab96:	4413      	add	r3, r2
 800ab98:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	00da      	lsls	r2, r3, #3
 800aba0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aba2:	4413      	add	r3, r2
 800aba4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aba8:	67bb      	str	r3, [r7, #120]	; 0x78
 800abaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	b29b      	uxth	r3, r3
 800abb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abb8:	801a      	strh	r2, [r3, #0]
 800abba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abc8:	b29a      	uxth	r2, r3
 800abca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abcc:	801a      	strh	r2, [r3, #0]
 800abce:	e01a      	b.n	800ac06 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	785b      	ldrb	r3, [r3, #1]
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d116      	bne.n	800ac06 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	667b      	str	r3, [r7, #100]	; 0x64
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	461a      	mov	r2, r3
 800abea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abec:	4413      	add	r3, r2
 800abee:	667b      	str	r3, [r7, #100]	; 0x64
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	00da      	lsls	r2, r3, #3
 800abf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abf8:	4413      	add	r3, r2
 800abfa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800abfe:	663b      	str	r3, [r7, #96]	; 0x60
 800ac00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac02:	2200      	movs	r2, #0
 800ac04:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	677b      	str	r3, [r7, #116]	; 0x74
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	785b      	ldrb	r3, [r3, #1]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d12b      	bne.n	800ac6c <HAL_PCD_EP_DB_Transmit+0x516>
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	461a      	mov	r2, r3
 800ac26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac28:	4413      	add	r3, r2
 800ac2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	00da      	lsls	r2, r3, #3
 800ac32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac34:	4413      	add	r3, r2
 800ac36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac50:	801a      	strh	r2, [r3, #0]
 800ac52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac56:	881b      	ldrh	r3, [r3, #0]
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac68:	801a      	strh	r2, [r3, #0]
 800ac6a:	e017      	b.n	800ac9c <HAL_PCD_EP_DB_Transmit+0x546>
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	785b      	ldrb	r3, [r3, #1]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d113      	bne.n	800ac9c <HAL_PCD_EP_DB_Transmit+0x546>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	461a      	mov	r2, r3
 800ac80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac82:	4413      	add	r3, r2
 800ac84:	677b      	str	r3, [r7, #116]	; 0x74
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	00da      	lsls	r2, r3, #3
 800ac8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac8e:	4413      	add	r3, r2
 800ac90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac94:	673b      	str	r3, [r7, #112]	; 0x70
 800ac96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac98:	2200      	movs	r2, #0
 800ac9a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	4619      	mov	r1, r3
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	f009 fe81 	bl	80149aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800aca8:	88fb      	ldrh	r3, [r7, #6]
 800acaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f040 811a 	bne.w	800aee8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	461a      	mov	r2, r3
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acce:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	461a      	mov	r2, r3
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	441a      	add	r2, r3
 800ace0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800ace4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ace8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800acf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	8013      	strh	r3, [r2, #0]
 800acf8:	e0f6      	b.n	800aee8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800acfa:	88fb      	ldrh	r3, [r7, #6]
 800acfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d121      	bne.n	800ad48 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	461a      	mov	r2, r3
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	461a      	mov	r2, r3
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	441a      	add	r2, r3
 800ad30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ad34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	f040 80ca 	bne.w	800aee8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	695a      	ldr	r2, [r3, #20]
 800ad58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ad5c:	441a      	add	r2, r3
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	69da      	ldr	r2, [r3, #28]
 800ad66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ad6a:	441a      	add	r2, r3
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	6a1a      	ldr	r2, [r3, #32]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	691b      	ldr	r3, [r3, #16]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d30b      	bcc.n	800ad94 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	6a1a      	ldr	r2, [r3, #32]
 800ad88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad8c:	1ad2      	subs	r2, r2, r3
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	621a      	str	r2, [r3, #32]
 800ad92:	e017      	b.n	800adc4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	6a1b      	ldr	r3, [r3, #32]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d108      	bne.n	800adae <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800ad9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ada0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800adac:	e00a      	b.n	800adc4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2200      	movs	r2, #0
 800adba:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	657b      	str	r3, [r7, #84]	; 0x54
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	785b      	ldrb	r3, [r3, #1]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d165      	bne.n	800ae9e <HAL_PCD_EP_DB_Transmit+0x748>
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	461a      	mov	r2, r3
 800ade4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ade6:	4413      	add	r3, r2
 800ade8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	00da      	lsls	r2, r3, #3
 800adf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adf2:	4413      	add	r3, r2
 800adf4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800adf8:	65bb      	str	r3, [r7, #88]	; 0x58
 800adfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800adfc:	881b      	ldrh	r3, [r3, #0]
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae08:	801a      	strh	r2, [r3, #0]
 800ae0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae0e:	2b3e      	cmp	r3, #62	; 0x3e
 800ae10:	d91d      	bls.n	800ae4e <HAL_PCD_EP_DB_Transmit+0x6f8>
 800ae12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae16:	095b      	lsrs	r3, r3, #5
 800ae18:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae1e:	f003 031f 	and.w	r3, r3, #31
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d102      	bne.n	800ae2c <HAL_PCD_EP_DB_Transmit+0x6d6>
 800ae26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae2e:	881b      	ldrh	r3, [r3, #0]
 800ae30:	b29a      	uxth	r2, r3
 800ae32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	029b      	lsls	r3, r3, #10
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae4a:	801a      	strh	r2, [r3, #0]
 800ae4c:	e041      	b.n	800aed2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800ae4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d10a      	bne.n	800ae6c <HAL_PCD_EP_DB_Transmit+0x716>
 800ae56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae68:	801a      	strh	r2, [r3, #0]
 800ae6a:	e032      	b.n	800aed2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800ae6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae70:	085b      	lsrs	r3, r3, #1
 800ae72:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae78:	f003 0301 	and.w	r3, r3, #1
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d002      	beq.n	800ae86 <HAL_PCD_EP_DB_Transmit+0x730>
 800ae80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae82:	3301      	adds	r3, #1
 800ae84:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae88:	881b      	ldrh	r3, [r3, #0]
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	029b      	lsls	r3, r3, #10
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	4313      	orrs	r3, r2
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae9a:	801a      	strh	r2, [r3, #0]
 800ae9c:	e019      	b.n	800aed2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	785b      	ldrb	r3, [r3, #1]
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d115      	bne.n	800aed2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aeb4:	4413      	add	r3, r2
 800aeb6:	657b      	str	r3, [r7, #84]	; 0x54
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	00da      	lsls	r2, r3, #3
 800aebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aec0:	4413      	add	r3, r2
 800aec2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aec6:	653b      	str	r3, [r7, #80]	; 0x50
 800aec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aecc:	b29a      	uxth	r2, r3
 800aece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aed0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	6818      	ldr	r0, [r3, #0]
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	6959      	ldr	r1, [r3, #20]
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	895a      	ldrh	r2, [r3, #10]
 800aede:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	f006 fdbd 	bl	8011a62 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	461a      	mov	r2, r3
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aefe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af02:	82bb      	strh	r3, [r7, #20]
 800af04:	8abb      	ldrh	r3, [r7, #20]
 800af06:	f083 0310 	eor.w	r3, r3, #16
 800af0a:	82bb      	strh	r3, [r7, #20]
 800af0c:	8abb      	ldrh	r3, [r7, #20]
 800af0e:	f083 0320 	eor.w	r3, r3, #32
 800af12:	82bb      	strh	r3, [r7, #20]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	461a      	mov	r2, r3
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	441a      	add	r2, r3
 800af22:	8abb      	ldrh	r3, [r7, #20]
 800af24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af34:	b29b      	uxth	r3, r3
 800af36:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3790      	adds	r7, #144	; 0x90
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800af42:	b480      	push	{r7}
 800af44:	b087      	sub	sp, #28
 800af46:	af00      	add	r7, sp, #0
 800af48:	60f8      	str	r0, [r7, #12]
 800af4a:	607b      	str	r3, [r7, #4]
 800af4c:	460b      	mov	r3, r1
 800af4e:	817b      	strh	r3, [r7, #10]
 800af50:	4613      	mov	r3, r2
 800af52:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800af54:	897b      	ldrh	r3, [r7, #10]
 800af56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00b      	beq.n	800af78 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800af60:	897b      	ldrh	r3, [r7, #10]
 800af62:	f003 0307 	and.w	r3, r3, #7
 800af66:	1c5a      	adds	r2, r3, #1
 800af68:	4613      	mov	r3, r2
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	4413      	add	r3, r2
 800af6e:	00db      	lsls	r3, r3, #3
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	4413      	add	r3, r2
 800af74:	617b      	str	r3, [r7, #20]
 800af76:	e009      	b.n	800af8c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800af78:	897a      	ldrh	r2, [r7, #10]
 800af7a:	4613      	mov	r3, r2
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4413      	add	r3, r2
 800af80:	00db      	lsls	r3, r3, #3
 800af82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800af86:	68fa      	ldr	r2, [r7, #12]
 800af88:	4413      	add	r3, r2
 800af8a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800af8c:	893b      	ldrh	r3, [r7, #8]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d107      	bne.n	800afa2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2200      	movs	r2, #0
 800af96:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	80da      	strh	r2, [r3, #6]
 800afa0:	e00b      	b.n	800afba <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	2201      	movs	r2, #1
 800afa6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	b29a      	uxth	r2, r3
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	0c1b      	lsrs	r3, r3, #16
 800afb4:	b29a      	uxth	r2, r3
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	371c      	adds	r7, #28
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2201      	movs	r2, #1
 800afda:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800afec:	b29b      	uxth	r3, r3
 800afee:	f043 0301 	orr.w	r3, r3, #1
 800aff2:	b29a      	uxth	r2, r3
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b000:	b29b      	uxth	r3, r3
 800b002:	f043 0302 	orr.w	r3, r3, #2
 800b006:	b29a      	uxth	r2, r3
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3714      	adds	r7, #20
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr

0800b01c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b01c:	b480      	push	{r7}
 800b01e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b020:	4b04      	ldr	r3, [pc, #16]	; (800b034 <HAL_PWREx_GetVoltageRange+0x18>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b028:	4618      	mov	r0, r3
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	40007000 	.word	0x40007000

0800b038 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b046:	d130      	bne.n	800b0aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b048:	4b23      	ldr	r3, [pc, #140]	; (800b0d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b054:	d038      	beq.n	800b0c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b056:	4b20      	ldr	r3, [pc, #128]	; (800b0d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b05e:	4a1e      	ldr	r2, [pc, #120]	; (800b0d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b060:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b064:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b066:	4b1d      	ldr	r3, [pc, #116]	; (800b0dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2232      	movs	r2, #50	; 0x32
 800b06c:	fb02 f303 	mul.w	r3, r2, r3
 800b070:	4a1b      	ldr	r2, [pc, #108]	; (800b0e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b072:	fba2 2303 	umull	r2, r3, r2, r3
 800b076:	0c9b      	lsrs	r3, r3, #18
 800b078:	3301      	adds	r3, #1
 800b07a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b07c:	e002      	b.n	800b084 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	3b01      	subs	r3, #1
 800b082:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b084:	4b14      	ldr	r3, [pc, #80]	; (800b0d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b086:	695b      	ldr	r3, [r3, #20]
 800b088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b08c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b090:	d102      	bne.n	800b098 <HAL_PWREx_ControlVoltageScaling+0x60>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1f2      	bne.n	800b07e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b098:	4b0f      	ldr	r3, [pc, #60]	; (800b0d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b09a:	695b      	ldr	r3, [r3, #20]
 800b09c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0a4:	d110      	bne.n	800b0c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	e00f      	b.n	800b0ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b0aa:	4b0b      	ldr	r3, [pc, #44]	; (800b0d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b0b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0b6:	d007      	beq.n	800b0c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b0b8:	4b07      	ldr	r3, [pc, #28]	; (800b0d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b0c0:	4a05      	ldr	r2, [pc, #20]	; (800b0d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b0c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3714      	adds	r7, #20
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	40007000 	.word	0x40007000
 800b0dc:	20000024 	.word	0x20000024
 800b0e0:	431bde83 	.word	0x431bde83

0800b0e4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800b0e8:	4b05      	ldr	r3, [pc, #20]	; (800b100 <HAL_PWREx_EnableVddUSB+0x1c>)
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	4a04      	ldr	r2, [pc, #16]	; (800b100 <HAL_PWREx_EnableVddUSB+0x1c>)
 800b0ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0f2:	6053      	str	r3, [r2, #4]
}
 800b0f4:	bf00      	nop
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	40007000 	.word	0x40007000

0800b104 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b088      	sub	sp, #32
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d102      	bne.n	800b118 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	f000 bc02 	b.w	800b91c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b118:	4b96      	ldr	r3, [pc, #600]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	f003 030c 	and.w	r3, r3, #12
 800b120:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b122:	4b94      	ldr	r3, [pc, #592]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	f003 0303 	and.w	r3, r3, #3
 800b12a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 0310 	and.w	r3, r3, #16
 800b134:	2b00      	cmp	r3, #0
 800b136:	f000 80e4 	beq.w	800b302 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d007      	beq.n	800b150 <HAL_RCC_OscConfig+0x4c>
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	2b0c      	cmp	r3, #12
 800b144:	f040 808b 	bne.w	800b25e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	f040 8087 	bne.w	800b25e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b150:	4b88      	ldr	r3, [pc, #544]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 0302 	and.w	r3, r3, #2
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d005      	beq.n	800b168 <HAL_RCC_OscConfig+0x64>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d101      	bne.n	800b168 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	e3d9      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a1a      	ldr	r2, [r3, #32]
 800b16c:	4b81      	ldr	r3, [pc, #516]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f003 0308 	and.w	r3, r3, #8
 800b174:	2b00      	cmp	r3, #0
 800b176:	d004      	beq.n	800b182 <HAL_RCC_OscConfig+0x7e>
 800b178:	4b7e      	ldr	r3, [pc, #504]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b180:	e005      	b.n	800b18e <HAL_RCC_OscConfig+0x8a>
 800b182:	4b7c      	ldr	r3, [pc, #496]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b188:	091b      	lsrs	r3, r3, #4
 800b18a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b18e:	4293      	cmp	r3, r2
 800b190:	d223      	bcs.n	800b1da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6a1b      	ldr	r3, [r3, #32]
 800b196:	4618      	mov	r0, r3
 800b198:	f000 fd8c 	bl	800bcb4 <RCC_SetFlashLatencyFromMSIRange>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d001      	beq.n	800b1a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e3ba      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b1a6:	4b73      	ldr	r3, [pc, #460]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a72      	ldr	r2, [pc, #456]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b1ac:	f043 0308 	orr.w	r3, r3, #8
 800b1b0:	6013      	str	r3, [r2, #0]
 800b1b2:	4b70      	ldr	r3, [pc, #448]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a1b      	ldr	r3, [r3, #32]
 800b1be:	496d      	ldr	r1, [pc, #436]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b1c4:	4b6b      	ldr	r3, [pc, #428]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	69db      	ldr	r3, [r3, #28]
 800b1d0:	021b      	lsls	r3, r3, #8
 800b1d2:	4968      	ldr	r1, [pc, #416]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	604b      	str	r3, [r1, #4]
 800b1d8:	e025      	b.n	800b226 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b1da:	4b66      	ldr	r3, [pc, #408]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a65      	ldr	r2, [pc, #404]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b1e0:	f043 0308 	orr.w	r3, r3, #8
 800b1e4:	6013      	str	r3, [r2, #0]
 800b1e6:	4b63      	ldr	r3, [pc, #396]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a1b      	ldr	r3, [r3, #32]
 800b1f2:	4960      	ldr	r1, [pc, #384]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b1f8:	4b5e      	ldr	r3, [pc, #376]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	69db      	ldr	r3, [r3, #28]
 800b204:	021b      	lsls	r3, r3, #8
 800b206:	495b      	ldr	r1, [pc, #364]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b208:	4313      	orrs	r3, r2
 800b20a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d109      	bne.n	800b226 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	4618      	mov	r0, r3
 800b218:	f000 fd4c 	bl	800bcb4 <RCC_SetFlashLatencyFromMSIRange>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d001      	beq.n	800b226 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800b222:	2301      	movs	r3, #1
 800b224:	e37a      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b226:	f000 fc81 	bl	800bb2c <HAL_RCC_GetSysClockFreq>
 800b22a:	4602      	mov	r2, r0
 800b22c:	4b51      	ldr	r3, [pc, #324]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	091b      	lsrs	r3, r3, #4
 800b232:	f003 030f 	and.w	r3, r3, #15
 800b236:	4950      	ldr	r1, [pc, #320]	; (800b378 <HAL_RCC_OscConfig+0x274>)
 800b238:	5ccb      	ldrb	r3, [r1, r3]
 800b23a:	f003 031f 	and.w	r3, r3, #31
 800b23e:	fa22 f303 	lsr.w	r3, r2, r3
 800b242:	4a4e      	ldr	r2, [pc, #312]	; (800b37c <HAL_RCC_OscConfig+0x278>)
 800b244:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b246:	4b4e      	ldr	r3, [pc, #312]	; (800b380 <HAL_RCC_OscConfig+0x27c>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7fb fac8 	bl	80067e0 <HAL_InitTick>
 800b250:	4603      	mov	r3, r0
 800b252:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b254:	7bfb      	ldrb	r3, [r7, #15]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d052      	beq.n	800b300 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
 800b25c:	e35e      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	699b      	ldr	r3, [r3, #24]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d032      	beq.n	800b2cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b266:	4b43      	ldr	r3, [pc, #268]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a42      	ldr	r2, [pc, #264]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b26c:	f043 0301 	orr.w	r3, r3, #1
 800b270:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b272:	f7fb fb05 	bl	8006880 <HAL_GetTick>
 800b276:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b278:	e008      	b.n	800b28c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b27a:	f7fb fb01 	bl	8006880 <HAL_GetTick>
 800b27e:	4602      	mov	r2, r0
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	1ad3      	subs	r3, r2, r3
 800b284:	2b02      	cmp	r3, #2
 800b286:	d901      	bls.n	800b28c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800b288:	2303      	movs	r3, #3
 800b28a:	e347      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b28c:	4b39      	ldr	r3, [pc, #228]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f003 0302 	and.w	r3, r3, #2
 800b294:	2b00      	cmp	r3, #0
 800b296:	d0f0      	beq.n	800b27a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b298:	4b36      	ldr	r3, [pc, #216]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a35      	ldr	r2, [pc, #212]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b29e:	f043 0308 	orr.w	r3, r3, #8
 800b2a2:	6013      	str	r3, [r2, #0]
 800b2a4:	4b33      	ldr	r3, [pc, #204]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6a1b      	ldr	r3, [r3, #32]
 800b2b0:	4930      	ldr	r1, [pc, #192]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b2b6:	4b2f      	ldr	r3, [pc, #188]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	69db      	ldr	r3, [r3, #28]
 800b2c2:	021b      	lsls	r3, r3, #8
 800b2c4:	492b      	ldr	r1, [pc, #172]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	604b      	str	r3, [r1, #4]
 800b2ca:	e01a      	b.n	800b302 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b2cc:	4b29      	ldr	r3, [pc, #164]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a28      	ldr	r2, [pc, #160]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b2d2:	f023 0301 	bic.w	r3, r3, #1
 800b2d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b2d8:	f7fb fad2 	bl	8006880 <HAL_GetTick>
 800b2dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b2de:	e008      	b.n	800b2f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b2e0:	f7fb face 	bl	8006880 <HAL_GetTick>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d901      	bls.n	800b2f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	e314      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b2f2:	4b20      	ldr	r3, [pc, #128]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f003 0302 	and.w	r3, r3, #2
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1f0      	bne.n	800b2e0 <HAL_RCC_OscConfig+0x1dc>
 800b2fe:	e000      	b.n	800b302 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b300:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f003 0301 	and.w	r3, r3, #1
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d073      	beq.n	800b3f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	2b08      	cmp	r3, #8
 800b312:	d005      	beq.n	800b320 <HAL_RCC_OscConfig+0x21c>
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	2b0c      	cmp	r3, #12
 800b318:	d10e      	bne.n	800b338 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	2b03      	cmp	r3, #3
 800b31e:	d10b      	bne.n	800b338 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b320:	4b14      	ldr	r3, [pc, #80]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d063      	beq.n	800b3f4 <HAL_RCC_OscConfig+0x2f0>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d15f      	bne.n	800b3f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	e2f1      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b340:	d106      	bne.n	800b350 <HAL_RCC_OscConfig+0x24c>
 800b342:	4b0c      	ldr	r3, [pc, #48]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a0b      	ldr	r2, [pc, #44]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b34c:	6013      	str	r3, [r2, #0]
 800b34e:	e025      	b.n	800b39c <HAL_RCC_OscConfig+0x298>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b358:	d114      	bne.n	800b384 <HAL_RCC_OscConfig+0x280>
 800b35a:	4b06      	ldr	r3, [pc, #24]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a05      	ldr	r2, [pc, #20]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	4b03      	ldr	r3, [pc, #12]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a02      	ldr	r2, [pc, #8]	; (800b374 <HAL_RCC_OscConfig+0x270>)
 800b36c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b370:	6013      	str	r3, [r2, #0]
 800b372:	e013      	b.n	800b39c <HAL_RCC_OscConfig+0x298>
 800b374:	40021000 	.word	0x40021000
 800b378:	0801d7e8 	.word	0x0801d7e8
 800b37c:	20000024 	.word	0x20000024
 800b380:	20000028 	.word	0x20000028
 800b384:	4ba0      	ldr	r3, [pc, #640]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a9f      	ldr	r2, [pc, #636]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b38a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b38e:	6013      	str	r3, [r2, #0]
 800b390:	4b9d      	ldr	r3, [pc, #628]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a9c      	ldr	r2, [pc, #624]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b39a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d013      	beq.n	800b3cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3a4:	f7fb fa6c 	bl	8006880 <HAL_GetTick>
 800b3a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b3aa:	e008      	b.n	800b3be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3ac:	f7fb fa68 	bl	8006880 <HAL_GetTick>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	2b64      	cmp	r3, #100	; 0x64
 800b3b8:	d901      	bls.n	800b3be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b3ba:	2303      	movs	r3, #3
 800b3bc:	e2ae      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b3be:	4b92      	ldr	r3, [pc, #584]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d0f0      	beq.n	800b3ac <HAL_RCC_OscConfig+0x2a8>
 800b3ca:	e014      	b.n	800b3f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3cc:	f7fb fa58 	bl	8006880 <HAL_GetTick>
 800b3d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b3d2:	e008      	b.n	800b3e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3d4:	f7fb fa54 	bl	8006880 <HAL_GetTick>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	1ad3      	subs	r3, r2, r3
 800b3de:	2b64      	cmp	r3, #100	; 0x64
 800b3e0:	d901      	bls.n	800b3e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	e29a      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b3e6:	4b88      	ldr	r3, [pc, #544]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1f0      	bne.n	800b3d4 <HAL_RCC_OscConfig+0x2d0>
 800b3f2:	e000      	b.n	800b3f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f003 0302 	and.w	r3, r3, #2
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d060      	beq.n	800b4c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	2b04      	cmp	r3, #4
 800b406:	d005      	beq.n	800b414 <HAL_RCC_OscConfig+0x310>
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	2b0c      	cmp	r3, #12
 800b40c:	d119      	bne.n	800b442 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	2b02      	cmp	r3, #2
 800b412:	d116      	bne.n	800b442 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b414:	4b7c      	ldr	r3, [pc, #496]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d005      	beq.n	800b42c <HAL_RCC_OscConfig+0x328>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d101      	bne.n	800b42c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	e277      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b42c:	4b76      	ldr	r3, [pc, #472]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	061b      	lsls	r3, r3, #24
 800b43a:	4973      	ldr	r1, [pc, #460]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b43c:	4313      	orrs	r3, r2
 800b43e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b440:	e040      	b.n	800b4c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	68db      	ldr	r3, [r3, #12]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d023      	beq.n	800b492 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b44a:	4b6f      	ldr	r3, [pc, #444]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a6e      	ldr	r2, [pc, #440]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b456:	f7fb fa13 	bl	8006880 <HAL_GetTick>
 800b45a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b45c:	e008      	b.n	800b470 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b45e:	f7fb fa0f 	bl	8006880 <HAL_GetTick>
 800b462:	4602      	mov	r2, r0
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	1ad3      	subs	r3, r2, r3
 800b468:	2b02      	cmp	r3, #2
 800b46a:	d901      	bls.n	800b470 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b46c:	2303      	movs	r3, #3
 800b46e:	e255      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b470:	4b65      	ldr	r3, [pc, #404]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d0f0      	beq.n	800b45e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b47c:	4b62      	ldr	r3, [pc, #392]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	691b      	ldr	r3, [r3, #16]
 800b488:	061b      	lsls	r3, r3, #24
 800b48a:	495f      	ldr	r1, [pc, #380]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b48c:	4313      	orrs	r3, r2
 800b48e:	604b      	str	r3, [r1, #4]
 800b490:	e018      	b.n	800b4c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b492:	4b5d      	ldr	r3, [pc, #372]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a5c      	ldr	r2, [pc, #368]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b49c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b49e:	f7fb f9ef 	bl	8006880 <HAL_GetTick>
 800b4a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b4a4:	e008      	b.n	800b4b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4a6:	f7fb f9eb 	bl	8006880 <HAL_GetTick>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	d901      	bls.n	800b4b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	e231      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b4b8:	4b53      	ldr	r3, [pc, #332]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1f0      	bne.n	800b4a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f003 0308 	and.w	r3, r3, #8
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d03c      	beq.n	800b54a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	695b      	ldr	r3, [r3, #20]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d01c      	beq.n	800b512 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b4d8:	4b4b      	ldr	r3, [pc, #300]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b4da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b4de:	4a4a      	ldr	r2, [pc, #296]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b4e0:	f043 0301 	orr.w	r3, r3, #1
 800b4e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4e8:	f7fb f9ca 	bl	8006880 <HAL_GetTick>
 800b4ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b4ee:	e008      	b.n	800b502 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b4f0:	f7fb f9c6 	bl	8006880 <HAL_GetTick>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	d901      	bls.n	800b502 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b4fe:	2303      	movs	r3, #3
 800b500:	e20c      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b502:	4b41      	ldr	r3, [pc, #260]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b508:	f003 0302 	and.w	r3, r3, #2
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d0ef      	beq.n	800b4f0 <HAL_RCC_OscConfig+0x3ec>
 800b510:	e01b      	b.n	800b54a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b512:	4b3d      	ldr	r3, [pc, #244]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b518:	4a3b      	ldr	r2, [pc, #236]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b51a:	f023 0301 	bic.w	r3, r3, #1
 800b51e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b522:	f7fb f9ad 	bl	8006880 <HAL_GetTick>
 800b526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b528:	e008      	b.n	800b53c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b52a:	f7fb f9a9 	bl	8006880 <HAL_GetTick>
 800b52e:	4602      	mov	r2, r0
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	1ad3      	subs	r3, r2, r3
 800b534:	2b02      	cmp	r3, #2
 800b536:	d901      	bls.n	800b53c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b538:	2303      	movs	r3, #3
 800b53a:	e1ef      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b53c:	4b32      	ldr	r3, [pc, #200]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b53e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b542:	f003 0302 	and.w	r3, r3, #2
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1ef      	bne.n	800b52a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f003 0304 	and.w	r3, r3, #4
 800b552:	2b00      	cmp	r3, #0
 800b554:	f000 80a6 	beq.w	800b6a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b558:	2300      	movs	r3, #0
 800b55a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b55c:	4b2a      	ldr	r3, [pc, #168]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b55e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b564:	2b00      	cmp	r3, #0
 800b566:	d10d      	bne.n	800b584 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b568:	4b27      	ldr	r3, [pc, #156]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b56a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b56c:	4a26      	ldr	r2, [pc, #152]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b56e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b572:	6593      	str	r3, [r2, #88]	; 0x58
 800b574:	4b24      	ldr	r3, [pc, #144]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b57c:	60bb      	str	r3, [r7, #8]
 800b57e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b580:	2301      	movs	r3, #1
 800b582:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b584:	4b21      	ldr	r3, [pc, #132]	; (800b60c <HAL_RCC_OscConfig+0x508>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d118      	bne.n	800b5c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b590:	4b1e      	ldr	r3, [pc, #120]	; (800b60c <HAL_RCC_OscConfig+0x508>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a1d      	ldr	r2, [pc, #116]	; (800b60c <HAL_RCC_OscConfig+0x508>)
 800b596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b59a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b59c:	f7fb f970 	bl	8006880 <HAL_GetTick>
 800b5a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5a2:	e008      	b.n	800b5b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5a4:	f7fb f96c 	bl	8006880 <HAL_GetTick>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	1ad3      	subs	r3, r2, r3
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d901      	bls.n	800b5b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b5b2:	2303      	movs	r3, #3
 800b5b4:	e1b2      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5b6:	4b15      	ldr	r3, [pc, #84]	; (800b60c <HAL_RCC_OscConfig+0x508>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d0f0      	beq.n	800b5a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d108      	bne.n	800b5dc <HAL_RCC_OscConfig+0x4d8>
 800b5ca:	4b0f      	ldr	r3, [pc, #60]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b5cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5d0:	4a0d      	ldr	r2, [pc, #52]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b5d2:	f043 0301 	orr.w	r3, r3, #1
 800b5d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b5da:	e029      	b.n	800b630 <HAL_RCC_OscConfig+0x52c>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	2b05      	cmp	r3, #5
 800b5e2:	d115      	bne.n	800b610 <HAL_RCC_OscConfig+0x50c>
 800b5e4:	4b08      	ldr	r3, [pc, #32]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b5e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5ea:	4a07      	ldr	r2, [pc, #28]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b5ec:	f043 0304 	orr.w	r3, r3, #4
 800b5f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b5f4:	4b04      	ldr	r3, [pc, #16]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b5f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5fa:	4a03      	ldr	r2, [pc, #12]	; (800b608 <HAL_RCC_OscConfig+0x504>)
 800b5fc:	f043 0301 	orr.w	r3, r3, #1
 800b600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b604:	e014      	b.n	800b630 <HAL_RCC_OscConfig+0x52c>
 800b606:	bf00      	nop
 800b608:	40021000 	.word	0x40021000
 800b60c:	40007000 	.word	0x40007000
 800b610:	4b9a      	ldr	r3, [pc, #616]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b616:	4a99      	ldr	r2, [pc, #612]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b618:	f023 0301 	bic.w	r3, r3, #1
 800b61c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b620:	4b96      	ldr	r3, [pc, #600]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b626:	4a95      	ldr	r2, [pc, #596]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b628:	f023 0304 	bic.w	r3, r3, #4
 800b62c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d016      	beq.n	800b666 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b638:	f7fb f922 	bl	8006880 <HAL_GetTick>
 800b63c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b63e:	e00a      	b.n	800b656 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b640:	f7fb f91e 	bl	8006880 <HAL_GetTick>
 800b644:	4602      	mov	r2, r0
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	1ad3      	subs	r3, r2, r3
 800b64a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b64e:	4293      	cmp	r3, r2
 800b650:	d901      	bls.n	800b656 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800b652:	2303      	movs	r3, #3
 800b654:	e162      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b656:	4b89      	ldr	r3, [pc, #548]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b65c:	f003 0302 	and.w	r3, r3, #2
 800b660:	2b00      	cmp	r3, #0
 800b662:	d0ed      	beq.n	800b640 <HAL_RCC_OscConfig+0x53c>
 800b664:	e015      	b.n	800b692 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b666:	f7fb f90b 	bl	8006880 <HAL_GetTick>
 800b66a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b66c:	e00a      	b.n	800b684 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b66e:	f7fb f907 	bl	8006880 <HAL_GetTick>
 800b672:	4602      	mov	r2, r0
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	f241 3288 	movw	r2, #5000	; 0x1388
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d901      	bls.n	800b684 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b680:	2303      	movs	r3, #3
 800b682:	e14b      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b684:	4b7d      	ldr	r3, [pc, #500]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b68a:	f003 0302 	and.w	r3, r3, #2
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1ed      	bne.n	800b66e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b692:	7ffb      	ldrb	r3, [r7, #31]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d105      	bne.n	800b6a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b698:	4b78      	ldr	r3, [pc, #480]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b69a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b69c:	4a77      	ldr	r2, [pc, #476]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b69e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 0320 	and.w	r3, r3, #32
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d03c      	beq.n	800b72a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d01c      	beq.n	800b6f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b6b8:	4b70      	ldr	r3, [pc, #448]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b6ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b6be:	4a6f      	ldr	r2, [pc, #444]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b6c0:	f043 0301 	orr.w	r3, r3, #1
 800b6c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6c8:	f7fb f8da 	bl	8006880 <HAL_GetTick>
 800b6cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b6ce:	e008      	b.n	800b6e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b6d0:	f7fb f8d6 	bl	8006880 <HAL_GetTick>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	2b02      	cmp	r3, #2
 800b6dc:	d901      	bls.n	800b6e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	e11c      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b6e2:	4b66      	ldr	r3, [pc, #408]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b6e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b6e8:	f003 0302 	and.w	r3, r3, #2
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d0ef      	beq.n	800b6d0 <HAL_RCC_OscConfig+0x5cc>
 800b6f0:	e01b      	b.n	800b72a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b6f2:	4b62      	ldr	r3, [pc, #392]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b6f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b6f8:	4a60      	ldr	r2, [pc, #384]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b6fa:	f023 0301 	bic.w	r3, r3, #1
 800b6fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b702:	f7fb f8bd 	bl	8006880 <HAL_GetTick>
 800b706:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b708:	e008      	b.n	800b71c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b70a:	f7fb f8b9 	bl	8006880 <HAL_GetTick>
 800b70e:	4602      	mov	r2, r0
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	1ad3      	subs	r3, r2, r3
 800b714:	2b02      	cmp	r3, #2
 800b716:	d901      	bls.n	800b71c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800b718:	2303      	movs	r3, #3
 800b71a:	e0ff      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b71c:	4b57      	ldr	r3, [pc, #348]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b71e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b722:	f003 0302 	and.w	r3, r3, #2
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1ef      	bne.n	800b70a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 80f3 	beq.w	800b91a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b738:	2b02      	cmp	r3, #2
 800b73a:	f040 80c9 	bne.w	800b8d0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b73e:	4b4f      	ldr	r3, [pc, #316]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	f003 0203 	and.w	r2, r3, #3
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74e:	429a      	cmp	r2, r3
 800b750:	d12c      	bne.n	800b7ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75c:	3b01      	subs	r3, #1
 800b75e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b760:	429a      	cmp	r2, r3
 800b762:	d123      	bne.n	800b7ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b76e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b770:	429a      	cmp	r2, r3
 800b772:	d11b      	bne.n	800b7ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b780:	429a      	cmp	r2, r3
 800b782:	d113      	bne.n	800b7ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b78e:	085b      	lsrs	r3, r3, #1
 800b790:	3b01      	subs	r3, #1
 800b792:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b794:	429a      	cmp	r2, r3
 800b796:	d109      	bne.n	800b7ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a2:	085b      	lsrs	r3, r3, #1
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d06b      	beq.n	800b884 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	2b0c      	cmp	r3, #12
 800b7b0:	d062      	beq.n	800b878 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b7b2:	4b32      	ldr	r3, [pc, #200]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d001      	beq.n	800b7c2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e0ac      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b7c2:	4b2e      	ldr	r3, [pc, #184]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a2d      	ldr	r2, [pc, #180]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b7c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b7cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b7ce:	f7fb f857 	bl	8006880 <HAL_GetTick>
 800b7d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b7d4:	e008      	b.n	800b7e8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7d6:	f7fb f853 	bl	8006880 <HAL_GetTick>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	1ad3      	subs	r3, r2, r3
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	d901      	bls.n	800b7e8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800b7e4:	2303      	movs	r3, #3
 800b7e6:	e099      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b7e8:	4b24      	ldr	r3, [pc, #144]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1f0      	bne.n	800b7d6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b7f4:	4b21      	ldr	r3, [pc, #132]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b7f6:	68da      	ldr	r2, [r3, #12]
 800b7f8:	4b21      	ldr	r3, [pc, #132]	; (800b880 <HAL_RCC_OscConfig+0x77c>)
 800b7fa:	4013      	ands	r3, r2
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b804:	3a01      	subs	r2, #1
 800b806:	0112      	lsls	r2, r2, #4
 800b808:	4311      	orrs	r1, r2
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b80e:	0212      	lsls	r2, r2, #8
 800b810:	4311      	orrs	r1, r2
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b816:	0852      	lsrs	r2, r2, #1
 800b818:	3a01      	subs	r2, #1
 800b81a:	0552      	lsls	r2, r2, #21
 800b81c:	4311      	orrs	r1, r2
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b822:	0852      	lsrs	r2, r2, #1
 800b824:	3a01      	subs	r2, #1
 800b826:	0652      	lsls	r2, r2, #25
 800b828:	4311      	orrs	r1, r2
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b82e:	06d2      	lsls	r2, r2, #27
 800b830:	430a      	orrs	r2, r1
 800b832:	4912      	ldr	r1, [pc, #72]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b834:	4313      	orrs	r3, r2
 800b836:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b838:	4b10      	ldr	r3, [pc, #64]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a0f      	ldr	r2, [pc, #60]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b83e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b842:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b844:	4b0d      	ldr	r3, [pc, #52]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	4a0c      	ldr	r2, [pc, #48]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b84a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b84e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b850:	f7fb f816 	bl	8006880 <HAL_GetTick>
 800b854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b856:	e008      	b.n	800b86a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b858:	f7fb f812 	bl	8006880 <HAL_GetTick>
 800b85c:	4602      	mov	r2, r0
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	2b02      	cmp	r3, #2
 800b864:	d901      	bls.n	800b86a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800b866:	2303      	movs	r3, #3
 800b868:	e058      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b86a:	4b04      	ldr	r3, [pc, #16]	; (800b87c <HAL_RCC_OscConfig+0x778>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b872:	2b00      	cmp	r3, #0
 800b874:	d0f0      	beq.n	800b858 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b876:	e050      	b.n	800b91a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	e04f      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
 800b87c:	40021000 	.word	0x40021000
 800b880:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b884:	4b27      	ldr	r3, [pc, #156]	; (800b924 <HAL_RCC_OscConfig+0x820>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d144      	bne.n	800b91a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b890:	4b24      	ldr	r3, [pc, #144]	; (800b924 <HAL_RCC_OscConfig+0x820>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a23      	ldr	r2, [pc, #140]	; (800b924 <HAL_RCC_OscConfig+0x820>)
 800b896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b89a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b89c:	4b21      	ldr	r3, [pc, #132]	; (800b924 <HAL_RCC_OscConfig+0x820>)
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	4a20      	ldr	r2, [pc, #128]	; (800b924 <HAL_RCC_OscConfig+0x820>)
 800b8a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b8a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b8a8:	f7fa ffea 	bl	8006880 <HAL_GetTick>
 800b8ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b8ae:	e008      	b.n	800b8c2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8b0:	f7fa ffe6 	bl	8006880 <HAL_GetTick>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d901      	bls.n	800b8c2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	e02c      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b8c2:	4b18      	ldr	r3, [pc, #96]	; (800b924 <HAL_RCC_OscConfig+0x820>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d0f0      	beq.n	800b8b0 <HAL_RCC_OscConfig+0x7ac>
 800b8ce:	e024      	b.n	800b91a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	2b0c      	cmp	r3, #12
 800b8d4:	d01f      	beq.n	800b916 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8d6:	4b13      	ldr	r3, [pc, #76]	; (800b924 <HAL_RCC_OscConfig+0x820>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a12      	ldr	r2, [pc, #72]	; (800b924 <HAL_RCC_OscConfig+0x820>)
 800b8dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b8e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8e2:	f7fa ffcd 	bl	8006880 <HAL_GetTick>
 800b8e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8e8:	e008      	b.n	800b8fc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8ea:	f7fa ffc9 	bl	8006880 <HAL_GetTick>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	1ad3      	subs	r3, r2, r3
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	d901      	bls.n	800b8fc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	e00f      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8fc:	4b09      	ldr	r3, [pc, #36]	; (800b924 <HAL_RCC_OscConfig+0x820>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1f0      	bne.n	800b8ea <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800b908:	4b06      	ldr	r3, [pc, #24]	; (800b924 <HAL_RCC_OscConfig+0x820>)
 800b90a:	68da      	ldr	r2, [r3, #12]
 800b90c:	4905      	ldr	r1, [pc, #20]	; (800b924 <HAL_RCC_OscConfig+0x820>)
 800b90e:	4b06      	ldr	r3, [pc, #24]	; (800b928 <HAL_RCC_OscConfig+0x824>)
 800b910:	4013      	ands	r3, r2
 800b912:	60cb      	str	r3, [r1, #12]
 800b914:	e001      	b.n	800b91a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	e000      	b.n	800b91c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3720      	adds	r7, #32
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	40021000 	.word	0x40021000
 800b928:	feeefffc 	.word	0xfeeefffc

0800b92c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d101      	bne.n	800b940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b93c:	2301      	movs	r3, #1
 800b93e:	e0e7      	b.n	800bb10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b940:	4b75      	ldr	r3, [pc, #468]	; (800bb18 <HAL_RCC_ClockConfig+0x1ec>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f003 0307 	and.w	r3, r3, #7
 800b948:	683a      	ldr	r2, [r7, #0]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d910      	bls.n	800b970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b94e:	4b72      	ldr	r3, [pc, #456]	; (800bb18 <HAL_RCC_ClockConfig+0x1ec>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f023 0207 	bic.w	r2, r3, #7
 800b956:	4970      	ldr	r1, [pc, #448]	; (800bb18 <HAL_RCC_ClockConfig+0x1ec>)
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b95e:	4b6e      	ldr	r3, [pc, #440]	; (800bb18 <HAL_RCC_ClockConfig+0x1ec>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f003 0307 	and.w	r3, r3, #7
 800b966:	683a      	ldr	r2, [r7, #0]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d001      	beq.n	800b970 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b96c:	2301      	movs	r3, #1
 800b96e:	e0cf      	b.n	800bb10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f003 0302 	and.w	r3, r3, #2
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d010      	beq.n	800b99e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	689a      	ldr	r2, [r3, #8]
 800b980:	4b66      	ldr	r3, [pc, #408]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b988:	429a      	cmp	r2, r3
 800b98a:	d908      	bls.n	800b99e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b98c:	4b63      	ldr	r3, [pc, #396]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	4960      	ldr	r1, [pc, #384]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800b99a:	4313      	orrs	r3, r2
 800b99c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f003 0301 	and.w	r3, r3, #1
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d04c      	beq.n	800ba44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	2b03      	cmp	r3, #3
 800b9b0:	d107      	bne.n	800b9c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b9b2:	4b5a      	ldr	r3, [pc, #360]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d121      	bne.n	800ba02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e0a6      	b.n	800bb10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	2b02      	cmp	r3, #2
 800b9c8:	d107      	bne.n	800b9da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b9ca:	4b54      	ldr	r3, [pc, #336]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d115      	bne.n	800ba02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e09a      	b.n	800bb10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d107      	bne.n	800b9f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b9e2:	4b4e      	ldr	r3, [pc, #312]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 0302 	and.w	r3, r3, #2
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d109      	bne.n	800ba02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e08e      	b.n	800bb10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b9f2:	4b4a      	ldr	r3, [pc, #296]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d101      	bne.n	800ba02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e086      	b.n	800bb10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ba02:	4b46      	ldr	r3, [pc, #280]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	f023 0203 	bic.w	r2, r3, #3
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	4943      	ldr	r1, [pc, #268]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800ba10:	4313      	orrs	r3, r2
 800ba12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba14:	f7fa ff34 	bl	8006880 <HAL_GetTick>
 800ba18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba1a:	e00a      	b.n	800ba32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba1c:	f7fa ff30 	bl	8006880 <HAL_GetTick>
 800ba20:	4602      	mov	r2, r0
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d901      	bls.n	800ba32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800ba2e:	2303      	movs	r3, #3
 800ba30:	e06e      	b.n	800bb10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba32:	4b3a      	ldr	r3, [pc, #232]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	f003 020c 	and.w	r2, r3, #12
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d1eb      	bne.n	800ba1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f003 0302 	and.w	r3, r3, #2
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d010      	beq.n	800ba72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	689a      	ldr	r2, [r3, #8]
 800ba54:	4b31      	ldr	r3, [pc, #196]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d208      	bcs.n	800ba72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ba60:	4b2e      	ldr	r3, [pc, #184]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	492b      	ldr	r1, [pc, #172]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ba72:	4b29      	ldr	r3, [pc, #164]	; (800bb18 <HAL_RCC_ClockConfig+0x1ec>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f003 0307 	and.w	r3, r3, #7
 800ba7a:	683a      	ldr	r2, [r7, #0]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d210      	bcs.n	800baa2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba80:	4b25      	ldr	r3, [pc, #148]	; (800bb18 <HAL_RCC_ClockConfig+0x1ec>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f023 0207 	bic.w	r2, r3, #7
 800ba88:	4923      	ldr	r1, [pc, #140]	; (800bb18 <HAL_RCC_ClockConfig+0x1ec>)
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba90:	4b21      	ldr	r3, [pc, #132]	; (800bb18 <HAL_RCC_ClockConfig+0x1ec>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f003 0307 	and.w	r3, r3, #7
 800ba98:	683a      	ldr	r2, [r7, #0]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d001      	beq.n	800baa2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e036      	b.n	800bb10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f003 0304 	and.w	r3, r3, #4
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d008      	beq.n	800bac0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800baae:	4b1b      	ldr	r3, [pc, #108]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800bab0:	689b      	ldr	r3, [r3, #8]
 800bab2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	4918      	ldr	r1, [pc, #96]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800babc:	4313      	orrs	r3, r2
 800babe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 0308 	and.w	r3, r3, #8
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d009      	beq.n	800bae0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bacc:	4b13      	ldr	r3, [pc, #76]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	00db      	lsls	r3, r3, #3
 800bada:	4910      	ldr	r1, [pc, #64]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800badc:	4313      	orrs	r3, r2
 800bade:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bae0:	f000 f824 	bl	800bb2c <HAL_RCC_GetSysClockFreq>
 800bae4:	4602      	mov	r2, r0
 800bae6:	4b0d      	ldr	r3, [pc, #52]	; (800bb1c <HAL_RCC_ClockConfig+0x1f0>)
 800bae8:	689b      	ldr	r3, [r3, #8]
 800baea:	091b      	lsrs	r3, r3, #4
 800baec:	f003 030f 	and.w	r3, r3, #15
 800baf0:	490b      	ldr	r1, [pc, #44]	; (800bb20 <HAL_RCC_ClockConfig+0x1f4>)
 800baf2:	5ccb      	ldrb	r3, [r1, r3]
 800baf4:	f003 031f 	and.w	r3, r3, #31
 800baf8:	fa22 f303 	lsr.w	r3, r2, r3
 800bafc:	4a09      	ldr	r2, [pc, #36]	; (800bb24 <HAL_RCC_ClockConfig+0x1f8>)
 800bafe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800bb00:	4b09      	ldr	r3, [pc, #36]	; (800bb28 <HAL_RCC_ClockConfig+0x1fc>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7fa fe6b 	bl	80067e0 <HAL_InitTick>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	72fb      	strb	r3, [r7, #11]

  return status;
 800bb0e:	7afb      	ldrb	r3, [r7, #11]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	40022000 	.word	0x40022000
 800bb1c:	40021000 	.word	0x40021000
 800bb20:	0801d7e8 	.word	0x0801d7e8
 800bb24:	20000024 	.word	0x20000024
 800bb28:	20000028 	.word	0x20000028

0800bb2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b089      	sub	sp, #36	; 0x24
 800bb30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800bb32:	2300      	movs	r3, #0
 800bb34:	61fb      	str	r3, [r7, #28]
 800bb36:	2300      	movs	r3, #0
 800bb38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb3a:	4b3e      	ldr	r3, [pc, #248]	; (800bc34 <HAL_RCC_GetSysClockFreq+0x108>)
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	f003 030c 	and.w	r3, r3, #12
 800bb42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bb44:	4b3b      	ldr	r3, [pc, #236]	; (800bc34 <HAL_RCC_GetSysClockFreq+0x108>)
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	f003 0303 	and.w	r3, r3, #3
 800bb4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d005      	beq.n	800bb60 <HAL_RCC_GetSysClockFreq+0x34>
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	2b0c      	cmp	r3, #12
 800bb58:	d121      	bne.n	800bb9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d11e      	bne.n	800bb9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800bb60:	4b34      	ldr	r3, [pc, #208]	; (800bc34 <HAL_RCC_GetSysClockFreq+0x108>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f003 0308 	and.w	r3, r3, #8
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d107      	bne.n	800bb7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bb6c:	4b31      	ldr	r3, [pc, #196]	; (800bc34 <HAL_RCC_GetSysClockFreq+0x108>)
 800bb6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb72:	0a1b      	lsrs	r3, r3, #8
 800bb74:	f003 030f 	and.w	r3, r3, #15
 800bb78:	61fb      	str	r3, [r7, #28]
 800bb7a:	e005      	b.n	800bb88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bb7c:	4b2d      	ldr	r3, [pc, #180]	; (800bc34 <HAL_RCC_GetSysClockFreq+0x108>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	091b      	lsrs	r3, r3, #4
 800bb82:	f003 030f 	and.w	r3, r3, #15
 800bb86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800bb88:	4a2b      	ldr	r2, [pc, #172]	; (800bc38 <HAL_RCC_GetSysClockFreq+0x10c>)
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d10d      	bne.n	800bbb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bb9c:	e00a      	b.n	800bbb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	2b04      	cmp	r3, #4
 800bba2:	d102      	bne.n	800bbaa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bba4:	4b25      	ldr	r3, [pc, #148]	; (800bc3c <HAL_RCC_GetSysClockFreq+0x110>)
 800bba6:	61bb      	str	r3, [r7, #24]
 800bba8:	e004      	b.n	800bbb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	2b08      	cmp	r3, #8
 800bbae:	d101      	bne.n	800bbb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bbb0:	4b23      	ldr	r3, [pc, #140]	; (800bc40 <HAL_RCC_GetSysClockFreq+0x114>)
 800bbb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	2b0c      	cmp	r3, #12
 800bbb8:	d134      	bne.n	800bc24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bbba:	4b1e      	ldr	r3, [pc, #120]	; (800bc34 <HAL_RCC_GetSysClockFreq+0x108>)
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	f003 0303 	and.w	r3, r3, #3
 800bbc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d003      	beq.n	800bbd2 <HAL_RCC_GetSysClockFreq+0xa6>
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	2b03      	cmp	r3, #3
 800bbce:	d003      	beq.n	800bbd8 <HAL_RCC_GetSysClockFreq+0xac>
 800bbd0:	e005      	b.n	800bbde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800bbd2:	4b1a      	ldr	r3, [pc, #104]	; (800bc3c <HAL_RCC_GetSysClockFreq+0x110>)
 800bbd4:	617b      	str	r3, [r7, #20]
      break;
 800bbd6:	e005      	b.n	800bbe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800bbd8:	4b19      	ldr	r3, [pc, #100]	; (800bc40 <HAL_RCC_GetSysClockFreq+0x114>)
 800bbda:	617b      	str	r3, [r7, #20]
      break;
 800bbdc:	e002      	b.n	800bbe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	617b      	str	r3, [r7, #20]
      break;
 800bbe2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bbe4:	4b13      	ldr	r3, [pc, #76]	; (800bc34 <HAL_RCC_GetSysClockFreq+0x108>)
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	091b      	lsrs	r3, r3, #4
 800bbea:	f003 0307 	and.w	r3, r3, #7
 800bbee:	3301      	adds	r3, #1
 800bbf0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bbf2:	4b10      	ldr	r3, [pc, #64]	; (800bc34 <HAL_RCC_GetSysClockFreq+0x108>)
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	0a1b      	lsrs	r3, r3, #8
 800bbf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbfc:	697a      	ldr	r2, [r7, #20]
 800bbfe:	fb03 f202 	mul.w	r2, r3, r2
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bc0a:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <HAL_RCC_GetSysClockFreq+0x108>)
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	0e5b      	lsrs	r3, r3, #25
 800bc10:	f003 0303 	and.w	r3, r3, #3
 800bc14:	3301      	adds	r3, #1
 800bc16:	005b      	lsls	r3, r3, #1
 800bc18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800bc1a:	697a      	ldr	r2, [r7, #20]
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800bc24:	69bb      	ldr	r3, [r7, #24]
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3724      	adds	r7, #36	; 0x24
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	40021000 	.word	0x40021000
 800bc38:	0801d800 	.word	0x0801d800
 800bc3c:	00f42400 	.word	0x00f42400
 800bc40:	007a1200 	.word	0x007a1200

0800bc44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bc44:	b480      	push	{r7}
 800bc46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bc48:	4b03      	ldr	r3, [pc, #12]	; (800bc58 <HAL_RCC_GetHCLKFreq+0x14>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	20000024 	.word	0x20000024

0800bc5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800bc60:	f7ff fff0 	bl	800bc44 <HAL_RCC_GetHCLKFreq>
 800bc64:	4602      	mov	r2, r0
 800bc66:	4b06      	ldr	r3, [pc, #24]	; (800bc80 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	0a1b      	lsrs	r3, r3, #8
 800bc6c:	f003 0307 	and.w	r3, r3, #7
 800bc70:	4904      	ldr	r1, [pc, #16]	; (800bc84 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bc72:	5ccb      	ldrb	r3, [r1, r3]
 800bc74:	f003 031f 	and.w	r3, r3, #31
 800bc78:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	40021000 	.word	0x40021000
 800bc84:	0801d7f8 	.word	0x0801d7f8

0800bc88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800bc8c:	f7ff ffda 	bl	800bc44 <HAL_RCC_GetHCLKFreq>
 800bc90:	4602      	mov	r2, r0
 800bc92:	4b06      	ldr	r3, [pc, #24]	; (800bcac <HAL_RCC_GetPCLK2Freq+0x24>)
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	0adb      	lsrs	r3, r3, #11
 800bc98:	f003 0307 	and.w	r3, r3, #7
 800bc9c:	4904      	ldr	r1, [pc, #16]	; (800bcb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bc9e:	5ccb      	ldrb	r3, [r1, r3]
 800bca0:	f003 031f 	and.w	r3, r3, #31
 800bca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	40021000 	.word	0x40021000
 800bcb0:	0801d7f8 	.word	0x0801d7f8

0800bcb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b086      	sub	sp, #24
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800bcc0:	4b2a      	ldr	r3, [pc, #168]	; (800bd6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bcc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d003      	beq.n	800bcd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800bccc:	f7ff f9a6 	bl	800b01c <HAL_PWREx_GetVoltageRange>
 800bcd0:	6178      	str	r0, [r7, #20]
 800bcd2:	e014      	b.n	800bcfe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800bcd4:	4b25      	ldr	r3, [pc, #148]	; (800bd6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bcd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcd8:	4a24      	ldr	r2, [pc, #144]	; (800bd6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bcda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcde:	6593      	str	r3, [r2, #88]	; 0x58
 800bce0:	4b22      	ldr	r3, [pc, #136]	; (800bd6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bce8:	60fb      	str	r3, [r7, #12]
 800bcea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800bcec:	f7ff f996 	bl	800b01c <HAL_PWREx_GetVoltageRange>
 800bcf0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800bcf2:	4b1e      	ldr	r3, [pc, #120]	; (800bd6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bcf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcf6:	4a1d      	ldr	r2, [pc, #116]	; (800bd6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bcf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bcfc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd04:	d10b      	bne.n	800bd1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2b80      	cmp	r3, #128	; 0x80
 800bd0a:	d919      	bls.n	800bd40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2ba0      	cmp	r3, #160	; 0xa0
 800bd10:	d902      	bls.n	800bd18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800bd12:	2302      	movs	r3, #2
 800bd14:	613b      	str	r3, [r7, #16]
 800bd16:	e013      	b.n	800bd40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800bd18:	2301      	movs	r3, #1
 800bd1a:	613b      	str	r3, [r7, #16]
 800bd1c:	e010      	b.n	800bd40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2b80      	cmp	r3, #128	; 0x80
 800bd22:	d902      	bls.n	800bd2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800bd24:	2303      	movs	r3, #3
 800bd26:	613b      	str	r3, [r7, #16]
 800bd28:	e00a      	b.n	800bd40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b80      	cmp	r3, #128	; 0x80
 800bd2e:	d102      	bne.n	800bd36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800bd30:	2302      	movs	r3, #2
 800bd32:	613b      	str	r3, [r7, #16]
 800bd34:	e004      	b.n	800bd40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2b70      	cmp	r3, #112	; 0x70
 800bd3a:	d101      	bne.n	800bd40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800bd40:	4b0b      	ldr	r3, [pc, #44]	; (800bd70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f023 0207 	bic.w	r2, r3, #7
 800bd48:	4909      	ldr	r1, [pc, #36]	; (800bd70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800bd50:	4b07      	ldr	r3, [pc, #28]	; (800bd70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f003 0307 	and.w	r3, r3, #7
 800bd58:	693a      	ldr	r2, [r7, #16]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d001      	beq.n	800bd62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e000      	b.n	800bd64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3718      	adds	r7, #24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	40021000 	.word	0x40021000
 800bd70:	40022000 	.word	0x40022000

0800bd74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bd80:	2300      	movs	r3, #0
 800bd82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d031      	beq.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bd98:	d01a      	beq.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800bd9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bd9e:	d814      	bhi.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x56>
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d009      	beq.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800bda4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bda8:	d10f      	bne.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800bdaa:	4b5d      	ldr	r3, [pc, #372]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	4a5c      	ldr	r2, [pc, #368]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bdb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdb4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bdb6:	e00c      	b.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	3304      	adds	r3, #4
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f000 f9ce 	bl	800c160 <RCCEx_PLLSAI1_Config>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bdc8:	e003      	b.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	74fb      	strb	r3, [r7, #19]
      break;
 800bdce:	e000      	b.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800bdd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bdd2:	7cfb      	ldrb	r3, [r7, #19]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d10b      	bne.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bdd8:	4b51      	ldr	r3, [pc, #324]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bdda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bde6:	494e      	ldr	r1, [pc, #312]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bde8:	4313      	orrs	r3, r2
 800bdea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800bdee:	e001      	b.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdf0:	7cfb      	ldrb	r3, [r7, #19]
 800bdf2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f000 809e 	beq.w	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800be02:	2300      	movs	r3, #0
 800be04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800be06:	4b46      	ldr	r3, [pc, #280]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800be08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d101      	bne.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800be12:	2301      	movs	r3, #1
 800be14:	e000      	b.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800be16:	2300      	movs	r3, #0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00d      	beq.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800be1c:	4b40      	ldr	r3, [pc, #256]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800be1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be20:	4a3f      	ldr	r2, [pc, #252]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800be22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be26:	6593      	str	r3, [r2, #88]	; 0x58
 800be28:	4b3d      	ldr	r3, [pc, #244]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800be2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be30:	60bb      	str	r3, [r7, #8]
 800be32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800be34:	2301      	movs	r3, #1
 800be36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be38:	4b3a      	ldr	r3, [pc, #232]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a39      	ldr	r2, [pc, #228]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800be3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800be44:	f7fa fd1c 	bl	8006880 <HAL_GetTick>
 800be48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800be4a:	e009      	b.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be4c:	f7fa fd18 	bl	8006880 <HAL_GetTick>
 800be50:	4602      	mov	r2, r0
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	2b02      	cmp	r3, #2
 800be58:	d902      	bls.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800be5a:	2303      	movs	r3, #3
 800be5c:	74fb      	strb	r3, [r7, #19]
        break;
 800be5e:	e005      	b.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800be60:	4b30      	ldr	r3, [pc, #192]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d0ef      	beq.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800be6c:	7cfb      	ldrb	r3, [r7, #19]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d15a      	bne.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800be72:	4b2b      	ldr	r3, [pc, #172]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800be74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d01e      	beq.n	800bec2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be88:	697a      	ldr	r2, [r7, #20]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d019      	beq.n	800bec2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800be8e:	4b24      	ldr	r3, [pc, #144]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800be90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be98:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800be9a:	4b21      	ldr	r3, [pc, #132]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800be9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bea0:	4a1f      	ldr	r2, [pc, #124]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800beaa:	4b1d      	ldr	r3, [pc, #116]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800beac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beb0:	4a1b      	ldr	r2, [pc, #108]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800beb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800beb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800beba:	4a19      	ldr	r2, [pc, #100]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	f003 0301 	and.w	r3, r3, #1
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d016      	beq.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800becc:	f7fa fcd8 	bl	8006880 <HAL_GetTick>
 800bed0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bed2:	e00b      	b.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bed4:	f7fa fcd4 	bl	8006880 <HAL_GetTick>
 800bed8:	4602      	mov	r2, r0
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	1ad3      	subs	r3, r2, r3
 800bede:	f241 3288 	movw	r2, #5000	; 0x1388
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d902      	bls.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800bee6:	2303      	movs	r3, #3
 800bee8:	74fb      	strb	r3, [r7, #19]
            break;
 800beea:	e006      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800beec:	4b0c      	ldr	r3, [pc, #48]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800beee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bef2:	f003 0302 	and.w	r3, r3, #2
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d0ec      	beq.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800befa:	7cfb      	ldrb	r3, [r7, #19]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d10b      	bne.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bf00:	4b07      	ldr	r3, [pc, #28]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bf02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf0e:	4904      	ldr	r1, [pc, #16]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800bf10:	4313      	orrs	r3, r2
 800bf12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bf16:	e009      	b.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bf18:	7cfb      	ldrb	r3, [r7, #19]
 800bf1a:	74bb      	strb	r3, [r7, #18]
 800bf1c:	e006      	b.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800bf1e:	bf00      	nop
 800bf20:	40021000 	.word	0x40021000
 800bf24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf28:	7cfb      	ldrb	r3, [r7, #19]
 800bf2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bf2c:	7c7b      	ldrb	r3, [r7, #17]
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d105      	bne.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bf32:	4b8a      	ldr	r3, [pc, #552]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bf34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf36:	4a89      	ldr	r2, [pc, #548]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bf38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f003 0301 	and.w	r3, r3, #1
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00a      	beq.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bf4a:	4b84      	ldr	r3, [pc, #528]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bf4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf50:	f023 0203 	bic.w	r2, r3, #3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6a1b      	ldr	r3, [r3, #32]
 800bf58:	4980      	ldr	r1, [pc, #512]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f003 0302 	and.w	r3, r3, #2
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00a      	beq.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bf6c:	4b7b      	ldr	r3, [pc, #492]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bf6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf72:	f023 020c 	bic.w	r2, r3, #12
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7a:	4978      	ldr	r1, [pc, #480]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f003 0320 	and.w	r3, r3, #32
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d00a      	beq.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bf8e:	4b73      	ldr	r3, [pc, #460]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bf90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf9c:	496f      	ldr	r1, [pc, #444]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d00a      	beq.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bfb0:	4b6a      	ldr	r3, [pc, #424]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bfb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfb6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfbe:	4967      	ldr	r1, [pc, #412]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00a      	beq.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bfd2:	4b62      	ldr	r3, [pc, #392]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bfd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe0:	495e      	ldr	r1, [pc, #376]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00a      	beq.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bff4:	4b59      	ldr	r3, [pc, #356]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800bff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bffa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c002:	4956      	ldr	r1, [pc, #344]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c004:	4313      	orrs	r3, r2
 800c006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00a      	beq.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c016:	4b51      	ldr	r3, [pc, #324]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c01c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c024:	494d      	ldr	r1, [pc, #308]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c026:	4313      	orrs	r3, r2
 800c028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c034:	2b00      	cmp	r3, #0
 800c036:	d028      	beq.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c038:	4b48      	ldr	r3, [pc, #288]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c03a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c03e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c046:	4945      	ldr	r1, [pc, #276]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c048:	4313      	orrs	r3, r2
 800c04a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c056:	d106      	bne.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c058:	4b40      	ldr	r3, [pc, #256]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	4a3f      	ldr	r2, [pc, #252]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c05e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c062:	60d3      	str	r3, [r2, #12]
 800c064:	e011      	b.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c06a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c06e:	d10c      	bne.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	3304      	adds	r3, #4
 800c074:	2101      	movs	r1, #1
 800c076:	4618      	mov	r0, r3
 800c078:	f000 f872 	bl	800c160 <RCCEx_PLLSAI1_Config>
 800c07c:	4603      	mov	r3, r0
 800c07e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c080:	7cfb      	ldrb	r3, [r7, #19]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d001      	beq.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800c086:	7cfb      	ldrb	r3, [r7, #19]
 800c088:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c092:	2b00      	cmp	r3, #0
 800c094:	d028      	beq.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c096:	4b31      	ldr	r3, [pc, #196]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c09c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0a4:	492d      	ldr	r1, [pc, #180]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0b4:	d106      	bne.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c0b6:	4b29      	ldr	r3, [pc, #164]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	4a28      	ldr	r2, [pc, #160]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c0bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0c0:	60d3      	str	r3, [r2, #12]
 800c0c2:	e011      	b.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c0cc:	d10c      	bne.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	2101      	movs	r1, #1
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f000 f843 	bl	800c160 <RCCEx_PLLSAI1_Config>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c0de:	7cfb      	ldrb	r3, [r7, #19]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d001      	beq.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800c0e4:	7cfb      	ldrb	r3, [r7, #19]
 800c0e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d01c      	beq.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c0f4:	4b19      	ldr	r3, [pc, #100]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c102:	4916      	ldr	r1, [pc, #88]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c104:	4313      	orrs	r3, r2
 800c106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c10e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c112:	d10c      	bne.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	3304      	adds	r3, #4
 800c118:	2102      	movs	r1, #2
 800c11a:	4618      	mov	r0, r3
 800c11c:	f000 f820 	bl	800c160 <RCCEx_PLLSAI1_Config>
 800c120:	4603      	mov	r3, r0
 800c122:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c124:	7cfb      	ldrb	r3, [r7, #19]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d001      	beq.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800c12a:	7cfb      	ldrb	r3, [r7, #19]
 800c12c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c136:	2b00      	cmp	r3, #0
 800c138:	d00a      	beq.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c13a:	4b08      	ldr	r3, [pc, #32]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c13c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c140:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c148:	4904      	ldr	r1, [pc, #16]	; (800c15c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c14a:	4313      	orrs	r3, r2
 800c14c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c150:	7cbb      	ldrb	r3, [r7, #18]
}
 800c152:	4618      	mov	r0, r3
 800c154:	3718      	adds	r7, #24
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	40021000 	.word	0x40021000

0800c160 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c16a:	2300      	movs	r3, #0
 800c16c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c16e:	4b74      	ldr	r3, [pc, #464]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	f003 0303 	and.w	r3, r3, #3
 800c176:	2b00      	cmp	r3, #0
 800c178:	d018      	beq.n	800c1ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c17a:	4b71      	ldr	r3, [pc, #452]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	f003 0203 	and.w	r2, r3, #3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	429a      	cmp	r2, r3
 800c188:	d10d      	bne.n	800c1a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
       ||
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d009      	beq.n	800c1a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c192:	4b6b      	ldr	r3, [pc, #428]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	091b      	lsrs	r3, r3, #4
 800c198:	f003 0307 	and.w	r3, r3, #7
 800c19c:	1c5a      	adds	r2, r3, #1
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	685b      	ldr	r3, [r3, #4]
       ||
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d047      	beq.n	800c236 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	73fb      	strb	r3, [r7, #15]
 800c1aa:	e044      	b.n	800c236 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2b03      	cmp	r3, #3
 800c1b2:	d018      	beq.n	800c1e6 <RCCEx_PLLSAI1_Config+0x86>
 800c1b4:	2b03      	cmp	r3, #3
 800c1b6:	d825      	bhi.n	800c204 <RCCEx_PLLSAI1_Config+0xa4>
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d002      	beq.n	800c1c2 <RCCEx_PLLSAI1_Config+0x62>
 800c1bc:	2b02      	cmp	r3, #2
 800c1be:	d009      	beq.n	800c1d4 <RCCEx_PLLSAI1_Config+0x74>
 800c1c0:	e020      	b.n	800c204 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c1c2:	4b5f      	ldr	r3, [pc, #380]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f003 0302 	and.w	r3, r3, #2
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d11d      	bne.n	800c20a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c1d2:	e01a      	b.n	800c20a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c1d4:	4b5a      	ldr	r3, [pc, #360]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d116      	bne.n	800c20e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c1e4:	e013      	b.n	800c20e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c1e6:	4b56      	ldr	r3, [pc, #344]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10f      	bne.n	800c212 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c1f2:	4b53      	ldr	r3, [pc, #332]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d109      	bne.n	800c212 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c202:	e006      	b.n	800c212 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c204:	2301      	movs	r3, #1
 800c206:	73fb      	strb	r3, [r7, #15]
      break;
 800c208:	e004      	b.n	800c214 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c20a:	bf00      	nop
 800c20c:	e002      	b.n	800c214 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c20e:	bf00      	nop
 800c210:	e000      	b.n	800c214 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c212:	bf00      	nop
    }

    if(status == HAL_OK)
 800c214:	7bfb      	ldrb	r3, [r7, #15]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d10d      	bne.n	800c236 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c21a:	4b49      	ldr	r3, [pc, #292]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6819      	ldr	r1, [r3, #0]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	3b01      	subs	r3, #1
 800c22c:	011b      	lsls	r3, r3, #4
 800c22e:	430b      	orrs	r3, r1
 800c230:	4943      	ldr	r1, [pc, #268]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c232:	4313      	orrs	r3, r2
 800c234:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c236:	7bfb      	ldrb	r3, [r7, #15]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d17c      	bne.n	800c336 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c23c:	4b40      	ldr	r3, [pc, #256]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a3f      	ldr	r2, [pc, #252]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c242:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c248:	f7fa fb1a 	bl	8006880 <HAL_GetTick>
 800c24c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c24e:	e009      	b.n	800c264 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c250:	f7fa fb16 	bl	8006880 <HAL_GetTick>
 800c254:	4602      	mov	r2, r0
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	1ad3      	subs	r3, r2, r3
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d902      	bls.n	800c264 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c25e:	2303      	movs	r3, #3
 800c260:	73fb      	strb	r3, [r7, #15]
        break;
 800c262:	e005      	b.n	800c270 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c264:	4b36      	ldr	r3, [pc, #216]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d1ef      	bne.n	800c250 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c270:	7bfb      	ldrb	r3, [r7, #15]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d15f      	bne.n	800c336 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d110      	bne.n	800c29e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c27c:	4b30      	ldr	r3, [pc, #192]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800c284:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	6892      	ldr	r2, [r2, #8]
 800c28c:	0211      	lsls	r1, r2, #8
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	68d2      	ldr	r2, [r2, #12]
 800c292:	06d2      	lsls	r2, r2, #27
 800c294:	430a      	orrs	r2, r1
 800c296:	492a      	ldr	r1, [pc, #168]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c298:	4313      	orrs	r3, r2
 800c29a:	610b      	str	r3, [r1, #16]
 800c29c:	e027      	b.n	800c2ee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d112      	bne.n	800c2ca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c2a4:	4b26      	ldr	r3, [pc, #152]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c2ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	6892      	ldr	r2, [r2, #8]
 800c2b4:	0211      	lsls	r1, r2, #8
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	6912      	ldr	r2, [r2, #16]
 800c2ba:	0852      	lsrs	r2, r2, #1
 800c2bc:	3a01      	subs	r2, #1
 800c2be:	0552      	lsls	r2, r2, #21
 800c2c0:	430a      	orrs	r2, r1
 800c2c2:	491f      	ldr	r1, [pc, #124]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	610b      	str	r3, [r1, #16]
 800c2c8:	e011      	b.n	800c2ee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c2ca:	4b1d      	ldr	r3, [pc, #116]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c2cc:	691b      	ldr	r3, [r3, #16]
 800c2ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800c2d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	6892      	ldr	r2, [r2, #8]
 800c2da:	0211      	lsls	r1, r2, #8
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	6952      	ldr	r2, [r2, #20]
 800c2e0:	0852      	lsrs	r2, r2, #1
 800c2e2:	3a01      	subs	r2, #1
 800c2e4:	0652      	lsls	r2, r2, #25
 800c2e6:	430a      	orrs	r2, r1
 800c2e8:	4915      	ldr	r1, [pc, #84]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c2ee:	4b14      	ldr	r3, [pc, #80]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	4a13      	ldr	r2, [pc, #76]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c2f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c2f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2fa:	f7fa fac1 	bl	8006880 <HAL_GetTick>
 800c2fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c300:	e009      	b.n	800c316 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c302:	f7fa fabd 	bl	8006880 <HAL_GetTick>
 800c306:	4602      	mov	r2, r0
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	1ad3      	subs	r3, r2, r3
 800c30c:	2b02      	cmp	r3, #2
 800c30e:	d902      	bls.n	800c316 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800c310:	2303      	movs	r3, #3
 800c312:	73fb      	strb	r3, [r7, #15]
          break;
 800c314:	e005      	b.n	800c322 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c316:	4b0a      	ldr	r3, [pc, #40]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d0ef      	beq.n	800c302 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800c322:	7bfb      	ldrb	r3, [r7, #15]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d106      	bne.n	800c336 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c328:	4b05      	ldr	r3, [pc, #20]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c32a:	691a      	ldr	r2, [r3, #16]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	699b      	ldr	r3, [r3, #24]
 800c330:	4903      	ldr	r1, [pc, #12]	; (800c340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c332:	4313      	orrs	r3, r2
 800c334:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c336:	7bfb      	ldrb	r3, [r7, #15]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3710      	adds	r7, #16
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	40021000 	.word	0x40021000

0800c344 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c352:	2301      	movs	r3, #1
 800c354:	e095      	b.n	800c482 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d108      	bne.n	800c370 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c366:	d009      	beq.n	800c37c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	61da      	str	r2, [r3, #28]
 800c36e:	e005      	b.n	800c37c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2200      	movs	r2, #0
 800c37a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d106      	bne.n	800c39c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2200      	movs	r2, #0
 800c392:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f7f6 fa14 	bl	80027c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2202      	movs	r2, #2
 800c3a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c3b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	68db      	ldr	r3, [r3, #12]
 800c3b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c3bc:	d902      	bls.n	800c3c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	60fb      	str	r3, [r7, #12]
 800c3c2:	e002      	b.n	800c3ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c3c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c3d2:	d007      	beq.n	800c3e4 <HAL_SPI_Init+0xa0>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c3dc:	d002      	beq.n	800c3e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c3f4:	431a      	orrs	r2, r3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	691b      	ldr	r3, [r3, #16]
 800c3fa:	f003 0302 	and.w	r3, r3, #2
 800c3fe:	431a      	orrs	r2, r3
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	695b      	ldr	r3, [r3, #20]
 800c404:	f003 0301 	and.w	r3, r3, #1
 800c408:	431a      	orrs	r2, r3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	699b      	ldr	r3, [r3, #24]
 800c40e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c412:	431a      	orrs	r2, r3
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	69db      	ldr	r3, [r3, #28]
 800c418:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c41c:	431a      	orrs	r2, r3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6a1b      	ldr	r3, [r3, #32]
 800c422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c426:	ea42 0103 	orr.w	r1, r2, r3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c42e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	430a      	orrs	r2, r1
 800c438:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	699b      	ldr	r3, [r3, #24]
 800c43e:	0c1b      	lsrs	r3, r3, #16
 800c440:	f003 0204 	and.w	r2, r3, #4
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c448:	f003 0310 	and.w	r3, r3, #16
 800c44c:	431a      	orrs	r2, r3
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c452:	f003 0308 	and.w	r3, r3, #8
 800c456:	431a      	orrs	r2, r3
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c460:	ea42 0103 	orr.w	r1, r2, r3
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	430a      	orrs	r2, r1
 800c470:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
	...

0800c48c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b086      	sub	sp, #24
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	4613      	mov	r3, r2
 800c498:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c49a:	2300      	movs	r3, #0
 800c49c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d101      	bne.n	800c4ac <HAL_SPI_Transmit_DMA+0x20>
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	e0d4      	b.n	800c656 <HAL_SPI_Transmit_DMA+0x1ca>
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d002      	beq.n	800c4c6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800c4c0:	2302      	movs	r3, #2
 800c4c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c4c4:	e0c2      	b.n	800c64c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <HAL_SPI_Transmit_DMA+0x46>
 800c4cc:	88fb      	ldrh	r3, [r7, #6]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d102      	bne.n	800c4d8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c4d6:	e0b9      	b.n	800c64c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2203      	movs	r2, #3
 800c4dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	88fa      	ldrh	r2, [r7, #6]
 800c4f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	88fa      	ldrh	r2, [r7, #6]
 800c4f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2200      	movs	r2, #0
 800c502:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2200      	movs	r2, #0
 800c508:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2200      	movs	r2, #0
 800c50e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2200      	movs	r2, #0
 800c516:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c522:	d10f      	bne.n	800c544 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c532:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c542:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c548:	4a45      	ldr	r2, [pc, #276]	; (800c660 <HAL_SPI_Transmit_DMA+0x1d4>)
 800c54a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c550:	4a44      	ldr	r2, [pc, #272]	; (800c664 <HAL_SPI_Transmit_DMA+0x1d8>)
 800c552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c558:	4a43      	ldr	r2, [pc, #268]	; (800c668 <HAL_SPI_Transmit_DMA+0x1dc>)
 800c55a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c560:	2200      	movs	r2, #0
 800c562:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	685a      	ldr	r2, [r3, #4]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c572:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	68db      	ldr	r3, [r3, #12]
 800c578:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c57c:	d82d      	bhi.n	800c5da <HAL_SPI_Transmit_DMA+0x14e>
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c582:	699b      	ldr	r3, [r3, #24]
 800c584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c588:	d127      	bne.n	800c5da <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c58e:	b29b      	uxth	r3, r3
 800c590:	f003 0301 	and.w	r3, r3, #1
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10f      	bne.n	800c5b8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	685a      	ldr	r2, [r3, #4]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c5a6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	085b      	lsrs	r3, r3, #1
 800c5b0:	b29a      	uxth	r2, r3
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c5b6:	e010      	b.n	800c5da <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	685a      	ldr	r2, [r3, #4]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c5c6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	085b      	lsrs	r3, r3, #1
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	b29a      	uxth	r2, r3
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	330c      	adds	r3, #12
 800c5ea:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5f0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c5f2:	f7fb fddf 	bl	80081b4 <HAL_DMA_Start_IT>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d008      	beq.n	800c60e <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c600:	f043 0210 	orr.w	r2, r3, #16
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c608:	2301      	movs	r3, #1
 800c60a:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c60c:	e01e      	b.n	800c64c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c618:	2b40      	cmp	r3, #64	; 0x40
 800c61a:	d007      	beq.n	800c62c <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c62a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	685a      	ldr	r2, [r3, #4]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f042 0220 	orr.w	r2, r2, #32
 800c63a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	685a      	ldr	r2, [r3, #4]
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f042 0202 	orr.w	r2, r2, #2
 800c64a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2200      	movs	r2, #0
 800c650:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c654:	7dfb      	ldrb	r3, [r7, #23]
}
 800c656:	4618      	mov	r0, r3
 800c658:	3718      	adds	r7, #24
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	0800d0a3 	.word	0x0800d0a3
 800c664:	0800cec5 	.word	0x0800cec5
 800c668:	0800d0f7 	.word	0x0800d0f7

0800c66c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af00      	add	r7, sp, #0
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	4613      	mov	r3, r2
 800c678:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c67a:	2300      	movs	r3, #0
 800c67c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c684:	b2db      	uxtb	r3, r3
 800c686:	2b01      	cmp	r3, #1
 800c688:	d002      	beq.n	800c690 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800c68a:	2302      	movs	r3, #2
 800c68c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c68e:	e0fe      	b.n	800c88e <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d110      	bne.n	800c6ba <HAL_SPI_Receive_DMA+0x4e>
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c6a0:	d10b      	bne.n	800c6ba <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2204      	movs	r2, #4
 800c6a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800c6aa:	88fb      	ldrh	r3, [r7, #6]
 800c6ac:	68ba      	ldr	r2, [r7, #8]
 800c6ae:	68b9      	ldr	r1, [r7, #8]
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	f000 f8fb 	bl	800c8ac <HAL_SPI_TransmitReceive_DMA>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	e0ee      	b.n	800c898 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d101      	bne.n	800c6c8 <HAL_SPI_Receive_DMA+0x5c>
 800c6c4:	2302      	movs	r3, #2
 800c6c6:	e0e7      	b.n	800c898 <HAL_SPI_Receive_DMA+0x22c>
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d002      	beq.n	800c6dc <HAL_SPI_Receive_DMA+0x70>
 800c6d6:	88fb      	ldrh	r3, [r7, #6]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d102      	bne.n	800c6e2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c6e0:	e0d5      	b.n	800c88e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2204      	movs	r2, #4
 800c6e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	68ba      	ldr	r2, [r7, #8]
 800c6f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	88fa      	ldrh	r2, [r7, #6]
 800c6fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	88fa      	ldrh	r2, [r7, #6]
 800c702:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2200      	movs	r2, #0
 800c70a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2200      	movs	r2, #0
 800c710:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	2200      	movs	r2, #0
 800c716:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2200      	movs	r2, #0
 800c71c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c726:	d10f      	bne.n	800c748 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c736:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c746:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	685a      	ldr	r2, [r3, #4]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c756:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c760:	d908      	bls.n	800c774 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	685a      	ldr	r2, [r3, #4]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c770:	605a      	str	r2, [r3, #4]
 800c772:	e042      	b.n	800c7fa <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	685a      	ldr	r2, [r3, #4]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c782:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c788:	699b      	ldr	r3, [r3, #24]
 800c78a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c78e:	d134      	bne.n	800c7fa <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	685a      	ldr	r2, [r3, #4]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c79e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	f003 0301 	and.w	r3, r3, #1
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d111      	bne.n	800c7d4 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	685a      	ldr	r2, [r3, #4]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c7be:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	085b      	lsrs	r3, r3, #1
 800c7ca:	b29a      	uxth	r2, r3
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c7d2:	e012      	b.n	800c7fa <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	685a      	ldr	r2, [r3, #4]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c7e2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	085b      	lsrs	r3, r3, #1
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7fe:	4a28      	ldr	r2, [pc, #160]	; (800c8a0 <HAL_SPI_Receive_DMA+0x234>)
 800c800:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c806:	4a27      	ldr	r2, [pc, #156]	; (800c8a4 <HAL_SPI_Receive_DMA+0x238>)
 800c808:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c80e:	4a26      	ldr	r2, [pc, #152]	; (800c8a8 <HAL_SPI_Receive_DMA+0x23c>)
 800c810:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c816:	2200      	movs	r2, #0
 800c818:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	330c      	adds	r3, #12
 800c824:	4619      	mov	r1, r3
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c82a:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c832:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c834:	f7fb fcbe 	bl	80081b4 <HAL_DMA_Start_IT>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d008      	beq.n	800c850 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c842:	f043 0210 	orr.w	r2, r3, #16
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c84a:	2301      	movs	r3, #1
 800c84c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c84e:	e01e      	b.n	800c88e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c85a:	2b40      	cmp	r3, #64	; 0x40
 800c85c:	d007      	beq.n	800c86e <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c86c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	685a      	ldr	r2, [r3, #4]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f042 0220 	orr.w	r2, r2, #32
 800c87c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	685a      	ldr	r2, [r3, #4]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f042 0201 	orr.w	r2, r2, #1
 800c88c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2200      	movs	r2, #0
 800c892:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c896:	7dfb      	ldrb	r3, [r7, #23]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	0800d0bf 	.word	0x0800d0bf
 800c8a4:	0800cf6b 	.word	0x0800cf6b
 800c8a8:	0800d0f7 	.word	0x0800d0f7

0800c8ac <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b086      	sub	sp, #24
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
 800c8b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d101      	bne.n	800c8cc <HAL_SPI_TransmitReceive_DMA+0x20>
 800c8c8:	2302      	movs	r3, #2
 800c8ca:	e164      	b.n	800cb96 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c8da:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800c8e2:	7dbb      	ldrb	r3, [r7, #22]
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d00d      	beq.n	800c904 <HAL_SPI_TransmitReceive_DMA+0x58>
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c8ee:	d106      	bne.n	800c8fe <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d102      	bne.n	800c8fe <HAL_SPI_TransmitReceive_DMA+0x52>
 800c8f8:	7dbb      	ldrb	r3, [r7, #22]
 800c8fa:	2b04      	cmp	r3, #4
 800c8fc:	d002      	beq.n	800c904 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800c8fe:	2302      	movs	r3, #2
 800c900:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c902:	e143      	b.n	800cb8c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d005      	beq.n	800c916 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d002      	beq.n	800c916 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c910:	887b      	ldrh	r3, [r7, #2]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d102      	bne.n	800c91c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800c916:	2301      	movs	r3, #1
 800c918:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c91a:	e137      	b.n	800cb8c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c922:	b2db      	uxtb	r3, r3
 800c924:	2b04      	cmp	r3, #4
 800c926:	d003      	beq.n	800c930 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2205      	movs	r2, #5
 800c92c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2200      	movs	r2, #0
 800c934:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	887a      	ldrh	r2, [r7, #2]
 800c940:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	887a      	ldrh	r2, [r7, #2]
 800c946:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	887a      	ldrh	r2, [r7, #2]
 800c952:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	887a      	ldrh	r2, [r7, #2]
 800c95a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2200      	movs	r2, #0
 800c962:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2200      	movs	r2, #0
 800c968:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	685a      	ldr	r2, [r3, #4]
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800c978:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c982:	d908      	bls.n	800c996 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	685a      	ldr	r2, [r3, #4]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c992:	605a      	str	r2, [r3, #4]
 800c994:	e06f      	b.n	800ca76 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	685a      	ldr	r2, [r3, #4]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c9a4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9aa:	699b      	ldr	r3, [r3, #24]
 800c9ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9b0:	d126      	bne.n	800ca00 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c9b6:	f003 0301 	and.w	r3, r3, #1
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d10f      	bne.n	800c9de <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	685a      	ldr	r2, [r3, #4]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c9cc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	085b      	lsrs	r3, r3, #1
 800c9d6:	b29a      	uxth	r2, r3
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c9dc:	e010      	b.n	800ca00 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c9ec:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	085b      	lsrs	r3, r3, #1
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca04:	699b      	ldr	r3, [r3, #24]
 800ca06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca0a:	d134      	bne.n	800ca76 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	685a      	ldr	r2, [r3, #4]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ca1a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	f003 0301 	and.w	r3, r3, #1
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d111      	bne.n	800ca50 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	685a      	ldr	r2, [r3, #4]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ca3a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	085b      	lsrs	r3, r3, #1
 800ca46:	b29a      	uxth	r2, r3
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ca4e:	e012      	b.n	800ca76 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	685a      	ldr	r2, [r3, #4]
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ca5e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	085b      	lsrs	r3, r3, #1
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	b29a      	uxth	r2, r3
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	2b04      	cmp	r3, #4
 800ca80:	d108      	bne.n	800ca94 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca86:	4a46      	ldr	r2, [pc, #280]	; (800cba0 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 800ca88:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca8e:	4a45      	ldr	r2, [pc, #276]	; (800cba4 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800ca90:	62da      	str	r2, [r3, #44]	; 0x2c
 800ca92:	e007      	b.n	800caa4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca98:	4a43      	ldr	r2, [pc, #268]	; (800cba8 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800ca9a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caa0:	4a42      	ldr	r2, [pc, #264]	; (800cbac <HAL_SPI_TransmitReceive_DMA+0x300>)
 800caa2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caa8:	4a41      	ldr	r2, [pc, #260]	; (800cbb0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800caaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cab0:	2200      	movs	r2, #0
 800cab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	330c      	adds	r3, #12
 800cabe:	4619      	mov	r1, r3
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cacc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cace:	f7fb fb71 	bl	80081b4 <HAL_DMA_Start_IT>
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d008      	beq.n	800caea <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cadc:	f043 0210 	orr.w	r2, r3, #16
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cae4:	2301      	movs	r3, #1
 800cae6:	75fb      	strb	r3, [r7, #23]

    goto error;
 800cae8:	e050      	b.n	800cb8c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	685a      	ldr	r2, [r3, #4]
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f042 0201 	orr.w	r2, r2, #1
 800caf8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cafe:	2200      	movs	r2, #0
 800cb00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb06:	2200      	movs	r2, #0
 800cb08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb0e:	2200      	movs	r2, #0
 800cb10:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb16:	2200      	movs	r2, #0
 800cb18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb22:	4619      	mov	r1, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	330c      	adds	r3, #12
 800cb2a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb30:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cb32:	f7fb fb3f 	bl	80081b4 <HAL_DMA_Start_IT>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d008      	beq.n	800cb4e <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb40:	f043 0210 	orr.w	r2, r3, #16
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	75fb      	strb	r3, [r7, #23]

    goto error;
 800cb4c:	e01e      	b.n	800cb8c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb58:	2b40      	cmp	r3, #64	; 0x40
 800cb5a:	d007      	beq.n	800cb6c <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb6a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	685a      	ldr	r2, [r3, #4]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f042 0220 	orr.w	r2, r2, #32
 800cb7a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	685a      	ldr	r2, [r3, #4]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f042 0202 	orr.w	r2, r2, #2
 800cb8a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cb94:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3718      	adds	r7, #24
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	0800d0bf 	.word	0x0800d0bf
 800cba4:	0800cf6b 	.word	0x0800cf6b
 800cba8:	0800d0db 	.word	0x0800d0db
 800cbac:	0800d013 	.word	0x0800d013
 800cbb0:	0800d0f7 	.word	0x0800d0f7

0800cbb4 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d00f      	beq.n	800cbe8 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7fb fb51 	bl	8008274 <HAL_DMA_Abort>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d007      	beq.n	800cbe8 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbdc:	f043 0210 	orr.w	r2, r3, #16
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00f      	beq.n	800cc10 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fb fb3d 	bl	8008274 <HAL_DMA_Abort>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d007      	beq.n	800cc10 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc04:	f043 0210 	orr.w	r2, r3, #16
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	685a      	ldr	r2, [r3, #4]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f022 0203 	bic.w	r2, r2, #3
 800cc1e:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2201      	movs	r2, #1
 800cc24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 800cc28:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3710      	adds	r7, #16
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
	...

0800cc34 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b088      	sub	sp, #32
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cc4c:	69bb      	ldr	r3, [r7, #24]
 800cc4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d10e      	bne.n	800cc74 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cc56:	69bb      	ldr	r3, [r7, #24]
 800cc58:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d009      	beq.n	800cc74 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d004      	beq.n	800cc74 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	4798      	blx	r3
    return;
 800cc72:	e0ce      	b.n	800ce12 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800cc74:	69bb      	ldr	r3, [r7, #24]
 800cc76:	f003 0302 	and.w	r3, r3, #2
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d009      	beq.n	800cc92 <HAL_SPI_IRQHandler+0x5e>
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d004      	beq.n	800cc92 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	4798      	blx	r3
    return;
 800cc90:	e0bf      	b.n	800ce12 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800cc92:	69bb      	ldr	r3, [r7, #24]
 800cc94:	f003 0320 	and.w	r3, r3, #32
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10a      	bne.n	800ccb2 <HAL_SPI_IRQHandler+0x7e>
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d105      	bne.n	800ccb2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800cca6:	69bb      	ldr	r3, [r7, #24]
 800cca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f000 80b0 	beq.w	800ce12 <HAL_SPI_IRQHandler+0x1de>
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	f003 0320 	and.w	r3, r3, #32
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f000 80aa 	beq.w	800ce12 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d023      	beq.n	800cd10 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ccce:	b2db      	uxtb	r3, r3
 800ccd0:	2b03      	cmp	r3, #3
 800ccd2:	d011      	beq.n	800ccf8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccd8:	f043 0204 	orr.w	r2, r3, #4
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cce0:	2300      	movs	r3, #0
 800cce2:	617b      	str	r3, [r7, #20]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	617b      	str	r3, [r7, #20]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	617b      	str	r3, [r7, #20]
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	e00b      	b.n	800cd10 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	613b      	str	r3, [r7, #16]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	613b      	str	r3, [r7, #16]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	613b      	str	r3, [r7, #16]
 800cd0c:	693b      	ldr	r3, [r7, #16]
        return;
 800cd0e:	e080      	b.n	800ce12 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	f003 0320 	and.w	r3, r3, #32
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d014      	beq.n	800cd44 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd1e:	f043 0201 	orr.w	r2, r3, #1
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cd26:	2300      	movs	r3, #0
 800cd28:	60fb      	str	r3, [r7, #12]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	689b      	ldr	r3, [r3, #8]
 800cd30:	60fb      	str	r3, [r7, #12]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd40:	601a      	str	r2, [r3, #0]
 800cd42:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800cd44:	69bb      	ldr	r3, [r7, #24]
 800cd46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d00c      	beq.n	800cd68 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd52:	f043 0208 	orr.w	r2, r3, #8
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	60bb      	str	r3, [r7, #8]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	689b      	ldr	r3, [r3, #8]
 800cd64:	60bb      	str	r3, [r7, #8]
 800cd66:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d04f      	beq.n	800ce10 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	685a      	ldr	r2, [r3, #4]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cd7e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2201      	movs	r2, #1
 800cd84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	f003 0302 	and.w	r3, r3, #2
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d104      	bne.n	800cd9c <HAL_SPI_IRQHandler+0x168>
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	f003 0301 	and.w	r3, r3, #1
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d034      	beq.n	800ce06 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	685a      	ldr	r2, [r3, #4]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f022 0203 	bic.w	r2, r2, #3
 800cdaa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d011      	beq.n	800cdd8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdb8:	4a17      	ldr	r2, [pc, #92]	; (800ce18 <HAL_SPI_IRQHandler+0x1e4>)
 800cdba:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7fb fa95 	bl	80082f0 <HAL_DMA_Abort_IT>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d005      	beq.n	800cdd8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d016      	beq.n	800ce0e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cde4:	4a0c      	ldr	r2, [pc, #48]	; (800ce18 <HAL_SPI_IRQHandler+0x1e4>)
 800cde6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7fb fa7f 	bl	80082f0 <HAL_DMA_Abort_IT>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d00a      	beq.n	800ce0e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800ce04:	e003      	b.n	800ce0e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 f844 	bl	800ce94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ce0c:	e000      	b.n	800ce10 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800ce0e:	bf00      	nop
    return;
 800ce10:	bf00      	nop
  }
}
 800ce12:	3720      	adds	r7, #32
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}
 800ce18:	0800d137 	.word	0x0800d137

0800ce1c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800ce24:	bf00      	nop
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ce38:	bf00      	nop
 800ce3a:	370c      	adds	r7, #12
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b083      	sub	sp, #12
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800ce4c:	bf00      	nop
 800ce4e:	370c      	adds	r7, #12
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ce60:	bf00      	nop
 800ce62:	370c      	adds	r7, #12
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr

0800ce6c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ce74:	bf00      	nop
 800ce76:	370c      	adds	r7, #12
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr

0800ce80 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b083      	sub	sp, #12
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ce88:	bf00      	nop
 800ce8a:	370c      	adds	r7, #12
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ce9c:	bf00      	nop
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr

0800cea8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b083      	sub	sp, #12
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ceb6:	b2db      	uxtb	r3, r3
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	370c      	adds	r7, #12
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr

0800cec4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b086      	sub	sp, #24
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ced2:	f7f9 fcd5 	bl	8006880 <HAL_GetTick>
 800ced6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f003 0320 	and.w	r3, r3, #32
 800cee2:	2b20      	cmp	r3, #32
 800cee4:	d03b      	beq.n	800cf5e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	685a      	ldr	r2, [r3, #4]
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f022 0220 	bic.w	r2, r2, #32
 800cef4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	685a      	ldr	r2, [r3, #4]
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f022 0202 	bic.w	r2, r2, #2
 800cf04:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cf06:	693a      	ldr	r2, [r7, #16]
 800cf08:	2164      	movs	r1, #100	; 0x64
 800cf0a:	6978      	ldr	r0, [r7, #20]
 800cf0c:	f000 fa9e 	bl	800d44c <SPI_EndRxTxTransaction>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d005      	beq.n	800cf22 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf1a:	f043 0220 	orr.w	r2, r3, #32
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	689b      	ldr	r3, [r3, #8]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d10a      	bne.n	800cf40 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	60fb      	str	r3, [r7, #12]
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	60fb      	str	r3, [r7, #12]
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	60fb      	str	r3, [r7, #12]
 800cf3e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	2200      	movs	r2, #0
 800cf44:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	2201      	movs	r2, #1
 800cf4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d003      	beq.n	800cf5e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cf56:	6978      	ldr	r0, [r7, #20]
 800cf58:	f7ff ff9c 	bl	800ce94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cf5c:	e002      	b.n	800cf64 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800cf5e:	6978      	ldr	r0, [r7, #20]
 800cf60:	f7ff ff5c 	bl	800ce1c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cf64:	3718      	adds	r7, #24
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b084      	sub	sp, #16
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf76:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf78:	f7f9 fc82 	bl	8006880 <HAL_GetTick>
 800cf7c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f003 0320 	and.w	r3, r3, #32
 800cf88:	2b20      	cmp	r3, #32
 800cf8a:	d03c      	beq.n	800d006 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	685a      	ldr	r2, [r3, #4]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f022 0220 	bic.w	r2, r2, #32
 800cf9a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d10d      	bne.n	800cfc0 <SPI_DMAReceiveCplt+0x56>
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	685b      	ldr	r3, [r3, #4]
 800cfa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cfac:	d108      	bne.n	800cfc0 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	685a      	ldr	r2, [r3, #4]
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f022 0203 	bic.w	r2, r2, #3
 800cfbc:	605a      	str	r2, [r3, #4]
 800cfbe:	e007      	b.n	800cfd0 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	685a      	ldr	r2, [r3, #4]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f022 0201 	bic.w	r2, r2, #1
 800cfce:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cfd0:	68ba      	ldr	r2, [r7, #8]
 800cfd2:	2164      	movs	r1, #100	; 0x64
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	f000 f9e1 	bl	800d39c <SPI_EndRxTransaction>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2220      	movs	r2, #32
 800cfe4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2201      	movs	r2, #1
 800cff2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d003      	beq.n	800d006 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f7ff ff48 	bl	800ce94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d004:	e002      	b.n	800d00c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800d006:	68f8      	ldr	r0, [r7, #12]
 800d008:	f7ff ff12 	bl	800ce30 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}

0800d012 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b084      	sub	sp, #16
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d01e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d020:	f7f9 fc2e 	bl	8006880 <HAL_GetTick>
 800d024:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f003 0320 	and.w	r3, r3, #32
 800d030:	2b20      	cmp	r3, #32
 800d032:	d030      	beq.n	800d096 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	685a      	ldr	r2, [r3, #4]
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f022 0220 	bic.w	r2, r2, #32
 800d042:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d044:	68ba      	ldr	r2, [r7, #8]
 800d046:	2164      	movs	r1, #100	; 0x64
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f000 f9ff 	bl	800d44c <SPI_EndRxTxTransaction>
 800d04e:	4603      	mov	r3, r0
 800d050:	2b00      	cmp	r3, #0
 800d052:	d005      	beq.n	800d060 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d058:	f043 0220 	orr.w	r2, r3, #32
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	685a      	ldr	r2, [r3, #4]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f022 0203 	bic.w	r2, r2, #3
 800d06e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2200      	movs	r2, #0
 800d074:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2200      	movs	r2, #0
 800d07a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2201      	movs	r2, #1
 800d082:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d003      	beq.n	800d096 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d08e:	68f8      	ldr	r0, [r7, #12]
 800d090:	f7ff ff00 	bl	800ce94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d094:	e002      	b.n	800d09c <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800d096:	68f8      	ldr	r0, [r7, #12]
 800d098:	f7ff fed4 	bl	800ce44 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b084      	sub	sp, #16
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ae:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d0b0:	68f8      	ldr	r0, [r7, #12]
 800d0b2:	f7ff fed1 	bl	800ce58 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d0b6:	bf00      	nop
 800d0b8:	3710      	adds	r7, #16
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b084      	sub	sp, #16
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ca:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d0cc:	68f8      	ldr	r0, [r7, #12]
 800d0ce:	f7ff fecd 	bl	800ce6c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d0d2:	bf00      	nop
 800d0d4:	3710      	adds	r7, #16
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d0da:	b580      	push	{r7, lr}
 800d0dc:	b084      	sub	sp, #16
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0e6:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f7ff fec9 	bl	800ce80 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d0ee:	bf00      	nop
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b084      	sub	sp, #16
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d102:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	685a      	ldr	r2, [r3, #4]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f022 0203 	bic.w	r2, r2, #3
 800d112:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d118:	f043 0210 	orr.w	r2, r3, #16
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2201      	movs	r2, #1
 800d124:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f7ff feb3 	bl	800ce94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d12e:	bf00      	nop
 800d130:	3710      	adds	r7, #16
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d136:	b580      	push	{r7, lr}
 800d138:	b084      	sub	sp, #16
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d142:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2200      	movs	r2, #0
 800d148:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2200      	movs	r2, #0
 800d150:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f7ff fe9e 	bl	800ce94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d158:	bf00      	nop
 800d15a:	3710      	adds	r7, #16
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b088      	sub	sp, #32
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	603b      	str	r3, [r7, #0]
 800d16c:	4613      	mov	r3, r2
 800d16e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d170:	f7f9 fb86 	bl	8006880 <HAL_GetTick>
 800d174:	4602      	mov	r2, r0
 800d176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d178:	1a9b      	subs	r3, r3, r2
 800d17a:	683a      	ldr	r2, [r7, #0]
 800d17c:	4413      	add	r3, r2
 800d17e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d180:	f7f9 fb7e 	bl	8006880 <HAL_GetTick>
 800d184:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d186:	4b39      	ldr	r3, [pc, #228]	; (800d26c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	015b      	lsls	r3, r3, #5
 800d18c:	0d1b      	lsrs	r3, r3, #20
 800d18e:	69fa      	ldr	r2, [r7, #28]
 800d190:	fb02 f303 	mul.w	r3, r2, r3
 800d194:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d196:	e054      	b.n	800d242 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d19e:	d050      	beq.n	800d242 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d1a0:	f7f9 fb6e 	bl	8006880 <HAL_GetTick>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	1ad3      	subs	r3, r2, r3
 800d1aa:	69fa      	ldr	r2, [r7, #28]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d902      	bls.n	800d1b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d13d      	bne.n	800d232 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	685a      	ldr	r2, [r3, #4]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d1c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d1ce:	d111      	bne.n	800d1f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1d8:	d004      	beq.n	800d1e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1e2:	d107      	bne.n	800d1f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	681a      	ldr	r2, [r3, #0]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d1fc:	d10f      	bne.n	800d21e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d20c:	601a      	str	r2, [r3, #0]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d21c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2201      	movs	r2, #1
 800d222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2200      	movs	r2, #0
 800d22a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d22e:	2303      	movs	r3, #3
 800d230:	e017      	b.n	800d262 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d101      	bne.n	800d23c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d238:	2300      	movs	r3, #0
 800d23a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	3b01      	subs	r3, #1
 800d240:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	689a      	ldr	r2, [r3, #8]
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	4013      	ands	r3, r2
 800d24c:	68ba      	ldr	r2, [r7, #8]
 800d24e:	429a      	cmp	r2, r3
 800d250:	bf0c      	ite	eq
 800d252:	2301      	moveq	r3, #1
 800d254:	2300      	movne	r3, #0
 800d256:	b2db      	uxtb	r3, r3
 800d258:	461a      	mov	r2, r3
 800d25a:	79fb      	ldrb	r3, [r7, #7]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d19b      	bne.n	800d198 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d260:	2300      	movs	r3, #0
}
 800d262:	4618      	mov	r0, r3
 800d264:	3720      	adds	r7, #32
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	20000024 	.word	0x20000024

0800d270 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b08a      	sub	sp, #40	; 0x28
 800d274:	af00      	add	r7, sp, #0
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	607a      	str	r2, [r7, #4]
 800d27c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d27e:	2300      	movs	r3, #0
 800d280:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d282:	f7f9 fafd 	bl	8006880 <HAL_GetTick>
 800d286:	4602      	mov	r2, r0
 800d288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28a:	1a9b      	subs	r3, r3, r2
 800d28c:	683a      	ldr	r2, [r7, #0]
 800d28e:	4413      	add	r3, r2
 800d290:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800d292:	f7f9 faf5 	bl	8006880 <HAL_GetTick>
 800d296:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	330c      	adds	r3, #12
 800d29e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d2a0:	4b3d      	ldr	r3, [pc, #244]	; (800d398 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	4613      	mov	r3, r2
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	4413      	add	r3, r2
 800d2aa:	00da      	lsls	r2, r3, #3
 800d2ac:	1ad3      	subs	r3, r2, r3
 800d2ae:	0d1b      	lsrs	r3, r3, #20
 800d2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2b2:	fb02 f303 	mul.w	r3, r2, r3
 800d2b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d2b8:	e060      	b.n	800d37c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d2c0:	d107      	bne.n	800d2d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d104      	bne.n	800d2d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	b2db      	uxtb	r3, r3
 800d2ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d2d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d8:	d050      	beq.n	800d37c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d2da:	f7f9 fad1 	bl	8006880 <HAL_GetTick>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	6a3b      	ldr	r3, [r7, #32]
 800d2e2:	1ad3      	subs	r3, r2, r3
 800d2e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d902      	bls.n	800d2f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d13d      	bne.n	800d36c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	685a      	ldr	r2, [r3, #4]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d2fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d308:	d111      	bne.n	800d32e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d312:	d004      	beq.n	800d31e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	689b      	ldr	r3, [r3, #8]
 800d318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d31c:	d107      	bne.n	800d32e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d32c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d336:	d10f      	bne.n	800d358 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d346:	601a      	str	r2, [r3, #0]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d356:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2201      	movs	r2, #1
 800d35c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2200      	movs	r2, #0
 800d364:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d368:	2303      	movs	r3, #3
 800d36a:	e010      	b.n	800d38e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d101      	bne.n	800d376 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d372:	2300      	movs	r3, #0
 800d374:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800d376:	69bb      	ldr	r3, [r7, #24]
 800d378:	3b01      	subs	r3, #1
 800d37a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	689a      	ldr	r2, [r3, #8]
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	4013      	ands	r3, r2
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d196      	bne.n	800d2ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d38c:	2300      	movs	r3, #0
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3728      	adds	r7, #40	; 0x28
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}
 800d396:	bf00      	nop
 800d398:	20000024 	.word	0x20000024

0800d39c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af02      	add	r7, sp, #8
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d3b0:	d111      	bne.n	800d3d6 <SPI_EndRxTransaction+0x3a>
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3ba:	d004      	beq.n	800d3c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d3c4:	d107      	bne.n	800d3d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3d4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	9300      	str	r3, [sp, #0]
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	2180      	movs	r1, #128	; 0x80
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f7ff febd 	bl	800d160 <SPI_WaitFlagStateUntilTimeout>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d007      	beq.n	800d3fc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3f0:	f043 0220 	orr.w	r2, r3, #32
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d3f8:	2303      	movs	r3, #3
 800d3fa:	e023      	b.n	800d444 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d404:	d11d      	bne.n	800d442 <SPI_EndRxTransaction+0xa6>
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d40e:	d004      	beq.n	800d41a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	689b      	ldr	r3, [r3, #8]
 800d414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d418:	d113      	bne.n	800d442 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	9300      	str	r3, [sp, #0]
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	2200      	movs	r2, #0
 800d422:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f7ff ff22 	bl	800d270 <SPI_WaitFifoStateUntilTimeout>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d007      	beq.n	800d442 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d436:	f043 0220 	orr.w	r2, r3, #32
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800d43e:	2303      	movs	r3, #3
 800d440:	e000      	b.n	800d444 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800d442:	2300      	movs	r3, #0
}
 800d444:	4618      	mov	r0, r3
 800d446:	3710      	adds	r7, #16
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b086      	sub	sp, #24
 800d450:	af02      	add	r7, sp, #8
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	9300      	str	r3, [sp, #0]
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	2200      	movs	r2, #0
 800d460:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	f7ff ff03 	bl	800d270 <SPI_WaitFifoStateUntilTimeout>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d007      	beq.n	800d480 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d474:	f043 0220 	orr.w	r2, r3, #32
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d47c:	2303      	movs	r3, #3
 800d47e:	e027      	b.n	800d4d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	2200      	movs	r2, #0
 800d488:	2180      	movs	r1, #128	; 0x80
 800d48a:	68f8      	ldr	r0, [r7, #12]
 800d48c:	f7ff fe68 	bl	800d160 <SPI_WaitFlagStateUntilTimeout>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d007      	beq.n	800d4a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d49a:	f043 0220 	orr.w	r2, r3, #32
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d4a2:	2303      	movs	r3, #3
 800d4a4:	e014      	b.n	800d4d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	9300      	str	r3, [sp, #0]
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d4b2:	68f8      	ldr	r0, [r7, #12]
 800d4b4:	f7ff fedc 	bl	800d270 <SPI_WaitFifoStateUntilTimeout>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d007      	beq.n	800d4ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4c2:	f043 0220 	orr.w	r2, r3, #32
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d4ca:	2303      	movs	r3, #3
 800d4cc:	e000      	b.n	800d4d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d4ce:	2300      	movs	r3, #0
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3710      	adds	r7, #16
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d101      	bne.n	800d4ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e049      	b.n	800d57e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d106      	bne.n	800d504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f7f8 fda2 	bl	8006048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2202      	movs	r2, #2
 800d508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	3304      	adds	r3, #4
 800d514:	4619      	mov	r1, r3
 800d516:	4610      	mov	r0, r2
 800d518:	f000 fb02 	bl	800db20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2201      	movs	r2, #1
 800d520:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2201      	movs	r2, #1
 800d528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2201      	movs	r2, #1
 800d530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2201      	movs	r2, #1
 800d538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2201      	movs	r2, #1
 800d540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2201      	movs	r2, #1
 800d548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2201      	movs	r2, #1
 800d550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2201      	movs	r2, #1
 800d558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2201      	movs	r2, #1
 800d560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2201      	movs	r2, #1
 800d568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2201      	movs	r2, #1
 800d570:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2201      	movs	r2, #1
 800d578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d57c:	2300      	movs	r3, #0
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3708      	adds	r7, #8
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
	...

0800d588 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d588:	b480      	push	{r7}
 800d58a:	b085      	sub	sp, #20
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d596:	b2db      	uxtb	r3, r3
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d001      	beq.n	800d5a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d59c:	2301      	movs	r3, #1
 800d59e:	e033      	b.n	800d608 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2202      	movs	r2, #2
 800d5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4a19      	ldr	r2, [pc, #100]	; (800d614 <HAL_TIM_Base_Start+0x8c>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d009      	beq.n	800d5c6 <HAL_TIM_Base_Start+0x3e>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5ba:	d004      	beq.n	800d5c6 <HAL_TIM_Base_Start+0x3e>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a15      	ldr	r2, [pc, #84]	; (800d618 <HAL_TIM_Base_Start+0x90>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d115      	bne.n	800d5f2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	689a      	ldr	r2, [r3, #8]
 800d5cc:	4b13      	ldr	r3, [pc, #76]	; (800d61c <HAL_TIM_Base_Start+0x94>)
 800d5ce:	4013      	ands	r3, r2
 800d5d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2b06      	cmp	r3, #6
 800d5d6:	d015      	beq.n	800d604 <HAL_TIM_Base_Start+0x7c>
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5de:	d011      	beq.n	800d604 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f042 0201 	orr.w	r2, r2, #1
 800d5ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5f0:	e008      	b.n	800d604 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f042 0201 	orr.w	r2, r2, #1
 800d600:	601a      	str	r2, [r3, #0]
 800d602:	e000      	b.n	800d606 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d604:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d606:	2300      	movs	r3, #0
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3714      	adds	r7, #20
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr
 800d614:	40012c00 	.word	0x40012c00
 800d618:	40014000 	.word	0x40014000
 800d61c:	00010007 	.word	0x00010007

0800d620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d620:	b480      	push	{r7}
 800d622:	b085      	sub	sp, #20
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	2b01      	cmp	r3, #1
 800d632:	d001      	beq.n	800d638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d634:	2301      	movs	r3, #1
 800d636:	e03b      	b.n	800d6b0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2202      	movs	r2, #2
 800d63c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	68da      	ldr	r2, [r3, #12]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f042 0201 	orr.w	r2, r2, #1
 800d64e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a19      	ldr	r2, [pc, #100]	; (800d6bc <HAL_TIM_Base_Start_IT+0x9c>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d009      	beq.n	800d66e <HAL_TIM_Base_Start_IT+0x4e>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d662:	d004      	beq.n	800d66e <HAL_TIM_Base_Start_IT+0x4e>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	4a15      	ldr	r2, [pc, #84]	; (800d6c0 <HAL_TIM_Base_Start_IT+0xa0>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d115      	bne.n	800d69a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	689a      	ldr	r2, [r3, #8]
 800d674:	4b13      	ldr	r3, [pc, #76]	; (800d6c4 <HAL_TIM_Base_Start_IT+0xa4>)
 800d676:	4013      	ands	r3, r2
 800d678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2b06      	cmp	r3, #6
 800d67e:	d015      	beq.n	800d6ac <HAL_TIM_Base_Start_IT+0x8c>
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d686:	d011      	beq.n	800d6ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f042 0201 	orr.w	r2, r2, #1
 800d696:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d698:	e008      	b.n	800d6ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f042 0201 	orr.w	r2, r2, #1
 800d6a8:	601a      	str	r2, [r3, #0]
 800d6aa:	e000      	b.n	800d6ae <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d6ae:	2300      	movs	r3, #0
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3714      	adds	r7, #20
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr
 800d6bc:	40012c00 	.word	0x40012c00
 800d6c0:	40014000 	.word	0x40014000
 800d6c4:	00010007 	.word	0x00010007

0800d6c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	68da      	ldr	r2, [r3, #12]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f022 0201 	bic.w	r2, r2, #1
 800d6de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	6a1a      	ldr	r2, [r3, #32]
 800d6e6:	f241 1311 	movw	r3, #4369	; 0x1111
 800d6ea:	4013      	ands	r3, r2
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d10f      	bne.n	800d710 <HAL_TIM_Base_Stop_IT+0x48>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	6a1a      	ldr	r2, [r3, #32]
 800d6f6:	f240 4344 	movw	r3, #1092	; 0x444
 800d6fa:	4013      	ands	r3, r2
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d107      	bne.n	800d710 <HAL_TIM_Base_Stop_IT+0x48>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f022 0201 	bic.w	r2, r2, #1
 800d70e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2201      	movs	r2, #1
 800d714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d718:	2300      	movs	r3, #0
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	370c      	adds	r7, #12
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr

0800d726 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b084      	sub	sp, #16
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	691b      	ldr	r3, [r3, #16]
 800d73c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	f003 0302 	and.w	r3, r3, #2
 800d744:	2b00      	cmp	r3, #0
 800d746:	d020      	beq.n	800d78a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f003 0302 	and.w	r3, r3, #2
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d01b      	beq.n	800d78a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f06f 0202 	mvn.w	r2, #2
 800d75a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2201      	movs	r2, #1
 800d760:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	699b      	ldr	r3, [r3, #24]
 800d768:	f003 0303 	and.w	r3, r3, #3
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d003      	beq.n	800d778 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 f9b7 	bl	800dae4 <HAL_TIM_IC_CaptureCallback>
 800d776:	e005      	b.n	800d784 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f000 f9a9 	bl	800dad0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 f9ba 	bl	800daf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2200      	movs	r2, #0
 800d788:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	f003 0304 	and.w	r3, r3, #4
 800d790:	2b00      	cmp	r3, #0
 800d792:	d020      	beq.n	800d7d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f003 0304 	and.w	r3, r3, #4
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d01b      	beq.n	800d7d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f06f 0204 	mvn.w	r2, #4
 800d7a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2202      	movs	r2, #2
 800d7ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	699b      	ldr	r3, [r3, #24]
 800d7b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d003      	beq.n	800d7c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 f991 	bl	800dae4 <HAL_TIM_IC_CaptureCallback>
 800d7c2:	e005      	b.n	800d7d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 f983 	bl	800dad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 f994 	bl	800daf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	f003 0308 	and.w	r3, r3, #8
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d020      	beq.n	800d822 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f003 0308 	and.w	r3, r3, #8
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d01b      	beq.n	800d822 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f06f 0208 	mvn.w	r2, #8
 800d7f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2204      	movs	r2, #4
 800d7f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	69db      	ldr	r3, [r3, #28]
 800d800:	f003 0303 	and.w	r3, r3, #3
 800d804:	2b00      	cmp	r3, #0
 800d806:	d003      	beq.n	800d810 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 f96b 	bl	800dae4 <HAL_TIM_IC_CaptureCallback>
 800d80e:	e005      	b.n	800d81c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 f95d 	bl	800dad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 f96e 	bl	800daf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	f003 0310 	and.w	r3, r3, #16
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d020      	beq.n	800d86e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f003 0310 	and.w	r3, r3, #16
 800d832:	2b00      	cmp	r3, #0
 800d834:	d01b      	beq.n	800d86e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f06f 0210 	mvn.w	r2, #16
 800d83e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2208      	movs	r2, #8
 800d844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	69db      	ldr	r3, [r3, #28]
 800d84c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d850:	2b00      	cmp	r3, #0
 800d852:	d003      	beq.n	800d85c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f000 f945 	bl	800dae4 <HAL_TIM_IC_CaptureCallback>
 800d85a:	e005      	b.n	800d868 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 f937 	bl	800dad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 f948 	bl	800daf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2200      	movs	r2, #0
 800d86c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	f003 0301 	and.w	r3, r3, #1
 800d874:	2b00      	cmp	r3, #0
 800d876:	d00c      	beq.n	800d892 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f003 0301 	and.w	r3, r3, #1
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d007      	beq.n	800d892 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f06f 0201 	mvn.w	r2, #1
 800d88a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 f915 	bl	800dabc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d00c      	beq.n	800d8b6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d007      	beq.n	800d8b6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d8ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f000 faa3 	bl	800ddfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d00c      	beq.n	800d8da <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d007      	beq.n	800d8da <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d8d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f000 fa9b 	bl	800de10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00c      	beq.n	800d8fe <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d007      	beq.n	800d8fe <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d8f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 f907 	bl	800db0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	f003 0320 	and.w	r3, r3, #32
 800d904:	2b00      	cmp	r3, #0
 800d906:	d00c      	beq.n	800d922 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f003 0320 	and.w	r3, r3, #32
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d007      	beq.n	800d922 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f06f 0220 	mvn.w	r2, #32
 800d91a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f000 fa63 	bl	800dde8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d922:	bf00      	nop
 800d924:	3710      	adds	r7, #16
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b084      	sub	sp, #16
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
 800d932:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d934:	2300      	movs	r3, #0
 800d936:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d101      	bne.n	800d946 <HAL_TIM_ConfigClockSource+0x1c>
 800d942:	2302      	movs	r3, #2
 800d944:	e0b6      	b.n	800dab4 <HAL_TIM_ConfigClockSource+0x18a>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2201      	movs	r2, #1
 800d94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2202      	movs	r2, #2
 800d952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	689b      	ldr	r3, [r3, #8]
 800d95c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d964:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d968:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d970:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	68ba      	ldr	r2, [r7, #8]
 800d978:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d982:	d03e      	beq.n	800da02 <HAL_TIM_ConfigClockSource+0xd8>
 800d984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d988:	f200 8087 	bhi.w	800da9a <HAL_TIM_ConfigClockSource+0x170>
 800d98c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d990:	f000 8086 	beq.w	800daa0 <HAL_TIM_ConfigClockSource+0x176>
 800d994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d998:	d87f      	bhi.n	800da9a <HAL_TIM_ConfigClockSource+0x170>
 800d99a:	2b70      	cmp	r3, #112	; 0x70
 800d99c:	d01a      	beq.n	800d9d4 <HAL_TIM_ConfigClockSource+0xaa>
 800d99e:	2b70      	cmp	r3, #112	; 0x70
 800d9a0:	d87b      	bhi.n	800da9a <HAL_TIM_ConfigClockSource+0x170>
 800d9a2:	2b60      	cmp	r3, #96	; 0x60
 800d9a4:	d050      	beq.n	800da48 <HAL_TIM_ConfigClockSource+0x11e>
 800d9a6:	2b60      	cmp	r3, #96	; 0x60
 800d9a8:	d877      	bhi.n	800da9a <HAL_TIM_ConfigClockSource+0x170>
 800d9aa:	2b50      	cmp	r3, #80	; 0x50
 800d9ac:	d03c      	beq.n	800da28 <HAL_TIM_ConfigClockSource+0xfe>
 800d9ae:	2b50      	cmp	r3, #80	; 0x50
 800d9b0:	d873      	bhi.n	800da9a <HAL_TIM_ConfigClockSource+0x170>
 800d9b2:	2b40      	cmp	r3, #64	; 0x40
 800d9b4:	d058      	beq.n	800da68 <HAL_TIM_ConfigClockSource+0x13e>
 800d9b6:	2b40      	cmp	r3, #64	; 0x40
 800d9b8:	d86f      	bhi.n	800da9a <HAL_TIM_ConfigClockSource+0x170>
 800d9ba:	2b30      	cmp	r3, #48	; 0x30
 800d9bc:	d064      	beq.n	800da88 <HAL_TIM_ConfigClockSource+0x15e>
 800d9be:	2b30      	cmp	r3, #48	; 0x30
 800d9c0:	d86b      	bhi.n	800da9a <HAL_TIM_ConfigClockSource+0x170>
 800d9c2:	2b20      	cmp	r3, #32
 800d9c4:	d060      	beq.n	800da88 <HAL_TIM_ConfigClockSource+0x15e>
 800d9c6:	2b20      	cmp	r3, #32
 800d9c8:	d867      	bhi.n	800da9a <HAL_TIM_ConfigClockSource+0x170>
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d05c      	beq.n	800da88 <HAL_TIM_ConfigClockSource+0x15e>
 800d9ce:	2b10      	cmp	r3, #16
 800d9d0:	d05a      	beq.n	800da88 <HAL_TIM_ConfigClockSource+0x15e>
 800d9d2:	e062      	b.n	800da9a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d9e4:	f000 f97a 	bl	800dcdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	689b      	ldr	r3, [r3, #8]
 800d9ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d9f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	68ba      	ldr	r2, [r7, #8]
 800d9fe:	609a      	str	r2, [r3, #8]
      break;
 800da00:	e04f      	b.n	800daa2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800da12:	f000 f963 	bl	800dcdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	689a      	ldr	r2, [r3, #8]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800da24:	609a      	str	r2, [r3, #8]
      break;
 800da26:	e03c      	b.n	800daa2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800da34:	461a      	mov	r2, r3
 800da36:	f000 f8d7 	bl	800dbe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	2150      	movs	r1, #80	; 0x50
 800da40:	4618      	mov	r0, r3
 800da42:	f000 f930 	bl	800dca6 <TIM_ITRx_SetConfig>
      break;
 800da46:	e02c      	b.n	800daa2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800da54:	461a      	mov	r2, r3
 800da56:	f000 f8f6 	bl	800dc46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2160      	movs	r1, #96	; 0x60
 800da60:	4618      	mov	r0, r3
 800da62:	f000 f920 	bl	800dca6 <TIM_ITRx_SetConfig>
      break;
 800da66:	e01c      	b.n	800daa2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800da74:	461a      	mov	r2, r3
 800da76:	f000 f8b7 	bl	800dbe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2140      	movs	r1, #64	; 0x40
 800da80:	4618      	mov	r0, r3
 800da82:	f000 f910 	bl	800dca6 <TIM_ITRx_SetConfig>
      break;
 800da86:	e00c      	b.n	800daa2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4619      	mov	r1, r3
 800da92:	4610      	mov	r0, r2
 800da94:	f000 f907 	bl	800dca6 <TIM_ITRx_SetConfig>
      break;
 800da98:	e003      	b.n	800daa2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800da9a:	2301      	movs	r3, #1
 800da9c:	73fb      	strb	r3, [r7, #15]
      break;
 800da9e:	e000      	b.n	800daa2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800daa0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2201      	movs	r2, #1
 800daa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3710      	adds	r7, #16
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b083      	sub	sp, #12
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800dac4:	bf00      	nop
 800dac6:	370c      	adds	r7, #12
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr

0800dad0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dad8:	bf00      	nop
 800dada:	370c      	adds	r7, #12
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr

0800dae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800daec:	bf00      	nop
 800daee:	370c      	adds	r7, #12
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr

0800daf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b083      	sub	sp, #12
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800db00:	bf00      	nop
 800db02:	370c      	adds	r7, #12
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr

0800db0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800db14:	bf00      	nop
 800db16:	370c      	adds	r7, #12
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr

0800db20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800db20:	b480      	push	{r7}
 800db22:	b085      	sub	sp, #20
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4a2a      	ldr	r2, [pc, #168]	; (800dbdc <TIM_Base_SetConfig+0xbc>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d003      	beq.n	800db40 <TIM_Base_SetConfig+0x20>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db3e:	d108      	bne.n	800db52 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	68fa      	ldr	r2, [r7, #12]
 800db4e:	4313      	orrs	r3, r2
 800db50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	4a21      	ldr	r2, [pc, #132]	; (800dbdc <TIM_Base_SetConfig+0xbc>)
 800db56:	4293      	cmp	r3, r2
 800db58:	d00b      	beq.n	800db72 <TIM_Base_SetConfig+0x52>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db60:	d007      	beq.n	800db72 <TIM_Base_SetConfig+0x52>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	4a1e      	ldr	r2, [pc, #120]	; (800dbe0 <TIM_Base_SetConfig+0xc0>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d003      	beq.n	800db72 <TIM_Base_SetConfig+0x52>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	4a1d      	ldr	r2, [pc, #116]	; (800dbe4 <TIM_Base_SetConfig+0xc4>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d108      	bne.n	800db84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	68db      	ldr	r3, [r3, #12]
 800db7e:	68fa      	ldr	r2, [r7, #12]
 800db80:	4313      	orrs	r3, r2
 800db82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	695b      	ldr	r3, [r3, #20]
 800db8e:	4313      	orrs	r3, r2
 800db90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	68fa      	ldr	r2, [r7, #12]
 800db96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	689a      	ldr	r2, [r3, #8]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	4a0c      	ldr	r2, [pc, #48]	; (800dbdc <TIM_Base_SetConfig+0xbc>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d007      	beq.n	800dbc0 <TIM_Base_SetConfig+0xa0>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	4a0b      	ldr	r2, [pc, #44]	; (800dbe0 <TIM_Base_SetConfig+0xc0>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d003      	beq.n	800dbc0 <TIM_Base_SetConfig+0xa0>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	4a0a      	ldr	r2, [pc, #40]	; (800dbe4 <TIM_Base_SetConfig+0xc4>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d103      	bne.n	800dbc8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	691a      	ldr	r2, [r3, #16]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	615a      	str	r2, [r3, #20]
}
 800dbce:	bf00      	nop
 800dbd0:	3714      	adds	r7, #20
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr
 800dbda:	bf00      	nop
 800dbdc:	40012c00 	.word	0x40012c00
 800dbe0:	40014000 	.word	0x40014000
 800dbe4:	40014400 	.word	0x40014400

0800dbe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b087      	sub	sp, #28
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	60f8      	str	r0, [r7, #12]
 800dbf0:	60b9      	str	r1, [r7, #8]
 800dbf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6a1b      	ldr	r3, [r3, #32]
 800dbf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6a1b      	ldr	r3, [r3, #32]
 800dbfe:	f023 0201 	bic.w	r2, r3, #1
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	699b      	ldr	r3, [r3, #24]
 800dc0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dc12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	011b      	lsls	r3, r3, #4
 800dc18:	693a      	ldr	r2, [r7, #16]
 800dc1a:	4313      	orrs	r3, r2
 800dc1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	f023 030a 	bic.w	r3, r3, #10
 800dc24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dc26:	697a      	ldr	r2, [r7, #20]
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	693a      	ldr	r2, [r7, #16]
 800dc32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	697a      	ldr	r2, [r7, #20]
 800dc38:	621a      	str	r2, [r3, #32]
}
 800dc3a:	bf00      	nop
 800dc3c:	371c      	adds	r7, #28
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr

0800dc46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc46:	b480      	push	{r7}
 800dc48:	b087      	sub	sp, #28
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	60f8      	str	r0, [r7, #12]
 800dc4e:	60b9      	str	r1, [r7, #8]
 800dc50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	6a1b      	ldr	r3, [r3, #32]
 800dc56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	6a1b      	ldr	r3, [r3, #32]
 800dc5c:	f023 0210 	bic.w	r2, r3, #16
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	699b      	ldr	r3, [r3, #24]
 800dc68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dc70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	031b      	lsls	r3, r3, #12
 800dc76:	693a      	ldr	r2, [r7, #16]
 800dc78:	4313      	orrs	r3, r2
 800dc7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dc82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	011b      	lsls	r3, r3, #4
 800dc88:	697a      	ldr	r2, [r7, #20]
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	693a      	ldr	r2, [r7, #16]
 800dc92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	697a      	ldr	r2, [r7, #20]
 800dc98:	621a      	str	r2, [r3, #32]
}
 800dc9a:	bf00      	nop
 800dc9c:	371c      	adds	r7, #28
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca4:	4770      	bx	lr

0800dca6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dca6:	b480      	push	{r7}
 800dca8:	b085      	sub	sp, #20
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
 800dcae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dcbe:	683a      	ldr	r2, [r7, #0]
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	f043 0307 	orr.w	r3, r3, #7
 800dcc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	609a      	str	r2, [r3, #8]
}
 800dcd0:	bf00      	nop
 800dcd2:	3714      	adds	r7, #20
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr

0800dcdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dcdc:	b480      	push	{r7}
 800dcde:	b087      	sub	sp, #28
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	607a      	str	r2, [r7, #4]
 800dce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	689b      	ldr	r3, [r3, #8]
 800dcee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dcf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	021a      	lsls	r2, r3, #8
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	431a      	orrs	r2, r3
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	4313      	orrs	r3, r2
 800dd04:	697a      	ldr	r2, [r7, #20]
 800dd06:	4313      	orrs	r3, r2
 800dd08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	697a      	ldr	r2, [r7, #20]
 800dd0e:	609a      	str	r2, [r3, #8]
}
 800dd10:	bf00      	nop
 800dd12:	371c      	adds	r7, #28
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b085      	sub	sp, #20
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	d101      	bne.n	800dd34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dd30:	2302      	movs	r3, #2
 800dd32:	e04f      	b.n	800ddd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2201      	movs	r2, #1
 800dd38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2202      	movs	r2, #2
 800dd40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4a21      	ldr	r2, [pc, #132]	; (800dde0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d108      	bne.n	800dd70 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dd64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	68fa      	ldr	r2, [r7, #12]
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	68fa      	ldr	r2, [r7, #12]
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	68fa      	ldr	r2, [r7, #12]
 800dd88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4a14      	ldr	r2, [pc, #80]	; (800dde0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d009      	beq.n	800dda8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd9c:	d004      	beq.n	800dda8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4a10      	ldr	r2, [pc, #64]	; (800dde4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d10c      	bne.n	800ddc2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ddae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	689b      	ldr	r3, [r3, #8]
 800ddb4:	68ba      	ldr	r2, [r7, #8]
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	68ba      	ldr	r2, [r7, #8]
 800ddc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ddd2:	2300      	movs	r3, #0
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3714      	adds	r7, #20
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr
 800dde0:	40012c00 	.word	0x40012c00
 800dde4:	40014000 	.word	0x40014000

0800dde8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b083      	sub	sp, #12
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ddf0:	bf00      	nop
 800ddf2:	370c      	adds	r7, #12
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr

0800ddfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b083      	sub	sp, #12
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800de04:	bf00      	nop
 800de06:	370c      	adds	r7, #12
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr

0800de10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800de10:	b480      	push	{r7}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800de18:	bf00      	nop
 800de1a:	370c      	adds	r7, #12
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d101      	bne.n	800de36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de32:	2301      	movs	r3, #1
 800de34:	e040      	b.n	800deb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d106      	bne.n	800de4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2200      	movs	r2, #0
 800de42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7f8 fb4a 	bl	80064e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2224      	movs	r2, #36	; 0x24
 800de50:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	681a      	ldr	r2, [r3, #0]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f022 0201 	bic.w	r2, r2, #1
 800de60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de66:	2b00      	cmp	r3, #0
 800de68:	d002      	beq.n	800de70 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f000 feb0 	bl	800ebd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f000 fc81 	bl	800e778 <UART_SetConfig>
 800de76:	4603      	mov	r3, r0
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d101      	bne.n	800de80 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800de7c:	2301      	movs	r3, #1
 800de7e:	e01b      	b.n	800deb8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	685a      	ldr	r2, [r3, #4]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	689a      	ldr	r2, [r3, #8]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	681a      	ldr	r2, [r3, #0]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	f042 0201 	orr.w	r2, r2, #1
 800deae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 ff2f 	bl	800ed14 <UART_CheckIdleState>
 800deb6:	4603      	mov	r3, r0
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3708      	adds	r7, #8
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b08a      	sub	sp, #40	; 0x28
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	4613      	mov	r3, r2
 800decc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ded4:	2b20      	cmp	r3, #32
 800ded6:	d137      	bne.n	800df48 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d002      	beq.n	800dee4 <HAL_UART_Receive_DMA+0x24>
 800dede:	88fb      	ldrh	r3, [r7, #6]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d101      	bne.n	800dee8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800dee4:	2301      	movs	r3, #1
 800dee6:	e030      	b.n	800df4a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2200      	movs	r2, #0
 800deec:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4a18      	ldr	r2, [pc, #96]	; (800df54 <HAL_UART_Receive_DMA+0x94>)
 800def4:	4293      	cmp	r3, r2
 800def6:	d01f      	beq.n	800df38 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df02:	2b00      	cmp	r3, #0
 800df04:	d018      	beq.n	800df38 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	e853 3f00 	ldrex	r3, [r3]
 800df12:	613b      	str	r3, [r7, #16]
   return(result);
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800df1a:	627b      	str	r3, [r7, #36]	; 0x24
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	461a      	mov	r2, r3
 800df22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df24:	623b      	str	r3, [r7, #32]
 800df26:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df28:	69f9      	ldr	r1, [r7, #28]
 800df2a:	6a3a      	ldr	r2, [r7, #32]
 800df2c:	e841 2300 	strex	r3, r2, [r1]
 800df30:	61bb      	str	r3, [r7, #24]
   return(result);
 800df32:	69bb      	ldr	r3, [r7, #24]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d1e6      	bne.n	800df06 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800df38:	88fb      	ldrh	r3, [r7, #6]
 800df3a:	461a      	mov	r2, r3
 800df3c:	68b9      	ldr	r1, [r7, #8]
 800df3e:	68f8      	ldr	r0, [r7, #12]
 800df40:	f000 fff8 	bl	800ef34 <UART_Start_Receive_DMA>
 800df44:	4603      	mov	r3, r0
 800df46:	e000      	b.n	800df4a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800df48:	2302      	movs	r3, #2
  }
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3728      	adds	r7, #40	; 0x28
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
 800df52:	bf00      	nop
 800df54:	40008000 	.word	0x40008000

0800df58 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b0a0      	sub	sp, #128	; 0x80
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df68:	e853 3f00 	ldrex	r3, [r3]
 800df6c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800df6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df70:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800df74:	67fb      	str	r3, [r7, #124]	; 0x7c
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	461a      	mov	r2, r3
 800df7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df7e:	66bb      	str	r3, [r7, #104]	; 0x68
 800df80:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df82:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800df84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df86:	e841 2300 	strex	r3, r2, [r1]
 800df8a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800df8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d1e6      	bne.n	800df60 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	3308      	adds	r3, #8
 800df98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df9c:	e853 3f00 	ldrex	r3, [r3]
 800dfa0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800dfa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfa4:	f023 0301 	bic.w	r3, r3, #1
 800dfa8:	67bb      	str	r3, [r7, #120]	; 0x78
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	3308      	adds	r3, #8
 800dfb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dfb2:	657a      	str	r2, [r7, #84]	; 0x54
 800dfb4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dfb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dfba:	e841 2300 	strex	r3, r2, [r1]
 800dfbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dfc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d1e5      	bne.n	800df92 <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfca:	2b01      	cmp	r3, #1
 800dfcc:	d118      	bne.n	800e000 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfd6:	e853 3f00 	ldrex	r3, [r3]
 800dfda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfde:	f023 0310 	bic.w	r3, r3, #16
 800dfe2:	677b      	str	r3, [r7, #116]	; 0x74
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	461a      	mov	r2, r3
 800dfea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dfec:	643b      	str	r3, [r7, #64]	; 0x40
 800dfee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dff0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dff4:	e841 2300 	strex	r3, r2, [r1]
 800dff8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d1e6      	bne.n	800dfce <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e00a:	2b80      	cmp	r3, #128	; 0x80
 800e00c:	d137      	bne.n	800e07e <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	3308      	adds	r3, #8
 800e014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e016:	6a3b      	ldr	r3, [r7, #32]
 800e018:	e853 3f00 	ldrex	r3, [r3]
 800e01c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e024:	673b      	str	r3, [r7, #112]	; 0x70
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	3308      	adds	r3, #8
 800e02c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e02e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e030:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e036:	e841 2300 	strex	r3, r2, [r1]
 800e03a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d1e5      	bne.n	800e00e <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e046:	2b00      	cmp	r3, #0
 800e048:	d019      	beq.n	800e07e <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e04e:	2200      	movs	r2, #0
 800e050:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e056:	4618      	mov	r0, r3
 800e058:	f7fa f90c 	bl	8008274 <HAL_DMA_Abort>
 800e05c:	4603      	mov	r3, r0
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d00d      	beq.n	800e07e <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e066:	4618      	mov	r0, r3
 800e068:	f7fa fa32 	bl	80084d0 <HAL_DMA_GetError>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b20      	cmp	r3, #32
 800e070:	d105      	bne.n	800e07e <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2210      	movs	r2, #16
 800e076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e07a:	2303      	movs	r3, #3
 800e07c:	e063      	b.n	800e146 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e088:	2b40      	cmp	r3, #64	; 0x40
 800e08a:	d137      	bne.n	800e0fc <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	3308      	adds	r3, #8
 800e092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	e853 3f00 	ldrex	r3, [r3]
 800e09a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	3308      	adds	r3, #8
 800e0aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e0ac:	61ba      	str	r2, [r7, #24]
 800e0ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0b0:	6979      	ldr	r1, [r7, #20]
 800e0b2:	69ba      	ldr	r2, [r7, #24]
 800e0b4:	e841 2300 	strex	r3, r2, [r1]
 800e0b8:	613b      	str	r3, [r7, #16]
   return(result);
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d1e5      	bne.n	800e08c <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d019      	beq.n	800e0fc <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7fa f8cd 	bl	8008274 <HAL_DMA_Abort>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00d      	beq.n	800e0fc <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7fa f9f3 	bl	80084d0 <HAL_DMA_GetError>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	2b20      	cmp	r3, #32
 800e0ee:	d105      	bne.n	800e0fc <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2210      	movs	r2, #16
 800e0f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e0f8:	2303      	movs	r3, #3
 800e0fa:	e024      	b.n	800e146 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2200      	movs	r2, #0
 800e108:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	220f      	movs	r2, #15
 800e112:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	8b1b      	ldrh	r3, [r3, #24]
 800e11a:	b29a      	uxth	r2, r3
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f042 0208 	orr.w	r2, r2, #8
 800e124:	b292      	uxth	r2, r2
 800e126:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2220      	movs	r2, #32
 800e12c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2220      	movs	r2, #32
 800e132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2200      	movs	r2, #0
 800e13a:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2200      	movs	r2, #0
 800e140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e144:	2300      	movs	r3, #0
}
 800e146:	4618      	mov	r0, r3
 800e148:	3780      	adds	r7, #128	; 0x80
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
	...

0800e150 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b0ba      	sub	sp, #232	; 0xe8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	69db      	ldr	r3, [r3, #28]
 800e15e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	689b      	ldr	r3, [r3, #8]
 800e172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e176:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e17a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e17e:	4013      	ands	r3, r2
 800e180:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d115      	bne.n	800e1b8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e190:	f003 0320 	and.w	r3, r3, #32
 800e194:	2b00      	cmp	r3, #0
 800e196:	d00f      	beq.n	800e1b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e19c:	f003 0320 	and.w	r3, r3, #32
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d009      	beq.n	800e1b8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	f000 82ae 	beq.w	800e70a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	4798      	blx	r3
      }
      return;
 800e1b6:	e2a8      	b.n	800e70a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800e1b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	f000 8117 	beq.w	800e3f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e1c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1c6:	f003 0301 	and.w	r3, r3, #1
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d106      	bne.n	800e1dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e1ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e1d2:	4b85      	ldr	r3, [pc, #532]	; (800e3e8 <HAL_UART_IRQHandler+0x298>)
 800e1d4:	4013      	ands	r3, r2
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	f000 810a 	beq.w	800e3f0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e1dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1e0:	f003 0301 	and.w	r3, r3, #1
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d011      	beq.n	800e20c <HAL_UART_IRQHandler+0xbc>
 800e1e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d00b      	beq.n	800e20c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e202:	f043 0201 	orr.w	r2, r3, #1
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e20c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e210:	f003 0302 	and.w	r3, r3, #2
 800e214:	2b00      	cmp	r3, #0
 800e216:	d011      	beq.n	800e23c <HAL_UART_IRQHandler+0xec>
 800e218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e21c:	f003 0301 	and.w	r3, r3, #1
 800e220:	2b00      	cmp	r3, #0
 800e222:	d00b      	beq.n	800e23c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	2202      	movs	r2, #2
 800e22a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e232:	f043 0204 	orr.w	r2, r3, #4
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e240:	f003 0304 	and.w	r3, r3, #4
 800e244:	2b00      	cmp	r3, #0
 800e246:	d011      	beq.n	800e26c <HAL_UART_IRQHandler+0x11c>
 800e248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e24c:	f003 0301 	and.w	r3, r3, #1
 800e250:	2b00      	cmp	r3, #0
 800e252:	d00b      	beq.n	800e26c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2204      	movs	r2, #4
 800e25a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e262:	f043 0202 	orr.w	r2, r3, #2
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e26c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e270:	f003 0308 	and.w	r3, r3, #8
 800e274:	2b00      	cmp	r3, #0
 800e276:	d017      	beq.n	800e2a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e27c:	f003 0320 	and.w	r3, r3, #32
 800e280:	2b00      	cmp	r3, #0
 800e282:	d105      	bne.n	800e290 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e288:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d00b      	beq.n	800e2a8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	2208      	movs	r2, #8
 800e296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e29e:	f043 0208 	orr.w	r2, r3, #8
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e2a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d012      	beq.n	800e2da <HAL_UART_IRQHandler+0x18a>
 800e2b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00c      	beq.n	800e2da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2d0:	f043 0220 	orr.w	r2, r3, #32
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f000 8214 	beq.w	800e70e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e2e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2ea:	f003 0320 	and.w	r3, r3, #32
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d00d      	beq.n	800e30e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e2f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2f6:	f003 0320 	and.w	r3, r3, #32
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d007      	beq.n	800e30e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e302:	2b00      	cmp	r3, #0
 800e304:	d003      	beq.n	800e30e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e314:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	689b      	ldr	r3, [r3, #8]
 800e31e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e322:	2b40      	cmp	r3, #64	; 0x40
 800e324:	d005      	beq.n	800e332 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e32a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d04f      	beq.n	800e3d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f000 fec4 	bl	800f0c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e342:	2b40      	cmp	r3, #64	; 0x40
 800e344:	d141      	bne.n	800e3ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	3308      	adds	r3, #8
 800e34c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e350:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e354:	e853 3f00 	ldrex	r3, [r3]
 800e358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e35c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	3308      	adds	r3, #8
 800e36e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e372:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e37a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e37e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e382:	e841 2300 	strex	r3, r2, [r1]
 800e386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e38a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d1d9      	bne.n	800e346 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e396:	2b00      	cmp	r3, #0
 800e398:	d013      	beq.n	800e3c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e39e:	4a13      	ldr	r2, [pc, #76]	; (800e3ec <HAL_UART_IRQHandler+0x29c>)
 800e3a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7f9 ffa2 	bl	80082f0 <HAL_DMA_Abort_IT>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d017      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800e3bc:	4610      	mov	r0, r2
 800e3be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3c0:	e00f      	b.n	800e3e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 f9c2 	bl	800e74c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3c8:	e00b      	b.n	800e3e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 f9be 	bl	800e74c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3d0:	e007      	b.n	800e3e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f000 f9ba 	bl	800e74c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800e3e0:	e195      	b.n	800e70e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3e2:	bf00      	nop
    return;
 800e3e4:	e193      	b.n	800e70e <HAL_UART_IRQHandler+0x5be>
 800e3e6:	bf00      	nop
 800e3e8:	04000120 	.word	0x04000120
 800e3ec:	0800f371 	.word	0x0800f371

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	f040 814e 	bne.w	800e696 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e3fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3fe:	f003 0310 	and.w	r3, r3, #16
 800e402:	2b00      	cmp	r3, #0
 800e404:	f000 8147 	beq.w	800e696 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e40c:	f003 0310 	and.w	r3, r3, #16
 800e410:	2b00      	cmp	r3, #0
 800e412:	f000 8140 	beq.w	800e696 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2210      	movs	r2, #16
 800e41c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	689b      	ldr	r3, [r3, #8]
 800e424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e428:	2b40      	cmp	r3, #64	; 0x40
 800e42a:	f040 80b8 	bne.w	800e59e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e43a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e43e:	2b00      	cmp	r3, #0
 800e440:	f000 8167 	beq.w	800e712 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e44a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e44e:	429a      	cmp	r2, r3
 800e450:	f080 815f 	bcs.w	800e712 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e45a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f003 0320 	and.w	r3, r3, #32
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	f040 8086 	bne.w	800e57c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e47c:	e853 3f00 	ldrex	r3, [r3]
 800e480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e484:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e48c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	461a      	mov	r2, r3
 800e496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e49a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e49e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e4a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e4aa:	e841 2300 	strex	r3, r2, [r1]
 800e4ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e4b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d1da      	bne.n	800e470 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	3308      	adds	r3, #8
 800e4c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4c4:	e853 3f00 	ldrex	r3, [r3]
 800e4c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e4ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4cc:	f023 0301 	bic.w	r3, r3, #1
 800e4d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	3308      	adds	r3, #8
 800e4da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e4de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e4e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e4e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e4ea:	e841 2300 	strex	r3, r2, [r1]
 800e4ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e4f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d1e1      	bne.n	800e4ba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	3308      	adds	r3, #8
 800e4fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e500:	e853 3f00 	ldrex	r3, [r3]
 800e504:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e50c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	3308      	adds	r3, #8
 800e516:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e51a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e51c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e51e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e520:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e522:	e841 2300 	strex	r3, r2, [r1]
 800e526:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d1e3      	bne.n	800e4f6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2220      	movs	r2, #32
 800e532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2200      	movs	r2, #0
 800e53a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e544:	e853 3f00 	ldrex	r3, [r3]
 800e548:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e54a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e54c:	f023 0310 	bic.w	r3, r3, #16
 800e550:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	461a      	mov	r2, r3
 800e55a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e55e:	65bb      	str	r3, [r7, #88]	; 0x58
 800e560:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e562:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e564:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e566:	e841 2300 	strex	r3, r2, [r1]
 800e56a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e56c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d1e4      	bne.n	800e53c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e576:	4618      	mov	r0, r3
 800e578:	f7f9 fe7c 	bl	8008274 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2202      	movs	r2, #2
 800e580:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e58e:	b29b      	uxth	r3, r3
 800e590:	1ad3      	subs	r3, r2, r3
 800e592:	b29b      	uxth	r3, r3
 800e594:	4619      	mov	r1, r3
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f000 f8e2 	bl	800e760 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e59c:	e0b9      	b.n	800e712 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	1ad3      	subs	r3, r2, r3
 800e5ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	f000 80ab 	beq.w	800e716 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800e5c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	f000 80a6 	beq.w	800e716 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d2:	e853 3f00 	ldrex	r3, [r3]
 800e5d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e5de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e5ec:	647b      	str	r3, [r7, #68]	; 0x44
 800e5ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e5f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5f4:	e841 2300 	strex	r3, r2, [r1]
 800e5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e5fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d1e4      	bne.n	800e5ca <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	3308      	adds	r3, #8
 800e606:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60a:	e853 3f00 	ldrex	r3, [r3]
 800e60e:	623b      	str	r3, [r7, #32]
   return(result);
 800e610:	6a3b      	ldr	r3, [r7, #32]
 800e612:	f023 0301 	bic.w	r3, r3, #1
 800e616:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	3308      	adds	r3, #8
 800e620:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e624:	633a      	str	r2, [r7, #48]	; 0x30
 800e626:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e628:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e62a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e62c:	e841 2300 	strex	r3, r2, [r1]
 800e630:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e634:	2b00      	cmp	r3, #0
 800e636:	d1e3      	bne.n	800e600 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2220      	movs	r2, #32
 800e63c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2200      	movs	r2, #0
 800e644:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2200      	movs	r2, #0
 800e64a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	e853 3f00 	ldrex	r3, [r3]
 800e658:	60fb      	str	r3, [r7, #12]
   return(result);
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f023 0310 	bic.w	r3, r3, #16
 800e660:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	461a      	mov	r2, r3
 800e66a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e66e:	61fb      	str	r3, [r7, #28]
 800e670:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e672:	69b9      	ldr	r1, [r7, #24]
 800e674:	69fa      	ldr	r2, [r7, #28]
 800e676:	e841 2300 	strex	r3, r2, [r1]
 800e67a:	617b      	str	r3, [r7, #20]
   return(result);
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1e4      	bne.n	800e64c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2202      	movs	r2, #2
 800e686:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e68c:	4619      	mov	r1, r3
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 f866 	bl	800e760 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e694:	e03f      	b.n	800e716 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e69a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d00e      	beq.n	800e6c0 <HAL_UART_IRQHandler+0x570>
 800e6a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d008      	beq.n	800e6c0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e6b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f000 fe99 	bl	800f3f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6be:	e02d      	b.n	800e71c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e6c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d00e      	beq.n	800e6ea <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e6cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d008      	beq.n	800e6ea <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d01c      	beq.n	800e71a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	4798      	blx	r3
    }
    return;
 800e6e8:	e017      	b.n	800e71a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d012      	beq.n	800e71c <HAL_UART_IRQHandler+0x5cc>
 800e6f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d00c      	beq.n	800e71c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f000 fe4a 	bl	800f39c <UART_EndTransmit_IT>
    return;
 800e708:	e008      	b.n	800e71c <HAL_UART_IRQHandler+0x5cc>
      return;
 800e70a:	bf00      	nop
 800e70c:	e006      	b.n	800e71c <HAL_UART_IRQHandler+0x5cc>
    return;
 800e70e:	bf00      	nop
 800e710:	e004      	b.n	800e71c <HAL_UART_IRQHandler+0x5cc>
      return;
 800e712:	bf00      	nop
 800e714:	e002      	b.n	800e71c <HAL_UART_IRQHandler+0x5cc>
      return;
 800e716:	bf00      	nop
 800e718:	e000      	b.n	800e71c <HAL_UART_IRQHandler+0x5cc>
    return;
 800e71a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800e71c:	37e8      	adds	r7, #232	; 0xe8
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop

0800e724 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e72c:	bf00      	nop
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e740:	bf00      	nop
 800e742:	370c      	adds	r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr

0800e74c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b083      	sub	sp, #12
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e754:	bf00      	nop
 800e756:	370c      	adds	r7, #12
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e760:	b480      	push	{r7}
 800e762:	b083      	sub	sp, #12
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	460b      	mov	r3, r1
 800e76a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e76c:	bf00      	nop
 800e76e:	370c      	adds	r7, #12
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr

0800e778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e77c:	b08a      	sub	sp, #40	; 0x28
 800e77e:	af00      	add	r7, sp, #0
 800e780:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e782:	2300      	movs	r3, #0
 800e784:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	689a      	ldr	r2, [r3, #8]
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	691b      	ldr	r3, [r3, #16]
 800e790:	431a      	orrs	r2, r3
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	695b      	ldr	r3, [r3, #20]
 800e796:	431a      	orrs	r2, r3
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	69db      	ldr	r3, [r3, #28]
 800e79c:	4313      	orrs	r3, r2
 800e79e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	4bb4      	ldr	r3, [pc, #720]	; (800ea78 <UART_SetConfig+0x300>)
 800e7a8:	4013      	ands	r3, r2
 800e7aa:	68fa      	ldr	r2, [r7, #12]
 800e7ac:	6812      	ldr	r2, [r2, #0]
 800e7ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e7b0:	430b      	orrs	r3, r1
 800e7b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	68da      	ldr	r2, [r3, #12]
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	430a      	orrs	r2, r1
 800e7c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	699b      	ldr	r3, [r3, #24]
 800e7ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	4aa9      	ldr	r2, [pc, #676]	; (800ea7c <UART_SetConfig+0x304>)
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	d004      	beq.n	800e7e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	6a1b      	ldr	r3, [r3, #32]
 800e7de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7e0:	4313      	orrs	r3, r2
 800e7e2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	689b      	ldr	r3, [r3, #8]
 800e7ea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7f4:	430a      	orrs	r2, r1
 800e7f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4aa0      	ldr	r2, [pc, #640]	; (800ea80 <UART_SetConfig+0x308>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d126      	bne.n	800e850 <UART_SetConfig+0xd8>
 800e802:	4ba0      	ldr	r3, [pc, #640]	; (800ea84 <UART_SetConfig+0x30c>)
 800e804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e808:	f003 0303 	and.w	r3, r3, #3
 800e80c:	2b03      	cmp	r3, #3
 800e80e:	d81b      	bhi.n	800e848 <UART_SetConfig+0xd0>
 800e810:	a201      	add	r2, pc, #4	; (adr r2, 800e818 <UART_SetConfig+0xa0>)
 800e812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e816:	bf00      	nop
 800e818:	0800e829 	.word	0x0800e829
 800e81c:	0800e839 	.word	0x0800e839
 800e820:	0800e831 	.word	0x0800e831
 800e824:	0800e841 	.word	0x0800e841
 800e828:	2301      	movs	r3, #1
 800e82a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e82e:	e080      	b.n	800e932 <UART_SetConfig+0x1ba>
 800e830:	2302      	movs	r3, #2
 800e832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e836:	e07c      	b.n	800e932 <UART_SetConfig+0x1ba>
 800e838:	2304      	movs	r3, #4
 800e83a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e83e:	e078      	b.n	800e932 <UART_SetConfig+0x1ba>
 800e840:	2308      	movs	r3, #8
 800e842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e846:	e074      	b.n	800e932 <UART_SetConfig+0x1ba>
 800e848:	2310      	movs	r3, #16
 800e84a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e84e:	e070      	b.n	800e932 <UART_SetConfig+0x1ba>
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4a8c      	ldr	r2, [pc, #560]	; (800ea88 <UART_SetConfig+0x310>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d138      	bne.n	800e8cc <UART_SetConfig+0x154>
 800e85a:	4b8a      	ldr	r3, [pc, #552]	; (800ea84 <UART_SetConfig+0x30c>)
 800e85c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e860:	f003 030c 	and.w	r3, r3, #12
 800e864:	2b0c      	cmp	r3, #12
 800e866:	d82d      	bhi.n	800e8c4 <UART_SetConfig+0x14c>
 800e868:	a201      	add	r2, pc, #4	; (adr r2, 800e870 <UART_SetConfig+0xf8>)
 800e86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e86e:	bf00      	nop
 800e870:	0800e8a5 	.word	0x0800e8a5
 800e874:	0800e8c5 	.word	0x0800e8c5
 800e878:	0800e8c5 	.word	0x0800e8c5
 800e87c:	0800e8c5 	.word	0x0800e8c5
 800e880:	0800e8b5 	.word	0x0800e8b5
 800e884:	0800e8c5 	.word	0x0800e8c5
 800e888:	0800e8c5 	.word	0x0800e8c5
 800e88c:	0800e8c5 	.word	0x0800e8c5
 800e890:	0800e8ad 	.word	0x0800e8ad
 800e894:	0800e8c5 	.word	0x0800e8c5
 800e898:	0800e8c5 	.word	0x0800e8c5
 800e89c:	0800e8c5 	.word	0x0800e8c5
 800e8a0:	0800e8bd 	.word	0x0800e8bd
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8aa:	e042      	b.n	800e932 <UART_SetConfig+0x1ba>
 800e8ac:	2302      	movs	r3, #2
 800e8ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8b2:	e03e      	b.n	800e932 <UART_SetConfig+0x1ba>
 800e8b4:	2304      	movs	r3, #4
 800e8b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8ba:	e03a      	b.n	800e932 <UART_SetConfig+0x1ba>
 800e8bc:	2308      	movs	r3, #8
 800e8be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8c2:	e036      	b.n	800e932 <UART_SetConfig+0x1ba>
 800e8c4:	2310      	movs	r3, #16
 800e8c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8ca:	e032      	b.n	800e932 <UART_SetConfig+0x1ba>
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a6a      	ldr	r2, [pc, #424]	; (800ea7c <UART_SetConfig+0x304>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d12a      	bne.n	800e92c <UART_SetConfig+0x1b4>
 800e8d6:	4b6b      	ldr	r3, [pc, #428]	; (800ea84 <UART_SetConfig+0x30c>)
 800e8d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e8e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e8e4:	d01a      	beq.n	800e91c <UART_SetConfig+0x1a4>
 800e8e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e8ea:	d81b      	bhi.n	800e924 <UART_SetConfig+0x1ac>
 800e8ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8f0:	d00c      	beq.n	800e90c <UART_SetConfig+0x194>
 800e8f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8f6:	d815      	bhi.n	800e924 <UART_SetConfig+0x1ac>
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d003      	beq.n	800e904 <UART_SetConfig+0x18c>
 800e8fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e900:	d008      	beq.n	800e914 <UART_SetConfig+0x19c>
 800e902:	e00f      	b.n	800e924 <UART_SetConfig+0x1ac>
 800e904:	2300      	movs	r3, #0
 800e906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e90a:	e012      	b.n	800e932 <UART_SetConfig+0x1ba>
 800e90c:	2302      	movs	r3, #2
 800e90e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e912:	e00e      	b.n	800e932 <UART_SetConfig+0x1ba>
 800e914:	2304      	movs	r3, #4
 800e916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e91a:	e00a      	b.n	800e932 <UART_SetConfig+0x1ba>
 800e91c:	2308      	movs	r3, #8
 800e91e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e922:	e006      	b.n	800e932 <UART_SetConfig+0x1ba>
 800e924:	2310      	movs	r3, #16
 800e926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e92a:	e002      	b.n	800e932 <UART_SetConfig+0x1ba>
 800e92c:	2310      	movs	r3, #16
 800e92e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4a51      	ldr	r2, [pc, #324]	; (800ea7c <UART_SetConfig+0x304>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d17a      	bne.n	800ea32 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e93c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e940:	2b08      	cmp	r3, #8
 800e942:	d824      	bhi.n	800e98e <UART_SetConfig+0x216>
 800e944:	a201      	add	r2, pc, #4	; (adr r2, 800e94c <UART_SetConfig+0x1d4>)
 800e946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e94a:	bf00      	nop
 800e94c:	0800e971 	.word	0x0800e971
 800e950:	0800e98f 	.word	0x0800e98f
 800e954:	0800e979 	.word	0x0800e979
 800e958:	0800e98f 	.word	0x0800e98f
 800e95c:	0800e97f 	.word	0x0800e97f
 800e960:	0800e98f 	.word	0x0800e98f
 800e964:	0800e98f 	.word	0x0800e98f
 800e968:	0800e98f 	.word	0x0800e98f
 800e96c:	0800e987 	.word	0x0800e987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e970:	f7fd f974 	bl	800bc5c <HAL_RCC_GetPCLK1Freq>
 800e974:	61f8      	str	r0, [r7, #28]
        break;
 800e976:	e010      	b.n	800e99a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e978:	4b44      	ldr	r3, [pc, #272]	; (800ea8c <UART_SetConfig+0x314>)
 800e97a:	61fb      	str	r3, [r7, #28]
        break;
 800e97c:	e00d      	b.n	800e99a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e97e:	f7fd f8d5 	bl	800bb2c <HAL_RCC_GetSysClockFreq>
 800e982:	61f8      	str	r0, [r7, #28]
        break;
 800e984:	e009      	b.n	800e99a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e98a:	61fb      	str	r3, [r7, #28]
        break;
 800e98c:	e005      	b.n	800e99a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800e98e:	2300      	movs	r3, #0
 800e990:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e992:	2301      	movs	r3, #1
 800e994:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e998:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e99a:	69fb      	ldr	r3, [r7, #28]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	f000 8107 	beq.w	800ebb0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	685a      	ldr	r2, [r3, #4]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	005b      	lsls	r3, r3, #1
 800e9aa:	4413      	add	r3, r2
 800e9ac:	69fa      	ldr	r2, [r7, #28]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d305      	bcc.n	800e9be <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e9b8:	69fa      	ldr	r2, [r7, #28]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d903      	bls.n	800e9c6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800e9be:	2301      	movs	r3, #1
 800e9c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e9c4:	e0f4      	b.n	800ebb0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e9c6:	69fb      	ldr	r3, [r7, #28]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	461c      	mov	r4, r3
 800e9cc:	4615      	mov	r5, r2
 800e9ce:	f04f 0200 	mov.w	r2, #0
 800e9d2:	f04f 0300 	mov.w	r3, #0
 800e9d6:	022b      	lsls	r3, r5, #8
 800e9d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e9dc:	0222      	lsls	r2, r4, #8
 800e9de:	68f9      	ldr	r1, [r7, #12]
 800e9e0:	6849      	ldr	r1, [r1, #4]
 800e9e2:	0849      	lsrs	r1, r1, #1
 800e9e4:	2000      	movs	r0, #0
 800e9e6:	4688      	mov	r8, r1
 800e9e8:	4681      	mov	r9, r0
 800e9ea:	eb12 0a08 	adds.w	sl, r2, r8
 800e9ee:	eb43 0b09 	adc.w	fp, r3, r9
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	603b      	str	r3, [r7, #0]
 800e9fa:	607a      	str	r2, [r7, #4]
 800e9fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea00:	4650      	mov	r0, sl
 800ea02:	4659      	mov	r1, fp
 800ea04:	f7f2 f940 	bl	8000c88 <__aeabi_uldivmod>
 800ea08:	4602      	mov	r2, r0
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ea16:	d308      	bcc.n	800ea2a <UART_SetConfig+0x2b2>
 800ea18:	69bb      	ldr	r3, [r7, #24]
 800ea1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea1e:	d204      	bcs.n	800ea2a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	69ba      	ldr	r2, [r7, #24]
 800ea26:	60da      	str	r2, [r3, #12]
 800ea28:	e0c2      	b.n	800ebb0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ea30:	e0be      	b.n	800ebb0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	69db      	ldr	r3, [r3, #28]
 800ea36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea3a:	d16a      	bne.n	800eb12 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800ea3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea40:	2b08      	cmp	r3, #8
 800ea42:	d834      	bhi.n	800eaae <UART_SetConfig+0x336>
 800ea44:	a201      	add	r2, pc, #4	; (adr r2, 800ea4c <UART_SetConfig+0x2d4>)
 800ea46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea4a:	bf00      	nop
 800ea4c:	0800ea71 	.word	0x0800ea71
 800ea50:	0800ea91 	.word	0x0800ea91
 800ea54:	0800ea99 	.word	0x0800ea99
 800ea58:	0800eaaf 	.word	0x0800eaaf
 800ea5c:	0800ea9f 	.word	0x0800ea9f
 800ea60:	0800eaaf 	.word	0x0800eaaf
 800ea64:	0800eaaf 	.word	0x0800eaaf
 800ea68:	0800eaaf 	.word	0x0800eaaf
 800ea6c:	0800eaa7 	.word	0x0800eaa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea70:	f7fd f8f4 	bl	800bc5c <HAL_RCC_GetPCLK1Freq>
 800ea74:	61f8      	str	r0, [r7, #28]
        break;
 800ea76:	e020      	b.n	800eaba <UART_SetConfig+0x342>
 800ea78:	efff69f3 	.word	0xefff69f3
 800ea7c:	40008000 	.word	0x40008000
 800ea80:	40013800 	.word	0x40013800
 800ea84:	40021000 	.word	0x40021000
 800ea88:	40004400 	.word	0x40004400
 800ea8c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea90:	f7fd f8fa 	bl	800bc88 <HAL_RCC_GetPCLK2Freq>
 800ea94:	61f8      	str	r0, [r7, #28]
        break;
 800ea96:	e010      	b.n	800eaba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ea98:	4b4c      	ldr	r3, [pc, #304]	; (800ebcc <UART_SetConfig+0x454>)
 800ea9a:	61fb      	str	r3, [r7, #28]
        break;
 800ea9c:	e00d      	b.n	800eaba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ea9e:	f7fd f845 	bl	800bb2c <HAL_RCC_GetSysClockFreq>
 800eaa2:	61f8      	str	r0, [r7, #28]
        break;
 800eaa4:	e009      	b.n	800eaba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eaa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eaaa:	61fb      	str	r3, [r7, #28]
        break;
 800eaac:	e005      	b.n	800eaba <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800eaae:	2300      	movs	r3, #0
 800eab0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800eab2:	2301      	movs	r3, #1
 800eab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800eab8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d077      	beq.n	800ebb0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	005a      	lsls	r2, r3, #1
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	085b      	lsrs	r3, r3, #1
 800eaca:	441a      	add	r2, r3
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ead4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ead6:	69bb      	ldr	r3, [r7, #24]
 800ead8:	2b0f      	cmp	r3, #15
 800eada:	d916      	bls.n	800eb0a <UART_SetConfig+0x392>
 800eadc:	69bb      	ldr	r3, [r7, #24]
 800eade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eae2:	d212      	bcs.n	800eb0a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eae4:	69bb      	ldr	r3, [r7, #24]
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	f023 030f 	bic.w	r3, r3, #15
 800eaec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eaee:	69bb      	ldr	r3, [r7, #24]
 800eaf0:	085b      	lsrs	r3, r3, #1
 800eaf2:	b29b      	uxth	r3, r3
 800eaf4:	f003 0307 	and.w	r3, r3, #7
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	8afb      	ldrh	r3, [r7, #22]
 800eafc:	4313      	orrs	r3, r2
 800eafe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	8afa      	ldrh	r2, [r7, #22]
 800eb06:	60da      	str	r2, [r3, #12]
 800eb08:	e052      	b.n	800ebb0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800eb10:	e04e      	b.n	800ebb0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800eb12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb16:	2b08      	cmp	r3, #8
 800eb18:	d827      	bhi.n	800eb6a <UART_SetConfig+0x3f2>
 800eb1a:	a201      	add	r2, pc, #4	; (adr r2, 800eb20 <UART_SetConfig+0x3a8>)
 800eb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb20:	0800eb45 	.word	0x0800eb45
 800eb24:	0800eb4d 	.word	0x0800eb4d
 800eb28:	0800eb55 	.word	0x0800eb55
 800eb2c:	0800eb6b 	.word	0x0800eb6b
 800eb30:	0800eb5b 	.word	0x0800eb5b
 800eb34:	0800eb6b 	.word	0x0800eb6b
 800eb38:	0800eb6b 	.word	0x0800eb6b
 800eb3c:	0800eb6b 	.word	0x0800eb6b
 800eb40:	0800eb63 	.word	0x0800eb63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb44:	f7fd f88a 	bl	800bc5c <HAL_RCC_GetPCLK1Freq>
 800eb48:	61f8      	str	r0, [r7, #28]
        break;
 800eb4a:	e014      	b.n	800eb76 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb4c:	f7fd f89c 	bl	800bc88 <HAL_RCC_GetPCLK2Freq>
 800eb50:	61f8      	str	r0, [r7, #28]
        break;
 800eb52:	e010      	b.n	800eb76 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eb54:	4b1d      	ldr	r3, [pc, #116]	; (800ebcc <UART_SetConfig+0x454>)
 800eb56:	61fb      	str	r3, [r7, #28]
        break;
 800eb58:	e00d      	b.n	800eb76 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eb5a:	f7fc ffe7 	bl	800bb2c <HAL_RCC_GetSysClockFreq>
 800eb5e:	61f8      	str	r0, [r7, #28]
        break;
 800eb60:	e009      	b.n	800eb76 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb66:	61fb      	str	r3, [r7, #28]
        break;
 800eb68:	e005      	b.n	800eb76 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800eb6e:	2301      	movs	r3, #1
 800eb70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800eb74:	bf00      	nop
    }

    if (pclk != 0U)
 800eb76:	69fb      	ldr	r3, [r7, #28]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d019      	beq.n	800ebb0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	085a      	lsrs	r2, r3, #1
 800eb82:	69fb      	ldr	r3, [r7, #28]
 800eb84:	441a      	add	r2, r3
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	685b      	ldr	r3, [r3, #4]
 800eb8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb8e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb90:	69bb      	ldr	r3, [r7, #24]
 800eb92:	2b0f      	cmp	r3, #15
 800eb94:	d909      	bls.n	800ebaa <UART_SetConfig+0x432>
 800eb96:	69bb      	ldr	r3, [r7, #24]
 800eb98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb9c:	d205      	bcs.n	800ebaa <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eb9e:	69bb      	ldr	r3, [r7, #24]
 800eba0:	b29a      	uxth	r2, r3
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	60da      	str	r2, [r3, #12]
 800eba8:	e002      	b.n	800ebb0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800ebaa:	2301      	movs	r3, #1
 800ebac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ebbc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3728      	adds	r7, #40	; 0x28
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ebca:	bf00      	nop
 800ebcc:	00f42400 	.word	0x00f42400

0800ebd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebdc:	f003 0308 	and.w	r3, r3, #8
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d00a      	beq.n	800ebfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	430a      	orrs	r2, r1
 800ebf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebfe:	f003 0301 	and.w	r3, r3, #1
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d00a      	beq.n	800ec1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	430a      	orrs	r2, r1
 800ec1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec20:	f003 0302 	and.w	r3, r3, #2
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d00a      	beq.n	800ec3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	685b      	ldr	r3, [r3, #4]
 800ec2e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	430a      	orrs	r2, r1
 800ec3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec42:	f003 0304 	and.w	r3, r3, #4
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d00a      	beq.n	800ec60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	430a      	orrs	r2, r1
 800ec5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec64:	f003 0310 	and.w	r3, r3, #16
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d00a      	beq.n	800ec82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	689b      	ldr	r3, [r3, #8]
 800ec72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	430a      	orrs	r2, r1
 800ec80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec86:	f003 0320 	and.w	r3, r3, #32
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d00a      	beq.n	800eca4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	689b      	ldr	r3, [r3, #8]
 800ec94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	430a      	orrs	r2, r1
 800eca2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d01a      	beq.n	800ece6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	430a      	orrs	r2, r1
 800ecc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ecce:	d10a      	bne.n	800ece6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	685b      	ldr	r3, [r3, #4]
 800ecd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	430a      	orrs	r2, r1
 800ece4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d00a      	beq.n	800ed08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	685b      	ldr	r3, [r3, #4]
 800ecf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	430a      	orrs	r2, r1
 800ed06:	605a      	str	r2, [r3, #4]
  }
}
 800ed08:	bf00      	nop
 800ed0a:	370c      	adds	r7, #12
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr

0800ed14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b098      	sub	sp, #96	; 0x60
 800ed18:	af02      	add	r7, sp, #8
 800ed1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ed24:	f7f7 fdac 	bl	8006880 <HAL_GetTick>
 800ed28:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f003 0308 	and.w	r3, r3, #8
 800ed34:	2b08      	cmp	r3, #8
 800ed36:	d12e      	bne.n	800ed96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed3c:	9300      	str	r3, [sp, #0]
 800ed3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed40:	2200      	movs	r2, #0
 800ed42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 f88c 	bl	800ee64 <UART_WaitOnFlagUntilTimeout>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d021      	beq.n	800ed96 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed5a:	e853 3f00 	ldrex	r3, [r3]
 800ed5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed66:	653b      	str	r3, [r7, #80]	; 0x50
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed70:	647b      	str	r3, [r7, #68]	; 0x44
 800ed72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed78:	e841 2300 	strex	r3, r2, [r1]
 800ed7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ed7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d1e6      	bne.n	800ed52 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2220      	movs	r2, #32
 800ed88:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed92:	2303      	movs	r3, #3
 800ed94:	e062      	b.n	800ee5c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f003 0304 	and.w	r3, r3, #4
 800eda0:	2b04      	cmp	r3, #4
 800eda2:	d149      	bne.n	800ee38 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eda4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eda8:	9300      	str	r3, [sp, #0]
 800edaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edac:	2200      	movs	r2, #0
 800edae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f000 f856 	bl	800ee64 <UART_WaitOnFlagUntilTimeout>
 800edb8:	4603      	mov	r3, r0
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d03c      	beq.n	800ee38 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc6:	e853 3f00 	ldrex	r3, [r3]
 800edca:	623b      	str	r3, [r7, #32]
   return(result);
 800edcc:	6a3b      	ldr	r3, [r7, #32]
 800edce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800edd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	461a      	mov	r2, r3
 800edda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eddc:	633b      	str	r3, [r7, #48]	; 0x30
 800edde:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ede0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ede2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ede4:	e841 2300 	strex	r3, r2, [r1]
 800ede8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800edea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edec:	2b00      	cmp	r3, #0
 800edee:	d1e6      	bne.n	800edbe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	3308      	adds	r3, #8
 800edf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	e853 3f00 	ldrex	r3, [r3]
 800edfe:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f023 0301 	bic.w	r3, r3, #1
 800ee06:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	3308      	adds	r3, #8
 800ee0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee10:	61fa      	str	r2, [r7, #28]
 800ee12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee14:	69b9      	ldr	r1, [r7, #24]
 800ee16:	69fa      	ldr	r2, [r7, #28]
 800ee18:	e841 2300 	strex	r3, r2, [r1]
 800ee1c:	617b      	str	r3, [r7, #20]
   return(result);
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d1e5      	bne.n	800edf0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2220      	movs	r2, #32
 800ee28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee34:	2303      	movs	r3, #3
 800ee36:	e011      	b.n	800ee5c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2220      	movs	r2, #32
 800ee3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2220      	movs	r2, #32
 800ee42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2200      	movs	r2, #0
 800ee56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ee5a:	2300      	movs	r3, #0
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3758      	adds	r7, #88	; 0x58
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	60f8      	str	r0, [r7, #12]
 800ee6c:	60b9      	str	r1, [r7, #8]
 800ee6e:	603b      	str	r3, [r7, #0]
 800ee70:	4613      	mov	r3, r2
 800ee72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee74:	e049      	b.n	800ef0a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee76:	69bb      	ldr	r3, [r7, #24]
 800ee78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee7c:	d045      	beq.n	800ef0a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee7e:	f7f7 fcff 	bl	8006880 <HAL_GetTick>
 800ee82:	4602      	mov	r2, r0
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	1ad3      	subs	r3, r2, r3
 800ee88:	69ba      	ldr	r2, [r7, #24]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d302      	bcc.n	800ee94 <UART_WaitOnFlagUntilTimeout+0x30>
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d101      	bne.n	800ee98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ee94:	2303      	movs	r3, #3
 800ee96:	e048      	b.n	800ef2a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f003 0304 	and.w	r3, r3, #4
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d031      	beq.n	800ef0a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	69db      	ldr	r3, [r3, #28]
 800eeac:	f003 0308 	and.w	r3, r3, #8
 800eeb0:	2b08      	cmp	r3, #8
 800eeb2:	d110      	bne.n	800eed6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2208      	movs	r2, #8
 800eeba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f000 f8ff 	bl	800f0c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	2208      	movs	r2, #8
 800eec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	2200      	movs	r2, #0
 800eece:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800eed2:	2301      	movs	r3, #1
 800eed4:	e029      	b.n	800ef2a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	69db      	ldr	r3, [r3, #28]
 800eedc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eee4:	d111      	bne.n	800ef0a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eeee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eef0:	68f8      	ldr	r0, [r7, #12]
 800eef2:	f000 f8e5 	bl	800f0c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	2220      	movs	r2, #32
 800eefa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2200      	movs	r2, #0
 800ef02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800ef06:	2303      	movs	r3, #3
 800ef08:	e00f      	b.n	800ef2a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	69da      	ldr	r2, [r3, #28]
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	4013      	ands	r3, r2
 800ef14:	68ba      	ldr	r2, [r7, #8]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	bf0c      	ite	eq
 800ef1a:	2301      	moveq	r3, #1
 800ef1c:	2300      	movne	r3, #0
 800ef1e:	b2db      	uxtb	r3, r3
 800ef20:	461a      	mov	r2, r3
 800ef22:	79fb      	ldrb	r3, [r7, #7]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d0a6      	beq.n	800ee76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ef28:	2300      	movs	r3, #0
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3710      	adds	r7, #16
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
	...

0800ef34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b096      	sub	sp, #88	; 0x58
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	4613      	mov	r3, r2
 800ef40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	68ba      	ldr	r2, [r7, #8]
 800ef46:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	88fa      	ldrh	r2, [r7, #6]
 800ef4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	2200      	movs	r2, #0
 800ef54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2222      	movs	r2, #34	; 0x22
 800ef5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d028      	beq.n	800efba <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef6c:	4a3e      	ldr	r2, [pc, #248]	; (800f068 <UART_Start_Receive_DMA+0x134>)
 800ef6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef74:	4a3d      	ldr	r2, [pc, #244]	; (800f06c <UART_Start_Receive_DMA+0x138>)
 800ef76:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef7c:	4a3c      	ldr	r2, [pc, #240]	; (800f070 <UART_Start_Receive_DMA+0x13c>)
 800ef7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef84:	2200      	movs	r2, #0
 800ef86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	3324      	adds	r3, #36	; 0x24
 800ef92:	4619      	mov	r1, r3
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef98:	461a      	mov	r2, r3
 800ef9a:	88fb      	ldrh	r3, [r7, #6]
 800ef9c:	f7f9 f90a 	bl	80081b4 <HAL_DMA_Start_IT>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d009      	beq.n	800efba <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2210      	movs	r2, #16
 800efaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	2220      	movs	r2, #32
 800efb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800efb6:	2301      	movs	r3, #1
 800efb8:	e051      	b.n	800f05e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	691b      	ldr	r3, [r3, #16]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d018      	beq.n	800eff4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efca:	e853 3f00 	ldrex	r3, [r3]
 800efce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800efd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800efd6:	657b      	str	r3, [r7, #84]	; 0x54
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	461a      	mov	r2, r3
 800efde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efe0:	64bb      	str	r3, [r7, #72]	; 0x48
 800efe2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efe4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800efe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800efe8:	e841 2300 	strex	r3, r2, [r1]
 800efec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800efee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d1e6      	bne.n	800efc2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	3308      	adds	r3, #8
 800effa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800effc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effe:	e853 3f00 	ldrex	r3, [r3]
 800f002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f006:	f043 0301 	orr.w	r3, r3, #1
 800f00a:	653b      	str	r3, [r7, #80]	; 0x50
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	3308      	adds	r3, #8
 800f012:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f014:	637a      	str	r2, [r7, #52]	; 0x34
 800f016:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f01a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f01c:	e841 2300 	strex	r3, r2, [r1]
 800f020:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f024:	2b00      	cmp	r3, #0
 800f026:	d1e5      	bne.n	800eff4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	3308      	adds	r3, #8
 800f02e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	e853 3f00 	ldrex	r3, [r3]
 800f036:	613b      	str	r3, [r7, #16]
   return(result);
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f03e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	3308      	adds	r3, #8
 800f046:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f048:	623a      	str	r2, [r7, #32]
 800f04a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f04c:	69f9      	ldr	r1, [r7, #28]
 800f04e:	6a3a      	ldr	r2, [r7, #32]
 800f050:	e841 2300 	strex	r3, r2, [r1]
 800f054:	61bb      	str	r3, [r7, #24]
   return(result);
 800f056:	69bb      	ldr	r3, [r7, #24]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d1e5      	bne.n	800f028 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800f05c:	2300      	movs	r3, #0
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3758      	adds	r7, #88	; 0x58
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	0800f189 	.word	0x0800f189
 800f06c:	0800f2b5 	.word	0x0800f2b5
 800f070:	0800f2f3 	.word	0x0800f2f3

0800f074 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f074:	b480      	push	{r7}
 800f076:	b089      	sub	sp, #36	; 0x24
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	e853 3f00 	ldrex	r3, [r3]
 800f088:	60bb      	str	r3, [r7, #8]
   return(result);
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f090:	61fb      	str	r3, [r7, #28]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	461a      	mov	r2, r3
 800f098:	69fb      	ldr	r3, [r7, #28]
 800f09a:	61bb      	str	r3, [r7, #24]
 800f09c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f09e:	6979      	ldr	r1, [r7, #20]
 800f0a0:	69ba      	ldr	r2, [r7, #24]
 800f0a2:	e841 2300 	strex	r3, r2, [r1]
 800f0a6:	613b      	str	r3, [r7, #16]
   return(result);
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d1e6      	bne.n	800f07c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2220      	movs	r2, #32
 800f0b2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800f0b4:	bf00      	nop
 800f0b6:	3724      	adds	r7, #36	; 0x24
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr

0800f0c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b095      	sub	sp, #84	; 0x54
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0d0:	e853 3f00 	ldrex	r3, [r3]
 800f0d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f0dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0e6:	643b      	str	r3, [r7, #64]	; 0x40
 800f0e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f0ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f0ee:	e841 2300 	strex	r3, r2, [r1]
 800f0f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d1e6      	bne.n	800f0c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	3308      	adds	r3, #8
 800f100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f102:	6a3b      	ldr	r3, [r7, #32]
 800f104:	e853 3f00 	ldrex	r3, [r3]
 800f108:	61fb      	str	r3, [r7, #28]
   return(result);
 800f10a:	69fb      	ldr	r3, [r7, #28]
 800f10c:	f023 0301 	bic.w	r3, r3, #1
 800f110:	64bb      	str	r3, [r7, #72]	; 0x48
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	3308      	adds	r3, #8
 800f118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f11a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f11c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f11e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f122:	e841 2300 	strex	r3, r2, [r1]
 800f126:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d1e5      	bne.n	800f0fa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f132:	2b01      	cmp	r3, #1
 800f134:	d118      	bne.n	800f168 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	e853 3f00 	ldrex	r3, [r3]
 800f142:	60bb      	str	r3, [r7, #8]
   return(result);
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	f023 0310 	bic.w	r3, r3, #16
 800f14a:	647b      	str	r3, [r7, #68]	; 0x44
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	461a      	mov	r2, r3
 800f152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f154:	61bb      	str	r3, [r7, #24]
 800f156:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f158:	6979      	ldr	r1, [r7, #20]
 800f15a:	69ba      	ldr	r2, [r7, #24]
 800f15c:	e841 2300 	strex	r3, r2, [r1]
 800f160:	613b      	str	r3, [r7, #16]
   return(result);
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d1e6      	bne.n	800f136 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2220      	movs	r2, #32
 800f16c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2200      	movs	r2, #0
 800f174:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2200      	movs	r2, #0
 800f17a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800f17c:	bf00      	nop
 800f17e:	3754      	adds	r7, #84	; 0x54
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr

0800f188 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b09c      	sub	sp, #112	; 0x70
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f194:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f003 0320 	and.w	r3, r3, #32
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d171      	bne.n	800f288 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800f1a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f1ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1b4:	e853 3f00 	ldrex	r3, [r3]
 800f1b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f1ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f1c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800f1c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	461a      	mov	r2, r3
 800f1c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f1ca:	65bb      	str	r3, [r7, #88]	; 0x58
 800f1cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f1d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f1d2:	e841 2300 	strex	r3, r2, [r1]
 800f1d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f1d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d1e6      	bne.n	800f1ac <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	3308      	adds	r3, #8
 800f1e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e8:	e853 3f00 	ldrex	r3, [r3]
 800f1ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1f0:	f023 0301 	bic.w	r3, r3, #1
 800f1f4:	667b      	str	r3, [r7, #100]	; 0x64
 800f1f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	3308      	adds	r3, #8
 800f1fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f1fe:	647a      	str	r2, [r7, #68]	; 0x44
 800f200:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f202:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f204:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f206:	e841 2300 	strex	r3, r2, [r1]
 800f20a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d1e5      	bne.n	800f1de <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	3308      	adds	r3, #8
 800f218:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21c:	e853 3f00 	ldrex	r3, [r3]
 800f220:	623b      	str	r3, [r7, #32]
   return(result);
 800f222:	6a3b      	ldr	r3, [r7, #32]
 800f224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f228:	663b      	str	r3, [r7, #96]	; 0x60
 800f22a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	3308      	adds	r3, #8
 800f230:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f232:	633a      	str	r2, [r7, #48]	; 0x30
 800f234:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f23a:	e841 2300 	strex	r3, r2, [r1]
 800f23e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f242:	2b00      	cmp	r3, #0
 800f244:	d1e5      	bne.n	800f212 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f248:	2220      	movs	r2, #32
 800f24a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f24e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f252:	2b01      	cmp	r3, #1
 800f254:	d118      	bne.n	800f288 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	e853 3f00 	ldrex	r3, [r3]
 800f262:	60fb      	str	r3, [r7, #12]
   return(result);
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f023 0310 	bic.w	r3, r3, #16
 800f26a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f26c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	461a      	mov	r2, r3
 800f272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f274:	61fb      	str	r3, [r7, #28]
 800f276:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f278:	69b9      	ldr	r1, [r7, #24]
 800f27a:	69fa      	ldr	r2, [r7, #28]
 800f27c:	e841 2300 	strex	r3, r2, [r1]
 800f280:	617b      	str	r3, [r7, #20]
   return(result);
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d1e6      	bne.n	800f256 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f28a:	2200      	movs	r2, #0
 800f28c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f28e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f292:	2b01      	cmp	r3, #1
 800f294:	d107      	bne.n	800f2a6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f298:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f29c:	4619      	mov	r1, r3
 800f29e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f2a0:	f7ff fa5e 	bl	800e760 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f2a4:	e002      	b.n	800f2ac <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800f2a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f2a8:	f7f7 f9e6 	bl	8006678 <HAL_UART_RxCpltCallback>
}
 800f2ac:	bf00      	nop
 800f2ae:	3770      	adds	r7, #112	; 0x70
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2c0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	2201      	movs	r2, #1
 800f2c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d109      	bne.n	800f2e4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f2d6:	085b      	lsrs	r3, r3, #1
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	4619      	mov	r1, r3
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	f7ff fa3f 	bl	800e760 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f2e2:	e002      	b.n	800f2ea <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f7ff fa27 	bl	800e738 <HAL_UART_RxHalfCpltCallback>
}
 800f2ea:	bf00      	nop
 800f2ec:	3710      	adds	r7, #16
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}

0800f2f2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f2f2:	b580      	push	{r7, lr}
 800f2f4:	b086      	sub	sp, #24
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2fe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f304:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f30c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	689b      	ldr	r3, [r3, #8]
 800f314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f318:	2b80      	cmp	r3, #128	; 0x80
 800f31a:	d109      	bne.n	800f330 <UART_DMAError+0x3e>
 800f31c:	693b      	ldr	r3, [r7, #16]
 800f31e:	2b21      	cmp	r3, #33	; 0x21
 800f320:	d106      	bne.n	800f330 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	2200      	movs	r2, #0
 800f326:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800f32a:	6978      	ldr	r0, [r7, #20]
 800f32c:	f7ff fea2 	bl	800f074 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	689b      	ldr	r3, [r3, #8]
 800f336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f33a:	2b40      	cmp	r3, #64	; 0x40
 800f33c:	d109      	bne.n	800f352 <UART_DMAError+0x60>
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2b22      	cmp	r3, #34	; 0x22
 800f342:	d106      	bne.n	800f352 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	2200      	movs	r2, #0
 800f348:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800f34c:	6978      	ldr	r0, [r7, #20]
 800f34e:	f7ff feb7 	bl	800f0c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f358:	f043 0210 	orr.w	r2, r3, #16
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f362:	6978      	ldr	r0, [r7, #20]
 800f364:	f7ff f9f2 	bl	800e74c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f368:	bf00      	nop
 800f36a:	3718      	adds	r7, #24
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}

0800f370 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f37c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	2200      	movs	r2, #0
 800f382:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2200      	movs	r2, #0
 800f38a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f38e:	68f8      	ldr	r0, [r7, #12]
 800f390:	f7ff f9dc 	bl	800e74c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f394:	bf00      	nop
 800f396:	3710      	adds	r7, #16
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b088      	sub	sp, #32
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	e853 3f00 	ldrex	r3, [r3]
 800f3b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3b8:	61fb      	str	r3, [r7, #28]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	461a      	mov	r2, r3
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	61bb      	str	r3, [r7, #24]
 800f3c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3c6:	6979      	ldr	r1, [r7, #20]
 800f3c8:	69ba      	ldr	r2, [r7, #24]
 800f3ca:	e841 2300 	strex	r3, r2, [r1]
 800f3ce:	613b      	str	r3, [r7, #16]
   return(result);
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d1e6      	bne.n	800f3a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2220      	movs	r2, #32
 800f3da:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f7ff f99e 	bl	800e724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f3e8:	bf00      	nop
 800f3ea:	3720      	adds	r7, #32
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b083      	sub	sp, #12
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f3f8:	bf00      	nop
 800f3fa:	370c      	adds	r7, #12
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f402:	4770      	bx	lr

0800f404 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f404:	b084      	sub	sp, #16
 800f406:	b480      	push	{r7}
 800f408:	b083      	sub	sp, #12
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	6078      	str	r0, [r7, #4]
 800f40e:	f107 0014 	add.w	r0, r7, #20
 800f412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800f416:	2300      	movs	r3, #0
}
 800f418:	4618      	mov	r0, r3
 800f41a:	370c      	adds	r7, #12
 800f41c:	46bd      	mov	sp, r7
 800f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f422:	b004      	add	sp, #16
 800f424:	4770      	bx	lr

0800f426 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800f426:	b480      	push	{r7}
 800f428:	b085      	sub	sp, #20
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2200      	movs	r2, #0
 800f432:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f436:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f43a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	b29a      	uxth	r2, r3
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f446:	2300      	movs	r3, #0
}
 800f448:	4618      	mov	r0, r3
 800f44a:	3714      	adds	r7, #20
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr

0800f454 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f454:	b480      	push	{r7}
 800f456:	b085      	sub	sp, #20
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f45c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f460:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800f468:	b29a      	uxth	r2, r3
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	43db      	mvns	r3, r3
 800f470:	b29b      	uxth	r3, r3
 800f472:	4013      	ands	r3, r2
 800f474:	b29a      	uxth	r2, r3
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f47c:	2300      	movs	r3, #0
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3714      	adds	r7, #20
 800f482:	46bd      	mov	sp, r7
 800f484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f488:	4770      	bx	lr

0800f48a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800f48a:	b480      	push	{r7}
 800f48c:	b083      	sub	sp, #12
 800f48e:	af00      	add	r7, sp, #0
 800f490:	6078      	str	r0, [r7, #4]
 800f492:	460b      	mov	r3, r1
 800f494:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800f496:	2300      	movs	r3, #0
}
 800f498:	4618      	mov	r0, r3
 800f49a:	370c      	adds	r7, #12
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr

0800f4a4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f4a4:	b084      	sub	sp, #16
 800f4a6:	b480      	push	{r7}
 800f4a8:	b083      	sub	sp, #12
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	6078      	str	r0, [r7, #4]
 800f4ae:	f107 0014 	add.w	r0, r7, #20
 800f4b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800f4d6:	2300      	movs	r3, #0
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	370c      	adds	r7, #12
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	b004      	add	sp, #16
 800f4e4:	4770      	bx	lr
	...

0800f4e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b09d      	sub	sp, #116	; 0x74
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	4413      	add	r3, r2
 800f502:	881b      	ldrh	r3, [r3, #0]
 800f504:	b29b      	uxth	r3, r3
 800f506:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800f50a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f50e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	78db      	ldrb	r3, [r3, #3]
 800f516:	2b03      	cmp	r3, #3
 800f518:	d81f      	bhi.n	800f55a <USB_ActivateEndpoint+0x72>
 800f51a:	a201      	add	r2, pc, #4	; (adr r2, 800f520 <USB_ActivateEndpoint+0x38>)
 800f51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f520:	0800f531 	.word	0x0800f531
 800f524:	0800f54d 	.word	0x0800f54d
 800f528:	0800f563 	.word	0x0800f563
 800f52c:	0800f53f 	.word	0x0800f53f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800f530:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f534:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f538:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f53c:	e012      	b.n	800f564 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800f53e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f542:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800f546:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f54a:	e00b      	b.n	800f564 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800f54c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f550:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f554:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f558:	e004      	b.n	800f564 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800f55a:	2301      	movs	r3, #1
 800f55c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800f560:	e000      	b.n	800f564 <USB_ActivateEndpoint+0x7c>
      break;
 800f562:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	441a      	add	r2, r3
 800f56e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f57a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f57e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f582:	b29b      	uxth	r3, r3
 800f584:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800f586:	687a      	ldr	r2, [r7, #4]
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	4413      	add	r3, r2
 800f590:	881b      	ldrh	r3, [r3, #0]
 800f592:	b29b      	uxth	r3, r3
 800f594:	b21b      	sxth	r3, r3
 800f596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f59a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f59e:	b21a      	sxth	r2, r3
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	b21b      	sxth	r3, r3
 800f5a6:	4313      	orrs	r3, r2
 800f5a8:	b21b      	sxth	r3, r3
 800f5aa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800f5ae:	687a      	ldr	r2, [r7, #4]
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	009b      	lsls	r3, r3, #2
 800f5b6:	441a      	add	r2, r3
 800f5b8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800f5bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f5c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f5c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f5c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	7b1b      	ldrb	r3, [r3, #12]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	f040 8178 	bne.w	800f8ca <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	785b      	ldrb	r3, [r3, #1]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	f000 8084 	beq.w	800f6ec <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	61bb      	str	r3, [r7, #24]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	69bb      	ldr	r3, [r7, #24]
 800f5f4:	4413      	add	r3, r2
 800f5f6:	61bb      	str	r3, [r7, #24]
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	00da      	lsls	r2, r3, #3
 800f5fe:	69bb      	ldr	r3, [r7, #24]
 800f600:	4413      	add	r3, r2
 800f602:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f606:	617b      	str	r3, [r7, #20]
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	88db      	ldrh	r3, [r3, #6]
 800f60c:	085b      	lsrs	r3, r3, #1
 800f60e:	b29b      	uxth	r3, r3
 800f610:	005b      	lsls	r3, r3, #1
 800f612:	b29a      	uxth	r2, r3
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	009b      	lsls	r3, r3, #2
 800f620:	4413      	add	r3, r2
 800f622:	881b      	ldrh	r3, [r3, #0]
 800f624:	827b      	strh	r3, [r7, #18]
 800f626:	8a7b      	ldrh	r3, [r7, #18]
 800f628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d01b      	beq.n	800f668 <USB_ActivateEndpoint+0x180>
 800f630:	687a      	ldr	r2, [r7, #4]
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	009b      	lsls	r3, r3, #2
 800f638:	4413      	add	r3, r2
 800f63a:	881b      	ldrh	r3, [r3, #0]
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f646:	823b      	strh	r3, [r7, #16]
 800f648:	687a      	ldr	r2, [r7, #4]
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	009b      	lsls	r3, r3, #2
 800f650:	441a      	add	r2, r3
 800f652:	8a3b      	ldrh	r3, [r7, #16]
 800f654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f65c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f660:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f664:	b29b      	uxth	r3, r3
 800f666:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	78db      	ldrb	r3, [r3, #3]
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d020      	beq.n	800f6b2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f670:	687a      	ldr	r2, [r7, #4]
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	009b      	lsls	r3, r3, #2
 800f678:	4413      	add	r3, r2
 800f67a:	881b      	ldrh	r3, [r3, #0]
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f686:	81bb      	strh	r3, [r7, #12]
 800f688:	89bb      	ldrh	r3, [r7, #12]
 800f68a:	f083 0320 	eor.w	r3, r3, #32
 800f68e:	81bb      	strh	r3, [r7, #12]
 800f690:	687a      	ldr	r2, [r7, #4]
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	009b      	lsls	r3, r3, #2
 800f698:	441a      	add	r2, r3
 800f69a:	89bb      	ldrh	r3, [r7, #12]
 800f69c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f6a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f6a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f6a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6ac:	b29b      	uxth	r3, r3
 800f6ae:	8013      	strh	r3, [r2, #0]
 800f6b0:	e2d5      	b.n	800fc5e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f6b2:	687a      	ldr	r2, [r7, #4]
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	009b      	lsls	r3, r3, #2
 800f6ba:	4413      	add	r3, r2
 800f6bc:	881b      	ldrh	r3, [r3, #0]
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6c8:	81fb      	strh	r3, [r7, #14]
 800f6ca:	687a      	ldr	r2, [r7, #4]
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	009b      	lsls	r3, r3, #2
 800f6d2:	441a      	add	r2, r3
 800f6d4:	89fb      	ldrh	r3, [r7, #14]
 800f6d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f6da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f6de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f6e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6e6:	b29b      	uxth	r3, r3
 800f6e8:	8013      	strh	r3, [r2, #0]
 800f6ea:	e2b8      	b.n	800fc5e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	633b      	str	r3, [r7, #48]	; 0x30
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fc:	4413      	add	r3, r2
 800f6fe:	633b      	str	r3, [r7, #48]	; 0x30
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	00da      	lsls	r2, r3, #3
 800f706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f708:	4413      	add	r3, r2
 800f70a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f70e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	88db      	ldrh	r3, [r3, #6]
 800f714:	085b      	lsrs	r3, r3, #1
 800f716:	b29b      	uxth	r3, r3
 800f718:	005b      	lsls	r3, r3, #1
 800f71a:	b29a      	uxth	r2, r3
 800f71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f71e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	62bb      	str	r3, [r7, #40]	; 0x28
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f72a:	b29b      	uxth	r3, r3
 800f72c:	461a      	mov	r2, r3
 800f72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f730:	4413      	add	r3, r2
 800f732:	62bb      	str	r3, [r7, #40]	; 0x28
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	00da      	lsls	r2, r3, #3
 800f73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f73c:	4413      	add	r3, r2
 800f73e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f742:	627b      	str	r3, [r7, #36]	; 0x24
 800f744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f746:	881b      	ldrh	r3, [r3, #0]
 800f748:	b29b      	uxth	r3, r3
 800f74a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f74e:	b29a      	uxth	r2, r3
 800f750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f752:	801a      	strh	r2, [r3, #0]
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	691b      	ldr	r3, [r3, #16]
 800f758:	2b3e      	cmp	r3, #62	; 0x3e
 800f75a:	d91d      	bls.n	800f798 <USB_ActivateEndpoint+0x2b0>
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	691b      	ldr	r3, [r3, #16]
 800f760:	095b      	lsrs	r3, r3, #5
 800f762:	66bb      	str	r3, [r7, #104]	; 0x68
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	691b      	ldr	r3, [r3, #16]
 800f768:	f003 031f 	and.w	r3, r3, #31
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d102      	bne.n	800f776 <USB_ActivateEndpoint+0x28e>
 800f770:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f772:	3b01      	subs	r3, #1
 800f774:	66bb      	str	r3, [r7, #104]	; 0x68
 800f776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f778:	881b      	ldrh	r3, [r3, #0]
 800f77a:	b29a      	uxth	r2, r3
 800f77c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f77e:	b29b      	uxth	r3, r3
 800f780:	029b      	lsls	r3, r3, #10
 800f782:	b29b      	uxth	r3, r3
 800f784:	4313      	orrs	r3, r2
 800f786:	b29b      	uxth	r3, r3
 800f788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f78c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f790:	b29a      	uxth	r2, r3
 800f792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f794:	801a      	strh	r2, [r3, #0]
 800f796:	e026      	b.n	800f7e6 <USB_ActivateEndpoint+0x2fe>
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	691b      	ldr	r3, [r3, #16]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d10a      	bne.n	800f7b6 <USB_ActivateEndpoint+0x2ce>
 800f7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a2:	881b      	ldrh	r3, [r3, #0]
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f7aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f7ae:	b29a      	uxth	r2, r3
 800f7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b2:	801a      	strh	r2, [r3, #0]
 800f7b4:	e017      	b.n	800f7e6 <USB_ActivateEndpoint+0x2fe>
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	691b      	ldr	r3, [r3, #16]
 800f7ba:	085b      	lsrs	r3, r3, #1
 800f7bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	691b      	ldr	r3, [r3, #16]
 800f7c2:	f003 0301 	and.w	r3, r3, #1
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d002      	beq.n	800f7d0 <USB_ActivateEndpoint+0x2e8>
 800f7ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800f7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d2:	881b      	ldrh	r3, [r3, #0]
 800f7d4:	b29a      	uxth	r2, r3
 800f7d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	029b      	lsls	r3, r3, #10
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	4313      	orrs	r3, r2
 800f7e0:	b29a      	uxth	r2, r3
 800f7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f7e6:	687a      	ldr	r2, [r7, #4]
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	009b      	lsls	r3, r3, #2
 800f7ee:	4413      	add	r3, r2
 800f7f0:	881b      	ldrh	r3, [r3, #0]
 800f7f2:	847b      	strh	r3, [r7, #34]	; 0x22
 800f7f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f7f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d01b      	beq.n	800f836 <USB_ActivateEndpoint+0x34e>
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	009b      	lsls	r3, r3, #2
 800f806:	4413      	add	r3, r2
 800f808:	881b      	ldrh	r3, [r3, #0]
 800f80a:	b29b      	uxth	r3, r3
 800f80c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f814:	843b      	strh	r3, [r7, #32]
 800f816:	687a      	ldr	r2, [r7, #4]
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	009b      	lsls	r3, r3, #2
 800f81e:	441a      	add	r2, r3
 800f820:	8c3b      	ldrh	r3, [r7, #32]
 800f822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f82a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f82e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f832:	b29b      	uxth	r3, r3
 800f834:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	781b      	ldrb	r3, [r3, #0]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d124      	bne.n	800f888 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f83e:	687a      	ldr	r2, [r7, #4]
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	009b      	lsls	r3, r3, #2
 800f846:	4413      	add	r3, r2
 800f848:	881b      	ldrh	r3, [r3, #0]
 800f84a:	b29b      	uxth	r3, r3
 800f84c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f854:	83bb      	strh	r3, [r7, #28]
 800f856:	8bbb      	ldrh	r3, [r7, #28]
 800f858:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f85c:	83bb      	strh	r3, [r7, #28]
 800f85e:	8bbb      	ldrh	r3, [r7, #28]
 800f860:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f864:	83bb      	strh	r3, [r7, #28]
 800f866:	687a      	ldr	r2, [r7, #4]
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	009b      	lsls	r3, r3, #2
 800f86e:	441a      	add	r2, r3
 800f870:	8bbb      	ldrh	r3, [r7, #28]
 800f872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f87a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f87e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f882:	b29b      	uxth	r3, r3
 800f884:	8013      	strh	r3, [r2, #0]
 800f886:	e1ea      	b.n	800fc5e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	009b      	lsls	r3, r3, #2
 800f890:	4413      	add	r3, r2
 800f892:	881b      	ldrh	r3, [r3, #0]
 800f894:	b29b      	uxth	r3, r3
 800f896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f89a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f89e:	83fb      	strh	r3, [r7, #30]
 800f8a0:	8bfb      	ldrh	r3, [r7, #30]
 800f8a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f8a6:	83fb      	strh	r3, [r7, #30]
 800f8a8:	687a      	ldr	r2, [r7, #4]
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	009b      	lsls	r3, r3, #2
 800f8b0:	441a      	add	r2, r3
 800f8b2:	8bfb      	ldrh	r3, [r7, #30]
 800f8b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	8013      	strh	r3, [r2, #0]
 800f8c8:	e1c9      	b.n	800fc5e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	78db      	ldrb	r3, [r3, #3]
 800f8ce:	2b02      	cmp	r3, #2
 800f8d0:	d11e      	bne.n	800f910 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	781b      	ldrb	r3, [r3, #0]
 800f8d8:	009b      	lsls	r3, r3, #2
 800f8da:	4413      	add	r3, r2
 800f8dc:	881b      	ldrh	r3, [r3, #0]
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8e8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800f8ec:	687a      	ldr	r2, [r7, #4]
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	441a      	add	r2, r3
 800f8f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f8fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f902:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f90a:	b29b      	uxth	r3, r3
 800f90c:	8013      	strh	r3, [r2, #0]
 800f90e:	e01d      	b.n	800f94c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	781b      	ldrb	r3, [r3, #0]
 800f916:	009b      	lsls	r3, r3, #2
 800f918:	4413      	add	r3, r2
 800f91a:	881b      	ldrh	r3, [r3, #0]
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800f922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f926:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800f92a:	687a      	ldr	r2, [r7, #4]
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	009b      	lsls	r3, r3, #2
 800f932:	441a      	add	r2, r3
 800f934:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800f938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f93c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f948:	b29b      	uxth	r3, r3
 800f94a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f956:	b29b      	uxth	r3, r3
 800f958:	461a      	mov	r2, r3
 800f95a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f95c:	4413      	add	r3, r2
 800f95e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	00da      	lsls	r2, r3, #3
 800f966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f968:	4413      	add	r3, r2
 800f96a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f96e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	891b      	ldrh	r3, [r3, #8]
 800f974:	085b      	lsrs	r3, r3, #1
 800f976:	b29b      	uxth	r3, r3
 800f978:	005b      	lsls	r3, r3, #1
 800f97a:	b29a      	uxth	r2, r3
 800f97c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f97e:	801a      	strh	r2, [r3, #0]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	657b      	str	r3, [r7, #84]	; 0x54
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f98a:	b29b      	uxth	r3, r3
 800f98c:	461a      	mov	r2, r3
 800f98e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f990:	4413      	add	r3, r2
 800f992:	657b      	str	r3, [r7, #84]	; 0x54
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	00da      	lsls	r2, r3, #3
 800f99a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f99c:	4413      	add	r3, r2
 800f99e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f9a2:	653b      	str	r3, [r7, #80]	; 0x50
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	895b      	ldrh	r3, [r3, #10]
 800f9a8:	085b      	lsrs	r3, r3, #1
 800f9aa:	b29b      	uxth	r3, r3
 800f9ac:	005b      	lsls	r3, r3, #1
 800f9ae:	b29a      	uxth	r2, r3
 800f9b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9b2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	785b      	ldrb	r3, [r3, #1]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	f040 8093 	bne.w	800fae4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f9be:	687a      	ldr	r2, [r7, #4]
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	009b      	lsls	r3, r3, #2
 800f9c6:	4413      	add	r3, r2
 800f9c8:	881b      	ldrh	r3, [r3, #0]
 800f9ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f9ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f9d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d01b      	beq.n	800fa12 <USB_ActivateEndpoint+0x52a>
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	009b      	lsls	r3, r3, #2
 800f9e2:	4413      	add	r3, r2
 800f9e4:	881b      	ldrh	r3, [r3, #0]
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f9f2:	687a      	ldr	r2, [r7, #4]
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	009b      	lsls	r3, r3, #2
 800f9fa:	441a      	add	r2, r3
 800f9fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f9fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fa0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa0e:	b29b      	uxth	r3, r3
 800fa10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	009b      	lsls	r3, r3, #2
 800fa1a:	4413      	add	r3, r2
 800fa1c:	881b      	ldrh	r3, [r3, #0]
 800fa1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800fa20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fa22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d01b      	beq.n	800fa62 <USB_ActivateEndpoint+0x57a>
 800fa2a:	687a      	ldr	r2, [r7, #4]
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	009b      	lsls	r3, r3, #2
 800fa32:	4413      	add	r3, r2
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa40:	877b      	strh	r3, [r7, #58]	; 0x3a
 800fa42:	687a      	ldr	r2, [r7, #4]
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	009b      	lsls	r3, r3, #2
 800fa4a:	441a      	add	r2, r3
 800fa4c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fa4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fa62:	687a      	ldr	r2, [r7, #4]
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	781b      	ldrb	r3, [r3, #0]
 800fa68:	009b      	lsls	r3, r3, #2
 800fa6a:	4413      	add	r3, r2
 800fa6c:	881b      	ldrh	r3, [r3, #0]
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa78:	873b      	strh	r3, [r7, #56]	; 0x38
 800fa7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fa7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fa80:	873b      	strh	r3, [r7, #56]	; 0x38
 800fa82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fa84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fa88:	873b      	strh	r3, [r7, #56]	; 0x38
 800fa8a:	687a      	ldr	r2, [r7, #4]
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	009b      	lsls	r3, r3, #2
 800fa92:	441a      	add	r2, r3
 800fa94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fa96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800faa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800faaa:	687a      	ldr	r2, [r7, #4]
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	009b      	lsls	r3, r3, #2
 800fab2:	4413      	add	r3, r2
 800fab4:	881b      	ldrh	r3, [r3, #0]
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fabc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fac0:	86fb      	strh	r3, [r7, #54]	; 0x36
 800fac2:	687a      	ldr	r2, [r7, #4]
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	441a      	add	r2, r3
 800facc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800face:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fade:	b29b      	uxth	r3, r3
 800fae0:	8013      	strh	r3, [r2, #0]
 800fae2:	e0bc      	b.n	800fc5e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	781b      	ldrb	r3, [r3, #0]
 800faea:	009b      	lsls	r3, r3, #2
 800faec:	4413      	add	r3, r2
 800faee:	881b      	ldrh	r3, [r3, #0]
 800faf0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800faf4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800faf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d01d      	beq.n	800fb3c <USB_ActivateEndpoint+0x654>
 800fb00:	687a      	ldr	r2, [r7, #4]
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	781b      	ldrb	r3, [r3, #0]
 800fb06:	009b      	lsls	r3, r3, #2
 800fb08:	4413      	add	r3, r2
 800fb0a:	881b      	ldrh	r3, [r3, #0]
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb16:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800fb1a:	687a      	ldr	r2, [r7, #4]
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	009b      	lsls	r3, r3, #2
 800fb22:	441a      	add	r2, r3
 800fb24:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800fb28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fb34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb38:	b29b      	uxth	r3, r3
 800fb3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fb3c:	687a      	ldr	r2, [r7, #4]
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	4413      	add	r3, r2
 800fb46:	881b      	ldrh	r3, [r3, #0]
 800fb48:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800fb4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800fb50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d01d      	beq.n	800fb94 <USB_ActivateEndpoint+0x6ac>
 800fb58:	687a      	ldr	r2, [r7, #4]
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	009b      	lsls	r3, r3, #2
 800fb60:	4413      	add	r3, r2
 800fb62:	881b      	ldrh	r3, [r3, #0]
 800fb64:	b29b      	uxth	r3, r3
 800fb66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb6e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800fb72:	687a      	ldr	r2, [r7, #4]
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	009b      	lsls	r3, r3, #2
 800fb7a:	441a      	add	r2, r3
 800fb7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800fb80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	78db      	ldrb	r3, [r3, #3]
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	d024      	beq.n	800fbe6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fb9c:	687a      	ldr	r2, [r7, #4]
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	009b      	lsls	r3, r3, #2
 800fba4:	4413      	add	r3, r2
 800fba6:	881b      	ldrh	r3, [r3, #0]
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fbae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbb2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800fbb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fbba:	f083 0320 	eor.w	r3, r3, #32
 800fbbe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	009b      	lsls	r3, r3, #2
 800fbca:	441a      	add	r2, r3
 800fbcc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fbd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fbd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fbd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fbdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	8013      	strh	r3, [r2, #0]
 800fbe4:	e01d      	b.n	800fc22 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fbe6:	687a      	ldr	r2, [r7, #4]
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	009b      	lsls	r3, r3, #2
 800fbee:	4413      	add	r3, r2
 800fbf0:	881b      	ldrh	r3, [r3, #0]
 800fbf2:	b29b      	uxth	r3, r3
 800fbf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fbf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbfc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800fc00:	687a      	ldr	r2, [r7, #4]
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	009b      	lsls	r3, r3, #2
 800fc08:	441a      	add	r2, r3
 800fc0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fc0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fc22:	687a      	ldr	r2, [r7, #4]
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	009b      	lsls	r3, r3, #2
 800fc2a:	4413      	add	r3, r2
 800fc2c:	881b      	ldrh	r3, [r3, #0]
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fc34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	781b      	ldrb	r3, [r3, #0]
 800fc42:	009b      	lsls	r3, r3, #2
 800fc44:	441a      	add	r2, r3
 800fc46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fc4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800fc5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3774      	adds	r7, #116	; 0x74
 800fc66:	46bd      	mov	sp, r7
 800fc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6c:	4770      	bx	lr
 800fc6e:	bf00      	nop

0800fc70 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fc70:	b480      	push	{r7}
 800fc72:	b08d      	sub	sp, #52	; 0x34
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	7b1b      	ldrb	r3, [r3, #12]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	f040 808e 	bne.w	800fda0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	785b      	ldrb	r3, [r3, #1]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d044      	beq.n	800fd16 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	781b      	ldrb	r3, [r3, #0]
 800fc92:	009b      	lsls	r3, r3, #2
 800fc94:	4413      	add	r3, r2
 800fc96:	881b      	ldrh	r3, [r3, #0]
 800fc98:	81bb      	strh	r3, [r7, #12]
 800fc9a:	89bb      	ldrh	r3, [r7, #12]
 800fc9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d01b      	beq.n	800fcdc <USB_DeactivateEndpoint+0x6c>
 800fca4:	687a      	ldr	r2, [r7, #4]
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	781b      	ldrb	r3, [r3, #0]
 800fcaa:	009b      	lsls	r3, r3, #2
 800fcac:	4413      	add	r3, r2
 800fcae:	881b      	ldrh	r3, [r3, #0]
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fcb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fcba:	817b      	strh	r3, [r7, #10]
 800fcbc:	687a      	ldr	r2, [r7, #4]
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	009b      	lsls	r3, r3, #2
 800fcc4:	441a      	add	r2, r3
 800fcc6:	897b      	ldrh	r3, [r7, #10]
 800fcc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fcd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fcd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fcd8:	b29b      	uxth	r3, r3
 800fcda:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fcdc:	687a      	ldr	r2, [r7, #4]
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	009b      	lsls	r3, r3, #2
 800fce4:	4413      	add	r3, r2
 800fce6:	881b      	ldrh	r3, [r3, #0]
 800fce8:	b29b      	uxth	r3, r3
 800fcea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fcee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fcf2:	813b      	strh	r3, [r7, #8]
 800fcf4:	687a      	ldr	r2, [r7, #4]
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	781b      	ldrb	r3, [r3, #0]
 800fcfa:	009b      	lsls	r3, r3, #2
 800fcfc:	441a      	add	r2, r3
 800fcfe:	893b      	ldrh	r3, [r7, #8]
 800fd00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd10:	b29b      	uxth	r3, r3
 800fd12:	8013      	strh	r3, [r2, #0]
 800fd14:	e192      	b.n	801003c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fd16:	687a      	ldr	r2, [r7, #4]
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	781b      	ldrb	r3, [r3, #0]
 800fd1c:	009b      	lsls	r3, r3, #2
 800fd1e:	4413      	add	r3, r2
 800fd20:	881b      	ldrh	r3, [r3, #0]
 800fd22:	827b      	strh	r3, [r7, #18]
 800fd24:	8a7b      	ldrh	r3, [r7, #18]
 800fd26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d01b      	beq.n	800fd66 <USB_DeactivateEndpoint+0xf6>
 800fd2e:	687a      	ldr	r2, [r7, #4]
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	009b      	lsls	r3, r3, #2
 800fd36:	4413      	add	r3, r2
 800fd38:	881b      	ldrh	r3, [r3, #0]
 800fd3a:	b29b      	uxth	r3, r3
 800fd3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd44:	823b      	strh	r3, [r7, #16]
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	009b      	lsls	r3, r3, #2
 800fd4e:	441a      	add	r2, r3
 800fd50:	8a3b      	ldrh	r3, [r7, #16]
 800fd52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fd5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fd66:	687a      	ldr	r2, [r7, #4]
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	009b      	lsls	r3, r3, #2
 800fd6e:	4413      	add	r3, r2
 800fd70:	881b      	ldrh	r3, [r3, #0]
 800fd72:	b29b      	uxth	r3, r3
 800fd74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fd78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd7c:	81fb      	strh	r3, [r7, #14]
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	009b      	lsls	r3, r3, #2
 800fd86:	441a      	add	r2, r3
 800fd88:	89fb      	ldrh	r3, [r7, #14]
 800fd8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	8013      	strh	r3, [r2, #0]
 800fd9e:	e14d      	b.n	801003c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	785b      	ldrb	r3, [r3, #1]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	f040 80a5 	bne.w	800fef4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	781b      	ldrb	r3, [r3, #0]
 800fdb0:	009b      	lsls	r3, r3, #2
 800fdb2:	4413      	add	r3, r2
 800fdb4:	881b      	ldrh	r3, [r3, #0]
 800fdb6:	843b      	strh	r3, [r7, #32]
 800fdb8:	8c3b      	ldrh	r3, [r7, #32]
 800fdba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d01b      	beq.n	800fdfa <USB_DeactivateEndpoint+0x18a>
 800fdc2:	687a      	ldr	r2, [r7, #4]
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	781b      	ldrb	r3, [r3, #0]
 800fdc8:	009b      	lsls	r3, r3, #2
 800fdca:	4413      	add	r3, r2
 800fdcc:	881b      	ldrh	r3, [r3, #0]
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fdd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdd8:	83fb      	strh	r3, [r7, #30]
 800fdda:	687a      	ldr	r2, [r7, #4]
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	781b      	ldrb	r3, [r3, #0]
 800fde0:	009b      	lsls	r3, r3, #2
 800fde2:	441a      	add	r2, r3
 800fde4:	8bfb      	ldrh	r3, [r7, #30]
 800fde6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fdea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fdee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fdf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdf6:	b29b      	uxth	r3, r3
 800fdf8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fdfa:	687a      	ldr	r2, [r7, #4]
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	009b      	lsls	r3, r3, #2
 800fe02:	4413      	add	r3, r2
 800fe04:	881b      	ldrh	r3, [r3, #0]
 800fe06:	83bb      	strh	r3, [r7, #28]
 800fe08:	8bbb      	ldrh	r3, [r7, #28]
 800fe0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d01b      	beq.n	800fe4a <USB_DeactivateEndpoint+0x1da>
 800fe12:	687a      	ldr	r2, [r7, #4]
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	781b      	ldrb	r3, [r3, #0]
 800fe18:	009b      	lsls	r3, r3, #2
 800fe1a:	4413      	add	r3, r2
 800fe1c:	881b      	ldrh	r3, [r3, #0]
 800fe1e:	b29b      	uxth	r3, r3
 800fe20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe28:	837b      	strh	r3, [r7, #26]
 800fe2a:	687a      	ldr	r2, [r7, #4]
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	441a      	add	r2, r3
 800fe34:	8b7b      	ldrh	r3, [r7, #26]
 800fe36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800fe4a:	687a      	ldr	r2, [r7, #4]
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	009b      	lsls	r3, r3, #2
 800fe52:	4413      	add	r3, r2
 800fe54:	881b      	ldrh	r3, [r3, #0]
 800fe56:	b29b      	uxth	r3, r3
 800fe58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe60:	833b      	strh	r3, [r7, #24]
 800fe62:	687a      	ldr	r2, [r7, #4]
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	781b      	ldrb	r3, [r3, #0]
 800fe68:	009b      	lsls	r3, r3, #2
 800fe6a:	441a      	add	r2, r3
 800fe6c:	8b3b      	ldrh	r3, [r7, #24]
 800fe6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fe82:	687a      	ldr	r2, [r7, #4]
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	009b      	lsls	r3, r3, #2
 800fe8a:	4413      	add	r3, r2
 800fe8c:	881b      	ldrh	r3, [r3, #0]
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fe94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe98:	82fb      	strh	r3, [r7, #22]
 800fe9a:	687a      	ldr	r2, [r7, #4]
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	781b      	ldrb	r3, [r3, #0]
 800fea0:	009b      	lsls	r3, r3, #2
 800fea2:	441a      	add	r2, r3
 800fea4:	8afb      	ldrh	r3, [r7, #22]
 800fea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800feaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800feae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800feb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800feba:	687a      	ldr	r2, [r7, #4]
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	009b      	lsls	r3, r3, #2
 800fec2:	4413      	add	r3, r2
 800fec4:	881b      	ldrh	r3, [r3, #0]
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fed0:	82bb      	strh	r3, [r7, #20]
 800fed2:	687a      	ldr	r2, [r7, #4]
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	009b      	lsls	r3, r3, #2
 800feda:	441a      	add	r2, r3
 800fedc:	8abb      	ldrh	r3, [r7, #20]
 800fede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800feea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800feee:	b29b      	uxth	r3, r3
 800fef0:	8013      	strh	r3, [r2, #0]
 800fef2:	e0a3      	b.n	801003c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fef4:	687a      	ldr	r2, [r7, #4]
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	781b      	ldrb	r3, [r3, #0]
 800fefa:	009b      	lsls	r3, r3, #2
 800fefc:	4413      	add	r3, r2
 800fefe:	881b      	ldrh	r3, [r3, #0]
 800ff00:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ff02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d01b      	beq.n	800ff44 <USB_DeactivateEndpoint+0x2d4>
 800ff0c:	687a      	ldr	r2, [r7, #4]
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	781b      	ldrb	r3, [r3, #0]
 800ff12:	009b      	lsls	r3, r3, #2
 800ff14:	4413      	add	r3, r2
 800ff16:	881b      	ldrh	r3, [r3, #0]
 800ff18:	b29b      	uxth	r3, r3
 800ff1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff22:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	781b      	ldrb	r3, [r3, #0]
 800ff2a:	009b      	lsls	r3, r3, #2
 800ff2c:	441a      	add	r2, r3
 800ff2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ff30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ff3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff40:	b29b      	uxth	r3, r3
 800ff42:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	781b      	ldrb	r3, [r3, #0]
 800ff4a:	009b      	lsls	r3, r3, #2
 800ff4c:	4413      	add	r3, r2
 800ff4e:	881b      	ldrh	r3, [r3, #0]
 800ff50:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ff52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ff54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d01b      	beq.n	800ff94 <USB_DeactivateEndpoint+0x324>
 800ff5c:	687a      	ldr	r2, [r7, #4]
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	009b      	lsls	r3, r3, #2
 800ff64:	4413      	add	r3, r2
 800ff66:	881b      	ldrh	r3, [r3, #0]
 800ff68:	b29b      	uxth	r3, r3
 800ff6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff72:	853b      	strh	r3, [r7, #40]	; 0x28
 800ff74:	687a      	ldr	r2, [r7, #4]
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	781b      	ldrb	r3, [r3, #0]
 800ff7a:	009b      	lsls	r3, r3, #2
 800ff7c:	441a      	add	r2, r3
 800ff7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ff80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ff90:	b29b      	uxth	r3, r3
 800ff92:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ff94:	687a      	ldr	r2, [r7, #4]
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	4413      	add	r3, r2
 800ff9e:	881b      	ldrh	r3, [r3, #0]
 800ffa0:	b29b      	uxth	r3, r3
 800ffa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ffa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffaa:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	009b      	lsls	r3, r3, #2
 800ffb4:	441a      	add	r2, r3
 800ffb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ffb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ffbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ffc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ffc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffc8:	b29b      	uxth	r3, r3
 800ffca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	009b      	lsls	r3, r3, #2
 800ffd4:	4413      	add	r3, r2
 800ffd6:	881b      	ldrh	r3, [r3, #0]
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ffde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ffe2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ffe4:	687a      	ldr	r2, [r7, #4]
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	009b      	lsls	r3, r3, #2
 800ffec:	441a      	add	r2, r3
 800ffee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010000:	b29b      	uxth	r3, r3
 8010002:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010004:	687a      	ldr	r2, [r7, #4]
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	781b      	ldrb	r3, [r3, #0]
 801000a:	009b      	lsls	r3, r3, #2
 801000c:	4413      	add	r3, r2
 801000e:	881b      	ldrh	r3, [r3, #0]
 8010010:	b29b      	uxth	r3, r3
 8010012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801001a:	847b      	strh	r3, [r7, #34]	; 0x22
 801001c:	687a      	ldr	r2, [r7, #4]
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	009b      	lsls	r3, r3, #2
 8010024:	441a      	add	r2, r3
 8010026:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801002c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010038:	b29b      	uxth	r3, r3
 801003a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801003c:	2300      	movs	r3, #0
}
 801003e:	4618      	mov	r0, r3
 8010040:	3734      	adds	r7, #52	; 0x34
 8010042:	46bd      	mov	sp, r7
 8010044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010048:	4770      	bx	lr

0801004a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801004a:	b580      	push	{r7, lr}
 801004c:	b0c2      	sub	sp, #264	; 0x108
 801004e:	af00      	add	r7, sp, #0
 8010050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010058:	6018      	str	r0, [r3, #0]
 801005a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801005e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010062:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	785b      	ldrb	r3, [r3, #1]
 8010070:	2b01      	cmp	r3, #1
 8010072:	f040 86b7 	bne.w	8010de4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8010076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801007a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	699a      	ldr	r2, [r3, #24]
 8010082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	691b      	ldr	r3, [r3, #16]
 801008e:	429a      	cmp	r2, r3
 8010090:	d908      	bls.n	80100a4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8010092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	691b      	ldr	r3, [r3, #16]
 801009e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80100a2:	e007      	b.n	80100b4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80100a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	699b      	ldr	r3, [r3, #24]
 80100b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80100b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	7b1b      	ldrb	r3, [r3, #12]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d13a      	bne.n	801013a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80100c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	6959      	ldr	r1, [r3, #20]
 80100d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	88da      	ldrh	r2, [r3, #6]
 80100dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100e0:	b29b      	uxth	r3, r3
 80100e2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80100e6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80100ea:	6800      	ldr	r0, [r0, #0]
 80100ec:	f001 fcb9 	bl	8011a62 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80100f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	613b      	str	r3, [r7, #16]
 80100fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010100:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801010a:	b29b      	uxth	r3, r3
 801010c:	461a      	mov	r2, r3
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	4413      	add	r3, r2
 8010112:	613b      	str	r3, [r7, #16]
 8010114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	781b      	ldrb	r3, [r3, #0]
 8010120:	00da      	lsls	r2, r3, #3
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	4413      	add	r3, r2
 8010126:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801012a:	60fb      	str	r3, [r7, #12]
 801012c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010130:	b29a      	uxth	r2, r3
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	801a      	strh	r2, [r3, #0]
 8010136:	f000 be1f 	b.w	8010d78 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801013a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801013e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	78db      	ldrb	r3, [r3, #3]
 8010146:	2b02      	cmp	r3, #2
 8010148:	f040 8462 	bne.w	8010a10 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801014c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	6a1a      	ldr	r2, [r3, #32]
 8010158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801015c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	691b      	ldr	r3, [r3, #16]
 8010164:	429a      	cmp	r2, r3
 8010166:	f240 83df 	bls.w	8010928 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801016a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801016e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010172:	681a      	ldr	r2, [r3, #0]
 8010174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	781b      	ldrb	r3, [r3, #0]
 8010180:	009b      	lsls	r3, r3, #2
 8010182:	4413      	add	r3, r2
 8010184:	881b      	ldrh	r3, [r3, #0]
 8010186:	b29b      	uxth	r3, r3
 8010188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801018c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010190:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8010194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801019c:	681a      	ldr	r2, [r3, #0]
 801019e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	009b      	lsls	r3, r3, #2
 80101ac:	441a      	add	r2, r3
 80101ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80101b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80101b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80101ba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80101be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80101c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	6a1a      	ldr	r2, [r3, #32]
 80101d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101d6:	1ad2      	subs	r2, r2, r3
 80101d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80101e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80101ec:	681a      	ldr	r2, [r3, #0]
 80101ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	009b      	lsls	r3, r3, #2
 80101fc:	4413      	add	r3, r2
 80101fe:	881b      	ldrh	r3, [r3, #0]
 8010200:	b29b      	uxth	r3, r3
 8010202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010206:	2b00      	cmp	r3, #0
 8010208:	f000 81c7 	beq.w	801059a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801020c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010210:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	633b      	str	r3, [r7, #48]	; 0x30
 8010218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801021c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	785b      	ldrb	r3, [r3, #1]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d177      	bne.n	8010318 <USB_EPStartXfer+0x2ce>
 8010228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801022c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	62bb      	str	r3, [r7, #40]	; 0x28
 8010234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010238:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010242:	b29b      	uxth	r3, r3
 8010244:	461a      	mov	r2, r3
 8010246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010248:	4413      	add	r3, r2
 801024a:	62bb      	str	r3, [r7, #40]	; 0x28
 801024c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	00da      	lsls	r2, r3, #3
 801025a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025c:	4413      	add	r3, r2
 801025e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010262:	627b      	str	r3, [r7, #36]	; 0x24
 8010264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010266:	881b      	ldrh	r3, [r3, #0]
 8010268:	b29b      	uxth	r3, r3
 801026a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801026e:	b29a      	uxth	r2, r3
 8010270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010272:	801a      	strh	r2, [r3, #0]
 8010274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010278:	2b3e      	cmp	r3, #62	; 0x3e
 801027a:	d921      	bls.n	80102c0 <USB_EPStartXfer+0x276>
 801027c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010280:	095b      	lsrs	r3, r3, #5
 8010282:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801028a:	f003 031f 	and.w	r3, r3, #31
 801028e:	2b00      	cmp	r3, #0
 8010290:	d104      	bne.n	801029c <USB_EPStartXfer+0x252>
 8010292:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010296:	3b01      	subs	r3, #1
 8010298:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801029c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801029e:	881b      	ldrh	r3, [r3, #0]
 80102a0:	b29a      	uxth	r2, r3
 80102a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80102a6:	b29b      	uxth	r3, r3
 80102a8:	029b      	lsls	r3, r3, #10
 80102aa:	b29b      	uxth	r3, r3
 80102ac:	4313      	orrs	r3, r2
 80102ae:	b29b      	uxth	r3, r3
 80102b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80102b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80102b8:	b29a      	uxth	r2, r3
 80102ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102bc:	801a      	strh	r2, [r3, #0]
 80102be:	e050      	b.n	8010362 <USB_EPStartXfer+0x318>
 80102c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d10a      	bne.n	80102de <USB_EPStartXfer+0x294>
 80102c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ca:	881b      	ldrh	r3, [r3, #0]
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80102d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80102d6:	b29a      	uxth	r2, r3
 80102d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102da:	801a      	strh	r2, [r3, #0]
 80102dc:	e041      	b.n	8010362 <USB_EPStartXfer+0x318>
 80102de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102e2:	085b      	lsrs	r3, r3, #1
 80102e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80102e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102ec:	f003 0301 	and.w	r3, r3, #1
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d004      	beq.n	80102fe <USB_EPStartXfer+0x2b4>
 80102f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80102f8:	3301      	adds	r3, #1
 80102fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80102fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010300:	881b      	ldrh	r3, [r3, #0]
 8010302:	b29a      	uxth	r2, r3
 8010304:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010308:	b29b      	uxth	r3, r3
 801030a:	029b      	lsls	r3, r3, #10
 801030c:	b29b      	uxth	r3, r3
 801030e:	4313      	orrs	r3, r2
 8010310:	b29a      	uxth	r2, r3
 8010312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010314:	801a      	strh	r2, [r3, #0]
 8010316:	e024      	b.n	8010362 <USB_EPStartXfer+0x318>
 8010318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801031c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	785b      	ldrb	r3, [r3, #1]
 8010324:	2b01      	cmp	r3, #1
 8010326:	d11c      	bne.n	8010362 <USB_EPStartXfer+0x318>
 8010328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801032c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010336:	b29b      	uxth	r3, r3
 8010338:	461a      	mov	r2, r3
 801033a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801033c:	4413      	add	r3, r2
 801033e:	633b      	str	r3, [r7, #48]	; 0x30
 8010340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	00da      	lsls	r2, r3, #3
 801034e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010350:	4413      	add	r3, r2
 8010352:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010356:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801035c:	b29a      	uxth	r2, r3
 801035e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010360:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	895b      	ldrh	r3, [r3, #10]
 801036e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	6959      	ldr	r1, [r3, #20]
 801037e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010382:	b29b      	uxth	r3, r3
 8010384:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010388:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801038c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010390:	6800      	ldr	r0, [r0, #0]
 8010392:	f001 fb66 	bl	8011a62 <USB_WritePMA>
            ep->xfer_buff += len;
 8010396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801039a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	695a      	ldr	r2, [r3, #20]
 80103a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103a6:	441a      	add	r2, r3
 80103a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80103b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	6a1a      	ldr	r2, [r3, #32]
 80103c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	691b      	ldr	r3, [r3, #16]
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d90f      	bls.n	80103f0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80103d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	6a1a      	ldr	r2, [r3, #32]
 80103dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103e0:	1ad2      	subs	r2, r2, r3
 80103e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	621a      	str	r2, [r3, #32]
 80103ee:	e00e      	b.n	801040e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80103f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	6a1b      	ldr	r3, [r3, #32]
 80103fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	2200      	movs	r2, #0
 801040c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801040e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	785b      	ldrb	r3, [r3, #1]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d177      	bne.n	801050e <USB_EPStartXfer+0x4c4>
 801041e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	61bb      	str	r3, [r7, #24]
 801042a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801042e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010438:	b29b      	uxth	r3, r3
 801043a:	461a      	mov	r2, r3
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	4413      	add	r3, r2
 8010440:	61bb      	str	r3, [r7, #24]
 8010442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	00da      	lsls	r2, r3, #3
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	4413      	add	r3, r2
 8010454:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010458:	617b      	str	r3, [r7, #20]
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	881b      	ldrh	r3, [r3, #0]
 801045e:	b29b      	uxth	r3, r3
 8010460:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010464:	b29a      	uxth	r2, r3
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	801a      	strh	r2, [r3, #0]
 801046a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801046e:	2b3e      	cmp	r3, #62	; 0x3e
 8010470:	d921      	bls.n	80104b6 <USB_EPStartXfer+0x46c>
 8010472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010476:	095b      	lsrs	r3, r3, #5
 8010478:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801047c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010480:	f003 031f 	and.w	r3, r3, #31
 8010484:	2b00      	cmp	r3, #0
 8010486:	d104      	bne.n	8010492 <USB_EPStartXfer+0x448>
 8010488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801048c:	3b01      	subs	r3, #1
 801048e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	881b      	ldrh	r3, [r3, #0]
 8010496:	b29a      	uxth	r2, r3
 8010498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801049c:	b29b      	uxth	r3, r3
 801049e:	029b      	lsls	r3, r3, #10
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	4313      	orrs	r3, r2
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80104aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80104ae:	b29a      	uxth	r2, r3
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	801a      	strh	r2, [r3, #0]
 80104b4:	e056      	b.n	8010564 <USB_EPStartXfer+0x51a>
 80104b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d10a      	bne.n	80104d4 <USB_EPStartXfer+0x48a>
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	881b      	ldrh	r3, [r3, #0]
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80104c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80104cc:	b29a      	uxth	r2, r3
 80104ce:	697b      	ldr	r3, [r7, #20]
 80104d0:	801a      	strh	r2, [r3, #0]
 80104d2:	e047      	b.n	8010564 <USB_EPStartXfer+0x51a>
 80104d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104d8:	085b      	lsrs	r3, r3, #1
 80104da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80104de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104e2:	f003 0301 	and.w	r3, r3, #1
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d004      	beq.n	80104f4 <USB_EPStartXfer+0x4aa>
 80104ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80104ee:	3301      	adds	r3, #1
 80104f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	881b      	ldrh	r3, [r3, #0]
 80104f8:	b29a      	uxth	r2, r3
 80104fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80104fe:	b29b      	uxth	r3, r3
 8010500:	029b      	lsls	r3, r3, #10
 8010502:	b29b      	uxth	r3, r3
 8010504:	4313      	orrs	r3, r2
 8010506:	b29a      	uxth	r2, r3
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	801a      	strh	r2, [r3, #0]
 801050c:	e02a      	b.n	8010564 <USB_EPStartXfer+0x51a>
 801050e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	785b      	ldrb	r3, [r3, #1]
 801051a:	2b01      	cmp	r3, #1
 801051c:	d122      	bne.n	8010564 <USB_EPStartXfer+0x51a>
 801051e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	623b      	str	r3, [r7, #32]
 801052a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801052e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010538:	b29b      	uxth	r3, r3
 801053a:	461a      	mov	r2, r3
 801053c:	6a3b      	ldr	r3, [r7, #32]
 801053e:	4413      	add	r3, r2
 8010540:	623b      	str	r3, [r7, #32]
 8010542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	00da      	lsls	r2, r3, #3
 8010550:	6a3b      	ldr	r3, [r7, #32]
 8010552:	4413      	add	r3, r2
 8010554:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010558:	61fb      	str	r3, [r7, #28]
 801055a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801055e:	b29a      	uxth	r2, r3
 8010560:	69fb      	ldr	r3, [r7, #28]
 8010562:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	891b      	ldrh	r3, [r3, #8]
 8010570:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	6959      	ldr	r1, [r3, #20]
 8010580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010584:	b29b      	uxth	r3, r3
 8010586:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801058a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801058e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010592:	6800      	ldr	r0, [r0, #0]
 8010594:	f001 fa65 	bl	8011a62 <USB_WritePMA>
 8010598:	e3ee      	b.n	8010d78 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801059a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801059e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	785b      	ldrb	r3, [r3, #1]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d177      	bne.n	801069a <USB_EPStartXfer+0x650>
 80105aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80105b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	461a      	mov	r2, r3
 80105c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105ca:	4413      	add	r3, r2
 80105cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80105ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	781b      	ldrb	r3, [r3, #0]
 80105da:	00da      	lsls	r2, r3, #3
 80105dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105de:	4413      	add	r3, r2
 80105e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80105e4:	647b      	str	r3, [r7, #68]	; 0x44
 80105e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105e8:	881b      	ldrh	r3, [r3, #0]
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80105f0:	b29a      	uxth	r2, r3
 80105f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105f4:	801a      	strh	r2, [r3, #0]
 80105f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105fa:	2b3e      	cmp	r3, #62	; 0x3e
 80105fc:	d921      	bls.n	8010642 <USB_EPStartXfer+0x5f8>
 80105fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010602:	095b      	lsrs	r3, r3, #5
 8010604:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801060c:	f003 031f 	and.w	r3, r3, #31
 8010610:	2b00      	cmp	r3, #0
 8010612:	d104      	bne.n	801061e <USB_EPStartXfer+0x5d4>
 8010614:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010618:	3b01      	subs	r3, #1
 801061a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801061e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010620:	881b      	ldrh	r3, [r3, #0]
 8010622:	b29a      	uxth	r2, r3
 8010624:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010628:	b29b      	uxth	r3, r3
 801062a:	029b      	lsls	r3, r3, #10
 801062c:	b29b      	uxth	r3, r3
 801062e:	4313      	orrs	r3, r2
 8010630:	b29b      	uxth	r3, r3
 8010632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801063a:	b29a      	uxth	r2, r3
 801063c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801063e:	801a      	strh	r2, [r3, #0]
 8010640:	e056      	b.n	80106f0 <USB_EPStartXfer+0x6a6>
 8010642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010646:	2b00      	cmp	r3, #0
 8010648:	d10a      	bne.n	8010660 <USB_EPStartXfer+0x616>
 801064a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801064c:	881b      	ldrh	r3, [r3, #0]
 801064e:	b29b      	uxth	r3, r3
 8010650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010658:	b29a      	uxth	r2, r3
 801065a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801065c:	801a      	strh	r2, [r3, #0]
 801065e:	e047      	b.n	80106f0 <USB_EPStartXfer+0x6a6>
 8010660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010664:	085b      	lsrs	r3, r3, #1
 8010666:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801066a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801066e:	f003 0301 	and.w	r3, r3, #1
 8010672:	2b00      	cmp	r3, #0
 8010674:	d004      	beq.n	8010680 <USB_EPStartXfer+0x636>
 8010676:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801067a:	3301      	adds	r3, #1
 801067c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010682:	881b      	ldrh	r3, [r3, #0]
 8010684:	b29a      	uxth	r2, r3
 8010686:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801068a:	b29b      	uxth	r3, r3
 801068c:	029b      	lsls	r3, r3, #10
 801068e:	b29b      	uxth	r3, r3
 8010690:	4313      	orrs	r3, r2
 8010692:	b29a      	uxth	r2, r3
 8010694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010696:	801a      	strh	r2, [r3, #0]
 8010698:	e02a      	b.n	80106f0 <USB_EPStartXfer+0x6a6>
 801069a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801069e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	785b      	ldrb	r3, [r3, #1]
 80106a6:	2b01      	cmp	r3, #1
 80106a8:	d122      	bne.n	80106f0 <USB_EPStartXfer+0x6a6>
 80106aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	653b      	str	r3, [r7, #80]	; 0x50
 80106b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	461a      	mov	r2, r3
 80106c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106ca:	4413      	add	r3, r2
 80106cc:	653b      	str	r3, [r7, #80]	; 0x50
 80106ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	781b      	ldrb	r3, [r3, #0]
 80106da:	00da      	lsls	r2, r3, #3
 80106dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106de:	4413      	add	r3, r2
 80106e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80106e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80106e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106ea:	b29a      	uxth	r2, r3
 80106ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80106f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	891b      	ldrh	r3, [r3, #8]
 80106fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	6959      	ldr	r1, [r3, #20]
 801070c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010710:	b29b      	uxth	r3, r3
 8010712:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010716:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801071a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801071e:	6800      	ldr	r0, [r0, #0]
 8010720:	f001 f99f 	bl	8011a62 <USB_WritePMA>
            ep->xfer_buff += len;
 8010724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	695a      	ldr	r2, [r3, #20]
 8010730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010734:	441a      	add	r2, r3
 8010736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801073a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	6a1a      	ldr	r2, [r3, #32]
 801074e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	691b      	ldr	r3, [r3, #16]
 801075a:	429a      	cmp	r2, r3
 801075c:	d90f      	bls.n	801077e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 801075e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	6a1a      	ldr	r2, [r3, #32]
 801076a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801076e:	1ad2      	subs	r2, r2, r3
 8010770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	621a      	str	r2, [r3, #32]
 801077c:	e00e      	b.n	801079c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 801077e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	6a1b      	ldr	r3, [r3, #32]
 801078a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 801078e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	2200      	movs	r2, #0
 801079a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801079c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	643b      	str	r3, [r7, #64]	; 0x40
 80107a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	785b      	ldrb	r3, [r3, #1]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d177      	bne.n	80108a8 <USB_EPStartXfer+0x85e>
 80107b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80107c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	461a      	mov	r2, r3
 80107d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d8:	4413      	add	r3, r2
 80107da:	63bb      	str	r3, [r7, #56]	; 0x38
 80107dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	00da      	lsls	r2, r3, #3
 80107ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ec:	4413      	add	r3, r2
 80107ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80107f2:	637b      	str	r3, [r7, #52]	; 0x34
 80107f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107f6:	881b      	ldrh	r3, [r3, #0]
 80107f8:	b29b      	uxth	r3, r3
 80107fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80107fe:	b29a      	uxth	r2, r3
 8010800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010802:	801a      	strh	r2, [r3, #0]
 8010804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010808:	2b3e      	cmp	r3, #62	; 0x3e
 801080a:	d921      	bls.n	8010850 <USB_EPStartXfer+0x806>
 801080c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010810:	095b      	lsrs	r3, r3, #5
 8010812:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801081a:	f003 031f 	and.w	r3, r3, #31
 801081e:	2b00      	cmp	r3, #0
 8010820:	d104      	bne.n	801082c <USB_EPStartXfer+0x7e2>
 8010822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010826:	3b01      	subs	r3, #1
 8010828:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801082c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801082e:	881b      	ldrh	r3, [r3, #0]
 8010830:	b29a      	uxth	r2, r3
 8010832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010836:	b29b      	uxth	r3, r3
 8010838:	029b      	lsls	r3, r3, #10
 801083a:	b29b      	uxth	r3, r3
 801083c:	4313      	orrs	r3, r2
 801083e:	b29b      	uxth	r3, r3
 8010840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010848:	b29a      	uxth	r2, r3
 801084a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801084c:	801a      	strh	r2, [r3, #0]
 801084e:	e050      	b.n	80108f2 <USB_EPStartXfer+0x8a8>
 8010850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010854:	2b00      	cmp	r3, #0
 8010856:	d10a      	bne.n	801086e <USB_EPStartXfer+0x824>
 8010858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801085a:	881b      	ldrh	r3, [r3, #0]
 801085c:	b29b      	uxth	r3, r3
 801085e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010866:	b29a      	uxth	r2, r3
 8010868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801086a:	801a      	strh	r2, [r3, #0]
 801086c:	e041      	b.n	80108f2 <USB_EPStartXfer+0x8a8>
 801086e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010872:	085b      	lsrs	r3, r3, #1
 8010874:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801087c:	f003 0301 	and.w	r3, r3, #1
 8010880:	2b00      	cmp	r3, #0
 8010882:	d004      	beq.n	801088e <USB_EPStartXfer+0x844>
 8010884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010888:	3301      	adds	r3, #1
 801088a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801088e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010890:	881b      	ldrh	r3, [r3, #0]
 8010892:	b29a      	uxth	r2, r3
 8010894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010898:	b29b      	uxth	r3, r3
 801089a:	029b      	lsls	r3, r3, #10
 801089c:	b29b      	uxth	r3, r3
 801089e:	4313      	orrs	r3, r2
 80108a0:	b29a      	uxth	r2, r3
 80108a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a4:	801a      	strh	r2, [r3, #0]
 80108a6:	e024      	b.n	80108f2 <USB_EPStartXfer+0x8a8>
 80108a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	785b      	ldrb	r3, [r3, #1]
 80108b4:	2b01      	cmp	r3, #1
 80108b6:	d11c      	bne.n	80108f2 <USB_EPStartXfer+0x8a8>
 80108b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	461a      	mov	r2, r3
 80108ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108cc:	4413      	add	r3, r2
 80108ce:	643b      	str	r3, [r7, #64]	; 0x40
 80108d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	781b      	ldrb	r3, [r3, #0]
 80108dc:	00da      	lsls	r2, r3, #3
 80108de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108e0:	4413      	add	r3, r2
 80108e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80108e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108ec:	b29a      	uxth	r2, r3
 80108ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80108f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	895b      	ldrh	r3, [r3, #10]
 80108fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	6959      	ldr	r1, [r3, #20]
 801090e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010912:	b29b      	uxth	r3, r3
 8010914:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010918:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801091c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010920:	6800      	ldr	r0, [r0, #0]
 8010922:	f001 f89e 	bl	8011a62 <USB_WritePMA>
 8010926:	e227      	b.n	8010d78 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8010928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801092c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	6a1b      	ldr	r3, [r3, #32]
 8010934:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8010938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801093c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010940:	681a      	ldr	r2, [r3, #0]
 8010942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	781b      	ldrb	r3, [r3, #0]
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	4413      	add	r3, r2
 8010952:	881b      	ldrh	r3, [r3, #0]
 8010954:	b29b      	uxth	r3, r3
 8010956:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801095a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801095e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010966:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801096a:	681a      	ldr	r2, [r3, #0]
 801096c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	781b      	ldrb	r3, [r3, #0]
 8010978:	009b      	lsls	r3, r3, #2
 801097a:	441a      	add	r2, r3
 801097c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801098c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010990:	b29b      	uxth	r3, r3
 8010992:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80109a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	461a      	mov	r2, r3
 80109b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109b4:	4413      	add	r3, r2
 80109b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80109b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	781b      	ldrb	r3, [r3, #0]
 80109c4:	00da      	lsls	r2, r3, #3
 80109c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109c8:	4413      	add	r3, r2
 80109ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80109ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80109d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109d4:	b29a      	uxth	r2, r3
 80109d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80109da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	891b      	ldrh	r3, [r3, #8]
 80109e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80109ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	6959      	ldr	r1, [r3, #20]
 80109f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010a00:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010a04:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010a08:	6800      	ldr	r0, [r0, #0]
 8010a0a:	f001 f82a 	bl	8011a62 <USB_WritePMA>
 8010a0e:	e1b3      	b.n	8010d78 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8010a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	6a1a      	ldr	r2, [r3, #32]
 8010a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a20:	1ad2      	subs	r2, r2, r3
 8010a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a36:	681a      	ldr	r2, [r3, #0]
 8010a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	009b      	lsls	r3, r3, #2
 8010a46:	4413      	add	r3, r2
 8010a48:	881b      	ldrh	r3, [r3, #0]
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	f000 80c6 	beq.w	8010be2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	673b      	str	r3, [r7, #112]	; 0x70
 8010a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	785b      	ldrb	r3, [r3, #1]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d177      	bne.n	8010b62 <USB_EPStartXfer+0xb18>
 8010a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010a8c:	b29b      	uxth	r3, r3
 8010a8e:	461a      	mov	r2, r3
 8010a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a92:	4413      	add	r3, r2
 8010a94:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	00da      	lsls	r2, r3, #3
 8010aa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010aa6:	4413      	add	r3, r2
 8010aa8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010aac:	667b      	str	r3, [r7, #100]	; 0x64
 8010aae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ab0:	881b      	ldrh	r3, [r3, #0]
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010ab8:	b29a      	uxth	r2, r3
 8010aba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010abc:	801a      	strh	r2, [r3, #0]
 8010abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ac2:	2b3e      	cmp	r3, #62	; 0x3e
 8010ac4:	d921      	bls.n	8010b0a <USB_EPStartXfer+0xac0>
 8010ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010aca:	095b      	lsrs	r3, r3, #5
 8010acc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ad4:	f003 031f 	and.w	r3, r3, #31
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d104      	bne.n	8010ae6 <USB_EPStartXfer+0xa9c>
 8010adc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010ae0:	3b01      	subs	r3, #1
 8010ae2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010ae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ae8:	881b      	ldrh	r3, [r3, #0]
 8010aea:	b29a      	uxth	r2, r3
 8010aec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010af0:	b29b      	uxth	r3, r3
 8010af2:	029b      	lsls	r3, r3, #10
 8010af4:	b29b      	uxth	r3, r3
 8010af6:	4313      	orrs	r3, r2
 8010af8:	b29b      	uxth	r3, r3
 8010afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010b02:	b29a      	uxth	r2, r3
 8010b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b06:	801a      	strh	r2, [r3, #0]
 8010b08:	e050      	b.n	8010bac <USB_EPStartXfer+0xb62>
 8010b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d10a      	bne.n	8010b28 <USB_EPStartXfer+0xade>
 8010b12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b14:	881b      	ldrh	r3, [r3, #0]
 8010b16:	b29b      	uxth	r3, r3
 8010b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010b20:	b29a      	uxth	r2, r3
 8010b22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b24:	801a      	strh	r2, [r3, #0]
 8010b26:	e041      	b.n	8010bac <USB_EPStartXfer+0xb62>
 8010b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b2c:	085b      	lsrs	r3, r3, #1
 8010b2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b36:	f003 0301 	and.w	r3, r3, #1
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d004      	beq.n	8010b48 <USB_EPStartXfer+0xafe>
 8010b3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010b42:	3301      	adds	r3, #1
 8010b44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b4a:	881b      	ldrh	r3, [r3, #0]
 8010b4c:	b29a      	uxth	r2, r3
 8010b4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010b52:	b29b      	uxth	r3, r3
 8010b54:	029b      	lsls	r3, r3, #10
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	4313      	orrs	r3, r2
 8010b5a:	b29a      	uxth	r2, r3
 8010b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b5e:	801a      	strh	r2, [r3, #0]
 8010b60:	e024      	b.n	8010bac <USB_EPStartXfer+0xb62>
 8010b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	785b      	ldrb	r3, [r3, #1]
 8010b6e:	2b01      	cmp	r3, #1
 8010b70:	d11c      	bne.n	8010bac <USB_EPStartXfer+0xb62>
 8010b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b80:	b29b      	uxth	r3, r3
 8010b82:	461a      	mov	r2, r3
 8010b84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010b86:	4413      	add	r3, r2
 8010b88:	673b      	str	r3, [r7, #112]	; 0x70
 8010b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	781b      	ldrb	r3, [r3, #0]
 8010b96:	00da      	lsls	r2, r3, #3
 8010b98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010b9a:	4413      	add	r3, r2
 8010b9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ba6:	b29a      	uxth	r2, r3
 8010ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010baa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8010bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	895b      	ldrh	r3, [r3, #10]
 8010bb8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	6959      	ldr	r1, [r3, #20]
 8010bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bcc:	b29b      	uxth	r3, r3
 8010bce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010bd2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010bd6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010bda:	6800      	ldr	r0, [r0, #0]
 8010bdc:	f000 ff41 	bl	8011a62 <USB_WritePMA>
 8010be0:	e0ca      	b.n	8010d78 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	785b      	ldrb	r3, [r3, #1]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d177      	bne.n	8010ce2 <USB_EPStartXfer+0xc98>
 8010bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010c0c:	b29b      	uxth	r3, r3
 8010c0e:	461a      	mov	r2, r3
 8010c10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010c12:	4413      	add	r3, r2
 8010c14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	00da      	lsls	r2, r3, #3
 8010c24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010c26:	4413      	add	r3, r2
 8010c28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010c2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8010c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c30:	881b      	ldrh	r3, [r3, #0]
 8010c32:	b29b      	uxth	r3, r3
 8010c34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010c38:	b29a      	uxth	r2, r3
 8010c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c3c:	801a      	strh	r2, [r3, #0]
 8010c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c42:	2b3e      	cmp	r3, #62	; 0x3e
 8010c44:	d921      	bls.n	8010c8a <USB_EPStartXfer+0xc40>
 8010c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c4a:	095b      	lsrs	r3, r3, #5
 8010c4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c54:	f003 031f 	and.w	r3, r3, #31
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d104      	bne.n	8010c66 <USB_EPStartXfer+0xc1c>
 8010c5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010c60:	3b01      	subs	r3, #1
 8010c62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c68:	881b      	ldrh	r3, [r3, #0]
 8010c6a:	b29a      	uxth	r2, r3
 8010c6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	029b      	lsls	r3, r3, #10
 8010c74:	b29b      	uxth	r3, r3
 8010c76:	4313      	orrs	r3, r2
 8010c78:	b29b      	uxth	r3, r3
 8010c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010c82:	b29a      	uxth	r2, r3
 8010c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c86:	801a      	strh	r2, [r3, #0]
 8010c88:	e05c      	b.n	8010d44 <USB_EPStartXfer+0xcfa>
 8010c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d10a      	bne.n	8010ca8 <USB_EPStartXfer+0xc5e>
 8010c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c94:	881b      	ldrh	r3, [r3, #0]
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ca0:	b29a      	uxth	r2, r3
 8010ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010ca4:	801a      	strh	r2, [r3, #0]
 8010ca6:	e04d      	b.n	8010d44 <USB_EPStartXfer+0xcfa>
 8010ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cac:	085b      	lsrs	r3, r3, #1
 8010cae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cb6:	f003 0301 	and.w	r3, r3, #1
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d004      	beq.n	8010cc8 <USB_EPStartXfer+0xc7e>
 8010cbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010cc2:	3301      	adds	r3, #1
 8010cc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010cca:	881b      	ldrh	r3, [r3, #0]
 8010ccc:	b29a      	uxth	r2, r3
 8010cce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010cd2:	b29b      	uxth	r3, r3
 8010cd4:	029b      	lsls	r3, r3, #10
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	4313      	orrs	r3, r2
 8010cda:	b29a      	uxth	r2, r3
 8010cdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010cde:	801a      	strh	r2, [r3, #0]
 8010ce0:	e030      	b.n	8010d44 <USB_EPStartXfer+0xcfa>
 8010ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	785b      	ldrb	r3, [r3, #1]
 8010cee:	2b01      	cmp	r3, #1
 8010cf0:	d128      	bne.n	8010d44 <USB_EPStartXfer+0xcfa>
 8010cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	461a      	mov	r2, r3
 8010d12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010d16:	4413      	add	r3, r2
 8010d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	00da      	lsls	r2, r3, #3
 8010d2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010d2e:	4413      	add	r3, r2
 8010d30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010d34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d3c:	b29a      	uxth	r2, r3
 8010d3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010d42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	891b      	ldrh	r3, [r3, #8]
 8010d50:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	6959      	ldr	r1, [r3, #20]
 8010d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d64:	b29b      	uxth	r3, r3
 8010d66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010d6a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010d6e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010d72:	6800      	ldr	r0, [r0, #0]
 8010d74:	f000 fe75 	bl	8011a62 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8010d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d80:	681a      	ldr	r2, [r3, #0]
 8010d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	781b      	ldrb	r3, [r3, #0]
 8010d8e:	009b      	lsls	r3, r3, #2
 8010d90:	4413      	add	r3, r2
 8010d92:	881b      	ldrh	r3, [r3, #0]
 8010d94:	b29b      	uxth	r3, r3
 8010d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d9e:	817b      	strh	r3, [r7, #10]
 8010da0:	897b      	ldrh	r3, [r7, #10]
 8010da2:	f083 0310 	eor.w	r3, r3, #16
 8010da6:	817b      	strh	r3, [r7, #10]
 8010da8:	897b      	ldrh	r3, [r7, #10]
 8010daa:	f083 0320 	eor.w	r3, r3, #32
 8010dae:	817b      	strh	r3, [r7, #10]
 8010db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010db4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010db8:	681a      	ldr	r2, [r3, #0]
 8010dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	781b      	ldrb	r3, [r3, #0]
 8010dc6:	009b      	lsls	r3, r3, #2
 8010dc8:	441a      	add	r2, r3
 8010dca:	897b      	ldrh	r3, [r7, #10]
 8010dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ddc:	b29b      	uxth	r3, r3
 8010dde:	8013      	strh	r3, [r2, #0]
 8010de0:	f000 bcde 	b.w	80117a0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8010de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	7b1b      	ldrb	r3, [r3, #12]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	f040 80bb 	bne.w	8010f6c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8010df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	699a      	ldr	r2, [r3, #24]
 8010e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	691b      	ldr	r3, [r3, #16]
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	d917      	bls.n	8010e42 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8010e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	691b      	ldr	r3, [r3, #16]
 8010e1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8010e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	699a      	ldr	r2, [r3, #24]
 8010e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e32:	1ad2      	subs	r2, r2, r3
 8010e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	619a      	str	r2, [r3, #24]
 8010e40:	e00e      	b.n	8010e60 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8010e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	699b      	ldr	r3, [r3, #24]
 8010e4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8010e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8010e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	461a      	mov	r2, r3
 8010e80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e84:	4413      	add	r3, r2
 8010e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	781b      	ldrb	r3, [r3, #0]
 8010e96:	00da      	lsls	r2, r3, #3
 8010e98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e9c:	4413      	add	r3, r2
 8010e9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010ea2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010eaa:	881b      	ldrh	r3, [r3, #0]
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010eb2:	b29a      	uxth	r2, r3
 8010eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010eb8:	801a      	strh	r2, [r3, #0]
 8010eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ebe:	2b3e      	cmp	r3, #62	; 0x3e
 8010ec0:	d924      	bls.n	8010f0c <USB_EPStartXfer+0xec2>
 8010ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ec6:	095b      	lsrs	r3, r3, #5
 8010ec8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ed0:	f003 031f 	and.w	r3, r3, #31
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d104      	bne.n	8010ee2 <USB_EPStartXfer+0xe98>
 8010ed8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010edc:	3b01      	subs	r3, #1
 8010ede:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010ee6:	881b      	ldrh	r3, [r3, #0]
 8010ee8:	b29a      	uxth	r2, r3
 8010eea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010eee:	b29b      	uxth	r3, r3
 8010ef0:	029b      	lsls	r3, r3, #10
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	4313      	orrs	r3, r2
 8010ef6:	b29b      	uxth	r3, r3
 8010ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f00:	b29a      	uxth	r2, r3
 8010f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010f06:	801a      	strh	r2, [r3, #0]
 8010f08:	f000 bc10 	b.w	801172c <USB_EPStartXfer+0x16e2>
 8010f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d10c      	bne.n	8010f2e <USB_EPStartXfer+0xee4>
 8010f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010f18:	881b      	ldrh	r3, [r3, #0]
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f24:	b29a      	uxth	r2, r3
 8010f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010f2a:	801a      	strh	r2, [r3, #0]
 8010f2c:	e3fe      	b.n	801172c <USB_EPStartXfer+0x16e2>
 8010f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f32:	085b      	lsrs	r3, r3, #1
 8010f34:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f3c:	f003 0301 	and.w	r3, r3, #1
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d004      	beq.n	8010f4e <USB_EPStartXfer+0xf04>
 8010f44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010f48:	3301      	adds	r3, #1
 8010f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010f52:	881b      	ldrh	r3, [r3, #0]
 8010f54:	b29a      	uxth	r2, r3
 8010f56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010f5a:	b29b      	uxth	r3, r3
 8010f5c:	029b      	lsls	r3, r3, #10
 8010f5e:	b29b      	uxth	r3, r3
 8010f60:	4313      	orrs	r3, r2
 8010f62:	b29a      	uxth	r2, r3
 8010f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010f68:	801a      	strh	r2, [r3, #0]
 8010f6a:	e3df      	b.n	801172c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8010f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	78db      	ldrb	r3, [r3, #3]
 8010f78:	2b02      	cmp	r3, #2
 8010f7a:	f040 8218 	bne.w	80113ae <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8010f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	785b      	ldrb	r3, [r3, #1]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	f040 809d 	bne.w	80110ca <USB_EPStartXfer+0x1080>
 8010f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010fac:	b29b      	uxth	r3, r3
 8010fae:	461a      	mov	r2, r3
 8010fb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010fb4:	4413      	add	r3, r2
 8010fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	00da      	lsls	r2, r3, #3
 8010fc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010fcc:	4413      	add	r3, r2
 8010fce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010fd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010fda:	881b      	ldrh	r3, [r3, #0]
 8010fdc:	b29b      	uxth	r3, r3
 8010fde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010fe2:	b29a      	uxth	r2, r3
 8010fe4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010fe8:	801a      	strh	r2, [r3, #0]
 8010fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	691b      	ldr	r3, [r3, #16]
 8010ff6:	2b3e      	cmp	r3, #62	; 0x3e
 8010ff8:	d92b      	bls.n	8011052 <USB_EPStartXfer+0x1008>
 8010ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	691b      	ldr	r3, [r3, #16]
 8011006:	095b      	lsrs	r3, r3, #5
 8011008:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801100c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	691b      	ldr	r3, [r3, #16]
 8011018:	f003 031f 	and.w	r3, r3, #31
 801101c:	2b00      	cmp	r3, #0
 801101e:	d104      	bne.n	801102a <USB_EPStartXfer+0xfe0>
 8011020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011024:	3b01      	subs	r3, #1
 8011026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801102a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801102e:	881b      	ldrh	r3, [r3, #0]
 8011030:	b29a      	uxth	r2, r3
 8011032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011036:	b29b      	uxth	r3, r3
 8011038:	029b      	lsls	r3, r3, #10
 801103a:	b29b      	uxth	r3, r3
 801103c:	4313      	orrs	r3, r2
 801103e:	b29b      	uxth	r3, r3
 8011040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011048:	b29a      	uxth	r2, r3
 801104a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801104e:	801a      	strh	r2, [r3, #0]
 8011050:	e070      	b.n	8011134 <USB_EPStartXfer+0x10ea>
 8011052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	691b      	ldr	r3, [r3, #16]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d10c      	bne.n	801107c <USB_EPStartXfer+0x1032>
 8011062:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011066:	881b      	ldrh	r3, [r3, #0]
 8011068:	b29b      	uxth	r3, r3
 801106a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801106e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011072:	b29a      	uxth	r2, r3
 8011074:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011078:	801a      	strh	r2, [r3, #0]
 801107a:	e05b      	b.n	8011134 <USB_EPStartXfer+0x10ea>
 801107c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	691b      	ldr	r3, [r3, #16]
 8011088:	085b      	lsrs	r3, r3, #1
 801108a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801108e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	691b      	ldr	r3, [r3, #16]
 801109a:	f003 0301 	and.w	r3, r3, #1
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d004      	beq.n	80110ac <USB_EPStartXfer+0x1062>
 80110a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80110a6:	3301      	adds	r3, #1
 80110a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80110ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80110b0:	881b      	ldrh	r3, [r3, #0]
 80110b2:	b29a      	uxth	r2, r3
 80110b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	029b      	lsls	r3, r3, #10
 80110bc:	b29b      	uxth	r3, r3
 80110be:	4313      	orrs	r3, r2
 80110c0:	b29a      	uxth	r2, r3
 80110c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80110c6:	801a      	strh	r2, [r3, #0]
 80110c8:	e034      	b.n	8011134 <USB_EPStartXfer+0x10ea>
 80110ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	785b      	ldrb	r3, [r3, #1]
 80110d6:	2b01      	cmp	r3, #1
 80110d8:	d12c      	bne.n	8011134 <USB_EPStartXfer+0x10ea>
 80110da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80110e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	461a      	mov	r2, r3
 80110fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80110fe:	4413      	add	r3, r2
 8011100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	00da      	lsls	r2, r3, #3
 8011112:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011116:	4413      	add	r3, r2
 8011118:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801111c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	691b      	ldr	r3, [r3, #16]
 801112c:	b29a      	uxth	r2, r3
 801112e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011132:	801a      	strh	r2, [r3, #0]
 8011134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	785b      	ldrb	r3, [r3, #1]
 801114e:	2b00      	cmp	r3, #0
 8011150:	f040 809d 	bne.w	801128e <USB_EPStartXfer+0x1244>
 8011154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011170:	b29b      	uxth	r3, r3
 8011172:	461a      	mov	r2, r3
 8011174:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011178:	4413      	add	r3, r2
 801117a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801117e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	00da      	lsls	r2, r3, #3
 801118c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011190:	4413      	add	r3, r2
 8011192:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011196:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801119a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801119e:	881b      	ldrh	r3, [r3, #0]
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80111a6:	b29a      	uxth	r2, r3
 80111a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80111ac:	801a      	strh	r2, [r3, #0]
 80111ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	691b      	ldr	r3, [r3, #16]
 80111ba:	2b3e      	cmp	r3, #62	; 0x3e
 80111bc:	d92b      	bls.n	8011216 <USB_EPStartXfer+0x11cc>
 80111be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	691b      	ldr	r3, [r3, #16]
 80111ca:	095b      	lsrs	r3, r3, #5
 80111cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80111d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	691b      	ldr	r3, [r3, #16]
 80111dc:	f003 031f 	and.w	r3, r3, #31
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d104      	bne.n	80111ee <USB_EPStartXfer+0x11a4>
 80111e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80111e8:	3b01      	subs	r3, #1
 80111ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80111ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80111f2:	881b      	ldrh	r3, [r3, #0]
 80111f4:	b29a      	uxth	r2, r3
 80111f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	029b      	lsls	r3, r3, #10
 80111fe:	b29b      	uxth	r3, r3
 8011200:	4313      	orrs	r3, r2
 8011202:	b29b      	uxth	r3, r3
 8011204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801120c:	b29a      	uxth	r2, r3
 801120e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011212:	801a      	strh	r2, [r3, #0]
 8011214:	e069      	b.n	80112ea <USB_EPStartXfer+0x12a0>
 8011216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801121a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	691b      	ldr	r3, [r3, #16]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d10c      	bne.n	8011240 <USB_EPStartXfer+0x11f6>
 8011226:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801122a:	881b      	ldrh	r3, [r3, #0]
 801122c:	b29b      	uxth	r3, r3
 801122e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011236:	b29a      	uxth	r2, r3
 8011238:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801123c:	801a      	strh	r2, [r3, #0]
 801123e:	e054      	b.n	80112ea <USB_EPStartXfer+0x12a0>
 8011240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	691b      	ldr	r3, [r3, #16]
 801124c:	085b      	lsrs	r3, r3, #1
 801124e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	691b      	ldr	r3, [r3, #16]
 801125e:	f003 0301 	and.w	r3, r3, #1
 8011262:	2b00      	cmp	r3, #0
 8011264:	d004      	beq.n	8011270 <USB_EPStartXfer+0x1226>
 8011266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801126a:	3301      	adds	r3, #1
 801126c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011270:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011274:	881b      	ldrh	r3, [r3, #0]
 8011276:	b29a      	uxth	r2, r3
 8011278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801127c:	b29b      	uxth	r3, r3
 801127e:	029b      	lsls	r3, r3, #10
 8011280:	b29b      	uxth	r3, r3
 8011282:	4313      	orrs	r3, r2
 8011284:	b29a      	uxth	r2, r3
 8011286:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801128a:	801a      	strh	r2, [r3, #0]
 801128c:	e02d      	b.n	80112ea <USB_EPStartXfer+0x12a0>
 801128e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	785b      	ldrb	r3, [r3, #1]
 801129a:	2b01      	cmp	r3, #1
 801129c:	d125      	bne.n	80112ea <USB_EPStartXfer+0x12a0>
 801129e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80112ac:	b29b      	uxth	r3, r3
 80112ae:	461a      	mov	r2, r3
 80112b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80112b4:	4413      	add	r3, r2
 80112b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80112ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	781b      	ldrb	r3, [r3, #0]
 80112c6:	00da      	lsls	r2, r3, #3
 80112c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80112cc:	4413      	add	r3, r2
 80112ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80112d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80112d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	691b      	ldr	r3, [r3, #16]
 80112e2:	b29a      	uxth	r2, r3
 80112e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80112e8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80112ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	69db      	ldr	r3, [r3, #28]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	f000 8218 	beq.w	801172c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80112fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011304:	681a      	ldr	r2, [r3, #0]
 8011306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801130a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	009b      	lsls	r3, r3, #2
 8011314:	4413      	add	r3, r2
 8011316:	881b      	ldrh	r3, [r3, #0]
 8011318:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801131c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011324:	2b00      	cmp	r3, #0
 8011326:	d005      	beq.n	8011334 <USB_EPStartXfer+0x12ea>
 8011328:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801132c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011330:	2b00      	cmp	r3, #0
 8011332:	d10d      	bne.n	8011350 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011334:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801133c:	2b00      	cmp	r3, #0
 801133e:	f040 81f5 	bne.w	801172c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011342:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801134a:	2b00      	cmp	r3, #0
 801134c:	f040 81ee 	bne.w	801172c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8011350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011354:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011358:	681a      	ldr	r2, [r3, #0]
 801135a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801135e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	781b      	ldrb	r3, [r3, #0]
 8011366:	009b      	lsls	r3, r3, #2
 8011368:	4413      	add	r3, r2
 801136a:	881b      	ldrh	r3, [r3, #0]
 801136c:	b29b      	uxth	r3, r3
 801136e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011376:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 801137a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801137e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011382:	681a      	ldr	r2, [r3, #0]
 8011384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	009b      	lsls	r3, r3, #2
 8011392:	441a      	add	r2, r3
 8011394:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8011398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801139c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80113a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80113a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80113a8:	b29b      	uxth	r3, r3
 80113aa:	8013      	strh	r3, [r2, #0]
 80113ac:	e1be      	b.n	801172c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80113ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	78db      	ldrb	r3, [r3, #3]
 80113ba:	2b01      	cmp	r3, #1
 80113bc:	f040 81b4 	bne.w	8011728 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80113c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	699a      	ldr	r2, [r3, #24]
 80113cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	691b      	ldr	r3, [r3, #16]
 80113d8:	429a      	cmp	r2, r3
 80113da:	d917      	bls.n	801140c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80113dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	691b      	ldr	r3, [r3, #16]
 80113e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80113ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	699a      	ldr	r2, [r3, #24]
 80113f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113fc:	1ad2      	subs	r2, r2, r3
 80113fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	619a      	str	r2, [r3, #24]
 801140a:	e00e      	b.n	801142a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 801140c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	699b      	ldr	r3, [r3, #24]
 8011418:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 801141c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	2200      	movs	r2, #0
 8011428:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801142a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801142e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	785b      	ldrb	r3, [r3, #1]
 8011436:	2b00      	cmp	r3, #0
 8011438:	f040 8085 	bne.w	8011546 <USB_EPStartXfer+0x14fc>
 801143c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801144a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801144e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011458:	b29b      	uxth	r3, r3
 801145a:	461a      	mov	r2, r3
 801145c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011460:	4413      	add	r3, r2
 8011462:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801146a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	00da      	lsls	r2, r3, #3
 8011474:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011478:	4413      	add	r3, r2
 801147a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801147e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011482:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011486:	881b      	ldrh	r3, [r3, #0]
 8011488:	b29b      	uxth	r3, r3
 801148a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801148e:	b29a      	uxth	r2, r3
 8011490:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011494:	801a      	strh	r2, [r3, #0]
 8011496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801149a:	2b3e      	cmp	r3, #62	; 0x3e
 801149c:	d923      	bls.n	80114e6 <USB_EPStartXfer+0x149c>
 801149e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114a2:	095b      	lsrs	r3, r3, #5
 80114a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80114a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114ac:	f003 031f 	and.w	r3, r3, #31
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d104      	bne.n	80114be <USB_EPStartXfer+0x1474>
 80114b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80114b8:	3b01      	subs	r3, #1
 80114ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80114be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80114c2:	881b      	ldrh	r3, [r3, #0]
 80114c4:	b29a      	uxth	r2, r3
 80114c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80114ca:	b29b      	uxth	r3, r3
 80114cc:	029b      	lsls	r3, r3, #10
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	4313      	orrs	r3, r2
 80114d2:	b29b      	uxth	r3, r3
 80114d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114dc:	b29a      	uxth	r2, r3
 80114de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80114e2:	801a      	strh	r2, [r3, #0]
 80114e4:	e060      	b.n	80115a8 <USB_EPStartXfer+0x155e>
 80114e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d10c      	bne.n	8011508 <USB_EPStartXfer+0x14be>
 80114ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80114f2:	881b      	ldrh	r3, [r3, #0]
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114fe:	b29a      	uxth	r2, r3
 8011500:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011504:	801a      	strh	r2, [r3, #0]
 8011506:	e04f      	b.n	80115a8 <USB_EPStartXfer+0x155e>
 8011508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801150c:	085b      	lsrs	r3, r3, #1
 801150e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011516:	f003 0301 	and.w	r3, r3, #1
 801151a:	2b00      	cmp	r3, #0
 801151c:	d004      	beq.n	8011528 <USB_EPStartXfer+0x14de>
 801151e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011522:	3301      	adds	r3, #1
 8011524:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011528:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801152c:	881b      	ldrh	r3, [r3, #0]
 801152e:	b29a      	uxth	r2, r3
 8011530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011534:	b29b      	uxth	r3, r3
 8011536:	029b      	lsls	r3, r3, #10
 8011538:	b29b      	uxth	r3, r3
 801153a:	4313      	orrs	r3, r2
 801153c:	b29a      	uxth	r2, r3
 801153e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011542:	801a      	strh	r2, [r3, #0]
 8011544:	e030      	b.n	80115a8 <USB_EPStartXfer+0x155e>
 8011546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801154a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	785b      	ldrb	r3, [r3, #1]
 8011552:	2b01      	cmp	r3, #1
 8011554:	d128      	bne.n	80115a8 <USB_EPStartXfer+0x155e>
 8011556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801155a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011572:	b29b      	uxth	r3, r3
 8011574:	461a      	mov	r2, r3
 8011576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801157a:	4413      	add	r3, r2
 801157c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	781b      	ldrb	r3, [r3, #0]
 801158c:	00da      	lsls	r2, r3, #3
 801158e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011592:	4413      	add	r3, r2
 8011594:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801159c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115a0:	b29a      	uxth	r2, r3
 80115a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80115a6:	801a      	strh	r2, [r3, #0]
 80115a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80115b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	785b      	ldrb	r3, [r3, #1]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	f040 8085 	bne.w	80116d2 <USB_EPStartXfer+0x1688>
 80115c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80115d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	461a      	mov	r2, r3
 80115e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80115ec:	4413      	add	r3, r2
 80115ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80115f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	00da      	lsls	r2, r3, #3
 8011600:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011604:	4413      	add	r3, r2
 8011606:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801160a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801160e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011612:	881b      	ldrh	r3, [r3, #0]
 8011614:	b29b      	uxth	r3, r3
 8011616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801161a:	b29a      	uxth	r2, r3
 801161c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011620:	801a      	strh	r2, [r3, #0]
 8011622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011626:	2b3e      	cmp	r3, #62	; 0x3e
 8011628:	d923      	bls.n	8011672 <USB_EPStartXfer+0x1628>
 801162a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801162e:	095b      	lsrs	r3, r3, #5
 8011630:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011638:	f003 031f 	and.w	r3, r3, #31
 801163c:	2b00      	cmp	r3, #0
 801163e:	d104      	bne.n	801164a <USB_EPStartXfer+0x1600>
 8011640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011644:	3b01      	subs	r3, #1
 8011646:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801164a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801164e:	881b      	ldrh	r3, [r3, #0]
 8011650:	b29a      	uxth	r2, r3
 8011652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011656:	b29b      	uxth	r3, r3
 8011658:	029b      	lsls	r3, r3, #10
 801165a:	b29b      	uxth	r3, r3
 801165c:	4313      	orrs	r3, r2
 801165e:	b29b      	uxth	r3, r3
 8011660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011668:	b29a      	uxth	r2, r3
 801166a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801166e:	801a      	strh	r2, [r3, #0]
 8011670:	e05c      	b.n	801172c <USB_EPStartXfer+0x16e2>
 8011672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011676:	2b00      	cmp	r3, #0
 8011678:	d10c      	bne.n	8011694 <USB_EPStartXfer+0x164a>
 801167a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801167e:	881b      	ldrh	r3, [r3, #0]
 8011680:	b29b      	uxth	r3, r3
 8011682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801168a:	b29a      	uxth	r2, r3
 801168c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011690:	801a      	strh	r2, [r3, #0]
 8011692:	e04b      	b.n	801172c <USB_EPStartXfer+0x16e2>
 8011694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011698:	085b      	lsrs	r3, r3, #1
 801169a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801169e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116a2:	f003 0301 	and.w	r3, r3, #1
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d004      	beq.n	80116b4 <USB_EPStartXfer+0x166a>
 80116aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80116ae:	3301      	adds	r3, #1
 80116b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80116b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80116b8:	881b      	ldrh	r3, [r3, #0]
 80116ba:	b29a      	uxth	r2, r3
 80116bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80116c0:	b29b      	uxth	r3, r3
 80116c2:	029b      	lsls	r3, r3, #10
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	4313      	orrs	r3, r2
 80116c8:	b29a      	uxth	r2, r3
 80116ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80116ce:	801a      	strh	r2, [r3, #0]
 80116d0:	e02c      	b.n	801172c <USB_EPStartXfer+0x16e2>
 80116d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	785b      	ldrb	r3, [r3, #1]
 80116de:	2b01      	cmp	r3, #1
 80116e0:	d124      	bne.n	801172c <USB_EPStartXfer+0x16e2>
 80116e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	461a      	mov	r2, r3
 80116f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80116f8:	4413      	add	r3, r2
 80116fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80116fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	781b      	ldrb	r3, [r3, #0]
 801170a:	00da      	lsls	r2, r3, #3
 801170c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011710:	4413      	add	r3, r2
 8011712:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011716:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801171a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801171e:	b29a      	uxth	r2, r3
 8011720:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011724:	801a      	strh	r2, [r3, #0]
 8011726:	e001      	b.n	801172c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8011728:	2301      	movs	r3, #1
 801172a:	e03a      	b.n	80117a2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801172c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011734:	681a      	ldr	r2, [r3, #0]
 8011736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801173a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	009b      	lsls	r3, r3, #2
 8011744:	4413      	add	r3, r2
 8011746:	881b      	ldrh	r3, [r3, #0]
 8011748:	b29b      	uxth	r3, r3
 801174a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801174e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011752:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011756:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801175a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801175e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011762:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011766:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801176a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801176e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011776:	681a      	ldr	r2, [r3, #0]
 8011778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801177c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	009b      	lsls	r3, r3, #2
 8011786:	441a      	add	r2, r3
 8011788:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801178c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801179c:	b29b      	uxth	r3, r3
 801179e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80117a0:	2300      	movs	r3, #0
}
 80117a2:	4618      	mov	r0, r3
 80117a4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}

080117ac <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80117ac:	b480      	push	{r7}
 80117ae:	b085      	sub	sp, #20
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
 80117b4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	785b      	ldrb	r3, [r3, #1]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d020      	beq.n	8011800 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80117be:	687a      	ldr	r2, [r7, #4]
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	781b      	ldrb	r3, [r3, #0]
 80117c4:	009b      	lsls	r3, r3, #2
 80117c6:	4413      	add	r3, r2
 80117c8:	881b      	ldrh	r3, [r3, #0]
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80117d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80117d4:	81bb      	strh	r3, [r7, #12]
 80117d6:	89bb      	ldrh	r3, [r7, #12]
 80117d8:	f083 0310 	eor.w	r3, r3, #16
 80117dc:	81bb      	strh	r3, [r7, #12]
 80117de:	687a      	ldr	r2, [r7, #4]
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	781b      	ldrb	r3, [r3, #0]
 80117e4:	009b      	lsls	r3, r3, #2
 80117e6:	441a      	add	r2, r3
 80117e8:	89bb      	ldrh	r3, [r7, #12]
 80117ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80117ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80117f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80117f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117fa:	b29b      	uxth	r3, r3
 80117fc:	8013      	strh	r3, [r2, #0]
 80117fe:	e01f      	b.n	8011840 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011800:	687a      	ldr	r2, [r7, #4]
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	009b      	lsls	r3, r3, #2
 8011808:	4413      	add	r3, r2
 801180a:	881b      	ldrh	r3, [r3, #0]
 801180c:	b29b      	uxth	r3, r3
 801180e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011816:	81fb      	strh	r3, [r7, #14]
 8011818:	89fb      	ldrh	r3, [r7, #14]
 801181a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801181e:	81fb      	strh	r3, [r7, #14]
 8011820:	687a      	ldr	r2, [r7, #4]
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	781b      	ldrb	r3, [r3, #0]
 8011826:	009b      	lsls	r3, r3, #2
 8011828:	441a      	add	r2, r3
 801182a:	89fb      	ldrh	r3, [r7, #14]
 801182c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801183c:	b29b      	uxth	r3, r3
 801183e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011840:	2300      	movs	r3, #0
}
 8011842:	4618      	mov	r0, r3
 8011844:	3714      	adds	r7, #20
 8011846:	46bd      	mov	sp, r7
 8011848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184c:	4770      	bx	lr

0801184e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801184e:	b480      	push	{r7}
 8011850:	b087      	sub	sp, #28
 8011852:	af00      	add	r7, sp, #0
 8011854:	6078      	str	r0, [r7, #4]
 8011856:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	7b1b      	ldrb	r3, [r3, #12]
 801185c:	2b00      	cmp	r3, #0
 801185e:	f040 809d 	bne.w	801199c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	785b      	ldrb	r3, [r3, #1]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d04c      	beq.n	8011904 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801186a:	687a      	ldr	r2, [r7, #4]
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	781b      	ldrb	r3, [r3, #0]
 8011870:	009b      	lsls	r3, r3, #2
 8011872:	4413      	add	r3, r2
 8011874:	881b      	ldrh	r3, [r3, #0]
 8011876:	823b      	strh	r3, [r7, #16]
 8011878:	8a3b      	ldrh	r3, [r7, #16]
 801187a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801187e:	2b00      	cmp	r3, #0
 8011880:	d01b      	beq.n	80118ba <USB_EPClearStall+0x6c>
 8011882:	687a      	ldr	r2, [r7, #4]
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	781b      	ldrb	r3, [r3, #0]
 8011888:	009b      	lsls	r3, r3, #2
 801188a:	4413      	add	r3, r2
 801188c:	881b      	ldrh	r3, [r3, #0]
 801188e:	b29b      	uxth	r3, r3
 8011890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011898:	81fb      	strh	r3, [r7, #14]
 801189a:	687a      	ldr	r2, [r7, #4]
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	781b      	ldrb	r3, [r3, #0]
 80118a0:	009b      	lsls	r3, r3, #2
 80118a2:	441a      	add	r2, r3
 80118a4:	89fb      	ldrh	r3, [r7, #14]
 80118a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80118aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80118ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80118b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80118b6:	b29b      	uxth	r3, r3
 80118b8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	78db      	ldrb	r3, [r3, #3]
 80118be:	2b01      	cmp	r3, #1
 80118c0:	d06c      	beq.n	801199c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80118c2:	687a      	ldr	r2, [r7, #4]
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	781b      	ldrb	r3, [r3, #0]
 80118c8:	009b      	lsls	r3, r3, #2
 80118ca:	4413      	add	r3, r2
 80118cc:	881b      	ldrh	r3, [r3, #0]
 80118ce:	b29b      	uxth	r3, r3
 80118d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80118d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80118d8:	81bb      	strh	r3, [r7, #12]
 80118da:	89bb      	ldrh	r3, [r7, #12]
 80118dc:	f083 0320 	eor.w	r3, r3, #32
 80118e0:	81bb      	strh	r3, [r7, #12]
 80118e2:	687a      	ldr	r2, [r7, #4]
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	781b      	ldrb	r3, [r3, #0]
 80118e8:	009b      	lsls	r3, r3, #2
 80118ea:	441a      	add	r2, r3
 80118ec:	89bb      	ldrh	r3, [r7, #12]
 80118ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80118f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80118f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80118fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118fe:	b29b      	uxth	r3, r3
 8011900:	8013      	strh	r3, [r2, #0]
 8011902:	e04b      	b.n	801199c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011904:	687a      	ldr	r2, [r7, #4]
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	781b      	ldrb	r3, [r3, #0]
 801190a:	009b      	lsls	r3, r3, #2
 801190c:	4413      	add	r3, r2
 801190e:	881b      	ldrh	r3, [r3, #0]
 8011910:	82fb      	strh	r3, [r7, #22]
 8011912:	8afb      	ldrh	r3, [r7, #22]
 8011914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011918:	2b00      	cmp	r3, #0
 801191a:	d01b      	beq.n	8011954 <USB_EPClearStall+0x106>
 801191c:	687a      	ldr	r2, [r7, #4]
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	781b      	ldrb	r3, [r3, #0]
 8011922:	009b      	lsls	r3, r3, #2
 8011924:	4413      	add	r3, r2
 8011926:	881b      	ldrh	r3, [r3, #0]
 8011928:	b29b      	uxth	r3, r3
 801192a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801192e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011932:	82bb      	strh	r3, [r7, #20]
 8011934:	687a      	ldr	r2, [r7, #4]
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	781b      	ldrb	r3, [r3, #0]
 801193a:	009b      	lsls	r3, r3, #2
 801193c:	441a      	add	r2, r3
 801193e:	8abb      	ldrh	r3, [r7, #20]
 8011940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801194c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011950:	b29b      	uxth	r3, r3
 8011952:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011954:	687a      	ldr	r2, [r7, #4]
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	781b      	ldrb	r3, [r3, #0]
 801195a:	009b      	lsls	r3, r3, #2
 801195c:	4413      	add	r3, r2
 801195e:	881b      	ldrh	r3, [r3, #0]
 8011960:	b29b      	uxth	r3, r3
 8011962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801196a:	827b      	strh	r3, [r7, #18]
 801196c:	8a7b      	ldrh	r3, [r7, #18]
 801196e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011972:	827b      	strh	r3, [r7, #18]
 8011974:	8a7b      	ldrh	r3, [r7, #18]
 8011976:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801197a:	827b      	strh	r3, [r7, #18]
 801197c:	687a      	ldr	r2, [r7, #4]
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	781b      	ldrb	r3, [r3, #0]
 8011982:	009b      	lsls	r3, r3, #2
 8011984:	441a      	add	r2, r3
 8011986:	8a7b      	ldrh	r3, [r7, #18]
 8011988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801198c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011998:	b29b      	uxth	r3, r3
 801199a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 801199c:	2300      	movs	r3, #0
}
 801199e:	4618      	mov	r0, r3
 80119a0:	371c      	adds	r7, #28
 80119a2:	46bd      	mov	sp, r7
 80119a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a8:	4770      	bx	lr

080119aa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80119aa:	b480      	push	{r7}
 80119ac:	b083      	sub	sp, #12
 80119ae:	af00      	add	r7, sp, #0
 80119b0:	6078      	str	r0, [r7, #4]
 80119b2:	460b      	mov	r3, r1
 80119b4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80119b6:	78fb      	ldrb	r3, [r7, #3]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d103      	bne.n	80119c4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2280      	movs	r2, #128	; 0x80
 80119c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80119c4:	2300      	movs	r3, #0
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	370c      	adds	r7, #12
 80119ca:	46bd      	mov	sp, r7
 80119cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d0:	4770      	bx	lr

080119d2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80119d2:	b480      	push	{r7}
 80119d4:	b083      	sub	sp, #12
 80119d6:	af00      	add	r7, sp, #0
 80119d8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80119e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80119ea:	b29a      	uxth	r2, r3
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80119f2:	2300      	movs	r3, #0
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	370c      	adds	r7, #12
 80119f8:	46bd      	mov	sp, r7
 80119fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fe:	4770      	bx	lr

08011a00 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8011a00:	b480      	push	{r7}
 8011a02:	b083      	sub	sp, #12
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011a0e:	b29b      	uxth	r3, r3
 8011a10:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011a14:	b29a      	uxth	r2, r3
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8011a1c:	2300      	movs	r3, #0
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	370c      	adds	r7, #12
 8011a22:	46bd      	mov	sp, r7
 8011a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a28:	4770      	bx	lr

08011a2a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8011a2a:	b480      	push	{r7}
 8011a2c:	b085      	sub	sp, #20
 8011a2e:	af00      	add	r7, sp, #0
 8011a30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	3714      	adds	r7, #20
 8011a42:	46bd      	mov	sp, r7
 8011a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a48:	4770      	bx	lr

08011a4a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8011a4a:	b480      	push	{r7}
 8011a4c:	b083      	sub	sp, #12
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	6078      	str	r0, [r7, #4]
 8011a52:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8011a54:	2300      	movs	r3, #0
}
 8011a56:	4618      	mov	r0, r3
 8011a58:	370c      	adds	r7, #12
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a60:	4770      	bx	lr

08011a62 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011a62:	b480      	push	{r7}
 8011a64:	b08b      	sub	sp, #44	; 0x2c
 8011a66:	af00      	add	r7, sp, #0
 8011a68:	60f8      	str	r0, [r7, #12]
 8011a6a:	60b9      	str	r1, [r7, #8]
 8011a6c:	4611      	mov	r1, r2
 8011a6e:	461a      	mov	r2, r3
 8011a70:	460b      	mov	r3, r1
 8011a72:	80fb      	strh	r3, [r7, #6]
 8011a74:	4613      	mov	r3, r2
 8011a76:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011a78:	88bb      	ldrh	r3, [r7, #4]
 8011a7a:	3301      	adds	r3, #1
 8011a7c:	085b      	lsrs	r3, r3, #1
 8011a7e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011a88:	88fa      	ldrh	r2, [r7, #6]
 8011a8a:	697b      	ldr	r3, [r7, #20]
 8011a8c:	4413      	add	r3, r2
 8011a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011a92:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011a94:	69bb      	ldr	r3, [r7, #24]
 8011a96:	627b      	str	r3, [r7, #36]	; 0x24
 8011a98:	e01b      	b.n	8011ad2 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8011a9a:	69fb      	ldr	r3, [r7, #28]
 8011a9c:	781b      	ldrb	r3, [r3, #0]
 8011a9e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8011aa0:	69fb      	ldr	r3, [r7, #28]
 8011aa2:	3301      	adds	r3, #1
 8011aa4:	781b      	ldrb	r3, [r3, #0]
 8011aa6:	021b      	lsls	r3, r3, #8
 8011aa8:	b21a      	sxth	r2, r3
 8011aaa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011aae:	4313      	orrs	r3, r2
 8011ab0:	b21b      	sxth	r3, r3
 8011ab2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011ab4:	6a3b      	ldr	r3, [r7, #32]
 8011ab6:	8a7a      	ldrh	r2, [r7, #18]
 8011ab8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011aba:	6a3b      	ldr	r3, [r7, #32]
 8011abc:	3302      	adds	r3, #2
 8011abe:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8011ac0:	69fb      	ldr	r3, [r7, #28]
 8011ac2:	3301      	adds	r3, #1
 8011ac4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8011ac6:	69fb      	ldr	r3, [r7, #28]
 8011ac8:	3301      	adds	r3, #1
 8011aca:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ace:	3b01      	subs	r3, #1
 8011ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8011ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d1e0      	bne.n	8011a9a <USB_WritePMA+0x38>
  }
}
 8011ad8:	bf00      	nop
 8011ada:	bf00      	nop
 8011adc:	372c      	adds	r7, #44	; 0x2c
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae4:	4770      	bx	lr

08011ae6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011ae6:	b480      	push	{r7}
 8011ae8:	b08b      	sub	sp, #44	; 0x2c
 8011aea:	af00      	add	r7, sp, #0
 8011aec:	60f8      	str	r0, [r7, #12]
 8011aee:	60b9      	str	r1, [r7, #8]
 8011af0:	4611      	mov	r1, r2
 8011af2:	461a      	mov	r2, r3
 8011af4:	460b      	mov	r3, r1
 8011af6:	80fb      	strh	r3, [r7, #6]
 8011af8:	4613      	mov	r3, r2
 8011afa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8011afc:	88bb      	ldrh	r3, [r7, #4]
 8011afe:	085b      	lsrs	r3, r3, #1
 8011b00:	b29b      	uxth	r3, r3
 8011b02:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011b0c:	88fa      	ldrh	r2, [r7, #6]
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	4413      	add	r3, r2
 8011b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011b16:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011b18:	69bb      	ldr	r3, [r7, #24]
 8011b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8011b1c:	e018      	b.n	8011b50 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8011b1e:	6a3b      	ldr	r3, [r7, #32]
 8011b20:	881b      	ldrh	r3, [r3, #0]
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8011b26:	6a3b      	ldr	r3, [r7, #32]
 8011b28:	3302      	adds	r3, #2
 8011b2a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011b2c:	693b      	ldr	r3, [r7, #16]
 8011b2e:	b2da      	uxtb	r2, r3
 8011b30:	69fb      	ldr	r3, [r7, #28]
 8011b32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011b34:	69fb      	ldr	r3, [r7, #28]
 8011b36:	3301      	adds	r3, #1
 8011b38:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	0a1b      	lsrs	r3, r3, #8
 8011b3e:	b2da      	uxtb	r2, r3
 8011b40:	69fb      	ldr	r3, [r7, #28]
 8011b42:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011b44:	69fb      	ldr	r3, [r7, #28]
 8011b46:	3301      	adds	r3, #1
 8011b48:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b4c:	3b01      	subs	r3, #1
 8011b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8011b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d1e3      	bne.n	8011b1e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8011b56:	88bb      	ldrh	r3, [r7, #4]
 8011b58:	f003 0301 	and.w	r3, r3, #1
 8011b5c:	b29b      	uxth	r3, r3
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d007      	beq.n	8011b72 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8011b62:	6a3b      	ldr	r3, [r7, #32]
 8011b64:	881b      	ldrh	r3, [r3, #0]
 8011b66:	b29b      	uxth	r3, r3
 8011b68:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	b2da      	uxtb	r2, r3
 8011b6e:	69fb      	ldr	r3, [r7, #28]
 8011b70:	701a      	strb	r2, [r3, #0]
  }
}
 8011b72:	bf00      	nop
 8011b74:	372c      	adds	r7, #44	; 0x2c
 8011b76:	46bd      	mov	sp, r7
 8011b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7c:	4770      	bx	lr
	...

08011b80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	460b      	mov	r3, r1
 8011b8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011b8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011b90:	f003 fa1a 	bl	8014fc8 <USBD_static_malloc>
 8011b94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d109      	bne.n	8011bb0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	32b0      	adds	r2, #176	; 0xb0
 8011ba6:	2100      	movs	r1, #0
 8011ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011bac:	2302      	movs	r3, #2
 8011bae:	e0d4      	b.n	8011d5a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8011bb0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8011bb4:	2100      	movs	r1, #0
 8011bb6:	68f8      	ldr	r0, [r7, #12]
 8011bb8:	f005 f9bb 	bl	8016f32 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	32b0      	adds	r2, #176	; 0xb0
 8011bc6:	68f9      	ldr	r1, [r7, #12]
 8011bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	32b0      	adds	r2, #176	; 0xb0
 8011bd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	7c1b      	ldrb	r3, [r3, #16]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d138      	bne.n	8011c5a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011be8:	4b5e      	ldr	r3, [pc, #376]	; (8011d64 <USBD_CDC_Init+0x1e4>)
 8011bea:	7819      	ldrb	r1, [r3, #0]
 8011bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011bf0:	2202      	movs	r2, #2
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	f002 ffea 	bl	8014bcc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011bf8:	4b5a      	ldr	r3, [pc, #360]	; (8011d64 <USBD_CDC_Init+0x1e4>)
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	f003 020f 	and.w	r2, r3, #15
 8011c00:	6879      	ldr	r1, [r7, #4]
 8011c02:	4613      	mov	r3, r2
 8011c04:	009b      	lsls	r3, r3, #2
 8011c06:	4413      	add	r3, r2
 8011c08:	009b      	lsls	r3, r3, #2
 8011c0a:	440b      	add	r3, r1
 8011c0c:	3324      	adds	r3, #36	; 0x24
 8011c0e:	2201      	movs	r2, #1
 8011c10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011c12:	4b55      	ldr	r3, [pc, #340]	; (8011d68 <USBD_CDC_Init+0x1e8>)
 8011c14:	7819      	ldrb	r1, [r3, #0]
 8011c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011c1a:	2202      	movs	r2, #2
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f002 ffd5 	bl	8014bcc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011c22:	4b51      	ldr	r3, [pc, #324]	; (8011d68 <USBD_CDC_Init+0x1e8>)
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	f003 020f 	and.w	r2, r3, #15
 8011c2a:	6879      	ldr	r1, [r7, #4]
 8011c2c:	4613      	mov	r3, r2
 8011c2e:	009b      	lsls	r3, r3, #2
 8011c30:	4413      	add	r3, r2
 8011c32:	009b      	lsls	r3, r3, #2
 8011c34:	440b      	add	r3, r1
 8011c36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011c3a:	2201      	movs	r2, #1
 8011c3c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011c3e:	4b4b      	ldr	r3, [pc, #300]	; (8011d6c <USBD_CDC_Init+0x1ec>)
 8011c40:	781b      	ldrb	r3, [r3, #0]
 8011c42:	f003 020f 	and.w	r2, r3, #15
 8011c46:	6879      	ldr	r1, [r7, #4]
 8011c48:	4613      	mov	r3, r2
 8011c4a:	009b      	lsls	r3, r3, #2
 8011c4c:	4413      	add	r3, r2
 8011c4e:	009b      	lsls	r3, r3, #2
 8011c50:	440b      	add	r3, r1
 8011c52:	3326      	adds	r3, #38	; 0x26
 8011c54:	2210      	movs	r2, #16
 8011c56:	801a      	strh	r2, [r3, #0]
 8011c58:	e035      	b.n	8011cc6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011c5a:	4b42      	ldr	r3, [pc, #264]	; (8011d64 <USBD_CDC_Init+0x1e4>)
 8011c5c:	7819      	ldrb	r1, [r3, #0]
 8011c5e:	2340      	movs	r3, #64	; 0x40
 8011c60:	2202      	movs	r2, #2
 8011c62:	6878      	ldr	r0, [r7, #4]
 8011c64:	f002 ffb2 	bl	8014bcc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011c68:	4b3e      	ldr	r3, [pc, #248]	; (8011d64 <USBD_CDC_Init+0x1e4>)
 8011c6a:	781b      	ldrb	r3, [r3, #0]
 8011c6c:	f003 020f 	and.w	r2, r3, #15
 8011c70:	6879      	ldr	r1, [r7, #4]
 8011c72:	4613      	mov	r3, r2
 8011c74:	009b      	lsls	r3, r3, #2
 8011c76:	4413      	add	r3, r2
 8011c78:	009b      	lsls	r3, r3, #2
 8011c7a:	440b      	add	r3, r1
 8011c7c:	3324      	adds	r3, #36	; 0x24
 8011c7e:	2201      	movs	r2, #1
 8011c80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011c82:	4b39      	ldr	r3, [pc, #228]	; (8011d68 <USBD_CDC_Init+0x1e8>)
 8011c84:	7819      	ldrb	r1, [r3, #0]
 8011c86:	2340      	movs	r3, #64	; 0x40
 8011c88:	2202      	movs	r2, #2
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f002 ff9e 	bl	8014bcc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011c90:	4b35      	ldr	r3, [pc, #212]	; (8011d68 <USBD_CDC_Init+0x1e8>)
 8011c92:	781b      	ldrb	r3, [r3, #0]
 8011c94:	f003 020f 	and.w	r2, r3, #15
 8011c98:	6879      	ldr	r1, [r7, #4]
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	009b      	lsls	r3, r3, #2
 8011c9e:	4413      	add	r3, r2
 8011ca0:	009b      	lsls	r3, r3, #2
 8011ca2:	440b      	add	r3, r1
 8011ca4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011ca8:	2201      	movs	r2, #1
 8011caa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011cac:	4b2f      	ldr	r3, [pc, #188]	; (8011d6c <USBD_CDC_Init+0x1ec>)
 8011cae:	781b      	ldrb	r3, [r3, #0]
 8011cb0:	f003 020f 	and.w	r2, r3, #15
 8011cb4:	6879      	ldr	r1, [r7, #4]
 8011cb6:	4613      	mov	r3, r2
 8011cb8:	009b      	lsls	r3, r3, #2
 8011cba:	4413      	add	r3, r2
 8011cbc:	009b      	lsls	r3, r3, #2
 8011cbe:	440b      	add	r3, r1
 8011cc0:	3326      	adds	r3, #38	; 0x26
 8011cc2:	2210      	movs	r2, #16
 8011cc4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011cc6:	4b29      	ldr	r3, [pc, #164]	; (8011d6c <USBD_CDC_Init+0x1ec>)
 8011cc8:	7819      	ldrb	r1, [r3, #0]
 8011cca:	2308      	movs	r3, #8
 8011ccc:	2203      	movs	r2, #3
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f002 ff7c 	bl	8014bcc <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8011cd4:	4b25      	ldr	r3, [pc, #148]	; (8011d6c <USBD_CDC_Init+0x1ec>)
 8011cd6:	781b      	ldrb	r3, [r3, #0]
 8011cd8:	f003 020f 	and.w	r2, r3, #15
 8011cdc:	6879      	ldr	r1, [r7, #4]
 8011cde:	4613      	mov	r3, r2
 8011ce0:	009b      	lsls	r3, r3, #2
 8011ce2:	4413      	add	r3, r2
 8011ce4:	009b      	lsls	r3, r3, #2
 8011ce6:	440b      	add	r3, r1
 8011ce8:	3324      	adds	r3, #36	; 0x24
 8011cea:	2201      	movs	r2, #1
 8011cec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011cfc:	687a      	ldr	r2, [r7, #4]
 8011cfe:	33b0      	adds	r3, #176	; 0xb0
 8011d00:	009b      	lsls	r3, r3, #2
 8011d02:	4413      	add	r3, r2
 8011d04:	685b      	ldr	r3, [r3, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	2200      	movs	r2, #0
 8011d16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d101      	bne.n	8011d28 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8011d24:	2302      	movs	r3, #2
 8011d26:	e018      	b.n	8011d5a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	7c1b      	ldrb	r3, [r3, #16]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d10a      	bne.n	8011d46 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011d30:	4b0d      	ldr	r3, [pc, #52]	; (8011d68 <USBD_CDC_Init+0x1e8>)
 8011d32:	7819      	ldrb	r1, [r3, #0]
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f003 f8c0 	bl	8014ec4 <USBD_LL_PrepareReceive>
 8011d44:	e008      	b.n	8011d58 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011d46:	4b08      	ldr	r3, [pc, #32]	; (8011d68 <USBD_CDC_Init+0x1e8>)
 8011d48:	7819      	ldrb	r1, [r3, #0]
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011d50:	2340      	movs	r3, #64	; 0x40
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f003 f8b6 	bl	8014ec4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011d58:	2300      	movs	r3, #0
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3710      	adds	r7, #16
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}
 8011d62:	bf00      	nop
 8011d64:	200000b7 	.word	0x200000b7
 8011d68:	200000b8 	.word	0x200000b8
 8011d6c:	200000b9 	.word	0x200000b9

08011d70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b082      	sub	sp, #8
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	460b      	mov	r3, r1
 8011d7a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8011d7c:	4b3a      	ldr	r3, [pc, #232]	; (8011e68 <USBD_CDC_DeInit+0xf8>)
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	4619      	mov	r1, r3
 8011d82:	6878      	ldr	r0, [r7, #4]
 8011d84:	f002 ff60 	bl	8014c48 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8011d88:	4b37      	ldr	r3, [pc, #220]	; (8011e68 <USBD_CDC_DeInit+0xf8>)
 8011d8a:	781b      	ldrb	r3, [r3, #0]
 8011d8c:	f003 020f 	and.w	r2, r3, #15
 8011d90:	6879      	ldr	r1, [r7, #4]
 8011d92:	4613      	mov	r3, r2
 8011d94:	009b      	lsls	r3, r3, #2
 8011d96:	4413      	add	r3, r2
 8011d98:	009b      	lsls	r3, r3, #2
 8011d9a:	440b      	add	r3, r1
 8011d9c:	3324      	adds	r3, #36	; 0x24
 8011d9e:	2200      	movs	r2, #0
 8011da0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8011da2:	4b32      	ldr	r3, [pc, #200]	; (8011e6c <USBD_CDC_DeInit+0xfc>)
 8011da4:	781b      	ldrb	r3, [r3, #0]
 8011da6:	4619      	mov	r1, r3
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f002 ff4d 	bl	8014c48 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8011dae:	4b2f      	ldr	r3, [pc, #188]	; (8011e6c <USBD_CDC_DeInit+0xfc>)
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	f003 020f 	and.w	r2, r3, #15
 8011db6:	6879      	ldr	r1, [r7, #4]
 8011db8:	4613      	mov	r3, r2
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	4413      	add	r3, r2
 8011dbe:	009b      	lsls	r3, r3, #2
 8011dc0:	440b      	add	r3, r1
 8011dc2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8011dca:	4b29      	ldr	r3, [pc, #164]	; (8011e70 <USBD_CDC_DeInit+0x100>)
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	4619      	mov	r1, r3
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f002 ff39 	bl	8014c48 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8011dd6:	4b26      	ldr	r3, [pc, #152]	; (8011e70 <USBD_CDC_DeInit+0x100>)
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	f003 020f 	and.w	r2, r3, #15
 8011dde:	6879      	ldr	r1, [r7, #4]
 8011de0:	4613      	mov	r3, r2
 8011de2:	009b      	lsls	r3, r3, #2
 8011de4:	4413      	add	r3, r2
 8011de6:	009b      	lsls	r3, r3, #2
 8011de8:	440b      	add	r3, r1
 8011dea:	3324      	adds	r3, #36	; 0x24
 8011dec:	2200      	movs	r2, #0
 8011dee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8011df0:	4b1f      	ldr	r3, [pc, #124]	; (8011e70 <USBD_CDC_DeInit+0x100>)
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	f003 020f 	and.w	r2, r3, #15
 8011df8:	6879      	ldr	r1, [r7, #4]
 8011dfa:	4613      	mov	r3, r2
 8011dfc:	009b      	lsls	r3, r3, #2
 8011dfe:	4413      	add	r3, r2
 8011e00:	009b      	lsls	r3, r3, #2
 8011e02:	440b      	add	r3, r1
 8011e04:	3326      	adds	r3, #38	; 0x26
 8011e06:	2200      	movs	r2, #0
 8011e08:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	32b0      	adds	r2, #176	; 0xb0
 8011e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d01f      	beq.n	8011e5c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	33b0      	adds	r3, #176	; 0xb0
 8011e26:	009b      	lsls	r3, r3, #2
 8011e28:	4413      	add	r3, r2
 8011e2a:	685b      	ldr	r3, [r3, #4]
 8011e2c:	685b      	ldr	r3, [r3, #4]
 8011e2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	32b0      	adds	r2, #176	; 0xb0
 8011e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f003 f8d0 	bl	8014fe4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	32b0      	adds	r2, #176	; 0xb0
 8011e4e:	2100      	movs	r1, #0
 8011e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2200      	movs	r2, #0
 8011e58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011e5c:	2300      	movs	r3, #0
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3708      	adds	r7, #8
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}
 8011e66:	bf00      	nop
 8011e68:	200000b7 	.word	0x200000b7
 8011e6c:	200000b8 	.word	0x200000b8
 8011e70:	200000b9 	.word	0x200000b9

08011e74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b086      	sub	sp, #24
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
 8011e7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	32b0      	adds	r2, #176	; 0xb0
 8011e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011e92:	2300      	movs	r3, #0
 8011e94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e96:	2300      	movs	r3, #0
 8011e98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011e9a:	693b      	ldr	r3, [r7, #16]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d101      	bne.n	8011ea4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8011ea0:	2303      	movs	r3, #3
 8011ea2:	e0bf      	b.n	8012024 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	781b      	ldrb	r3, [r3, #0]
 8011ea8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d050      	beq.n	8011f52 <USBD_CDC_Setup+0xde>
 8011eb0:	2b20      	cmp	r3, #32
 8011eb2:	f040 80af 	bne.w	8012014 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	88db      	ldrh	r3, [r3, #6]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d03a      	beq.n	8011f34 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	781b      	ldrb	r3, [r3, #0]
 8011ec2:	b25b      	sxtb	r3, r3
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	da1b      	bge.n	8011f00 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011ece:	687a      	ldr	r2, [r7, #4]
 8011ed0:	33b0      	adds	r3, #176	; 0xb0
 8011ed2:	009b      	lsls	r3, r3, #2
 8011ed4:	4413      	add	r3, r2
 8011ed6:	685b      	ldr	r3, [r3, #4]
 8011ed8:	689b      	ldr	r3, [r3, #8]
 8011eda:	683a      	ldr	r2, [r7, #0]
 8011edc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8011ede:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011ee0:	683a      	ldr	r2, [r7, #0]
 8011ee2:	88d2      	ldrh	r2, [r2, #6]
 8011ee4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	88db      	ldrh	r3, [r3, #6]
 8011eea:	2b07      	cmp	r3, #7
 8011eec:	bf28      	it	cs
 8011eee:	2307      	movcs	r3, #7
 8011ef0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011ef2:	693b      	ldr	r3, [r7, #16]
 8011ef4:	89fa      	ldrh	r2, [r7, #14]
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f001 fd21 	bl	8013940 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8011efe:	e090      	b.n	8012022 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	785a      	ldrb	r2, [r3, #1]
 8011f04:	693b      	ldr	r3, [r7, #16]
 8011f06:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	88db      	ldrh	r3, [r3, #6]
 8011f0e:	2b3f      	cmp	r3, #63	; 0x3f
 8011f10:	d803      	bhi.n	8011f1a <USBD_CDC_Setup+0xa6>
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	88db      	ldrh	r3, [r3, #6]
 8011f16:	b2da      	uxtb	r2, r3
 8011f18:	e000      	b.n	8011f1c <USBD_CDC_Setup+0xa8>
 8011f1a:	2240      	movs	r2, #64	; 0x40
 8011f1c:	693b      	ldr	r3, [r7, #16]
 8011f1e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8011f22:	6939      	ldr	r1, [r7, #16]
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8011f2a:	461a      	mov	r2, r3
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f001 fd33 	bl	8013998 <USBD_CtlPrepareRx>
      break;
 8011f32:	e076      	b.n	8012022 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011f3a:	687a      	ldr	r2, [r7, #4]
 8011f3c:	33b0      	adds	r3, #176	; 0xb0
 8011f3e:	009b      	lsls	r3, r3, #2
 8011f40:	4413      	add	r3, r2
 8011f42:	685b      	ldr	r3, [r3, #4]
 8011f44:	689b      	ldr	r3, [r3, #8]
 8011f46:	683a      	ldr	r2, [r7, #0]
 8011f48:	7850      	ldrb	r0, [r2, #1]
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	6839      	ldr	r1, [r7, #0]
 8011f4e:	4798      	blx	r3
      break;
 8011f50:	e067      	b.n	8012022 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	785b      	ldrb	r3, [r3, #1]
 8011f56:	2b0b      	cmp	r3, #11
 8011f58:	d851      	bhi.n	8011ffe <USBD_CDC_Setup+0x18a>
 8011f5a:	a201      	add	r2, pc, #4	; (adr r2, 8011f60 <USBD_CDC_Setup+0xec>)
 8011f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f60:	08011f91 	.word	0x08011f91
 8011f64:	0801200d 	.word	0x0801200d
 8011f68:	08011fff 	.word	0x08011fff
 8011f6c:	08011fff 	.word	0x08011fff
 8011f70:	08011fff 	.word	0x08011fff
 8011f74:	08011fff 	.word	0x08011fff
 8011f78:	08011fff 	.word	0x08011fff
 8011f7c:	08011fff 	.word	0x08011fff
 8011f80:	08011fff 	.word	0x08011fff
 8011f84:	08011fff 	.word	0x08011fff
 8011f88:	08011fbb 	.word	0x08011fbb
 8011f8c:	08011fe5 	.word	0x08011fe5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f96:	b2db      	uxtb	r3, r3
 8011f98:	2b03      	cmp	r3, #3
 8011f9a:	d107      	bne.n	8011fac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011f9c:	f107 030a 	add.w	r3, r7, #10
 8011fa0:	2202      	movs	r2, #2
 8011fa2:	4619      	mov	r1, r3
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	f001 fccb 	bl	8013940 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011faa:	e032      	b.n	8012012 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011fac:	6839      	ldr	r1, [r7, #0]
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f001 fc55 	bl	801385e <USBD_CtlError>
            ret = USBD_FAIL;
 8011fb4:	2303      	movs	r3, #3
 8011fb6:	75fb      	strb	r3, [r7, #23]
          break;
 8011fb8:	e02b      	b.n	8012012 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fc0:	b2db      	uxtb	r3, r3
 8011fc2:	2b03      	cmp	r3, #3
 8011fc4:	d107      	bne.n	8011fd6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011fc6:	f107 030d 	add.w	r3, r7, #13
 8011fca:	2201      	movs	r2, #1
 8011fcc:	4619      	mov	r1, r3
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f001 fcb6 	bl	8013940 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011fd4:	e01d      	b.n	8012012 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011fd6:	6839      	ldr	r1, [r7, #0]
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f001 fc40 	bl	801385e <USBD_CtlError>
            ret = USBD_FAIL;
 8011fde:	2303      	movs	r3, #3
 8011fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8011fe2:	e016      	b.n	8012012 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fea:	b2db      	uxtb	r3, r3
 8011fec:	2b03      	cmp	r3, #3
 8011fee:	d00f      	beq.n	8012010 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8011ff0:	6839      	ldr	r1, [r7, #0]
 8011ff2:	6878      	ldr	r0, [r7, #4]
 8011ff4:	f001 fc33 	bl	801385e <USBD_CtlError>
            ret = USBD_FAIL;
 8011ff8:	2303      	movs	r3, #3
 8011ffa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011ffc:	e008      	b.n	8012010 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011ffe:	6839      	ldr	r1, [r7, #0]
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f001 fc2c 	bl	801385e <USBD_CtlError>
          ret = USBD_FAIL;
 8012006:	2303      	movs	r3, #3
 8012008:	75fb      	strb	r3, [r7, #23]
          break;
 801200a:	e002      	b.n	8012012 <USBD_CDC_Setup+0x19e>
          break;
 801200c:	bf00      	nop
 801200e:	e008      	b.n	8012022 <USBD_CDC_Setup+0x1ae>
          break;
 8012010:	bf00      	nop
      }
      break;
 8012012:	e006      	b.n	8012022 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012014:	6839      	ldr	r1, [r7, #0]
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f001 fc21 	bl	801385e <USBD_CtlError>
      ret = USBD_FAIL;
 801201c:	2303      	movs	r3, #3
 801201e:	75fb      	strb	r3, [r7, #23]
      break;
 8012020:	bf00      	nop
  }

  return (uint8_t)ret;
 8012022:	7dfb      	ldrb	r3, [r7, #23]
}
 8012024:	4618      	mov	r0, r3
 8012026:	3718      	adds	r7, #24
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}

0801202c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b084      	sub	sp, #16
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	460b      	mov	r3, r1
 8012036:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801203e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	32b0      	adds	r2, #176	; 0xb0
 801204a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d101      	bne.n	8012056 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8012052:	2303      	movs	r3, #3
 8012054:	e065      	b.n	8012122 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	32b0      	adds	r2, #176	; 0xb0
 8012060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012064:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012066:	78fb      	ldrb	r3, [r7, #3]
 8012068:	f003 020f 	and.w	r2, r3, #15
 801206c:	6879      	ldr	r1, [r7, #4]
 801206e:	4613      	mov	r3, r2
 8012070:	009b      	lsls	r3, r3, #2
 8012072:	4413      	add	r3, r2
 8012074:	009b      	lsls	r3, r3, #2
 8012076:	440b      	add	r3, r1
 8012078:	3318      	adds	r3, #24
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d02f      	beq.n	80120e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8012080:	78fb      	ldrb	r3, [r7, #3]
 8012082:	f003 020f 	and.w	r2, r3, #15
 8012086:	6879      	ldr	r1, [r7, #4]
 8012088:	4613      	mov	r3, r2
 801208a:	009b      	lsls	r3, r3, #2
 801208c:	4413      	add	r3, r2
 801208e:	009b      	lsls	r3, r3, #2
 8012090:	440b      	add	r3, r1
 8012092:	3318      	adds	r3, #24
 8012094:	681a      	ldr	r2, [r3, #0]
 8012096:	78fb      	ldrb	r3, [r7, #3]
 8012098:	f003 010f 	and.w	r1, r3, #15
 801209c:	68f8      	ldr	r0, [r7, #12]
 801209e:	460b      	mov	r3, r1
 80120a0:	009b      	lsls	r3, r3, #2
 80120a2:	440b      	add	r3, r1
 80120a4:	00db      	lsls	r3, r3, #3
 80120a6:	4403      	add	r3, r0
 80120a8:	3338      	adds	r3, #56	; 0x38
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80120b0:	fb01 f303 	mul.w	r3, r1, r3
 80120b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d112      	bne.n	80120e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80120ba:	78fb      	ldrb	r3, [r7, #3]
 80120bc:	f003 020f 	and.w	r2, r3, #15
 80120c0:	6879      	ldr	r1, [r7, #4]
 80120c2:	4613      	mov	r3, r2
 80120c4:	009b      	lsls	r3, r3, #2
 80120c6:	4413      	add	r3, r2
 80120c8:	009b      	lsls	r3, r3, #2
 80120ca:	440b      	add	r3, r1
 80120cc:	3318      	adds	r3, #24
 80120ce:	2200      	movs	r2, #0
 80120d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80120d2:	78f9      	ldrb	r1, [r7, #3]
 80120d4:	2300      	movs	r3, #0
 80120d6:	2200      	movs	r2, #0
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f002 febb 	bl	8014e54 <USBD_LL_Transmit>
 80120de:	e01f      	b.n	8012120 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	2200      	movs	r2, #0
 80120e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80120ee:	687a      	ldr	r2, [r7, #4]
 80120f0:	33b0      	adds	r3, #176	; 0xb0
 80120f2:	009b      	lsls	r3, r3, #2
 80120f4:	4413      	add	r3, r2
 80120f6:	685b      	ldr	r3, [r3, #4]
 80120f8:	691b      	ldr	r3, [r3, #16]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d010      	beq.n	8012120 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012104:	687a      	ldr	r2, [r7, #4]
 8012106:	33b0      	adds	r3, #176	; 0xb0
 8012108:	009b      	lsls	r3, r3, #2
 801210a:	4413      	add	r3, r2
 801210c:	685b      	ldr	r3, [r3, #4]
 801210e:	691b      	ldr	r3, [r3, #16]
 8012110:	68ba      	ldr	r2, [r7, #8]
 8012112:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8012116:	68ba      	ldr	r2, [r7, #8]
 8012118:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801211c:	78fa      	ldrb	r2, [r7, #3]
 801211e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012120:	2300      	movs	r3, #0
}
 8012122:	4618      	mov	r0, r3
 8012124:	3710      	adds	r7, #16
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}

0801212a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801212a:	b580      	push	{r7, lr}
 801212c:	b084      	sub	sp, #16
 801212e:	af00      	add	r7, sp, #0
 8012130:	6078      	str	r0, [r7, #4]
 8012132:	460b      	mov	r3, r1
 8012134:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	32b0      	adds	r2, #176	; 0xb0
 8012140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012144:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	32b0      	adds	r2, #176	; 0xb0
 8012150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d101      	bne.n	801215c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8012158:	2303      	movs	r3, #3
 801215a:	e01a      	b.n	8012192 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801215c:	78fb      	ldrb	r3, [r7, #3]
 801215e:	4619      	mov	r1, r3
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f002 fee7 	bl	8014f34 <USBD_LL_GetRxDataSize>
 8012166:	4602      	mov	r2, r0
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012174:	687a      	ldr	r2, [r7, #4]
 8012176:	33b0      	adds	r3, #176	; 0xb0
 8012178:	009b      	lsls	r3, r3, #2
 801217a:	4413      	add	r3, r2
 801217c:	685b      	ldr	r3, [r3, #4]
 801217e:	68db      	ldr	r3, [r3, #12]
 8012180:	68fa      	ldr	r2, [r7, #12]
 8012182:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8012186:	68fa      	ldr	r2, [r7, #12]
 8012188:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801218c:	4611      	mov	r1, r2
 801218e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012190:	2300      	movs	r3, #0
}
 8012192:	4618      	mov	r0, r3
 8012194:	3710      	adds	r7, #16
 8012196:	46bd      	mov	sp, r7
 8012198:	bd80      	pop	{r7, pc}

0801219a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801219a:	b580      	push	{r7, lr}
 801219c:	b084      	sub	sp, #16
 801219e:	af00      	add	r7, sp, #0
 80121a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	32b0      	adds	r2, #176	; 0xb0
 80121ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d101      	bne.n	80121bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80121b8:	2303      	movs	r3, #3
 80121ba:	e025      	b.n	8012208 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80121c2:	687a      	ldr	r2, [r7, #4]
 80121c4:	33b0      	adds	r3, #176	; 0xb0
 80121c6:	009b      	lsls	r3, r3, #2
 80121c8:	4413      	add	r3, r2
 80121ca:	685b      	ldr	r3, [r3, #4]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d01a      	beq.n	8012206 <USBD_CDC_EP0_RxReady+0x6c>
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80121d6:	2bff      	cmp	r3, #255	; 0xff
 80121d8:	d015      	beq.n	8012206 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80121e0:	687a      	ldr	r2, [r7, #4]
 80121e2:	33b0      	adds	r3, #176	; 0xb0
 80121e4:	009b      	lsls	r3, r3, #2
 80121e6:	4413      	add	r3, r2
 80121e8:	685b      	ldr	r3, [r3, #4]
 80121ea:	689b      	ldr	r3, [r3, #8]
 80121ec:	68fa      	ldr	r2, [r7, #12]
 80121ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80121f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80121f4:	68fa      	ldr	r2, [r7, #12]
 80121f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80121fa:	b292      	uxth	r2, r2
 80121fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	22ff      	movs	r2, #255	; 0xff
 8012202:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8012206:	2300      	movs	r3, #0
}
 8012208:	4618      	mov	r0, r3
 801220a:	3710      	adds	r7, #16
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}

08012210 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b086      	sub	sp, #24
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012218:	2182      	movs	r1, #130	; 0x82
 801221a:	4818      	ldr	r0, [pc, #96]	; (801227c <USBD_CDC_GetFSCfgDesc+0x6c>)
 801221c:	f000 fcbd 	bl	8012b9a <USBD_GetEpDesc>
 8012220:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012222:	2101      	movs	r1, #1
 8012224:	4815      	ldr	r0, [pc, #84]	; (801227c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012226:	f000 fcb8 	bl	8012b9a <USBD_GetEpDesc>
 801222a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801222c:	2181      	movs	r1, #129	; 0x81
 801222e:	4813      	ldr	r0, [pc, #76]	; (801227c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012230:	f000 fcb3 	bl	8012b9a <USBD_GetEpDesc>
 8012234:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d002      	beq.n	8012242 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	2210      	movs	r2, #16
 8012240:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012242:	693b      	ldr	r3, [r7, #16]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d006      	beq.n	8012256 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012248:	693b      	ldr	r3, [r7, #16]
 801224a:	2200      	movs	r2, #0
 801224c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012250:	711a      	strb	r2, [r3, #4]
 8012252:	2200      	movs	r2, #0
 8012254:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d006      	beq.n	801226a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	2200      	movs	r2, #0
 8012260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012264:	711a      	strb	r2, [r3, #4]
 8012266:	2200      	movs	r2, #0
 8012268:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	2243      	movs	r2, #67	; 0x43
 801226e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012270:	4b02      	ldr	r3, [pc, #8]	; (801227c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8012272:	4618      	mov	r0, r3
 8012274:	3718      	adds	r7, #24
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}
 801227a:	bf00      	nop
 801227c:	20000074 	.word	0x20000074

08012280 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b086      	sub	sp, #24
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012288:	2182      	movs	r1, #130	; 0x82
 801228a:	4818      	ldr	r0, [pc, #96]	; (80122ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 801228c:	f000 fc85 	bl	8012b9a <USBD_GetEpDesc>
 8012290:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012292:	2101      	movs	r1, #1
 8012294:	4815      	ldr	r0, [pc, #84]	; (80122ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012296:	f000 fc80 	bl	8012b9a <USBD_GetEpDesc>
 801229a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801229c:	2181      	movs	r1, #129	; 0x81
 801229e:	4813      	ldr	r0, [pc, #76]	; (80122ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 80122a0:	f000 fc7b 	bl	8012b9a <USBD_GetEpDesc>
 80122a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d002      	beq.n	80122b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	2210      	movs	r2, #16
 80122b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80122b2:	693b      	ldr	r3, [r7, #16]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d006      	beq.n	80122c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80122b8:	693b      	ldr	r3, [r7, #16]
 80122ba:	2200      	movs	r2, #0
 80122bc:	711a      	strb	r2, [r3, #4]
 80122be:	2200      	movs	r2, #0
 80122c0:	f042 0202 	orr.w	r2, r2, #2
 80122c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d006      	beq.n	80122da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	2200      	movs	r2, #0
 80122d0:	711a      	strb	r2, [r3, #4]
 80122d2:	2200      	movs	r2, #0
 80122d4:	f042 0202 	orr.w	r2, r2, #2
 80122d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2243      	movs	r2, #67	; 0x43
 80122de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80122e0:	4b02      	ldr	r3, [pc, #8]	; (80122ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	3718      	adds	r7, #24
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}
 80122ea:	bf00      	nop
 80122ec:	20000074 	.word	0x20000074

080122f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b086      	sub	sp, #24
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80122f8:	2182      	movs	r1, #130	; 0x82
 80122fa:	4818      	ldr	r0, [pc, #96]	; (801235c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80122fc:	f000 fc4d 	bl	8012b9a <USBD_GetEpDesc>
 8012300:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012302:	2101      	movs	r1, #1
 8012304:	4815      	ldr	r0, [pc, #84]	; (801235c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012306:	f000 fc48 	bl	8012b9a <USBD_GetEpDesc>
 801230a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801230c:	2181      	movs	r1, #129	; 0x81
 801230e:	4813      	ldr	r0, [pc, #76]	; (801235c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012310:	f000 fc43 	bl	8012b9a <USBD_GetEpDesc>
 8012314:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d002      	beq.n	8012322 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	2210      	movs	r2, #16
 8012320:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d006      	beq.n	8012336 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012328:	693b      	ldr	r3, [r7, #16]
 801232a:	2200      	movs	r2, #0
 801232c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012330:	711a      	strb	r2, [r3, #4]
 8012332:	2200      	movs	r2, #0
 8012334:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d006      	beq.n	801234a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	2200      	movs	r2, #0
 8012340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012344:	711a      	strb	r2, [r3, #4]
 8012346:	2200      	movs	r2, #0
 8012348:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	2243      	movs	r2, #67	; 0x43
 801234e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012350:	4b02      	ldr	r3, [pc, #8]	; (801235c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8012352:	4618      	mov	r0, r3
 8012354:	3718      	adds	r7, #24
 8012356:	46bd      	mov	sp, r7
 8012358:	bd80      	pop	{r7, pc}
 801235a:	bf00      	nop
 801235c:	20000074 	.word	0x20000074

08012360 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012360:	b480      	push	{r7}
 8012362:	b083      	sub	sp, #12
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	220a      	movs	r2, #10
 801236c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801236e:	4b03      	ldr	r3, [pc, #12]	; (801237c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012370:	4618      	mov	r0, r3
 8012372:	370c      	adds	r7, #12
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr
 801237c:	20000030 	.word	0x20000030

08012380 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012380:	b480      	push	{r7}
 8012382:	b083      	sub	sp, #12
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d101      	bne.n	8012394 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012390:	2303      	movs	r3, #3
 8012392:	e009      	b.n	80123a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801239a:	687a      	ldr	r2, [r7, #4]
 801239c:	33b0      	adds	r3, #176	; 0xb0
 801239e:	009b      	lsls	r3, r3, #2
 80123a0:	4413      	add	r3, r2
 80123a2:	683a      	ldr	r2, [r7, #0]
 80123a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80123a6:	2300      	movs	r3, #0
}
 80123a8:	4618      	mov	r0, r3
 80123aa:	370c      	adds	r7, #12
 80123ac:	46bd      	mov	sp, r7
 80123ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b2:	4770      	bx	lr

080123b4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80123b4:	b480      	push	{r7}
 80123b6:	b087      	sub	sp, #28
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	60f8      	str	r0, [r7, #12]
 80123bc:	60b9      	str	r1, [r7, #8]
 80123be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	32b0      	adds	r2, #176	; 0xb0
 80123ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123ce:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80123d0:	697b      	ldr	r3, [r7, #20]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d101      	bne.n	80123da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80123d6:	2303      	movs	r3, #3
 80123d8:	e008      	b.n	80123ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	68ba      	ldr	r2, [r7, #8]
 80123de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	687a      	ldr	r2, [r7, #4]
 80123e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80123ea:	2300      	movs	r3, #0
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	371c      	adds	r7, #28
 80123f0:	46bd      	mov	sp, r7
 80123f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f6:	4770      	bx	lr

080123f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80123f8:	b480      	push	{r7}
 80123fa:	b085      	sub	sp, #20
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
 8012400:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	32b0      	adds	r2, #176	; 0xb0
 801240c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012410:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d101      	bne.n	801241c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8012418:	2303      	movs	r3, #3
 801241a:	e004      	b.n	8012426 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	683a      	ldr	r2, [r7, #0]
 8012420:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8012424:	2300      	movs	r3, #0
}
 8012426:	4618      	mov	r0, r3
 8012428:	3714      	adds	r7, #20
 801242a:	46bd      	mov	sp, r7
 801242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012430:	4770      	bx	lr
	...

08012434 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b084      	sub	sp, #16
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	32b0      	adds	r2, #176	; 0xb0
 8012446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801244a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801244c:	2301      	movs	r3, #1
 801244e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d101      	bne.n	801245a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012456:	2303      	movs	r3, #3
 8012458:	e025      	b.n	80124a6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012460:	2b00      	cmp	r3, #0
 8012462:	d11f      	bne.n	80124a4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	2201      	movs	r2, #1
 8012468:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801246c:	4b10      	ldr	r3, [pc, #64]	; (80124b0 <USBD_CDC_TransmitPacket+0x7c>)
 801246e:	781b      	ldrb	r3, [r3, #0]
 8012470:	f003 020f 	and.w	r2, r3, #15
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	4613      	mov	r3, r2
 801247e:	009b      	lsls	r3, r3, #2
 8012480:	4413      	add	r3, r2
 8012482:	009b      	lsls	r3, r3, #2
 8012484:	4403      	add	r3, r0
 8012486:	3318      	adds	r3, #24
 8012488:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801248a:	4b09      	ldr	r3, [pc, #36]	; (80124b0 <USBD_CDC_TransmitPacket+0x7c>)
 801248c:	7819      	ldrb	r1, [r3, #0]
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f002 fcda 	bl	8014e54 <USBD_LL_Transmit>

    ret = USBD_OK;
 80124a0:	2300      	movs	r3, #0
 80124a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80124a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3710      	adds	r7, #16
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}
 80124ae:	bf00      	nop
 80124b0:	200000b7 	.word	0x200000b7

080124b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b084      	sub	sp, #16
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	32b0      	adds	r2, #176	; 0xb0
 80124c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	32b0      	adds	r2, #176	; 0xb0
 80124d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d101      	bne.n	80124e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80124de:	2303      	movs	r3, #3
 80124e0:	e018      	b.n	8012514 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	7c1b      	ldrb	r3, [r3, #16]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d10a      	bne.n	8012500 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80124ea:	4b0c      	ldr	r3, [pc, #48]	; (801251c <USBD_CDC_ReceivePacket+0x68>)
 80124ec:	7819      	ldrb	r1, [r3, #0]
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80124f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80124f8:	6878      	ldr	r0, [r7, #4]
 80124fa:	f002 fce3 	bl	8014ec4 <USBD_LL_PrepareReceive>
 80124fe:	e008      	b.n	8012512 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012500:	4b06      	ldr	r3, [pc, #24]	; (801251c <USBD_CDC_ReceivePacket+0x68>)
 8012502:	7819      	ldrb	r1, [r3, #0]
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801250a:	2340      	movs	r3, #64	; 0x40
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f002 fcd9 	bl	8014ec4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012512:	2300      	movs	r3, #0
}
 8012514:	4618      	mov	r0, r3
 8012516:	3710      	adds	r7, #16
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}
 801251c:	200000b8 	.word	0x200000b8

08012520 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b086      	sub	sp, #24
 8012524:	af00      	add	r7, sp, #0
 8012526:	60f8      	str	r0, [r7, #12]
 8012528:	60b9      	str	r1, [r7, #8]
 801252a:	4613      	mov	r3, r2
 801252c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d101      	bne.n	8012538 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012534:	2303      	movs	r3, #3
 8012536:	e01f      	b.n	8012578 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	2200      	movs	r2, #0
 801253c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	2200      	movs	r2, #0
 8012544:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	2200      	movs	r2, #0
 801254c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d003      	beq.n	801255e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	68ba      	ldr	r2, [r7, #8]
 801255a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	2201      	movs	r2, #1
 8012562:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	79fa      	ldrb	r2, [r7, #7]
 801256a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801256c:	68f8      	ldr	r0, [r7, #12]
 801256e:	f002 fa99 	bl	8014aa4 <USBD_LL_Init>
 8012572:	4603      	mov	r3, r0
 8012574:	75fb      	strb	r3, [r7, #23]

  return ret;
 8012576:	7dfb      	ldrb	r3, [r7, #23]
}
 8012578:	4618      	mov	r0, r3
 801257a:	3718      	adds	r7, #24
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}

08012580 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b084      	sub	sp, #16
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
 8012588:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801258a:	2300      	movs	r3, #0
 801258c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d101      	bne.n	8012598 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012594:	2303      	movs	r3, #3
 8012596:	e025      	b.n	80125e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	683a      	ldr	r2, [r7, #0]
 801259c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	32ae      	adds	r2, #174	; 0xae
 80125aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d00f      	beq.n	80125d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	32ae      	adds	r2, #174	; 0xae
 80125be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125c4:	f107 020e 	add.w	r2, r7, #14
 80125c8:	4610      	mov	r0, r2
 80125ca:	4798      	blx	r3
 80125cc:	4602      	mov	r2, r0
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80125da:	1c5a      	adds	r2, r3, #1
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80125e2:	2300      	movs	r3, #0
}
 80125e4:	4618      	mov	r0, r3
 80125e6:	3710      	adds	r7, #16
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bd80      	pop	{r7, pc}

080125ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b082      	sub	sp, #8
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f002 fab7 	bl	8014b68 <USBD_LL_Start>
 80125fa:	4603      	mov	r3, r0
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	3708      	adds	r7, #8
 8012600:	46bd      	mov	sp, r7
 8012602:	bd80      	pop	{r7, pc}

08012604 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8012604:	b480      	push	{r7}
 8012606:	b083      	sub	sp, #12
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801260c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801260e:	4618      	mov	r0, r3
 8012610:	370c      	adds	r7, #12
 8012612:	46bd      	mov	sp, r7
 8012614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012618:	4770      	bx	lr

0801261a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801261a:	b580      	push	{r7, lr}
 801261c:	b084      	sub	sp, #16
 801261e:	af00      	add	r7, sp, #0
 8012620:	6078      	str	r0, [r7, #4]
 8012622:	460b      	mov	r3, r1
 8012624:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012626:	2300      	movs	r3, #0
 8012628:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012630:	2b00      	cmp	r3, #0
 8012632:	d009      	beq.n	8012648 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	78fa      	ldrb	r2, [r7, #3]
 801263e:	4611      	mov	r1, r2
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	4798      	blx	r3
 8012644:	4603      	mov	r3, r0
 8012646:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012648:	7bfb      	ldrb	r3, [r7, #15]
}
 801264a:	4618      	mov	r0, r3
 801264c:	3710      	adds	r7, #16
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}

08012652 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012652:	b580      	push	{r7, lr}
 8012654:	b084      	sub	sp, #16
 8012656:	af00      	add	r7, sp, #0
 8012658:	6078      	str	r0, [r7, #4]
 801265a:	460b      	mov	r3, r1
 801265c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801265e:	2300      	movs	r3, #0
 8012660:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012668:	685b      	ldr	r3, [r3, #4]
 801266a:	78fa      	ldrb	r2, [r7, #3]
 801266c:	4611      	mov	r1, r2
 801266e:	6878      	ldr	r0, [r7, #4]
 8012670:	4798      	blx	r3
 8012672:	4603      	mov	r3, r0
 8012674:	2b00      	cmp	r3, #0
 8012676:	d001      	beq.n	801267c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8012678:	2303      	movs	r3, #3
 801267a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801267c:	7bfb      	ldrb	r3, [r7, #15]
}
 801267e:	4618      	mov	r0, r3
 8012680:	3710      	adds	r7, #16
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}

08012686 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012686:	b580      	push	{r7, lr}
 8012688:	b084      	sub	sp, #16
 801268a:	af00      	add	r7, sp, #0
 801268c:	6078      	str	r0, [r7, #4]
 801268e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012696:	6839      	ldr	r1, [r7, #0]
 8012698:	4618      	mov	r0, r3
 801269a:	f001 f8a6 	bl	80137ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	2201      	movs	r2, #1
 80126a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80126ac:	461a      	mov	r2, r3
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80126ba:	f003 031f 	and.w	r3, r3, #31
 80126be:	2b02      	cmp	r3, #2
 80126c0:	d01a      	beq.n	80126f8 <USBD_LL_SetupStage+0x72>
 80126c2:	2b02      	cmp	r3, #2
 80126c4:	d822      	bhi.n	801270c <USBD_LL_SetupStage+0x86>
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d002      	beq.n	80126d0 <USBD_LL_SetupStage+0x4a>
 80126ca:	2b01      	cmp	r3, #1
 80126cc:	d00a      	beq.n	80126e4 <USBD_LL_SetupStage+0x5e>
 80126ce:	e01d      	b.n	801270c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80126d6:	4619      	mov	r1, r3
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f000 fad3 	bl	8012c84 <USBD_StdDevReq>
 80126de:	4603      	mov	r3, r0
 80126e0:	73fb      	strb	r3, [r7, #15]
      break;
 80126e2:	e020      	b.n	8012726 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80126ea:	4619      	mov	r1, r3
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	f000 fb3b 	bl	8012d68 <USBD_StdItfReq>
 80126f2:	4603      	mov	r3, r0
 80126f4:	73fb      	strb	r3, [r7, #15]
      break;
 80126f6:	e016      	b.n	8012726 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80126fe:	4619      	mov	r1, r3
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f000 fb9d 	bl	8012e40 <USBD_StdEPReq>
 8012706:	4603      	mov	r3, r0
 8012708:	73fb      	strb	r3, [r7, #15]
      break;
 801270a:	e00c      	b.n	8012726 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012712:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012716:	b2db      	uxtb	r3, r3
 8012718:	4619      	mov	r1, r3
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f002 faca 	bl	8014cb4 <USBD_LL_StallEP>
 8012720:	4603      	mov	r3, r0
 8012722:	73fb      	strb	r3, [r7, #15]
      break;
 8012724:	bf00      	nop
  }

  return ret;
 8012726:	7bfb      	ldrb	r3, [r7, #15]
}
 8012728:	4618      	mov	r0, r3
 801272a:	3710      	adds	r7, #16
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}

08012730 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b086      	sub	sp, #24
 8012734:	af00      	add	r7, sp, #0
 8012736:	60f8      	str	r0, [r7, #12]
 8012738:	460b      	mov	r3, r1
 801273a:	607a      	str	r2, [r7, #4]
 801273c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801273e:	2300      	movs	r3, #0
 8012740:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8012742:	7afb      	ldrb	r3, [r7, #11]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d16e      	bne.n	8012826 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801274e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012756:	2b03      	cmp	r3, #3
 8012758:	f040 8098 	bne.w	801288c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801275c:	693b      	ldr	r3, [r7, #16]
 801275e:	689a      	ldr	r2, [r3, #8]
 8012760:	693b      	ldr	r3, [r7, #16]
 8012762:	68db      	ldr	r3, [r3, #12]
 8012764:	429a      	cmp	r2, r3
 8012766:	d913      	bls.n	8012790 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012768:	693b      	ldr	r3, [r7, #16]
 801276a:	689a      	ldr	r2, [r3, #8]
 801276c:	693b      	ldr	r3, [r7, #16]
 801276e:	68db      	ldr	r3, [r3, #12]
 8012770:	1ad2      	subs	r2, r2, r3
 8012772:	693b      	ldr	r3, [r7, #16]
 8012774:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012776:	693b      	ldr	r3, [r7, #16]
 8012778:	68da      	ldr	r2, [r3, #12]
 801277a:	693b      	ldr	r3, [r7, #16]
 801277c:	689b      	ldr	r3, [r3, #8]
 801277e:	4293      	cmp	r3, r2
 8012780:	bf28      	it	cs
 8012782:	4613      	movcs	r3, r2
 8012784:	461a      	mov	r2, r3
 8012786:	6879      	ldr	r1, [r7, #4]
 8012788:	68f8      	ldr	r0, [r7, #12]
 801278a:	f001 f922 	bl	80139d2 <USBD_CtlContinueRx>
 801278e:	e07d      	b.n	801288c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012796:	f003 031f 	and.w	r3, r3, #31
 801279a:	2b02      	cmp	r3, #2
 801279c:	d014      	beq.n	80127c8 <USBD_LL_DataOutStage+0x98>
 801279e:	2b02      	cmp	r3, #2
 80127a0:	d81d      	bhi.n	80127de <USBD_LL_DataOutStage+0xae>
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d002      	beq.n	80127ac <USBD_LL_DataOutStage+0x7c>
 80127a6:	2b01      	cmp	r3, #1
 80127a8:	d003      	beq.n	80127b2 <USBD_LL_DataOutStage+0x82>
 80127aa:	e018      	b.n	80127de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80127ac:	2300      	movs	r3, #0
 80127ae:	75bb      	strb	r3, [r7, #22]
            break;
 80127b0:	e018      	b.n	80127e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80127b8:	b2db      	uxtb	r3, r3
 80127ba:	4619      	mov	r1, r3
 80127bc:	68f8      	ldr	r0, [r7, #12]
 80127be:	f000 f9d2 	bl	8012b66 <USBD_CoreFindIF>
 80127c2:	4603      	mov	r3, r0
 80127c4:	75bb      	strb	r3, [r7, #22]
            break;
 80127c6:	e00d      	b.n	80127e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80127ce:	b2db      	uxtb	r3, r3
 80127d0:	4619      	mov	r1, r3
 80127d2:	68f8      	ldr	r0, [r7, #12]
 80127d4:	f000 f9d4 	bl	8012b80 <USBD_CoreFindEP>
 80127d8:	4603      	mov	r3, r0
 80127da:	75bb      	strb	r3, [r7, #22]
            break;
 80127dc:	e002      	b.n	80127e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80127de:	2300      	movs	r3, #0
 80127e0:	75bb      	strb	r3, [r7, #22]
            break;
 80127e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80127e4:	7dbb      	ldrb	r3, [r7, #22]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d119      	bne.n	801281e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127f0:	b2db      	uxtb	r3, r3
 80127f2:	2b03      	cmp	r3, #3
 80127f4:	d113      	bne.n	801281e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80127f6:	7dba      	ldrb	r2, [r7, #22]
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	32ae      	adds	r2, #174	; 0xae
 80127fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012800:	691b      	ldr	r3, [r3, #16]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d00b      	beq.n	801281e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012806:	7dba      	ldrb	r2, [r7, #22]
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801280e:	7dba      	ldrb	r2, [r7, #22]
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	32ae      	adds	r2, #174	; 0xae
 8012814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012818:	691b      	ldr	r3, [r3, #16]
 801281a:	68f8      	ldr	r0, [r7, #12]
 801281c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801281e:	68f8      	ldr	r0, [r7, #12]
 8012820:	f001 f8e8 	bl	80139f4 <USBD_CtlSendStatus>
 8012824:	e032      	b.n	801288c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012826:	7afb      	ldrb	r3, [r7, #11]
 8012828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801282c:	b2db      	uxtb	r3, r3
 801282e:	4619      	mov	r1, r3
 8012830:	68f8      	ldr	r0, [r7, #12]
 8012832:	f000 f9a5 	bl	8012b80 <USBD_CoreFindEP>
 8012836:	4603      	mov	r3, r0
 8012838:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801283a:	7dbb      	ldrb	r3, [r7, #22]
 801283c:	2bff      	cmp	r3, #255	; 0xff
 801283e:	d025      	beq.n	801288c <USBD_LL_DataOutStage+0x15c>
 8012840:	7dbb      	ldrb	r3, [r7, #22]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d122      	bne.n	801288c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801284c:	b2db      	uxtb	r3, r3
 801284e:	2b03      	cmp	r3, #3
 8012850:	d117      	bne.n	8012882 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012852:	7dba      	ldrb	r2, [r7, #22]
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	32ae      	adds	r2, #174	; 0xae
 8012858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801285c:	699b      	ldr	r3, [r3, #24]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d00f      	beq.n	8012882 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8012862:	7dba      	ldrb	r2, [r7, #22]
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801286a:	7dba      	ldrb	r2, [r7, #22]
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	32ae      	adds	r2, #174	; 0xae
 8012870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012874:	699b      	ldr	r3, [r3, #24]
 8012876:	7afa      	ldrb	r2, [r7, #11]
 8012878:	4611      	mov	r1, r2
 801287a:	68f8      	ldr	r0, [r7, #12]
 801287c:	4798      	blx	r3
 801287e:	4603      	mov	r3, r0
 8012880:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8012882:	7dfb      	ldrb	r3, [r7, #23]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d001      	beq.n	801288c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012888:	7dfb      	ldrb	r3, [r7, #23]
 801288a:	e000      	b.n	801288e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801288c:	2300      	movs	r3, #0
}
 801288e:	4618      	mov	r0, r3
 8012890:	3718      	adds	r7, #24
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}

08012896 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012896:	b580      	push	{r7, lr}
 8012898:	b086      	sub	sp, #24
 801289a:	af00      	add	r7, sp, #0
 801289c:	60f8      	str	r0, [r7, #12]
 801289e:	460b      	mov	r3, r1
 80128a0:	607a      	str	r2, [r7, #4]
 80128a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80128a4:	7afb      	ldrb	r3, [r7, #11]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d16f      	bne.n	801298a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	3314      	adds	r3, #20
 80128ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80128b6:	2b02      	cmp	r3, #2
 80128b8:	d15a      	bne.n	8012970 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80128ba:	693b      	ldr	r3, [r7, #16]
 80128bc:	689a      	ldr	r2, [r3, #8]
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	68db      	ldr	r3, [r3, #12]
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d914      	bls.n	80128f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	689a      	ldr	r2, [r3, #8]
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	68db      	ldr	r3, [r3, #12]
 80128ce:	1ad2      	subs	r2, r2, r3
 80128d0:	693b      	ldr	r3, [r7, #16]
 80128d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80128d4:	693b      	ldr	r3, [r7, #16]
 80128d6:	689b      	ldr	r3, [r3, #8]
 80128d8:	461a      	mov	r2, r3
 80128da:	6879      	ldr	r1, [r7, #4]
 80128dc:	68f8      	ldr	r0, [r7, #12]
 80128de:	f001 f84a 	bl	8013976 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80128e2:	2300      	movs	r3, #0
 80128e4:	2200      	movs	r2, #0
 80128e6:	2100      	movs	r1, #0
 80128e8:	68f8      	ldr	r0, [r7, #12]
 80128ea:	f002 faeb 	bl	8014ec4 <USBD_LL_PrepareReceive>
 80128ee:	e03f      	b.n	8012970 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80128f0:	693b      	ldr	r3, [r7, #16]
 80128f2:	68da      	ldr	r2, [r3, #12]
 80128f4:	693b      	ldr	r3, [r7, #16]
 80128f6:	689b      	ldr	r3, [r3, #8]
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d11c      	bne.n	8012936 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80128fc:	693b      	ldr	r3, [r7, #16]
 80128fe:	685a      	ldr	r2, [r3, #4]
 8012900:	693b      	ldr	r3, [r7, #16]
 8012902:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012904:	429a      	cmp	r2, r3
 8012906:	d316      	bcc.n	8012936 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012908:	693b      	ldr	r3, [r7, #16]
 801290a:	685a      	ldr	r2, [r3, #4]
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012912:	429a      	cmp	r2, r3
 8012914:	d20f      	bcs.n	8012936 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012916:	2200      	movs	r2, #0
 8012918:	2100      	movs	r1, #0
 801291a:	68f8      	ldr	r0, [r7, #12]
 801291c:	f001 f82b 	bl	8013976 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	2200      	movs	r2, #0
 8012924:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012928:	2300      	movs	r3, #0
 801292a:	2200      	movs	r2, #0
 801292c:	2100      	movs	r1, #0
 801292e:	68f8      	ldr	r0, [r7, #12]
 8012930:	f002 fac8 	bl	8014ec4 <USBD_LL_PrepareReceive>
 8012934:	e01c      	b.n	8012970 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801293c:	b2db      	uxtb	r3, r3
 801293e:	2b03      	cmp	r3, #3
 8012940:	d10f      	bne.n	8012962 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012948:	68db      	ldr	r3, [r3, #12]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d009      	beq.n	8012962 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	2200      	movs	r2, #0
 8012952:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801295c:	68db      	ldr	r3, [r3, #12]
 801295e:	68f8      	ldr	r0, [r7, #12]
 8012960:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012962:	2180      	movs	r1, #128	; 0x80
 8012964:	68f8      	ldr	r0, [r7, #12]
 8012966:	f002 f9a5 	bl	8014cb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801296a:	68f8      	ldr	r0, [r7, #12]
 801296c:	f001 f855 	bl	8013a1a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012976:	2b00      	cmp	r3, #0
 8012978:	d03a      	beq.n	80129f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801297a:	68f8      	ldr	r0, [r7, #12]
 801297c:	f7ff fe42 	bl	8012604 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	2200      	movs	r2, #0
 8012984:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012988:	e032      	b.n	80129f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801298a:	7afb      	ldrb	r3, [r7, #11]
 801298c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012990:	b2db      	uxtb	r3, r3
 8012992:	4619      	mov	r1, r3
 8012994:	68f8      	ldr	r0, [r7, #12]
 8012996:	f000 f8f3 	bl	8012b80 <USBD_CoreFindEP>
 801299a:	4603      	mov	r3, r0
 801299c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801299e:	7dfb      	ldrb	r3, [r7, #23]
 80129a0:	2bff      	cmp	r3, #255	; 0xff
 80129a2:	d025      	beq.n	80129f0 <USBD_LL_DataInStage+0x15a>
 80129a4:	7dfb      	ldrb	r3, [r7, #23]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d122      	bne.n	80129f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129b0:	b2db      	uxtb	r3, r3
 80129b2:	2b03      	cmp	r3, #3
 80129b4:	d11c      	bne.n	80129f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80129b6:	7dfa      	ldrb	r2, [r7, #23]
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	32ae      	adds	r2, #174	; 0xae
 80129bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129c0:	695b      	ldr	r3, [r3, #20]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d014      	beq.n	80129f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80129c6:	7dfa      	ldrb	r2, [r7, #23]
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80129ce:	7dfa      	ldrb	r2, [r7, #23]
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	32ae      	adds	r2, #174	; 0xae
 80129d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129d8:	695b      	ldr	r3, [r3, #20]
 80129da:	7afa      	ldrb	r2, [r7, #11]
 80129dc:	4611      	mov	r1, r2
 80129de:	68f8      	ldr	r0, [r7, #12]
 80129e0:	4798      	blx	r3
 80129e2:	4603      	mov	r3, r0
 80129e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80129e6:	7dbb      	ldrb	r3, [r7, #22]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d001      	beq.n	80129f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80129ec:	7dbb      	ldrb	r3, [r7, #22]
 80129ee:	e000      	b.n	80129f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80129f0:	2300      	movs	r3, #0
}
 80129f2:	4618      	mov	r0, r3
 80129f4:	3718      	adds	r7, #24
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bd80      	pop	{r7, pc}

080129fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80129fa:	b580      	push	{r7, lr}
 80129fc:	b084      	sub	sp, #16
 80129fe:	af00      	add	r7, sp, #0
 8012a00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a02:	2300      	movs	r3, #0
 8012a04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2201      	movs	r2, #1
 8012a0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2200      	movs	r2, #0
 8012a12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2200      	movs	r2, #0
 8012a1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2200      	movs	r2, #0
 8012a28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d014      	beq.n	8012a60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012a3c:	685b      	ldr	r3, [r3, #4]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d00e      	beq.n	8012a60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	687a      	ldr	r2, [r7, #4]
 8012a4c:	6852      	ldr	r2, [r2, #4]
 8012a4e:	b2d2      	uxtb	r2, r2
 8012a50:	4611      	mov	r1, r2
 8012a52:	6878      	ldr	r0, [r7, #4]
 8012a54:	4798      	blx	r3
 8012a56:	4603      	mov	r3, r0
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d001      	beq.n	8012a60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012a5c:	2303      	movs	r3, #3
 8012a5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012a60:	2340      	movs	r3, #64	; 0x40
 8012a62:	2200      	movs	r2, #0
 8012a64:	2100      	movs	r1, #0
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f002 f8b0 	bl	8014bcc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2201      	movs	r2, #1
 8012a70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2240      	movs	r2, #64	; 0x40
 8012a78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012a7c:	2340      	movs	r3, #64	; 0x40
 8012a7e:	2200      	movs	r2, #0
 8012a80:	2180      	movs	r1, #128	; 0x80
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f002 f8a2 	bl	8014bcc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2201      	movs	r2, #1
 8012a8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	2240      	movs	r2, #64	; 0x40
 8012a92:	621a      	str	r2, [r3, #32]

  return ret;
 8012a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a96:	4618      	mov	r0, r3
 8012a98:	3710      	adds	r7, #16
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}

08012a9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012a9e:	b480      	push	{r7}
 8012aa0:	b083      	sub	sp, #12
 8012aa2:	af00      	add	r7, sp, #0
 8012aa4:	6078      	str	r0, [r7, #4]
 8012aa6:	460b      	mov	r3, r1
 8012aa8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	78fa      	ldrb	r2, [r7, #3]
 8012aae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012ab0:	2300      	movs	r3, #0
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	370c      	adds	r7, #12
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abc:	4770      	bx	lr

08012abe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012abe:	b480      	push	{r7}
 8012ac0:	b083      	sub	sp, #12
 8012ac2:	af00      	add	r7, sp, #0
 8012ac4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012acc:	b2db      	uxtb	r3, r3
 8012ace:	2b04      	cmp	r3, #4
 8012ad0:	d006      	beq.n	8012ae0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ad8:	b2da      	uxtb	r2, r3
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	2204      	movs	r2, #4
 8012ae4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012ae8:	2300      	movs	r3, #0
}
 8012aea:	4618      	mov	r0, r3
 8012aec:	370c      	adds	r7, #12
 8012aee:	46bd      	mov	sp, r7
 8012af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af4:	4770      	bx	lr

08012af6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012af6:	b480      	push	{r7}
 8012af8:	b083      	sub	sp, #12
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b04:	b2db      	uxtb	r3, r3
 8012b06:	2b04      	cmp	r3, #4
 8012b08:	d106      	bne.n	8012b18 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8012b10:	b2da      	uxtb	r2, r3
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012b18:	2300      	movs	r3, #0
}
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	370c      	adds	r7, #12
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b24:	4770      	bx	lr

08012b26 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012b26:	b580      	push	{r7, lr}
 8012b28:	b082      	sub	sp, #8
 8012b2a:	af00      	add	r7, sp, #0
 8012b2c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b34:	b2db      	uxtb	r3, r3
 8012b36:	2b03      	cmp	r3, #3
 8012b38:	d110      	bne.n	8012b5c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d00b      	beq.n	8012b5c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b4a:	69db      	ldr	r3, [r3, #28]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d005      	beq.n	8012b5c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b56:	69db      	ldr	r3, [r3, #28]
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012b5c:	2300      	movs	r3, #0
}
 8012b5e:	4618      	mov	r0, r3
 8012b60:	3708      	adds	r7, #8
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd80      	pop	{r7, pc}

08012b66 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012b66:	b480      	push	{r7}
 8012b68:	b083      	sub	sp, #12
 8012b6a:	af00      	add	r7, sp, #0
 8012b6c:	6078      	str	r0, [r7, #4]
 8012b6e:	460b      	mov	r3, r1
 8012b70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012b72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012b74:	4618      	mov	r0, r3
 8012b76:	370c      	adds	r7, #12
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7e:	4770      	bx	lr

08012b80 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012b80:	b480      	push	{r7}
 8012b82:	b083      	sub	sp, #12
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
 8012b88:	460b      	mov	r3, r1
 8012b8a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012b8c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	370c      	adds	r7, #12
 8012b92:	46bd      	mov	sp, r7
 8012b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b98:	4770      	bx	lr

08012b9a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8012b9a:	b580      	push	{r7, lr}
 8012b9c:	b086      	sub	sp, #24
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	6078      	str	r0, [r7, #4]
 8012ba2:	460b      	mov	r3, r1
 8012ba4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8012bae:	2300      	movs	r3, #0
 8012bb0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	885b      	ldrh	r3, [r3, #2]
 8012bb6:	b29a      	uxth	r2, r3
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	b29b      	uxth	r3, r3
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	d920      	bls.n	8012c04 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	781b      	ldrb	r3, [r3, #0]
 8012bc6:	b29b      	uxth	r3, r3
 8012bc8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8012bca:	e013      	b.n	8012bf4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8012bcc:	f107 030a 	add.w	r3, r7, #10
 8012bd0:	4619      	mov	r1, r3
 8012bd2:	6978      	ldr	r0, [r7, #20]
 8012bd4:	f000 f81b 	bl	8012c0e <USBD_GetNextDesc>
 8012bd8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8012bda:	697b      	ldr	r3, [r7, #20]
 8012bdc:	785b      	ldrb	r3, [r3, #1]
 8012bde:	2b05      	cmp	r3, #5
 8012be0:	d108      	bne.n	8012bf4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8012be6:	693b      	ldr	r3, [r7, #16]
 8012be8:	789b      	ldrb	r3, [r3, #2]
 8012bea:	78fa      	ldrb	r2, [r7, #3]
 8012bec:	429a      	cmp	r2, r3
 8012bee:	d008      	beq.n	8012c02 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	885b      	ldrh	r3, [r3, #2]
 8012bf8:	b29a      	uxth	r2, r3
 8012bfa:	897b      	ldrh	r3, [r7, #10]
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d8e5      	bhi.n	8012bcc <USBD_GetEpDesc+0x32>
 8012c00:	e000      	b.n	8012c04 <USBD_GetEpDesc+0x6a>
          break;
 8012c02:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8012c04:	693b      	ldr	r3, [r7, #16]
}
 8012c06:	4618      	mov	r0, r3
 8012c08:	3718      	adds	r7, #24
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}

08012c0e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8012c0e:	b480      	push	{r7}
 8012c10:	b085      	sub	sp, #20
 8012c12:	af00      	add	r7, sp, #0
 8012c14:	6078      	str	r0, [r7, #4]
 8012c16:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	881a      	ldrh	r2, [r3, #0]
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	b29b      	uxth	r3, r3
 8012c26:	4413      	add	r3, r2
 8012c28:	b29a      	uxth	r2, r3
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	781b      	ldrb	r3, [r3, #0]
 8012c32:	461a      	mov	r2, r3
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	4413      	add	r3, r2
 8012c38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8012c3a:	68fb      	ldr	r3, [r7, #12]
}
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	3714      	adds	r7, #20
 8012c40:	46bd      	mov	sp, r7
 8012c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c46:	4770      	bx	lr

08012c48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012c48:	b480      	push	{r7}
 8012c4a:	b087      	sub	sp, #28
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	781b      	ldrb	r3, [r3, #0]
 8012c58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	3301      	adds	r3, #1
 8012c5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012c66:	8a3b      	ldrh	r3, [r7, #16]
 8012c68:	021b      	lsls	r3, r3, #8
 8012c6a:	b21a      	sxth	r2, r3
 8012c6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012c70:	4313      	orrs	r3, r2
 8012c72:	b21b      	sxth	r3, r3
 8012c74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012c76:	89fb      	ldrh	r3, [r7, #14]
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	371c      	adds	r7, #28
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c82:	4770      	bx	lr

08012c84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b084      	sub	sp, #16
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
 8012c8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012c8e:	2300      	movs	r3, #0
 8012c90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	781b      	ldrb	r3, [r3, #0]
 8012c96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012c9a:	2b40      	cmp	r3, #64	; 0x40
 8012c9c:	d005      	beq.n	8012caa <USBD_StdDevReq+0x26>
 8012c9e:	2b40      	cmp	r3, #64	; 0x40
 8012ca0:	d857      	bhi.n	8012d52 <USBD_StdDevReq+0xce>
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d00f      	beq.n	8012cc6 <USBD_StdDevReq+0x42>
 8012ca6:	2b20      	cmp	r3, #32
 8012ca8:	d153      	bne.n	8012d52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	32ae      	adds	r2, #174	; 0xae
 8012cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cb8:	689b      	ldr	r3, [r3, #8]
 8012cba:	6839      	ldr	r1, [r7, #0]
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	4798      	blx	r3
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8012cc4:	e04a      	b.n	8012d5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	785b      	ldrb	r3, [r3, #1]
 8012cca:	2b09      	cmp	r3, #9
 8012ccc:	d83b      	bhi.n	8012d46 <USBD_StdDevReq+0xc2>
 8012cce:	a201      	add	r2, pc, #4	; (adr r2, 8012cd4 <USBD_StdDevReq+0x50>)
 8012cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cd4:	08012d29 	.word	0x08012d29
 8012cd8:	08012d3d 	.word	0x08012d3d
 8012cdc:	08012d47 	.word	0x08012d47
 8012ce0:	08012d33 	.word	0x08012d33
 8012ce4:	08012d47 	.word	0x08012d47
 8012ce8:	08012d07 	.word	0x08012d07
 8012cec:	08012cfd 	.word	0x08012cfd
 8012cf0:	08012d47 	.word	0x08012d47
 8012cf4:	08012d1f 	.word	0x08012d1f
 8012cf8:	08012d11 	.word	0x08012d11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012cfc:	6839      	ldr	r1, [r7, #0]
 8012cfe:	6878      	ldr	r0, [r7, #4]
 8012d00:	f000 fa3c 	bl	801317c <USBD_GetDescriptor>
          break;
 8012d04:	e024      	b.n	8012d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012d06:	6839      	ldr	r1, [r7, #0]
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f000 fbcb 	bl	80134a4 <USBD_SetAddress>
          break;
 8012d0e:	e01f      	b.n	8012d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012d10:	6839      	ldr	r1, [r7, #0]
 8012d12:	6878      	ldr	r0, [r7, #4]
 8012d14:	f000 fc0a 	bl	801352c <USBD_SetConfig>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	73fb      	strb	r3, [r7, #15]
          break;
 8012d1c:	e018      	b.n	8012d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012d1e:	6839      	ldr	r1, [r7, #0]
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	f000 fcad 	bl	8013680 <USBD_GetConfig>
          break;
 8012d26:	e013      	b.n	8012d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012d28:	6839      	ldr	r1, [r7, #0]
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f000 fcde 	bl	80136ec <USBD_GetStatus>
          break;
 8012d30:	e00e      	b.n	8012d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012d32:	6839      	ldr	r1, [r7, #0]
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f000 fd0d 	bl	8013754 <USBD_SetFeature>
          break;
 8012d3a:	e009      	b.n	8012d50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012d3c:	6839      	ldr	r1, [r7, #0]
 8012d3e:	6878      	ldr	r0, [r7, #4]
 8012d40:	f000 fd31 	bl	80137a6 <USBD_ClrFeature>
          break;
 8012d44:	e004      	b.n	8012d50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8012d46:	6839      	ldr	r1, [r7, #0]
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f000 fd88 	bl	801385e <USBD_CtlError>
          break;
 8012d4e:	bf00      	nop
      }
      break;
 8012d50:	e004      	b.n	8012d5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8012d52:	6839      	ldr	r1, [r7, #0]
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f000 fd82 	bl	801385e <USBD_CtlError>
      break;
 8012d5a:	bf00      	nop
  }

  return ret;
 8012d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3710      	adds	r7, #16
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}
 8012d66:	bf00      	nop

08012d68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b084      	sub	sp, #16
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
 8012d70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012d72:	2300      	movs	r3, #0
 8012d74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	781b      	ldrb	r3, [r3, #0]
 8012d7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012d7e:	2b40      	cmp	r3, #64	; 0x40
 8012d80:	d005      	beq.n	8012d8e <USBD_StdItfReq+0x26>
 8012d82:	2b40      	cmp	r3, #64	; 0x40
 8012d84:	d852      	bhi.n	8012e2c <USBD_StdItfReq+0xc4>
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d001      	beq.n	8012d8e <USBD_StdItfReq+0x26>
 8012d8a:	2b20      	cmp	r3, #32
 8012d8c:	d14e      	bne.n	8012e2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d94:	b2db      	uxtb	r3, r3
 8012d96:	3b01      	subs	r3, #1
 8012d98:	2b02      	cmp	r3, #2
 8012d9a:	d840      	bhi.n	8012e1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012d9c:	683b      	ldr	r3, [r7, #0]
 8012d9e:	889b      	ldrh	r3, [r3, #4]
 8012da0:	b2db      	uxtb	r3, r3
 8012da2:	2b01      	cmp	r3, #1
 8012da4:	d836      	bhi.n	8012e14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8012da6:	683b      	ldr	r3, [r7, #0]
 8012da8:	889b      	ldrh	r3, [r3, #4]
 8012daa:	b2db      	uxtb	r3, r3
 8012dac:	4619      	mov	r1, r3
 8012dae:	6878      	ldr	r0, [r7, #4]
 8012db0:	f7ff fed9 	bl	8012b66 <USBD_CoreFindIF>
 8012db4:	4603      	mov	r3, r0
 8012db6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012db8:	7bbb      	ldrb	r3, [r7, #14]
 8012dba:	2bff      	cmp	r3, #255	; 0xff
 8012dbc:	d01d      	beq.n	8012dfa <USBD_StdItfReq+0x92>
 8012dbe:	7bbb      	ldrb	r3, [r7, #14]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d11a      	bne.n	8012dfa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012dc4:	7bba      	ldrb	r2, [r7, #14]
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	32ae      	adds	r2, #174	; 0xae
 8012dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dce:	689b      	ldr	r3, [r3, #8]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d00f      	beq.n	8012df4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8012dd4:	7bba      	ldrb	r2, [r7, #14]
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012ddc:	7bba      	ldrb	r2, [r7, #14]
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	32ae      	adds	r2, #174	; 0xae
 8012de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012de6:	689b      	ldr	r3, [r3, #8]
 8012de8:	6839      	ldr	r1, [r7, #0]
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	4798      	blx	r3
 8012dee:	4603      	mov	r3, r0
 8012df0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012df2:	e004      	b.n	8012dfe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012df4:	2303      	movs	r3, #3
 8012df6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012df8:	e001      	b.n	8012dfe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8012dfa:	2303      	movs	r3, #3
 8012dfc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	88db      	ldrh	r3, [r3, #6]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d110      	bne.n	8012e28 <USBD_StdItfReq+0xc0>
 8012e06:	7bfb      	ldrb	r3, [r7, #15]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d10d      	bne.n	8012e28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012e0c:	6878      	ldr	r0, [r7, #4]
 8012e0e:	f000 fdf1 	bl	80139f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012e12:	e009      	b.n	8012e28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8012e14:	6839      	ldr	r1, [r7, #0]
 8012e16:	6878      	ldr	r0, [r7, #4]
 8012e18:	f000 fd21 	bl	801385e <USBD_CtlError>
          break;
 8012e1c:	e004      	b.n	8012e28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8012e1e:	6839      	ldr	r1, [r7, #0]
 8012e20:	6878      	ldr	r0, [r7, #4]
 8012e22:	f000 fd1c 	bl	801385e <USBD_CtlError>
          break;
 8012e26:	e000      	b.n	8012e2a <USBD_StdItfReq+0xc2>
          break;
 8012e28:	bf00      	nop
      }
      break;
 8012e2a:	e004      	b.n	8012e36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8012e2c:	6839      	ldr	r1, [r7, #0]
 8012e2e:	6878      	ldr	r0, [r7, #4]
 8012e30:	f000 fd15 	bl	801385e <USBD_CtlError>
      break;
 8012e34:	bf00      	nop
  }

  return ret;
 8012e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e38:	4618      	mov	r0, r3
 8012e3a:	3710      	adds	r7, #16
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}

08012e40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	889b      	ldrh	r3, [r3, #4]
 8012e52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012e54:	683b      	ldr	r3, [r7, #0]
 8012e56:	781b      	ldrb	r3, [r3, #0]
 8012e58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012e5c:	2b40      	cmp	r3, #64	; 0x40
 8012e5e:	d007      	beq.n	8012e70 <USBD_StdEPReq+0x30>
 8012e60:	2b40      	cmp	r3, #64	; 0x40
 8012e62:	f200 817f 	bhi.w	8013164 <USBD_StdEPReq+0x324>
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d02a      	beq.n	8012ec0 <USBD_StdEPReq+0x80>
 8012e6a:	2b20      	cmp	r3, #32
 8012e6c:	f040 817a 	bne.w	8013164 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012e70:	7bbb      	ldrb	r3, [r7, #14]
 8012e72:	4619      	mov	r1, r3
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	f7ff fe83 	bl	8012b80 <USBD_CoreFindEP>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012e7e:	7b7b      	ldrb	r3, [r7, #13]
 8012e80:	2bff      	cmp	r3, #255	; 0xff
 8012e82:	f000 8174 	beq.w	801316e <USBD_StdEPReq+0x32e>
 8012e86:	7b7b      	ldrb	r3, [r7, #13]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	f040 8170 	bne.w	801316e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8012e8e:	7b7a      	ldrb	r2, [r7, #13]
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012e96:	7b7a      	ldrb	r2, [r7, #13]
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	32ae      	adds	r2, #174	; 0xae
 8012e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ea0:	689b      	ldr	r3, [r3, #8]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	f000 8163 	beq.w	801316e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012ea8:	7b7a      	ldrb	r2, [r7, #13]
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	32ae      	adds	r2, #174	; 0xae
 8012eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012eb2:	689b      	ldr	r3, [r3, #8]
 8012eb4:	6839      	ldr	r1, [r7, #0]
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	4798      	blx	r3
 8012eba:	4603      	mov	r3, r0
 8012ebc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012ebe:	e156      	b.n	801316e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	785b      	ldrb	r3, [r3, #1]
 8012ec4:	2b03      	cmp	r3, #3
 8012ec6:	d008      	beq.n	8012eda <USBD_StdEPReq+0x9a>
 8012ec8:	2b03      	cmp	r3, #3
 8012eca:	f300 8145 	bgt.w	8013158 <USBD_StdEPReq+0x318>
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	f000 809b 	beq.w	801300a <USBD_StdEPReq+0x1ca>
 8012ed4:	2b01      	cmp	r3, #1
 8012ed6:	d03c      	beq.n	8012f52 <USBD_StdEPReq+0x112>
 8012ed8:	e13e      	b.n	8013158 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ee0:	b2db      	uxtb	r3, r3
 8012ee2:	2b02      	cmp	r3, #2
 8012ee4:	d002      	beq.n	8012eec <USBD_StdEPReq+0xac>
 8012ee6:	2b03      	cmp	r3, #3
 8012ee8:	d016      	beq.n	8012f18 <USBD_StdEPReq+0xd8>
 8012eea:	e02c      	b.n	8012f46 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012eec:	7bbb      	ldrb	r3, [r7, #14]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d00d      	beq.n	8012f0e <USBD_StdEPReq+0xce>
 8012ef2:	7bbb      	ldrb	r3, [r7, #14]
 8012ef4:	2b80      	cmp	r3, #128	; 0x80
 8012ef6:	d00a      	beq.n	8012f0e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012ef8:	7bbb      	ldrb	r3, [r7, #14]
 8012efa:	4619      	mov	r1, r3
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	f001 fed9 	bl	8014cb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012f02:	2180      	movs	r1, #128	; 0x80
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f001 fed5 	bl	8014cb4 <USBD_LL_StallEP>
 8012f0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012f0c:	e020      	b.n	8012f50 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8012f0e:	6839      	ldr	r1, [r7, #0]
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f000 fca4 	bl	801385e <USBD_CtlError>
              break;
 8012f16:	e01b      	b.n	8012f50 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	885b      	ldrh	r3, [r3, #2]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d10e      	bne.n	8012f3e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012f20:	7bbb      	ldrb	r3, [r7, #14]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d00b      	beq.n	8012f3e <USBD_StdEPReq+0xfe>
 8012f26:	7bbb      	ldrb	r3, [r7, #14]
 8012f28:	2b80      	cmp	r3, #128	; 0x80
 8012f2a:	d008      	beq.n	8012f3e <USBD_StdEPReq+0xfe>
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	88db      	ldrh	r3, [r3, #6]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d104      	bne.n	8012f3e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012f34:	7bbb      	ldrb	r3, [r7, #14]
 8012f36:	4619      	mov	r1, r3
 8012f38:	6878      	ldr	r0, [r7, #4]
 8012f3a:	f001 febb 	bl	8014cb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f000 fd58 	bl	80139f4 <USBD_CtlSendStatus>

              break;
 8012f44:	e004      	b.n	8012f50 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8012f46:	6839      	ldr	r1, [r7, #0]
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f000 fc88 	bl	801385e <USBD_CtlError>
              break;
 8012f4e:	bf00      	nop
          }
          break;
 8012f50:	e107      	b.n	8013162 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f58:	b2db      	uxtb	r3, r3
 8012f5a:	2b02      	cmp	r3, #2
 8012f5c:	d002      	beq.n	8012f64 <USBD_StdEPReq+0x124>
 8012f5e:	2b03      	cmp	r3, #3
 8012f60:	d016      	beq.n	8012f90 <USBD_StdEPReq+0x150>
 8012f62:	e04b      	b.n	8012ffc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012f64:	7bbb      	ldrb	r3, [r7, #14]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d00d      	beq.n	8012f86 <USBD_StdEPReq+0x146>
 8012f6a:	7bbb      	ldrb	r3, [r7, #14]
 8012f6c:	2b80      	cmp	r3, #128	; 0x80
 8012f6e:	d00a      	beq.n	8012f86 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012f70:	7bbb      	ldrb	r3, [r7, #14]
 8012f72:	4619      	mov	r1, r3
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f001 fe9d 	bl	8014cb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012f7a:	2180      	movs	r1, #128	; 0x80
 8012f7c:	6878      	ldr	r0, [r7, #4]
 8012f7e:	f001 fe99 	bl	8014cb4 <USBD_LL_StallEP>
 8012f82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012f84:	e040      	b.n	8013008 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012f86:	6839      	ldr	r1, [r7, #0]
 8012f88:	6878      	ldr	r0, [r7, #4]
 8012f8a:	f000 fc68 	bl	801385e <USBD_CtlError>
              break;
 8012f8e:	e03b      	b.n	8013008 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	885b      	ldrh	r3, [r3, #2]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d136      	bne.n	8013006 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012f98:	7bbb      	ldrb	r3, [r7, #14]
 8012f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d004      	beq.n	8012fac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012fa2:	7bbb      	ldrb	r3, [r7, #14]
 8012fa4:	4619      	mov	r1, r3
 8012fa6:	6878      	ldr	r0, [r7, #4]
 8012fa8:	f001 feba 	bl	8014d20 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	f000 fd21 	bl	80139f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012fb2:	7bbb      	ldrb	r3, [r7, #14]
 8012fb4:	4619      	mov	r1, r3
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f7ff fde2 	bl	8012b80 <USBD_CoreFindEP>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012fc0:	7b7b      	ldrb	r3, [r7, #13]
 8012fc2:	2bff      	cmp	r3, #255	; 0xff
 8012fc4:	d01f      	beq.n	8013006 <USBD_StdEPReq+0x1c6>
 8012fc6:	7b7b      	ldrb	r3, [r7, #13]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d11c      	bne.n	8013006 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8012fcc:	7b7a      	ldrb	r2, [r7, #13]
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012fd4:	7b7a      	ldrb	r2, [r7, #13]
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	32ae      	adds	r2, #174	; 0xae
 8012fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fde:	689b      	ldr	r3, [r3, #8]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d010      	beq.n	8013006 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012fe4:	7b7a      	ldrb	r2, [r7, #13]
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	32ae      	adds	r2, #174	; 0xae
 8012fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fee:	689b      	ldr	r3, [r3, #8]
 8012ff0:	6839      	ldr	r1, [r7, #0]
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	4798      	blx	r3
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8012ffa:	e004      	b.n	8013006 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012ffc:	6839      	ldr	r1, [r7, #0]
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f000 fc2d 	bl	801385e <USBD_CtlError>
              break;
 8013004:	e000      	b.n	8013008 <USBD_StdEPReq+0x1c8>
              break;
 8013006:	bf00      	nop
          }
          break;
 8013008:	e0ab      	b.n	8013162 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013010:	b2db      	uxtb	r3, r3
 8013012:	2b02      	cmp	r3, #2
 8013014:	d002      	beq.n	801301c <USBD_StdEPReq+0x1dc>
 8013016:	2b03      	cmp	r3, #3
 8013018:	d032      	beq.n	8013080 <USBD_StdEPReq+0x240>
 801301a:	e097      	b.n	801314c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801301c:	7bbb      	ldrb	r3, [r7, #14]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d007      	beq.n	8013032 <USBD_StdEPReq+0x1f2>
 8013022:	7bbb      	ldrb	r3, [r7, #14]
 8013024:	2b80      	cmp	r3, #128	; 0x80
 8013026:	d004      	beq.n	8013032 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013028:	6839      	ldr	r1, [r7, #0]
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f000 fc17 	bl	801385e <USBD_CtlError>
                break;
 8013030:	e091      	b.n	8013156 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013036:	2b00      	cmp	r3, #0
 8013038:	da0b      	bge.n	8013052 <USBD_StdEPReq+0x212>
 801303a:	7bbb      	ldrb	r3, [r7, #14]
 801303c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013040:	4613      	mov	r3, r2
 8013042:	009b      	lsls	r3, r3, #2
 8013044:	4413      	add	r3, r2
 8013046:	009b      	lsls	r3, r3, #2
 8013048:	3310      	adds	r3, #16
 801304a:	687a      	ldr	r2, [r7, #4]
 801304c:	4413      	add	r3, r2
 801304e:	3304      	adds	r3, #4
 8013050:	e00b      	b.n	801306a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013052:	7bbb      	ldrb	r3, [r7, #14]
 8013054:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013058:	4613      	mov	r3, r2
 801305a:	009b      	lsls	r3, r3, #2
 801305c:	4413      	add	r3, r2
 801305e:	009b      	lsls	r3, r3, #2
 8013060:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013064:	687a      	ldr	r2, [r7, #4]
 8013066:	4413      	add	r3, r2
 8013068:	3304      	adds	r3, #4
 801306a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	2200      	movs	r2, #0
 8013070:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	2202      	movs	r2, #2
 8013076:	4619      	mov	r1, r3
 8013078:	6878      	ldr	r0, [r7, #4]
 801307a:	f000 fc61 	bl	8013940 <USBD_CtlSendData>
              break;
 801307e:	e06a      	b.n	8013156 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013084:	2b00      	cmp	r3, #0
 8013086:	da11      	bge.n	80130ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013088:	7bbb      	ldrb	r3, [r7, #14]
 801308a:	f003 020f 	and.w	r2, r3, #15
 801308e:	6879      	ldr	r1, [r7, #4]
 8013090:	4613      	mov	r3, r2
 8013092:	009b      	lsls	r3, r3, #2
 8013094:	4413      	add	r3, r2
 8013096:	009b      	lsls	r3, r3, #2
 8013098:	440b      	add	r3, r1
 801309a:	3324      	adds	r3, #36	; 0x24
 801309c:	881b      	ldrh	r3, [r3, #0]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d117      	bne.n	80130d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80130a2:	6839      	ldr	r1, [r7, #0]
 80130a4:	6878      	ldr	r0, [r7, #4]
 80130a6:	f000 fbda 	bl	801385e <USBD_CtlError>
                  break;
 80130aa:	e054      	b.n	8013156 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80130ac:	7bbb      	ldrb	r3, [r7, #14]
 80130ae:	f003 020f 	and.w	r2, r3, #15
 80130b2:	6879      	ldr	r1, [r7, #4]
 80130b4:	4613      	mov	r3, r2
 80130b6:	009b      	lsls	r3, r3, #2
 80130b8:	4413      	add	r3, r2
 80130ba:	009b      	lsls	r3, r3, #2
 80130bc:	440b      	add	r3, r1
 80130be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80130c2:	881b      	ldrh	r3, [r3, #0]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d104      	bne.n	80130d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80130c8:	6839      	ldr	r1, [r7, #0]
 80130ca:	6878      	ldr	r0, [r7, #4]
 80130cc:	f000 fbc7 	bl	801385e <USBD_CtlError>
                  break;
 80130d0:	e041      	b.n	8013156 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80130d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	da0b      	bge.n	80130f2 <USBD_StdEPReq+0x2b2>
 80130da:	7bbb      	ldrb	r3, [r7, #14]
 80130dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80130e0:	4613      	mov	r3, r2
 80130e2:	009b      	lsls	r3, r3, #2
 80130e4:	4413      	add	r3, r2
 80130e6:	009b      	lsls	r3, r3, #2
 80130e8:	3310      	adds	r3, #16
 80130ea:	687a      	ldr	r2, [r7, #4]
 80130ec:	4413      	add	r3, r2
 80130ee:	3304      	adds	r3, #4
 80130f0:	e00b      	b.n	801310a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80130f2:	7bbb      	ldrb	r3, [r7, #14]
 80130f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80130f8:	4613      	mov	r3, r2
 80130fa:	009b      	lsls	r3, r3, #2
 80130fc:	4413      	add	r3, r2
 80130fe:	009b      	lsls	r3, r3, #2
 8013100:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013104:	687a      	ldr	r2, [r7, #4]
 8013106:	4413      	add	r3, r2
 8013108:	3304      	adds	r3, #4
 801310a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801310c:	7bbb      	ldrb	r3, [r7, #14]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d002      	beq.n	8013118 <USBD_StdEPReq+0x2d8>
 8013112:	7bbb      	ldrb	r3, [r7, #14]
 8013114:	2b80      	cmp	r3, #128	; 0x80
 8013116:	d103      	bne.n	8013120 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013118:	68bb      	ldr	r3, [r7, #8]
 801311a:	2200      	movs	r2, #0
 801311c:	601a      	str	r2, [r3, #0]
 801311e:	e00e      	b.n	801313e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013120:	7bbb      	ldrb	r3, [r7, #14]
 8013122:	4619      	mov	r1, r3
 8013124:	6878      	ldr	r0, [r7, #4]
 8013126:	f001 fe31 	bl	8014d8c <USBD_LL_IsStallEP>
 801312a:	4603      	mov	r3, r0
 801312c:	2b00      	cmp	r3, #0
 801312e:	d003      	beq.n	8013138 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013130:	68bb      	ldr	r3, [r7, #8]
 8013132:	2201      	movs	r2, #1
 8013134:	601a      	str	r2, [r3, #0]
 8013136:	e002      	b.n	801313e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013138:	68bb      	ldr	r3, [r7, #8]
 801313a:	2200      	movs	r2, #0
 801313c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	2202      	movs	r2, #2
 8013142:	4619      	mov	r1, r3
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f000 fbfb 	bl	8013940 <USBD_CtlSendData>
              break;
 801314a:	e004      	b.n	8013156 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801314c:	6839      	ldr	r1, [r7, #0]
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f000 fb85 	bl	801385e <USBD_CtlError>
              break;
 8013154:	bf00      	nop
          }
          break;
 8013156:	e004      	b.n	8013162 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013158:	6839      	ldr	r1, [r7, #0]
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f000 fb7f 	bl	801385e <USBD_CtlError>
          break;
 8013160:	bf00      	nop
      }
      break;
 8013162:	e005      	b.n	8013170 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013164:	6839      	ldr	r1, [r7, #0]
 8013166:	6878      	ldr	r0, [r7, #4]
 8013168:	f000 fb79 	bl	801385e <USBD_CtlError>
      break;
 801316c:	e000      	b.n	8013170 <USBD_StdEPReq+0x330>
      break;
 801316e:	bf00      	nop
  }

  return ret;
 8013170:	7bfb      	ldrb	r3, [r7, #15]
}
 8013172:	4618      	mov	r0, r3
 8013174:	3710      	adds	r7, #16
 8013176:	46bd      	mov	sp, r7
 8013178:	bd80      	pop	{r7, pc}
	...

0801317c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b084      	sub	sp, #16
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
 8013184:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013186:	2300      	movs	r3, #0
 8013188:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801318a:	2300      	movs	r3, #0
 801318c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801318e:	2300      	movs	r3, #0
 8013190:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	885b      	ldrh	r3, [r3, #2]
 8013196:	0a1b      	lsrs	r3, r3, #8
 8013198:	b29b      	uxth	r3, r3
 801319a:	3b01      	subs	r3, #1
 801319c:	2b0e      	cmp	r3, #14
 801319e:	f200 8152 	bhi.w	8013446 <USBD_GetDescriptor+0x2ca>
 80131a2:	a201      	add	r2, pc, #4	; (adr r2, 80131a8 <USBD_GetDescriptor+0x2c>)
 80131a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131a8:	08013219 	.word	0x08013219
 80131ac:	08013231 	.word	0x08013231
 80131b0:	08013271 	.word	0x08013271
 80131b4:	08013447 	.word	0x08013447
 80131b8:	08013447 	.word	0x08013447
 80131bc:	080133e7 	.word	0x080133e7
 80131c0:	08013413 	.word	0x08013413
 80131c4:	08013447 	.word	0x08013447
 80131c8:	08013447 	.word	0x08013447
 80131cc:	08013447 	.word	0x08013447
 80131d0:	08013447 	.word	0x08013447
 80131d4:	08013447 	.word	0x08013447
 80131d8:	08013447 	.word	0x08013447
 80131dc:	08013447 	.word	0x08013447
 80131e0:	080131e5 	.word	0x080131e5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80131ea:	69db      	ldr	r3, [r3, #28]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d00b      	beq.n	8013208 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80131f6:	69db      	ldr	r3, [r3, #28]
 80131f8:	687a      	ldr	r2, [r7, #4]
 80131fa:	7c12      	ldrb	r2, [r2, #16]
 80131fc:	f107 0108 	add.w	r1, r7, #8
 8013200:	4610      	mov	r0, r2
 8013202:	4798      	blx	r3
 8013204:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013206:	e126      	b.n	8013456 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013208:	6839      	ldr	r1, [r7, #0]
 801320a:	6878      	ldr	r0, [r7, #4]
 801320c:	f000 fb27 	bl	801385e <USBD_CtlError>
        err++;
 8013210:	7afb      	ldrb	r3, [r7, #11]
 8013212:	3301      	adds	r3, #1
 8013214:	72fb      	strb	r3, [r7, #11]
      break;
 8013216:	e11e      	b.n	8013456 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	687a      	ldr	r2, [r7, #4]
 8013222:	7c12      	ldrb	r2, [r2, #16]
 8013224:	f107 0108 	add.w	r1, r7, #8
 8013228:	4610      	mov	r0, r2
 801322a:	4798      	blx	r3
 801322c:	60f8      	str	r0, [r7, #12]
      break;
 801322e:	e112      	b.n	8013456 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	7c1b      	ldrb	r3, [r3, #16]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d10d      	bne.n	8013254 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013240:	f107 0208 	add.w	r2, r7, #8
 8013244:	4610      	mov	r0, r2
 8013246:	4798      	blx	r3
 8013248:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	3301      	adds	r3, #1
 801324e:	2202      	movs	r2, #2
 8013250:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013252:	e100      	b.n	8013456 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801325c:	f107 0208 	add.w	r2, r7, #8
 8013260:	4610      	mov	r0, r2
 8013262:	4798      	blx	r3
 8013264:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	3301      	adds	r3, #1
 801326a:	2202      	movs	r2, #2
 801326c:	701a      	strb	r2, [r3, #0]
      break;
 801326e:	e0f2      	b.n	8013456 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	885b      	ldrh	r3, [r3, #2]
 8013274:	b2db      	uxtb	r3, r3
 8013276:	2b05      	cmp	r3, #5
 8013278:	f200 80ac 	bhi.w	80133d4 <USBD_GetDescriptor+0x258>
 801327c:	a201      	add	r2, pc, #4	; (adr r2, 8013284 <USBD_GetDescriptor+0x108>)
 801327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013282:	bf00      	nop
 8013284:	0801329d 	.word	0x0801329d
 8013288:	080132d1 	.word	0x080132d1
 801328c:	08013305 	.word	0x08013305
 8013290:	08013339 	.word	0x08013339
 8013294:	0801336d 	.word	0x0801336d
 8013298:	080133a1 	.word	0x080133a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80132a2:	685b      	ldr	r3, [r3, #4]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d00b      	beq.n	80132c0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80132ae:	685b      	ldr	r3, [r3, #4]
 80132b0:	687a      	ldr	r2, [r7, #4]
 80132b2:	7c12      	ldrb	r2, [r2, #16]
 80132b4:	f107 0108 	add.w	r1, r7, #8
 80132b8:	4610      	mov	r0, r2
 80132ba:	4798      	blx	r3
 80132bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80132be:	e091      	b.n	80133e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80132c0:	6839      	ldr	r1, [r7, #0]
 80132c2:	6878      	ldr	r0, [r7, #4]
 80132c4:	f000 facb 	bl	801385e <USBD_CtlError>
            err++;
 80132c8:	7afb      	ldrb	r3, [r7, #11]
 80132ca:	3301      	adds	r3, #1
 80132cc:	72fb      	strb	r3, [r7, #11]
          break;
 80132ce:	e089      	b.n	80133e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80132d6:	689b      	ldr	r3, [r3, #8]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d00b      	beq.n	80132f4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80132e2:	689b      	ldr	r3, [r3, #8]
 80132e4:	687a      	ldr	r2, [r7, #4]
 80132e6:	7c12      	ldrb	r2, [r2, #16]
 80132e8:	f107 0108 	add.w	r1, r7, #8
 80132ec:	4610      	mov	r0, r2
 80132ee:	4798      	blx	r3
 80132f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80132f2:	e077      	b.n	80133e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80132f4:	6839      	ldr	r1, [r7, #0]
 80132f6:	6878      	ldr	r0, [r7, #4]
 80132f8:	f000 fab1 	bl	801385e <USBD_CtlError>
            err++;
 80132fc:	7afb      	ldrb	r3, [r7, #11]
 80132fe:	3301      	adds	r3, #1
 8013300:	72fb      	strb	r3, [r7, #11]
          break;
 8013302:	e06f      	b.n	80133e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801330a:	68db      	ldr	r3, [r3, #12]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d00b      	beq.n	8013328 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013316:	68db      	ldr	r3, [r3, #12]
 8013318:	687a      	ldr	r2, [r7, #4]
 801331a:	7c12      	ldrb	r2, [r2, #16]
 801331c:	f107 0108 	add.w	r1, r7, #8
 8013320:	4610      	mov	r0, r2
 8013322:	4798      	blx	r3
 8013324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013326:	e05d      	b.n	80133e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013328:	6839      	ldr	r1, [r7, #0]
 801332a:	6878      	ldr	r0, [r7, #4]
 801332c:	f000 fa97 	bl	801385e <USBD_CtlError>
            err++;
 8013330:	7afb      	ldrb	r3, [r7, #11]
 8013332:	3301      	adds	r3, #1
 8013334:	72fb      	strb	r3, [r7, #11]
          break;
 8013336:	e055      	b.n	80133e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801333e:	691b      	ldr	r3, [r3, #16]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d00b      	beq.n	801335c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801334a:	691b      	ldr	r3, [r3, #16]
 801334c:	687a      	ldr	r2, [r7, #4]
 801334e:	7c12      	ldrb	r2, [r2, #16]
 8013350:	f107 0108 	add.w	r1, r7, #8
 8013354:	4610      	mov	r0, r2
 8013356:	4798      	blx	r3
 8013358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801335a:	e043      	b.n	80133e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801335c:	6839      	ldr	r1, [r7, #0]
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f000 fa7d 	bl	801385e <USBD_CtlError>
            err++;
 8013364:	7afb      	ldrb	r3, [r7, #11]
 8013366:	3301      	adds	r3, #1
 8013368:	72fb      	strb	r3, [r7, #11]
          break;
 801336a:	e03b      	b.n	80133e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013372:	695b      	ldr	r3, [r3, #20]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d00b      	beq.n	8013390 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801337e:	695b      	ldr	r3, [r3, #20]
 8013380:	687a      	ldr	r2, [r7, #4]
 8013382:	7c12      	ldrb	r2, [r2, #16]
 8013384:	f107 0108 	add.w	r1, r7, #8
 8013388:	4610      	mov	r0, r2
 801338a:	4798      	blx	r3
 801338c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801338e:	e029      	b.n	80133e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013390:	6839      	ldr	r1, [r7, #0]
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f000 fa63 	bl	801385e <USBD_CtlError>
            err++;
 8013398:	7afb      	ldrb	r3, [r7, #11]
 801339a:	3301      	adds	r3, #1
 801339c:	72fb      	strb	r3, [r7, #11]
          break;
 801339e:	e021      	b.n	80133e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80133a6:	699b      	ldr	r3, [r3, #24]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d00b      	beq.n	80133c4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80133b2:	699b      	ldr	r3, [r3, #24]
 80133b4:	687a      	ldr	r2, [r7, #4]
 80133b6:	7c12      	ldrb	r2, [r2, #16]
 80133b8:	f107 0108 	add.w	r1, r7, #8
 80133bc:	4610      	mov	r0, r2
 80133be:	4798      	blx	r3
 80133c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80133c2:	e00f      	b.n	80133e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80133c4:	6839      	ldr	r1, [r7, #0]
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	f000 fa49 	bl	801385e <USBD_CtlError>
            err++;
 80133cc:	7afb      	ldrb	r3, [r7, #11]
 80133ce:	3301      	adds	r3, #1
 80133d0:	72fb      	strb	r3, [r7, #11]
          break;
 80133d2:	e007      	b.n	80133e4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80133d4:	6839      	ldr	r1, [r7, #0]
 80133d6:	6878      	ldr	r0, [r7, #4]
 80133d8:	f000 fa41 	bl	801385e <USBD_CtlError>
          err++;
 80133dc:	7afb      	ldrb	r3, [r7, #11]
 80133de:	3301      	adds	r3, #1
 80133e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80133e2:	bf00      	nop
      }
      break;
 80133e4:	e037      	b.n	8013456 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	7c1b      	ldrb	r3, [r3, #16]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d109      	bne.n	8013402 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133f6:	f107 0208 	add.w	r2, r7, #8
 80133fa:	4610      	mov	r0, r2
 80133fc:	4798      	blx	r3
 80133fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013400:	e029      	b.n	8013456 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013402:	6839      	ldr	r1, [r7, #0]
 8013404:	6878      	ldr	r0, [r7, #4]
 8013406:	f000 fa2a 	bl	801385e <USBD_CtlError>
        err++;
 801340a:	7afb      	ldrb	r3, [r7, #11]
 801340c:	3301      	adds	r3, #1
 801340e:	72fb      	strb	r3, [r7, #11]
      break;
 8013410:	e021      	b.n	8013456 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	7c1b      	ldrb	r3, [r3, #16]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d10d      	bne.n	8013436 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013422:	f107 0208 	add.w	r2, r7, #8
 8013426:	4610      	mov	r0, r2
 8013428:	4798      	blx	r3
 801342a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	3301      	adds	r3, #1
 8013430:	2207      	movs	r2, #7
 8013432:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013434:	e00f      	b.n	8013456 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013436:	6839      	ldr	r1, [r7, #0]
 8013438:	6878      	ldr	r0, [r7, #4]
 801343a:	f000 fa10 	bl	801385e <USBD_CtlError>
        err++;
 801343e:	7afb      	ldrb	r3, [r7, #11]
 8013440:	3301      	adds	r3, #1
 8013442:	72fb      	strb	r3, [r7, #11]
      break;
 8013444:	e007      	b.n	8013456 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8013446:	6839      	ldr	r1, [r7, #0]
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	f000 fa08 	bl	801385e <USBD_CtlError>
      err++;
 801344e:	7afb      	ldrb	r3, [r7, #11]
 8013450:	3301      	adds	r3, #1
 8013452:	72fb      	strb	r3, [r7, #11]
      break;
 8013454:	bf00      	nop
  }

  if (err != 0U)
 8013456:	7afb      	ldrb	r3, [r7, #11]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d11e      	bne.n	801349a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	88db      	ldrh	r3, [r3, #6]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d016      	beq.n	8013492 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013464:	893b      	ldrh	r3, [r7, #8]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d00e      	beq.n	8013488 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	88da      	ldrh	r2, [r3, #6]
 801346e:	893b      	ldrh	r3, [r7, #8]
 8013470:	4293      	cmp	r3, r2
 8013472:	bf28      	it	cs
 8013474:	4613      	movcs	r3, r2
 8013476:	b29b      	uxth	r3, r3
 8013478:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801347a:	893b      	ldrh	r3, [r7, #8]
 801347c:	461a      	mov	r2, r3
 801347e:	68f9      	ldr	r1, [r7, #12]
 8013480:	6878      	ldr	r0, [r7, #4]
 8013482:	f000 fa5d 	bl	8013940 <USBD_CtlSendData>
 8013486:	e009      	b.n	801349c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013488:	6839      	ldr	r1, [r7, #0]
 801348a:	6878      	ldr	r0, [r7, #4]
 801348c:	f000 f9e7 	bl	801385e <USBD_CtlError>
 8013490:	e004      	b.n	801349c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013492:	6878      	ldr	r0, [r7, #4]
 8013494:	f000 faae 	bl	80139f4 <USBD_CtlSendStatus>
 8013498:	e000      	b.n	801349c <USBD_GetDescriptor+0x320>
    return;
 801349a:	bf00      	nop
  }
}
 801349c:	3710      	adds	r7, #16
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}
 80134a2:	bf00      	nop

080134a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b084      	sub	sp, #16
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
 80134ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	889b      	ldrh	r3, [r3, #4]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d131      	bne.n	801351a <USBD_SetAddress+0x76>
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	88db      	ldrh	r3, [r3, #6]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d12d      	bne.n	801351a <USBD_SetAddress+0x76>
 80134be:	683b      	ldr	r3, [r7, #0]
 80134c0:	885b      	ldrh	r3, [r3, #2]
 80134c2:	2b7f      	cmp	r3, #127	; 0x7f
 80134c4:	d829      	bhi.n	801351a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	885b      	ldrh	r3, [r3, #2]
 80134ca:	b2db      	uxtb	r3, r3
 80134cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80134d8:	b2db      	uxtb	r3, r3
 80134da:	2b03      	cmp	r3, #3
 80134dc:	d104      	bne.n	80134e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80134de:	6839      	ldr	r1, [r7, #0]
 80134e0:	6878      	ldr	r0, [r7, #4]
 80134e2:	f000 f9bc 	bl	801385e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134e6:	e01d      	b.n	8013524 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	7bfa      	ldrb	r2, [r7, #15]
 80134ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80134f0:	7bfb      	ldrb	r3, [r7, #15]
 80134f2:	4619      	mov	r1, r3
 80134f4:	6878      	ldr	r0, [r7, #4]
 80134f6:	f001 fc77 	bl	8014de8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f000 fa7a 	bl	80139f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013500:	7bfb      	ldrb	r3, [r7, #15]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d004      	beq.n	8013510 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	2202      	movs	r2, #2
 801350a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801350e:	e009      	b.n	8013524 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	2201      	movs	r2, #1
 8013514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013518:	e004      	b.n	8013524 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801351a:	6839      	ldr	r1, [r7, #0]
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f000 f99e 	bl	801385e <USBD_CtlError>
  }
}
 8013522:	bf00      	nop
 8013524:	bf00      	nop
 8013526:	3710      	adds	r7, #16
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}

0801352c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b084      	sub	sp, #16
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013536:	2300      	movs	r3, #0
 8013538:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	885b      	ldrh	r3, [r3, #2]
 801353e:	b2da      	uxtb	r2, r3
 8013540:	4b4e      	ldr	r3, [pc, #312]	; (801367c <USBD_SetConfig+0x150>)
 8013542:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013544:	4b4d      	ldr	r3, [pc, #308]	; (801367c <USBD_SetConfig+0x150>)
 8013546:	781b      	ldrb	r3, [r3, #0]
 8013548:	2b01      	cmp	r3, #1
 801354a:	d905      	bls.n	8013558 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801354c:	6839      	ldr	r1, [r7, #0]
 801354e:	6878      	ldr	r0, [r7, #4]
 8013550:	f000 f985 	bl	801385e <USBD_CtlError>
    return USBD_FAIL;
 8013554:	2303      	movs	r3, #3
 8013556:	e08c      	b.n	8013672 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801355e:	b2db      	uxtb	r3, r3
 8013560:	2b02      	cmp	r3, #2
 8013562:	d002      	beq.n	801356a <USBD_SetConfig+0x3e>
 8013564:	2b03      	cmp	r3, #3
 8013566:	d029      	beq.n	80135bc <USBD_SetConfig+0x90>
 8013568:	e075      	b.n	8013656 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801356a:	4b44      	ldr	r3, [pc, #272]	; (801367c <USBD_SetConfig+0x150>)
 801356c:	781b      	ldrb	r3, [r3, #0]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d020      	beq.n	80135b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8013572:	4b42      	ldr	r3, [pc, #264]	; (801367c <USBD_SetConfig+0x150>)
 8013574:	781b      	ldrb	r3, [r3, #0]
 8013576:	461a      	mov	r2, r3
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801357c:	4b3f      	ldr	r3, [pc, #252]	; (801367c <USBD_SetConfig+0x150>)
 801357e:	781b      	ldrb	r3, [r3, #0]
 8013580:	4619      	mov	r1, r3
 8013582:	6878      	ldr	r0, [r7, #4]
 8013584:	f7ff f849 	bl	801261a <USBD_SetClassConfig>
 8013588:	4603      	mov	r3, r0
 801358a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801358c:	7bfb      	ldrb	r3, [r7, #15]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d008      	beq.n	80135a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8013592:	6839      	ldr	r1, [r7, #0]
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f000 f962 	bl	801385e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	2202      	movs	r2, #2
 801359e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80135a2:	e065      	b.n	8013670 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80135a4:	6878      	ldr	r0, [r7, #4]
 80135a6:	f000 fa25 	bl	80139f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	2203      	movs	r2, #3
 80135ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80135b2:	e05d      	b.n	8013670 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80135b4:	6878      	ldr	r0, [r7, #4]
 80135b6:	f000 fa1d 	bl	80139f4 <USBD_CtlSendStatus>
      break;
 80135ba:	e059      	b.n	8013670 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80135bc:	4b2f      	ldr	r3, [pc, #188]	; (801367c <USBD_SetConfig+0x150>)
 80135be:	781b      	ldrb	r3, [r3, #0]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d112      	bne.n	80135ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	2202      	movs	r2, #2
 80135c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80135cc:	4b2b      	ldr	r3, [pc, #172]	; (801367c <USBD_SetConfig+0x150>)
 80135ce:	781b      	ldrb	r3, [r3, #0]
 80135d0:	461a      	mov	r2, r3
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80135d6:	4b29      	ldr	r3, [pc, #164]	; (801367c <USBD_SetConfig+0x150>)
 80135d8:	781b      	ldrb	r3, [r3, #0]
 80135da:	4619      	mov	r1, r3
 80135dc:	6878      	ldr	r0, [r7, #4]
 80135de:	f7ff f838 	bl	8012652 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80135e2:	6878      	ldr	r0, [r7, #4]
 80135e4:	f000 fa06 	bl	80139f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80135e8:	e042      	b.n	8013670 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80135ea:	4b24      	ldr	r3, [pc, #144]	; (801367c <USBD_SetConfig+0x150>)
 80135ec:	781b      	ldrb	r3, [r3, #0]
 80135ee:	461a      	mov	r2, r3
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	685b      	ldr	r3, [r3, #4]
 80135f4:	429a      	cmp	r2, r3
 80135f6:	d02a      	beq.n	801364e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	685b      	ldr	r3, [r3, #4]
 80135fc:	b2db      	uxtb	r3, r3
 80135fe:	4619      	mov	r1, r3
 8013600:	6878      	ldr	r0, [r7, #4]
 8013602:	f7ff f826 	bl	8012652 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013606:	4b1d      	ldr	r3, [pc, #116]	; (801367c <USBD_SetConfig+0x150>)
 8013608:	781b      	ldrb	r3, [r3, #0]
 801360a:	461a      	mov	r2, r3
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013610:	4b1a      	ldr	r3, [pc, #104]	; (801367c <USBD_SetConfig+0x150>)
 8013612:	781b      	ldrb	r3, [r3, #0]
 8013614:	4619      	mov	r1, r3
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	f7fe ffff 	bl	801261a <USBD_SetClassConfig>
 801361c:	4603      	mov	r3, r0
 801361e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013620:	7bfb      	ldrb	r3, [r7, #15]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d00f      	beq.n	8013646 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8013626:	6839      	ldr	r1, [r7, #0]
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f000 f918 	bl	801385e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	685b      	ldr	r3, [r3, #4]
 8013632:	b2db      	uxtb	r3, r3
 8013634:	4619      	mov	r1, r3
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f7ff f80b 	bl	8012652 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2202      	movs	r2, #2
 8013640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013644:	e014      	b.n	8013670 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f000 f9d4 	bl	80139f4 <USBD_CtlSendStatus>
      break;
 801364c:	e010      	b.n	8013670 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801364e:	6878      	ldr	r0, [r7, #4]
 8013650:	f000 f9d0 	bl	80139f4 <USBD_CtlSendStatus>
      break;
 8013654:	e00c      	b.n	8013670 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8013656:	6839      	ldr	r1, [r7, #0]
 8013658:	6878      	ldr	r0, [r7, #4]
 801365a:	f000 f900 	bl	801385e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801365e:	4b07      	ldr	r3, [pc, #28]	; (801367c <USBD_SetConfig+0x150>)
 8013660:	781b      	ldrb	r3, [r3, #0]
 8013662:	4619      	mov	r1, r3
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f7fe fff4 	bl	8012652 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801366a:	2303      	movs	r3, #3
 801366c:	73fb      	strb	r3, [r7, #15]
      break;
 801366e:	bf00      	nop
  }

  return ret;
 8013670:	7bfb      	ldrb	r3, [r7, #15]
}
 8013672:	4618      	mov	r0, r3
 8013674:	3710      	adds	r7, #16
 8013676:	46bd      	mov	sp, r7
 8013678:	bd80      	pop	{r7, pc}
 801367a:	bf00      	nop
 801367c:	20001278 	.word	0x20001278

08013680 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b082      	sub	sp, #8
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
 8013688:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	88db      	ldrh	r3, [r3, #6]
 801368e:	2b01      	cmp	r3, #1
 8013690:	d004      	beq.n	801369c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013692:	6839      	ldr	r1, [r7, #0]
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f000 f8e2 	bl	801385e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801369a:	e023      	b.n	80136e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136a2:	b2db      	uxtb	r3, r3
 80136a4:	2b02      	cmp	r3, #2
 80136a6:	dc02      	bgt.n	80136ae <USBD_GetConfig+0x2e>
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	dc03      	bgt.n	80136b4 <USBD_GetConfig+0x34>
 80136ac:	e015      	b.n	80136da <USBD_GetConfig+0x5a>
 80136ae:	2b03      	cmp	r3, #3
 80136b0:	d00b      	beq.n	80136ca <USBD_GetConfig+0x4a>
 80136b2:	e012      	b.n	80136da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	2200      	movs	r2, #0
 80136b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	3308      	adds	r3, #8
 80136be:	2201      	movs	r2, #1
 80136c0:	4619      	mov	r1, r3
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f000 f93c 	bl	8013940 <USBD_CtlSendData>
        break;
 80136c8:	e00c      	b.n	80136e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	3304      	adds	r3, #4
 80136ce:	2201      	movs	r2, #1
 80136d0:	4619      	mov	r1, r3
 80136d2:	6878      	ldr	r0, [r7, #4]
 80136d4:	f000 f934 	bl	8013940 <USBD_CtlSendData>
        break;
 80136d8:	e004      	b.n	80136e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80136da:	6839      	ldr	r1, [r7, #0]
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f000 f8be 	bl	801385e <USBD_CtlError>
        break;
 80136e2:	bf00      	nop
}
 80136e4:	bf00      	nop
 80136e6:	3708      	adds	r7, #8
 80136e8:	46bd      	mov	sp, r7
 80136ea:	bd80      	pop	{r7, pc}

080136ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b082      	sub	sp, #8
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
 80136f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136fc:	b2db      	uxtb	r3, r3
 80136fe:	3b01      	subs	r3, #1
 8013700:	2b02      	cmp	r3, #2
 8013702:	d81e      	bhi.n	8013742 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013704:	683b      	ldr	r3, [r7, #0]
 8013706:	88db      	ldrh	r3, [r3, #6]
 8013708:	2b02      	cmp	r3, #2
 801370a:	d004      	beq.n	8013716 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801370c:	6839      	ldr	r1, [r7, #0]
 801370e:	6878      	ldr	r0, [r7, #4]
 8013710:	f000 f8a5 	bl	801385e <USBD_CtlError>
        break;
 8013714:	e01a      	b.n	801374c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	2201      	movs	r2, #1
 801371a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8013722:	2b00      	cmp	r3, #0
 8013724:	d005      	beq.n	8013732 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	68db      	ldr	r3, [r3, #12]
 801372a:	f043 0202 	orr.w	r2, r3, #2
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	330c      	adds	r3, #12
 8013736:	2202      	movs	r2, #2
 8013738:	4619      	mov	r1, r3
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f000 f900 	bl	8013940 <USBD_CtlSendData>
      break;
 8013740:	e004      	b.n	801374c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013742:	6839      	ldr	r1, [r7, #0]
 8013744:	6878      	ldr	r0, [r7, #4]
 8013746:	f000 f88a 	bl	801385e <USBD_CtlError>
      break;
 801374a:	bf00      	nop
  }
}
 801374c:	bf00      	nop
 801374e:	3708      	adds	r7, #8
 8013750:	46bd      	mov	sp, r7
 8013752:	bd80      	pop	{r7, pc}

08013754 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013754:	b580      	push	{r7, lr}
 8013756:	b082      	sub	sp, #8
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
 801375c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	885b      	ldrh	r3, [r3, #2]
 8013762:	2b01      	cmp	r3, #1
 8013764:	d107      	bne.n	8013776 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	2201      	movs	r2, #1
 801376a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801376e:	6878      	ldr	r0, [r7, #4]
 8013770:	f000 f940 	bl	80139f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013774:	e013      	b.n	801379e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	885b      	ldrh	r3, [r3, #2]
 801377a:	2b02      	cmp	r3, #2
 801377c:	d10b      	bne.n	8013796 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	889b      	ldrh	r3, [r3, #4]
 8013782:	0a1b      	lsrs	r3, r3, #8
 8013784:	b29b      	uxth	r3, r3
 8013786:	b2da      	uxtb	r2, r3
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f000 f930 	bl	80139f4 <USBD_CtlSendStatus>
}
 8013794:	e003      	b.n	801379e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8013796:	6839      	ldr	r1, [r7, #0]
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f000 f860 	bl	801385e <USBD_CtlError>
}
 801379e:	bf00      	nop
 80137a0:	3708      	adds	r7, #8
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bd80      	pop	{r7, pc}

080137a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80137a6:	b580      	push	{r7, lr}
 80137a8:	b082      	sub	sp, #8
 80137aa:	af00      	add	r7, sp, #0
 80137ac:	6078      	str	r0, [r7, #4]
 80137ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137b6:	b2db      	uxtb	r3, r3
 80137b8:	3b01      	subs	r3, #1
 80137ba:	2b02      	cmp	r3, #2
 80137bc:	d80b      	bhi.n	80137d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80137be:	683b      	ldr	r3, [r7, #0]
 80137c0:	885b      	ldrh	r3, [r3, #2]
 80137c2:	2b01      	cmp	r3, #1
 80137c4:	d10c      	bne.n	80137e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	2200      	movs	r2, #0
 80137ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80137ce:	6878      	ldr	r0, [r7, #4]
 80137d0:	f000 f910 	bl	80139f4 <USBD_CtlSendStatus>
      }
      break;
 80137d4:	e004      	b.n	80137e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80137d6:	6839      	ldr	r1, [r7, #0]
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f000 f840 	bl	801385e <USBD_CtlError>
      break;
 80137de:	e000      	b.n	80137e2 <USBD_ClrFeature+0x3c>
      break;
 80137e0:	bf00      	nop
  }
}
 80137e2:	bf00      	nop
 80137e4:	3708      	adds	r7, #8
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd80      	pop	{r7, pc}

080137ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80137ea:	b580      	push	{r7, lr}
 80137ec:	b084      	sub	sp, #16
 80137ee:	af00      	add	r7, sp, #0
 80137f0:	6078      	str	r0, [r7, #4]
 80137f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80137f4:	683b      	ldr	r3, [r7, #0]
 80137f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	781a      	ldrb	r2, [r3, #0]
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	3301      	adds	r3, #1
 8013804:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	781a      	ldrb	r2, [r3, #0]
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	3301      	adds	r3, #1
 8013812:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013814:	68f8      	ldr	r0, [r7, #12]
 8013816:	f7ff fa17 	bl	8012c48 <SWAPBYTE>
 801381a:	4603      	mov	r3, r0
 801381c:	461a      	mov	r2, r3
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	3301      	adds	r3, #1
 8013826:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	3301      	adds	r3, #1
 801382c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801382e:	68f8      	ldr	r0, [r7, #12]
 8013830:	f7ff fa0a 	bl	8012c48 <SWAPBYTE>
 8013834:	4603      	mov	r3, r0
 8013836:	461a      	mov	r2, r3
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	3301      	adds	r3, #1
 8013840:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	3301      	adds	r3, #1
 8013846:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013848:	68f8      	ldr	r0, [r7, #12]
 801384a:	f7ff f9fd 	bl	8012c48 <SWAPBYTE>
 801384e:	4603      	mov	r3, r0
 8013850:	461a      	mov	r2, r3
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	80da      	strh	r2, [r3, #6]
}
 8013856:	bf00      	nop
 8013858:	3710      	adds	r7, #16
 801385a:	46bd      	mov	sp, r7
 801385c:	bd80      	pop	{r7, pc}

0801385e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801385e:	b580      	push	{r7, lr}
 8013860:	b082      	sub	sp, #8
 8013862:	af00      	add	r7, sp, #0
 8013864:	6078      	str	r0, [r7, #4]
 8013866:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013868:	2180      	movs	r1, #128	; 0x80
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	f001 fa22 	bl	8014cb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013870:	2100      	movs	r1, #0
 8013872:	6878      	ldr	r0, [r7, #4]
 8013874:	f001 fa1e 	bl	8014cb4 <USBD_LL_StallEP>
}
 8013878:	bf00      	nop
 801387a:	3708      	adds	r7, #8
 801387c:	46bd      	mov	sp, r7
 801387e:	bd80      	pop	{r7, pc}

08013880 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b086      	sub	sp, #24
 8013884:	af00      	add	r7, sp, #0
 8013886:	60f8      	str	r0, [r7, #12]
 8013888:	60b9      	str	r1, [r7, #8]
 801388a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801388c:	2300      	movs	r3, #0
 801388e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d036      	beq.n	8013904 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801389a:	6938      	ldr	r0, [r7, #16]
 801389c:	f000 f836 	bl	801390c <USBD_GetLen>
 80138a0:	4603      	mov	r3, r0
 80138a2:	3301      	adds	r3, #1
 80138a4:	b29b      	uxth	r3, r3
 80138a6:	005b      	lsls	r3, r3, #1
 80138a8:	b29a      	uxth	r2, r3
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80138ae:	7dfb      	ldrb	r3, [r7, #23]
 80138b0:	68ba      	ldr	r2, [r7, #8]
 80138b2:	4413      	add	r3, r2
 80138b4:	687a      	ldr	r2, [r7, #4]
 80138b6:	7812      	ldrb	r2, [r2, #0]
 80138b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80138ba:	7dfb      	ldrb	r3, [r7, #23]
 80138bc:	3301      	adds	r3, #1
 80138be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80138c0:	7dfb      	ldrb	r3, [r7, #23]
 80138c2:	68ba      	ldr	r2, [r7, #8]
 80138c4:	4413      	add	r3, r2
 80138c6:	2203      	movs	r2, #3
 80138c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80138ca:	7dfb      	ldrb	r3, [r7, #23]
 80138cc:	3301      	adds	r3, #1
 80138ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80138d0:	e013      	b.n	80138fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80138d2:	7dfb      	ldrb	r3, [r7, #23]
 80138d4:	68ba      	ldr	r2, [r7, #8]
 80138d6:	4413      	add	r3, r2
 80138d8:	693a      	ldr	r2, [r7, #16]
 80138da:	7812      	ldrb	r2, [r2, #0]
 80138dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	3301      	adds	r3, #1
 80138e2:	613b      	str	r3, [r7, #16]
    idx++;
 80138e4:	7dfb      	ldrb	r3, [r7, #23]
 80138e6:	3301      	adds	r3, #1
 80138e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80138ea:	7dfb      	ldrb	r3, [r7, #23]
 80138ec:	68ba      	ldr	r2, [r7, #8]
 80138ee:	4413      	add	r3, r2
 80138f0:	2200      	movs	r2, #0
 80138f2:	701a      	strb	r2, [r3, #0]
    idx++;
 80138f4:	7dfb      	ldrb	r3, [r7, #23]
 80138f6:	3301      	adds	r3, #1
 80138f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	781b      	ldrb	r3, [r3, #0]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d1e7      	bne.n	80138d2 <USBD_GetString+0x52>
 8013902:	e000      	b.n	8013906 <USBD_GetString+0x86>
    return;
 8013904:	bf00      	nop
  }
}
 8013906:	3718      	adds	r7, #24
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}

0801390c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801390c:	b480      	push	{r7}
 801390e:	b085      	sub	sp, #20
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013914:	2300      	movs	r3, #0
 8013916:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801391c:	e005      	b.n	801392a <USBD_GetLen+0x1e>
  {
    len++;
 801391e:	7bfb      	ldrb	r3, [r7, #15]
 8013920:	3301      	adds	r3, #1
 8013922:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013924:	68bb      	ldr	r3, [r7, #8]
 8013926:	3301      	adds	r3, #1
 8013928:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801392a:	68bb      	ldr	r3, [r7, #8]
 801392c:	781b      	ldrb	r3, [r3, #0]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d1f5      	bne.n	801391e <USBD_GetLen+0x12>
  }

  return len;
 8013932:	7bfb      	ldrb	r3, [r7, #15]
}
 8013934:	4618      	mov	r0, r3
 8013936:	3714      	adds	r7, #20
 8013938:	46bd      	mov	sp, r7
 801393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393e:	4770      	bx	lr

08013940 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b084      	sub	sp, #16
 8013944:	af00      	add	r7, sp, #0
 8013946:	60f8      	str	r0, [r7, #12]
 8013948:	60b9      	str	r1, [r7, #8]
 801394a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	2202      	movs	r2, #2
 8013950:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	687a      	ldr	r2, [r7, #4]
 8013958:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	687a      	ldr	r2, [r7, #4]
 801395e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	68ba      	ldr	r2, [r7, #8]
 8013964:	2100      	movs	r1, #0
 8013966:	68f8      	ldr	r0, [r7, #12]
 8013968:	f001 fa74 	bl	8014e54 <USBD_LL_Transmit>

  return USBD_OK;
 801396c:	2300      	movs	r3, #0
}
 801396e:	4618      	mov	r0, r3
 8013970:	3710      	adds	r7, #16
 8013972:	46bd      	mov	sp, r7
 8013974:	bd80      	pop	{r7, pc}

08013976 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013976:	b580      	push	{r7, lr}
 8013978:	b084      	sub	sp, #16
 801397a:	af00      	add	r7, sp, #0
 801397c:	60f8      	str	r0, [r7, #12]
 801397e:	60b9      	str	r1, [r7, #8]
 8013980:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	68ba      	ldr	r2, [r7, #8]
 8013986:	2100      	movs	r1, #0
 8013988:	68f8      	ldr	r0, [r7, #12]
 801398a:	f001 fa63 	bl	8014e54 <USBD_LL_Transmit>

  return USBD_OK;
 801398e:	2300      	movs	r3, #0
}
 8013990:	4618      	mov	r0, r3
 8013992:	3710      	adds	r7, #16
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}

08013998 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b084      	sub	sp, #16
 801399c:	af00      	add	r7, sp, #0
 801399e:	60f8      	str	r0, [r7, #12]
 80139a0:	60b9      	str	r1, [r7, #8]
 80139a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	2203      	movs	r2, #3
 80139a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	687a      	ldr	r2, [r7, #4]
 80139b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	687a      	ldr	r2, [r7, #4]
 80139b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	68ba      	ldr	r2, [r7, #8]
 80139c0:	2100      	movs	r1, #0
 80139c2:	68f8      	ldr	r0, [r7, #12]
 80139c4:	f001 fa7e 	bl	8014ec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80139c8:	2300      	movs	r3, #0
}
 80139ca:	4618      	mov	r0, r3
 80139cc:	3710      	adds	r7, #16
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}

080139d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80139d2:	b580      	push	{r7, lr}
 80139d4:	b084      	sub	sp, #16
 80139d6:	af00      	add	r7, sp, #0
 80139d8:	60f8      	str	r0, [r7, #12]
 80139da:	60b9      	str	r1, [r7, #8]
 80139dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	68ba      	ldr	r2, [r7, #8]
 80139e2:	2100      	movs	r1, #0
 80139e4:	68f8      	ldr	r0, [r7, #12]
 80139e6:	f001 fa6d 	bl	8014ec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80139ea:	2300      	movs	r3, #0
}
 80139ec:	4618      	mov	r0, r3
 80139ee:	3710      	adds	r7, #16
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd80      	pop	{r7, pc}

080139f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b082      	sub	sp, #8
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	2204      	movs	r2, #4
 8013a00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013a04:	2300      	movs	r3, #0
 8013a06:	2200      	movs	r2, #0
 8013a08:	2100      	movs	r1, #0
 8013a0a:	6878      	ldr	r0, [r7, #4]
 8013a0c:	f001 fa22 	bl	8014e54 <USBD_LL_Transmit>

  return USBD_OK;
 8013a10:	2300      	movs	r3, #0
}
 8013a12:	4618      	mov	r0, r3
 8013a14:	3708      	adds	r7, #8
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}

08013a1a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013a1a:	b580      	push	{r7, lr}
 8013a1c:	b082      	sub	sp, #8
 8013a1e:	af00      	add	r7, sp, #0
 8013a20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	2205      	movs	r2, #5
 8013a26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	2100      	movs	r1, #0
 8013a30:	6878      	ldr	r0, [r7, #4]
 8013a32:	f001 fa47 	bl	8014ec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013a36:	2300      	movs	r3, #0
}
 8013a38:	4618      	mov	r0, r3
 8013a3a:	3708      	adds	r7, #8
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}

08013a40 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b082      	sub	sp, #8
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8013a48:	6878      	ldr	r0, [r7, #4]
 8013a4a:	f7f2 ff25 	bl	8006898 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8013a4e:	bf00      	nop
 8013a50:	3708      	adds	r7, #8
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}

08013a56 <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8013a56:	b580      	push	{r7, lr}
 8013a58:	b082      	sub	sp, #8
 8013a5a:	af00      	add	r7, sp, #0
 8013a5c:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8013a5e:	e002      	b.n	8013a66 <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8013a60:	2001      	movs	r0, #1
 8013a62:	f7ff ffed 	bl	8013a40 <SPIF_Delay>
  while (Handle->Lock)
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	7b1b      	ldrb	r3, [r3, #12]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d1f8      	bne.n	8013a60 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	2201      	movs	r2, #1
 8013a72:	731a      	strb	r2, [r3, #12]
}
 8013a74:	bf00      	nop
 8013a76:	3708      	adds	r7, #8
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd80      	pop	{r7, pc}

08013a7c <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8013a7c:	b480      	push	{r7}
 8013a7e:	b083      	sub	sp, #12
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2200      	movs	r2, #0
 8013a88:	731a      	strb	r2, [r3, #12]
}
 8013a8a:	bf00      	nop
 8013a8c:	370c      	adds	r7, #12
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a94:	4770      	bx	lr

08013a96 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8013a96:	b580      	push	{r7, lr}
 8013a98:	b084      	sub	sp, #16
 8013a9a:	af00      	add	r7, sp, #0
 8013a9c:	6078      	str	r0, [r7, #4]
 8013a9e:	460b      	mov	r3, r1
 8013aa0:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	6858      	ldr	r0, [r3, #4]
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	691b      	ldr	r3, [r3, #16]
 8013aaa:	b29b      	uxth	r3, r3
 8013aac:	78fa      	ldrb	r2, [r7, #3]
 8013aae:	4619      	mov	r1, r3
 8013ab0:	f7f4 fecc 	bl	800884c <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	60fb      	str	r3, [r7, #12]
 8013ab8:	e002      	b.n	8013ac0 <SPIF_CsPin+0x2a>
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	3301      	adds	r3, #1
 8013abe:	60fb      	str	r3, [r7, #12]
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	2b09      	cmp	r3, #9
 8013ac4:	ddf9      	ble.n	8013aba <SPIF_CsPin+0x24>
}
 8013ac6:	bf00      	nop
 8013ac8:	bf00      	nop
 8013aca:	3710      	adds	r7, #16
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd80      	pop	{r7, pc}

08013ad0 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b086      	sub	sp, #24
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	60f8      	str	r0, [r7, #12]
 8013ad8:	60b9      	str	r1, [r7, #8]
 8013ada:	607a      	str	r2, [r7, #4]
 8013adc:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8013ae2:	f7f2 fecd 	bl	8006880 <HAL_GetTick>
 8013ae6:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_TransmitReceive_DMA(Handle->HSpi, Tx, Rx, Size) != HAL_OK)
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	6818      	ldr	r0, [r3, #0]
 8013aec:	683b      	ldr	r3, [r7, #0]
 8013aee:	b29b      	uxth	r3, r3
 8013af0:	687a      	ldr	r2, [r7, #4]
 8013af2:	68b9      	ldr	r1, [r7, #8]
 8013af4:	f7f8 feda 	bl	800c8ac <HAL_SPI_TransmitReceive_DMA>
 8013af8:	4603      	mov	r3, r0
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d11a      	bne.n	8013b34 <SPIF_TransmitReceive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8013afe:	2001      	movs	r0, #1
 8013b00:	f7ff ff9e 	bl	8013a40 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8013b04:	f7f2 febc 	bl	8006880 <HAL_GetTick>
 8013b08:	4602      	mov	r2, r0
 8013b0a:	693b      	ldr	r3, [r7, #16]
 8013b0c:	1ad3      	subs	r3, r2, r3
 8013b0e:	6a3a      	ldr	r2, [r7, #32]
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d805      	bhi.n	8013b20 <SPIF_TransmitReceive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7f9 f84b 	bl	800cbb4 <HAL_SPI_DMAStop>
        break;
 8013b1e:	e009      	b.n	8013b34 <SPIF_TransmitReceive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	4618      	mov	r0, r3
 8013b26:	f7f9 f9bf 	bl	800cea8 <HAL_SPI_GetState>
 8013b2a:	4603      	mov	r3, r0
 8013b2c:	2b01      	cmp	r3, #1
 8013b2e:	d1e6      	bne.n	8013afe <SPIF_TransmitReceive+0x2e>
      {
        retVal = true;
 8013b30:	2301      	movs	r3, #1
 8013b32:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8013b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b36:	4618      	mov	r0, r3
 8013b38:	3718      	adds	r7, #24
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	bd80      	pop	{r7, pc}

08013b3e <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8013b3e:	b580      	push	{r7, lr}
 8013b40:	b086      	sub	sp, #24
 8013b42:	af00      	add	r7, sp, #0
 8013b44:	60f8      	str	r0, [r7, #12]
 8013b46:	60b9      	str	r1, [r7, #8]
 8013b48:	607a      	str	r2, [r7, #4]
 8013b4a:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8013b50:	f7f2 fe96 	bl	8006880 <HAL_GetTick>
 8013b54:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Transmit_DMA(Handle->HSpi, Tx, Size) != HAL_OK)
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	687a      	ldr	r2, [r7, #4]
 8013b5c:	b292      	uxth	r2, r2
 8013b5e:	68b9      	ldr	r1, [r7, #8]
 8013b60:	4618      	mov	r0, r3
 8013b62:	f7f8 fc93 	bl	800c48c <HAL_SPI_Transmit_DMA>
 8013b66:	4603      	mov	r3, r0
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d11a      	bne.n	8013ba2 <SPIF_Transmit+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8013b6c:	2001      	movs	r0, #1
 8013b6e:	f7ff ff67 	bl	8013a40 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8013b72:	f7f2 fe85 	bl	8006880 <HAL_GetTick>
 8013b76:	4602      	mov	r2, r0
 8013b78:	693b      	ldr	r3, [r7, #16]
 8013b7a:	1ad3      	subs	r3, r2, r3
 8013b7c:	683a      	ldr	r2, [r7, #0]
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d805      	bhi.n	8013b8e <SPIF_Transmit+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	4618      	mov	r0, r3
 8013b88:	f7f9 f814 	bl	800cbb4 <HAL_SPI_DMAStop>
        break;
 8013b8c:	e009      	b.n	8013ba2 <SPIF_Transmit+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7f9 f988 	bl	800cea8 <HAL_SPI_GetState>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	2b01      	cmp	r3, #1
 8013b9c:	d1e6      	bne.n	8013b6c <SPIF_Transmit+0x2e>
      {
        retVal = true;
 8013b9e:	2301      	movs	r3, #1
 8013ba0:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8013ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	3718      	adds	r7, #24
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd80      	pop	{r7, pc}

08013bac <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b086      	sub	sp, #24
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	60f8      	str	r0, [r7, #12]
 8013bb4:	60b9      	str	r1, [r7, #8]
 8013bb6:	607a      	str	r2, [r7, #4]
 8013bb8:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8013bbe:	f7f2 fe5f 	bl	8006880 <HAL_GetTick>
 8013bc2:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Receive_DMA(Handle->HSpi, Rx, Size) != HAL_OK)
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	687a      	ldr	r2, [r7, #4]
 8013bca:	b292      	uxth	r2, r2
 8013bcc:	68b9      	ldr	r1, [r7, #8]
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7f8 fd4c 	bl	800c66c <HAL_SPI_Receive_DMA>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d11a      	bne.n	8013c10 <SPIF_Receive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8013bda:	2001      	movs	r0, #1
 8013bdc:	f7ff ff30 	bl	8013a40 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8013be0:	f7f2 fe4e 	bl	8006880 <HAL_GetTick>
 8013be4:	4602      	mov	r2, r0
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	1ad3      	subs	r3, r2, r3
 8013bea:	683a      	ldr	r2, [r7, #0]
 8013bec:	429a      	cmp	r2, r3
 8013bee:	d805      	bhi.n	8013bfc <SPIF_Receive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f7f8 ffdd 	bl	800cbb4 <HAL_SPI_DMAStop>
        break;
 8013bfa:	e009      	b.n	8013c10 <SPIF_Receive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7f9 f951 	bl	800cea8 <HAL_SPI_GetState>
 8013c06:	4603      	mov	r3, r0
 8013c08:	2b01      	cmp	r3, #1
 8013c0a:	d1e6      	bne.n	8013bda <SPIF_Receive+0x2e>
      {
        retVal = true;
 8013c0c:	2301      	movs	r3, #1
 8013c0e:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8013c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c12:	4618      	mov	r0, r3
 8013c14:	3718      	adds	r7, #24
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bd80      	pop	{r7, pc}

08013c1a <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 8013c1a:	b580      	push	{r7, lr}
 8013c1c:	b084      	sub	sp, #16
 8013c1e:	af00      	add	r7, sp, #0
 8013c20:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8013c22:	2301      	movs	r3, #1
 8013c24:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 8013c26:	2306      	movs	r3, #6
 8013c28:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8013c2a:	2100      	movs	r1, #0
 8013c2c:	6878      	ldr	r0, [r7, #4]
 8013c2e:	f7ff ff32 	bl	8013a96 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8013c32:	f107 010c 	add.w	r1, r7, #12
 8013c36:	2364      	movs	r3, #100	; 0x64
 8013c38:	2201      	movs	r2, #1
 8013c3a:	6878      	ldr	r0, [r7, #4]
 8013c3c:	f7ff ff7f 	bl	8013b3e <SPIF_Transmit>
 8013c40:	4603      	mov	r3, r0
 8013c42:	f083 0301 	eor.w	r3, r3, #1
 8013c46:	b2db      	uxtb	r3, r3
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d001      	beq.n	8013c50 <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8013c50:	2101      	movs	r1, #1
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	f7ff ff1f 	bl	8013a96 <SPIF_CsPin>
  return retVal;
 8013c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	3710      	adds	r7, #16
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}

08013c62 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8013c62:	b580      	push	{r7, lr}
 8013c64:	b084      	sub	sp, #16
 8013c66:	af00      	add	r7, sp, #0
 8013c68:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8013c6a:	2301      	movs	r3, #1
 8013c6c:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 8013c6e:	2304      	movs	r3, #4
 8013c70:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8013c72:	2100      	movs	r1, #0
 8013c74:	6878      	ldr	r0, [r7, #4]
 8013c76:	f7ff ff0e 	bl	8013a96 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8013c7a:	f107 010c 	add.w	r1, r7, #12
 8013c7e:	2364      	movs	r3, #100	; 0x64
 8013c80:	2201      	movs	r2, #1
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f7ff ff5b 	bl	8013b3e <SPIF_Transmit>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	f083 0301 	eor.w	r3, r3, #1
 8013c8e:	b2db      	uxtb	r3, r3
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d001      	beq.n	8013c98 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8013c94:	2300      	movs	r3, #0
 8013c96:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8013c98:	2101      	movs	r1, #1
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f7ff fefb 	bl	8013a96 <SPIF_CsPin>
  return retVal;
 8013ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3710      	adds	r7, #16
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}

08013caa <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8013caa:	b580      	push	{r7, lr}
 8013cac:	b086      	sub	sp, #24
 8013cae:	af02      	add	r7, sp, #8
 8013cb0:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 8013cb6:	f24a 5305 	movw	r3, #42245	; 0xa505
 8013cba:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 8013cbc:	2100      	movs	r1, #0
 8013cbe:	6878      	ldr	r0, [r7, #4]
 8013cc0:	f7ff fee9 	bl	8013a96 <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 8013cc4:	f107 0208 	add.w	r2, r7, #8
 8013cc8:	f107 010c 	add.w	r1, r7, #12
 8013ccc:	2364      	movs	r3, #100	; 0x64
 8013cce:	9300      	str	r3, [sp, #0]
 8013cd0:	2302      	movs	r3, #2
 8013cd2:	6878      	ldr	r0, [r7, #4]
 8013cd4:	f7ff fefc 	bl	8013ad0 <SPIF_TransmitReceive>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d001      	beq.n	8013ce2 <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 8013cde:	7a7b      	ldrb	r3, [r7, #9]
 8013ce0:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 8013ce2:	2101      	movs	r1, #1
 8013ce4:	6878      	ldr	r0, [r7, #4]
 8013ce6:	f7ff fed6 	bl	8013a96 <SPIF_CsPin>
  return retVal;
 8013cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	3710      	adds	r7, #16
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}

08013cf4 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b084      	sub	sp, #16
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
 8013cfc:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 8013cfe:	2300      	movs	r3, #0
 8013d00:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 8013d02:	f7f2 fdbd 	bl	8006880 <HAL_GetTick>
 8013d06:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 8013d08:	2001      	movs	r0, #1
 8013d0a:	f7ff fe99 	bl	8013a40 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 8013d0e:	f7f2 fdb7 	bl	8006880 <HAL_GetTick>
 8013d12:	4602      	mov	r2, r0
 8013d14:	68bb      	ldr	r3, [r7, #8]
 8013d16:	1ad3      	subs	r3, r2, r3
 8013d18:	683a      	ldr	r2, [r7, #0]
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	d90a      	bls.n	8013d34 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f7ff ffc3 	bl	8013caa <SPIF_ReadReg1>
 8013d24:	4603      	mov	r3, r0
 8013d26:	f003 0301 	and.w	r3, r3, #1
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d1ec      	bne.n	8013d08 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 8013d2e:	2301      	movs	r3, #1
 8013d30:	73fb      	strb	r3, [r7, #15]
      break;
 8013d32:	e000      	b.n	8013d36 <SPIF_WaitForWriting+0x42>
      break;
 8013d34:	bf00      	nop
    }
  }
  return retVal;
 8013d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d38:	4618      	mov	r0, r3
 8013d3a:	3710      	adds	r7, #16
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}

08013d40 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b088      	sub	sp, #32
 8013d44:	af02      	add	r7, sp, #8
 8013d46:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8013d48:	f06f 0360 	mvn.w	r3, #96	; 0x60
 8013d4c:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 8013d52:	2100      	movs	r1, #0
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f7ff fe9e 	bl	8013a96 <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 8013d5a:	f107 020c 	add.w	r2, r7, #12
 8013d5e:	f107 0110 	add.w	r1, r7, #16
 8013d62:	2364      	movs	r3, #100	; 0x64
 8013d64:	9300      	str	r3, [sp, #0]
 8013d66:	2304      	movs	r3, #4
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f7ff feb1 	bl	8013ad0 <SPIF_TransmitReceive>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	f083 0301 	eor.w	r3, r3, #1
 8013d74:	b2db      	uxtb	r3, r3
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d004      	beq.n	8013d84 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 8013d7a:	2101      	movs	r1, #1
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f7ff fe8a 	bl	8013a96 <SPIF_CsPin>
      break;
 8013d82:	e16f      	b.n	8014064 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8013d84:	2101      	movs	r1, #1
 8013d86:	6878      	ldr	r0, [r7, #4]
 8013d88:	f7ff fe85 	bl	8013a96 <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8013d8c:	7b7a      	ldrb	r2, [r7, #13]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 8013d92:	7bba      	ldrb	r2, [r7, #14]
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8013d98:	7bfa      	ldrb	r2, [r7, #15]
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	7a1b      	ldrb	r3, [r3, #8]
 8013da2:	2bef      	cmp	r3, #239	; 0xef
 8013da4:	f000 80f0 	beq.w	8013f88 <SPIF_FindChip+0x248>
 8013da8:	2bef      	cmp	r3, #239	; 0xef
 8013daa:	f300 80e9 	bgt.w	8013f80 <SPIF_FindChip+0x240>
 8013dae:	2bc8      	cmp	r3, #200	; 0xc8
 8013db0:	f300 80e6 	bgt.w	8013f80 <SPIF_FindChip+0x240>
 8013db4:	2b85      	cmp	r3, #133	; 0x85
 8013db6:	da0c      	bge.n	8013dd2 <SPIF_FindChip+0x92>
 8013db8:	2b62      	cmp	r3, #98	; 0x62
 8013dba:	f000 80e7 	beq.w	8013f8c <SPIF_FindChip+0x24c>
 8013dbe:	2b62      	cmp	r3, #98	; 0x62
 8013dc0:	f300 80de 	bgt.w	8013f80 <SPIF_FindChip+0x240>
 8013dc4:	2b20      	cmp	r3, #32
 8013dc6:	f300 80d9 	bgt.w	8013f7c <SPIF_FindChip+0x23c>
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	f300 8090 	bgt.w	8013ef0 <SPIF_FindChip+0x1b0>
 8013dd0:	e0d6      	b.n	8013f80 <SPIF_FindChip+0x240>
 8013dd2:	3b85      	subs	r3, #133	; 0x85
 8013dd4:	2b43      	cmp	r3, #67	; 0x43
 8013dd6:	f200 80d3 	bhi.w	8013f80 <SPIF_FindChip+0x240>
 8013dda:	a201      	add	r2, pc, #4	; (adr r2, 8013de0 <SPIF_FindChip+0xa0>)
 8013ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013de0:	08013f91 	.word	0x08013f91
 8013de4:	08013f81 	.word	0x08013f81
 8013de8:	08013f81 	.word	0x08013f81
 8013dec:	08013f81 	.word	0x08013f81
 8013df0:	08013f91 	.word	0x08013f91
 8013df4:	08013f81 	.word	0x08013f81
 8013df8:	08013f81 	.word	0x08013f81
 8013dfc:	08013f91 	.word	0x08013f91
 8013e00:	08013f81 	.word	0x08013f81
 8013e04:	08013f81 	.word	0x08013f81
 8013e08:	08013f81 	.word	0x08013f81
 8013e0c:	08013f81 	.word	0x08013f81
 8013e10:	08013f81 	.word	0x08013f81
 8013e14:	08013f81 	.word	0x08013f81
 8013e18:	08013f81 	.word	0x08013f81
 8013e1c:	08013f81 	.word	0x08013f81
 8013e20:	08013f81 	.word	0x08013f81
 8013e24:	08013f81 	.word	0x08013f81
 8013e28:	08013f81 	.word	0x08013f81
 8013e2c:	08013f81 	.word	0x08013f81
 8013e30:	08013f81 	.word	0x08013f81
 8013e34:	08013f81 	.word	0x08013f81
 8013e38:	08013f81 	.word	0x08013f81
 8013e3c:	08013f81 	.word	0x08013f81
 8013e40:	08013f91 	.word	0x08013f91
 8013e44:	08013f81 	.word	0x08013f81
 8013e48:	08013f81 	.word	0x08013f81
 8013e4c:	08013f81 	.word	0x08013f81
 8013e50:	08013f91 	.word	0x08013f91
 8013e54:	08013f81 	.word	0x08013f81
 8013e58:	08013f81 	.word	0x08013f81
 8013e5c:	08013f81 	.word	0x08013f81
 8013e60:	08013f81 	.word	0x08013f81
 8013e64:	08013f81 	.word	0x08013f81
 8013e68:	08013f81 	.word	0x08013f81
 8013e6c:	08013f81 	.word	0x08013f81
 8013e70:	08013f81 	.word	0x08013f81
 8013e74:	08013f81 	.word	0x08013f81
 8013e78:	08013f81 	.word	0x08013f81
 8013e7c:	08013f81 	.word	0x08013f81
 8013e80:	08013f91 	.word	0x08013f91
 8013e84:	08013f81 	.word	0x08013f81
 8013e88:	08013f81 	.word	0x08013f81
 8013e8c:	08013f81 	.word	0x08013f81
 8013e90:	08013f81 	.word	0x08013f81
 8013e94:	08013f81 	.word	0x08013f81
 8013e98:	08013f81 	.word	0x08013f81
 8013e9c:	08013f81 	.word	0x08013f81
 8013ea0:	08013f81 	.word	0x08013f81
 8013ea4:	08013f81 	.word	0x08013f81
 8013ea8:	08013f81 	.word	0x08013f81
 8013eac:	08013f81 	.word	0x08013f81
 8013eb0:	08013f81 	.word	0x08013f81
 8013eb4:	08013f81 	.word	0x08013f81
 8013eb8:	08013f81 	.word	0x08013f81
 8013ebc:	08013f81 	.word	0x08013f81
 8013ec0:	08013f81 	.word	0x08013f81
 8013ec4:	08013f81 	.word	0x08013f81
 8013ec8:	08013f91 	.word	0x08013f91
 8013ecc:	08013f81 	.word	0x08013f81
 8013ed0:	08013f81 	.word	0x08013f81
 8013ed4:	08013f91 	.word	0x08013f91
 8013ed8:	08013f81 	.word	0x08013f81
 8013edc:	08013f81 	.word	0x08013f81
 8013ee0:	08013f81 	.word	0x08013f81
 8013ee4:	08013f81 	.word	0x08013f81
 8013ee8:	08013f81 	.word	0x08013f81
 8013eec:	08013f91 	.word	0x08013f91
 8013ef0:	3b01      	subs	r3, #1
 8013ef2:	2b1f      	cmp	r3, #31
 8013ef4:	d844      	bhi.n	8013f80 <SPIF_FindChip+0x240>
 8013ef6:	a201      	add	r2, pc, #4	; (adr r2, 8013efc <SPIF_FindChip+0x1bc>)
 8013ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013efc:	08013f95 	.word	0x08013f95
 8013f00:	08013f81 	.word	0x08013f81
 8013f04:	08013f81 	.word	0x08013f81
 8013f08:	08013f95 	.word	0x08013f95
 8013f0c:	08013f81 	.word	0x08013f81
 8013f10:	08013f81 	.word	0x08013f81
 8013f14:	08013f81 	.word	0x08013f81
 8013f18:	08013f81 	.word	0x08013f81
 8013f1c:	08013f81 	.word	0x08013f81
 8013f20:	08013f81 	.word	0x08013f81
 8013f24:	08013f81 	.word	0x08013f81
 8013f28:	08013f81 	.word	0x08013f81
 8013f2c:	08013f81 	.word	0x08013f81
 8013f30:	08013f81 	.word	0x08013f81
 8013f34:	08013f81 	.word	0x08013f81
 8013f38:	08013f81 	.word	0x08013f81
 8013f3c:	08013f81 	.word	0x08013f81
 8013f40:	08013f81 	.word	0x08013f81
 8013f44:	08013f81 	.word	0x08013f81
 8013f48:	08013f81 	.word	0x08013f81
 8013f4c:	08013f81 	.word	0x08013f81
 8013f50:	08013f81 	.word	0x08013f81
 8013f54:	08013f81 	.word	0x08013f81
 8013f58:	08013f81 	.word	0x08013f81
 8013f5c:	08013f81 	.word	0x08013f81
 8013f60:	08013f81 	.word	0x08013f81
 8013f64:	08013f81 	.word	0x08013f81
 8013f68:	08013f95 	.word	0x08013f95
 8013f6c:	08013f81 	.word	0x08013f81
 8013f70:	08013f81 	.word	0x08013f81
 8013f74:	08013f81 	.word	0x08013f81
 8013f78:	08013f95 	.word	0x08013f95
 8013f7c:	2b37      	cmp	r3, #55	; 0x37
 8013f7e:	d00b      	beq.n	8013f98 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	2200      	movs	r2, #0
 8013f84:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 8013f86:	e008      	b.n	8013f9a <SPIF_FindChip+0x25a>
      break;
 8013f88:	bf00      	nop
 8013f8a:	e006      	b.n	8013f9a <SPIF_FindChip+0x25a>
      break;
 8013f8c:	bf00      	nop
 8013f8e:	e004      	b.n	8013f9a <SPIF_FindChip+0x25a>
      break;
 8013f90:	bf00      	nop
 8013f92:	e002      	b.n	8013f9a <SPIF_FindChip+0x25a>
      break;
 8013f94:	bf00      	nop
 8013f96:	e000      	b.n	8013f9a <SPIF_FindChip+0x25a>
      break;
 8013f98:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	7a5b      	ldrb	r3, [r3, #9]
 8013f9e:	3b11      	subs	r3, #17
 8013fa0:	2b0f      	cmp	r3, #15
 8013fa2:	d84e      	bhi.n	8014042 <SPIF_FindChip+0x302>
 8013fa4:	a201      	add	r2, pc, #4	; (adr r2, 8013fac <SPIF_FindChip+0x26c>)
 8013fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013faa:	bf00      	nop
 8013fac:	08013fed 	.word	0x08013fed
 8013fb0:	08013ff5 	.word	0x08013ff5
 8013fb4:	08013ffd 	.word	0x08013ffd
 8013fb8:	08014005 	.word	0x08014005
 8013fbc:	0801400d 	.word	0x0801400d
 8013fc0:	08014015 	.word	0x08014015
 8013fc4:	0801401d 	.word	0x0801401d
 8013fc8:	08014025 	.word	0x08014025
 8013fcc:	0801402f 	.word	0x0801402f
 8013fd0:	08014043 	.word	0x08014043
 8013fd4:	08014043 	.word	0x08014043
 8013fd8:	08014043 	.word	0x08014043
 8013fdc:	08014043 	.word	0x08014043
 8013fe0:	08014043 	.word	0x08014043
 8013fe4:	08014043 	.word	0x08014043
 8013fe8:	08014039 	.word	0x08014039
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	2202      	movs	r2, #2
 8013ff0:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 8013ff2:	e02a      	b.n	801404a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2204      	movs	r2, #4
 8013ff8:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 8013ffa:	e026      	b.n	801404a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	2208      	movs	r2, #8
 8014000:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 8014002:	e022      	b.n	801404a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	2210      	movs	r2, #16
 8014008:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 801400a:	e01e      	b.n	801404a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2220      	movs	r2, #32
 8014010:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 8014012:	e01a      	b.n	801404a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	2240      	movs	r2, #64	; 0x40
 8014018:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 801401a:	e016      	b.n	801404a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	2280      	movs	r2, #128	; 0x80
 8014020:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 8014022:	e012      	b.n	801404a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	f44f 7280 	mov.w	r2, #256	; 0x100
 801402a:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 801402c:	e00d      	b.n	801404a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014034:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 8014036:	e008      	b.n	801404a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801403e:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 8014040:	e003      	b.n	801404a <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	2200      	movs	r2, #0
 8014046:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 8014048:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	69db      	ldr	r3, [r3, #28]
 801404e:	011a      	lsls	r2, r3, #4
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	699b      	ldr	r3, [r3, #24]
 8014058:	031b      	lsls	r3, r3, #12
 801405a:	0a1a      	lsrs	r2, r3, #8
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 8014060:	2301      	movs	r3, #1
 8014062:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8014064:	7dfb      	ldrb	r3, [r7, #23]
}
 8014066:	4618      	mov	r0, r3
 8014068:	3718      	adds	r7, #24
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
 801406e:	bf00      	nop

08014070 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b08a      	sub	sp, #40	; 0x28
 8014074:	af00      	add	r7, sp, #0
 8014076:	60f8      	str	r0, [r7, #12]
 8014078:	60b9      	str	r1, [r7, #8]
 801407a:	607a      	str	r2, [r7, #4]
 801407c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801407e:	2300      	movs	r3, #0
 8014080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8014084:	2300      	movs	r3, #0
 8014086:	623b      	str	r3, [r7, #32]
 8014088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801408a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801408e:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	695b      	ldr	r3, [r3, #20]
 8014094:	68ba      	ldr	r2, [r7, #8]
 8014096:	429a      	cmp	r2, r3
 8014098:	f080 8084 	bcs.w	80141a4 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 801409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801409e:	2bff      	cmp	r3, #255	; 0xff
 80140a0:	f200 8082 	bhi.w	80141a8 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 80140a4:	683a      	ldr	r2, [r7, #0]
 80140a6:	69fb      	ldr	r3, [r7, #28]
 80140a8:	429a      	cmp	r2, r3
 80140aa:	d901      	bls.n	80140b0 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 80140ac:	69fb      	ldr	r3, [r7, #28]
 80140ae:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 80140b0:	68bb      	ldr	r3, [r7, #8]
 80140b2:	021b      	lsls	r3, r3, #8
 80140b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140b6:	4413      	add	r3, r2
 80140b8:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 80140ba:	68f8      	ldr	r0, [r7, #12]
 80140bc:	f7ff fdad 	bl	8013c1a <SPIF_WriteEnable>
 80140c0:	4603      	mov	r3, r0
 80140c2:	f083 0301 	eor.w	r3, r3, #1
 80140c6:	b2db      	uxtb	r3, r3
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d16f      	bne.n	80141ac <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80140cc:	2100      	movs	r1, #0
 80140ce:	68f8      	ldr	r0, [r7, #12]
 80140d0:	f7ff fce1 	bl	8013a96 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	69db      	ldr	r3, [r3, #28]
 80140d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80140dc:	d322      	bcc.n	8014124 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 80140de:	2312      	movs	r3, #18
 80140e0:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 80140e2:	6a3b      	ldr	r3, [r7, #32]
 80140e4:	0e1b      	lsrs	r3, r3, #24
 80140e6:	b2db      	uxtb	r3, r3
 80140e8:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 80140ea:	6a3b      	ldr	r3, [r7, #32]
 80140ec:	0c1b      	lsrs	r3, r3, #16
 80140ee:	b2db      	uxtb	r3, r3
 80140f0:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 80140f2:	6a3b      	ldr	r3, [r7, #32]
 80140f4:	0a1b      	lsrs	r3, r3, #8
 80140f6:	b2db      	uxtb	r3, r3
 80140f8:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 80140fa:	6a3b      	ldr	r3, [r7, #32]
 80140fc:	b2db      	uxtb	r3, r3
 80140fe:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8014100:	f107 0114 	add.w	r1, r7, #20
 8014104:	2364      	movs	r3, #100	; 0x64
 8014106:	2205      	movs	r2, #5
 8014108:	68f8      	ldr	r0, [r7, #12]
 801410a:	f7ff fd18 	bl	8013b3e <SPIF_Transmit>
 801410e:	4603      	mov	r3, r0
 8014110:	f083 0301 	eor.w	r3, r3, #1
 8014114:	b2db      	uxtb	r3, r3
 8014116:	2b00      	cmp	r3, #0
 8014118:	d023      	beq.n	8014162 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 801411a:	2101      	movs	r1, #1
 801411c:	68f8      	ldr	r0, [r7, #12]
 801411e:	f7ff fcba 	bl	8013a96 <SPIF_CsPin>
        break;
 8014122:	e044      	b.n	80141ae <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8014124:	2302      	movs	r3, #2
 8014126:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 8014128:	6a3b      	ldr	r3, [r7, #32]
 801412a:	0c1b      	lsrs	r3, r3, #16
 801412c:	b2db      	uxtb	r3, r3
 801412e:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 8014130:	6a3b      	ldr	r3, [r7, #32]
 8014132:	0a1b      	lsrs	r3, r3, #8
 8014134:	b2db      	uxtb	r3, r3
 8014136:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8014138:	6a3b      	ldr	r3, [r7, #32]
 801413a:	b2db      	uxtb	r3, r3
 801413c:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 801413e:	f107 0114 	add.w	r1, r7, #20
 8014142:	2364      	movs	r3, #100	; 0x64
 8014144:	2204      	movs	r2, #4
 8014146:	68f8      	ldr	r0, [r7, #12]
 8014148:	f7ff fcf9 	bl	8013b3e <SPIF_Transmit>
 801414c:	4603      	mov	r3, r0
 801414e:	f083 0301 	eor.w	r3, r3, #1
 8014152:	b2db      	uxtb	r3, r3
 8014154:	2b00      	cmp	r3, #0
 8014156:	d004      	beq.n	8014162 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8014158:	2101      	movs	r1, #1
 801415a:	68f8      	ldr	r0, [r7, #12]
 801415c:	f7ff fc9b 	bl	8013a96 <SPIF_CsPin>
        break;
 8014160:	e025      	b.n	80141ae <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 8014162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014166:	683a      	ldr	r2, [r7, #0]
 8014168:	6879      	ldr	r1, [r7, #4]
 801416a:	68f8      	ldr	r0, [r7, #12]
 801416c:	f7ff fce7 	bl	8013b3e <SPIF_Transmit>
 8014170:	4603      	mov	r3, r0
 8014172:	f083 0301 	eor.w	r3, r3, #1
 8014176:	b2db      	uxtb	r3, r3
 8014178:	2b00      	cmp	r3, #0
 801417a:	d004      	beq.n	8014186 <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 801417c:	2101      	movs	r1, #1
 801417e:	68f8      	ldr	r0, [r7, #12]
 8014180:	f7ff fc89 	bl	8013a96 <SPIF_CsPin>
      break;
 8014184:	e013      	b.n	80141ae <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 8014186:	2101      	movs	r1, #1
 8014188:	68f8      	ldr	r0, [r7, #12]
 801418a:	f7ff fc84 	bl	8013a96 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 801418e:	2164      	movs	r1, #100	; 0x64
 8014190:	68f8      	ldr	r0, [r7, #12]
 8014192:	f7ff fdaf 	bl	8013cf4 <SPIF_WaitForWriting>
 8014196:	4603      	mov	r3, r0
 8014198:	2b00      	cmp	r3, #0
 801419a:	d008      	beq.n	80141ae <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 801419c:	2301      	movs	r3, #1
 801419e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80141a2:	e004      	b.n	80141ae <SPIF_WriteFn+0x13e>
      break;
 80141a4:	bf00      	nop
 80141a6:	e002      	b.n	80141ae <SPIF_WriteFn+0x13e>
      break;
 80141a8:	bf00      	nop
 80141aa:	e000      	b.n	80141ae <SPIF_WriteFn+0x13e>
      break;
 80141ac:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 80141ae:	68f8      	ldr	r0, [r7, #12]
 80141b0:	f7ff fd57 	bl	8013c62 <SPIF_WriteDisable>
  return retVal;
 80141b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80141b8:	4618      	mov	r0, r3
 80141ba:	3728      	adds	r7, #40	; 0x28
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}

080141c0 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b086      	sub	sp, #24
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	60f8      	str	r0, [r7, #12]
 80141c8:	60b9      	str	r1, [r7, #8]
 80141ca:	607a      	str	r2, [r7, #4]
 80141cc:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80141ce:	2300      	movs	r3, #0
 80141d0:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 80141d2:	2100      	movs	r1, #0
 80141d4:	68f8      	ldr	r0, [r7, #12]
 80141d6:	f7ff fc5e 	bl	8013a96 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	69db      	ldr	r3, [r3, #28]
 80141de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80141e2:	d322      	bcc.n	801422a <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 80141e4:	2313      	movs	r3, #19
 80141e6:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	0e1b      	lsrs	r3, r3, #24
 80141ec:	b2db      	uxtb	r3, r3
 80141ee:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 80141f0:	68bb      	ldr	r3, [r7, #8]
 80141f2:	0c1b      	lsrs	r3, r3, #16
 80141f4:	b2db      	uxtb	r3, r3
 80141f6:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	0a1b      	lsrs	r3, r3, #8
 80141fc:	b2db      	uxtb	r3, r3
 80141fe:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	b2db      	uxtb	r3, r3
 8014204:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8014206:	f107 0110 	add.w	r1, r7, #16
 801420a:	2364      	movs	r3, #100	; 0x64
 801420c:	2205      	movs	r2, #5
 801420e:	68f8      	ldr	r0, [r7, #12]
 8014210:	f7ff fc95 	bl	8013b3e <SPIF_Transmit>
 8014214:	4603      	mov	r3, r0
 8014216:	f083 0301 	eor.w	r3, r3, #1
 801421a:	b2db      	uxtb	r3, r3
 801421c:	2b00      	cmp	r3, #0
 801421e:	d023      	beq.n	8014268 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8014220:	2101      	movs	r1, #1
 8014222:	68f8      	ldr	r0, [r7, #12]
 8014224:	f7ff fc37 	bl	8013a96 <SPIF_CsPin>
        break;
 8014228:	e036      	b.n	8014298 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 801422a:	2303      	movs	r3, #3
 801422c:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 801422e:	68bb      	ldr	r3, [r7, #8]
 8014230:	0c1b      	lsrs	r3, r3, #16
 8014232:	b2db      	uxtb	r3, r3
 8014234:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8014236:	68bb      	ldr	r3, [r7, #8]
 8014238:	0a1b      	lsrs	r3, r3, #8
 801423a:	b2db      	uxtb	r3, r3
 801423c:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 801423e:	68bb      	ldr	r3, [r7, #8]
 8014240:	b2db      	uxtb	r3, r3
 8014242:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8014244:	f107 0110 	add.w	r1, r7, #16
 8014248:	2364      	movs	r3, #100	; 0x64
 801424a:	2204      	movs	r2, #4
 801424c:	68f8      	ldr	r0, [r7, #12]
 801424e:	f7ff fc76 	bl	8013b3e <SPIF_Transmit>
 8014252:	4603      	mov	r3, r0
 8014254:	f083 0301 	eor.w	r3, r3, #1
 8014258:	b2db      	uxtb	r3, r3
 801425a:	2b00      	cmp	r3, #0
 801425c:	d004      	beq.n	8014268 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 801425e:	2101      	movs	r1, #1
 8014260:	68f8      	ldr	r0, [r7, #12]
 8014262:	f7ff fc18 	bl	8013a96 <SPIF_CsPin>
        break;
 8014266:	e017      	b.n	8014298 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8014268:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801426c:	683a      	ldr	r2, [r7, #0]
 801426e:	6879      	ldr	r1, [r7, #4]
 8014270:	68f8      	ldr	r0, [r7, #12]
 8014272:	f7ff fc9b 	bl	8013bac <SPIF_Receive>
 8014276:	4603      	mov	r3, r0
 8014278:	f083 0301 	eor.w	r3, r3, #1
 801427c:	b2db      	uxtb	r3, r3
 801427e:	2b00      	cmp	r3, #0
 8014280:	d004      	beq.n	801428c <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 8014282:	2101      	movs	r1, #1
 8014284:	68f8      	ldr	r0, [r7, #12]
 8014286:	f7ff fc06 	bl	8013a96 <SPIF_CsPin>
      break;
 801428a:	e005      	b.n	8014298 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 801428c:	2101      	movs	r1, #1
 801428e:	68f8      	ldr	r0, [r7, #12]
 8014290:	f7ff fc01 	bl	8013a96 <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8014294:	2301      	movs	r3, #1
 8014296:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8014298:	7dfb      	ldrb	r3, [r7, #23]
}
 801429a:	4618      	mov	r0, r3
 801429c:	3718      	adds	r7, #24
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}

080142a2 <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 80142a2:	b580      	push	{r7, lr}
 80142a4:	b086      	sub	sp, #24
 80142a6:	af00      	add	r7, sp, #0
 80142a8:	60f8      	str	r0, [r7, #12]
 80142aa:	60b9      	str	r1, [r7, #8]
 80142ac:	607a      	str	r2, [r7, #4]
 80142ae:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 80142b0:	2300      	movs	r3, #0
 80142b2:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d03a      	beq.n	8014330 <SPIF_Init+0x8e>
 80142ba:	68bb      	ldr	r3, [r7, #8]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d037      	beq.n	8014330 <SPIF_Init+0x8e>
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d034      	beq.n	8014330 <SPIF_Init+0x8e>
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	7a9b      	ldrb	r3, [r3, #10]
 80142ca:	2b01      	cmp	r3, #1
 80142cc:	d030      	beq.n	8014330 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 80142ce:	2220      	movs	r2, #32
 80142d0:	2100      	movs	r1, #0
 80142d2:	68f8      	ldr	r0, [r7, #12]
 80142d4:	f002 fe2d 	bl	8016f32 <memset>
    Handle->HSpi = HSpi;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	68ba      	ldr	r2, [r7, #8]
 80142dc:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	687a      	ldr	r2, [r7, #4]
 80142e2:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 80142e4:	887a      	ldrh	r2, [r7, #2]
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 80142ea:	2101      	movs	r1, #1
 80142ec:	68f8      	ldr	r0, [r7, #12]
 80142ee:	f7ff fbd2 	bl	8013a96 <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 80142f2:	e002      	b.n	80142fa <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 80142f4:	2001      	movs	r0, #1
 80142f6:	f7ff fba3 	bl	8013a40 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 80142fa:	f7f2 fac1 	bl	8006880 <HAL_GetTick>
 80142fe:	4603      	mov	r3, r0
 8014300:	2b13      	cmp	r3, #19
 8014302:	d9f7      	bls.n	80142f4 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 8014304:	68f8      	ldr	r0, [r7, #12]
 8014306:	f7ff fcac 	bl	8013c62 <SPIF_WriteDisable>
 801430a:	4603      	mov	r3, r0
 801430c:	f083 0301 	eor.w	r3, r3, #1
 8014310:	b2db      	uxtb	r3, r3
 8014312:	2b00      	cmp	r3, #0
 8014314:	d10b      	bne.n	801432e <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 8014316:	68f8      	ldr	r0, [r7, #12]
 8014318:	f7ff fd12 	bl	8013d40 <SPIF_FindChip>
 801431c:	4603      	mov	r3, r0
 801431e:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8014320:	7dfb      	ldrb	r3, [r7, #23]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d004      	beq.n	8014330 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	2201      	movs	r2, #1
 801432a:	729a      	strb	r2, [r3, #10]
 801432c:	e000      	b.n	8014330 <SPIF_Init+0x8e>
      break;
 801432e:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8014330:	7dfb      	ldrb	r3, [r7, #23]
}
 8014332:	4618      	mov	r0, r3
 8014334:	3718      	adds	r7, #24
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}

0801433a <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 801433a:	b580      	push	{r7, lr}
 801433c:	b086      	sub	sp, #24
 801433e:	af00      	add	r7, sp, #0
 8014340:	6078      	str	r0, [r7, #4]
 8014342:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f7ff fb86 	bl	8013a56 <SPIF_Lock>
  bool retVal = false;
 801434a:	2300      	movs	r3, #0
 801434c:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	031b      	lsls	r3, r3, #12
 8014352:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	699b      	ldr	r3, [r3, #24]
 8014358:	683a      	ldr	r2, [r7, #0]
 801435a:	429a      	cmp	r2, r3
 801435c:	d262      	bcs.n	8014424 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 801435e:	6878      	ldr	r0, [r7, #4]
 8014360:	f7ff fc5b 	bl	8013c1a <SPIF_WriteEnable>
 8014364:	4603      	mov	r3, r0
 8014366:	f083 0301 	eor.w	r3, r3, #1
 801436a:	b2db      	uxtb	r3, r3
 801436c:	2b00      	cmp	r3, #0
 801436e:	d15b      	bne.n	8014428 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8014370:	2100      	movs	r1, #0
 8014372:	6878      	ldr	r0, [r7, #4]
 8014374:	f7ff fb8f 	bl	8013a96 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	69db      	ldr	r3, [r3, #28]
 801437c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014380:	d322      	bcc.n	80143c8 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 8014382:	2321      	movs	r3, #33	; 0x21
 8014384:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	0e1b      	lsrs	r3, r3, #24
 801438a:	b2db      	uxtb	r3, r3
 801438c:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 801438e:	693b      	ldr	r3, [r7, #16]
 8014390:	0c1b      	lsrs	r3, r3, #16
 8014392:	b2db      	uxtb	r3, r3
 8014394:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 8014396:	693b      	ldr	r3, [r7, #16]
 8014398:	0a1b      	lsrs	r3, r3, #8
 801439a:	b2db      	uxtb	r3, r3
 801439c:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 801439e:	693b      	ldr	r3, [r7, #16]
 80143a0:	b2db      	uxtb	r3, r3
 80143a2:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80143a4:	f107 0108 	add.w	r1, r7, #8
 80143a8:	2364      	movs	r3, #100	; 0x64
 80143aa:	2205      	movs	r2, #5
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f7ff fbc6 	bl	8013b3e <SPIF_Transmit>
 80143b2:	4603      	mov	r3, r0
 80143b4:	f083 0301 	eor.w	r3, r3, #1
 80143b8:	b2db      	uxtb	r3, r3
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d023      	beq.n	8014406 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80143be:	2101      	movs	r1, #1
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	f7ff fb68 	bl	8013a96 <SPIF_CsPin>
        break;
 80143c6:	e030      	b.n	801442a <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 80143c8:	2320      	movs	r3, #32
 80143ca:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 80143cc:	693b      	ldr	r3, [r7, #16]
 80143ce:	0c1b      	lsrs	r3, r3, #16
 80143d0:	b2db      	uxtb	r3, r3
 80143d2:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 80143d4:	693b      	ldr	r3, [r7, #16]
 80143d6:	0a1b      	lsrs	r3, r3, #8
 80143d8:	b2db      	uxtb	r3, r3
 80143da:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 80143dc:	693b      	ldr	r3, [r7, #16]
 80143de:	b2db      	uxtb	r3, r3
 80143e0:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80143e2:	f107 0108 	add.w	r1, r7, #8
 80143e6:	2364      	movs	r3, #100	; 0x64
 80143e8:	2204      	movs	r2, #4
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f7ff fba7 	bl	8013b3e <SPIF_Transmit>
 80143f0:	4603      	mov	r3, r0
 80143f2:	f083 0301 	eor.w	r3, r3, #1
 80143f6:	b2db      	uxtb	r3, r3
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d004      	beq.n	8014406 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80143fc:	2101      	movs	r1, #1
 80143fe:	6878      	ldr	r0, [r7, #4]
 8014400:	f7ff fb49 	bl	8013a96 <SPIF_CsPin>
        break;
 8014404:	e011      	b.n	801442a <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8014406:	2101      	movs	r1, #1
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	f7ff fb44 	bl	8013a96 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 801440e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014412:	6878      	ldr	r0, [r7, #4]
 8014414:	f7ff fc6e 	bl	8013cf4 <SPIF_WaitForWriting>
 8014418:	4603      	mov	r3, r0
 801441a:	2b00      	cmp	r3, #0
 801441c:	d005      	beq.n	801442a <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 801441e:	2301      	movs	r3, #1
 8014420:	75fb      	strb	r3, [r7, #23]
 8014422:	e002      	b.n	801442a <SPIF_EraseSector+0xf0>
      break;
 8014424:	bf00      	nop
 8014426:	e000      	b.n	801442a <SPIF_EraseSector+0xf0>
      break;
 8014428:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 801442a:	6878      	ldr	r0, [r7, #4]
 801442c:	f7ff fc19 	bl	8013c62 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8014430:	6878      	ldr	r0, [r7, #4]
 8014432:	f7ff fb23 	bl	8013a7c <SPIF_UnLock>
  return retVal;
 8014436:	7dfb      	ldrb	r3, [r7, #23]
}
 8014438:	4618      	mov	r0, r3
 801443a:	3718      	adds	r7, #24
 801443c:	46bd      	mov	sp, r7
 801443e:	bd80      	pop	{r7, pc}

08014440 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b088      	sub	sp, #32
 8014444:	af02      	add	r7, sp, #8
 8014446:	60f8      	str	r0, [r7, #12]
 8014448:	60b9      	str	r1, [r7, #8]
 801444a:	607a      	str	r2, [r7, #4]
 801444c:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 801444e:	68f8      	ldr	r0, [r7, #12]
 8014450:	f7ff fb01 	bl	8013a56 <SPIF_Lock>
  bool retVal = false;
 8014454:	2300      	movs	r3, #0
 8014456:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 8014458:	6a3b      	ldr	r3, [r7, #32]
 801445a:	9300      	str	r3, [sp, #0]
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	687a      	ldr	r2, [r7, #4]
 8014460:	68b9      	ldr	r1, [r7, #8]
 8014462:	68f8      	ldr	r0, [r7, #12]
 8014464:	f7ff fe04 	bl	8014070 <SPIF_WriteFn>
 8014468:	4603      	mov	r3, r0
 801446a:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 801446c:	68f8      	ldr	r0, [r7, #12]
 801446e:	f7ff fb05 	bl	8013a7c <SPIF_UnLock>
  return retVal;
 8014472:	7dfb      	ldrb	r3, [r7, #23]
}
 8014474:	4618      	mov	r0, r3
 8014476:	3718      	adds	r7, #24
 8014478:	46bd      	mov	sp, r7
 801447a:	bd80      	pop	{r7, pc}

0801447c <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b088      	sub	sp, #32
 8014480:	af00      	add	r7, sp, #0
 8014482:	60f8      	str	r0, [r7, #12]
 8014484:	60b9      	str	r1, [r7, #8]
 8014486:	607a      	str	r2, [r7, #4]
 8014488:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 801448a:	68f8      	ldr	r0, [r7, #12]
 801448c:	f7ff fae3 	bl	8013a56 <SPIF_Lock>
  bool retVal = false;
 8014490:	2300      	movs	r3, #0
 8014492:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 8014494:	68bb      	ldr	r3, [r7, #8]
 8014496:	021b      	lsls	r3, r3, #8
 8014498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801449a:	4413      	add	r3, r2
 801449c:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 801449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144a0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80144a4:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 80144a6:	683a      	ldr	r2, [r7, #0]
 80144a8:	697b      	ldr	r3, [r7, #20]
 80144aa:	429a      	cmp	r2, r3
 80144ac:	d901      	bls.n	80144b2 <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 80144ae:	697b      	ldr	r3, [r7, #20]
 80144b0:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 80144b2:	683b      	ldr	r3, [r7, #0]
 80144b4:	687a      	ldr	r2, [r7, #4]
 80144b6:	69b9      	ldr	r1, [r7, #24]
 80144b8:	68f8      	ldr	r0, [r7, #12]
 80144ba:	f7ff fe81 	bl	80141c0 <SPIF_ReadFn>
 80144be:	4603      	mov	r3, r0
 80144c0:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 80144c2:	68f8      	ldr	r0, [r7, #12]
 80144c4:	f7ff fada 	bl	8013a7c <SPIF_UnLock>
  return retVal;
 80144c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	3720      	adds	r7, #32
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd80      	pop	{r7, pc}
	...

080144d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80144d8:	2200      	movs	r2, #0
 80144da:	4912      	ldr	r1, [pc, #72]	; (8014524 <MX_USB_DEVICE_Init+0x50>)
 80144dc:	4812      	ldr	r0, [pc, #72]	; (8014528 <MX_USB_DEVICE_Init+0x54>)
 80144de:	f7fe f81f 	bl	8012520 <USBD_Init>
 80144e2:	4603      	mov	r3, r0
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d001      	beq.n	80144ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80144e8:	f7ed fc95 	bl	8001e16 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80144ec:	490f      	ldr	r1, [pc, #60]	; (801452c <MX_USB_DEVICE_Init+0x58>)
 80144ee:	480e      	ldr	r0, [pc, #56]	; (8014528 <MX_USB_DEVICE_Init+0x54>)
 80144f0:	f7fe f846 	bl	8012580 <USBD_RegisterClass>
 80144f4:	4603      	mov	r3, r0
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d001      	beq.n	80144fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80144fa:	f7ed fc8c 	bl	8001e16 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80144fe:	490c      	ldr	r1, [pc, #48]	; (8014530 <MX_USB_DEVICE_Init+0x5c>)
 8014500:	4809      	ldr	r0, [pc, #36]	; (8014528 <MX_USB_DEVICE_Init+0x54>)
 8014502:	f7fd ff3d 	bl	8012380 <USBD_CDC_RegisterInterface>
 8014506:	4603      	mov	r3, r0
 8014508:	2b00      	cmp	r3, #0
 801450a:	d001      	beq.n	8014510 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801450c:	f7ed fc83 	bl	8001e16 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014510:	4805      	ldr	r0, [pc, #20]	; (8014528 <MX_USB_DEVICE_Init+0x54>)
 8014512:	f7fe f86b 	bl	80125ec <USBD_Start>
 8014516:	4603      	mov	r3, r0
 8014518:	2b00      	cmp	r3, #0
 801451a:	d001      	beq.n	8014520 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801451c:	f7ed fc7b 	bl	8001e16 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014520:	bf00      	nop
 8014522:	bd80      	pop	{r7, pc}
 8014524:	200000d0 	.word	0x200000d0
 8014528:	2000127c 	.word	0x2000127c
 801452c:	2000003c 	.word	0x2000003c
 8014530:	200000bc 	.word	0x200000bc

08014534 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014538:	2200      	movs	r2, #0
 801453a:	4905      	ldr	r1, [pc, #20]	; (8014550 <CDC_Init_FS+0x1c>)
 801453c:	4805      	ldr	r0, [pc, #20]	; (8014554 <CDC_Init_FS+0x20>)
 801453e:	f7fd ff39 	bl	80123b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014542:	4905      	ldr	r1, [pc, #20]	; (8014558 <CDC_Init_FS+0x24>)
 8014544:	4803      	ldr	r0, [pc, #12]	; (8014554 <CDC_Init_FS+0x20>)
 8014546:	f7fd ff57 	bl	80123f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801454a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801454c:	4618      	mov	r0, r3
 801454e:	bd80      	pop	{r7, pc}
 8014550:	20001958 	.word	0x20001958
 8014554:	2000127c 	.word	0x2000127c
 8014558:	20001558 	.word	0x20001558

0801455c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801455c:	b480      	push	{r7}
 801455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014560:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014562:	4618      	mov	r0, r3
 8014564:	46bd      	mov	sp, r7
 8014566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456a:	4770      	bx	lr

0801456c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801456c:	b480      	push	{r7}
 801456e:	b083      	sub	sp, #12
 8014570:	af00      	add	r7, sp, #0
 8014572:	4603      	mov	r3, r0
 8014574:	6039      	str	r1, [r7, #0]
 8014576:	71fb      	strb	r3, [r7, #7]
 8014578:	4613      	mov	r3, r2
 801457a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801457c:	79fb      	ldrb	r3, [r7, #7]
 801457e:	2b23      	cmp	r3, #35	; 0x23
 8014580:	d84a      	bhi.n	8014618 <CDC_Control_FS+0xac>
 8014582:	a201      	add	r2, pc, #4	; (adr r2, 8014588 <CDC_Control_FS+0x1c>)
 8014584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014588:	08014619 	.word	0x08014619
 801458c:	08014619 	.word	0x08014619
 8014590:	08014619 	.word	0x08014619
 8014594:	08014619 	.word	0x08014619
 8014598:	08014619 	.word	0x08014619
 801459c:	08014619 	.word	0x08014619
 80145a0:	08014619 	.word	0x08014619
 80145a4:	08014619 	.word	0x08014619
 80145a8:	08014619 	.word	0x08014619
 80145ac:	08014619 	.word	0x08014619
 80145b0:	08014619 	.word	0x08014619
 80145b4:	08014619 	.word	0x08014619
 80145b8:	08014619 	.word	0x08014619
 80145bc:	08014619 	.word	0x08014619
 80145c0:	08014619 	.word	0x08014619
 80145c4:	08014619 	.word	0x08014619
 80145c8:	08014619 	.word	0x08014619
 80145cc:	08014619 	.word	0x08014619
 80145d0:	08014619 	.word	0x08014619
 80145d4:	08014619 	.word	0x08014619
 80145d8:	08014619 	.word	0x08014619
 80145dc:	08014619 	.word	0x08014619
 80145e0:	08014619 	.word	0x08014619
 80145e4:	08014619 	.word	0x08014619
 80145e8:	08014619 	.word	0x08014619
 80145ec:	08014619 	.word	0x08014619
 80145f0:	08014619 	.word	0x08014619
 80145f4:	08014619 	.word	0x08014619
 80145f8:	08014619 	.word	0x08014619
 80145fc:	08014619 	.word	0x08014619
 8014600:	08014619 	.word	0x08014619
 8014604:	08014619 	.word	0x08014619
 8014608:	08014619 	.word	0x08014619
 801460c:	08014619 	.word	0x08014619
 8014610:	08014619 	.word	0x08014619
 8014614:	08014619 	.word	0x08014619
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014618:	bf00      	nop
  }

  return (USBD_OK);
 801461a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801461c:	4618      	mov	r0, r3
 801461e:	370c      	adds	r7, #12
 8014620:	46bd      	mov	sp, r7
 8014622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014626:	4770      	bx	lr

08014628 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b082      	sub	sp, #8
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
 8014630:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014632:	6879      	ldr	r1, [r7, #4]
 8014634:	4805      	ldr	r0, [pc, #20]	; (801464c <CDC_Receive_FS+0x24>)
 8014636:	f7fd fedf 	bl	80123f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801463a:	4804      	ldr	r0, [pc, #16]	; (801464c <CDC_Receive_FS+0x24>)
 801463c:	f7fd ff3a 	bl	80124b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014640:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014642:	4618      	mov	r0, r3
 8014644:	3708      	adds	r7, #8
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}
 801464a:	bf00      	nop
 801464c:	2000127c 	.word	0x2000127c

08014650 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b084      	sub	sp, #16
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	460b      	mov	r3, r1
 801465a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801465c:	2300      	movs	r3, #0
 801465e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014660:	4b0d      	ldr	r3, [pc, #52]	; (8014698 <CDC_Transmit_FS+0x48>)
 8014662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014666:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014668:	68bb      	ldr	r3, [r7, #8]
 801466a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801466e:	2b00      	cmp	r3, #0
 8014670:	d001      	beq.n	8014676 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014672:	2301      	movs	r3, #1
 8014674:	e00b      	b.n	801468e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014676:	887b      	ldrh	r3, [r7, #2]
 8014678:	461a      	mov	r2, r3
 801467a:	6879      	ldr	r1, [r7, #4]
 801467c:	4806      	ldr	r0, [pc, #24]	; (8014698 <CDC_Transmit_FS+0x48>)
 801467e:	f7fd fe99 	bl	80123b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014682:	4805      	ldr	r0, [pc, #20]	; (8014698 <CDC_Transmit_FS+0x48>)
 8014684:	f7fd fed6 	bl	8012434 <USBD_CDC_TransmitPacket>
 8014688:	4603      	mov	r3, r0
 801468a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801468c:	7bfb      	ldrb	r3, [r7, #15]
}
 801468e:	4618      	mov	r0, r3
 8014690:	3710      	adds	r7, #16
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	2000127c 	.word	0x2000127c

0801469c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801469c:	b480      	push	{r7}
 801469e:	b087      	sub	sp, #28
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	60f8      	str	r0, [r7, #12]
 80146a4:	60b9      	str	r1, [r7, #8]
 80146a6:	4613      	mov	r3, r2
 80146a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80146aa:	2300      	movs	r3, #0
 80146ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80146ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	371c      	adds	r7, #28
 80146b6:	46bd      	mov	sp, r7
 80146b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146bc:	4770      	bx	lr
	...

080146c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146c0:	b480      	push	{r7}
 80146c2:	b083      	sub	sp, #12
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	4603      	mov	r3, r0
 80146c8:	6039      	str	r1, [r7, #0]
 80146ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	2212      	movs	r2, #18
 80146d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80146d2:	4b03      	ldr	r3, [pc, #12]	; (80146e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80146d4:	4618      	mov	r0, r3
 80146d6:	370c      	adds	r7, #12
 80146d8:	46bd      	mov	sp, r7
 80146da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146de:	4770      	bx	lr
 80146e0:	200000f0 	.word	0x200000f0

080146e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146e4:	b480      	push	{r7}
 80146e6:	b083      	sub	sp, #12
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	4603      	mov	r3, r0
 80146ec:	6039      	str	r1, [r7, #0]
 80146ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80146f0:	683b      	ldr	r3, [r7, #0]
 80146f2:	2204      	movs	r2, #4
 80146f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80146f6:	4b03      	ldr	r3, [pc, #12]	; (8014704 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80146f8:	4618      	mov	r0, r3
 80146fa:	370c      	adds	r7, #12
 80146fc:	46bd      	mov	sp, r7
 80146fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014702:	4770      	bx	lr
 8014704:	20000110 	.word	0x20000110

08014708 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b082      	sub	sp, #8
 801470c:	af00      	add	r7, sp, #0
 801470e:	4603      	mov	r3, r0
 8014710:	6039      	str	r1, [r7, #0]
 8014712:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014714:	79fb      	ldrb	r3, [r7, #7]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d105      	bne.n	8014726 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801471a:	683a      	ldr	r2, [r7, #0]
 801471c:	4907      	ldr	r1, [pc, #28]	; (801473c <USBD_FS_ProductStrDescriptor+0x34>)
 801471e:	4808      	ldr	r0, [pc, #32]	; (8014740 <USBD_FS_ProductStrDescriptor+0x38>)
 8014720:	f7ff f8ae 	bl	8013880 <USBD_GetString>
 8014724:	e004      	b.n	8014730 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014726:	683a      	ldr	r2, [r7, #0]
 8014728:	4904      	ldr	r1, [pc, #16]	; (801473c <USBD_FS_ProductStrDescriptor+0x34>)
 801472a:	4805      	ldr	r0, [pc, #20]	; (8014740 <USBD_FS_ProductStrDescriptor+0x38>)
 801472c:	f7ff f8a8 	bl	8013880 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014730:	4b02      	ldr	r3, [pc, #8]	; (801473c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014732:	4618      	mov	r0, r3
 8014734:	3708      	adds	r7, #8
 8014736:	46bd      	mov	sp, r7
 8014738:	bd80      	pop	{r7, pc}
 801473a:	bf00      	nop
 801473c:	20001d58 	.word	0x20001d58
 8014740:	0801bbf4 	.word	0x0801bbf4

08014744 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b082      	sub	sp, #8
 8014748:	af00      	add	r7, sp, #0
 801474a:	4603      	mov	r3, r0
 801474c:	6039      	str	r1, [r7, #0]
 801474e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014750:	683a      	ldr	r2, [r7, #0]
 8014752:	4904      	ldr	r1, [pc, #16]	; (8014764 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014754:	4804      	ldr	r0, [pc, #16]	; (8014768 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014756:	f7ff f893 	bl	8013880 <USBD_GetString>
  return USBD_StrDesc;
 801475a:	4b02      	ldr	r3, [pc, #8]	; (8014764 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801475c:	4618      	mov	r0, r3
 801475e:	3708      	adds	r7, #8
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}
 8014764:	20001d58 	.word	0x20001d58
 8014768:	0801bc00 	.word	0x0801bc00

0801476c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b082      	sub	sp, #8
 8014770:	af00      	add	r7, sp, #0
 8014772:	4603      	mov	r3, r0
 8014774:	6039      	str	r1, [r7, #0]
 8014776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014778:	683b      	ldr	r3, [r7, #0]
 801477a:	221a      	movs	r2, #26
 801477c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801477e:	f000 f855 	bl	801482c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014782:	4b02      	ldr	r3, [pc, #8]	; (801478c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014784:	4618      	mov	r0, r3
 8014786:	3708      	adds	r7, #8
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}
 801478c:	20000114 	.word	0x20000114

08014790 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b082      	sub	sp, #8
 8014794:	af00      	add	r7, sp, #0
 8014796:	4603      	mov	r3, r0
 8014798:	6039      	str	r1, [r7, #0]
 801479a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801479c:	79fb      	ldrb	r3, [r7, #7]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d105      	bne.n	80147ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80147a2:	683a      	ldr	r2, [r7, #0]
 80147a4:	4907      	ldr	r1, [pc, #28]	; (80147c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80147a6:	4808      	ldr	r0, [pc, #32]	; (80147c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80147a8:	f7ff f86a 	bl	8013880 <USBD_GetString>
 80147ac:	e004      	b.n	80147b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80147ae:	683a      	ldr	r2, [r7, #0]
 80147b0:	4904      	ldr	r1, [pc, #16]	; (80147c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80147b2:	4805      	ldr	r0, [pc, #20]	; (80147c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80147b4:	f7ff f864 	bl	8013880 <USBD_GetString>
  }
  return USBD_StrDesc;
 80147b8:	4b02      	ldr	r3, [pc, #8]	; (80147c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80147ba:	4618      	mov	r0, r3
 80147bc:	3708      	adds	r7, #8
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}
 80147c2:	bf00      	nop
 80147c4:	20001d58 	.word	0x20001d58
 80147c8:	0801bc14 	.word	0x0801bc14

080147cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b082      	sub	sp, #8
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	4603      	mov	r3, r0
 80147d4:	6039      	str	r1, [r7, #0]
 80147d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80147d8:	79fb      	ldrb	r3, [r7, #7]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d105      	bne.n	80147ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80147de:	683a      	ldr	r2, [r7, #0]
 80147e0:	4907      	ldr	r1, [pc, #28]	; (8014800 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80147e2:	4808      	ldr	r0, [pc, #32]	; (8014804 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80147e4:	f7ff f84c 	bl	8013880 <USBD_GetString>
 80147e8:	e004      	b.n	80147f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80147ea:	683a      	ldr	r2, [r7, #0]
 80147ec:	4904      	ldr	r1, [pc, #16]	; (8014800 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80147ee:	4805      	ldr	r0, [pc, #20]	; (8014804 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80147f0:	f7ff f846 	bl	8013880 <USBD_GetString>
  }
  return USBD_StrDesc;
 80147f4:	4b02      	ldr	r3, [pc, #8]	; (8014800 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80147f6:	4618      	mov	r0, r3
 80147f8:	3708      	adds	r7, #8
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bd80      	pop	{r7, pc}
 80147fe:	bf00      	nop
 8014800:	20001d58 	.word	0x20001d58
 8014804:	0801bc20 	.word	0x0801bc20

08014808 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014808:	b480      	push	{r7}
 801480a:	b083      	sub	sp, #12
 801480c:	af00      	add	r7, sp, #0
 801480e:	4603      	mov	r3, r0
 8014810:	6039      	str	r1, [r7, #0]
 8014812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8014814:	683b      	ldr	r3, [r7, #0]
 8014816:	220c      	movs	r2, #12
 8014818:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801481a:	4b03      	ldr	r3, [pc, #12]	; (8014828 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801481c:	4618      	mov	r0, r3
 801481e:	370c      	adds	r7, #12
 8014820:	46bd      	mov	sp, r7
 8014822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014826:	4770      	bx	lr
 8014828:	20000104 	.word	0x20000104

0801482c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b084      	sub	sp, #16
 8014830:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014832:	4b0f      	ldr	r3, [pc, #60]	; (8014870 <Get_SerialNum+0x44>)
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014838:	4b0e      	ldr	r3, [pc, #56]	; (8014874 <Get_SerialNum+0x48>)
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801483e:	4b0e      	ldr	r3, [pc, #56]	; (8014878 <Get_SerialNum+0x4c>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014844:	68fa      	ldr	r2, [r7, #12]
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	4413      	add	r3, r2
 801484a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d009      	beq.n	8014866 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014852:	2208      	movs	r2, #8
 8014854:	4909      	ldr	r1, [pc, #36]	; (801487c <Get_SerialNum+0x50>)
 8014856:	68f8      	ldr	r0, [r7, #12]
 8014858:	f000 f814 	bl	8014884 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801485c:	2204      	movs	r2, #4
 801485e:	4908      	ldr	r1, [pc, #32]	; (8014880 <Get_SerialNum+0x54>)
 8014860:	68b8      	ldr	r0, [r7, #8]
 8014862:	f000 f80f 	bl	8014884 <IntToUnicode>
  }
}
 8014866:	bf00      	nop
 8014868:	3710      	adds	r7, #16
 801486a:	46bd      	mov	sp, r7
 801486c:	bd80      	pop	{r7, pc}
 801486e:	bf00      	nop
 8014870:	1fff7590 	.word	0x1fff7590
 8014874:	1fff7594 	.word	0x1fff7594
 8014878:	1fff7598 	.word	0x1fff7598
 801487c:	20000116 	.word	0x20000116
 8014880:	20000126 	.word	0x20000126

08014884 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014884:	b480      	push	{r7}
 8014886:	b087      	sub	sp, #28
 8014888:	af00      	add	r7, sp, #0
 801488a:	60f8      	str	r0, [r7, #12]
 801488c:	60b9      	str	r1, [r7, #8]
 801488e:	4613      	mov	r3, r2
 8014890:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014892:	2300      	movs	r3, #0
 8014894:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014896:	2300      	movs	r3, #0
 8014898:	75fb      	strb	r3, [r7, #23]
 801489a:	e027      	b.n	80148ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	0f1b      	lsrs	r3, r3, #28
 80148a0:	2b09      	cmp	r3, #9
 80148a2:	d80b      	bhi.n	80148bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	0f1b      	lsrs	r3, r3, #28
 80148a8:	b2da      	uxtb	r2, r3
 80148aa:	7dfb      	ldrb	r3, [r7, #23]
 80148ac:	005b      	lsls	r3, r3, #1
 80148ae:	4619      	mov	r1, r3
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	440b      	add	r3, r1
 80148b4:	3230      	adds	r2, #48	; 0x30
 80148b6:	b2d2      	uxtb	r2, r2
 80148b8:	701a      	strb	r2, [r3, #0]
 80148ba:	e00a      	b.n	80148d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	0f1b      	lsrs	r3, r3, #28
 80148c0:	b2da      	uxtb	r2, r3
 80148c2:	7dfb      	ldrb	r3, [r7, #23]
 80148c4:	005b      	lsls	r3, r3, #1
 80148c6:	4619      	mov	r1, r3
 80148c8:	68bb      	ldr	r3, [r7, #8]
 80148ca:	440b      	add	r3, r1
 80148cc:	3237      	adds	r2, #55	; 0x37
 80148ce:	b2d2      	uxtb	r2, r2
 80148d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	011b      	lsls	r3, r3, #4
 80148d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80148d8:	7dfb      	ldrb	r3, [r7, #23]
 80148da:	005b      	lsls	r3, r3, #1
 80148dc:	3301      	adds	r3, #1
 80148de:	68ba      	ldr	r2, [r7, #8]
 80148e0:	4413      	add	r3, r2
 80148e2:	2200      	movs	r2, #0
 80148e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80148e6:	7dfb      	ldrb	r3, [r7, #23]
 80148e8:	3301      	adds	r3, #1
 80148ea:	75fb      	strb	r3, [r7, #23]
 80148ec:	7dfa      	ldrb	r2, [r7, #23]
 80148ee:	79fb      	ldrb	r3, [r7, #7]
 80148f0:	429a      	cmp	r2, r3
 80148f2:	d3d3      	bcc.n	801489c <IntToUnicode+0x18>
  }
}
 80148f4:	bf00      	nop
 80148f6:	bf00      	nop
 80148f8:	371c      	adds	r7, #28
 80148fa:	46bd      	mov	sp, r7
 80148fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014900:	4770      	bx	lr
	...

08014904 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b084      	sub	sp, #16
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	4a0d      	ldr	r2, [pc, #52]	; (8014948 <HAL_PCD_MspInit+0x44>)
 8014912:	4293      	cmp	r3, r2
 8014914:	d113      	bne.n	801493e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8014916:	4b0d      	ldr	r3, [pc, #52]	; (801494c <HAL_PCD_MspInit+0x48>)
 8014918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801491a:	4a0c      	ldr	r2, [pc, #48]	; (801494c <HAL_PCD_MspInit+0x48>)
 801491c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014920:	6593      	str	r3, [r2, #88]	; 0x58
 8014922:	4b0a      	ldr	r3, [pc, #40]	; (801494c <HAL_PCD_MspInit+0x48>)
 8014924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014926:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801492a:	60fb      	str	r3, [r7, #12]
 801492c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801492e:	2200      	movs	r2, #0
 8014930:	2100      	movs	r1, #0
 8014932:	2043      	movs	r0, #67	; 0x43
 8014934:	f7f3 fb4f 	bl	8007fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8014938:	2043      	movs	r0, #67	; 0x43
 801493a:	f7f3 fb68 	bl	800800e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801493e:	bf00      	nop
 8014940:	3710      	adds	r7, #16
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}
 8014946:	bf00      	nop
 8014948:	40006800 	.word	0x40006800
 801494c:	40021000 	.word	0x40021000

08014950 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014950:	b580      	push	{r7, lr}
 8014952:	b082      	sub	sp, #8
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8014964:	4619      	mov	r1, r3
 8014966:	4610      	mov	r0, r2
 8014968:	f7fd fe8d 	bl	8012686 <USBD_LL_SetupStage>
}
 801496c:	bf00      	nop
 801496e:	3708      	adds	r7, #8
 8014970:	46bd      	mov	sp, r7
 8014972:	bd80      	pop	{r7, pc}

08014974 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b082      	sub	sp, #8
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
 801497c:	460b      	mov	r3, r1
 801497e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8014986:	78fa      	ldrb	r2, [r7, #3]
 8014988:	6879      	ldr	r1, [r7, #4]
 801498a:	4613      	mov	r3, r2
 801498c:	009b      	lsls	r3, r3, #2
 801498e:	4413      	add	r3, r2
 8014990:	00db      	lsls	r3, r3, #3
 8014992:	440b      	add	r3, r1
 8014994:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8014998:	681a      	ldr	r2, [r3, #0]
 801499a:	78fb      	ldrb	r3, [r7, #3]
 801499c:	4619      	mov	r1, r3
 801499e:	f7fd fec7 	bl	8012730 <USBD_LL_DataOutStage>
}
 80149a2:	bf00      	nop
 80149a4:	3708      	adds	r7, #8
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bd80      	pop	{r7, pc}

080149aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149aa:	b580      	push	{r7, lr}
 80149ac:	b082      	sub	sp, #8
 80149ae:	af00      	add	r7, sp, #0
 80149b0:	6078      	str	r0, [r7, #4]
 80149b2:	460b      	mov	r3, r1
 80149b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 80149bc:	78fa      	ldrb	r2, [r7, #3]
 80149be:	6879      	ldr	r1, [r7, #4]
 80149c0:	4613      	mov	r3, r2
 80149c2:	009b      	lsls	r3, r3, #2
 80149c4:	4413      	add	r3, r2
 80149c6:	00db      	lsls	r3, r3, #3
 80149c8:	440b      	add	r3, r1
 80149ca:	333c      	adds	r3, #60	; 0x3c
 80149cc:	681a      	ldr	r2, [r3, #0]
 80149ce:	78fb      	ldrb	r3, [r7, #3]
 80149d0:	4619      	mov	r1, r3
 80149d2:	f7fd ff60 	bl	8012896 <USBD_LL_DataInStage>
}
 80149d6:	bf00      	nop
 80149d8:	3708      	adds	r7, #8
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd80      	pop	{r7, pc}

080149de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149de:	b580      	push	{r7, lr}
 80149e0:	b082      	sub	sp, #8
 80149e2:	af00      	add	r7, sp, #0
 80149e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80149ec:	4618      	mov	r0, r3
 80149ee:	f7fe f89a 	bl	8012b26 <USBD_LL_SOF>
}
 80149f2:	bf00      	nop
 80149f4:	3708      	adds	r7, #8
 80149f6:	46bd      	mov	sp, r7
 80149f8:	bd80      	pop	{r7, pc}

080149fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149fa:	b580      	push	{r7, lr}
 80149fc:	b084      	sub	sp, #16
 80149fe:	af00      	add	r7, sp, #0
 8014a00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014a02:	2301      	movs	r3, #1
 8014a04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	689b      	ldr	r3, [r3, #8]
 8014a0a:	2b02      	cmp	r3, #2
 8014a0c:	d001      	beq.n	8014a12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014a0e:	f7ed fa02 	bl	8001e16 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8014a18:	7bfa      	ldrb	r2, [r7, #15]
 8014a1a:	4611      	mov	r1, r2
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	f7fe f83e 	bl	8012a9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8014a28:	4618      	mov	r0, r3
 8014a2a:	f7fd ffe6 	bl	80129fa <USBD_LL_Reset>
}
 8014a2e:	bf00      	nop
 8014a30:	3710      	adds	r7, #16
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd80      	pop	{r7, pc}
	...

08014a38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b082      	sub	sp, #8
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8014a46:	4618      	mov	r0, r3
 8014a48:	f7fe f839 	bl	8012abe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	699b      	ldr	r3, [r3, #24]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d005      	beq.n	8014a60 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014a54:	4b04      	ldr	r3, [pc, #16]	; (8014a68 <HAL_PCD_SuspendCallback+0x30>)
 8014a56:	691b      	ldr	r3, [r3, #16]
 8014a58:	4a03      	ldr	r2, [pc, #12]	; (8014a68 <HAL_PCD_SuspendCallback+0x30>)
 8014a5a:	f043 0306 	orr.w	r3, r3, #6
 8014a5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014a60:	bf00      	nop
 8014a62:	3708      	adds	r7, #8
 8014a64:	46bd      	mov	sp, r7
 8014a66:	bd80      	pop	{r7, pc}
 8014a68:	e000ed00 	.word	0xe000ed00

08014a6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b082      	sub	sp, #8
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	699b      	ldr	r3, [r3, #24]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d007      	beq.n	8014a8c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014a7c:	4b08      	ldr	r3, [pc, #32]	; (8014aa0 <HAL_PCD_ResumeCallback+0x34>)
 8014a7e:	691b      	ldr	r3, [r3, #16]
 8014a80:	4a07      	ldr	r2, [pc, #28]	; (8014aa0 <HAL_PCD_ResumeCallback+0x34>)
 8014a82:	f023 0306 	bic.w	r3, r3, #6
 8014a86:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8014a88:	f000 fab6 	bl	8014ff8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8014a92:	4618      	mov	r0, r3
 8014a94:	f7fe f82f 	bl	8012af6 <USBD_LL_Resume>
}
 8014a98:	bf00      	nop
 8014a9a:	3708      	adds	r7, #8
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bd80      	pop	{r7, pc}
 8014aa0:	e000ed00 	.word	0xe000ed00

08014aa4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b082      	sub	sp, #8
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8014aac:	f7f6 fb1a 	bl	800b0e4 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8014ab0:	4a2b      	ldr	r2, [pc, #172]	; (8014b60 <USBD_LL_Init+0xbc>)
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	4a29      	ldr	r2, [pc, #164]	; (8014b60 <USBD_LL_Init+0xbc>)
 8014abc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 8014ac0:	4b27      	ldr	r3, [pc, #156]	; (8014b60 <USBD_LL_Init+0xbc>)
 8014ac2:	4a28      	ldr	r2, [pc, #160]	; (8014b64 <USBD_LL_Init+0xc0>)
 8014ac4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8014ac6:	4b26      	ldr	r3, [pc, #152]	; (8014b60 <USBD_LL_Init+0xbc>)
 8014ac8:	2208      	movs	r2, #8
 8014aca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014acc:	4b24      	ldr	r3, [pc, #144]	; (8014b60 <USBD_LL_Init+0xbc>)
 8014ace:	2202      	movs	r2, #2
 8014ad0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014ad2:	4b23      	ldr	r3, [pc, #140]	; (8014b60 <USBD_LL_Init+0xbc>)
 8014ad4:	2202      	movs	r2, #2
 8014ad6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8014ad8:	4b21      	ldr	r3, [pc, #132]	; (8014b60 <USBD_LL_Init+0xbc>)
 8014ada:	2200      	movs	r2, #0
 8014adc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8014ade:	4b20      	ldr	r3, [pc, #128]	; (8014b60 <USBD_LL_Init+0xbc>)
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8014ae4:	4b1e      	ldr	r3, [pc, #120]	; (8014b60 <USBD_LL_Init+0xbc>)
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8014aea:	4b1d      	ldr	r3, [pc, #116]	; (8014b60 <USBD_LL_Init+0xbc>)
 8014aec:	2200      	movs	r2, #0
 8014aee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8014af0:	481b      	ldr	r0, [pc, #108]	; (8014b60 <USBD_LL_Init+0xbc>)
 8014af2:	f7f4 fd15 	bl	8009520 <HAL_PCD_Init>
 8014af6:	4603      	mov	r3, r0
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d001      	beq.n	8014b00 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8014afc:	f7ed f98b 	bl	8001e16 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014b06:	2318      	movs	r3, #24
 8014b08:	2200      	movs	r2, #0
 8014b0a:	2100      	movs	r1, #0
 8014b0c:	f7f6 fa19 	bl	800af42 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014b16:	2358      	movs	r3, #88	; 0x58
 8014b18:	2200      	movs	r2, #0
 8014b1a:	2180      	movs	r1, #128	; 0x80
 8014b1c:	f7f6 fa11 	bl	800af42 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014b26:	23c0      	movs	r3, #192	; 0xc0
 8014b28:	2200      	movs	r2, #0
 8014b2a:	2181      	movs	r1, #129	; 0x81
 8014b2c:	f7f6 fa09 	bl	800af42 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014b36:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	2101      	movs	r1, #1
 8014b3e:	f7f6 fa00 	bl	800af42 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014b48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	2182      	movs	r1, #130	; 0x82
 8014b50:	f7f6 f9f7 	bl	800af42 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8014b54:	2300      	movs	r3, #0
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	3708      	adds	r7, #8
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}
 8014b5e:	bf00      	nop
 8014b60:	20001f58 	.word	0x20001f58
 8014b64:	40006800 	.word	0x40006800

08014b68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b084      	sub	sp, #16
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b70:	2300      	movs	r3, #0
 8014b72:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b74:	2300      	movs	r3, #0
 8014b76:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014b7e:	4618      	mov	r0, r3
 8014b80:	f7f4 fdd4 	bl	800972c <HAL_PCD_Start>
 8014b84:	4603      	mov	r3, r0
 8014b86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014b88:	7bbb      	ldrb	r3, [r7, #14]
 8014b8a:	2b03      	cmp	r3, #3
 8014b8c:	d816      	bhi.n	8014bbc <USBD_LL_Start+0x54>
 8014b8e:	a201      	add	r2, pc, #4	; (adr r2, 8014b94 <USBD_LL_Start+0x2c>)
 8014b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b94:	08014ba5 	.word	0x08014ba5
 8014b98:	08014bab 	.word	0x08014bab
 8014b9c:	08014bb1 	.word	0x08014bb1
 8014ba0:	08014bb7 	.word	0x08014bb7
    case HAL_OK :
      usb_status = USBD_OK;
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8014ba8:	e00b      	b.n	8014bc2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014baa:	2303      	movs	r3, #3
 8014bac:	73fb      	strb	r3, [r7, #15]
    break;
 8014bae:	e008      	b.n	8014bc2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014bb0:	2301      	movs	r3, #1
 8014bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8014bb4:	e005      	b.n	8014bc2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014bb6:	2303      	movs	r3, #3
 8014bb8:	73fb      	strb	r3, [r7, #15]
    break;
 8014bba:	e002      	b.n	8014bc2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8014bbc:	2303      	movs	r3, #3
 8014bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8014bc0:	bf00      	nop
  }
  return usb_status;
 8014bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	3710      	adds	r7, #16
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}

08014bcc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	b084      	sub	sp, #16
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	6078      	str	r0, [r7, #4]
 8014bd4:	4608      	mov	r0, r1
 8014bd6:	4611      	mov	r1, r2
 8014bd8:	461a      	mov	r2, r3
 8014bda:	4603      	mov	r3, r0
 8014bdc:	70fb      	strb	r3, [r7, #3]
 8014bde:	460b      	mov	r3, r1
 8014be0:	70bb      	strb	r3, [r7, #2]
 8014be2:	4613      	mov	r3, r2
 8014be4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014be6:	2300      	movs	r3, #0
 8014be8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014bea:	2300      	movs	r3, #0
 8014bec:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014bf4:	78bb      	ldrb	r3, [r7, #2]
 8014bf6:	883a      	ldrh	r2, [r7, #0]
 8014bf8:	78f9      	ldrb	r1, [r7, #3]
 8014bfa:	f7f4 ff05 	bl	8009a08 <HAL_PCD_EP_Open>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014c02:	7bbb      	ldrb	r3, [r7, #14]
 8014c04:	2b03      	cmp	r3, #3
 8014c06:	d817      	bhi.n	8014c38 <USBD_LL_OpenEP+0x6c>
 8014c08:	a201      	add	r2, pc, #4	; (adr r2, 8014c10 <USBD_LL_OpenEP+0x44>)
 8014c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c0e:	bf00      	nop
 8014c10:	08014c21 	.word	0x08014c21
 8014c14:	08014c27 	.word	0x08014c27
 8014c18:	08014c2d 	.word	0x08014c2d
 8014c1c:	08014c33 	.word	0x08014c33
    case HAL_OK :
      usb_status = USBD_OK;
 8014c20:	2300      	movs	r3, #0
 8014c22:	73fb      	strb	r3, [r7, #15]
    break;
 8014c24:	e00b      	b.n	8014c3e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014c26:	2303      	movs	r3, #3
 8014c28:	73fb      	strb	r3, [r7, #15]
    break;
 8014c2a:	e008      	b.n	8014c3e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014c2c:	2301      	movs	r3, #1
 8014c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8014c30:	e005      	b.n	8014c3e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014c32:	2303      	movs	r3, #3
 8014c34:	73fb      	strb	r3, [r7, #15]
    break;
 8014c36:	e002      	b.n	8014c3e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8014c38:	2303      	movs	r3, #3
 8014c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8014c3c:	bf00      	nop
  }
  return usb_status;
 8014c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	3710      	adds	r7, #16
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bd80      	pop	{r7, pc}

08014c48 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b084      	sub	sp, #16
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
 8014c50:	460b      	mov	r3, r1
 8014c52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c54:	2300      	movs	r3, #0
 8014c56:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c58:	2300      	movs	r3, #0
 8014c5a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014c62:	78fa      	ldrb	r2, [r7, #3]
 8014c64:	4611      	mov	r1, r2
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7f4 ff2b 	bl	8009ac2 <HAL_PCD_EP_Close>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014c70:	7bbb      	ldrb	r3, [r7, #14]
 8014c72:	2b03      	cmp	r3, #3
 8014c74:	d816      	bhi.n	8014ca4 <USBD_LL_CloseEP+0x5c>
 8014c76:	a201      	add	r2, pc, #4	; (adr r2, 8014c7c <USBD_LL_CloseEP+0x34>)
 8014c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c7c:	08014c8d 	.word	0x08014c8d
 8014c80:	08014c93 	.word	0x08014c93
 8014c84:	08014c99 	.word	0x08014c99
 8014c88:	08014c9f 	.word	0x08014c9f
    case HAL_OK :
      usb_status = USBD_OK;
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8014c90:	e00b      	b.n	8014caa <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014c92:	2303      	movs	r3, #3
 8014c94:	73fb      	strb	r3, [r7, #15]
    break;
 8014c96:	e008      	b.n	8014caa <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014c98:	2301      	movs	r3, #1
 8014c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8014c9c:	e005      	b.n	8014caa <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014c9e:	2303      	movs	r3, #3
 8014ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8014ca2:	e002      	b.n	8014caa <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014ca4:	2303      	movs	r3, #3
 8014ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8014ca8:	bf00      	nop
  }
  return usb_status;
 8014caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cac:	4618      	mov	r0, r3
 8014cae:	3710      	adds	r7, #16
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}

08014cb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b084      	sub	sp, #16
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
 8014cbc:	460b      	mov	r3, r1
 8014cbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014cce:	78fa      	ldrb	r2, [r7, #3]
 8014cd0:	4611      	mov	r1, r2
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f7f4 ffbd 	bl	8009c52 <HAL_PCD_EP_SetStall>
 8014cd8:	4603      	mov	r3, r0
 8014cda:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014cdc:	7bbb      	ldrb	r3, [r7, #14]
 8014cde:	2b03      	cmp	r3, #3
 8014ce0:	d816      	bhi.n	8014d10 <USBD_LL_StallEP+0x5c>
 8014ce2:	a201      	add	r2, pc, #4	; (adr r2, 8014ce8 <USBD_LL_StallEP+0x34>)
 8014ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ce8:	08014cf9 	.word	0x08014cf9
 8014cec:	08014cff 	.word	0x08014cff
 8014cf0:	08014d05 	.word	0x08014d05
 8014cf4:	08014d0b 	.word	0x08014d0b
    case HAL_OK :
      usb_status = USBD_OK;
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8014cfc:	e00b      	b.n	8014d16 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014cfe:	2303      	movs	r3, #3
 8014d00:	73fb      	strb	r3, [r7, #15]
    break;
 8014d02:	e008      	b.n	8014d16 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014d04:	2301      	movs	r3, #1
 8014d06:	73fb      	strb	r3, [r7, #15]
    break;
 8014d08:	e005      	b.n	8014d16 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014d0a:	2303      	movs	r3, #3
 8014d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8014d0e:	e002      	b.n	8014d16 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014d10:	2303      	movs	r3, #3
 8014d12:	73fb      	strb	r3, [r7, #15]
    break;
 8014d14:	bf00      	nop
  }
  return usb_status;
 8014d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d18:	4618      	mov	r0, r3
 8014d1a:	3710      	adds	r7, #16
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd80      	pop	{r7, pc}

08014d20 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b084      	sub	sp, #16
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	6078      	str	r0, [r7, #4]
 8014d28:	460b      	mov	r3, r1
 8014d2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d30:	2300      	movs	r3, #0
 8014d32:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014d3a:	78fa      	ldrb	r2, [r7, #3]
 8014d3c:	4611      	mov	r1, r2
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f7f4 ffe7 	bl	8009d12 <HAL_PCD_EP_ClrStall>
 8014d44:	4603      	mov	r3, r0
 8014d46:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014d48:	7bbb      	ldrb	r3, [r7, #14]
 8014d4a:	2b03      	cmp	r3, #3
 8014d4c:	d816      	bhi.n	8014d7c <USBD_LL_ClearStallEP+0x5c>
 8014d4e:	a201      	add	r2, pc, #4	; (adr r2, 8014d54 <USBD_LL_ClearStallEP+0x34>)
 8014d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d54:	08014d65 	.word	0x08014d65
 8014d58:	08014d6b 	.word	0x08014d6b
 8014d5c:	08014d71 	.word	0x08014d71
 8014d60:	08014d77 	.word	0x08014d77
    case HAL_OK :
      usb_status = USBD_OK;
 8014d64:	2300      	movs	r3, #0
 8014d66:	73fb      	strb	r3, [r7, #15]
    break;
 8014d68:	e00b      	b.n	8014d82 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014d6a:	2303      	movs	r3, #3
 8014d6c:	73fb      	strb	r3, [r7, #15]
    break;
 8014d6e:	e008      	b.n	8014d82 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014d70:	2301      	movs	r3, #1
 8014d72:	73fb      	strb	r3, [r7, #15]
    break;
 8014d74:	e005      	b.n	8014d82 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014d76:	2303      	movs	r3, #3
 8014d78:	73fb      	strb	r3, [r7, #15]
    break;
 8014d7a:	e002      	b.n	8014d82 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014d7c:	2303      	movs	r3, #3
 8014d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8014d80:	bf00      	nop
  }
  return usb_status;
 8014d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	3710      	adds	r7, #16
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd80      	pop	{r7, pc}

08014d8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d8c:	b480      	push	{r7}
 8014d8e:	b085      	sub	sp, #20
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
 8014d94:	460b      	mov	r3, r1
 8014d96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014d9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	da0c      	bge.n	8014dc2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014da8:	78fb      	ldrb	r3, [r7, #3]
 8014daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014dae:	68f9      	ldr	r1, [r7, #12]
 8014db0:	1c5a      	adds	r2, r3, #1
 8014db2:	4613      	mov	r3, r2
 8014db4:	009b      	lsls	r3, r3, #2
 8014db6:	4413      	add	r3, r2
 8014db8:	00db      	lsls	r3, r3, #3
 8014dba:	440b      	add	r3, r1
 8014dbc:	3302      	adds	r3, #2
 8014dbe:	781b      	ldrb	r3, [r3, #0]
 8014dc0:	e00b      	b.n	8014dda <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014dc2:	78fb      	ldrb	r3, [r7, #3]
 8014dc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014dc8:	68f9      	ldr	r1, [r7, #12]
 8014dca:	4613      	mov	r3, r2
 8014dcc:	009b      	lsls	r3, r3, #2
 8014dce:	4413      	add	r3, r2
 8014dd0:	00db      	lsls	r3, r3, #3
 8014dd2:	440b      	add	r3, r1
 8014dd4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8014dd8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3714      	adds	r7, #20
 8014dde:	46bd      	mov	sp, r7
 8014de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de4:	4770      	bx	lr
	...

08014de8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b084      	sub	sp, #16
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	6078      	str	r0, [r7, #4]
 8014df0:	460b      	mov	r3, r1
 8014df2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014df4:	2300      	movs	r3, #0
 8014df6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014df8:	2300      	movs	r3, #0
 8014dfa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014e02:	78fa      	ldrb	r2, [r7, #3]
 8014e04:	4611      	mov	r1, r2
 8014e06:	4618      	mov	r0, r3
 8014e08:	f7f4 fdd9 	bl	80099be <HAL_PCD_SetAddress>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014e10:	7bbb      	ldrb	r3, [r7, #14]
 8014e12:	2b03      	cmp	r3, #3
 8014e14:	d816      	bhi.n	8014e44 <USBD_LL_SetUSBAddress+0x5c>
 8014e16:	a201      	add	r2, pc, #4	; (adr r2, 8014e1c <USBD_LL_SetUSBAddress+0x34>)
 8014e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e1c:	08014e2d 	.word	0x08014e2d
 8014e20:	08014e33 	.word	0x08014e33
 8014e24:	08014e39 	.word	0x08014e39
 8014e28:	08014e3f 	.word	0x08014e3f
    case HAL_OK :
      usb_status = USBD_OK;
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8014e30:	e00b      	b.n	8014e4a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014e32:	2303      	movs	r3, #3
 8014e34:	73fb      	strb	r3, [r7, #15]
    break;
 8014e36:	e008      	b.n	8014e4a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014e38:	2301      	movs	r3, #1
 8014e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8014e3c:	e005      	b.n	8014e4a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014e3e:	2303      	movs	r3, #3
 8014e40:	73fb      	strb	r3, [r7, #15]
    break;
 8014e42:	e002      	b.n	8014e4a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8014e44:	2303      	movs	r3, #3
 8014e46:	73fb      	strb	r3, [r7, #15]
    break;
 8014e48:	bf00      	nop
  }
  return usb_status;
 8014e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	3710      	adds	r7, #16
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}

08014e54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b086      	sub	sp, #24
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	60f8      	str	r0, [r7, #12]
 8014e5c:	607a      	str	r2, [r7, #4]
 8014e5e:	603b      	str	r3, [r7, #0]
 8014e60:	460b      	mov	r3, r1
 8014e62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e64:	2300      	movs	r3, #0
 8014e66:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e68:	2300      	movs	r3, #0
 8014e6a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014e72:	7af9      	ldrb	r1, [r7, #11]
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	687a      	ldr	r2, [r7, #4]
 8014e78:	f7f4 feb4 	bl	8009be4 <HAL_PCD_EP_Transmit>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8014e80:	7dbb      	ldrb	r3, [r7, #22]
 8014e82:	2b03      	cmp	r3, #3
 8014e84:	d816      	bhi.n	8014eb4 <USBD_LL_Transmit+0x60>
 8014e86:	a201      	add	r2, pc, #4	; (adr r2, 8014e8c <USBD_LL_Transmit+0x38>)
 8014e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e8c:	08014e9d 	.word	0x08014e9d
 8014e90:	08014ea3 	.word	0x08014ea3
 8014e94:	08014ea9 	.word	0x08014ea9
 8014e98:	08014eaf 	.word	0x08014eaf
    case HAL_OK :
      usb_status = USBD_OK;
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	75fb      	strb	r3, [r7, #23]
    break;
 8014ea0:	e00b      	b.n	8014eba <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014ea2:	2303      	movs	r3, #3
 8014ea4:	75fb      	strb	r3, [r7, #23]
    break;
 8014ea6:	e008      	b.n	8014eba <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014ea8:	2301      	movs	r3, #1
 8014eaa:	75fb      	strb	r3, [r7, #23]
    break;
 8014eac:	e005      	b.n	8014eba <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014eae:	2303      	movs	r3, #3
 8014eb0:	75fb      	strb	r3, [r7, #23]
    break;
 8014eb2:	e002      	b.n	8014eba <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8014eb4:	2303      	movs	r3, #3
 8014eb6:	75fb      	strb	r3, [r7, #23]
    break;
 8014eb8:	bf00      	nop
  }
  return usb_status;
 8014eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	3718      	adds	r7, #24
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd80      	pop	{r7, pc}

08014ec4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b086      	sub	sp, #24
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	60f8      	str	r0, [r7, #12]
 8014ecc:	607a      	str	r2, [r7, #4]
 8014ece:	603b      	str	r3, [r7, #0]
 8014ed0:	460b      	mov	r3, r1
 8014ed2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ed8:	2300      	movs	r3, #0
 8014eda:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014ee2:	7af9      	ldrb	r1, [r7, #11]
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	687a      	ldr	r2, [r7, #4]
 8014ee8:	f7f4 fe33 	bl	8009b52 <HAL_PCD_EP_Receive>
 8014eec:	4603      	mov	r3, r0
 8014eee:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8014ef0:	7dbb      	ldrb	r3, [r7, #22]
 8014ef2:	2b03      	cmp	r3, #3
 8014ef4:	d816      	bhi.n	8014f24 <USBD_LL_PrepareReceive+0x60>
 8014ef6:	a201      	add	r2, pc, #4	; (adr r2, 8014efc <USBD_LL_PrepareReceive+0x38>)
 8014ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014efc:	08014f0d 	.word	0x08014f0d
 8014f00:	08014f13 	.word	0x08014f13
 8014f04:	08014f19 	.word	0x08014f19
 8014f08:	08014f1f 	.word	0x08014f1f
    case HAL_OK :
      usb_status = USBD_OK;
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	75fb      	strb	r3, [r7, #23]
    break;
 8014f10:	e00b      	b.n	8014f2a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014f12:	2303      	movs	r3, #3
 8014f14:	75fb      	strb	r3, [r7, #23]
    break;
 8014f16:	e008      	b.n	8014f2a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014f18:	2301      	movs	r3, #1
 8014f1a:	75fb      	strb	r3, [r7, #23]
    break;
 8014f1c:	e005      	b.n	8014f2a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014f1e:	2303      	movs	r3, #3
 8014f20:	75fb      	strb	r3, [r7, #23]
    break;
 8014f22:	e002      	b.n	8014f2a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8014f24:	2303      	movs	r3, #3
 8014f26:	75fb      	strb	r3, [r7, #23]
    break;
 8014f28:	bf00      	nop
  }
  return usb_status;
 8014f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	3718      	adds	r7, #24
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bd80      	pop	{r7, pc}

08014f34 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b082      	sub	sp, #8
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
 8014f3c:	460b      	mov	r3, r1
 8014f3e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014f46:	78fa      	ldrb	r2, [r7, #3]
 8014f48:	4611      	mov	r1, r2
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f7f4 fe32 	bl	8009bb4 <HAL_PCD_EP_GetRxCount>
 8014f50:	4603      	mov	r3, r0
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	3708      	adds	r7, #8
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}
	...

08014f5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b082      	sub	sp, #8
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
 8014f64:	460b      	mov	r3, r1
 8014f66:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8014f68:	78fb      	ldrb	r3, [r7, #3]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d002      	beq.n	8014f74 <HAL_PCDEx_LPM_Callback+0x18>
 8014f6e:	2b01      	cmp	r3, #1
 8014f70:	d013      	beq.n	8014f9a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8014f72:	e023      	b.n	8014fbc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	699b      	ldr	r3, [r3, #24]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d007      	beq.n	8014f8c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8014f7c:	f000 f83c 	bl	8014ff8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014f80:	4b10      	ldr	r3, [pc, #64]	; (8014fc4 <HAL_PCDEx_LPM_Callback+0x68>)
 8014f82:	691b      	ldr	r3, [r3, #16]
 8014f84:	4a0f      	ldr	r2, [pc, #60]	; (8014fc4 <HAL_PCDEx_LPM_Callback+0x68>)
 8014f86:	f023 0306 	bic.w	r3, r3, #6
 8014f8a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8014f92:	4618      	mov	r0, r3
 8014f94:	f7fd fdaf 	bl	8012af6 <USBD_LL_Resume>
    break;
 8014f98:	e010      	b.n	8014fbc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	f7fd fd8c 	bl	8012abe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	699b      	ldr	r3, [r3, #24]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d005      	beq.n	8014fba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014fae:	4b05      	ldr	r3, [pc, #20]	; (8014fc4 <HAL_PCDEx_LPM_Callback+0x68>)
 8014fb0:	691b      	ldr	r3, [r3, #16]
 8014fb2:	4a04      	ldr	r2, [pc, #16]	; (8014fc4 <HAL_PCDEx_LPM_Callback+0x68>)
 8014fb4:	f043 0306 	orr.w	r3, r3, #6
 8014fb8:	6113      	str	r3, [r2, #16]
    break;
 8014fba:	bf00      	nop
}
 8014fbc:	bf00      	nop
 8014fbe:	3708      	adds	r7, #8
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	bd80      	pop	{r7, pc}
 8014fc4:	e000ed00 	.word	0xe000ed00

08014fc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014fc8:	b480      	push	{r7}
 8014fca:	b083      	sub	sp, #12
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014fd0:	4b03      	ldr	r3, [pc, #12]	; (8014fe0 <USBD_static_malloc+0x18>)
}
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	370c      	adds	r7, #12
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fdc:	4770      	bx	lr
 8014fde:	bf00      	nop
 8014fe0:	20002250 	.word	0x20002250

08014fe4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014fe4:	b480      	push	{r7}
 8014fe6:	b083      	sub	sp, #12
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	6078      	str	r0, [r7, #4]

}
 8014fec:	bf00      	nop
 8014fee:	370c      	adds	r7, #12
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff6:	4770      	bx	lr

08014ff8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8014ffc:	f7ec fe8a 	bl	8001d14 <SystemClock_Config>
}
 8015000:	bf00      	nop
 8015002:	bd80      	pop	{r7, pc}

08015004 <atoi>:
 8015004:	220a      	movs	r2, #10
 8015006:	2100      	movs	r1, #0
 8015008:	f000 bfba 	b.w	8015f80 <strtol>

0801500c <malloc>:
 801500c:	4b02      	ldr	r3, [pc, #8]	; (8015018 <malloc+0xc>)
 801500e:	4601      	mov	r1, r0
 8015010:	6818      	ldr	r0, [r3, #0]
 8015012:	f000 b82b 	b.w	801506c <_malloc_r>
 8015016:	bf00      	nop
 8015018:	200002f4 	.word	0x200002f4

0801501c <free>:
 801501c:	4b02      	ldr	r3, [pc, #8]	; (8015028 <free+0xc>)
 801501e:	4601      	mov	r1, r0
 8015020:	6818      	ldr	r0, [r3, #0]
 8015022:	f002 bf57 	b.w	8017ed4 <_free_r>
 8015026:	bf00      	nop
 8015028:	200002f4 	.word	0x200002f4

0801502c <sbrk_aligned>:
 801502c:	b570      	push	{r4, r5, r6, lr}
 801502e:	4e0e      	ldr	r6, [pc, #56]	; (8015068 <sbrk_aligned+0x3c>)
 8015030:	460c      	mov	r4, r1
 8015032:	6831      	ldr	r1, [r6, #0]
 8015034:	4605      	mov	r5, r0
 8015036:	b911      	cbnz	r1, 801503e <sbrk_aligned+0x12>
 8015038:	f002 f840 	bl	80170bc <_sbrk_r>
 801503c:	6030      	str	r0, [r6, #0]
 801503e:	4621      	mov	r1, r4
 8015040:	4628      	mov	r0, r5
 8015042:	f002 f83b 	bl	80170bc <_sbrk_r>
 8015046:	1c43      	adds	r3, r0, #1
 8015048:	d00a      	beq.n	8015060 <sbrk_aligned+0x34>
 801504a:	1cc4      	adds	r4, r0, #3
 801504c:	f024 0403 	bic.w	r4, r4, #3
 8015050:	42a0      	cmp	r0, r4
 8015052:	d007      	beq.n	8015064 <sbrk_aligned+0x38>
 8015054:	1a21      	subs	r1, r4, r0
 8015056:	4628      	mov	r0, r5
 8015058:	f002 f830 	bl	80170bc <_sbrk_r>
 801505c:	3001      	adds	r0, #1
 801505e:	d101      	bne.n	8015064 <sbrk_aligned+0x38>
 8015060:	f04f 34ff 	mov.w	r4, #4294967295
 8015064:	4620      	mov	r0, r4
 8015066:	bd70      	pop	{r4, r5, r6, pc}
 8015068:	20002474 	.word	0x20002474

0801506c <_malloc_r>:
 801506c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015070:	1ccd      	adds	r5, r1, #3
 8015072:	f025 0503 	bic.w	r5, r5, #3
 8015076:	3508      	adds	r5, #8
 8015078:	2d0c      	cmp	r5, #12
 801507a:	bf38      	it	cc
 801507c:	250c      	movcc	r5, #12
 801507e:	2d00      	cmp	r5, #0
 8015080:	4607      	mov	r7, r0
 8015082:	db01      	blt.n	8015088 <_malloc_r+0x1c>
 8015084:	42a9      	cmp	r1, r5
 8015086:	d905      	bls.n	8015094 <_malloc_r+0x28>
 8015088:	230c      	movs	r3, #12
 801508a:	603b      	str	r3, [r7, #0]
 801508c:	2600      	movs	r6, #0
 801508e:	4630      	mov	r0, r6
 8015090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015094:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015168 <_malloc_r+0xfc>
 8015098:	f000 f868 	bl	801516c <__malloc_lock>
 801509c:	f8d8 3000 	ldr.w	r3, [r8]
 80150a0:	461c      	mov	r4, r3
 80150a2:	bb5c      	cbnz	r4, 80150fc <_malloc_r+0x90>
 80150a4:	4629      	mov	r1, r5
 80150a6:	4638      	mov	r0, r7
 80150a8:	f7ff ffc0 	bl	801502c <sbrk_aligned>
 80150ac:	1c43      	adds	r3, r0, #1
 80150ae:	4604      	mov	r4, r0
 80150b0:	d155      	bne.n	801515e <_malloc_r+0xf2>
 80150b2:	f8d8 4000 	ldr.w	r4, [r8]
 80150b6:	4626      	mov	r6, r4
 80150b8:	2e00      	cmp	r6, #0
 80150ba:	d145      	bne.n	8015148 <_malloc_r+0xdc>
 80150bc:	2c00      	cmp	r4, #0
 80150be:	d048      	beq.n	8015152 <_malloc_r+0xe6>
 80150c0:	6823      	ldr	r3, [r4, #0]
 80150c2:	4631      	mov	r1, r6
 80150c4:	4638      	mov	r0, r7
 80150c6:	eb04 0903 	add.w	r9, r4, r3
 80150ca:	f001 fff7 	bl	80170bc <_sbrk_r>
 80150ce:	4581      	cmp	r9, r0
 80150d0:	d13f      	bne.n	8015152 <_malloc_r+0xe6>
 80150d2:	6821      	ldr	r1, [r4, #0]
 80150d4:	1a6d      	subs	r5, r5, r1
 80150d6:	4629      	mov	r1, r5
 80150d8:	4638      	mov	r0, r7
 80150da:	f7ff ffa7 	bl	801502c <sbrk_aligned>
 80150de:	3001      	adds	r0, #1
 80150e0:	d037      	beq.n	8015152 <_malloc_r+0xe6>
 80150e2:	6823      	ldr	r3, [r4, #0]
 80150e4:	442b      	add	r3, r5
 80150e6:	6023      	str	r3, [r4, #0]
 80150e8:	f8d8 3000 	ldr.w	r3, [r8]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d038      	beq.n	8015162 <_malloc_r+0xf6>
 80150f0:	685a      	ldr	r2, [r3, #4]
 80150f2:	42a2      	cmp	r2, r4
 80150f4:	d12b      	bne.n	801514e <_malloc_r+0xe2>
 80150f6:	2200      	movs	r2, #0
 80150f8:	605a      	str	r2, [r3, #4]
 80150fa:	e00f      	b.n	801511c <_malloc_r+0xb0>
 80150fc:	6822      	ldr	r2, [r4, #0]
 80150fe:	1b52      	subs	r2, r2, r5
 8015100:	d41f      	bmi.n	8015142 <_malloc_r+0xd6>
 8015102:	2a0b      	cmp	r2, #11
 8015104:	d917      	bls.n	8015136 <_malloc_r+0xca>
 8015106:	1961      	adds	r1, r4, r5
 8015108:	42a3      	cmp	r3, r4
 801510a:	6025      	str	r5, [r4, #0]
 801510c:	bf18      	it	ne
 801510e:	6059      	strne	r1, [r3, #4]
 8015110:	6863      	ldr	r3, [r4, #4]
 8015112:	bf08      	it	eq
 8015114:	f8c8 1000 	streq.w	r1, [r8]
 8015118:	5162      	str	r2, [r4, r5]
 801511a:	604b      	str	r3, [r1, #4]
 801511c:	4638      	mov	r0, r7
 801511e:	f104 060b 	add.w	r6, r4, #11
 8015122:	f000 f829 	bl	8015178 <__malloc_unlock>
 8015126:	f026 0607 	bic.w	r6, r6, #7
 801512a:	1d23      	adds	r3, r4, #4
 801512c:	1af2      	subs	r2, r6, r3
 801512e:	d0ae      	beq.n	801508e <_malloc_r+0x22>
 8015130:	1b9b      	subs	r3, r3, r6
 8015132:	50a3      	str	r3, [r4, r2]
 8015134:	e7ab      	b.n	801508e <_malloc_r+0x22>
 8015136:	42a3      	cmp	r3, r4
 8015138:	6862      	ldr	r2, [r4, #4]
 801513a:	d1dd      	bne.n	80150f8 <_malloc_r+0x8c>
 801513c:	f8c8 2000 	str.w	r2, [r8]
 8015140:	e7ec      	b.n	801511c <_malloc_r+0xb0>
 8015142:	4623      	mov	r3, r4
 8015144:	6864      	ldr	r4, [r4, #4]
 8015146:	e7ac      	b.n	80150a2 <_malloc_r+0x36>
 8015148:	4634      	mov	r4, r6
 801514a:	6876      	ldr	r6, [r6, #4]
 801514c:	e7b4      	b.n	80150b8 <_malloc_r+0x4c>
 801514e:	4613      	mov	r3, r2
 8015150:	e7cc      	b.n	80150ec <_malloc_r+0x80>
 8015152:	230c      	movs	r3, #12
 8015154:	603b      	str	r3, [r7, #0]
 8015156:	4638      	mov	r0, r7
 8015158:	f000 f80e 	bl	8015178 <__malloc_unlock>
 801515c:	e797      	b.n	801508e <_malloc_r+0x22>
 801515e:	6025      	str	r5, [r4, #0]
 8015160:	e7dc      	b.n	801511c <_malloc_r+0xb0>
 8015162:	605b      	str	r3, [r3, #4]
 8015164:	deff      	udf	#255	; 0xff
 8015166:	bf00      	nop
 8015168:	20002470 	.word	0x20002470

0801516c <__malloc_lock>:
 801516c:	4801      	ldr	r0, [pc, #4]	; (8015174 <__malloc_lock+0x8>)
 801516e:	f001 bff2 	b.w	8017156 <__retarget_lock_acquire_recursive>
 8015172:	bf00      	nop
 8015174:	200025b8 	.word	0x200025b8

08015178 <__malloc_unlock>:
 8015178:	4801      	ldr	r0, [pc, #4]	; (8015180 <__malloc_unlock+0x8>)
 801517a:	f001 bfed 	b.w	8017158 <__retarget_lock_release_recursive>
 801517e:	bf00      	nop
 8015180:	200025b8 	.word	0x200025b8

08015184 <sulp>:
 8015184:	b570      	push	{r4, r5, r6, lr}
 8015186:	4604      	mov	r4, r0
 8015188:	460d      	mov	r5, r1
 801518a:	ec45 4b10 	vmov	d0, r4, r5
 801518e:	4616      	mov	r6, r2
 8015190:	f003 fdc2 	bl	8018d18 <__ulp>
 8015194:	ec51 0b10 	vmov	r0, r1, d0
 8015198:	b17e      	cbz	r6, 80151ba <sulp+0x36>
 801519a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801519e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	dd09      	ble.n	80151ba <sulp+0x36>
 80151a6:	051b      	lsls	r3, r3, #20
 80151a8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80151ac:	2400      	movs	r4, #0
 80151ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80151b2:	4622      	mov	r2, r4
 80151b4:	462b      	mov	r3, r5
 80151b6:	f7eb fa1f 	bl	80005f8 <__aeabi_dmul>
 80151ba:	bd70      	pop	{r4, r5, r6, pc}
 80151bc:	0000      	movs	r0, r0
	...

080151c0 <_strtod_l>:
 80151c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151c4:	ed2d 8b02 	vpush	{d8}
 80151c8:	b09b      	sub	sp, #108	; 0x6c
 80151ca:	4604      	mov	r4, r0
 80151cc:	9213      	str	r2, [sp, #76]	; 0x4c
 80151ce:	2200      	movs	r2, #0
 80151d0:	9216      	str	r2, [sp, #88]	; 0x58
 80151d2:	460d      	mov	r5, r1
 80151d4:	f04f 0800 	mov.w	r8, #0
 80151d8:	f04f 0900 	mov.w	r9, #0
 80151dc:	460a      	mov	r2, r1
 80151de:	9215      	str	r2, [sp, #84]	; 0x54
 80151e0:	7811      	ldrb	r1, [r2, #0]
 80151e2:	292b      	cmp	r1, #43	; 0x2b
 80151e4:	d04c      	beq.n	8015280 <_strtod_l+0xc0>
 80151e6:	d83a      	bhi.n	801525e <_strtod_l+0x9e>
 80151e8:	290d      	cmp	r1, #13
 80151ea:	d834      	bhi.n	8015256 <_strtod_l+0x96>
 80151ec:	2908      	cmp	r1, #8
 80151ee:	d834      	bhi.n	801525a <_strtod_l+0x9a>
 80151f0:	2900      	cmp	r1, #0
 80151f2:	d03d      	beq.n	8015270 <_strtod_l+0xb0>
 80151f4:	2200      	movs	r2, #0
 80151f6:	920a      	str	r2, [sp, #40]	; 0x28
 80151f8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80151fa:	7832      	ldrb	r2, [r6, #0]
 80151fc:	2a30      	cmp	r2, #48	; 0x30
 80151fe:	f040 80b4 	bne.w	801536a <_strtod_l+0x1aa>
 8015202:	7872      	ldrb	r2, [r6, #1]
 8015204:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8015208:	2a58      	cmp	r2, #88	; 0x58
 801520a:	d170      	bne.n	80152ee <_strtod_l+0x12e>
 801520c:	9302      	str	r3, [sp, #8]
 801520e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015210:	9301      	str	r3, [sp, #4]
 8015212:	ab16      	add	r3, sp, #88	; 0x58
 8015214:	9300      	str	r3, [sp, #0]
 8015216:	4a8e      	ldr	r2, [pc, #568]	; (8015450 <_strtod_l+0x290>)
 8015218:	ab17      	add	r3, sp, #92	; 0x5c
 801521a:	a915      	add	r1, sp, #84	; 0x54
 801521c:	4620      	mov	r0, r4
 801521e:	f002 ff0d 	bl	801803c <__gethex>
 8015222:	f010 070f 	ands.w	r7, r0, #15
 8015226:	4605      	mov	r5, r0
 8015228:	d005      	beq.n	8015236 <_strtod_l+0x76>
 801522a:	2f06      	cmp	r7, #6
 801522c:	d12a      	bne.n	8015284 <_strtod_l+0xc4>
 801522e:	3601      	adds	r6, #1
 8015230:	2300      	movs	r3, #0
 8015232:	9615      	str	r6, [sp, #84]	; 0x54
 8015234:	930a      	str	r3, [sp, #40]	; 0x28
 8015236:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015238:	2b00      	cmp	r3, #0
 801523a:	f040 857f 	bne.w	8015d3c <_strtod_l+0xb7c>
 801523e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015240:	b1db      	cbz	r3, 801527a <_strtod_l+0xba>
 8015242:	4642      	mov	r2, r8
 8015244:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015248:	ec43 2b10 	vmov	d0, r2, r3
 801524c:	b01b      	add	sp, #108	; 0x6c
 801524e:	ecbd 8b02 	vpop	{d8}
 8015252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015256:	2920      	cmp	r1, #32
 8015258:	d1cc      	bne.n	80151f4 <_strtod_l+0x34>
 801525a:	3201      	adds	r2, #1
 801525c:	e7bf      	b.n	80151de <_strtod_l+0x1e>
 801525e:	292d      	cmp	r1, #45	; 0x2d
 8015260:	d1c8      	bne.n	80151f4 <_strtod_l+0x34>
 8015262:	2101      	movs	r1, #1
 8015264:	910a      	str	r1, [sp, #40]	; 0x28
 8015266:	1c51      	adds	r1, r2, #1
 8015268:	9115      	str	r1, [sp, #84]	; 0x54
 801526a:	7852      	ldrb	r2, [r2, #1]
 801526c:	2a00      	cmp	r2, #0
 801526e:	d1c3      	bne.n	80151f8 <_strtod_l+0x38>
 8015270:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015272:	9515      	str	r5, [sp, #84]	; 0x54
 8015274:	2b00      	cmp	r3, #0
 8015276:	f040 855f 	bne.w	8015d38 <_strtod_l+0xb78>
 801527a:	4642      	mov	r2, r8
 801527c:	464b      	mov	r3, r9
 801527e:	e7e3      	b.n	8015248 <_strtod_l+0x88>
 8015280:	2100      	movs	r1, #0
 8015282:	e7ef      	b.n	8015264 <_strtod_l+0xa4>
 8015284:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015286:	b13a      	cbz	r2, 8015298 <_strtod_l+0xd8>
 8015288:	2135      	movs	r1, #53	; 0x35
 801528a:	a818      	add	r0, sp, #96	; 0x60
 801528c:	f003 fe41 	bl	8018f12 <__copybits>
 8015290:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015292:	4620      	mov	r0, r4
 8015294:	f003 fa14 	bl	80186c0 <_Bfree>
 8015298:	3f01      	subs	r7, #1
 801529a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801529c:	2f04      	cmp	r7, #4
 801529e:	d806      	bhi.n	80152ae <_strtod_l+0xee>
 80152a0:	e8df f007 	tbb	[pc, r7]
 80152a4:	201d0314 	.word	0x201d0314
 80152a8:	14          	.byte	0x14
 80152a9:	00          	.byte	0x00
 80152aa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80152ae:	05e9      	lsls	r1, r5, #23
 80152b0:	bf48      	it	mi
 80152b2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80152b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80152ba:	0d1b      	lsrs	r3, r3, #20
 80152bc:	051b      	lsls	r3, r3, #20
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d1b9      	bne.n	8015236 <_strtod_l+0x76>
 80152c2:	f001 ff1d 	bl	8017100 <__errno>
 80152c6:	2322      	movs	r3, #34	; 0x22
 80152c8:	6003      	str	r3, [r0, #0]
 80152ca:	e7b4      	b.n	8015236 <_strtod_l+0x76>
 80152cc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80152d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80152d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80152d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80152dc:	e7e7      	b.n	80152ae <_strtod_l+0xee>
 80152de:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015458 <_strtod_l+0x298>
 80152e2:	e7e4      	b.n	80152ae <_strtod_l+0xee>
 80152e4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80152e8:	f04f 38ff 	mov.w	r8, #4294967295
 80152ec:	e7df      	b.n	80152ae <_strtod_l+0xee>
 80152ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80152f0:	1c5a      	adds	r2, r3, #1
 80152f2:	9215      	str	r2, [sp, #84]	; 0x54
 80152f4:	785b      	ldrb	r3, [r3, #1]
 80152f6:	2b30      	cmp	r3, #48	; 0x30
 80152f8:	d0f9      	beq.n	80152ee <_strtod_l+0x12e>
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d09b      	beq.n	8015236 <_strtod_l+0x76>
 80152fe:	2301      	movs	r3, #1
 8015300:	f04f 0a00 	mov.w	sl, #0
 8015304:	9304      	str	r3, [sp, #16]
 8015306:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015308:	930b      	str	r3, [sp, #44]	; 0x2c
 801530a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801530e:	46d3      	mov	fp, sl
 8015310:	220a      	movs	r2, #10
 8015312:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015314:	7806      	ldrb	r6, [r0, #0]
 8015316:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801531a:	b2d9      	uxtb	r1, r3
 801531c:	2909      	cmp	r1, #9
 801531e:	d926      	bls.n	801536e <_strtod_l+0x1ae>
 8015320:	494c      	ldr	r1, [pc, #304]	; (8015454 <_strtod_l+0x294>)
 8015322:	2201      	movs	r2, #1
 8015324:	f001 fe0d 	bl	8016f42 <strncmp>
 8015328:	2800      	cmp	r0, #0
 801532a:	d030      	beq.n	801538e <_strtod_l+0x1ce>
 801532c:	2000      	movs	r0, #0
 801532e:	4632      	mov	r2, r6
 8015330:	9005      	str	r0, [sp, #20]
 8015332:	465e      	mov	r6, fp
 8015334:	4603      	mov	r3, r0
 8015336:	2a65      	cmp	r2, #101	; 0x65
 8015338:	d001      	beq.n	801533e <_strtod_l+0x17e>
 801533a:	2a45      	cmp	r2, #69	; 0x45
 801533c:	d113      	bne.n	8015366 <_strtod_l+0x1a6>
 801533e:	b91e      	cbnz	r6, 8015348 <_strtod_l+0x188>
 8015340:	9a04      	ldr	r2, [sp, #16]
 8015342:	4302      	orrs	r2, r0
 8015344:	d094      	beq.n	8015270 <_strtod_l+0xb0>
 8015346:	2600      	movs	r6, #0
 8015348:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801534a:	1c6a      	adds	r2, r5, #1
 801534c:	9215      	str	r2, [sp, #84]	; 0x54
 801534e:	786a      	ldrb	r2, [r5, #1]
 8015350:	2a2b      	cmp	r2, #43	; 0x2b
 8015352:	d074      	beq.n	801543e <_strtod_l+0x27e>
 8015354:	2a2d      	cmp	r2, #45	; 0x2d
 8015356:	d078      	beq.n	801544a <_strtod_l+0x28a>
 8015358:	f04f 0c00 	mov.w	ip, #0
 801535c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015360:	2909      	cmp	r1, #9
 8015362:	d97f      	bls.n	8015464 <_strtod_l+0x2a4>
 8015364:	9515      	str	r5, [sp, #84]	; 0x54
 8015366:	2700      	movs	r7, #0
 8015368:	e09e      	b.n	80154a8 <_strtod_l+0x2e8>
 801536a:	2300      	movs	r3, #0
 801536c:	e7c8      	b.n	8015300 <_strtod_l+0x140>
 801536e:	f1bb 0f08 	cmp.w	fp, #8
 8015372:	bfd8      	it	le
 8015374:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8015376:	f100 0001 	add.w	r0, r0, #1
 801537a:	bfda      	itte	le
 801537c:	fb02 3301 	mlale	r3, r2, r1, r3
 8015380:	9309      	strle	r3, [sp, #36]	; 0x24
 8015382:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8015386:	f10b 0b01 	add.w	fp, fp, #1
 801538a:	9015      	str	r0, [sp, #84]	; 0x54
 801538c:	e7c1      	b.n	8015312 <_strtod_l+0x152>
 801538e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015390:	1c5a      	adds	r2, r3, #1
 8015392:	9215      	str	r2, [sp, #84]	; 0x54
 8015394:	785a      	ldrb	r2, [r3, #1]
 8015396:	f1bb 0f00 	cmp.w	fp, #0
 801539a:	d037      	beq.n	801540c <_strtod_l+0x24c>
 801539c:	9005      	str	r0, [sp, #20]
 801539e:	465e      	mov	r6, fp
 80153a0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80153a4:	2b09      	cmp	r3, #9
 80153a6:	d912      	bls.n	80153ce <_strtod_l+0x20e>
 80153a8:	2301      	movs	r3, #1
 80153aa:	e7c4      	b.n	8015336 <_strtod_l+0x176>
 80153ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80153ae:	1c5a      	adds	r2, r3, #1
 80153b0:	9215      	str	r2, [sp, #84]	; 0x54
 80153b2:	785a      	ldrb	r2, [r3, #1]
 80153b4:	3001      	adds	r0, #1
 80153b6:	2a30      	cmp	r2, #48	; 0x30
 80153b8:	d0f8      	beq.n	80153ac <_strtod_l+0x1ec>
 80153ba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80153be:	2b08      	cmp	r3, #8
 80153c0:	f200 84c1 	bhi.w	8015d46 <_strtod_l+0xb86>
 80153c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80153c6:	9005      	str	r0, [sp, #20]
 80153c8:	2000      	movs	r0, #0
 80153ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80153cc:	4606      	mov	r6, r0
 80153ce:	3a30      	subs	r2, #48	; 0x30
 80153d0:	f100 0301 	add.w	r3, r0, #1
 80153d4:	d014      	beq.n	8015400 <_strtod_l+0x240>
 80153d6:	9905      	ldr	r1, [sp, #20]
 80153d8:	4419      	add	r1, r3
 80153da:	9105      	str	r1, [sp, #20]
 80153dc:	4633      	mov	r3, r6
 80153de:	eb00 0c06 	add.w	ip, r0, r6
 80153e2:	210a      	movs	r1, #10
 80153e4:	4563      	cmp	r3, ip
 80153e6:	d113      	bne.n	8015410 <_strtod_l+0x250>
 80153e8:	1833      	adds	r3, r6, r0
 80153ea:	2b08      	cmp	r3, #8
 80153ec:	f106 0601 	add.w	r6, r6, #1
 80153f0:	4406      	add	r6, r0
 80153f2:	dc1a      	bgt.n	801542a <_strtod_l+0x26a>
 80153f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80153f6:	230a      	movs	r3, #10
 80153f8:	fb03 2301 	mla	r3, r3, r1, r2
 80153fc:	9309      	str	r3, [sp, #36]	; 0x24
 80153fe:	2300      	movs	r3, #0
 8015400:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015402:	1c51      	adds	r1, r2, #1
 8015404:	9115      	str	r1, [sp, #84]	; 0x54
 8015406:	7852      	ldrb	r2, [r2, #1]
 8015408:	4618      	mov	r0, r3
 801540a:	e7c9      	b.n	80153a0 <_strtod_l+0x1e0>
 801540c:	4658      	mov	r0, fp
 801540e:	e7d2      	b.n	80153b6 <_strtod_l+0x1f6>
 8015410:	2b08      	cmp	r3, #8
 8015412:	f103 0301 	add.w	r3, r3, #1
 8015416:	dc03      	bgt.n	8015420 <_strtod_l+0x260>
 8015418:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801541a:	434f      	muls	r7, r1
 801541c:	9709      	str	r7, [sp, #36]	; 0x24
 801541e:	e7e1      	b.n	80153e4 <_strtod_l+0x224>
 8015420:	2b10      	cmp	r3, #16
 8015422:	bfd8      	it	le
 8015424:	fb01 fa0a 	mulle.w	sl, r1, sl
 8015428:	e7dc      	b.n	80153e4 <_strtod_l+0x224>
 801542a:	2e10      	cmp	r6, #16
 801542c:	bfdc      	itt	le
 801542e:	230a      	movle	r3, #10
 8015430:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8015434:	e7e3      	b.n	80153fe <_strtod_l+0x23e>
 8015436:	2300      	movs	r3, #0
 8015438:	9305      	str	r3, [sp, #20]
 801543a:	2301      	movs	r3, #1
 801543c:	e780      	b.n	8015340 <_strtod_l+0x180>
 801543e:	f04f 0c00 	mov.w	ip, #0
 8015442:	1caa      	adds	r2, r5, #2
 8015444:	9215      	str	r2, [sp, #84]	; 0x54
 8015446:	78aa      	ldrb	r2, [r5, #2]
 8015448:	e788      	b.n	801535c <_strtod_l+0x19c>
 801544a:	f04f 0c01 	mov.w	ip, #1
 801544e:	e7f8      	b.n	8015442 <_strtod_l+0x282>
 8015450:	0801d834 	.word	0x0801d834
 8015454:	0801d830 	.word	0x0801d830
 8015458:	7ff00000 	.word	0x7ff00000
 801545c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801545e:	1c51      	adds	r1, r2, #1
 8015460:	9115      	str	r1, [sp, #84]	; 0x54
 8015462:	7852      	ldrb	r2, [r2, #1]
 8015464:	2a30      	cmp	r2, #48	; 0x30
 8015466:	d0f9      	beq.n	801545c <_strtod_l+0x29c>
 8015468:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801546c:	2908      	cmp	r1, #8
 801546e:	f63f af7a 	bhi.w	8015366 <_strtod_l+0x1a6>
 8015472:	3a30      	subs	r2, #48	; 0x30
 8015474:	9208      	str	r2, [sp, #32]
 8015476:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015478:	920c      	str	r2, [sp, #48]	; 0x30
 801547a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801547c:	1c57      	adds	r7, r2, #1
 801547e:	9715      	str	r7, [sp, #84]	; 0x54
 8015480:	7852      	ldrb	r2, [r2, #1]
 8015482:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015486:	f1be 0f09 	cmp.w	lr, #9
 801548a:	d938      	bls.n	80154fe <_strtod_l+0x33e>
 801548c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801548e:	1a7f      	subs	r7, r7, r1
 8015490:	2f08      	cmp	r7, #8
 8015492:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015496:	dc03      	bgt.n	80154a0 <_strtod_l+0x2e0>
 8015498:	9908      	ldr	r1, [sp, #32]
 801549a:	428f      	cmp	r7, r1
 801549c:	bfa8      	it	ge
 801549e:	460f      	movge	r7, r1
 80154a0:	f1bc 0f00 	cmp.w	ip, #0
 80154a4:	d000      	beq.n	80154a8 <_strtod_l+0x2e8>
 80154a6:	427f      	negs	r7, r7
 80154a8:	2e00      	cmp	r6, #0
 80154aa:	d14f      	bne.n	801554c <_strtod_l+0x38c>
 80154ac:	9904      	ldr	r1, [sp, #16]
 80154ae:	4301      	orrs	r1, r0
 80154b0:	f47f aec1 	bne.w	8015236 <_strtod_l+0x76>
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	f47f aedb 	bne.w	8015270 <_strtod_l+0xb0>
 80154ba:	2a69      	cmp	r2, #105	; 0x69
 80154bc:	d029      	beq.n	8015512 <_strtod_l+0x352>
 80154be:	dc26      	bgt.n	801550e <_strtod_l+0x34e>
 80154c0:	2a49      	cmp	r2, #73	; 0x49
 80154c2:	d026      	beq.n	8015512 <_strtod_l+0x352>
 80154c4:	2a4e      	cmp	r2, #78	; 0x4e
 80154c6:	f47f aed3 	bne.w	8015270 <_strtod_l+0xb0>
 80154ca:	499b      	ldr	r1, [pc, #620]	; (8015738 <_strtod_l+0x578>)
 80154cc:	a815      	add	r0, sp, #84	; 0x54
 80154ce:	f002 fff5 	bl	80184bc <__match>
 80154d2:	2800      	cmp	r0, #0
 80154d4:	f43f aecc 	beq.w	8015270 <_strtod_l+0xb0>
 80154d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80154da:	781b      	ldrb	r3, [r3, #0]
 80154dc:	2b28      	cmp	r3, #40	; 0x28
 80154de:	d12f      	bne.n	8015540 <_strtod_l+0x380>
 80154e0:	4996      	ldr	r1, [pc, #600]	; (801573c <_strtod_l+0x57c>)
 80154e2:	aa18      	add	r2, sp, #96	; 0x60
 80154e4:	a815      	add	r0, sp, #84	; 0x54
 80154e6:	f002 fffd 	bl	80184e4 <__hexnan>
 80154ea:	2805      	cmp	r0, #5
 80154ec:	d128      	bne.n	8015540 <_strtod_l+0x380>
 80154ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80154f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80154f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80154f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80154fc:	e69b      	b.n	8015236 <_strtod_l+0x76>
 80154fe:	9f08      	ldr	r7, [sp, #32]
 8015500:	210a      	movs	r1, #10
 8015502:	fb01 2107 	mla	r1, r1, r7, r2
 8015506:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801550a:	9208      	str	r2, [sp, #32]
 801550c:	e7b5      	b.n	801547a <_strtod_l+0x2ba>
 801550e:	2a6e      	cmp	r2, #110	; 0x6e
 8015510:	e7d9      	b.n	80154c6 <_strtod_l+0x306>
 8015512:	498b      	ldr	r1, [pc, #556]	; (8015740 <_strtod_l+0x580>)
 8015514:	a815      	add	r0, sp, #84	; 0x54
 8015516:	f002 ffd1 	bl	80184bc <__match>
 801551a:	2800      	cmp	r0, #0
 801551c:	f43f aea8 	beq.w	8015270 <_strtod_l+0xb0>
 8015520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015522:	4988      	ldr	r1, [pc, #544]	; (8015744 <_strtod_l+0x584>)
 8015524:	3b01      	subs	r3, #1
 8015526:	a815      	add	r0, sp, #84	; 0x54
 8015528:	9315      	str	r3, [sp, #84]	; 0x54
 801552a:	f002 ffc7 	bl	80184bc <__match>
 801552e:	b910      	cbnz	r0, 8015536 <_strtod_l+0x376>
 8015530:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015532:	3301      	adds	r3, #1
 8015534:	9315      	str	r3, [sp, #84]	; 0x54
 8015536:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8015754 <_strtod_l+0x594>
 801553a:	f04f 0800 	mov.w	r8, #0
 801553e:	e67a      	b.n	8015236 <_strtod_l+0x76>
 8015540:	4881      	ldr	r0, [pc, #516]	; (8015748 <_strtod_l+0x588>)
 8015542:	f001 fe21 	bl	8017188 <nan>
 8015546:	ec59 8b10 	vmov	r8, r9, d0
 801554a:	e674      	b.n	8015236 <_strtod_l+0x76>
 801554c:	9b05      	ldr	r3, [sp, #20]
 801554e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015550:	1afb      	subs	r3, r7, r3
 8015552:	f1bb 0f00 	cmp.w	fp, #0
 8015556:	bf08      	it	eq
 8015558:	46b3      	moveq	fp, r6
 801555a:	2e10      	cmp	r6, #16
 801555c:	9308      	str	r3, [sp, #32]
 801555e:	4635      	mov	r5, r6
 8015560:	bfa8      	it	ge
 8015562:	2510      	movge	r5, #16
 8015564:	f7ea ffce 	bl	8000504 <__aeabi_ui2d>
 8015568:	2e09      	cmp	r6, #9
 801556a:	4680      	mov	r8, r0
 801556c:	4689      	mov	r9, r1
 801556e:	dd13      	ble.n	8015598 <_strtod_l+0x3d8>
 8015570:	4b76      	ldr	r3, [pc, #472]	; (801574c <_strtod_l+0x58c>)
 8015572:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015576:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801557a:	f7eb f83d 	bl	80005f8 <__aeabi_dmul>
 801557e:	4680      	mov	r8, r0
 8015580:	4650      	mov	r0, sl
 8015582:	4689      	mov	r9, r1
 8015584:	f7ea ffbe 	bl	8000504 <__aeabi_ui2d>
 8015588:	4602      	mov	r2, r0
 801558a:	460b      	mov	r3, r1
 801558c:	4640      	mov	r0, r8
 801558e:	4649      	mov	r1, r9
 8015590:	f7ea fe7c 	bl	800028c <__adddf3>
 8015594:	4680      	mov	r8, r0
 8015596:	4689      	mov	r9, r1
 8015598:	2e0f      	cmp	r6, #15
 801559a:	dc38      	bgt.n	801560e <_strtod_l+0x44e>
 801559c:	9b08      	ldr	r3, [sp, #32]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	f43f ae49 	beq.w	8015236 <_strtod_l+0x76>
 80155a4:	dd24      	ble.n	80155f0 <_strtod_l+0x430>
 80155a6:	2b16      	cmp	r3, #22
 80155a8:	dc0b      	bgt.n	80155c2 <_strtod_l+0x402>
 80155aa:	4968      	ldr	r1, [pc, #416]	; (801574c <_strtod_l+0x58c>)
 80155ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80155b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155b4:	4642      	mov	r2, r8
 80155b6:	464b      	mov	r3, r9
 80155b8:	f7eb f81e 	bl	80005f8 <__aeabi_dmul>
 80155bc:	4680      	mov	r8, r0
 80155be:	4689      	mov	r9, r1
 80155c0:	e639      	b.n	8015236 <_strtod_l+0x76>
 80155c2:	9a08      	ldr	r2, [sp, #32]
 80155c4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80155c8:	4293      	cmp	r3, r2
 80155ca:	db20      	blt.n	801560e <_strtod_l+0x44e>
 80155cc:	4c5f      	ldr	r4, [pc, #380]	; (801574c <_strtod_l+0x58c>)
 80155ce:	f1c6 060f 	rsb	r6, r6, #15
 80155d2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80155d6:	4642      	mov	r2, r8
 80155d8:	464b      	mov	r3, r9
 80155da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155de:	f7eb f80b 	bl	80005f8 <__aeabi_dmul>
 80155e2:	9b08      	ldr	r3, [sp, #32]
 80155e4:	1b9e      	subs	r6, r3, r6
 80155e6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80155ea:	e9d4 2300 	ldrd	r2, r3, [r4]
 80155ee:	e7e3      	b.n	80155b8 <_strtod_l+0x3f8>
 80155f0:	9b08      	ldr	r3, [sp, #32]
 80155f2:	3316      	adds	r3, #22
 80155f4:	db0b      	blt.n	801560e <_strtod_l+0x44e>
 80155f6:	9b05      	ldr	r3, [sp, #20]
 80155f8:	1bdf      	subs	r7, r3, r7
 80155fa:	4b54      	ldr	r3, [pc, #336]	; (801574c <_strtod_l+0x58c>)
 80155fc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8015600:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015604:	4640      	mov	r0, r8
 8015606:	4649      	mov	r1, r9
 8015608:	f7eb f920 	bl	800084c <__aeabi_ddiv>
 801560c:	e7d6      	b.n	80155bc <_strtod_l+0x3fc>
 801560e:	9b08      	ldr	r3, [sp, #32]
 8015610:	1b75      	subs	r5, r6, r5
 8015612:	441d      	add	r5, r3
 8015614:	2d00      	cmp	r5, #0
 8015616:	dd70      	ble.n	80156fa <_strtod_l+0x53a>
 8015618:	f015 030f 	ands.w	r3, r5, #15
 801561c:	d00a      	beq.n	8015634 <_strtod_l+0x474>
 801561e:	494b      	ldr	r1, [pc, #300]	; (801574c <_strtod_l+0x58c>)
 8015620:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015624:	4642      	mov	r2, r8
 8015626:	464b      	mov	r3, r9
 8015628:	e9d1 0100 	ldrd	r0, r1, [r1]
 801562c:	f7ea ffe4 	bl	80005f8 <__aeabi_dmul>
 8015630:	4680      	mov	r8, r0
 8015632:	4689      	mov	r9, r1
 8015634:	f035 050f 	bics.w	r5, r5, #15
 8015638:	d04d      	beq.n	80156d6 <_strtod_l+0x516>
 801563a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801563e:	dd22      	ble.n	8015686 <_strtod_l+0x4c6>
 8015640:	2500      	movs	r5, #0
 8015642:	46ab      	mov	fp, r5
 8015644:	9509      	str	r5, [sp, #36]	; 0x24
 8015646:	9505      	str	r5, [sp, #20]
 8015648:	2322      	movs	r3, #34	; 0x22
 801564a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8015754 <_strtod_l+0x594>
 801564e:	6023      	str	r3, [r4, #0]
 8015650:	f04f 0800 	mov.w	r8, #0
 8015654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015656:	2b00      	cmp	r3, #0
 8015658:	f43f aded 	beq.w	8015236 <_strtod_l+0x76>
 801565c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801565e:	4620      	mov	r0, r4
 8015660:	f003 f82e 	bl	80186c0 <_Bfree>
 8015664:	9905      	ldr	r1, [sp, #20]
 8015666:	4620      	mov	r0, r4
 8015668:	f003 f82a 	bl	80186c0 <_Bfree>
 801566c:	4659      	mov	r1, fp
 801566e:	4620      	mov	r0, r4
 8015670:	f003 f826 	bl	80186c0 <_Bfree>
 8015674:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015676:	4620      	mov	r0, r4
 8015678:	f003 f822 	bl	80186c0 <_Bfree>
 801567c:	4629      	mov	r1, r5
 801567e:	4620      	mov	r0, r4
 8015680:	f003 f81e 	bl	80186c0 <_Bfree>
 8015684:	e5d7      	b.n	8015236 <_strtod_l+0x76>
 8015686:	4b32      	ldr	r3, [pc, #200]	; (8015750 <_strtod_l+0x590>)
 8015688:	9304      	str	r3, [sp, #16]
 801568a:	2300      	movs	r3, #0
 801568c:	112d      	asrs	r5, r5, #4
 801568e:	4640      	mov	r0, r8
 8015690:	4649      	mov	r1, r9
 8015692:	469a      	mov	sl, r3
 8015694:	2d01      	cmp	r5, #1
 8015696:	dc21      	bgt.n	80156dc <_strtod_l+0x51c>
 8015698:	b10b      	cbz	r3, 801569e <_strtod_l+0x4de>
 801569a:	4680      	mov	r8, r0
 801569c:	4689      	mov	r9, r1
 801569e:	492c      	ldr	r1, [pc, #176]	; (8015750 <_strtod_l+0x590>)
 80156a0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80156a4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80156a8:	4642      	mov	r2, r8
 80156aa:	464b      	mov	r3, r9
 80156ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156b0:	f7ea ffa2 	bl	80005f8 <__aeabi_dmul>
 80156b4:	4b27      	ldr	r3, [pc, #156]	; (8015754 <_strtod_l+0x594>)
 80156b6:	460a      	mov	r2, r1
 80156b8:	400b      	ands	r3, r1
 80156ba:	4927      	ldr	r1, [pc, #156]	; (8015758 <_strtod_l+0x598>)
 80156bc:	428b      	cmp	r3, r1
 80156be:	4680      	mov	r8, r0
 80156c0:	d8be      	bhi.n	8015640 <_strtod_l+0x480>
 80156c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80156c6:	428b      	cmp	r3, r1
 80156c8:	bf86      	itte	hi
 80156ca:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801575c <_strtod_l+0x59c>
 80156ce:	f04f 38ff 	movhi.w	r8, #4294967295
 80156d2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80156d6:	2300      	movs	r3, #0
 80156d8:	9304      	str	r3, [sp, #16]
 80156da:	e07b      	b.n	80157d4 <_strtod_l+0x614>
 80156dc:	07ea      	lsls	r2, r5, #31
 80156de:	d505      	bpl.n	80156ec <_strtod_l+0x52c>
 80156e0:	9b04      	ldr	r3, [sp, #16]
 80156e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156e6:	f7ea ff87 	bl	80005f8 <__aeabi_dmul>
 80156ea:	2301      	movs	r3, #1
 80156ec:	9a04      	ldr	r2, [sp, #16]
 80156ee:	3208      	adds	r2, #8
 80156f0:	f10a 0a01 	add.w	sl, sl, #1
 80156f4:	106d      	asrs	r5, r5, #1
 80156f6:	9204      	str	r2, [sp, #16]
 80156f8:	e7cc      	b.n	8015694 <_strtod_l+0x4d4>
 80156fa:	d0ec      	beq.n	80156d6 <_strtod_l+0x516>
 80156fc:	426d      	negs	r5, r5
 80156fe:	f015 020f 	ands.w	r2, r5, #15
 8015702:	d00a      	beq.n	801571a <_strtod_l+0x55a>
 8015704:	4b11      	ldr	r3, [pc, #68]	; (801574c <_strtod_l+0x58c>)
 8015706:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801570a:	4640      	mov	r0, r8
 801570c:	4649      	mov	r1, r9
 801570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015712:	f7eb f89b 	bl	800084c <__aeabi_ddiv>
 8015716:	4680      	mov	r8, r0
 8015718:	4689      	mov	r9, r1
 801571a:	112d      	asrs	r5, r5, #4
 801571c:	d0db      	beq.n	80156d6 <_strtod_l+0x516>
 801571e:	2d1f      	cmp	r5, #31
 8015720:	dd1e      	ble.n	8015760 <_strtod_l+0x5a0>
 8015722:	2500      	movs	r5, #0
 8015724:	46ab      	mov	fp, r5
 8015726:	9509      	str	r5, [sp, #36]	; 0x24
 8015728:	9505      	str	r5, [sp, #20]
 801572a:	2322      	movs	r3, #34	; 0x22
 801572c:	f04f 0800 	mov.w	r8, #0
 8015730:	f04f 0900 	mov.w	r9, #0
 8015734:	6023      	str	r3, [r4, #0]
 8015736:	e78d      	b.n	8015654 <_strtod_l+0x494>
 8015738:	0801d996 	.word	0x0801d996
 801573c:	0801d848 	.word	0x0801d848
 8015740:	0801d98e 	.word	0x0801d98e
 8015744:	0801da7a 	.word	0x0801da7a
 8015748:	0801da76 	.word	0x0801da76
 801574c:	0801dbd0 	.word	0x0801dbd0
 8015750:	0801dba8 	.word	0x0801dba8
 8015754:	7ff00000 	.word	0x7ff00000
 8015758:	7ca00000 	.word	0x7ca00000
 801575c:	7fefffff 	.word	0x7fefffff
 8015760:	f015 0310 	ands.w	r3, r5, #16
 8015764:	bf18      	it	ne
 8015766:	236a      	movne	r3, #106	; 0x6a
 8015768:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8015b0c <_strtod_l+0x94c>
 801576c:	9304      	str	r3, [sp, #16]
 801576e:	4640      	mov	r0, r8
 8015770:	4649      	mov	r1, r9
 8015772:	2300      	movs	r3, #0
 8015774:	07ea      	lsls	r2, r5, #31
 8015776:	d504      	bpl.n	8015782 <_strtod_l+0x5c2>
 8015778:	e9da 2300 	ldrd	r2, r3, [sl]
 801577c:	f7ea ff3c 	bl	80005f8 <__aeabi_dmul>
 8015780:	2301      	movs	r3, #1
 8015782:	106d      	asrs	r5, r5, #1
 8015784:	f10a 0a08 	add.w	sl, sl, #8
 8015788:	d1f4      	bne.n	8015774 <_strtod_l+0x5b4>
 801578a:	b10b      	cbz	r3, 8015790 <_strtod_l+0x5d0>
 801578c:	4680      	mov	r8, r0
 801578e:	4689      	mov	r9, r1
 8015790:	9b04      	ldr	r3, [sp, #16]
 8015792:	b1bb      	cbz	r3, 80157c4 <_strtod_l+0x604>
 8015794:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8015798:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801579c:	2b00      	cmp	r3, #0
 801579e:	4649      	mov	r1, r9
 80157a0:	dd10      	ble.n	80157c4 <_strtod_l+0x604>
 80157a2:	2b1f      	cmp	r3, #31
 80157a4:	f340 811e 	ble.w	80159e4 <_strtod_l+0x824>
 80157a8:	2b34      	cmp	r3, #52	; 0x34
 80157aa:	bfde      	ittt	le
 80157ac:	f04f 33ff 	movle.w	r3, #4294967295
 80157b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80157b4:	4093      	lslle	r3, r2
 80157b6:	f04f 0800 	mov.w	r8, #0
 80157ba:	bfcc      	ite	gt
 80157bc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80157c0:	ea03 0901 	andle.w	r9, r3, r1
 80157c4:	2200      	movs	r2, #0
 80157c6:	2300      	movs	r3, #0
 80157c8:	4640      	mov	r0, r8
 80157ca:	4649      	mov	r1, r9
 80157cc:	f7eb f97c 	bl	8000ac8 <__aeabi_dcmpeq>
 80157d0:	2800      	cmp	r0, #0
 80157d2:	d1a6      	bne.n	8015722 <_strtod_l+0x562>
 80157d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157d6:	9300      	str	r3, [sp, #0]
 80157d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80157da:	4633      	mov	r3, r6
 80157dc:	465a      	mov	r2, fp
 80157de:	4620      	mov	r0, r4
 80157e0:	f002 ffd6 	bl	8018790 <__s2b>
 80157e4:	9009      	str	r0, [sp, #36]	; 0x24
 80157e6:	2800      	cmp	r0, #0
 80157e8:	f43f af2a 	beq.w	8015640 <_strtod_l+0x480>
 80157ec:	9a08      	ldr	r2, [sp, #32]
 80157ee:	9b05      	ldr	r3, [sp, #20]
 80157f0:	2a00      	cmp	r2, #0
 80157f2:	eba3 0307 	sub.w	r3, r3, r7
 80157f6:	bfa8      	it	ge
 80157f8:	2300      	movge	r3, #0
 80157fa:	930c      	str	r3, [sp, #48]	; 0x30
 80157fc:	2500      	movs	r5, #0
 80157fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015802:	9312      	str	r3, [sp, #72]	; 0x48
 8015804:	46ab      	mov	fp, r5
 8015806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015808:	4620      	mov	r0, r4
 801580a:	6859      	ldr	r1, [r3, #4]
 801580c:	f002 ff18 	bl	8018640 <_Balloc>
 8015810:	9005      	str	r0, [sp, #20]
 8015812:	2800      	cmp	r0, #0
 8015814:	f43f af18 	beq.w	8015648 <_strtod_l+0x488>
 8015818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801581a:	691a      	ldr	r2, [r3, #16]
 801581c:	3202      	adds	r2, #2
 801581e:	f103 010c 	add.w	r1, r3, #12
 8015822:	0092      	lsls	r2, r2, #2
 8015824:	300c      	adds	r0, #12
 8015826:	f001 fca0 	bl	801716a <memcpy>
 801582a:	ec49 8b10 	vmov	d0, r8, r9
 801582e:	aa18      	add	r2, sp, #96	; 0x60
 8015830:	a917      	add	r1, sp, #92	; 0x5c
 8015832:	4620      	mov	r0, r4
 8015834:	f003 fae0 	bl	8018df8 <__d2b>
 8015838:	ec49 8b18 	vmov	d8, r8, r9
 801583c:	9016      	str	r0, [sp, #88]	; 0x58
 801583e:	2800      	cmp	r0, #0
 8015840:	f43f af02 	beq.w	8015648 <_strtod_l+0x488>
 8015844:	2101      	movs	r1, #1
 8015846:	4620      	mov	r0, r4
 8015848:	f003 f83a 	bl	80188c0 <__i2b>
 801584c:	4683      	mov	fp, r0
 801584e:	2800      	cmp	r0, #0
 8015850:	f43f aefa 	beq.w	8015648 <_strtod_l+0x488>
 8015854:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8015856:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015858:	2e00      	cmp	r6, #0
 801585a:	bfab      	itete	ge
 801585c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801585e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8015860:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8015862:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8015866:	bfac      	ite	ge
 8015868:	eb06 0a03 	addge.w	sl, r6, r3
 801586c:	1b9f      	sublt	r7, r3, r6
 801586e:	9b04      	ldr	r3, [sp, #16]
 8015870:	1af6      	subs	r6, r6, r3
 8015872:	4416      	add	r6, r2
 8015874:	4ba0      	ldr	r3, [pc, #640]	; (8015af8 <_strtod_l+0x938>)
 8015876:	3e01      	subs	r6, #1
 8015878:	429e      	cmp	r6, r3
 801587a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801587e:	f280 80c4 	bge.w	8015a0a <_strtod_l+0x84a>
 8015882:	1b9b      	subs	r3, r3, r6
 8015884:	2b1f      	cmp	r3, #31
 8015886:	eba2 0203 	sub.w	r2, r2, r3
 801588a:	f04f 0101 	mov.w	r1, #1
 801588e:	f300 80b0 	bgt.w	80159f2 <_strtod_l+0x832>
 8015892:	fa01 f303 	lsl.w	r3, r1, r3
 8015896:	930e      	str	r3, [sp, #56]	; 0x38
 8015898:	2300      	movs	r3, #0
 801589a:	930d      	str	r3, [sp, #52]	; 0x34
 801589c:	eb0a 0602 	add.w	r6, sl, r2
 80158a0:	9b04      	ldr	r3, [sp, #16]
 80158a2:	45b2      	cmp	sl, r6
 80158a4:	4417      	add	r7, r2
 80158a6:	441f      	add	r7, r3
 80158a8:	4653      	mov	r3, sl
 80158aa:	bfa8      	it	ge
 80158ac:	4633      	movge	r3, r6
 80158ae:	42bb      	cmp	r3, r7
 80158b0:	bfa8      	it	ge
 80158b2:	463b      	movge	r3, r7
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	bfc2      	ittt	gt
 80158b8:	1af6      	subgt	r6, r6, r3
 80158ba:	1aff      	subgt	r7, r7, r3
 80158bc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80158c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	dd17      	ble.n	80158f6 <_strtod_l+0x736>
 80158c6:	4659      	mov	r1, fp
 80158c8:	461a      	mov	r2, r3
 80158ca:	4620      	mov	r0, r4
 80158cc:	f003 f8b8 	bl	8018a40 <__pow5mult>
 80158d0:	4683      	mov	fp, r0
 80158d2:	2800      	cmp	r0, #0
 80158d4:	f43f aeb8 	beq.w	8015648 <_strtod_l+0x488>
 80158d8:	4601      	mov	r1, r0
 80158da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80158dc:	4620      	mov	r0, r4
 80158de:	f003 f805 	bl	80188ec <__multiply>
 80158e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80158e4:	2800      	cmp	r0, #0
 80158e6:	f43f aeaf 	beq.w	8015648 <_strtod_l+0x488>
 80158ea:	9916      	ldr	r1, [sp, #88]	; 0x58
 80158ec:	4620      	mov	r0, r4
 80158ee:	f002 fee7 	bl	80186c0 <_Bfree>
 80158f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158f4:	9316      	str	r3, [sp, #88]	; 0x58
 80158f6:	2e00      	cmp	r6, #0
 80158f8:	f300 808c 	bgt.w	8015a14 <_strtod_l+0x854>
 80158fc:	9b08      	ldr	r3, [sp, #32]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	dd08      	ble.n	8015914 <_strtod_l+0x754>
 8015902:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015904:	9905      	ldr	r1, [sp, #20]
 8015906:	4620      	mov	r0, r4
 8015908:	f003 f89a 	bl	8018a40 <__pow5mult>
 801590c:	9005      	str	r0, [sp, #20]
 801590e:	2800      	cmp	r0, #0
 8015910:	f43f ae9a 	beq.w	8015648 <_strtod_l+0x488>
 8015914:	2f00      	cmp	r7, #0
 8015916:	dd08      	ble.n	801592a <_strtod_l+0x76a>
 8015918:	9905      	ldr	r1, [sp, #20]
 801591a:	463a      	mov	r2, r7
 801591c:	4620      	mov	r0, r4
 801591e:	f003 f8e9 	bl	8018af4 <__lshift>
 8015922:	9005      	str	r0, [sp, #20]
 8015924:	2800      	cmp	r0, #0
 8015926:	f43f ae8f 	beq.w	8015648 <_strtod_l+0x488>
 801592a:	f1ba 0f00 	cmp.w	sl, #0
 801592e:	dd08      	ble.n	8015942 <_strtod_l+0x782>
 8015930:	4659      	mov	r1, fp
 8015932:	4652      	mov	r2, sl
 8015934:	4620      	mov	r0, r4
 8015936:	f003 f8dd 	bl	8018af4 <__lshift>
 801593a:	4683      	mov	fp, r0
 801593c:	2800      	cmp	r0, #0
 801593e:	f43f ae83 	beq.w	8015648 <_strtod_l+0x488>
 8015942:	9a05      	ldr	r2, [sp, #20]
 8015944:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015946:	4620      	mov	r0, r4
 8015948:	f003 f95c 	bl	8018c04 <__mdiff>
 801594c:	4605      	mov	r5, r0
 801594e:	2800      	cmp	r0, #0
 8015950:	f43f ae7a 	beq.w	8015648 <_strtod_l+0x488>
 8015954:	68c3      	ldr	r3, [r0, #12]
 8015956:	930b      	str	r3, [sp, #44]	; 0x2c
 8015958:	2300      	movs	r3, #0
 801595a:	60c3      	str	r3, [r0, #12]
 801595c:	4659      	mov	r1, fp
 801595e:	f003 f935 	bl	8018bcc <__mcmp>
 8015962:	2800      	cmp	r0, #0
 8015964:	da60      	bge.n	8015a28 <_strtod_l+0x868>
 8015966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015968:	ea53 0308 	orrs.w	r3, r3, r8
 801596c:	f040 8084 	bne.w	8015a78 <_strtod_l+0x8b8>
 8015970:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015974:	2b00      	cmp	r3, #0
 8015976:	d17f      	bne.n	8015a78 <_strtod_l+0x8b8>
 8015978:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801597c:	0d1b      	lsrs	r3, r3, #20
 801597e:	051b      	lsls	r3, r3, #20
 8015980:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015984:	d978      	bls.n	8015a78 <_strtod_l+0x8b8>
 8015986:	696b      	ldr	r3, [r5, #20]
 8015988:	b913      	cbnz	r3, 8015990 <_strtod_l+0x7d0>
 801598a:	692b      	ldr	r3, [r5, #16]
 801598c:	2b01      	cmp	r3, #1
 801598e:	dd73      	ble.n	8015a78 <_strtod_l+0x8b8>
 8015990:	4629      	mov	r1, r5
 8015992:	2201      	movs	r2, #1
 8015994:	4620      	mov	r0, r4
 8015996:	f003 f8ad 	bl	8018af4 <__lshift>
 801599a:	4659      	mov	r1, fp
 801599c:	4605      	mov	r5, r0
 801599e:	f003 f915 	bl	8018bcc <__mcmp>
 80159a2:	2800      	cmp	r0, #0
 80159a4:	dd68      	ble.n	8015a78 <_strtod_l+0x8b8>
 80159a6:	9904      	ldr	r1, [sp, #16]
 80159a8:	4a54      	ldr	r2, [pc, #336]	; (8015afc <_strtod_l+0x93c>)
 80159aa:	464b      	mov	r3, r9
 80159ac:	2900      	cmp	r1, #0
 80159ae:	f000 8084 	beq.w	8015aba <_strtod_l+0x8fa>
 80159b2:	ea02 0109 	and.w	r1, r2, r9
 80159b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80159ba:	dc7e      	bgt.n	8015aba <_strtod_l+0x8fa>
 80159bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80159c0:	f77f aeb3 	ble.w	801572a <_strtod_l+0x56a>
 80159c4:	4b4e      	ldr	r3, [pc, #312]	; (8015b00 <_strtod_l+0x940>)
 80159c6:	4640      	mov	r0, r8
 80159c8:	4649      	mov	r1, r9
 80159ca:	2200      	movs	r2, #0
 80159cc:	f7ea fe14 	bl	80005f8 <__aeabi_dmul>
 80159d0:	4b4a      	ldr	r3, [pc, #296]	; (8015afc <_strtod_l+0x93c>)
 80159d2:	400b      	ands	r3, r1
 80159d4:	4680      	mov	r8, r0
 80159d6:	4689      	mov	r9, r1
 80159d8:	2b00      	cmp	r3, #0
 80159da:	f47f ae3f 	bne.w	801565c <_strtod_l+0x49c>
 80159de:	2322      	movs	r3, #34	; 0x22
 80159e0:	6023      	str	r3, [r4, #0]
 80159e2:	e63b      	b.n	801565c <_strtod_l+0x49c>
 80159e4:	f04f 32ff 	mov.w	r2, #4294967295
 80159e8:	fa02 f303 	lsl.w	r3, r2, r3
 80159ec:	ea03 0808 	and.w	r8, r3, r8
 80159f0:	e6e8      	b.n	80157c4 <_strtod_l+0x604>
 80159f2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80159f6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80159fa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80159fe:	36e2      	adds	r6, #226	; 0xe2
 8015a00:	fa01 f306 	lsl.w	r3, r1, r6
 8015a04:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8015a08:	e748      	b.n	801589c <_strtod_l+0x6dc>
 8015a0a:	2100      	movs	r1, #0
 8015a0c:	2301      	movs	r3, #1
 8015a0e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8015a12:	e743      	b.n	801589c <_strtod_l+0x6dc>
 8015a14:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015a16:	4632      	mov	r2, r6
 8015a18:	4620      	mov	r0, r4
 8015a1a:	f003 f86b 	bl	8018af4 <__lshift>
 8015a1e:	9016      	str	r0, [sp, #88]	; 0x58
 8015a20:	2800      	cmp	r0, #0
 8015a22:	f47f af6b 	bne.w	80158fc <_strtod_l+0x73c>
 8015a26:	e60f      	b.n	8015648 <_strtod_l+0x488>
 8015a28:	46ca      	mov	sl, r9
 8015a2a:	d171      	bne.n	8015b10 <_strtod_l+0x950>
 8015a2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015a2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015a32:	b352      	cbz	r2, 8015a8a <_strtod_l+0x8ca>
 8015a34:	4a33      	ldr	r2, [pc, #204]	; (8015b04 <_strtod_l+0x944>)
 8015a36:	4293      	cmp	r3, r2
 8015a38:	d12a      	bne.n	8015a90 <_strtod_l+0x8d0>
 8015a3a:	9b04      	ldr	r3, [sp, #16]
 8015a3c:	4641      	mov	r1, r8
 8015a3e:	b1fb      	cbz	r3, 8015a80 <_strtod_l+0x8c0>
 8015a40:	4b2e      	ldr	r3, [pc, #184]	; (8015afc <_strtod_l+0x93c>)
 8015a42:	ea09 0303 	and.w	r3, r9, r3
 8015a46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8015a4e:	d81a      	bhi.n	8015a86 <_strtod_l+0x8c6>
 8015a50:	0d1b      	lsrs	r3, r3, #20
 8015a52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015a56:	fa02 f303 	lsl.w	r3, r2, r3
 8015a5a:	4299      	cmp	r1, r3
 8015a5c:	d118      	bne.n	8015a90 <_strtod_l+0x8d0>
 8015a5e:	4b2a      	ldr	r3, [pc, #168]	; (8015b08 <_strtod_l+0x948>)
 8015a60:	459a      	cmp	sl, r3
 8015a62:	d102      	bne.n	8015a6a <_strtod_l+0x8aa>
 8015a64:	3101      	adds	r1, #1
 8015a66:	f43f adef 	beq.w	8015648 <_strtod_l+0x488>
 8015a6a:	4b24      	ldr	r3, [pc, #144]	; (8015afc <_strtod_l+0x93c>)
 8015a6c:	ea0a 0303 	and.w	r3, sl, r3
 8015a70:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8015a74:	f04f 0800 	mov.w	r8, #0
 8015a78:	9b04      	ldr	r3, [sp, #16]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d1a2      	bne.n	80159c4 <_strtod_l+0x804>
 8015a7e:	e5ed      	b.n	801565c <_strtod_l+0x49c>
 8015a80:	f04f 33ff 	mov.w	r3, #4294967295
 8015a84:	e7e9      	b.n	8015a5a <_strtod_l+0x89a>
 8015a86:	4613      	mov	r3, r2
 8015a88:	e7e7      	b.n	8015a5a <_strtod_l+0x89a>
 8015a8a:	ea53 0308 	orrs.w	r3, r3, r8
 8015a8e:	d08a      	beq.n	80159a6 <_strtod_l+0x7e6>
 8015a90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a92:	b1e3      	cbz	r3, 8015ace <_strtod_l+0x90e>
 8015a94:	ea13 0f0a 	tst.w	r3, sl
 8015a98:	d0ee      	beq.n	8015a78 <_strtod_l+0x8b8>
 8015a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a9c:	9a04      	ldr	r2, [sp, #16]
 8015a9e:	4640      	mov	r0, r8
 8015aa0:	4649      	mov	r1, r9
 8015aa2:	b1c3      	cbz	r3, 8015ad6 <_strtod_l+0x916>
 8015aa4:	f7ff fb6e 	bl	8015184 <sulp>
 8015aa8:	4602      	mov	r2, r0
 8015aaa:	460b      	mov	r3, r1
 8015aac:	ec51 0b18 	vmov	r0, r1, d8
 8015ab0:	f7ea fbec 	bl	800028c <__adddf3>
 8015ab4:	4680      	mov	r8, r0
 8015ab6:	4689      	mov	r9, r1
 8015ab8:	e7de      	b.n	8015a78 <_strtod_l+0x8b8>
 8015aba:	4013      	ands	r3, r2
 8015abc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015ac0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8015ac4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8015ac8:	f04f 38ff 	mov.w	r8, #4294967295
 8015acc:	e7d4      	b.n	8015a78 <_strtod_l+0x8b8>
 8015ace:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ad0:	ea13 0f08 	tst.w	r3, r8
 8015ad4:	e7e0      	b.n	8015a98 <_strtod_l+0x8d8>
 8015ad6:	f7ff fb55 	bl	8015184 <sulp>
 8015ada:	4602      	mov	r2, r0
 8015adc:	460b      	mov	r3, r1
 8015ade:	ec51 0b18 	vmov	r0, r1, d8
 8015ae2:	f7ea fbd1 	bl	8000288 <__aeabi_dsub>
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	2300      	movs	r3, #0
 8015aea:	4680      	mov	r8, r0
 8015aec:	4689      	mov	r9, r1
 8015aee:	f7ea ffeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8015af2:	2800      	cmp	r0, #0
 8015af4:	d0c0      	beq.n	8015a78 <_strtod_l+0x8b8>
 8015af6:	e618      	b.n	801572a <_strtod_l+0x56a>
 8015af8:	fffffc02 	.word	0xfffffc02
 8015afc:	7ff00000 	.word	0x7ff00000
 8015b00:	39500000 	.word	0x39500000
 8015b04:	000fffff 	.word	0x000fffff
 8015b08:	7fefffff 	.word	0x7fefffff
 8015b0c:	0801d860 	.word	0x0801d860
 8015b10:	4659      	mov	r1, fp
 8015b12:	4628      	mov	r0, r5
 8015b14:	f003 f9ca 	bl	8018eac <__ratio>
 8015b18:	ec57 6b10 	vmov	r6, r7, d0
 8015b1c:	ee10 0a10 	vmov	r0, s0
 8015b20:	2200      	movs	r2, #0
 8015b22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015b26:	4639      	mov	r1, r7
 8015b28:	f7ea ffe2 	bl	8000af0 <__aeabi_dcmple>
 8015b2c:	2800      	cmp	r0, #0
 8015b2e:	d071      	beq.n	8015c14 <_strtod_l+0xa54>
 8015b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d17c      	bne.n	8015c30 <_strtod_l+0xa70>
 8015b36:	f1b8 0f00 	cmp.w	r8, #0
 8015b3a:	d15a      	bne.n	8015bf2 <_strtod_l+0xa32>
 8015b3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d15d      	bne.n	8015c00 <_strtod_l+0xa40>
 8015b44:	4b90      	ldr	r3, [pc, #576]	; (8015d88 <_strtod_l+0xbc8>)
 8015b46:	2200      	movs	r2, #0
 8015b48:	4630      	mov	r0, r6
 8015b4a:	4639      	mov	r1, r7
 8015b4c:	f7ea ffc6 	bl	8000adc <__aeabi_dcmplt>
 8015b50:	2800      	cmp	r0, #0
 8015b52:	d15c      	bne.n	8015c0e <_strtod_l+0xa4e>
 8015b54:	4630      	mov	r0, r6
 8015b56:	4639      	mov	r1, r7
 8015b58:	4b8c      	ldr	r3, [pc, #560]	; (8015d8c <_strtod_l+0xbcc>)
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	f7ea fd4c 	bl	80005f8 <__aeabi_dmul>
 8015b60:	4606      	mov	r6, r0
 8015b62:	460f      	mov	r7, r1
 8015b64:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015b68:	9606      	str	r6, [sp, #24]
 8015b6a:	9307      	str	r3, [sp, #28]
 8015b6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015b70:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8015b74:	4b86      	ldr	r3, [pc, #536]	; (8015d90 <_strtod_l+0xbd0>)
 8015b76:	ea0a 0303 	and.w	r3, sl, r3
 8015b7a:	930d      	str	r3, [sp, #52]	; 0x34
 8015b7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015b7e:	4b85      	ldr	r3, [pc, #532]	; (8015d94 <_strtod_l+0xbd4>)
 8015b80:	429a      	cmp	r2, r3
 8015b82:	f040 8090 	bne.w	8015ca6 <_strtod_l+0xae6>
 8015b86:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8015b8a:	ec49 8b10 	vmov	d0, r8, r9
 8015b8e:	f003 f8c3 	bl	8018d18 <__ulp>
 8015b92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015b96:	ec51 0b10 	vmov	r0, r1, d0
 8015b9a:	f7ea fd2d 	bl	80005f8 <__aeabi_dmul>
 8015b9e:	4642      	mov	r2, r8
 8015ba0:	464b      	mov	r3, r9
 8015ba2:	f7ea fb73 	bl	800028c <__adddf3>
 8015ba6:	460b      	mov	r3, r1
 8015ba8:	4979      	ldr	r1, [pc, #484]	; (8015d90 <_strtod_l+0xbd0>)
 8015baa:	4a7b      	ldr	r2, [pc, #492]	; (8015d98 <_strtod_l+0xbd8>)
 8015bac:	4019      	ands	r1, r3
 8015bae:	4291      	cmp	r1, r2
 8015bb0:	4680      	mov	r8, r0
 8015bb2:	d944      	bls.n	8015c3e <_strtod_l+0xa7e>
 8015bb4:	ee18 2a90 	vmov	r2, s17
 8015bb8:	4b78      	ldr	r3, [pc, #480]	; (8015d9c <_strtod_l+0xbdc>)
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d104      	bne.n	8015bc8 <_strtod_l+0xa08>
 8015bbe:	ee18 3a10 	vmov	r3, s16
 8015bc2:	3301      	adds	r3, #1
 8015bc4:	f43f ad40 	beq.w	8015648 <_strtod_l+0x488>
 8015bc8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8015d9c <_strtod_l+0xbdc>
 8015bcc:	f04f 38ff 	mov.w	r8, #4294967295
 8015bd0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	f002 fd74 	bl	80186c0 <_Bfree>
 8015bd8:	9905      	ldr	r1, [sp, #20]
 8015bda:	4620      	mov	r0, r4
 8015bdc:	f002 fd70 	bl	80186c0 <_Bfree>
 8015be0:	4659      	mov	r1, fp
 8015be2:	4620      	mov	r0, r4
 8015be4:	f002 fd6c 	bl	80186c0 <_Bfree>
 8015be8:	4629      	mov	r1, r5
 8015bea:	4620      	mov	r0, r4
 8015bec:	f002 fd68 	bl	80186c0 <_Bfree>
 8015bf0:	e609      	b.n	8015806 <_strtod_l+0x646>
 8015bf2:	f1b8 0f01 	cmp.w	r8, #1
 8015bf6:	d103      	bne.n	8015c00 <_strtod_l+0xa40>
 8015bf8:	f1b9 0f00 	cmp.w	r9, #0
 8015bfc:	f43f ad95 	beq.w	801572a <_strtod_l+0x56a>
 8015c00:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8015d58 <_strtod_l+0xb98>
 8015c04:	4f60      	ldr	r7, [pc, #384]	; (8015d88 <_strtod_l+0xbc8>)
 8015c06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015c0a:	2600      	movs	r6, #0
 8015c0c:	e7ae      	b.n	8015b6c <_strtod_l+0x9ac>
 8015c0e:	4f5f      	ldr	r7, [pc, #380]	; (8015d8c <_strtod_l+0xbcc>)
 8015c10:	2600      	movs	r6, #0
 8015c12:	e7a7      	b.n	8015b64 <_strtod_l+0x9a4>
 8015c14:	4b5d      	ldr	r3, [pc, #372]	; (8015d8c <_strtod_l+0xbcc>)
 8015c16:	4630      	mov	r0, r6
 8015c18:	4639      	mov	r1, r7
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	f7ea fcec 	bl	80005f8 <__aeabi_dmul>
 8015c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c22:	4606      	mov	r6, r0
 8015c24:	460f      	mov	r7, r1
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d09c      	beq.n	8015b64 <_strtod_l+0x9a4>
 8015c2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015c2e:	e79d      	b.n	8015b6c <_strtod_l+0x9ac>
 8015c30:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8015d60 <_strtod_l+0xba0>
 8015c34:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015c38:	ec57 6b17 	vmov	r6, r7, d7
 8015c3c:	e796      	b.n	8015b6c <_strtod_l+0x9ac>
 8015c3e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8015c42:	9b04      	ldr	r3, [sp, #16]
 8015c44:	46ca      	mov	sl, r9
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d1c2      	bne.n	8015bd0 <_strtod_l+0xa10>
 8015c4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015c4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015c50:	0d1b      	lsrs	r3, r3, #20
 8015c52:	051b      	lsls	r3, r3, #20
 8015c54:	429a      	cmp	r2, r3
 8015c56:	d1bb      	bne.n	8015bd0 <_strtod_l+0xa10>
 8015c58:	4630      	mov	r0, r6
 8015c5a:	4639      	mov	r1, r7
 8015c5c:	f7eb f82c 	bl	8000cb8 <__aeabi_d2lz>
 8015c60:	f7ea fc9c 	bl	800059c <__aeabi_l2d>
 8015c64:	4602      	mov	r2, r0
 8015c66:	460b      	mov	r3, r1
 8015c68:	4630      	mov	r0, r6
 8015c6a:	4639      	mov	r1, r7
 8015c6c:	f7ea fb0c 	bl	8000288 <__aeabi_dsub>
 8015c70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015c72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015c76:	ea43 0308 	orr.w	r3, r3, r8
 8015c7a:	4313      	orrs	r3, r2
 8015c7c:	4606      	mov	r6, r0
 8015c7e:	460f      	mov	r7, r1
 8015c80:	d054      	beq.n	8015d2c <_strtod_l+0xb6c>
 8015c82:	a339      	add	r3, pc, #228	; (adr r3, 8015d68 <_strtod_l+0xba8>)
 8015c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c88:	f7ea ff28 	bl	8000adc <__aeabi_dcmplt>
 8015c8c:	2800      	cmp	r0, #0
 8015c8e:	f47f ace5 	bne.w	801565c <_strtod_l+0x49c>
 8015c92:	a337      	add	r3, pc, #220	; (adr r3, 8015d70 <_strtod_l+0xbb0>)
 8015c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c98:	4630      	mov	r0, r6
 8015c9a:	4639      	mov	r1, r7
 8015c9c:	f7ea ff3c 	bl	8000b18 <__aeabi_dcmpgt>
 8015ca0:	2800      	cmp	r0, #0
 8015ca2:	d095      	beq.n	8015bd0 <_strtod_l+0xa10>
 8015ca4:	e4da      	b.n	801565c <_strtod_l+0x49c>
 8015ca6:	9b04      	ldr	r3, [sp, #16]
 8015ca8:	b333      	cbz	r3, 8015cf8 <_strtod_l+0xb38>
 8015caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015cac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015cb0:	d822      	bhi.n	8015cf8 <_strtod_l+0xb38>
 8015cb2:	a331      	add	r3, pc, #196	; (adr r3, 8015d78 <_strtod_l+0xbb8>)
 8015cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cb8:	4630      	mov	r0, r6
 8015cba:	4639      	mov	r1, r7
 8015cbc:	f7ea ff18 	bl	8000af0 <__aeabi_dcmple>
 8015cc0:	b1a0      	cbz	r0, 8015cec <_strtod_l+0xb2c>
 8015cc2:	4639      	mov	r1, r7
 8015cc4:	4630      	mov	r0, r6
 8015cc6:	f7ea ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8015cca:	2801      	cmp	r0, #1
 8015ccc:	bf38      	it	cc
 8015cce:	2001      	movcc	r0, #1
 8015cd0:	f7ea fc18 	bl	8000504 <__aeabi_ui2d>
 8015cd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015cd6:	4606      	mov	r6, r0
 8015cd8:	460f      	mov	r7, r1
 8015cda:	bb23      	cbnz	r3, 8015d26 <_strtod_l+0xb66>
 8015cdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015ce0:	9010      	str	r0, [sp, #64]	; 0x40
 8015ce2:	9311      	str	r3, [sp, #68]	; 0x44
 8015ce4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015ce8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8015cec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015cf0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015cf4:	1a9b      	subs	r3, r3, r2
 8015cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8015cf8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015cfc:	eeb0 0a48 	vmov.f32	s0, s16
 8015d00:	eef0 0a68 	vmov.f32	s1, s17
 8015d04:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015d08:	f003 f806 	bl	8018d18 <__ulp>
 8015d0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015d10:	ec53 2b10 	vmov	r2, r3, d0
 8015d14:	f7ea fc70 	bl	80005f8 <__aeabi_dmul>
 8015d18:	ec53 2b18 	vmov	r2, r3, d8
 8015d1c:	f7ea fab6 	bl	800028c <__adddf3>
 8015d20:	4680      	mov	r8, r0
 8015d22:	4689      	mov	r9, r1
 8015d24:	e78d      	b.n	8015c42 <_strtod_l+0xa82>
 8015d26:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015d2a:	e7db      	b.n	8015ce4 <_strtod_l+0xb24>
 8015d2c:	a314      	add	r3, pc, #80	; (adr r3, 8015d80 <_strtod_l+0xbc0>)
 8015d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d32:	f7ea fed3 	bl	8000adc <__aeabi_dcmplt>
 8015d36:	e7b3      	b.n	8015ca0 <_strtod_l+0xae0>
 8015d38:	2300      	movs	r3, #0
 8015d3a:	930a      	str	r3, [sp, #40]	; 0x28
 8015d3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015d3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d40:	6013      	str	r3, [r2, #0]
 8015d42:	f7ff ba7c 	b.w	801523e <_strtod_l+0x7e>
 8015d46:	2a65      	cmp	r2, #101	; 0x65
 8015d48:	f43f ab75 	beq.w	8015436 <_strtod_l+0x276>
 8015d4c:	2a45      	cmp	r2, #69	; 0x45
 8015d4e:	f43f ab72 	beq.w	8015436 <_strtod_l+0x276>
 8015d52:	2301      	movs	r3, #1
 8015d54:	f7ff bbaa 	b.w	80154ac <_strtod_l+0x2ec>
 8015d58:	00000000 	.word	0x00000000
 8015d5c:	bff00000 	.word	0xbff00000
 8015d60:	00000000 	.word	0x00000000
 8015d64:	3ff00000 	.word	0x3ff00000
 8015d68:	94a03595 	.word	0x94a03595
 8015d6c:	3fdfffff 	.word	0x3fdfffff
 8015d70:	35afe535 	.word	0x35afe535
 8015d74:	3fe00000 	.word	0x3fe00000
 8015d78:	ffc00000 	.word	0xffc00000
 8015d7c:	41dfffff 	.word	0x41dfffff
 8015d80:	94a03595 	.word	0x94a03595
 8015d84:	3fcfffff 	.word	0x3fcfffff
 8015d88:	3ff00000 	.word	0x3ff00000
 8015d8c:	3fe00000 	.word	0x3fe00000
 8015d90:	7ff00000 	.word	0x7ff00000
 8015d94:	7fe00000 	.word	0x7fe00000
 8015d98:	7c9fffff 	.word	0x7c9fffff
 8015d9c:	7fefffff 	.word	0x7fefffff

08015da0 <_strtod_r>:
 8015da0:	4b01      	ldr	r3, [pc, #4]	; (8015da8 <_strtod_r+0x8>)
 8015da2:	f7ff ba0d 	b.w	80151c0 <_strtod_l>
 8015da6:	bf00      	nop
 8015da8:	2000013c 	.word	0x2000013c

08015dac <strtof>:
 8015dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015db0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8015e74 <strtof+0xc8>
 8015db4:	4b2a      	ldr	r3, [pc, #168]	; (8015e60 <strtof+0xb4>)
 8015db6:	460a      	mov	r2, r1
 8015db8:	ed2d 8b02 	vpush	{d8}
 8015dbc:	4601      	mov	r1, r0
 8015dbe:	f8d8 0000 	ldr.w	r0, [r8]
 8015dc2:	f7ff f9fd 	bl	80151c0 <_strtod_l>
 8015dc6:	ec55 4b10 	vmov	r4, r5, d0
 8015dca:	ee10 2a10 	vmov	r2, s0
 8015dce:	ee10 0a10 	vmov	r0, s0
 8015dd2:	462b      	mov	r3, r5
 8015dd4:	4629      	mov	r1, r5
 8015dd6:	f7ea fea9 	bl	8000b2c <__aeabi_dcmpun>
 8015dda:	b190      	cbz	r0, 8015e02 <strtof+0x56>
 8015ddc:	2d00      	cmp	r5, #0
 8015dde:	4821      	ldr	r0, [pc, #132]	; (8015e64 <strtof+0xb8>)
 8015de0:	da09      	bge.n	8015df6 <strtof+0x4a>
 8015de2:	f001 f9d9 	bl	8017198 <nanf>
 8015de6:	eeb1 8a40 	vneg.f32	s16, s0
 8015dea:	eeb0 0a48 	vmov.f32	s0, s16
 8015dee:	ecbd 8b02 	vpop	{d8}
 8015df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015df6:	ecbd 8b02 	vpop	{d8}
 8015dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015dfe:	f001 b9cb 	b.w	8017198 <nanf>
 8015e02:	4620      	mov	r0, r4
 8015e04:	4629      	mov	r1, r5
 8015e06:	f7ea feef 	bl	8000be8 <__aeabi_d2f>
 8015e0a:	ee08 0a10 	vmov	s16, r0
 8015e0e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8015e68 <strtof+0xbc>
 8015e12:	eeb0 7ac8 	vabs.f32	s14, s16
 8015e16:	eeb4 7a67 	vcmp.f32	s14, s15
 8015e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e1e:	dd11      	ble.n	8015e44 <strtof+0x98>
 8015e20:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8015e24:	4b11      	ldr	r3, [pc, #68]	; (8015e6c <strtof+0xc0>)
 8015e26:	f04f 32ff 	mov.w	r2, #4294967295
 8015e2a:	4620      	mov	r0, r4
 8015e2c:	4639      	mov	r1, r7
 8015e2e:	f7ea fe7d 	bl	8000b2c <__aeabi_dcmpun>
 8015e32:	b980      	cbnz	r0, 8015e56 <strtof+0xaa>
 8015e34:	4b0d      	ldr	r3, [pc, #52]	; (8015e6c <strtof+0xc0>)
 8015e36:	f04f 32ff 	mov.w	r2, #4294967295
 8015e3a:	4620      	mov	r0, r4
 8015e3c:	4639      	mov	r1, r7
 8015e3e:	f7ea fe57 	bl	8000af0 <__aeabi_dcmple>
 8015e42:	b940      	cbnz	r0, 8015e56 <strtof+0xaa>
 8015e44:	ee18 3a10 	vmov	r3, s16
 8015e48:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8015e4c:	d1cd      	bne.n	8015dea <strtof+0x3e>
 8015e4e:	4b08      	ldr	r3, [pc, #32]	; (8015e70 <strtof+0xc4>)
 8015e50:	402b      	ands	r3, r5
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d0c9      	beq.n	8015dea <strtof+0x3e>
 8015e56:	f8d8 3000 	ldr.w	r3, [r8]
 8015e5a:	2222      	movs	r2, #34	; 0x22
 8015e5c:	601a      	str	r2, [r3, #0]
 8015e5e:	e7c4      	b.n	8015dea <strtof+0x3e>
 8015e60:	2000013c 	.word	0x2000013c
 8015e64:	0801da76 	.word	0x0801da76
 8015e68:	7f7fffff 	.word	0x7f7fffff
 8015e6c:	7fefffff 	.word	0x7fefffff
 8015e70:	7ff00000 	.word	0x7ff00000
 8015e74:	200002f4 	.word	0x200002f4

08015e78 <_strtol_l.constprop.0>:
 8015e78:	2b01      	cmp	r3, #1
 8015e7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e7e:	d001      	beq.n	8015e84 <_strtol_l.constprop.0+0xc>
 8015e80:	2b24      	cmp	r3, #36	; 0x24
 8015e82:	d906      	bls.n	8015e92 <_strtol_l.constprop.0+0x1a>
 8015e84:	f001 f93c 	bl	8017100 <__errno>
 8015e88:	2316      	movs	r3, #22
 8015e8a:	6003      	str	r3, [r0, #0]
 8015e8c:	2000      	movs	r0, #0
 8015e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e92:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015f78 <_strtol_l.constprop.0+0x100>
 8015e96:	460d      	mov	r5, r1
 8015e98:	462e      	mov	r6, r5
 8015e9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015e9e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8015ea2:	f017 0708 	ands.w	r7, r7, #8
 8015ea6:	d1f7      	bne.n	8015e98 <_strtol_l.constprop.0+0x20>
 8015ea8:	2c2d      	cmp	r4, #45	; 0x2d
 8015eaa:	d132      	bne.n	8015f12 <_strtol_l.constprop.0+0x9a>
 8015eac:	782c      	ldrb	r4, [r5, #0]
 8015eae:	2701      	movs	r7, #1
 8015eb0:	1cb5      	adds	r5, r6, #2
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d05b      	beq.n	8015f6e <_strtol_l.constprop.0+0xf6>
 8015eb6:	2b10      	cmp	r3, #16
 8015eb8:	d109      	bne.n	8015ece <_strtol_l.constprop.0+0x56>
 8015eba:	2c30      	cmp	r4, #48	; 0x30
 8015ebc:	d107      	bne.n	8015ece <_strtol_l.constprop.0+0x56>
 8015ebe:	782c      	ldrb	r4, [r5, #0]
 8015ec0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015ec4:	2c58      	cmp	r4, #88	; 0x58
 8015ec6:	d14d      	bne.n	8015f64 <_strtol_l.constprop.0+0xec>
 8015ec8:	786c      	ldrb	r4, [r5, #1]
 8015eca:	2310      	movs	r3, #16
 8015ecc:	3502      	adds	r5, #2
 8015ece:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8015ed2:	f108 38ff 	add.w	r8, r8, #4294967295
 8015ed6:	f04f 0e00 	mov.w	lr, #0
 8015eda:	fbb8 f9f3 	udiv	r9, r8, r3
 8015ede:	4676      	mov	r6, lr
 8015ee0:	fb03 8a19 	mls	sl, r3, r9, r8
 8015ee4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015ee8:	f1bc 0f09 	cmp.w	ip, #9
 8015eec:	d816      	bhi.n	8015f1c <_strtol_l.constprop.0+0xa4>
 8015eee:	4664      	mov	r4, ip
 8015ef0:	42a3      	cmp	r3, r4
 8015ef2:	dd24      	ble.n	8015f3e <_strtol_l.constprop.0+0xc6>
 8015ef4:	f1be 3fff 	cmp.w	lr, #4294967295
 8015ef8:	d008      	beq.n	8015f0c <_strtol_l.constprop.0+0x94>
 8015efa:	45b1      	cmp	r9, r6
 8015efc:	d31c      	bcc.n	8015f38 <_strtol_l.constprop.0+0xc0>
 8015efe:	d101      	bne.n	8015f04 <_strtol_l.constprop.0+0x8c>
 8015f00:	45a2      	cmp	sl, r4
 8015f02:	db19      	blt.n	8015f38 <_strtol_l.constprop.0+0xc0>
 8015f04:	fb06 4603 	mla	r6, r6, r3, r4
 8015f08:	f04f 0e01 	mov.w	lr, #1
 8015f0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015f10:	e7e8      	b.n	8015ee4 <_strtol_l.constprop.0+0x6c>
 8015f12:	2c2b      	cmp	r4, #43	; 0x2b
 8015f14:	bf04      	itt	eq
 8015f16:	782c      	ldrbeq	r4, [r5, #0]
 8015f18:	1cb5      	addeq	r5, r6, #2
 8015f1a:	e7ca      	b.n	8015eb2 <_strtol_l.constprop.0+0x3a>
 8015f1c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015f20:	f1bc 0f19 	cmp.w	ip, #25
 8015f24:	d801      	bhi.n	8015f2a <_strtol_l.constprop.0+0xb2>
 8015f26:	3c37      	subs	r4, #55	; 0x37
 8015f28:	e7e2      	b.n	8015ef0 <_strtol_l.constprop.0+0x78>
 8015f2a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015f2e:	f1bc 0f19 	cmp.w	ip, #25
 8015f32:	d804      	bhi.n	8015f3e <_strtol_l.constprop.0+0xc6>
 8015f34:	3c57      	subs	r4, #87	; 0x57
 8015f36:	e7db      	b.n	8015ef0 <_strtol_l.constprop.0+0x78>
 8015f38:	f04f 3eff 	mov.w	lr, #4294967295
 8015f3c:	e7e6      	b.n	8015f0c <_strtol_l.constprop.0+0x94>
 8015f3e:	f1be 3fff 	cmp.w	lr, #4294967295
 8015f42:	d105      	bne.n	8015f50 <_strtol_l.constprop.0+0xd8>
 8015f44:	2322      	movs	r3, #34	; 0x22
 8015f46:	6003      	str	r3, [r0, #0]
 8015f48:	4646      	mov	r6, r8
 8015f4a:	b942      	cbnz	r2, 8015f5e <_strtol_l.constprop.0+0xe6>
 8015f4c:	4630      	mov	r0, r6
 8015f4e:	e79e      	b.n	8015e8e <_strtol_l.constprop.0+0x16>
 8015f50:	b107      	cbz	r7, 8015f54 <_strtol_l.constprop.0+0xdc>
 8015f52:	4276      	negs	r6, r6
 8015f54:	2a00      	cmp	r2, #0
 8015f56:	d0f9      	beq.n	8015f4c <_strtol_l.constprop.0+0xd4>
 8015f58:	f1be 0f00 	cmp.w	lr, #0
 8015f5c:	d000      	beq.n	8015f60 <_strtol_l.constprop.0+0xe8>
 8015f5e:	1e69      	subs	r1, r5, #1
 8015f60:	6011      	str	r1, [r2, #0]
 8015f62:	e7f3      	b.n	8015f4c <_strtol_l.constprop.0+0xd4>
 8015f64:	2430      	movs	r4, #48	; 0x30
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d1b1      	bne.n	8015ece <_strtol_l.constprop.0+0x56>
 8015f6a:	2308      	movs	r3, #8
 8015f6c:	e7af      	b.n	8015ece <_strtol_l.constprop.0+0x56>
 8015f6e:	2c30      	cmp	r4, #48	; 0x30
 8015f70:	d0a5      	beq.n	8015ebe <_strtol_l.constprop.0+0x46>
 8015f72:	230a      	movs	r3, #10
 8015f74:	e7ab      	b.n	8015ece <_strtol_l.constprop.0+0x56>
 8015f76:	bf00      	nop
 8015f78:	0801d889 	.word	0x0801d889

08015f7c <_strtol_r>:
 8015f7c:	f7ff bf7c 	b.w	8015e78 <_strtol_l.constprop.0>

08015f80 <strtol>:
 8015f80:	4613      	mov	r3, r2
 8015f82:	460a      	mov	r2, r1
 8015f84:	4601      	mov	r1, r0
 8015f86:	4802      	ldr	r0, [pc, #8]	; (8015f90 <strtol+0x10>)
 8015f88:	6800      	ldr	r0, [r0, #0]
 8015f8a:	f7ff bf75 	b.w	8015e78 <_strtol_l.constprop.0>
 8015f8e:	bf00      	nop
 8015f90:	200002f4 	.word	0x200002f4

08015f94 <__cvt>:
 8015f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015f98:	ec55 4b10 	vmov	r4, r5, d0
 8015f9c:	2d00      	cmp	r5, #0
 8015f9e:	460e      	mov	r6, r1
 8015fa0:	4619      	mov	r1, r3
 8015fa2:	462b      	mov	r3, r5
 8015fa4:	bfbb      	ittet	lt
 8015fa6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015faa:	461d      	movlt	r5, r3
 8015fac:	2300      	movge	r3, #0
 8015fae:	232d      	movlt	r3, #45	; 0x2d
 8015fb0:	700b      	strb	r3, [r1, #0]
 8015fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015fb8:	4691      	mov	r9, r2
 8015fba:	f023 0820 	bic.w	r8, r3, #32
 8015fbe:	bfbc      	itt	lt
 8015fc0:	4622      	movlt	r2, r4
 8015fc2:	4614      	movlt	r4, r2
 8015fc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015fc8:	d005      	beq.n	8015fd6 <__cvt+0x42>
 8015fca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015fce:	d100      	bne.n	8015fd2 <__cvt+0x3e>
 8015fd0:	3601      	adds	r6, #1
 8015fd2:	2102      	movs	r1, #2
 8015fd4:	e000      	b.n	8015fd8 <__cvt+0x44>
 8015fd6:	2103      	movs	r1, #3
 8015fd8:	ab03      	add	r3, sp, #12
 8015fda:	9301      	str	r3, [sp, #4]
 8015fdc:	ab02      	add	r3, sp, #8
 8015fde:	9300      	str	r3, [sp, #0]
 8015fe0:	ec45 4b10 	vmov	d0, r4, r5
 8015fe4:	4653      	mov	r3, sl
 8015fe6:	4632      	mov	r2, r6
 8015fe8:	f001 f982 	bl	80172f0 <_dtoa_r>
 8015fec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015ff0:	4607      	mov	r7, r0
 8015ff2:	d102      	bne.n	8015ffa <__cvt+0x66>
 8015ff4:	f019 0f01 	tst.w	r9, #1
 8015ff8:	d022      	beq.n	8016040 <__cvt+0xac>
 8015ffa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015ffe:	eb07 0906 	add.w	r9, r7, r6
 8016002:	d110      	bne.n	8016026 <__cvt+0x92>
 8016004:	783b      	ldrb	r3, [r7, #0]
 8016006:	2b30      	cmp	r3, #48	; 0x30
 8016008:	d10a      	bne.n	8016020 <__cvt+0x8c>
 801600a:	2200      	movs	r2, #0
 801600c:	2300      	movs	r3, #0
 801600e:	4620      	mov	r0, r4
 8016010:	4629      	mov	r1, r5
 8016012:	f7ea fd59 	bl	8000ac8 <__aeabi_dcmpeq>
 8016016:	b918      	cbnz	r0, 8016020 <__cvt+0x8c>
 8016018:	f1c6 0601 	rsb	r6, r6, #1
 801601c:	f8ca 6000 	str.w	r6, [sl]
 8016020:	f8da 3000 	ldr.w	r3, [sl]
 8016024:	4499      	add	r9, r3
 8016026:	2200      	movs	r2, #0
 8016028:	2300      	movs	r3, #0
 801602a:	4620      	mov	r0, r4
 801602c:	4629      	mov	r1, r5
 801602e:	f7ea fd4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8016032:	b108      	cbz	r0, 8016038 <__cvt+0xa4>
 8016034:	f8cd 900c 	str.w	r9, [sp, #12]
 8016038:	2230      	movs	r2, #48	; 0x30
 801603a:	9b03      	ldr	r3, [sp, #12]
 801603c:	454b      	cmp	r3, r9
 801603e:	d307      	bcc.n	8016050 <__cvt+0xbc>
 8016040:	9b03      	ldr	r3, [sp, #12]
 8016042:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016044:	1bdb      	subs	r3, r3, r7
 8016046:	4638      	mov	r0, r7
 8016048:	6013      	str	r3, [r2, #0]
 801604a:	b004      	add	sp, #16
 801604c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016050:	1c59      	adds	r1, r3, #1
 8016052:	9103      	str	r1, [sp, #12]
 8016054:	701a      	strb	r2, [r3, #0]
 8016056:	e7f0      	b.n	801603a <__cvt+0xa6>

08016058 <__exponent>:
 8016058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801605a:	4603      	mov	r3, r0
 801605c:	2900      	cmp	r1, #0
 801605e:	bfb8      	it	lt
 8016060:	4249      	neglt	r1, r1
 8016062:	f803 2b02 	strb.w	r2, [r3], #2
 8016066:	bfb4      	ite	lt
 8016068:	222d      	movlt	r2, #45	; 0x2d
 801606a:	222b      	movge	r2, #43	; 0x2b
 801606c:	2909      	cmp	r1, #9
 801606e:	7042      	strb	r2, [r0, #1]
 8016070:	dd2a      	ble.n	80160c8 <__exponent+0x70>
 8016072:	f10d 0207 	add.w	r2, sp, #7
 8016076:	4617      	mov	r7, r2
 8016078:	260a      	movs	r6, #10
 801607a:	4694      	mov	ip, r2
 801607c:	fb91 f5f6 	sdiv	r5, r1, r6
 8016080:	fb06 1415 	mls	r4, r6, r5, r1
 8016084:	3430      	adds	r4, #48	; 0x30
 8016086:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801608a:	460c      	mov	r4, r1
 801608c:	2c63      	cmp	r4, #99	; 0x63
 801608e:	f102 32ff 	add.w	r2, r2, #4294967295
 8016092:	4629      	mov	r1, r5
 8016094:	dcf1      	bgt.n	801607a <__exponent+0x22>
 8016096:	3130      	adds	r1, #48	; 0x30
 8016098:	f1ac 0402 	sub.w	r4, ip, #2
 801609c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80160a0:	1c41      	adds	r1, r0, #1
 80160a2:	4622      	mov	r2, r4
 80160a4:	42ba      	cmp	r2, r7
 80160a6:	d30a      	bcc.n	80160be <__exponent+0x66>
 80160a8:	f10d 0209 	add.w	r2, sp, #9
 80160ac:	eba2 020c 	sub.w	r2, r2, ip
 80160b0:	42bc      	cmp	r4, r7
 80160b2:	bf88      	it	hi
 80160b4:	2200      	movhi	r2, #0
 80160b6:	4413      	add	r3, r2
 80160b8:	1a18      	subs	r0, r3, r0
 80160ba:	b003      	add	sp, #12
 80160bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160be:	f812 5b01 	ldrb.w	r5, [r2], #1
 80160c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80160c6:	e7ed      	b.n	80160a4 <__exponent+0x4c>
 80160c8:	2330      	movs	r3, #48	; 0x30
 80160ca:	3130      	adds	r1, #48	; 0x30
 80160cc:	7083      	strb	r3, [r0, #2]
 80160ce:	70c1      	strb	r1, [r0, #3]
 80160d0:	1d03      	adds	r3, r0, #4
 80160d2:	e7f1      	b.n	80160b8 <__exponent+0x60>

080160d4 <_printf_float>:
 80160d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160d8:	ed2d 8b02 	vpush	{d8}
 80160dc:	b08d      	sub	sp, #52	; 0x34
 80160de:	460c      	mov	r4, r1
 80160e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80160e4:	4616      	mov	r6, r2
 80160e6:	461f      	mov	r7, r3
 80160e8:	4605      	mov	r5, r0
 80160ea:	f000 ffaf 	bl	801704c <_localeconv_r>
 80160ee:	f8d0 a000 	ldr.w	sl, [r0]
 80160f2:	4650      	mov	r0, sl
 80160f4:	f7ea f8bc 	bl	8000270 <strlen>
 80160f8:	2300      	movs	r3, #0
 80160fa:	930a      	str	r3, [sp, #40]	; 0x28
 80160fc:	6823      	ldr	r3, [r4, #0]
 80160fe:	9305      	str	r3, [sp, #20]
 8016100:	f8d8 3000 	ldr.w	r3, [r8]
 8016104:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016108:	3307      	adds	r3, #7
 801610a:	f023 0307 	bic.w	r3, r3, #7
 801610e:	f103 0208 	add.w	r2, r3, #8
 8016112:	f8c8 2000 	str.w	r2, [r8]
 8016116:	e9d3 8900 	ldrd	r8, r9, [r3]
 801611a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801611e:	9307      	str	r3, [sp, #28]
 8016120:	f8cd 8018 	str.w	r8, [sp, #24]
 8016124:	ee08 0a10 	vmov	s16, r0
 8016128:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801612c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016130:	4b9e      	ldr	r3, [pc, #632]	; (80163ac <_printf_float+0x2d8>)
 8016132:	f04f 32ff 	mov.w	r2, #4294967295
 8016136:	f7ea fcf9 	bl	8000b2c <__aeabi_dcmpun>
 801613a:	bb88      	cbnz	r0, 80161a0 <_printf_float+0xcc>
 801613c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016140:	4b9a      	ldr	r3, [pc, #616]	; (80163ac <_printf_float+0x2d8>)
 8016142:	f04f 32ff 	mov.w	r2, #4294967295
 8016146:	f7ea fcd3 	bl	8000af0 <__aeabi_dcmple>
 801614a:	bb48      	cbnz	r0, 80161a0 <_printf_float+0xcc>
 801614c:	2200      	movs	r2, #0
 801614e:	2300      	movs	r3, #0
 8016150:	4640      	mov	r0, r8
 8016152:	4649      	mov	r1, r9
 8016154:	f7ea fcc2 	bl	8000adc <__aeabi_dcmplt>
 8016158:	b110      	cbz	r0, 8016160 <_printf_float+0x8c>
 801615a:	232d      	movs	r3, #45	; 0x2d
 801615c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016160:	4a93      	ldr	r2, [pc, #588]	; (80163b0 <_printf_float+0x2dc>)
 8016162:	4b94      	ldr	r3, [pc, #592]	; (80163b4 <_printf_float+0x2e0>)
 8016164:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016168:	bf94      	ite	ls
 801616a:	4690      	movls	r8, r2
 801616c:	4698      	movhi	r8, r3
 801616e:	2303      	movs	r3, #3
 8016170:	6123      	str	r3, [r4, #16]
 8016172:	9b05      	ldr	r3, [sp, #20]
 8016174:	f023 0304 	bic.w	r3, r3, #4
 8016178:	6023      	str	r3, [r4, #0]
 801617a:	f04f 0900 	mov.w	r9, #0
 801617e:	9700      	str	r7, [sp, #0]
 8016180:	4633      	mov	r3, r6
 8016182:	aa0b      	add	r2, sp, #44	; 0x2c
 8016184:	4621      	mov	r1, r4
 8016186:	4628      	mov	r0, r5
 8016188:	f000 f9da 	bl	8016540 <_printf_common>
 801618c:	3001      	adds	r0, #1
 801618e:	f040 8090 	bne.w	80162b2 <_printf_float+0x1de>
 8016192:	f04f 30ff 	mov.w	r0, #4294967295
 8016196:	b00d      	add	sp, #52	; 0x34
 8016198:	ecbd 8b02 	vpop	{d8}
 801619c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161a0:	4642      	mov	r2, r8
 80161a2:	464b      	mov	r3, r9
 80161a4:	4640      	mov	r0, r8
 80161a6:	4649      	mov	r1, r9
 80161a8:	f7ea fcc0 	bl	8000b2c <__aeabi_dcmpun>
 80161ac:	b140      	cbz	r0, 80161c0 <_printf_float+0xec>
 80161ae:	464b      	mov	r3, r9
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	bfbc      	itt	lt
 80161b4:	232d      	movlt	r3, #45	; 0x2d
 80161b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80161ba:	4a7f      	ldr	r2, [pc, #508]	; (80163b8 <_printf_float+0x2e4>)
 80161bc:	4b7f      	ldr	r3, [pc, #508]	; (80163bc <_printf_float+0x2e8>)
 80161be:	e7d1      	b.n	8016164 <_printf_float+0x90>
 80161c0:	6863      	ldr	r3, [r4, #4]
 80161c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80161c6:	9206      	str	r2, [sp, #24]
 80161c8:	1c5a      	adds	r2, r3, #1
 80161ca:	d13f      	bne.n	801624c <_printf_float+0x178>
 80161cc:	2306      	movs	r3, #6
 80161ce:	6063      	str	r3, [r4, #4]
 80161d0:	9b05      	ldr	r3, [sp, #20]
 80161d2:	6861      	ldr	r1, [r4, #4]
 80161d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80161d8:	2300      	movs	r3, #0
 80161da:	9303      	str	r3, [sp, #12]
 80161dc:	ab0a      	add	r3, sp, #40	; 0x28
 80161de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80161e2:	ab09      	add	r3, sp, #36	; 0x24
 80161e4:	ec49 8b10 	vmov	d0, r8, r9
 80161e8:	9300      	str	r3, [sp, #0]
 80161ea:	6022      	str	r2, [r4, #0]
 80161ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80161f0:	4628      	mov	r0, r5
 80161f2:	f7ff fecf 	bl	8015f94 <__cvt>
 80161f6:	9b06      	ldr	r3, [sp, #24]
 80161f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80161fa:	2b47      	cmp	r3, #71	; 0x47
 80161fc:	4680      	mov	r8, r0
 80161fe:	d108      	bne.n	8016212 <_printf_float+0x13e>
 8016200:	1cc8      	adds	r0, r1, #3
 8016202:	db02      	blt.n	801620a <_printf_float+0x136>
 8016204:	6863      	ldr	r3, [r4, #4]
 8016206:	4299      	cmp	r1, r3
 8016208:	dd41      	ble.n	801628e <_printf_float+0x1ba>
 801620a:	f1ab 0302 	sub.w	r3, fp, #2
 801620e:	fa5f fb83 	uxtb.w	fp, r3
 8016212:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016216:	d820      	bhi.n	801625a <_printf_float+0x186>
 8016218:	3901      	subs	r1, #1
 801621a:	465a      	mov	r2, fp
 801621c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016220:	9109      	str	r1, [sp, #36]	; 0x24
 8016222:	f7ff ff19 	bl	8016058 <__exponent>
 8016226:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016228:	1813      	adds	r3, r2, r0
 801622a:	2a01      	cmp	r2, #1
 801622c:	4681      	mov	r9, r0
 801622e:	6123      	str	r3, [r4, #16]
 8016230:	dc02      	bgt.n	8016238 <_printf_float+0x164>
 8016232:	6822      	ldr	r2, [r4, #0]
 8016234:	07d2      	lsls	r2, r2, #31
 8016236:	d501      	bpl.n	801623c <_printf_float+0x168>
 8016238:	3301      	adds	r3, #1
 801623a:	6123      	str	r3, [r4, #16]
 801623c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016240:	2b00      	cmp	r3, #0
 8016242:	d09c      	beq.n	801617e <_printf_float+0xaa>
 8016244:	232d      	movs	r3, #45	; 0x2d
 8016246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801624a:	e798      	b.n	801617e <_printf_float+0xaa>
 801624c:	9a06      	ldr	r2, [sp, #24]
 801624e:	2a47      	cmp	r2, #71	; 0x47
 8016250:	d1be      	bne.n	80161d0 <_printf_float+0xfc>
 8016252:	2b00      	cmp	r3, #0
 8016254:	d1bc      	bne.n	80161d0 <_printf_float+0xfc>
 8016256:	2301      	movs	r3, #1
 8016258:	e7b9      	b.n	80161ce <_printf_float+0xfa>
 801625a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801625e:	d118      	bne.n	8016292 <_printf_float+0x1be>
 8016260:	2900      	cmp	r1, #0
 8016262:	6863      	ldr	r3, [r4, #4]
 8016264:	dd0b      	ble.n	801627e <_printf_float+0x1aa>
 8016266:	6121      	str	r1, [r4, #16]
 8016268:	b913      	cbnz	r3, 8016270 <_printf_float+0x19c>
 801626a:	6822      	ldr	r2, [r4, #0]
 801626c:	07d0      	lsls	r0, r2, #31
 801626e:	d502      	bpl.n	8016276 <_printf_float+0x1a2>
 8016270:	3301      	adds	r3, #1
 8016272:	440b      	add	r3, r1
 8016274:	6123      	str	r3, [r4, #16]
 8016276:	65a1      	str	r1, [r4, #88]	; 0x58
 8016278:	f04f 0900 	mov.w	r9, #0
 801627c:	e7de      	b.n	801623c <_printf_float+0x168>
 801627e:	b913      	cbnz	r3, 8016286 <_printf_float+0x1b2>
 8016280:	6822      	ldr	r2, [r4, #0]
 8016282:	07d2      	lsls	r2, r2, #31
 8016284:	d501      	bpl.n	801628a <_printf_float+0x1b6>
 8016286:	3302      	adds	r3, #2
 8016288:	e7f4      	b.n	8016274 <_printf_float+0x1a0>
 801628a:	2301      	movs	r3, #1
 801628c:	e7f2      	b.n	8016274 <_printf_float+0x1a0>
 801628e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016294:	4299      	cmp	r1, r3
 8016296:	db05      	blt.n	80162a4 <_printf_float+0x1d0>
 8016298:	6823      	ldr	r3, [r4, #0]
 801629a:	6121      	str	r1, [r4, #16]
 801629c:	07d8      	lsls	r0, r3, #31
 801629e:	d5ea      	bpl.n	8016276 <_printf_float+0x1a2>
 80162a0:	1c4b      	adds	r3, r1, #1
 80162a2:	e7e7      	b.n	8016274 <_printf_float+0x1a0>
 80162a4:	2900      	cmp	r1, #0
 80162a6:	bfd4      	ite	le
 80162a8:	f1c1 0202 	rsble	r2, r1, #2
 80162ac:	2201      	movgt	r2, #1
 80162ae:	4413      	add	r3, r2
 80162b0:	e7e0      	b.n	8016274 <_printf_float+0x1a0>
 80162b2:	6823      	ldr	r3, [r4, #0]
 80162b4:	055a      	lsls	r2, r3, #21
 80162b6:	d407      	bmi.n	80162c8 <_printf_float+0x1f4>
 80162b8:	6923      	ldr	r3, [r4, #16]
 80162ba:	4642      	mov	r2, r8
 80162bc:	4631      	mov	r1, r6
 80162be:	4628      	mov	r0, r5
 80162c0:	47b8      	blx	r7
 80162c2:	3001      	adds	r0, #1
 80162c4:	d12c      	bne.n	8016320 <_printf_float+0x24c>
 80162c6:	e764      	b.n	8016192 <_printf_float+0xbe>
 80162c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80162cc:	f240 80e0 	bls.w	8016490 <_printf_float+0x3bc>
 80162d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80162d4:	2200      	movs	r2, #0
 80162d6:	2300      	movs	r3, #0
 80162d8:	f7ea fbf6 	bl	8000ac8 <__aeabi_dcmpeq>
 80162dc:	2800      	cmp	r0, #0
 80162de:	d034      	beq.n	801634a <_printf_float+0x276>
 80162e0:	4a37      	ldr	r2, [pc, #220]	; (80163c0 <_printf_float+0x2ec>)
 80162e2:	2301      	movs	r3, #1
 80162e4:	4631      	mov	r1, r6
 80162e6:	4628      	mov	r0, r5
 80162e8:	47b8      	blx	r7
 80162ea:	3001      	adds	r0, #1
 80162ec:	f43f af51 	beq.w	8016192 <_printf_float+0xbe>
 80162f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80162f4:	429a      	cmp	r2, r3
 80162f6:	db02      	blt.n	80162fe <_printf_float+0x22a>
 80162f8:	6823      	ldr	r3, [r4, #0]
 80162fa:	07d8      	lsls	r0, r3, #31
 80162fc:	d510      	bpl.n	8016320 <_printf_float+0x24c>
 80162fe:	ee18 3a10 	vmov	r3, s16
 8016302:	4652      	mov	r2, sl
 8016304:	4631      	mov	r1, r6
 8016306:	4628      	mov	r0, r5
 8016308:	47b8      	blx	r7
 801630a:	3001      	adds	r0, #1
 801630c:	f43f af41 	beq.w	8016192 <_printf_float+0xbe>
 8016310:	f04f 0800 	mov.w	r8, #0
 8016314:	f104 091a 	add.w	r9, r4, #26
 8016318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801631a:	3b01      	subs	r3, #1
 801631c:	4543      	cmp	r3, r8
 801631e:	dc09      	bgt.n	8016334 <_printf_float+0x260>
 8016320:	6823      	ldr	r3, [r4, #0]
 8016322:	079b      	lsls	r3, r3, #30
 8016324:	f100 8107 	bmi.w	8016536 <_printf_float+0x462>
 8016328:	68e0      	ldr	r0, [r4, #12]
 801632a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801632c:	4298      	cmp	r0, r3
 801632e:	bfb8      	it	lt
 8016330:	4618      	movlt	r0, r3
 8016332:	e730      	b.n	8016196 <_printf_float+0xc2>
 8016334:	2301      	movs	r3, #1
 8016336:	464a      	mov	r2, r9
 8016338:	4631      	mov	r1, r6
 801633a:	4628      	mov	r0, r5
 801633c:	47b8      	blx	r7
 801633e:	3001      	adds	r0, #1
 8016340:	f43f af27 	beq.w	8016192 <_printf_float+0xbe>
 8016344:	f108 0801 	add.w	r8, r8, #1
 8016348:	e7e6      	b.n	8016318 <_printf_float+0x244>
 801634a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801634c:	2b00      	cmp	r3, #0
 801634e:	dc39      	bgt.n	80163c4 <_printf_float+0x2f0>
 8016350:	4a1b      	ldr	r2, [pc, #108]	; (80163c0 <_printf_float+0x2ec>)
 8016352:	2301      	movs	r3, #1
 8016354:	4631      	mov	r1, r6
 8016356:	4628      	mov	r0, r5
 8016358:	47b8      	blx	r7
 801635a:	3001      	adds	r0, #1
 801635c:	f43f af19 	beq.w	8016192 <_printf_float+0xbe>
 8016360:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016364:	4313      	orrs	r3, r2
 8016366:	d102      	bne.n	801636e <_printf_float+0x29a>
 8016368:	6823      	ldr	r3, [r4, #0]
 801636a:	07d9      	lsls	r1, r3, #31
 801636c:	d5d8      	bpl.n	8016320 <_printf_float+0x24c>
 801636e:	ee18 3a10 	vmov	r3, s16
 8016372:	4652      	mov	r2, sl
 8016374:	4631      	mov	r1, r6
 8016376:	4628      	mov	r0, r5
 8016378:	47b8      	blx	r7
 801637a:	3001      	adds	r0, #1
 801637c:	f43f af09 	beq.w	8016192 <_printf_float+0xbe>
 8016380:	f04f 0900 	mov.w	r9, #0
 8016384:	f104 0a1a 	add.w	sl, r4, #26
 8016388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801638a:	425b      	negs	r3, r3
 801638c:	454b      	cmp	r3, r9
 801638e:	dc01      	bgt.n	8016394 <_printf_float+0x2c0>
 8016390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016392:	e792      	b.n	80162ba <_printf_float+0x1e6>
 8016394:	2301      	movs	r3, #1
 8016396:	4652      	mov	r2, sl
 8016398:	4631      	mov	r1, r6
 801639a:	4628      	mov	r0, r5
 801639c:	47b8      	blx	r7
 801639e:	3001      	adds	r0, #1
 80163a0:	f43f aef7 	beq.w	8016192 <_printf_float+0xbe>
 80163a4:	f109 0901 	add.w	r9, r9, #1
 80163a8:	e7ee      	b.n	8016388 <_printf_float+0x2b4>
 80163aa:	bf00      	nop
 80163ac:	7fefffff 	.word	0x7fefffff
 80163b0:	0801d989 	.word	0x0801d989
 80163b4:	0801d98d 	.word	0x0801d98d
 80163b8:	0801d991 	.word	0x0801d991
 80163bc:	0801d995 	.word	0x0801d995
 80163c0:	0801d999 	.word	0x0801d999
 80163c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80163c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80163c8:	429a      	cmp	r2, r3
 80163ca:	bfa8      	it	ge
 80163cc:	461a      	movge	r2, r3
 80163ce:	2a00      	cmp	r2, #0
 80163d0:	4691      	mov	r9, r2
 80163d2:	dc37      	bgt.n	8016444 <_printf_float+0x370>
 80163d4:	f04f 0b00 	mov.w	fp, #0
 80163d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80163dc:	f104 021a 	add.w	r2, r4, #26
 80163e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80163e2:	9305      	str	r3, [sp, #20]
 80163e4:	eba3 0309 	sub.w	r3, r3, r9
 80163e8:	455b      	cmp	r3, fp
 80163ea:	dc33      	bgt.n	8016454 <_printf_float+0x380>
 80163ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80163f0:	429a      	cmp	r2, r3
 80163f2:	db3b      	blt.n	801646c <_printf_float+0x398>
 80163f4:	6823      	ldr	r3, [r4, #0]
 80163f6:	07da      	lsls	r2, r3, #31
 80163f8:	d438      	bmi.n	801646c <_printf_float+0x398>
 80163fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80163fe:	eba2 0903 	sub.w	r9, r2, r3
 8016402:	9b05      	ldr	r3, [sp, #20]
 8016404:	1ad2      	subs	r2, r2, r3
 8016406:	4591      	cmp	r9, r2
 8016408:	bfa8      	it	ge
 801640a:	4691      	movge	r9, r2
 801640c:	f1b9 0f00 	cmp.w	r9, #0
 8016410:	dc35      	bgt.n	801647e <_printf_float+0x3aa>
 8016412:	f04f 0800 	mov.w	r8, #0
 8016416:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801641a:	f104 0a1a 	add.w	sl, r4, #26
 801641e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016422:	1a9b      	subs	r3, r3, r2
 8016424:	eba3 0309 	sub.w	r3, r3, r9
 8016428:	4543      	cmp	r3, r8
 801642a:	f77f af79 	ble.w	8016320 <_printf_float+0x24c>
 801642e:	2301      	movs	r3, #1
 8016430:	4652      	mov	r2, sl
 8016432:	4631      	mov	r1, r6
 8016434:	4628      	mov	r0, r5
 8016436:	47b8      	blx	r7
 8016438:	3001      	adds	r0, #1
 801643a:	f43f aeaa 	beq.w	8016192 <_printf_float+0xbe>
 801643e:	f108 0801 	add.w	r8, r8, #1
 8016442:	e7ec      	b.n	801641e <_printf_float+0x34a>
 8016444:	4613      	mov	r3, r2
 8016446:	4631      	mov	r1, r6
 8016448:	4642      	mov	r2, r8
 801644a:	4628      	mov	r0, r5
 801644c:	47b8      	blx	r7
 801644e:	3001      	adds	r0, #1
 8016450:	d1c0      	bne.n	80163d4 <_printf_float+0x300>
 8016452:	e69e      	b.n	8016192 <_printf_float+0xbe>
 8016454:	2301      	movs	r3, #1
 8016456:	4631      	mov	r1, r6
 8016458:	4628      	mov	r0, r5
 801645a:	9205      	str	r2, [sp, #20]
 801645c:	47b8      	blx	r7
 801645e:	3001      	adds	r0, #1
 8016460:	f43f ae97 	beq.w	8016192 <_printf_float+0xbe>
 8016464:	9a05      	ldr	r2, [sp, #20]
 8016466:	f10b 0b01 	add.w	fp, fp, #1
 801646a:	e7b9      	b.n	80163e0 <_printf_float+0x30c>
 801646c:	ee18 3a10 	vmov	r3, s16
 8016470:	4652      	mov	r2, sl
 8016472:	4631      	mov	r1, r6
 8016474:	4628      	mov	r0, r5
 8016476:	47b8      	blx	r7
 8016478:	3001      	adds	r0, #1
 801647a:	d1be      	bne.n	80163fa <_printf_float+0x326>
 801647c:	e689      	b.n	8016192 <_printf_float+0xbe>
 801647e:	9a05      	ldr	r2, [sp, #20]
 8016480:	464b      	mov	r3, r9
 8016482:	4442      	add	r2, r8
 8016484:	4631      	mov	r1, r6
 8016486:	4628      	mov	r0, r5
 8016488:	47b8      	blx	r7
 801648a:	3001      	adds	r0, #1
 801648c:	d1c1      	bne.n	8016412 <_printf_float+0x33e>
 801648e:	e680      	b.n	8016192 <_printf_float+0xbe>
 8016490:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016492:	2a01      	cmp	r2, #1
 8016494:	dc01      	bgt.n	801649a <_printf_float+0x3c6>
 8016496:	07db      	lsls	r3, r3, #31
 8016498:	d53a      	bpl.n	8016510 <_printf_float+0x43c>
 801649a:	2301      	movs	r3, #1
 801649c:	4642      	mov	r2, r8
 801649e:	4631      	mov	r1, r6
 80164a0:	4628      	mov	r0, r5
 80164a2:	47b8      	blx	r7
 80164a4:	3001      	adds	r0, #1
 80164a6:	f43f ae74 	beq.w	8016192 <_printf_float+0xbe>
 80164aa:	ee18 3a10 	vmov	r3, s16
 80164ae:	4652      	mov	r2, sl
 80164b0:	4631      	mov	r1, r6
 80164b2:	4628      	mov	r0, r5
 80164b4:	47b8      	blx	r7
 80164b6:	3001      	adds	r0, #1
 80164b8:	f43f ae6b 	beq.w	8016192 <_printf_float+0xbe>
 80164bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80164c0:	2200      	movs	r2, #0
 80164c2:	2300      	movs	r3, #0
 80164c4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80164c8:	f7ea fafe 	bl	8000ac8 <__aeabi_dcmpeq>
 80164cc:	b9d8      	cbnz	r0, 8016506 <_printf_float+0x432>
 80164ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80164d2:	f108 0201 	add.w	r2, r8, #1
 80164d6:	4631      	mov	r1, r6
 80164d8:	4628      	mov	r0, r5
 80164da:	47b8      	blx	r7
 80164dc:	3001      	adds	r0, #1
 80164de:	d10e      	bne.n	80164fe <_printf_float+0x42a>
 80164e0:	e657      	b.n	8016192 <_printf_float+0xbe>
 80164e2:	2301      	movs	r3, #1
 80164e4:	4652      	mov	r2, sl
 80164e6:	4631      	mov	r1, r6
 80164e8:	4628      	mov	r0, r5
 80164ea:	47b8      	blx	r7
 80164ec:	3001      	adds	r0, #1
 80164ee:	f43f ae50 	beq.w	8016192 <_printf_float+0xbe>
 80164f2:	f108 0801 	add.w	r8, r8, #1
 80164f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164f8:	3b01      	subs	r3, #1
 80164fa:	4543      	cmp	r3, r8
 80164fc:	dcf1      	bgt.n	80164e2 <_printf_float+0x40e>
 80164fe:	464b      	mov	r3, r9
 8016500:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016504:	e6da      	b.n	80162bc <_printf_float+0x1e8>
 8016506:	f04f 0800 	mov.w	r8, #0
 801650a:	f104 0a1a 	add.w	sl, r4, #26
 801650e:	e7f2      	b.n	80164f6 <_printf_float+0x422>
 8016510:	2301      	movs	r3, #1
 8016512:	4642      	mov	r2, r8
 8016514:	e7df      	b.n	80164d6 <_printf_float+0x402>
 8016516:	2301      	movs	r3, #1
 8016518:	464a      	mov	r2, r9
 801651a:	4631      	mov	r1, r6
 801651c:	4628      	mov	r0, r5
 801651e:	47b8      	blx	r7
 8016520:	3001      	adds	r0, #1
 8016522:	f43f ae36 	beq.w	8016192 <_printf_float+0xbe>
 8016526:	f108 0801 	add.w	r8, r8, #1
 801652a:	68e3      	ldr	r3, [r4, #12]
 801652c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801652e:	1a5b      	subs	r3, r3, r1
 8016530:	4543      	cmp	r3, r8
 8016532:	dcf0      	bgt.n	8016516 <_printf_float+0x442>
 8016534:	e6f8      	b.n	8016328 <_printf_float+0x254>
 8016536:	f04f 0800 	mov.w	r8, #0
 801653a:	f104 0919 	add.w	r9, r4, #25
 801653e:	e7f4      	b.n	801652a <_printf_float+0x456>

08016540 <_printf_common>:
 8016540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016544:	4616      	mov	r6, r2
 8016546:	4699      	mov	r9, r3
 8016548:	688a      	ldr	r2, [r1, #8]
 801654a:	690b      	ldr	r3, [r1, #16]
 801654c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016550:	4293      	cmp	r3, r2
 8016552:	bfb8      	it	lt
 8016554:	4613      	movlt	r3, r2
 8016556:	6033      	str	r3, [r6, #0]
 8016558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801655c:	4607      	mov	r7, r0
 801655e:	460c      	mov	r4, r1
 8016560:	b10a      	cbz	r2, 8016566 <_printf_common+0x26>
 8016562:	3301      	adds	r3, #1
 8016564:	6033      	str	r3, [r6, #0]
 8016566:	6823      	ldr	r3, [r4, #0]
 8016568:	0699      	lsls	r1, r3, #26
 801656a:	bf42      	ittt	mi
 801656c:	6833      	ldrmi	r3, [r6, #0]
 801656e:	3302      	addmi	r3, #2
 8016570:	6033      	strmi	r3, [r6, #0]
 8016572:	6825      	ldr	r5, [r4, #0]
 8016574:	f015 0506 	ands.w	r5, r5, #6
 8016578:	d106      	bne.n	8016588 <_printf_common+0x48>
 801657a:	f104 0a19 	add.w	sl, r4, #25
 801657e:	68e3      	ldr	r3, [r4, #12]
 8016580:	6832      	ldr	r2, [r6, #0]
 8016582:	1a9b      	subs	r3, r3, r2
 8016584:	42ab      	cmp	r3, r5
 8016586:	dc26      	bgt.n	80165d6 <_printf_common+0x96>
 8016588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801658c:	1e13      	subs	r3, r2, #0
 801658e:	6822      	ldr	r2, [r4, #0]
 8016590:	bf18      	it	ne
 8016592:	2301      	movne	r3, #1
 8016594:	0692      	lsls	r2, r2, #26
 8016596:	d42b      	bmi.n	80165f0 <_printf_common+0xb0>
 8016598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801659c:	4649      	mov	r1, r9
 801659e:	4638      	mov	r0, r7
 80165a0:	47c0      	blx	r8
 80165a2:	3001      	adds	r0, #1
 80165a4:	d01e      	beq.n	80165e4 <_printf_common+0xa4>
 80165a6:	6823      	ldr	r3, [r4, #0]
 80165a8:	6922      	ldr	r2, [r4, #16]
 80165aa:	f003 0306 	and.w	r3, r3, #6
 80165ae:	2b04      	cmp	r3, #4
 80165b0:	bf02      	ittt	eq
 80165b2:	68e5      	ldreq	r5, [r4, #12]
 80165b4:	6833      	ldreq	r3, [r6, #0]
 80165b6:	1aed      	subeq	r5, r5, r3
 80165b8:	68a3      	ldr	r3, [r4, #8]
 80165ba:	bf0c      	ite	eq
 80165bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80165c0:	2500      	movne	r5, #0
 80165c2:	4293      	cmp	r3, r2
 80165c4:	bfc4      	itt	gt
 80165c6:	1a9b      	subgt	r3, r3, r2
 80165c8:	18ed      	addgt	r5, r5, r3
 80165ca:	2600      	movs	r6, #0
 80165cc:	341a      	adds	r4, #26
 80165ce:	42b5      	cmp	r5, r6
 80165d0:	d11a      	bne.n	8016608 <_printf_common+0xc8>
 80165d2:	2000      	movs	r0, #0
 80165d4:	e008      	b.n	80165e8 <_printf_common+0xa8>
 80165d6:	2301      	movs	r3, #1
 80165d8:	4652      	mov	r2, sl
 80165da:	4649      	mov	r1, r9
 80165dc:	4638      	mov	r0, r7
 80165de:	47c0      	blx	r8
 80165e0:	3001      	adds	r0, #1
 80165e2:	d103      	bne.n	80165ec <_printf_common+0xac>
 80165e4:	f04f 30ff 	mov.w	r0, #4294967295
 80165e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165ec:	3501      	adds	r5, #1
 80165ee:	e7c6      	b.n	801657e <_printf_common+0x3e>
 80165f0:	18e1      	adds	r1, r4, r3
 80165f2:	1c5a      	adds	r2, r3, #1
 80165f4:	2030      	movs	r0, #48	; 0x30
 80165f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80165fa:	4422      	add	r2, r4
 80165fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016604:	3302      	adds	r3, #2
 8016606:	e7c7      	b.n	8016598 <_printf_common+0x58>
 8016608:	2301      	movs	r3, #1
 801660a:	4622      	mov	r2, r4
 801660c:	4649      	mov	r1, r9
 801660e:	4638      	mov	r0, r7
 8016610:	47c0      	blx	r8
 8016612:	3001      	adds	r0, #1
 8016614:	d0e6      	beq.n	80165e4 <_printf_common+0xa4>
 8016616:	3601      	adds	r6, #1
 8016618:	e7d9      	b.n	80165ce <_printf_common+0x8e>
	...

0801661c <_printf_i>:
 801661c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016620:	7e0f      	ldrb	r7, [r1, #24]
 8016622:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016624:	2f78      	cmp	r7, #120	; 0x78
 8016626:	4691      	mov	r9, r2
 8016628:	4680      	mov	r8, r0
 801662a:	460c      	mov	r4, r1
 801662c:	469a      	mov	sl, r3
 801662e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016632:	d807      	bhi.n	8016644 <_printf_i+0x28>
 8016634:	2f62      	cmp	r7, #98	; 0x62
 8016636:	d80a      	bhi.n	801664e <_printf_i+0x32>
 8016638:	2f00      	cmp	r7, #0
 801663a:	f000 80d4 	beq.w	80167e6 <_printf_i+0x1ca>
 801663e:	2f58      	cmp	r7, #88	; 0x58
 8016640:	f000 80c0 	beq.w	80167c4 <_printf_i+0x1a8>
 8016644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801664c:	e03a      	b.n	80166c4 <_printf_i+0xa8>
 801664e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016652:	2b15      	cmp	r3, #21
 8016654:	d8f6      	bhi.n	8016644 <_printf_i+0x28>
 8016656:	a101      	add	r1, pc, #4	; (adr r1, 801665c <_printf_i+0x40>)
 8016658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801665c:	080166b5 	.word	0x080166b5
 8016660:	080166c9 	.word	0x080166c9
 8016664:	08016645 	.word	0x08016645
 8016668:	08016645 	.word	0x08016645
 801666c:	08016645 	.word	0x08016645
 8016670:	08016645 	.word	0x08016645
 8016674:	080166c9 	.word	0x080166c9
 8016678:	08016645 	.word	0x08016645
 801667c:	08016645 	.word	0x08016645
 8016680:	08016645 	.word	0x08016645
 8016684:	08016645 	.word	0x08016645
 8016688:	080167cd 	.word	0x080167cd
 801668c:	080166f5 	.word	0x080166f5
 8016690:	08016787 	.word	0x08016787
 8016694:	08016645 	.word	0x08016645
 8016698:	08016645 	.word	0x08016645
 801669c:	080167ef 	.word	0x080167ef
 80166a0:	08016645 	.word	0x08016645
 80166a4:	080166f5 	.word	0x080166f5
 80166a8:	08016645 	.word	0x08016645
 80166ac:	08016645 	.word	0x08016645
 80166b0:	0801678f 	.word	0x0801678f
 80166b4:	682b      	ldr	r3, [r5, #0]
 80166b6:	1d1a      	adds	r2, r3, #4
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	602a      	str	r2, [r5, #0]
 80166bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80166c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80166c4:	2301      	movs	r3, #1
 80166c6:	e09f      	b.n	8016808 <_printf_i+0x1ec>
 80166c8:	6820      	ldr	r0, [r4, #0]
 80166ca:	682b      	ldr	r3, [r5, #0]
 80166cc:	0607      	lsls	r7, r0, #24
 80166ce:	f103 0104 	add.w	r1, r3, #4
 80166d2:	6029      	str	r1, [r5, #0]
 80166d4:	d501      	bpl.n	80166da <_printf_i+0xbe>
 80166d6:	681e      	ldr	r6, [r3, #0]
 80166d8:	e003      	b.n	80166e2 <_printf_i+0xc6>
 80166da:	0646      	lsls	r6, r0, #25
 80166dc:	d5fb      	bpl.n	80166d6 <_printf_i+0xba>
 80166de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80166e2:	2e00      	cmp	r6, #0
 80166e4:	da03      	bge.n	80166ee <_printf_i+0xd2>
 80166e6:	232d      	movs	r3, #45	; 0x2d
 80166e8:	4276      	negs	r6, r6
 80166ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80166ee:	485a      	ldr	r0, [pc, #360]	; (8016858 <_printf_i+0x23c>)
 80166f0:	230a      	movs	r3, #10
 80166f2:	e012      	b.n	801671a <_printf_i+0xfe>
 80166f4:	682b      	ldr	r3, [r5, #0]
 80166f6:	6820      	ldr	r0, [r4, #0]
 80166f8:	1d19      	adds	r1, r3, #4
 80166fa:	6029      	str	r1, [r5, #0]
 80166fc:	0605      	lsls	r5, r0, #24
 80166fe:	d501      	bpl.n	8016704 <_printf_i+0xe8>
 8016700:	681e      	ldr	r6, [r3, #0]
 8016702:	e002      	b.n	801670a <_printf_i+0xee>
 8016704:	0641      	lsls	r1, r0, #25
 8016706:	d5fb      	bpl.n	8016700 <_printf_i+0xe4>
 8016708:	881e      	ldrh	r6, [r3, #0]
 801670a:	4853      	ldr	r0, [pc, #332]	; (8016858 <_printf_i+0x23c>)
 801670c:	2f6f      	cmp	r7, #111	; 0x6f
 801670e:	bf0c      	ite	eq
 8016710:	2308      	moveq	r3, #8
 8016712:	230a      	movne	r3, #10
 8016714:	2100      	movs	r1, #0
 8016716:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801671a:	6865      	ldr	r5, [r4, #4]
 801671c:	60a5      	str	r5, [r4, #8]
 801671e:	2d00      	cmp	r5, #0
 8016720:	bfa2      	ittt	ge
 8016722:	6821      	ldrge	r1, [r4, #0]
 8016724:	f021 0104 	bicge.w	r1, r1, #4
 8016728:	6021      	strge	r1, [r4, #0]
 801672a:	b90e      	cbnz	r6, 8016730 <_printf_i+0x114>
 801672c:	2d00      	cmp	r5, #0
 801672e:	d04b      	beq.n	80167c8 <_printf_i+0x1ac>
 8016730:	4615      	mov	r5, r2
 8016732:	fbb6 f1f3 	udiv	r1, r6, r3
 8016736:	fb03 6711 	mls	r7, r3, r1, r6
 801673a:	5dc7      	ldrb	r7, [r0, r7]
 801673c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016740:	4637      	mov	r7, r6
 8016742:	42bb      	cmp	r3, r7
 8016744:	460e      	mov	r6, r1
 8016746:	d9f4      	bls.n	8016732 <_printf_i+0x116>
 8016748:	2b08      	cmp	r3, #8
 801674a:	d10b      	bne.n	8016764 <_printf_i+0x148>
 801674c:	6823      	ldr	r3, [r4, #0]
 801674e:	07de      	lsls	r6, r3, #31
 8016750:	d508      	bpl.n	8016764 <_printf_i+0x148>
 8016752:	6923      	ldr	r3, [r4, #16]
 8016754:	6861      	ldr	r1, [r4, #4]
 8016756:	4299      	cmp	r1, r3
 8016758:	bfde      	ittt	le
 801675a:	2330      	movle	r3, #48	; 0x30
 801675c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016760:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016764:	1b52      	subs	r2, r2, r5
 8016766:	6122      	str	r2, [r4, #16]
 8016768:	f8cd a000 	str.w	sl, [sp]
 801676c:	464b      	mov	r3, r9
 801676e:	aa03      	add	r2, sp, #12
 8016770:	4621      	mov	r1, r4
 8016772:	4640      	mov	r0, r8
 8016774:	f7ff fee4 	bl	8016540 <_printf_common>
 8016778:	3001      	adds	r0, #1
 801677a:	d14a      	bne.n	8016812 <_printf_i+0x1f6>
 801677c:	f04f 30ff 	mov.w	r0, #4294967295
 8016780:	b004      	add	sp, #16
 8016782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016786:	6823      	ldr	r3, [r4, #0]
 8016788:	f043 0320 	orr.w	r3, r3, #32
 801678c:	6023      	str	r3, [r4, #0]
 801678e:	4833      	ldr	r0, [pc, #204]	; (801685c <_printf_i+0x240>)
 8016790:	2778      	movs	r7, #120	; 0x78
 8016792:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016796:	6823      	ldr	r3, [r4, #0]
 8016798:	6829      	ldr	r1, [r5, #0]
 801679a:	061f      	lsls	r7, r3, #24
 801679c:	f851 6b04 	ldr.w	r6, [r1], #4
 80167a0:	d402      	bmi.n	80167a8 <_printf_i+0x18c>
 80167a2:	065f      	lsls	r7, r3, #25
 80167a4:	bf48      	it	mi
 80167a6:	b2b6      	uxthmi	r6, r6
 80167a8:	07df      	lsls	r7, r3, #31
 80167aa:	bf48      	it	mi
 80167ac:	f043 0320 	orrmi.w	r3, r3, #32
 80167b0:	6029      	str	r1, [r5, #0]
 80167b2:	bf48      	it	mi
 80167b4:	6023      	strmi	r3, [r4, #0]
 80167b6:	b91e      	cbnz	r6, 80167c0 <_printf_i+0x1a4>
 80167b8:	6823      	ldr	r3, [r4, #0]
 80167ba:	f023 0320 	bic.w	r3, r3, #32
 80167be:	6023      	str	r3, [r4, #0]
 80167c0:	2310      	movs	r3, #16
 80167c2:	e7a7      	b.n	8016714 <_printf_i+0xf8>
 80167c4:	4824      	ldr	r0, [pc, #144]	; (8016858 <_printf_i+0x23c>)
 80167c6:	e7e4      	b.n	8016792 <_printf_i+0x176>
 80167c8:	4615      	mov	r5, r2
 80167ca:	e7bd      	b.n	8016748 <_printf_i+0x12c>
 80167cc:	682b      	ldr	r3, [r5, #0]
 80167ce:	6826      	ldr	r6, [r4, #0]
 80167d0:	6961      	ldr	r1, [r4, #20]
 80167d2:	1d18      	adds	r0, r3, #4
 80167d4:	6028      	str	r0, [r5, #0]
 80167d6:	0635      	lsls	r5, r6, #24
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	d501      	bpl.n	80167e0 <_printf_i+0x1c4>
 80167dc:	6019      	str	r1, [r3, #0]
 80167de:	e002      	b.n	80167e6 <_printf_i+0x1ca>
 80167e0:	0670      	lsls	r0, r6, #25
 80167e2:	d5fb      	bpl.n	80167dc <_printf_i+0x1c0>
 80167e4:	8019      	strh	r1, [r3, #0]
 80167e6:	2300      	movs	r3, #0
 80167e8:	6123      	str	r3, [r4, #16]
 80167ea:	4615      	mov	r5, r2
 80167ec:	e7bc      	b.n	8016768 <_printf_i+0x14c>
 80167ee:	682b      	ldr	r3, [r5, #0]
 80167f0:	1d1a      	adds	r2, r3, #4
 80167f2:	602a      	str	r2, [r5, #0]
 80167f4:	681d      	ldr	r5, [r3, #0]
 80167f6:	6862      	ldr	r2, [r4, #4]
 80167f8:	2100      	movs	r1, #0
 80167fa:	4628      	mov	r0, r5
 80167fc:	f7e9 fce8 	bl	80001d0 <memchr>
 8016800:	b108      	cbz	r0, 8016806 <_printf_i+0x1ea>
 8016802:	1b40      	subs	r0, r0, r5
 8016804:	6060      	str	r0, [r4, #4]
 8016806:	6863      	ldr	r3, [r4, #4]
 8016808:	6123      	str	r3, [r4, #16]
 801680a:	2300      	movs	r3, #0
 801680c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016810:	e7aa      	b.n	8016768 <_printf_i+0x14c>
 8016812:	6923      	ldr	r3, [r4, #16]
 8016814:	462a      	mov	r2, r5
 8016816:	4649      	mov	r1, r9
 8016818:	4640      	mov	r0, r8
 801681a:	47d0      	blx	sl
 801681c:	3001      	adds	r0, #1
 801681e:	d0ad      	beq.n	801677c <_printf_i+0x160>
 8016820:	6823      	ldr	r3, [r4, #0]
 8016822:	079b      	lsls	r3, r3, #30
 8016824:	d413      	bmi.n	801684e <_printf_i+0x232>
 8016826:	68e0      	ldr	r0, [r4, #12]
 8016828:	9b03      	ldr	r3, [sp, #12]
 801682a:	4298      	cmp	r0, r3
 801682c:	bfb8      	it	lt
 801682e:	4618      	movlt	r0, r3
 8016830:	e7a6      	b.n	8016780 <_printf_i+0x164>
 8016832:	2301      	movs	r3, #1
 8016834:	4632      	mov	r2, r6
 8016836:	4649      	mov	r1, r9
 8016838:	4640      	mov	r0, r8
 801683a:	47d0      	blx	sl
 801683c:	3001      	adds	r0, #1
 801683e:	d09d      	beq.n	801677c <_printf_i+0x160>
 8016840:	3501      	adds	r5, #1
 8016842:	68e3      	ldr	r3, [r4, #12]
 8016844:	9903      	ldr	r1, [sp, #12]
 8016846:	1a5b      	subs	r3, r3, r1
 8016848:	42ab      	cmp	r3, r5
 801684a:	dcf2      	bgt.n	8016832 <_printf_i+0x216>
 801684c:	e7eb      	b.n	8016826 <_printf_i+0x20a>
 801684e:	2500      	movs	r5, #0
 8016850:	f104 0619 	add.w	r6, r4, #25
 8016854:	e7f5      	b.n	8016842 <_printf_i+0x226>
 8016856:	bf00      	nop
 8016858:	0801d99b 	.word	0x0801d99b
 801685c:	0801d9ac 	.word	0x0801d9ac

08016860 <_scanf_float>:
 8016860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016864:	b087      	sub	sp, #28
 8016866:	4617      	mov	r7, r2
 8016868:	9303      	str	r3, [sp, #12]
 801686a:	688b      	ldr	r3, [r1, #8]
 801686c:	1e5a      	subs	r2, r3, #1
 801686e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016872:	bf83      	ittte	hi
 8016874:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016878:	195b      	addhi	r3, r3, r5
 801687a:	9302      	strhi	r3, [sp, #8]
 801687c:	2300      	movls	r3, #0
 801687e:	bf86      	itte	hi
 8016880:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016884:	608b      	strhi	r3, [r1, #8]
 8016886:	9302      	strls	r3, [sp, #8]
 8016888:	680b      	ldr	r3, [r1, #0]
 801688a:	468b      	mov	fp, r1
 801688c:	2500      	movs	r5, #0
 801688e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016892:	f84b 3b1c 	str.w	r3, [fp], #28
 8016896:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801689a:	4680      	mov	r8, r0
 801689c:	460c      	mov	r4, r1
 801689e:	465e      	mov	r6, fp
 80168a0:	46aa      	mov	sl, r5
 80168a2:	46a9      	mov	r9, r5
 80168a4:	9501      	str	r5, [sp, #4]
 80168a6:	68a2      	ldr	r2, [r4, #8]
 80168a8:	b152      	cbz	r2, 80168c0 <_scanf_float+0x60>
 80168aa:	683b      	ldr	r3, [r7, #0]
 80168ac:	781b      	ldrb	r3, [r3, #0]
 80168ae:	2b4e      	cmp	r3, #78	; 0x4e
 80168b0:	d864      	bhi.n	801697c <_scanf_float+0x11c>
 80168b2:	2b40      	cmp	r3, #64	; 0x40
 80168b4:	d83c      	bhi.n	8016930 <_scanf_float+0xd0>
 80168b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80168ba:	b2c8      	uxtb	r0, r1
 80168bc:	280e      	cmp	r0, #14
 80168be:	d93a      	bls.n	8016936 <_scanf_float+0xd6>
 80168c0:	f1b9 0f00 	cmp.w	r9, #0
 80168c4:	d003      	beq.n	80168ce <_scanf_float+0x6e>
 80168c6:	6823      	ldr	r3, [r4, #0]
 80168c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80168cc:	6023      	str	r3, [r4, #0]
 80168ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80168d2:	f1ba 0f01 	cmp.w	sl, #1
 80168d6:	f200 8113 	bhi.w	8016b00 <_scanf_float+0x2a0>
 80168da:	455e      	cmp	r6, fp
 80168dc:	f200 8105 	bhi.w	8016aea <_scanf_float+0x28a>
 80168e0:	2501      	movs	r5, #1
 80168e2:	4628      	mov	r0, r5
 80168e4:	b007      	add	sp, #28
 80168e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80168ee:	2a0d      	cmp	r2, #13
 80168f0:	d8e6      	bhi.n	80168c0 <_scanf_float+0x60>
 80168f2:	a101      	add	r1, pc, #4	; (adr r1, 80168f8 <_scanf_float+0x98>)
 80168f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80168f8:	08016a37 	.word	0x08016a37
 80168fc:	080168c1 	.word	0x080168c1
 8016900:	080168c1 	.word	0x080168c1
 8016904:	080168c1 	.word	0x080168c1
 8016908:	08016a97 	.word	0x08016a97
 801690c:	08016a6f 	.word	0x08016a6f
 8016910:	080168c1 	.word	0x080168c1
 8016914:	080168c1 	.word	0x080168c1
 8016918:	08016a45 	.word	0x08016a45
 801691c:	080168c1 	.word	0x080168c1
 8016920:	080168c1 	.word	0x080168c1
 8016924:	080168c1 	.word	0x080168c1
 8016928:	080168c1 	.word	0x080168c1
 801692c:	080169fd 	.word	0x080169fd
 8016930:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016934:	e7db      	b.n	80168ee <_scanf_float+0x8e>
 8016936:	290e      	cmp	r1, #14
 8016938:	d8c2      	bhi.n	80168c0 <_scanf_float+0x60>
 801693a:	a001      	add	r0, pc, #4	; (adr r0, 8016940 <_scanf_float+0xe0>)
 801693c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016940:	080169ef 	.word	0x080169ef
 8016944:	080168c1 	.word	0x080168c1
 8016948:	080169ef 	.word	0x080169ef
 801694c:	08016a83 	.word	0x08016a83
 8016950:	080168c1 	.word	0x080168c1
 8016954:	0801699d 	.word	0x0801699d
 8016958:	080169d9 	.word	0x080169d9
 801695c:	080169d9 	.word	0x080169d9
 8016960:	080169d9 	.word	0x080169d9
 8016964:	080169d9 	.word	0x080169d9
 8016968:	080169d9 	.word	0x080169d9
 801696c:	080169d9 	.word	0x080169d9
 8016970:	080169d9 	.word	0x080169d9
 8016974:	080169d9 	.word	0x080169d9
 8016978:	080169d9 	.word	0x080169d9
 801697c:	2b6e      	cmp	r3, #110	; 0x6e
 801697e:	d809      	bhi.n	8016994 <_scanf_float+0x134>
 8016980:	2b60      	cmp	r3, #96	; 0x60
 8016982:	d8b2      	bhi.n	80168ea <_scanf_float+0x8a>
 8016984:	2b54      	cmp	r3, #84	; 0x54
 8016986:	d077      	beq.n	8016a78 <_scanf_float+0x218>
 8016988:	2b59      	cmp	r3, #89	; 0x59
 801698a:	d199      	bne.n	80168c0 <_scanf_float+0x60>
 801698c:	2d07      	cmp	r5, #7
 801698e:	d197      	bne.n	80168c0 <_scanf_float+0x60>
 8016990:	2508      	movs	r5, #8
 8016992:	e029      	b.n	80169e8 <_scanf_float+0x188>
 8016994:	2b74      	cmp	r3, #116	; 0x74
 8016996:	d06f      	beq.n	8016a78 <_scanf_float+0x218>
 8016998:	2b79      	cmp	r3, #121	; 0x79
 801699a:	e7f6      	b.n	801698a <_scanf_float+0x12a>
 801699c:	6821      	ldr	r1, [r4, #0]
 801699e:	05c8      	lsls	r0, r1, #23
 80169a0:	d51a      	bpl.n	80169d8 <_scanf_float+0x178>
 80169a2:	9b02      	ldr	r3, [sp, #8]
 80169a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80169a8:	6021      	str	r1, [r4, #0]
 80169aa:	f109 0901 	add.w	r9, r9, #1
 80169ae:	b11b      	cbz	r3, 80169b8 <_scanf_float+0x158>
 80169b0:	3b01      	subs	r3, #1
 80169b2:	3201      	adds	r2, #1
 80169b4:	9302      	str	r3, [sp, #8]
 80169b6:	60a2      	str	r2, [r4, #8]
 80169b8:	68a3      	ldr	r3, [r4, #8]
 80169ba:	3b01      	subs	r3, #1
 80169bc:	60a3      	str	r3, [r4, #8]
 80169be:	6923      	ldr	r3, [r4, #16]
 80169c0:	3301      	adds	r3, #1
 80169c2:	6123      	str	r3, [r4, #16]
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	3b01      	subs	r3, #1
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	607b      	str	r3, [r7, #4]
 80169cc:	f340 8084 	ble.w	8016ad8 <_scanf_float+0x278>
 80169d0:	683b      	ldr	r3, [r7, #0]
 80169d2:	3301      	adds	r3, #1
 80169d4:	603b      	str	r3, [r7, #0]
 80169d6:	e766      	b.n	80168a6 <_scanf_float+0x46>
 80169d8:	eb1a 0f05 	cmn.w	sl, r5
 80169dc:	f47f af70 	bne.w	80168c0 <_scanf_float+0x60>
 80169e0:	6822      	ldr	r2, [r4, #0]
 80169e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80169e6:	6022      	str	r2, [r4, #0]
 80169e8:	f806 3b01 	strb.w	r3, [r6], #1
 80169ec:	e7e4      	b.n	80169b8 <_scanf_float+0x158>
 80169ee:	6822      	ldr	r2, [r4, #0]
 80169f0:	0610      	lsls	r0, r2, #24
 80169f2:	f57f af65 	bpl.w	80168c0 <_scanf_float+0x60>
 80169f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80169fa:	e7f4      	b.n	80169e6 <_scanf_float+0x186>
 80169fc:	f1ba 0f00 	cmp.w	sl, #0
 8016a00:	d10e      	bne.n	8016a20 <_scanf_float+0x1c0>
 8016a02:	f1b9 0f00 	cmp.w	r9, #0
 8016a06:	d10e      	bne.n	8016a26 <_scanf_float+0x1c6>
 8016a08:	6822      	ldr	r2, [r4, #0]
 8016a0a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016a0e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016a12:	d108      	bne.n	8016a26 <_scanf_float+0x1c6>
 8016a14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016a18:	6022      	str	r2, [r4, #0]
 8016a1a:	f04f 0a01 	mov.w	sl, #1
 8016a1e:	e7e3      	b.n	80169e8 <_scanf_float+0x188>
 8016a20:	f1ba 0f02 	cmp.w	sl, #2
 8016a24:	d055      	beq.n	8016ad2 <_scanf_float+0x272>
 8016a26:	2d01      	cmp	r5, #1
 8016a28:	d002      	beq.n	8016a30 <_scanf_float+0x1d0>
 8016a2a:	2d04      	cmp	r5, #4
 8016a2c:	f47f af48 	bne.w	80168c0 <_scanf_float+0x60>
 8016a30:	3501      	adds	r5, #1
 8016a32:	b2ed      	uxtb	r5, r5
 8016a34:	e7d8      	b.n	80169e8 <_scanf_float+0x188>
 8016a36:	f1ba 0f01 	cmp.w	sl, #1
 8016a3a:	f47f af41 	bne.w	80168c0 <_scanf_float+0x60>
 8016a3e:	f04f 0a02 	mov.w	sl, #2
 8016a42:	e7d1      	b.n	80169e8 <_scanf_float+0x188>
 8016a44:	b97d      	cbnz	r5, 8016a66 <_scanf_float+0x206>
 8016a46:	f1b9 0f00 	cmp.w	r9, #0
 8016a4a:	f47f af3c 	bne.w	80168c6 <_scanf_float+0x66>
 8016a4e:	6822      	ldr	r2, [r4, #0]
 8016a50:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016a54:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016a58:	f47f af39 	bne.w	80168ce <_scanf_float+0x6e>
 8016a5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016a60:	6022      	str	r2, [r4, #0]
 8016a62:	2501      	movs	r5, #1
 8016a64:	e7c0      	b.n	80169e8 <_scanf_float+0x188>
 8016a66:	2d03      	cmp	r5, #3
 8016a68:	d0e2      	beq.n	8016a30 <_scanf_float+0x1d0>
 8016a6a:	2d05      	cmp	r5, #5
 8016a6c:	e7de      	b.n	8016a2c <_scanf_float+0x1cc>
 8016a6e:	2d02      	cmp	r5, #2
 8016a70:	f47f af26 	bne.w	80168c0 <_scanf_float+0x60>
 8016a74:	2503      	movs	r5, #3
 8016a76:	e7b7      	b.n	80169e8 <_scanf_float+0x188>
 8016a78:	2d06      	cmp	r5, #6
 8016a7a:	f47f af21 	bne.w	80168c0 <_scanf_float+0x60>
 8016a7e:	2507      	movs	r5, #7
 8016a80:	e7b2      	b.n	80169e8 <_scanf_float+0x188>
 8016a82:	6822      	ldr	r2, [r4, #0]
 8016a84:	0591      	lsls	r1, r2, #22
 8016a86:	f57f af1b 	bpl.w	80168c0 <_scanf_float+0x60>
 8016a8a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016a8e:	6022      	str	r2, [r4, #0]
 8016a90:	f8cd 9004 	str.w	r9, [sp, #4]
 8016a94:	e7a8      	b.n	80169e8 <_scanf_float+0x188>
 8016a96:	6822      	ldr	r2, [r4, #0]
 8016a98:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016a9c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016aa0:	d006      	beq.n	8016ab0 <_scanf_float+0x250>
 8016aa2:	0550      	lsls	r0, r2, #21
 8016aa4:	f57f af0c 	bpl.w	80168c0 <_scanf_float+0x60>
 8016aa8:	f1b9 0f00 	cmp.w	r9, #0
 8016aac:	f43f af0f 	beq.w	80168ce <_scanf_float+0x6e>
 8016ab0:	0591      	lsls	r1, r2, #22
 8016ab2:	bf58      	it	pl
 8016ab4:	9901      	ldrpl	r1, [sp, #4]
 8016ab6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016aba:	bf58      	it	pl
 8016abc:	eba9 0101 	subpl.w	r1, r9, r1
 8016ac0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016ac4:	bf58      	it	pl
 8016ac6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016aca:	6022      	str	r2, [r4, #0]
 8016acc:	f04f 0900 	mov.w	r9, #0
 8016ad0:	e78a      	b.n	80169e8 <_scanf_float+0x188>
 8016ad2:	f04f 0a03 	mov.w	sl, #3
 8016ad6:	e787      	b.n	80169e8 <_scanf_float+0x188>
 8016ad8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016adc:	4639      	mov	r1, r7
 8016ade:	4640      	mov	r0, r8
 8016ae0:	4798      	blx	r3
 8016ae2:	2800      	cmp	r0, #0
 8016ae4:	f43f aedf 	beq.w	80168a6 <_scanf_float+0x46>
 8016ae8:	e6ea      	b.n	80168c0 <_scanf_float+0x60>
 8016aea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016aee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016af2:	463a      	mov	r2, r7
 8016af4:	4640      	mov	r0, r8
 8016af6:	4798      	blx	r3
 8016af8:	6923      	ldr	r3, [r4, #16]
 8016afa:	3b01      	subs	r3, #1
 8016afc:	6123      	str	r3, [r4, #16]
 8016afe:	e6ec      	b.n	80168da <_scanf_float+0x7a>
 8016b00:	1e6b      	subs	r3, r5, #1
 8016b02:	2b06      	cmp	r3, #6
 8016b04:	d825      	bhi.n	8016b52 <_scanf_float+0x2f2>
 8016b06:	2d02      	cmp	r5, #2
 8016b08:	d836      	bhi.n	8016b78 <_scanf_float+0x318>
 8016b0a:	455e      	cmp	r6, fp
 8016b0c:	f67f aee8 	bls.w	80168e0 <_scanf_float+0x80>
 8016b10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b14:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016b18:	463a      	mov	r2, r7
 8016b1a:	4640      	mov	r0, r8
 8016b1c:	4798      	blx	r3
 8016b1e:	6923      	ldr	r3, [r4, #16]
 8016b20:	3b01      	subs	r3, #1
 8016b22:	6123      	str	r3, [r4, #16]
 8016b24:	e7f1      	b.n	8016b0a <_scanf_float+0x2aa>
 8016b26:	9802      	ldr	r0, [sp, #8]
 8016b28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b2c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016b30:	9002      	str	r0, [sp, #8]
 8016b32:	463a      	mov	r2, r7
 8016b34:	4640      	mov	r0, r8
 8016b36:	4798      	blx	r3
 8016b38:	6923      	ldr	r3, [r4, #16]
 8016b3a:	3b01      	subs	r3, #1
 8016b3c:	6123      	str	r3, [r4, #16]
 8016b3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016b42:	fa5f fa8a 	uxtb.w	sl, sl
 8016b46:	f1ba 0f02 	cmp.w	sl, #2
 8016b4a:	d1ec      	bne.n	8016b26 <_scanf_float+0x2c6>
 8016b4c:	3d03      	subs	r5, #3
 8016b4e:	b2ed      	uxtb	r5, r5
 8016b50:	1b76      	subs	r6, r6, r5
 8016b52:	6823      	ldr	r3, [r4, #0]
 8016b54:	05da      	lsls	r2, r3, #23
 8016b56:	d52f      	bpl.n	8016bb8 <_scanf_float+0x358>
 8016b58:	055b      	lsls	r3, r3, #21
 8016b5a:	d510      	bpl.n	8016b7e <_scanf_float+0x31e>
 8016b5c:	455e      	cmp	r6, fp
 8016b5e:	f67f aebf 	bls.w	80168e0 <_scanf_float+0x80>
 8016b62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016b6a:	463a      	mov	r2, r7
 8016b6c:	4640      	mov	r0, r8
 8016b6e:	4798      	blx	r3
 8016b70:	6923      	ldr	r3, [r4, #16]
 8016b72:	3b01      	subs	r3, #1
 8016b74:	6123      	str	r3, [r4, #16]
 8016b76:	e7f1      	b.n	8016b5c <_scanf_float+0x2fc>
 8016b78:	46aa      	mov	sl, r5
 8016b7a:	9602      	str	r6, [sp, #8]
 8016b7c:	e7df      	b.n	8016b3e <_scanf_float+0x2de>
 8016b7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016b82:	6923      	ldr	r3, [r4, #16]
 8016b84:	2965      	cmp	r1, #101	; 0x65
 8016b86:	f103 33ff 	add.w	r3, r3, #4294967295
 8016b8a:	f106 35ff 	add.w	r5, r6, #4294967295
 8016b8e:	6123      	str	r3, [r4, #16]
 8016b90:	d00c      	beq.n	8016bac <_scanf_float+0x34c>
 8016b92:	2945      	cmp	r1, #69	; 0x45
 8016b94:	d00a      	beq.n	8016bac <_scanf_float+0x34c>
 8016b96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b9a:	463a      	mov	r2, r7
 8016b9c:	4640      	mov	r0, r8
 8016b9e:	4798      	blx	r3
 8016ba0:	6923      	ldr	r3, [r4, #16]
 8016ba2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016ba6:	3b01      	subs	r3, #1
 8016ba8:	1eb5      	subs	r5, r6, #2
 8016baa:	6123      	str	r3, [r4, #16]
 8016bac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016bb0:	463a      	mov	r2, r7
 8016bb2:	4640      	mov	r0, r8
 8016bb4:	4798      	blx	r3
 8016bb6:	462e      	mov	r6, r5
 8016bb8:	6825      	ldr	r5, [r4, #0]
 8016bba:	f015 0510 	ands.w	r5, r5, #16
 8016bbe:	d158      	bne.n	8016c72 <_scanf_float+0x412>
 8016bc0:	7035      	strb	r5, [r6, #0]
 8016bc2:	6823      	ldr	r3, [r4, #0]
 8016bc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016bcc:	d11c      	bne.n	8016c08 <_scanf_float+0x3a8>
 8016bce:	9b01      	ldr	r3, [sp, #4]
 8016bd0:	454b      	cmp	r3, r9
 8016bd2:	eba3 0209 	sub.w	r2, r3, r9
 8016bd6:	d124      	bne.n	8016c22 <_scanf_float+0x3c2>
 8016bd8:	2200      	movs	r2, #0
 8016bda:	4659      	mov	r1, fp
 8016bdc:	4640      	mov	r0, r8
 8016bde:	f7ff f8df 	bl	8015da0 <_strtod_r>
 8016be2:	9b03      	ldr	r3, [sp, #12]
 8016be4:	6821      	ldr	r1, [r4, #0]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	f011 0f02 	tst.w	r1, #2
 8016bec:	ec57 6b10 	vmov	r6, r7, d0
 8016bf0:	f103 0204 	add.w	r2, r3, #4
 8016bf4:	d020      	beq.n	8016c38 <_scanf_float+0x3d8>
 8016bf6:	9903      	ldr	r1, [sp, #12]
 8016bf8:	600a      	str	r2, [r1, #0]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	e9c3 6700 	strd	r6, r7, [r3]
 8016c00:	68e3      	ldr	r3, [r4, #12]
 8016c02:	3301      	adds	r3, #1
 8016c04:	60e3      	str	r3, [r4, #12]
 8016c06:	e66c      	b.n	80168e2 <_scanf_float+0x82>
 8016c08:	9b04      	ldr	r3, [sp, #16]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d0e4      	beq.n	8016bd8 <_scanf_float+0x378>
 8016c0e:	9905      	ldr	r1, [sp, #20]
 8016c10:	230a      	movs	r3, #10
 8016c12:	462a      	mov	r2, r5
 8016c14:	3101      	adds	r1, #1
 8016c16:	4640      	mov	r0, r8
 8016c18:	f7ff f9b0 	bl	8015f7c <_strtol_r>
 8016c1c:	9b04      	ldr	r3, [sp, #16]
 8016c1e:	9e05      	ldr	r6, [sp, #20]
 8016c20:	1ac2      	subs	r2, r0, r3
 8016c22:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016c26:	429e      	cmp	r6, r3
 8016c28:	bf28      	it	cs
 8016c2a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016c2e:	4912      	ldr	r1, [pc, #72]	; (8016c78 <_scanf_float+0x418>)
 8016c30:	4630      	mov	r0, r6
 8016c32:	f000 f91b 	bl	8016e6c <siprintf>
 8016c36:	e7cf      	b.n	8016bd8 <_scanf_float+0x378>
 8016c38:	f011 0f04 	tst.w	r1, #4
 8016c3c:	9903      	ldr	r1, [sp, #12]
 8016c3e:	600a      	str	r2, [r1, #0]
 8016c40:	d1db      	bne.n	8016bfa <_scanf_float+0x39a>
 8016c42:	f8d3 8000 	ldr.w	r8, [r3]
 8016c46:	ee10 2a10 	vmov	r2, s0
 8016c4a:	ee10 0a10 	vmov	r0, s0
 8016c4e:	463b      	mov	r3, r7
 8016c50:	4639      	mov	r1, r7
 8016c52:	f7e9 ff6b 	bl	8000b2c <__aeabi_dcmpun>
 8016c56:	b128      	cbz	r0, 8016c64 <_scanf_float+0x404>
 8016c58:	4808      	ldr	r0, [pc, #32]	; (8016c7c <_scanf_float+0x41c>)
 8016c5a:	f000 fa9d 	bl	8017198 <nanf>
 8016c5e:	ed88 0a00 	vstr	s0, [r8]
 8016c62:	e7cd      	b.n	8016c00 <_scanf_float+0x3a0>
 8016c64:	4630      	mov	r0, r6
 8016c66:	4639      	mov	r1, r7
 8016c68:	f7e9 ffbe 	bl	8000be8 <__aeabi_d2f>
 8016c6c:	f8c8 0000 	str.w	r0, [r8]
 8016c70:	e7c6      	b.n	8016c00 <_scanf_float+0x3a0>
 8016c72:	2500      	movs	r5, #0
 8016c74:	e635      	b.n	80168e2 <_scanf_float+0x82>
 8016c76:	bf00      	nop
 8016c78:	0801d9bd 	.word	0x0801d9bd
 8016c7c:	0801da76 	.word	0x0801da76

08016c80 <std>:
 8016c80:	2300      	movs	r3, #0
 8016c82:	b510      	push	{r4, lr}
 8016c84:	4604      	mov	r4, r0
 8016c86:	e9c0 3300 	strd	r3, r3, [r0]
 8016c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016c8e:	6083      	str	r3, [r0, #8]
 8016c90:	8181      	strh	r1, [r0, #12]
 8016c92:	6643      	str	r3, [r0, #100]	; 0x64
 8016c94:	81c2      	strh	r2, [r0, #14]
 8016c96:	6183      	str	r3, [r0, #24]
 8016c98:	4619      	mov	r1, r3
 8016c9a:	2208      	movs	r2, #8
 8016c9c:	305c      	adds	r0, #92	; 0x5c
 8016c9e:	f000 f948 	bl	8016f32 <memset>
 8016ca2:	4b0d      	ldr	r3, [pc, #52]	; (8016cd8 <std+0x58>)
 8016ca4:	6263      	str	r3, [r4, #36]	; 0x24
 8016ca6:	4b0d      	ldr	r3, [pc, #52]	; (8016cdc <std+0x5c>)
 8016ca8:	62a3      	str	r3, [r4, #40]	; 0x28
 8016caa:	4b0d      	ldr	r3, [pc, #52]	; (8016ce0 <std+0x60>)
 8016cac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016cae:	4b0d      	ldr	r3, [pc, #52]	; (8016ce4 <std+0x64>)
 8016cb0:	6323      	str	r3, [r4, #48]	; 0x30
 8016cb2:	4b0d      	ldr	r3, [pc, #52]	; (8016ce8 <std+0x68>)
 8016cb4:	6224      	str	r4, [r4, #32]
 8016cb6:	429c      	cmp	r4, r3
 8016cb8:	d006      	beq.n	8016cc8 <std+0x48>
 8016cba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8016cbe:	4294      	cmp	r4, r2
 8016cc0:	d002      	beq.n	8016cc8 <std+0x48>
 8016cc2:	33d0      	adds	r3, #208	; 0xd0
 8016cc4:	429c      	cmp	r4, r3
 8016cc6:	d105      	bne.n	8016cd4 <std+0x54>
 8016cc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cd0:	f000 ba40 	b.w	8017154 <__retarget_lock_init_recursive>
 8016cd4:	bd10      	pop	{r4, pc}
 8016cd6:	bf00      	nop
 8016cd8:	08016ead 	.word	0x08016ead
 8016cdc:	08016ecf 	.word	0x08016ecf
 8016ce0:	08016f07 	.word	0x08016f07
 8016ce4:	08016f2b 	.word	0x08016f2b
 8016ce8:	20002478 	.word	0x20002478

08016cec <stdio_exit_handler>:
 8016cec:	4a02      	ldr	r2, [pc, #8]	; (8016cf8 <stdio_exit_handler+0xc>)
 8016cee:	4903      	ldr	r1, [pc, #12]	; (8016cfc <stdio_exit_handler+0x10>)
 8016cf0:	4803      	ldr	r0, [pc, #12]	; (8016d00 <stdio_exit_handler+0x14>)
 8016cf2:	f000 b869 	b.w	8016dc8 <_fwalk_sglue>
 8016cf6:	bf00      	nop
 8016cf8:	20000130 	.word	0x20000130
 8016cfc:	08019371 	.word	0x08019371
 8016d00:	200002a8 	.word	0x200002a8

08016d04 <cleanup_stdio>:
 8016d04:	6841      	ldr	r1, [r0, #4]
 8016d06:	4b0c      	ldr	r3, [pc, #48]	; (8016d38 <cleanup_stdio+0x34>)
 8016d08:	4299      	cmp	r1, r3
 8016d0a:	b510      	push	{r4, lr}
 8016d0c:	4604      	mov	r4, r0
 8016d0e:	d001      	beq.n	8016d14 <cleanup_stdio+0x10>
 8016d10:	f002 fb2e 	bl	8019370 <_fflush_r>
 8016d14:	68a1      	ldr	r1, [r4, #8]
 8016d16:	4b09      	ldr	r3, [pc, #36]	; (8016d3c <cleanup_stdio+0x38>)
 8016d18:	4299      	cmp	r1, r3
 8016d1a:	d002      	beq.n	8016d22 <cleanup_stdio+0x1e>
 8016d1c:	4620      	mov	r0, r4
 8016d1e:	f002 fb27 	bl	8019370 <_fflush_r>
 8016d22:	68e1      	ldr	r1, [r4, #12]
 8016d24:	4b06      	ldr	r3, [pc, #24]	; (8016d40 <cleanup_stdio+0x3c>)
 8016d26:	4299      	cmp	r1, r3
 8016d28:	d004      	beq.n	8016d34 <cleanup_stdio+0x30>
 8016d2a:	4620      	mov	r0, r4
 8016d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d30:	f002 bb1e 	b.w	8019370 <_fflush_r>
 8016d34:	bd10      	pop	{r4, pc}
 8016d36:	bf00      	nop
 8016d38:	20002478 	.word	0x20002478
 8016d3c:	200024e0 	.word	0x200024e0
 8016d40:	20002548 	.word	0x20002548

08016d44 <global_stdio_init.part.0>:
 8016d44:	b510      	push	{r4, lr}
 8016d46:	4b0b      	ldr	r3, [pc, #44]	; (8016d74 <global_stdio_init.part.0+0x30>)
 8016d48:	4c0b      	ldr	r4, [pc, #44]	; (8016d78 <global_stdio_init.part.0+0x34>)
 8016d4a:	4a0c      	ldr	r2, [pc, #48]	; (8016d7c <global_stdio_init.part.0+0x38>)
 8016d4c:	601a      	str	r2, [r3, #0]
 8016d4e:	4620      	mov	r0, r4
 8016d50:	2200      	movs	r2, #0
 8016d52:	2104      	movs	r1, #4
 8016d54:	f7ff ff94 	bl	8016c80 <std>
 8016d58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016d5c:	2201      	movs	r2, #1
 8016d5e:	2109      	movs	r1, #9
 8016d60:	f7ff ff8e 	bl	8016c80 <std>
 8016d64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016d68:	2202      	movs	r2, #2
 8016d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d6e:	2112      	movs	r1, #18
 8016d70:	f7ff bf86 	b.w	8016c80 <std>
 8016d74:	200025b0 	.word	0x200025b0
 8016d78:	20002478 	.word	0x20002478
 8016d7c:	08016ced 	.word	0x08016ced

08016d80 <__sfp_lock_acquire>:
 8016d80:	4801      	ldr	r0, [pc, #4]	; (8016d88 <__sfp_lock_acquire+0x8>)
 8016d82:	f000 b9e8 	b.w	8017156 <__retarget_lock_acquire_recursive>
 8016d86:	bf00      	nop
 8016d88:	200025b9 	.word	0x200025b9

08016d8c <__sfp_lock_release>:
 8016d8c:	4801      	ldr	r0, [pc, #4]	; (8016d94 <__sfp_lock_release+0x8>)
 8016d8e:	f000 b9e3 	b.w	8017158 <__retarget_lock_release_recursive>
 8016d92:	bf00      	nop
 8016d94:	200025b9 	.word	0x200025b9

08016d98 <__sinit>:
 8016d98:	b510      	push	{r4, lr}
 8016d9a:	4604      	mov	r4, r0
 8016d9c:	f7ff fff0 	bl	8016d80 <__sfp_lock_acquire>
 8016da0:	6a23      	ldr	r3, [r4, #32]
 8016da2:	b11b      	cbz	r3, 8016dac <__sinit+0x14>
 8016da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016da8:	f7ff bff0 	b.w	8016d8c <__sfp_lock_release>
 8016dac:	4b04      	ldr	r3, [pc, #16]	; (8016dc0 <__sinit+0x28>)
 8016dae:	6223      	str	r3, [r4, #32]
 8016db0:	4b04      	ldr	r3, [pc, #16]	; (8016dc4 <__sinit+0x2c>)
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d1f5      	bne.n	8016da4 <__sinit+0xc>
 8016db8:	f7ff ffc4 	bl	8016d44 <global_stdio_init.part.0>
 8016dbc:	e7f2      	b.n	8016da4 <__sinit+0xc>
 8016dbe:	bf00      	nop
 8016dc0:	08016d05 	.word	0x08016d05
 8016dc4:	200025b0 	.word	0x200025b0

08016dc8 <_fwalk_sglue>:
 8016dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016dcc:	4607      	mov	r7, r0
 8016dce:	4688      	mov	r8, r1
 8016dd0:	4614      	mov	r4, r2
 8016dd2:	2600      	movs	r6, #0
 8016dd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016dd8:	f1b9 0901 	subs.w	r9, r9, #1
 8016ddc:	d505      	bpl.n	8016dea <_fwalk_sglue+0x22>
 8016dde:	6824      	ldr	r4, [r4, #0]
 8016de0:	2c00      	cmp	r4, #0
 8016de2:	d1f7      	bne.n	8016dd4 <_fwalk_sglue+0xc>
 8016de4:	4630      	mov	r0, r6
 8016de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016dea:	89ab      	ldrh	r3, [r5, #12]
 8016dec:	2b01      	cmp	r3, #1
 8016dee:	d907      	bls.n	8016e00 <_fwalk_sglue+0x38>
 8016df0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016df4:	3301      	adds	r3, #1
 8016df6:	d003      	beq.n	8016e00 <_fwalk_sglue+0x38>
 8016df8:	4629      	mov	r1, r5
 8016dfa:	4638      	mov	r0, r7
 8016dfc:	47c0      	blx	r8
 8016dfe:	4306      	orrs	r6, r0
 8016e00:	3568      	adds	r5, #104	; 0x68
 8016e02:	e7e9      	b.n	8016dd8 <_fwalk_sglue+0x10>

08016e04 <sniprintf>:
 8016e04:	b40c      	push	{r2, r3}
 8016e06:	b530      	push	{r4, r5, lr}
 8016e08:	4b17      	ldr	r3, [pc, #92]	; (8016e68 <sniprintf+0x64>)
 8016e0a:	1e0c      	subs	r4, r1, #0
 8016e0c:	681d      	ldr	r5, [r3, #0]
 8016e0e:	b09d      	sub	sp, #116	; 0x74
 8016e10:	da08      	bge.n	8016e24 <sniprintf+0x20>
 8016e12:	238b      	movs	r3, #139	; 0x8b
 8016e14:	602b      	str	r3, [r5, #0]
 8016e16:	f04f 30ff 	mov.w	r0, #4294967295
 8016e1a:	b01d      	add	sp, #116	; 0x74
 8016e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e20:	b002      	add	sp, #8
 8016e22:	4770      	bx	lr
 8016e24:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016e28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016e2c:	bf14      	ite	ne
 8016e2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016e32:	4623      	moveq	r3, r4
 8016e34:	9304      	str	r3, [sp, #16]
 8016e36:	9307      	str	r3, [sp, #28]
 8016e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e3c:	9002      	str	r0, [sp, #8]
 8016e3e:	9006      	str	r0, [sp, #24]
 8016e40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016e44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016e46:	ab21      	add	r3, sp, #132	; 0x84
 8016e48:	a902      	add	r1, sp, #8
 8016e4a:	4628      	mov	r0, r5
 8016e4c:	9301      	str	r3, [sp, #4]
 8016e4e:	f002 f90b 	bl	8019068 <_svfiprintf_r>
 8016e52:	1c43      	adds	r3, r0, #1
 8016e54:	bfbc      	itt	lt
 8016e56:	238b      	movlt	r3, #139	; 0x8b
 8016e58:	602b      	strlt	r3, [r5, #0]
 8016e5a:	2c00      	cmp	r4, #0
 8016e5c:	d0dd      	beq.n	8016e1a <sniprintf+0x16>
 8016e5e:	9b02      	ldr	r3, [sp, #8]
 8016e60:	2200      	movs	r2, #0
 8016e62:	701a      	strb	r2, [r3, #0]
 8016e64:	e7d9      	b.n	8016e1a <sniprintf+0x16>
 8016e66:	bf00      	nop
 8016e68:	200002f4 	.word	0x200002f4

08016e6c <siprintf>:
 8016e6c:	b40e      	push	{r1, r2, r3}
 8016e6e:	b500      	push	{lr}
 8016e70:	b09c      	sub	sp, #112	; 0x70
 8016e72:	ab1d      	add	r3, sp, #116	; 0x74
 8016e74:	9002      	str	r0, [sp, #8]
 8016e76:	9006      	str	r0, [sp, #24]
 8016e78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016e7c:	4809      	ldr	r0, [pc, #36]	; (8016ea4 <siprintf+0x38>)
 8016e7e:	9107      	str	r1, [sp, #28]
 8016e80:	9104      	str	r1, [sp, #16]
 8016e82:	4909      	ldr	r1, [pc, #36]	; (8016ea8 <siprintf+0x3c>)
 8016e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e88:	9105      	str	r1, [sp, #20]
 8016e8a:	6800      	ldr	r0, [r0, #0]
 8016e8c:	9301      	str	r3, [sp, #4]
 8016e8e:	a902      	add	r1, sp, #8
 8016e90:	f002 f8ea 	bl	8019068 <_svfiprintf_r>
 8016e94:	9b02      	ldr	r3, [sp, #8]
 8016e96:	2200      	movs	r2, #0
 8016e98:	701a      	strb	r2, [r3, #0]
 8016e9a:	b01c      	add	sp, #112	; 0x70
 8016e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ea0:	b003      	add	sp, #12
 8016ea2:	4770      	bx	lr
 8016ea4:	200002f4 	.word	0x200002f4
 8016ea8:	ffff0208 	.word	0xffff0208

08016eac <__sread>:
 8016eac:	b510      	push	{r4, lr}
 8016eae:	460c      	mov	r4, r1
 8016eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016eb4:	f000 f8f0 	bl	8017098 <_read_r>
 8016eb8:	2800      	cmp	r0, #0
 8016eba:	bfab      	itete	ge
 8016ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8016ec0:	181b      	addge	r3, r3, r0
 8016ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016ec6:	bfac      	ite	ge
 8016ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8016eca:	81a3      	strhlt	r3, [r4, #12]
 8016ecc:	bd10      	pop	{r4, pc}

08016ece <__swrite>:
 8016ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ed2:	461f      	mov	r7, r3
 8016ed4:	898b      	ldrh	r3, [r1, #12]
 8016ed6:	05db      	lsls	r3, r3, #23
 8016ed8:	4605      	mov	r5, r0
 8016eda:	460c      	mov	r4, r1
 8016edc:	4616      	mov	r6, r2
 8016ede:	d505      	bpl.n	8016eec <__swrite+0x1e>
 8016ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ee4:	2302      	movs	r3, #2
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	f000 f8c4 	bl	8017074 <_lseek_r>
 8016eec:	89a3      	ldrh	r3, [r4, #12]
 8016eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016ef6:	81a3      	strh	r3, [r4, #12]
 8016ef8:	4632      	mov	r2, r6
 8016efa:	463b      	mov	r3, r7
 8016efc:	4628      	mov	r0, r5
 8016efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f02:	f000 b8eb 	b.w	80170dc <_write_r>

08016f06 <__sseek>:
 8016f06:	b510      	push	{r4, lr}
 8016f08:	460c      	mov	r4, r1
 8016f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f0e:	f000 f8b1 	bl	8017074 <_lseek_r>
 8016f12:	1c43      	adds	r3, r0, #1
 8016f14:	89a3      	ldrh	r3, [r4, #12]
 8016f16:	bf15      	itete	ne
 8016f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8016f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016f22:	81a3      	strheq	r3, [r4, #12]
 8016f24:	bf18      	it	ne
 8016f26:	81a3      	strhne	r3, [r4, #12]
 8016f28:	bd10      	pop	{r4, pc}

08016f2a <__sclose>:
 8016f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f2e:	f000 b891 	b.w	8017054 <_close_r>

08016f32 <memset>:
 8016f32:	4402      	add	r2, r0
 8016f34:	4603      	mov	r3, r0
 8016f36:	4293      	cmp	r3, r2
 8016f38:	d100      	bne.n	8016f3c <memset+0xa>
 8016f3a:	4770      	bx	lr
 8016f3c:	f803 1b01 	strb.w	r1, [r3], #1
 8016f40:	e7f9      	b.n	8016f36 <memset+0x4>

08016f42 <strncmp>:
 8016f42:	b510      	push	{r4, lr}
 8016f44:	b16a      	cbz	r2, 8016f62 <strncmp+0x20>
 8016f46:	3901      	subs	r1, #1
 8016f48:	1884      	adds	r4, r0, r2
 8016f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f4e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016f52:	429a      	cmp	r2, r3
 8016f54:	d103      	bne.n	8016f5e <strncmp+0x1c>
 8016f56:	42a0      	cmp	r0, r4
 8016f58:	d001      	beq.n	8016f5e <strncmp+0x1c>
 8016f5a:	2a00      	cmp	r2, #0
 8016f5c:	d1f5      	bne.n	8016f4a <strncmp+0x8>
 8016f5e:	1ad0      	subs	r0, r2, r3
 8016f60:	bd10      	pop	{r4, pc}
 8016f62:	4610      	mov	r0, r2
 8016f64:	e7fc      	b.n	8016f60 <strncmp+0x1e>
	...

08016f68 <strtok>:
 8016f68:	4b16      	ldr	r3, [pc, #88]	; (8016fc4 <strtok+0x5c>)
 8016f6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016f6c:	681e      	ldr	r6, [r3, #0]
 8016f6e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8016f70:	4605      	mov	r5, r0
 8016f72:	b9fc      	cbnz	r4, 8016fb4 <strtok+0x4c>
 8016f74:	2050      	movs	r0, #80	; 0x50
 8016f76:	9101      	str	r1, [sp, #4]
 8016f78:	f7fe f848 	bl	801500c <malloc>
 8016f7c:	9901      	ldr	r1, [sp, #4]
 8016f7e:	6470      	str	r0, [r6, #68]	; 0x44
 8016f80:	4602      	mov	r2, r0
 8016f82:	b920      	cbnz	r0, 8016f8e <strtok+0x26>
 8016f84:	4b10      	ldr	r3, [pc, #64]	; (8016fc8 <strtok+0x60>)
 8016f86:	4811      	ldr	r0, [pc, #68]	; (8016fcc <strtok+0x64>)
 8016f88:	215b      	movs	r1, #91	; 0x5b
 8016f8a:	f000 f90b 	bl	80171a4 <__assert_func>
 8016f8e:	e9c0 4400 	strd	r4, r4, [r0]
 8016f92:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8016f96:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8016f9a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8016f9e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8016fa2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8016fa6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8016faa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8016fae:	6184      	str	r4, [r0, #24]
 8016fb0:	7704      	strb	r4, [r0, #28]
 8016fb2:	6244      	str	r4, [r0, #36]	; 0x24
 8016fb4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8016fb6:	2301      	movs	r3, #1
 8016fb8:	4628      	mov	r0, r5
 8016fba:	b002      	add	sp, #8
 8016fbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016fc0:	f000 b806 	b.w	8016fd0 <__strtok_r>
 8016fc4:	200002f4 	.word	0x200002f4
 8016fc8:	0801d9c2 	.word	0x0801d9c2
 8016fcc:	0801d9d9 	.word	0x0801d9d9

08016fd0 <__strtok_r>:
 8016fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fd2:	b908      	cbnz	r0, 8016fd8 <__strtok_r+0x8>
 8016fd4:	6810      	ldr	r0, [r2, #0]
 8016fd6:	b188      	cbz	r0, 8016ffc <__strtok_r+0x2c>
 8016fd8:	4604      	mov	r4, r0
 8016fda:	4620      	mov	r0, r4
 8016fdc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016fe0:	460f      	mov	r7, r1
 8016fe2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016fe6:	b91e      	cbnz	r6, 8016ff0 <__strtok_r+0x20>
 8016fe8:	b965      	cbnz	r5, 8017004 <__strtok_r+0x34>
 8016fea:	6015      	str	r5, [r2, #0]
 8016fec:	4628      	mov	r0, r5
 8016fee:	e005      	b.n	8016ffc <__strtok_r+0x2c>
 8016ff0:	42b5      	cmp	r5, r6
 8016ff2:	d1f6      	bne.n	8016fe2 <__strtok_r+0x12>
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d1f0      	bne.n	8016fda <__strtok_r+0xa>
 8016ff8:	6014      	str	r4, [r2, #0]
 8016ffa:	7003      	strb	r3, [r0, #0]
 8016ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ffe:	461c      	mov	r4, r3
 8017000:	e00c      	b.n	801701c <__strtok_r+0x4c>
 8017002:	b915      	cbnz	r5, 801700a <__strtok_r+0x3a>
 8017004:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017008:	460e      	mov	r6, r1
 801700a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801700e:	42ab      	cmp	r3, r5
 8017010:	d1f7      	bne.n	8017002 <__strtok_r+0x32>
 8017012:	2b00      	cmp	r3, #0
 8017014:	d0f3      	beq.n	8016ffe <__strtok_r+0x2e>
 8017016:	2300      	movs	r3, #0
 8017018:	f804 3c01 	strb.w	r3, [r4, #-1]
 801701c:	6014      	str	r4, [r2, #0]
 801701e:	e7ed      	b.n	8016ffc <__strtok_r+0x2c>

08017020 <strstr>:
 8017020:	780a      	ldrb	r2, [r1, #0]
 8017022:	b570      	push	{r4, r5, r6, lr}
 8017024:	b96a      	cbnz	r2, 8017042 <strstr+0x22>
 8017026:	bd70      	pop	{r4, r5, r6, pc}
 8017028:	429a      	cmp	r2, r3
 801702a:	d109      	bne.n	8017040 <strstr+0x20>
 801702c:	460c      	mov	r4, r1
 801702e:	4605      	mov	r5, r0
 8017030:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017034:	2b00      	cmp	r3, #0
 8017036:	d0f6      	beq.n	8017026 <strstr+0x6>
 8017038:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801703c:	429e      	cmp	r6, r3
 801703e:	d0f7      	beq.n	8017030 <strstr+0x10>
 8017040:	3001      	adds	r0, #1
 8017042:	7803      	ldrb	r3, [r0, #0]
 8017044:	2b00      	cmp	r3, #0
 8017046:	d1ef      	bne.n	8017028 <strstr+0x8>
 8017048:	4618      	mov	r0, r3
 801704a:	e7ec      	b.n	8017026 <strstr+0x6>

0801704c <_localeconv_r>:
 801704c:	4800      	ldr	r0, [pc, #0]	; (8017050 <_localeconv_r+0x4>)
 801704e:	4770      	bx	lr
 8017050:	2000022c 	.word	0x2000022c

08017054 <_close_r>:
 8017054:	b538      	push	{r3, r4, r5, lr}
 8017056:	4d06      	ldr	r5, [pc, #24]	; (8017070 <_close_r+0x1c>)
 8017058:	2300      	movs	r3, #0
 801705a:	4604      	mov	r4, r0
 801705c:	4608      	mov	r0, r1
 801705e:	602b      	str	r3, [r5, #0]
 8017060:	f7ee fe67 	bl	8005d32 <_close>
 8017064:	1c43      	adds	r3, r0, #1
 8017066:	d102      	bne.n	801706e <_close_r+0x1a>
 8017068:	682b      	ldr	r3, [r5, #0]
 801706a:	b103      	cbz	r3, 801706e <_close_r+0x1a>
 801706c:	6023      	str	r3, [r4, #0]
 801706e:	bd38      	pop	{r3, r4, r5, pc}
 8017070:	200025b4 	.word	0x200025b4

08017074 <_lseek_r>:
 8017074:	b538      	push	{r3, r4, r5, lr}
 8017076:	4d07      	ldr	r5, [pc, #28]	; (8017094 <_lseek_r+0x20>)
 8017078:	4604      	mov	r4, r0
 801707a:	4608      	mov	r0, r1
 801707c:	4611      	mov	r1, r2
 801707e:	2200      	movs	r2, #0
 8017080:	602a      	str	r2, [r5, #0]
 8017082:	461a      	mov	r2, r3
 8017084:	f7ee fe7c 	bl	8005d80 <_lseek>
 8017088:	1c43      	adds	r3, r0, #1
 801708a:	d102      	bne.n	8017092 <_lseek_r+0x1e>
 801708c:	682b      	ldr	r3, [r5, #0]
 801708e:	b103      	cbz	r3, 8017092 <_lseek_r+0x1e>
 8017090:	6023      	str	r3, [r4, #0]
 8017092:	bd38      	pop	{r3, r4, r5, pc}
 8017094:	200025b4 	.word	0x200025b4

08017098 <_read_r>:
 8017098:	b538      	push	{r3, r4, r5, lr}
 801709a:	4d07      	ldr	r5, [pc, #28]	; (80170b8 <_read_r+0x20>)
 801709c:	4604      	mov	r4, r0
 801709e:	4608      	mov	r0, r1
 80170a0:	4611      	mov	r1, r2
 80170a2:	2200      	movs	r2, #0
 80170a4:	602a      	str	r2, [r5, #0]
 80170a6:	461a      	mov	r2, r3
 80170a8:	f7ee fe0a 	bl	8005cc0 <_read>
 80170ac:	1c43      	adds	r3, r0, #1
 80170ae:	d102      	bne.n	80170b6 <_read_r+0x1e>
 80170b0:	682b      	ldr	r3, [r5, #0]
 80170b2:	b103      	cbz	r3, 80170b6 <_read_r+0x1e>
 80170b4:	6023      	str	r3, [r4, #0]
 80170b6:	bd38      	pop	{r3, r4, r5, pc}
 80170b8:	200025b4 	.word	0x200025b4

080170bc <_sbrk_r>:
 80170bc:	b538      	push	{r3, r4, r5, lr}
 80170be:	4d06      	ldr	r5, [pc, #24]	; (80170d8 <_sbrk_r+0x1c>)
 80170c0:	2300      	movs	r3, #0
 80170c2:	4604      	mov	r4, r0
 80170c4:	4608      	mov	r0, r1
 80170c6:	602b      	str	r3, [r5, #0]
 80170c8:	f7ee fe68 	bl	8005d9c <_sbrk>
 80170cc:	1c43      	adds	r3, r0, #1
 80170ce:	d102      	bne.n	80170d6 <_sbrk_r+0x1a>
 80170d0:	682b      	ldr	r3, [r5, #0]
 80170d2:	b103      	cbz	r3, 80170d6 <_sbrk_r+0x1a>
 80170d4:	6023      	str	r3, [r4, #0]
 80170d6:	bd38      	pop	{r3, r4, r5, pc}
 80170d8:	200025b4 	.word	0x200025b4

080170dc <_write_r>:
 80170dc:	b538      	push	{r3, r4, r5, lr}
 80170de:	4d07      	ldr	r5, [pc, #28]	; (80170fc <_write_r+0x20>)
 80170e0:	4604      	mov	r4, r0
 80170e2:	4608      	mov	r0, r1
 80170e4:	4611      	mov	r1, r2
 80170e6:	2200      	movs	r2, #0
 80170e8:	602a      	str	r2, [r5, #0]
 80170ea:	461a      	mov	r2, r3
 80170ec:	f7ee fe05 	bl	8005cfa <_write>
 80170f0:	1c43      	adds	r3, r0, #1
 80170f2:	d102      	bne.n	80170fa <_write_r+0x1e>
 80170f4:	682b      	ldr	r3, [r5, #0]
 80170f6:	b103      	cbz	r3, 80170fa <_write_r+0x1e>
 80170f8:	6023      	str	r3, [r4, #0]
 80170fa:	bd38      	pop	{r3, r4, r5, pc}
 80170fc:	200025b4 	.word	0x200025b4

08017100 <__errno>:
 8017100:	4b01      	ldr	r3, [pc, #4]	; (8017108 <__errno+0x8>)
 8017102:	6818      	ldr	r0, [r3, #0]
 8017104:	4770      	bx	lr
 8017106:	bf00      	nop
 8017108:	200002f4 	.word	0x200002f4

0801710c <__libc_init_array>:
 801710c:	b570      	push	{r4, r5, r6, lr}
 801710e:	4d0d      	ldr	r5, [pc, #52]	; (8017144 <__libc_init_array+0x38>)
 8017110:	4c0d      	ldr	r4, [pc, #52]	; (8017148 <__libc_init_array+0x3c>)
 8017112:	1b64      	subs	r4, r4, r5
 8017114:	10a4      	asrs	r4, r4, #2
 8017116:	2600      	movs	r6, #0
 8017118:	42a6      	cmp	r6, r4
 801711a:	d109      	bne.n	8017130 <__libc_init_array+0x24>
 801711c:	4d0b      	ldr	r5, [pc, #44]	; (801714c <__libc_init_array+0x40>)
 801711e:	4c0c      	ldr	r4, [pc, #48]	; (8017150 <__libc_init_array+0x44>)
 8017120:	f004 fbfe 	bl	801b920 <_init>
 8017124:	1b64      	subs	r4, r4, r5
 8017126:	10a4      	asrs	r4, r4, #2
 8017128:	2600      	movs	r6, #0
 801712a:	42a6      	cmp	r6, r4
 801712c:	d105      	bne.n	801713a <__libc_init_array+0x2e>
 801712e:	bd70      	pop	{r4, r5, r6, pc}
 8017130:	f855 3b04 	ldr.w	r3, [r5], #4
 8017134:	4798      	blx	r3
 8017136:	3601      	adds	r6, #1
 8017138:	e7ee      	b.n	8017118 <__libc_init_array+0xc>
 801713a:	f855 3b04 	ldr.w	r3, [r5], #4
 801713e:	4798      	blx	r3
 8017140:	3601      	adds	r6, #1
 8017142:	e7f2      	b.n	801712a <__libc_init_array+0x1e>
 8017144:	0801deb0 	.word	0x0801deb0
 8017148:	0801deb0 	.word	0x0801deb0
 801714c:	0801deb0 	.word	0x0801deb0
 8017150:	0801deb4 	.word	0x0801deb4

08017154 <__retarget_lock_init_recursive>:
 8017154:	4770      	bx	lr

08017156 <__retarget_lock_acquire_recursive>:
 8017156:	4770      	bx	lr

08017158 <__retarget_lock_release_recursive>:
 8017158:	4770      	bx	lr

0801715a <strcpy>:
 801715a:	4603      	mov	r3, r0
 801715c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017160:	f803 2b01 	strb.w	r2, [r3], #1
 8017164:	2a00      	cmp	r2, #0
 8017166:	d1f9      	bne.n	801715c <strcpy+0x2>
 8017168:	4770      	bx	lr

0801716a <memcpy>:
 801716a:	440a      	add	r2, r1
 801716c:	4291      	cmp	r1, r2
 801716e:	f100 33ff 	add.w	r3, r0, #4294967295
 8017172:	d100      	bne.n	8017176 <memcpy+0xc>
 8017174:	4770      	bx	lr
 8017176:	b510      	push	{r4, lr}
 8017178:	f811 4b01 	ldrb.w	r4, [r1], #1
 801717c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017180:	4291      	cmp	r1, r2
 8017182:	d1f9      	bne.n	8017178 <memcpy+0xe>
 8017184:	bd10      	pop	{r4, pc}
	...

08017188 <nan>:
 8017188:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017190 <nan+0x8>
 801718c:	4770      	bx	lr
 801718e:	bf00      	nop
 8017190:	00000000 	.word	0x00000000
 8017194:	7ff80000 	.word	0x7ff80000

08017198 <nanf>:
 8017198:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80171a0 <nanf+0x8>
 801719c:	4770      	bx	lr
 801719e:	bf00      	nop
 80171a0:	7fc00000 	.word	0x7fc00000

080171a4 <__assert_func>:
 80171a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80171a6:	4614      	mov	r4, r2
 80171a8:	461a      	mov	r2, r3
 80171aa:	4b09      	ldr	r3, [pc, #36]	; (80171d0 <__assert_func+0x2c>)
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	4605      	mov	r5, r0
 80171b0:	68d8      	ldr	r0, [r3, #12]
 80171b2:	b14c      	cbz	r4, 80171c8 <__assert_func+0x24>
 80171b4:	4b07      	ldr	r3, [pc, #28]	; (80171d4 <__assert_func+0x30>)
 80171b6:	9100      	str	r1, [sp, #0]
 80171b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80171bc:	4906      	ldr	r1, [pc, #24]	; (80171d8 <__assert_func+0x34>)
 80171be:	462b      	mov	r3, r5
 80171c0:	f002 f8fe 	bl	80193c0 <fiprintf>
 80171c4:	f002 f928 	bl	8019418 <abort>
 80171c8:	4b04      	ldr	r3, [pc, #16]	; (80171dc <__assert_func+0x38>)
 80171ca:	461c      	mov	r4, r3
 80171cc:	e7f3      	b.n	80171b6 <__assert_func+0x12>
 80171ce:	bf00      	nop
 80171d0:	200002f4 	.word	0x200002f4
 80171d4:	0801da3b 	.word	0x0801da3b
 80171d8:	0801da48 	.word	0x0801da48
 80171dc:	0801da76 	.word	0x0801da76

080171e0 <quorem>:
 80171e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171e4:	6903      	ldr	r3, [r0, #16]
 80171e6:	690c      	ldr	r4, [r1, #16]
 80171e8:	42a3      	cmp	r3, r4
 80171ea:	4607      	mov	r7, r0
 80171ec:	db7e      	blt.n	80172ec <quorem+0x10c>
 80171ee:	3c01      	subs	r4, #1
 80171f0:	f101 0814 	add.w	r8, r1, #20
 80171f4:	f100 0514 	add.w	r5, r0, #20
 80171f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80171fc:	9301      	str	r3, [sp, #4]
 80171fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017202:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017206:	3301      	adds	r3, #1
 8017208:	429a      	cmp	r2, r3
 801720a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801720e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017212:	fbb2 f6f3 	udiv	r6, r2, r3
 8017216:	d331      	bcc.n	801727c <quorem+0x9c>
 8017218:	f04f 0e00 	mov.w	lr, #0
 801721c:	4640      	mov	r0, r8
 801721e:	46ac      	mov	ip, r5
 8017220:	46f2      	mov	sl, lr
 8017222:	f850 2b04 	ldr.w	r2, [r0], #4
 8017226:	b293      	uxth	r3, r2
 8017228:	fb06 e303 	mla	r3, r6, r3, lr
 801722c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017230:	0c1a      	lsrs	r2, r3, #16
 8017232:	b29b      	uxth	r3, r3
 8017234:	ebaa 0303 	sub.w	r3, sl, r3
 8017238:	f8dc a000 	ldr.w	sl, [ip]
 801723c:	fa13 f38a 	uxtah	r3, r3, sl
 8017240:	fb06 220e 	mla	r2, r6, lr, r2
 8017244:	9300      	str	r3, [sp, #0]
 8017246:	9b00      	ldr	r3, [sp, #0]
 8017248:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801724c:	b292      	uxth	r2, r2
 801724e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017252:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017256:	f8bd 3000 	ldrh.w	r3, [sp]
 801725a:	4581      	cmp	r9, r0
 801725c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017260:	f84c 3b04 	str.w	r3, [ip], #4
 8017264:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017268:	d2db      	bcs.n	8017222 <quorem+0x42>
 801726a:	f855 300b 	ldr.w	r3, [r5, fp]
 801726e:	b92b      	cbnz	r3, 801727c <quorem+0x9c>
 8017270:	9b01      	ldr	r3, [sp, #4]
 8017272:	3b04      	subs	r3, #4
 8017274:	429d      	cmp	r5, r3
 8017276:	461a      	mov	r2, r3
 8017278:	d32c      	bcc.n	80172d4 <quorem+0xf4>
 801727a:	613c      	str	r4, [r7, #16]
 801727c:	4638      	mov	r0, r7
 801727e:	f001 fca5 	bl	8018bcc <__mcmp>
 8017282:	2800      	cmp	r0, #0
 8017284:	db22      	blt.n	80172cc <quorem+0xec>
 8017286:	3601      	adds	r6, #1
 8017288:	4629      	mov	r1, r5
 801728a:	2000      	movs	r0, #0
 801728c:	f858 2b04 	ldr.w	r2, [r8], #4
 8017290:	f8d1 c000 	ldr.w	ip, [r1]
 8017294:	b293      	uxth	r3, r2
 8017296:	1ac3      	subs	r3, r0, r3
 8017298:	0c12      	lsrs	r2, r2, #16
 801729a:	fa13 f38c 	uxtah	r3, r3, ip
 801729e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80172a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80172a6:	b29b      	uxth	r3, r3
 80172a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80172ac:	45c1      	cmp	r9, r8
 80172ae:	f841 3b04 	str.w	r3, [r1], #4
 80172b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80172b6:	d2e9      	bcs.n	801728c <quorem+0xac>
 80172b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80172bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80172c0:	b922      	cbnz	r2, 80172cc <quorem+0xec>
 80172c2:	3b04      	subs	r3, #4
 80172c4:	429d      	cmp	r5, r3
 80172c6:	461a      	mov	r2, r3
 80172c8:	d30a      	bcc.n	80172e0 <quorem+0x100>
 80172ca:	613c      	str	r4, [r7, #16]
 80172cc:	4630      	mov	r0, r6
 80172ce:	b003      	add	sp, #12
 80172d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172d4:	6812      	ldr	r2, [r2, #0]
 80172d6:	3b04      	subs	r3, #4
 80172d8:	2a00      	cmp	r2, #0
 80172da:	d1ce      	bne.n	801727a <quorem+0x9a>
 80172dc:	3c01      	subs	r4, #1
 80172de:	e7c9      	b.n	8017274 <quorem+0x94>
 80172e0:	6812      	ldr	r2, [r2, #0]
 80172e2:	3b04      	subs	r3, #4
 80172e4:	2a00      	cmp	r2, #0
 80172e6:	d1f0      	bne.n	80172ca <quorem+0xea>
 80172e8:	3c01      	subs	r4, #1
 80172ea:	e7eb      	b.n	80172c4 <quorem+0xe4>
 80172ec:	2000      	movs	r0, #0
 80172ee:	e7ee      	b.n	80172ce <quorem+0xee>

080172f0 <_dtoa_r>:
 80172f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172f4:	ed2d 8b04 	vpush	{d8-d9}
 80172f8:	69c5      	ldr	r5, [r0, #28]
 80172fa:	b093      	sub	sp, #76	; 0x4c
 80172fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017300:	ec57 6b10 	vmov	r6, r7, d0
 8017304:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017308:	9107      	str	r1, [sp, #28]
 801730a:	4604      	mov	r4, r0
 801730c:	920a      	str	r2, [sp, #40]	; 0x28
 801730e:	930d      	str	r3, [sp, #52]	; 0x34
 8017310:	b975      	cbnz	r5, 8017330 <_dtoa_r+0x40>
 8017312:	2010      	movs	r0, #16
 8017314:	f7fd fe7a 	bl	801500c <malloc>
 8017318:	4602      	mov	r2, r0
 801731a:	61e0      	str	r0, [r4, #28]
 801731c:	b920      	cbnz	r0, 8017328 <_dtoa_r+0x38>
 801731e:	4bae      	ldr	r3, [pc, #696]	; (80175d8 <_dtoa_r+0x2e8>)
 8017320:	21ef      	movs	r1, #239	; 0xef
 8017322:	48ae      	ldr	r0, [pc, #696]	; (80175dc <_dtoa_r+0x2ec>)
 8017324:	f7ff ff3e 	bl	80171a4 <__assert_func>
 8017328:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801732c:	6005      	str	r5, [r0, #0]
 801732e:	60c5      	str	r5, [r0, #12]
 8017330:	69e3      	ldr	r3, [r4, #28]
 8017332:	6819      	ldr	r1, [r3, #0]
 8017334:	b151      	cbz	r1, 801734c <_dtoa_r+0x5c>
 8017336:	685a      	ldr	r2, [r3, #4]
 8017338:	604a      	str	r2, [r1, #4]
 801733a:	2301      	movs	r3, #1
 801733c:	4093      	lsls	r3, r2
 801733e:	608b      	str	r3, [r1, #8]
 8017340:	4620      	mov	r0, r4
 8017342:	f001 f9bd 	bl	80186c0 <_Bfree>
 8017346:	69e3      	ldr	r3, [r4, #28]
 8017348:	2200      	movs	r2, #0
 801734a:	601a      	str	r2, [r3, #0]
 801734c:	1e3b      	subs	r3, r7, #0
 801734e:	bfbb      	ittet	lt
 8017350:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017354:	9303      	strlt	r3, [sp, #12]
 8017356:	2300      	movge	r3, #0
 8017358:	2201      	movlt	r2, #1
 801735a:	bfac      	ite	ge
 801735c:	f8c8 3000 	strge.w	r3, [r8]
 8017360:	f8c8 2000 	strlt.w	r2, [r8]
 8017364:	4b9e      	ldr	r3, [pc, #632]	; (80175e0 <_dtoa_r+0x2f0>)
 8017366:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801736a:	ea33 0308 	bics.w	r3, r3, r8
 801736e:	d11b      	bne.n	80173a8 <_dtoa_r+0xb8>
 8017370:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017372:	f242 730f 	movw	r3, #9999	; 0x270f
 8017376:	6013      	str	r3, [r2, #0]
 8017378:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801737c:	4333      	orrs	r3, r6
 801737e:	f000 8593 	beq.w	8017ea8 <_dtoa_r+0xbb8>
 8017382:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017384:	b963      	cbnz	r3, 80173a0 <_dtoa_r+0xb0>
 8017386:	4b97      	ldr	r3, [pc, #604]	; (80175e4 <_dtoa_r+0x2f4>)
 8017388:	e027      	b.n	80173da <_dtoa_r+0xea>
 801738a:	4b97      	ldr	r3, [pc, #604]	; (80175e8 <_dtoa_r+0x2f8>)
 801738c:	9300      	str	r3, [sp, #0]
 801738e:	3308      	adds	r3, #8
 8017390:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017392:	6013      	str	r3, [r2, #0]
 8017394:	9800      	ldr	r0, [sp, #0]
 8017396:	b013      	add	sp, #76	; 0x4c
 8017398:	ecbd 8b04 	vpop	{d8-d9}
 801739c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173a0:	4b90      	ldr	r3, [pc, #576]	; (80175e4 <_dtoa_r+0x2f4>)
 80173a2:	9300      	str	r3, [sp, #0]
 80173a4:	3303      	adds	r3, #3
 80173a6:	e7f3      	b.n	8017390 <_dtoa_r+0xa0>
 80173a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80173ac:	2200      	movs	r2, #0
 80173ae:	ec51 0b17 	vmov	r0, r1, d7
 80173b2:	eeb0 8a47 	vmov.f32	s16, s14
 80173b6:	eef0 8a67 	vmov.f32	s17, s15
 80173ba:	2300      	movs	r3, #0
 80173bc:	f7e9 fb84 	bl	8000ac8 <__aeabi_dcmpeq>
 80173c0:	4681      	mov	r9, r0
 80173c2:	b160      	cbz	r0, 80173de <_dtoa_r+0xee>
 80173c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80173c6:	2301      	movs	r3, #1
 80173c8:	6013      	str	r3, [r2, #0]
 80173ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	f000 8568 	beq.w	8017ea2 <_dtoa_r+0xbb2>
 80173d2:	4b86      	ldr	r3, [pc, #536]	; (80175ec <_dtoa_r+0x2fc>)
 80173d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80173d6:	6013      	str	r3, [r2, #0]
 80173d8:	3b01      	subs	r3, #1
 80173da:	9300      	str	r3, [sp, #0]
 80173dc:	e7da      	b.n	8017394 <_dtoa_r+0xa4>
 80173de:	aa10      	add	r2, sp, #64	; 0x40
 80173e0:	a911      	add	r1, sp, #68	; 0x44
 80173e2:	4620      	mov	r0, r4
 80173e4:	eeb0 0a48 	vmov.f32	s0, s16
 80173e8:	eef0 0a68 	vmov.f32	s1, s17
 80173ec:	f001 fd04 	bl	8018df8 <__d2b>
 80173f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80173f4:	4682      	mov	sl, r0
 80173f6:	2d00      	cmp	r5, #0
 80173f8:	d07f      	beq.n	80174fa <_dtoa_r+0x20a>
 80173fa:	ee18 3a90 	vmov	r3, s17
 80173fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017402:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8017406:	ec51 0b18 	vmov	r0, r1, d8
 801740a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801740e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017412:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017416:	4619      	mov	r1, r3
 8017418:	2200      	movs	r2, #0
 801741a:	4b75      	ldr	r3, [pc, #468]	; (80175f0 <_dtoa_r+0x300>)
 801741c:	f7e8 ff34 	bl	8000288 <__aeabi_dsub>
 8017420:	a367      	add	r3, pc, #412	; (adr r3, 80175c0 <_dtoa_r+0x2d0>)
 8017422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017426:	f7e9 f8e7 	bl	80005f8 <__aeabi_dmul>
 801742a:	a367      	add	r3, pc, #412	; (adr r3, 80175c8 <_dtoa_r+0x2d8>)
 801742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017430:	f7e8 ff2c 	bl	800028c <__adddf3>
 8017434:	4606      	mov	r6, r0
 8017436:	4628      	mov	r0, r5
 8017438:	460f      	mov	r7, r1
 801743a:	f7e9 f873 	bl	8000524 <__aeabi_i2d>
 801743e:	a364      	add	r3, pc, #400	; (adr r3, 80175d0 <_dtoa_r+0x2e0>)
 8017440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017444:	f7e9 f8d8 	bl	80005f8 <__aeabi_dmul>
 8017448:	4602      	mov	r2, r0
 801744a:	460b      	mov	r3, r1
 801744c:	4630      	mov	r0, r6
 801744e:	4639      	mov	r1, r7
 8017450:	f7e8 ff1c 	bl	800028c <__adddf3>
 8017454:	4606      	mov	r6, r0
 8017456:	460f      	mov	r7, r1
 8017458:	f7e9 fb7e 	bl	8000b58 <__aeabi_d2iz>
 801745c:	2200      	movs	r2, #0
 801745e:	4683      	mov	fp, r0
 8017460:	2300      	movs	r3, #0
 8017462:	4630      	mov	r0, r6
 8017464:	4639      	mov	r1, r7
 8017466:	f7e9 fb39 	bl	8000adc <__aeabi_dcmplt>
 801746a:	b148      	cbz	r0, 8017480 <_dtoa_r+0x190>
 801746c:	4658      	mov	r0, fp
 801746e:	f7e9 f859 	bl	8000524 <__aeabi_i2d>
 8017472:	4632      	mov	r2, r6
 8017474:	463b      	mov	r3, r7
 8017476:	f7e9 fb27 	bl	8000ac8 <__aeabi_dcmpeq>
 801747a:	b908      	cbnz	r0, 8017480 <_dtoa_r+0x190>
 801747c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017480:	f1bb 0f16 	cmp.w	fp, #22
 8017484:	d857      	bhi.n	8017536 <_dtoa_r+0x246>
 8017486:	4b5b      	ldr	r3, [pc, #364]	; (80175f4 <_dtoa_r+0x304>)
 8017488:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017490:	ec51 0b18 	vmov	r0, r1, d8
 8017494:	f7e9 fb22 	bl	8000adc <__aeabi_dcmplt>
 8017498:	2800      	cmp	r0, #0
 801749a:	d04e      	beq.n	801753a <_dtoa_r+0x24a>
 801749c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80174a0:	2300      	movs	r3, #0
 80174a2:	930c      	str	r3, [sp, #48]	; 0x30
 80174a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80174a6:	1b5b      	subs	r3, r3, r5
 80174a8:	1e5a      	subs	r2, r3, #1
 80174aa:	bf45      	ittet	mi
 80174ac:	f1c3 0301 	rsbmi	r3, r3, #1
 80174b0:	9305      	strmi	r3, [sp, #20]
 80174b2:	2300      	movpl	r3, #0
 80174b4:	2300      	movmi	r3, #0
 80174b6:	9206      	str	r2, [sp, #24]
 80174b8:	bf54      	ite	pl
 80174ba:	9305      	strpl	r3, [sp, #20]
 80174bc:	9306      	strmi	r3, [sp, #24]
 80174be:	f1bb 0f00 	cmp.w	fp, #0
 80174c2:	db3c      	blt.n	801753e <_dtoa_r+0x24e>
 80174c4:	9b06      	ldr	r3, [sp, #24]
 80174c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80174ca:	445b      	add	r3, fp
 80174cc:	9306      	str	r3, [sp, #24]
 80174ce:	2300      	movs	r3, #0
 80174d0:	9308      	str	r3, [sp, #32]
 80174d2:	9b07      	ldr	r3, [sp, #28]
 80174d4:	2b09      	cmp	r3, #9
 80174d6:	d868      	bhi.n	80175aa <_dtoa_r+0x2ba>
 80174d8:	2b05      	cmp	r3, #5
 80174da:	bfc4      	itt	gt
 80174dc:	3b04      	subgt	r3, #4
 80174de:	9307      	strgt	r3, [sp, #28]
 80174e0:	9b07      	ldr	r3, [sp, #28]
 80174e2:	f1a3 0302 	sub.w	r3, r3, #2
 80174e6:	bfcc      	ite	gt
 80174e8:	2500      	movgt	r5, #0
 80174ea:	2501      	movle	r5, #1
 80174ec:	2b03      	cmp	r3, #3
 80174ee:	f200 8085 	bhi.w	80175fc <_dtoa_r+0x30c>
 80174f2:	e8df f003 	tbb	[pc, r3]
 80174f6:	3b2e      	.short	0x3b2e
 80174f8:	5839      	.short	0x5839
 80174fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80174fe:	441d      	add	r5, r3
 8017500:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017504:	2b20      	cmp	r3, #32
 8017506:	bfc1      	itttt	gt
 8017508:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801750c:	fa08 f803 	lslgt.w	r8, r8, r3
 8017510:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8017514:	fa26 f303 	lsrgt.w	r3, r6, r3
 8017518:	bfd6      	itet	le
 801751a:	f1c3 0320 	rsble	r3, r3, #32
 801751e:	ea48 0003 	orrgt.w	r0, r8, r3
 8017522:	fa06 f003 	lslle.w	r0, r6, r3
 8017526:	f7e8 ffed 	bl	8000504 <__aeabi_ui2d>
 801752a:	2201      	movs	r2, #1
 801752c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8017530:	3d01      	subs	r5, #1
 8017532:	920e      	str	r2, [sp, #56]	; 0x38
 8017534:	e76f      	b.n	8017416 <_dtoa_r+0x126>
 8017536:	2301      	movs	r3, #1
 8017538:	e7b3      	b.n	80174a2 <_dtoa_r+0x1b2>
 801753a:	900c      	str	r0, [sp, #48]	; 0x30
 801753c:	e7b2      	b.n	80174a4 <_dtoa_r+0x1b4>
 801753e:	9b05      	ldr	r3, [sp, #20]
 8017540:	eba3 030b 	sub.w	r3, r3, fp
 8017544:	9305      	str	r3, [sp, #20]
 8017546:	f1cb 0300 	rsb	r3, fp, #0
 801754a:	9308      	str	r3, [sp, #32]
 801754c:	2300      	movs	r3, #0
 801754e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017550:	e7bf      	b.n	80174d2 <_dtoa_r+0x1e2>
 8017552:	2300      	movs	r3, #0
 8017554:	9309      	str	r3, [sp, #36]	; 0x24
 8017556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017558:	2b00      	cmp	r3, #0
 801755a:	dc52      	bgt.n	8017602 <_dtoa_r+0x312>
 801755c:	2301      	movs	r3, #1
 801755e:	9301      	str	r3, [sp, #4]
 8017560:	9304      	str	r3, [sp, #16]
 8017562:	461a      	mov	r2, r3
 8017564:	920a      	str	r2, [sp, #40]	; 0x28
 8017566:	e00b      	b.n	8017580 <_dtoa_r+0x290>
 8017568:	2301      	movs	r3, #1
 801756a:	e7f3      	b.n	8017554 <_dtoa_r+0x264>
 801756c:	2300      	movs	r3, #0
 801756e:	9309      	str	r3, [sp, #36]	; 0x24
 8017570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017572:	445b      	add	r3, fp
 8017574:	9301      	str	r3, [sp, #4]
 8017576:	3301      	adds	r3, #1
 8017578:	2b01      	cmp	r3, #1
 801757a:	9304      	str	r3, [sp, #16]
 801757c:	bfb8      	it	lt
 801757e:	2301      	movlt	r3, #1
 8017580:	69e0      	ldr	r0, [r4, #28]
 8017582:	2100      	movs	r1, #0
 8017584:	2204      	movs	r2, #4
 8017586:	f102 0614 	add.w	r6, r2, #20
 801758a:	429e      	cmp	r6, r3
 801758c:	d93d      	bls.n	801760a <_dtoa_r+0x31a>
 801758e:	6041      	str	r1, [r0, #4]
 8017590:	4620      	mov	r0, r4
 8017592:	f001 f855 	bl	8018640 <_Balloc>
 8017596:	9000      	str	r0, [sp, #0]
 8017598:	2800      	cmp	r0, #0
 801759a:	d139      	bne.n	8017610 <_dtoa_r+0x320>
 801759c:	4b16      	ldr	r3, [pc, #88]	; (80175f8 <_dtoa_r+0x308>)
 801759e:	4602      	mov	r2, r0
 80175a0:	f240 11af 	movw	r1, #431	; 0x1af
 80175a4:	e6bd      	b.n	8017322 <_dtoa_r+0x32>
 80175a6:	2301      	movs	r3, #1
 80175a8:	e7e1      	b.n	801756e <_dtoa_r+0x27e>
 80175aa:	2501      	movs	r5, #1
 80175ac:	2300      	movs	r3, #0
 80175ae:	9307      	str	r3, [sp, #28]
 80175b0:	9509      	str	r5, [sp, #36]	; 0x24
 80175b2:	f04f 33ff 	mov.w	r3, #4294967295
 80175b6:	9301      	str	r3, [sp, #4]
 80175b8:	9304      	str	r3, [sp, #16]
 80175ba:	2200      	movs	r2, #0
 80175bc:	2312      	movs	r3, #18
 80175be:	e7d1      	b.n	8017564 <_dtoa_r+0x274>
 80175c0:	636f4361 	.word	0x636f4361
 80175c4:	3fd287a7 	.word	0x3fd287a7
 80175c8:	8b60c8b3 	.word	0x8b60c8b3
 80175cc:	3fc68a28 	.word	0x3fc68a28
 80175d0:	509f79fb 	.word	0x509f79fb
 80175d4:	3fd34413 	.word	0x3fd34413
 80175d8:	0801d9c2 	.word	0x0801d9c2
 80175dc:	0801da84 	.word	0x0801da84
 80175e0:	7ff00000 	.word	0x7ff00000
 80175e4:	0801da80 	.word	0x0801da80
 80175e8:	0801da77 	.word	0x0801da77
 80175ec:	0801d99a 	.word	0x0801d99a
 80175f0:	3ff80000 	.word	0x3ff80000
 80175f4:	0801dbd0 	.word	0x0801dbd0
 80175f8:	0801dadc 	.word	0x0801dadc
 80175fc:	2301      	movs	r3, #1
 80175fe:	9309      	str	r3, [sp, #36]	; 0x24
 8017600:	e7d7      	b.n	80175b2 <_dtoa_r+0x2c2>
 8017602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017604:	9301      	str	r3, [sp, #4]
 8017606:	9304      	str	r3, [sp, #16]
 8017608:	e7ba      	b.n	8017580 <_dtoa_r+0x290>
 801760a:	3101      	adds	r1, #1
 801760c:	0052      	lsls	r2, r2, #1
 801760e:	e7ba      	b.n	8017586 <_dtoa_r+0x296>
 8017610:	69e3      	ldr	r3, [r4, #28]
 8017612:	9a00      	ldr	r2, [sp, #0]
 8017614:	601a      	str	r2, [r3, #0]
 8017616:	9b04      	ldr	r3, [sp, #16]
 8017618:	2b0e      	cmp	r3, #14
 801761a:	f200 80a8 	bhi.w	801776e <_dtoa_r+0x47e>
 801761e:	2d00      	cmp	r5, #0
 8017620:	f000 80a5 	beq.w	801776e <_dtoa_r+0x47e>
 8017624:	f1bb 0f00 	cmp.w	fp, #0
 8017628:	dd38      	ble.n	801769c <_dtoa_r+0x3ac>
 801762a:	4bc0      	ldr	r3, [pc, #768]	; (801792c <_dtoa_r+0x63c>)
 801762c:	f00b 020f 	and.w	r2, fp, #15
 8017630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017634:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017638:	e9d3 6700 	ldrd	r6, r7, [r3]
 801763c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8017640:	d019      	beq.n	8017676 <_dtoa_r+0x386>
 8017642:	4bbb      	ldr	r3, [pc, #748]	; (8017930 <_dtoa_r+0x640>)
 8017644:	ec51 0b18 	vmov	r0, r1, d8
 8017648:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801764c:	f7e9 f8fe 	bl	800084c <__aeabi_ddiv>
 8017650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017654:	f008 080f 	and.w	r8, r8, #15
 8017658:	2503      	movs	r5, #3
 801765a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8017930 <_dtoa_r+0x640>
 801765e:	f1b8 0f00 	cmp.w	r8, #0
 8017662:	d10a      	bne.n	801767a <_dtoa_r+0x38a>
 8017664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017668:	4632      	mov	r2, r6
 801766a:	463b      	mov	r3, r7
 801766c:	f7e9 f8ee 	bl	800084c <__aeabi_ddiv>
 8017670:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017674:	e02b      	b.n	80176ce <_dtoa_r+0x3de>
 8017676:	2502      	movs	r5, #2
 8017678:	e7ef      	b.n	801765a <_dtoa_r+0x36a>
 801767a:	f018 0f01 	tst.w	r8, #1
 801767e:	d008      	beq.n	8017692 <_dtoa_r+0x3a2>
 8017680:	4630      	mov	r0, r6
 8017682:	4639      	mov	r1, r7
 8017684:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017688:	f7e8 ffb6 	bl	80005f8 <__aeabi_dmul>
 801768c:	3501      	adds	r5, #1
 801768e:	4606      	mov	r6, r0
 8017690:	460f      	mov	r7, r1
 8017692:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017696:	f109 0908 	add.w	r9, r9, #8
 801769a:	e7e0      	b.n	801765e <_dtoa_r+0x36e>
 801769c:	f000 809f 	beq.w	80177de <_dtoa_r+0x4ee>
 80176a0:	f1cb 0600 	rsb	r6, fp, #0
 80176a4:	4ba1      	ldr	r3, [pc, #644]	; (801792c <_dtoa_r+0x63c>)
 80176a6:	4fa2      	ldr	r7, [pc, #648]	; (8017930 <_dtoa_r+0x640>)
 80176a8:	f006 020f 	and.w	r2, r6, #15
 80176ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80176b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176b4:	ec51 0b18 	vmov	r0, r1, d8
 80176b8:	f7e8 ff9e 	bl	80005f8 <__aeabi_dmul>
 80176bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80176c0:	1136      	asrs	r6, r6, #4
 80176c2:	2300      	movs	r3, #0
 80176c4:	2502      	movs	r5, #2
 80176c6:	2e00      	cmp	r6, #0
 80176c8:	d17e      	bne.n	80177c8 <_dtoa_r+0x4d8>
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d1d0      	bne.n	8017670 <_dtoa_r+0x380>
 80176ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	f000 8084 	beq.w	80177e2 <_dtoa_r+0x4f2>
 80176da:	4b96      	ldr	r3, [pc, #600]	; (8017934 <_dtoa_r+0x644>)
 80176dc:	2200      	movs	r2, #0
 80176de:	4640      	mov	r0, r8
 80176e0:	4649      	mov	r1, r9
 80176e2:	f7e9 f9fb 	bl	8000adc <__aeabi_dcmplt>
 80176e6:	2800      	cmp	r0, #0
 80176e8:	d07b      	beq.n	80177e2 <_dtoa_r+0x4f2>
 80176ea:	9b04      	ldr	r3, [sp, #16]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d078      	beq.n	80177e2 <_dtoa_r+0x4f2>
 80176f0:	9b01      	ldr	r3, [sp, #4]
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	dd39      	ble.n	801776a <_dtoa_r+0x47a>
 80176f6:	4b90      	ldr	r3, [pc, #576]	; (8017938 <_dtoa_r+0x648>)
 80176f8:	2200      	movs	r2, #0
 80176fa:	4640      	mov	r0, r8
 80176fc:	4649      	mov	r1, r9
 80176fe:	f7e8 ff7b 	bl	80005f8 <__aeabi_dmul>
 8017702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017706:	9e01      	ldr	r6, [sp, #4]
 8017708:	f10b 37ff 	add.w	r7, fp, #4294967295
 801770c:	3501      	adds	r5, #1
 801770e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017712:	4628      	mov	r0, r5
 8017714:	f7e8 ff06 	bl	8000524 <__aeabi_i2d>
 8017718:	4642      	mov	r2, r8
 801771a:	464b      	mov	r3, r9
 801771c:	f7e8 ff6c 	bl	80005f8 <__aeabi_dmul>
 8017720:	4b86      	ldr	r3, [pc, #536]	; (801793c <_dtoa_r+0x64c>)
 8017722:	2200      	movs	r2, #0
 8017724:	f7e8 fdb2 	bl	800028c <__adddf3>
 8017728:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801772c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017730:	9303      	str	r3, [sp, #12]
 8017732:	2e00      	cmp	r6, #0
 8017734:	d158      	bne.n	80177e8 <_dtoa_r+0x4f8>
 8017736:	4b82      	ldr	r3, [pc, #520]	; (8017940 <_dtoa_r+0x650>)
 8017738:	2200      	movs	r2, #0
 801773a:	4640      	mov	r0, r8
 801773c:	4649      	mov	r1, r9
 801773e:	f7e8 fda3 	bl	8000288 <__aeabi_dsub>
 8017742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017746:	4680      	mov	r8, r0
 8017748:	4689      	mov	r9, r1
 801774a:	f7e9 f9e5 	bl	8000b18 <__aeabi_dcmpgt>
 801774e:	2800      	cmp	r0, #0
 8017750:	f040 8296 	bne.w	8017c80 <_dtoa_r+0x990>
 8017754:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017758:	4640      	mov	r0, r8
 801775a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801775e:	4649      	mov	r1, r9
 8017760:	f7e9 f9bc 	bl	8000adc <__aeabi_dcmplt>
 8017764:	2800      	cmp	r0, #0
 8017766:	f040 8289 	bne.w	8017c7c <_dtoa_r+0x98c>
 801776a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801776e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017770:	2b00      	cmp	r3, #0
 8017772:	f2c0 814e 	blt.w	8017a12 <_dtoa_r+0x722>
 8017776:	f1bb 0f0e 	cmp.w	fp, #14
 801777a:	f300 814a 	bgt.w	8017a12 <_dtoa_r+0x722>
 801777e:	4b6b      	ldr	r3, [pc, #428]	; (801792c <_dtoa_r+0x63c>)
 8017780:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017784:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801778a:	2b00      	cmp	r3, #0
 801778c:	f280 80dc 	bge.w	8017948 <_dtoa_r+0x658>
 8017790:	9b04      	ldr	r3, [sp, #16]
 8017792:	2b00      	cmp	r3, #0
 8017794:	f300 80d8 	bgt.w	8017948 <_dtoa_r+0x658>
 8017798:	f040 826f 	bne.w	8017c7a <_dtoa_r+0x98a>
 801779c:	4b68      	ldr	r3, [pc, #416]	; (8017940 <_dtoa_r+0x650>)
 801779e:	2200      	movs	r2, #0
 80177a0:	4640      	mov	r0, r8
 80177a2:	4649      	mov	r1, r9
 80177a4:	f7e8 ff28 	bl	80005f8 <__aeabi_dmul>
 80177a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80177ac:	f7e9 f9aa 	bl	8000b04 <__aeabi_dcmpge>
 80177b0:	9e04      	ldr	r6, [sp, #16]
 80177b2:	4637      	mov	r7, r6
 80177b4:	2800      	cmp	r0, #0
 80177b6:	f040 8245 	bne.w	8017c44 <_dtoa_r+0x954>
 80177ba:	9d00      	ldr	r5, [sp, #0]
 80177bc:	2331      	movs	r3, #49	; 0x31
 80177be:	f805 3b01 	strb.w	r3, [r5], #1
 80177c2:	f10b 0b01 	add.w	fp, fp, #1
 80177c6:	e241      	b.n	8017c4c <_dtoa_r+0x95c>
 80177c8:	07f2      	lsls	r2, r6, #31
 80177ca:	d505      	bpl.n	80177d8 <_dtoa_r+0x4e8>
 80177cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80177d0:	f7e8 ff12 	bl	80005f8 <__aeabi_dmul>
 80177d4:	3501      	adds	r5, #1
 80177d6:	2301      	movs	r3, #1
 80177d8:	1076      	asrs	r6, r6, #1
 80177da:	3708      	adds	r7, #8
 80177dc:	e773      	b.n	80176c6 <_dtoa_r+0x3d6>
 80177de:	2502      	movs	r5, #2
 80177e0:	e775      	b.n	80176ce <_dtoa_r+0x3de>
 80177e2:	9e04      	ldr	r6, [sp, #16]
 80177e4:	465f      	mov	r7, fp
 80177e6:	e792      	b.n	801770e <_dtoa_r+0x41e>
 80177e8:	9900      	ldr	r1, [sp, #0]
 80177ea:	4b50      	ldr	r3, [pc, #320]	; (801792c <_dtoa_r+0x63c>)
 80177ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80177f0:	4431      	add	r1, r6
 80177f2:	9102      	str	r1, [sp, #8]
 80177f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80177f6:	eeb0 9a47 	vmov.f32	s18, s14
 80177fa:	eef0 9a67 	vmov.f32	s19, s15
 80177fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017802:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017806:	2900      	cmp	r1, #0
 8017808:	d044      	beq.n	8017894 <_dtoa_r+0x5a4>
 801780a:	494e      	ldr	r1, [pc, #312]	; (8017944 <_dtoa_r+0x654>)
 801780c:	2000      	movs	r0, #0
 801780e:	f7e9 f81d 	bl	800084c <__aeabi_ddiv>
 8017812:	ec53 2b19 	vmov	r2, r3, d9
 8017816:	f7e8 fd37 	bl	8000288 <__aeabi_dsub>
 801781a:	9d00      	ldr	r5, [sp, #0]
 801781c:	ec41 0b19 	vmov	d9, r0, r1
 8017820:	4649      	mov	r1, r9
 8017822:	4640      	mov	r0, r8
 8017824:	f7e9 f998 	bl	8000b58 <__aeabi_d2iz>
 8017828:	4606      	mov	r6, r0
 801782a:	f7e8 fe7b 	bl	8000524 <__aeabi_i2d>
 801782e:	4602      	mov	r2, r0
 8017830:	460b      	mov	r3, r1
 8017832:	4640      	mov	r0, r8
 8017834:	4649      	mov	r1, r9
 8017836:	f7e8 fd27 	bl	8000288 <__aeabi_dsub>
 801783a:	3630      	adds	r6, #48	; 0x30
 801783c:	f805 6b01 	strb.w	r6, [r5], #1
 8017840:	ec53 2b19 	vmov	r2, r3, d9
 8017844:	4680      	mov	r8, r0
 8017846:	4689      	mov	r9, r1
 8017848:	f7e9 f948 	bl	8000adc <__aeabi_dcmplt>
 801784c:	2800      	cmp	r0, #0
 801784e:	d164      	bne.n	801791a <_dtoa_r+0x62a>
 8017850:	4642      	mov	r2, r8
 8017852:	464b      	mov	r3, r9
 8017854:	4937      	ldr	r1, [pc, #220]	; (8017934 <_dtoa_r+0x644>)
 8017856:	2000      	movs	r0, #0
 8017858:	f7e8 fd16 	bl	8000288 <__aeabi_dsub>
 801785c:	ec53 2b19 	vmov	r2, r3, d9
 8017860:	f7e9 f93c 	bl	8000adc <__aeabi_dcmplt>
 8017864:	2800      	cmp	r0, #0
 8017866:	f040 80b6 	bne.w	80179d6 <_dtoa_r+0x6e6>
 801786a:	9b02      	ldr	r3, [sp, #8]
 801786c:	429d      	cmp	r5, r3
 801786e:	f43f af7c 	beq.w	801776a <_dtoa_r+0x47a>
 8017872:	4b31      	ldr	r3, [pc, #196]	; (8017938 <_dtoa_r+0x648>)
 8017874:	ec51 0b19 	vmov	r0, r1, d9
 8017878:	2200      	movs	r2, #0
 801787a:	f7e8 febd 	bl	80005f8 <__aeabi_dmul>
 801787e:	4b2e      	ldr	r3, [pc, #184]	; (8017938 <_dtoa_r+0x648>)
 8017880:	ec41 0b19 	vmov	d9, r0, r1
 8017884:	2200      	movs	r2, #0
 8017886:	4640      	mov	r0, r8
 8017888:	4649      	mov	r1, r9
 801788a:	f7e8 feb5 	bl	80005f8 <__aeabi_dmul>
 801788e:	4680      	mov	r8, r0
 8017890:	4689      	mov	r9, r1
 8017892:	e7c5      	b.n	8017820 <_dtoa_r+0x530>
 8017894:	ec51 0b17 	vmov	r0, r1, d7
 8017898:	f7e8 feae 	bl	80005f8 <__aeabi_dmul>
 801789c:	9b02      	ldr	r3, [sp, #8]
 801789e:	9d00      	ldr	r5, [sp, #0]
 80178a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80178a2:	ec41 0b19 	vmov	d9, r0, r1
 80178a6:	4649      	mov	r1, r9
 80178a8:	4640      	mov	r0, r8
 80178aa:	f7e9 f955 	bl	8000b58 <__aeabi_d2iz>
 80178ae:	4606      	mov	r6, r0
 80178b0:	f7e8 fe38 	bl	8000524 <__aeabi_i2d>
 80178b4:	3630      	adds	r6, #48	; 0x30
 80178b6:	4602      	mov	r2, r0
 80178b8:	460b      	mov	r3, r1
 80178ba:	4640      	mov	r0, r8
 80178bc:	4649      	mov	r1, r9
 80178be:	f7e8 fce3 	bl	8000288 <__aeabi_dsub>
 80178c2:	f805 6b01 	strb.w	r6, [r5], #1
 80178c6:	9b02      	ldr	r3, [sp, #8]
 80178c8:	429d      	cmp	r5, r3
 80178ca:	4680      	mov	r8, r0
 80178cc:	4689      	mov	r9, r1
 80178ce:	f04f 0200 	mov.w	r2, #0
 80178d2:	d124      	bne.n	801791e <_dtoa_r+0x62e>
 80178d4:	4b1b      	ldr	r3, [pc, #108]	; (8017944 <_dtoa_r+0x654>)
 80178d6:	ec51 0b19 	vmov	r0, r1, d9
 80178da:	f7e8 fcd7 	bl	800028c <__adddf3>
 80178de:	4602      	mov	r2, r0
 80178e0:	460b      	mov	r3, r1
 80178e2:	4640      	mov	r0, r8
 80178e4:	4649      	mov	r1, r9
 80178e6:	f7e9 f917 	bl	8000b18 <__aeabi_dcmpgt>
 80178ea:	2800      	cmp	r0, #0
 80178ec:	d173      	bne.n	80179d6 <_dtoa_r+0x6e6>
 80178ee:	ec53 2b19 	vmov	r2, r3, d9
 80178f2:	4914      	ldr	r1, [pc, #80]	; (8017944 <_dtoa_r+0x654>)
 80178f4:	2000      	movs	r0, #0
 80178f6:	f7e8 fcc7 	bl	8000288 <__aeabi_dsub>
 80178fa:	4602      	mov	r2, r0
 80178fc:	460b      	mov	r3, r1
 80178fe:	4640      	mov	r0, r8
 8017900:	4649      	mov	r1, r9
 8017902:	f7e9 f8eb 	bl	8000adc <__aeabi_dcmplt>
 8017906:	2800      	cmp	r0, #0
 8017908:	f43f af2f 	beq.w	801776a <_dtoa_r+0x47a>
 801790c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801790e:	1e6b      	subs	r3, r5, #1
 8017910:	930f      	str	r3, [sp, #60]	; 0x3c
 8017912:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017916:	2b30      	cmp	r3, #48	; 0x30
 8017918:	d0f8      	beq.n	801790c <_dtoa_r+0x61c>
 801791a:	46bb      	mov	fp, r7
 801791c:	e04a      	b.n	80179b4 <_dtoa_r+0x6c4>
 801791e:	4b06      	ldr	r3, [pc, #24]	; (8017938 <_dtoa_r+0x648>)
 8017920:	f7e8 fe6a 	bl	80005f8 <__aeabi_dmul>
 8017924:	4680      	mov	r8, r0
 8017926:	4689      	mov	r9, r1
 8017928:	e7bd      	b.n	80178a6 <_dtoa_r+0x5b6>
 801792a:	bf00      	nop
 801792c:	0801dbd0 	.word	0x0801dbd0
 8017930:	0801dba8 	.word	0x0801dba8
 8017934:	3ff00000 	.word	0x3ff00000
 8017938:	40240000 	.word	0x40240000
 801793c:	401c0000 	.word	0x401c0000
 8017940:	40140000 	.word	0x40140000
 8017944:	3fe00000 	.word	0x3fe00000
 8017948:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801794c:	9d00      	ldr	r5, [sp, #0]
 801794e:	4642      	mov	r2, r8
 8017950:	464b      	mov	r3, r9
 8017952:	4630      	mov	r0, r6
 8017954:	4639      	mov	r1, r7
 8017956:	f7e8 ff79 	bl	800084c <__aeabi_ddiv>
 801795a:	f7e9 f8fd 	bl	8000b58 <__aeabi_d2iz>
 801795e:	9001      	str	r0, [sp, #4]
 8017960:	f7e8 fde0 	bl	8000524 <__aeabi_i2d>
 8017964:	4642      	mov	r2, r8
 8017966:	464b      	mov	r3, r9
 8017968:	f7e8 fe46 	bl	80005f8 <__aeabi_dmul>
 801796c:	4602      	mov	r2, r0
 801796e:	460b      	mov	r3, r1
 8017970:	4630      	mov	r0, r6
 8017972:	4639      	mov	r1, r7
 8017974:	f7e8 fc88 	bl	8000288 <__aeabi_dsub>
 8017978:	9e01      	ldr	r6, [sp, #4]
 801797a:	9f04      	ldr	r7, [sp, #16]
 801797c:	3630      	adds	r6, #48	; 0x30
 801797e:	f805 6b01 	strb.w	r6, [r5], #1
 8017982:	9e00      	ldr	r6, [sp, #0]
 8017984:	1bae      	subs	r6, r5, r6
 8017986:	42b7      	cmp	r7, r6
 8017988:	4602      	mov	r2, r0
 801798a:	460b      	mov	r3, r1
 801798c:	d134      	bne.n	80179f8 <_dtoa_r+0x708>
 801798e:	f7e8 fc7d 	bl	800028c <__adddf3>
 8017992:	4642      	mov	r2, r8
 8017994:	464b      	mov	r3, r9
 8017996:	4606      	mov	r6, r0
 8017998:	460f      	mov	r7, r1
 801799a:	f7e9 f8bd 	bl	8000b18 <__aeabi_dcmpgt>
 801799e:	b9c8      	cbnz	r0, 80179d4 <_dtoa_r+0x6e4>
 80179a0:	4642      	mov	r2, r8
 80179a2:	464b      	mov	r3, r9
 80179a4:	4630      	mov	r0, r6
 80179a6:	4639      	mov	r1, r7
 80179a8:	f7e9 f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 80179ac:	b110      	cbz	r0, 80179b4 <_dtoa_r+0x6c4>
 80179ae:	9b01      	ldr	r3, [sp, #4]
 80179b0:	07db      	lsls	r3, r3, #31
 80179b2:	d40f      	bmi.n	80179d4 <_dtoa_r+0x6e4>
 80179b4:	4651      	mov	r1, sl
 80179b6:	4620      	mov	r0, r4
 80179b8:	f000 fe82 	bl	80186c0 <_Bfree>
 80179bc:	2300      	movs	r3, #0
 80179be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80179c0:	702b      	strb	r3, [r5, #0]
 80179c2:	f10b 0301 	add.w	r3, fp, #1
 80179c6:	6013      	str	r3, [r2, #0]
 80179c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	f43f ace2 	beq.w	8017394 <_dtoa_r+0xa4>
 80179d0:	601d      	str	r5, [r3, #0]
 80179d2:	e4df      	b.n	8017394 <_dtoa_r+0xa4>
 80179d4:	465f      	mov	r7, fp
 80179d6:	462b      	mov	r3, r5
 80179d8:	461d      	mov	r5, r3
 80179da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80179de:	2a39      	cmp	r2, #57	; 0x39
 80179e0:	d106      	bne.n	80179f0 <_dtoa_r+0x700>
 80179e2:	9a00      	ldr	r2, [sp, #0]
 80179e4:	429a      	cmp	r2, r3
 80179e6:	d1f7      	bne.n	80179d8 <_dtoa_r+0x6e8>
 80179e8:	9900      	ldr	r1, [sp, #0]
 80179ea:	2230      	movs	r2, #48	; 0x30
 80179ec:	3701      	adds	r7, #1
 80179ee:	700a      	strb	r2, [r1, #0]
 80179f0:	781a      	ldrb	r2, [r3, #0]
 80179f2:	3201      	adds	r2, #1
 80179f4:	701a      	strb	r2, [r3, #0]
 80179f6:	e790      	b.n	801791a <_dtoa_r+0x62a>
 80179f8:	4ba3      	ldr	r3, [pc, #652]	; (8017c88 <_dtoa_r+0x998>)
 80179fa:	2200      	movs	r2, #0
 80179fc:	f7e8 fdfc 	bl	80005f8 <__aeabi_dmul>
 8017a00:	2200      	movs	r2, #0
 8017a02:	2300      	movs	r3, #0
 8017a04:	4606      	mov	r6, r0
 8017a06:	460f      	mov	r7, r1
 8017a08:	f7e9 f85e 	bl	8000ac8 <__aeabi_dcmpeq>
 8017a0c:	2800      	cmp	r0, #0
 8017a0e:	d09e      	beq.n	801794e <_dtoa_r+0x65e>
 8017a10:	e7d0      	b.n	80179b4 <_dtoa_r+0x6c4>
 8017a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a14:	2a00      	cmp	r2, #0
 8017a16:	f000 80ca 	beq.w	8017bae <_dtoa_r+0x8be>
 8017a1a:	9a07      	ldr	r2, [sp, #28]
 8017a1c:	2a01      	cmp	r2, #1
 8017a1e:	f300 80ad 	bgt.w	8017b7c <_dtoa_r+0x88c>
 8017a22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017a24:	2a00      	cmp	r2, #0
 8017a26:	f000 80a5 	beq.w	8017b74 <_dtoa_r+0x884>
 8017a2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017a2e:	9e08      	ldr	r6, [sp, #32]
 8017a30:	9d05      	ldr	r5, [sp, #20]
 8017a32:	9a05      	ldr	r2, [sp, #20]
 8017a34:	441a      	add	r2, r3
 8017a36:	9205      	str	r2, [sp, #20]
 8017a38:	9a06      	ldr	r2, [sp, #24]
 8017a3a:	2101      	movs	r1, #1
 8017a3c:	441a      	add	r2, r3
 8017a3e:	4620      	mov	r0, r4
 8017a40:	9206      	str	r2, [sp, #24]
 8017a42:	f000 ff3d 	bl	80188c0 <__i2b>
 8017a46:	4607      	mov	r7, r0
 8017a48:	b165      	cbz	r5, 8017a64 <_dtoa_r+0x774>
 8017a4a:	9b06      	ldr	r3, [sp, #24]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	dd09      	ble.n	8017a64 <_dtoa_r+0x774>
 8017a50:	42ab      	cmp	r3, r5
 8017a52:	9a05      	ldr	r2, [sp, #20]
 8017a54:	bfa8      	it	ge
 8017a56:	462b      	movge	r3, r5
 8017a58:	1ad2      	subs	r2, r2, r3
 8017a5a:	9205      	str	r2, [sp, #20]
 8017a5c:	9a06      	ldr	r2, [sp, #24]
 8017a5e:	1aed      	subs	r5, r5, r3
 8017a60:	1ad3      	subs	r3, r2, r3
 8017a62:	9306      	str	r3, [sp, #24]
 8017a64:	9b08      	ldr	r3, [sp, #32]
 8017a66:	b1f3      	cbz	r3, 8017aa6 <_dtoa_r+0x7b6>
 8017a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	f000 80a3 	beq.w	8017bb6 <_dtoa_r+0x8c6>
 8017a70:	2e00      	cmp	r6, #0
 8017a72:	dd10      	ble.n	8017a96 <_dtoa_r+0x7a6>
 8017a74:	4639      	mov	r1, r7
 8017a76:	4632      	mov	r2, r6
 8017a78:	4620      	mov	r0, r4
 8017a7a:	f000 ffe1 	bl	8018a40 <__pow5mult>
 8017a7e:	4652      	mov	r2, sl
 8017a80:	4601      	mov	r1, r0
 8017a82:	4607      	mov	r7, r0
 8017a84:	4620      	mov	r0, r4
 8017a86:	f000 ff31 	bl	80188ec <__multiply>
 8017a8a:	4651      	mov	r1, sl
 8017a8c:	4680      	mov	r8, r0
 8017a8e:	4620      	mov	r0, r4
 8017a90:	f000 fe16 	bl	80186c0 <_Bfree>
 8017a94:	46c2      	mov	sl, r8
 8017a96:	9b08      	ldr	r3, [sp, #32]
 8017a98:	1b9a      	subs	r2, r3, r6
 8017a9a:	d004      	beq.n	8017aa6 <_dtoa_r+0x7b6>
 8017a9c:	4651      	mov	r1, sl
 8017a9e:	4620      	mov	r0, r4
 8017aa0:	f000 ffce 	bl	8018a40 <__pow5mult>
 8017aa4:	4682      	mov	sl, r0
 8017aa6:	2101      	movs	r1, #1
 8017aa8:	4620      	mov	r0, r4
 8017aaa:	f000 ff09 	bl	80188c0 <__i2b>
 8017aae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	4606      	mov	r6, r0
 8017ab4:	f340 8081 	ble.w	8017bba <_dtoa_r+0x8ca>
 8017ab8:	461a      	mov	r2, r3
 8017aba:	4601      	mov	r1, r0
 8017abc:	4620      	mov	r0, r4
 8017abe:	f000 ffbf 	bl	8018a40 <__pow5mult>
 8017ac2:	9b07      	ldr	r3, [sp, #28]
 8017ac4:	2b01      	cmp	r3, #1
 8017ac6:	4606      	mov	r6, r0
 8017ac8:	dd7a      	ble.n	8017bc0 <_dtoa_r+0x8d0>
 8017aca:	f04f 0800 	mov.w	r8, #0
 8017ace:	6933      	ldr	r3, [r6, #16]
 8017ad0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017ad4:	6918      	ldr	r0, [r3, #16]
 8017ad6:	f000 fea5 	bl	8018824 <__hi0bits>
 8017ada:	f1c0 0020 	rsb	r0, r0, #32
 8017ade:	9b06      	ldr	r3, [sp, #24]
 8017ae0:	4418      	add	r0, r3
 8017ae2:	f010 001f 	ands.w	r0, r0, #31
 8017ae6:	f000 8094 	beq.w	8017c12 <_dtoa_r+0x922>
 8017aea:	f1c0 0320 	rsb	r3, r0, #32
 8017aee:	2b04      	cmp	r3, #4
 8017af0:	f340 8085 	ble.w	8017bfe <_dtoa_r+0x90e>
 8017af4:	9b05      	ldr	r3, [sp, #20]
 8017af6:	f1c0 001c 	rsb	r0, r0, #28
 8017afa:	4403      	add	r3, r0
 8017afc:	9305      	str	r3, [sp, #20]
 8017afe:	9b06      	ldr	r3, [sp, #24]
 8017b00:	4403      	add	r3, r0
 8017b02:	4405      	add	r5, r0
 8017b04:	9306      	str	r3, [sp, #24]
 8017b06:	9b05      	ldr	r3, [sp, #20]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	dd05      	ble.n	8017b18 <_dtoa_r+0x828>
 8017b0c:	4651      	mov	r1, sl
 8017b0e:	461a      	mov	r2, r3
 8017b10:	4620      	mov	r0, r4
 8017b12:	f000 ffef 	bl	8018af4 <__lshift>
 8017b16:	4682      	mov	sl, r0
 8017b18:	9b06      	ldr	r3, [sp, #24]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	dd05      	ble.n	8017b2a <_dtoa_r+0x83a>
 8017b1e:	4631      	mov	r1, r6
 8017b20:	461a      	mov	r2, r3
 8017b22:	4620      	mov	r0, r4
 8017b24:	f000 ffe6 	bl	8018af4 <__lshift>
 8017b28:	4606      	mov	r6, r0
 8017b2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d072      	beq.n	8017c16 <_dtoa_r+0x926>
 8017b30:	4631      	mov	r1, r6
 8017b32:	4650      	mov	r0, sl
 8017b34:	f001 f84a 	bl	8018bcc <__mcmp>
 8017b38:	2800      	cmp	r0, #0
 8017b3a:	da6c      	bge.n	8017c16 <_dtoa_r+0x926>
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	4651      	mov	r1, sl
 8017b40:	220a      	movs	r2, #10
 8017b42:	4620      	mov	r0, r4
 8017b44:	f000 fdde 	bl	8018704 <__multadd>
 8017b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017b4e:	4682      	mov	sl, r0
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	f000 81b0 	beq.w	8017eb6 <_dtoa_r+0xbc6>
 8017b56:	2300      	movs	r3, #0
 8017b58:	4639      	mov	r1, r7
 8017b5a:	220a      	movs	r2, #10
 8017b5c:	4620      	mov	r0, r4
 8017b5e:	f000 fdd1 	bl	8018704 <__multadd>
 8017b62:	9b01      	ldr	r3, [sp, #4]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	4607      	mov	r7, r0
 8017b68:	f300 8096 	bgt.w	8017c98 <_dtoa_r+0x9a8>
 8017b6c:	9b07      	ldr	r3, [sp, #28]
 8017b6e:	2b02      	cmp	r3, #2
 8017b70:	dc59      	bgt.n	8017c26 <_dtoa_r+0x936>
 8017b72:	e091      	b.n	8017c98 <_dtoa_r+0x9a8>
 8017b74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017b76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017b7a:	e758      	b.n	8017a2e <_dtoa_r+0x73e>
 8017b7c:	9b04      	ldr	r3, [sp, #16]
 8017b7e:	1e5e      	subs	r6, r3, #1
 8017b80:	9b08      	ldr	r3, [sp, #32]
 8017b82:	42b3      	cmp	r3, r6
 8017b84:	bfbf      	itttt	lt
 8017b86:	9b08      	ldrlt	r3, [sp, #32]
 8017b88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8017b8a:	9608      	strlt	r6, [sp, #32]
 8017b8c:	1af3      	sublt	r3, r6, r3
 8017b8e:	bfb4      	ite	lt
 8017b90:	18d2      	addlt	r2, r2, r3
 8017b92:	1b9e      	subge	r6, r3, r6
 8017b94:	9b04      	ldr	r3, [sp, #16]
 8017b96:	bfbc      	itt	lt
 8017b98:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8017b9a:	2600      	movlt	r6, #0
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	bfb7      	itett	lt
 8017ba0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8017ba4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8017ba8:	1a9d      	sublt	r5, r3, r2
 8017baa:	2300      	movlt	r3, #0
 8017bac:	e741      	b.n	8017a32 <_dtoa_r+0x742>
 8017bae:	9e08      	ldr	r6, [sp, #32]
 8017bb0:	9d05      	ldr	r5, [sp, #20]
 8017bb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017bb4:	e748      	b.n	8017a48 <_dtoa_r+0x758>
 8017bb6:	9a08      	ldr	r2, [sp, #32]
 8017bb8:	e770      	b.n	8017a9c <_dtoa_r+0x7ac>
 8017bba:	9b07      	ldr	r3, [sp, #28]
 8017bbc:	2b01      	cmp	r3, #1
 8017bbe:	dc19      	bgt.n	8017bf4 <_dtoa_r+0x904>
 8017bc0:	9b02      	ldr	r3, [sp, #8]
 8017bc2:	b9bb      	cbnz	r3, 8017bf4 <_dtoa_r+0x904>
 8017bc4:	9b03      	ldr	r3, [sp, #12]
 8017bc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017bca:	b99b      	cbnz	r3, 8017bf4 <_dtoa_r+0x904>
 8017bcc:	9b03      	ldr	r3, [sp, #12]
 8017bce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017bd2:	0d1b      	lsrs	r3, r3, #20
 8017bd4:	051b      	lsls	r3, r3, #20
 8017bd6:	b183      	cbz	r3, 8017bfa <_dtoa_r+0x90a>
 8017bd8:	9b05      	ldr	r3, [sp, #20]
 8017bda:	3301      	adds	r3, #1
 8017bdc:	9305      	str	r3, [sp, #20]
 8017bde:	9b06      	ldr	r3, [sp, #24]
 8017be0:	3301      	adds	r3, #1
 8017be2:	9306      	str	r3, [sp, #24]
 8017be4:	f04f 0801 	mov.w	r8, #1
 8017be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	f47f af6f 	bne.w	8017ace <_dtoa_r+0x7de>
 8017bf0:	2001      	movs	r0, #1
 8017bf2:	e774      	b.n	8017ade <_dtoa_r+0x7ee>
 8017bf4:	f04f 0800 	mov.w	r8, #0
 8017bf8:	e7f6      	b.n	8017be8 <_dtoa_r+0x8f8>
 8017bfa:	4698      	mov	r8, r3
 8017bfc:	e7f4      	b.n	8017be8 <_dtoa_r+0x8f8>
 8017bfe:	d082      	beq.n	8017b06 <_dtoa_r+0x816>
 8017c00:	9a05      	ldr	r2, [sp, #20]
 8017c02:	331c      	adds	r3, #28
 8017c04:	441a      	add	r2, r3
 8017c06:	9205      	str	r2, [sp, #20]
 8017c08:	9a06      	ldr	r2, [sp, #24]
 8017c0a:	441a      	add	r2, r3
 8017c0c:	441d      	add	r5, r3
 8017c0e:	9206      	str	r2, [sp, #24]
 8017c10:	e779      	b.n	8017b06 <_dtoa_r+0x816>
 8017c12:	4603      	mov	r3, r0
 8017c14:	e7f4      	b.n	8017c00 <_dtoa_r+0x910>
 8017c16:	9b04      	ldr	r3, [sp, #16]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	dc37      	bgt.n	8017c8c <_dtoa_r+0x99c>
 8017c1c:	9b07      	ldr	r3, [sp, #28]
 8017c1e:	2b02      	cmp	r3, #2
 8017c20:	dd34      	ble.n	8017c8c <_dtoa_r+0x99c>
 8017c22:	9b04      	ldr	r3, [sp, #16]
 8017c24:	9301      	str	r3, [sp, #4]
 8017c26:	9b01      	ldr	r3, [sp, #4]
 8017c28:	b963      	cbnz	r3, 8017c44 <_dtoa_r+0x954>
 8017c2a:	4631      	mov	r1, r6
 8017c2c:	2205      	movs	r2, #5
 8017c2e:	4620      	mov	r0, r4
 8017c30:	f000 fd68 	bl	8018704 <__multadd>
 8017c34:	4601      	mov	r1, r0
 8017c36:	4606      	mov	r6, r0
 8017c38:	4650      	mov	r0, sl
 8017c3a:	f000 ffc7 	bl	8018bcc <__mcmp>
 8017c3e:	2800      	cmp	r0, #0
 8017c40:	f73f adbb 	bgt.w	80177ba <_dtoa_r+0x4ca>
 8017c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c46:	9d00      	ldr	r5, [sp, #0]
 8017c48:	ea6f 0b03 	mvn.w	fp, r3
 8017c4c:	f04f 0800 	mov.w	r8, #0
 8017c50:	4631      	mov	r1, r6
 8017c52:	4620      	mov	r0, r4
 8017c54:	f000 fd34 	bl	80186c0 <_Bfree>
 8017c58:	2f00      	cmp	r7, #0
 8017c5a:	f43f aeab 	beq.w	80179b4 <_dtoa_r+0x6c4>
 8017c5e:	f1b8 0f00 	cmp.w	r8, #0
 8017c62:	d005      	beq.n	8017c70 <_dtoa_r+0x980>
 8017c64:	45b8      	cmp	r8, r7
 8017c66:	d003      	beq.n	8017c70 <_dtoa_r+0x980>
 8017c68:	4641      	mov	r1, r8
 8017c6a:	4620      	mov	r0, r4
 8017c6c:	f000 fd28 	bl	80186c0 <_Bfree>
 8017c70:	4639      	mov	r1, r7
 8017c72:	4620      	mov	r0, r4
 8017c74:	f000 fd24 	bl	80186c0 <_Bfree>
 8017c78:	e69c      	b.n	80179b4 <_dtoa_r+0x6c4>
 8017c7a:	2600      	movs	r6, #0
 8017c7c:	4637      	mov	r7, r6
 8017c7e:	e7e1      	b.n	8017c44 <_dtoa_r+0x954>
 8017c80:	46bb      	mov	fp, r7
 8017c82:	4637      	mov	r7, r6
 8017c84:	e599      	b.n	80177ba <_dtoa_r+0x4ca>
 8017c86:	bf00      	nop
 8017c88:	40240000 	.word	0x40240000
 8017c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	f000 80c8 	beq.w	8017e24 <_dtoa_r+0xb34>
 8017c94:	9b04      	ldr	r3, [sp, #16]
 8017c96:	9301      	str	r3, [sp, #4]
 8017c98:	2d00      	cmp	r5, #0
 8017c9a:	dd05      	ble.n	8017ca8 <_dtoa_r+0x9b8>
 8017c9c:	4639      	mov	r1, r7
 8017c9e:	462a      	mov	r2, r5
 8017ca0:	4620      	mov	r0, r4
 8017ca2:	f000 ff27 	bl	8018af4 <__lshift>
 8017ca6:	4607      	mov	r7, r0
 8017ca8:	f1b8 0f00 	cmp.w	r8, #0
 8017cac:	d05b      	beq.n	8017d66 <_dtoa_r+0xa76>
 8017cae:	6879      	ldr	r1, [r7, #4]
 8017cb0:	4620      	mov	r0, r4
 8017cb2:	f000 fcc5 	bl	8018640 <_Balloc>
 8017cb6:	4605      	mov	r5, r0
 8017cb8:	b928      	cbnz	r0, 8017cc6 <_dtoa_r+0x9d6>
 8017cba:	4b83      	ldr	r3, [pc, #524]	; (8017ec8 <_dtoa_r+0xbd8>)
 8017cbc:	4602      	mov	r2, r0
 8017cbe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8017cc2:	f7ff bb2e 	b.w	8017322 <_dtoa_r+0x32>
 8017cc6:	693a      	ldr	r2, [r7, #16]
 8017cc8:	3202      	adds	r2, #2
 8017cca:	0092      	lsls	r2, r2, #2
 8017ccc:	f107 010c 	add.w	r1, r7, #12
 8017cd0:	300c      	adds	r0, #12
 8017cd2:	f7ff fa4a 	bl	801716a <memcpy>
 8017cd6:	2201      	movs	r2, #1
 8017cd8:	4629      	mov	r1, r5
 8017cda:	4620      	mov	r0, r4
 8017cdc:	f000 ff0a 	bl	8018af4 <__lshift>
 8017ce0:	9b00      	ldr	r3, [sp, #0]
 8017ce2:	3301      	adds	r3, #1
 8017ce4:	9304      	str	r3, [sp, #16]
 8017ce6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017cea:	4413      	add	r3, r2
 8017cec:	9308      	str	r3, [sp, #32]
 8017cee:	9b02      	ldr	r3, [sp, #8]
 8017cf0:	f003 0301 	and.w	r3, r3, #1
 8017cf4:	46b8      	mov	r8, r7
 8017cf6:	9306      	str	r3, [sp, #24]
 8017cf8:	4607      	mov	r7, r0
 8017cfa:	9b04      	ldr	r3, [sp, #16]
 8017cfc:	4631      	mov	r1, r6
 8017cfe:	3b01      	subs	r3, #1
 8017d00:	4650      	mov	r0, sl
 8017d02:	9301      	str	r3, [sp, #4]
 8017d04:	f7ff fa6c 	bl	80171e0 <quorem>
 8017d08:	4641      	mov	r1, r8
 8017d0a:	9002      	str	r0, [sp, #8]
 8017d0c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017d10:	4650      	mov	r0, sl
 8017d12:	f000 ff5b 	bl	8018bcc <__mcmp>
 8017d16:	463a      	mov	r2, r7
 8017d18:	9005      	str	r0, [sp, #20]
 8017d1a:	4631      	mov	r1, r6
 8017d1c:	4620      	mov	r0, r4
 8017d1e:	f000 ff71 	bl	8018c04 <__mdiff>
 8017d22:	68c2      	ldr	r2, [r0, #12]
 8017d24:	4605      	mov	r5, r0
 8017d26:	bb02      	cbnz	r2, 8017d6a <_dtoa_r+0xa7a>
 8017d28:	4601      	mov	r1, r0
 8017d2a:	4650      	mov	r0, sl
 8017d2c:	f000 ff4e 	bl	8018bcc <__mcmp>
 8017d30:	4602      	mov	r2, r0
 8017d32:	4629      	mov	r1, r5
 8017d34:	4620      	mov	r0, r4
 8017d36:	9209      	str	r2, [sp, #36]	; 0x24
 8017d38:	f000 fcc2 	bl	80186c0 <_Bfree>
 8017d3c:	9b07      	ldr	r3, [sp, #28]
 8017d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d40:	9d04      	ldr	r5, [sp, #16]
 8017d42:	ea43 0102 	orr.w	r1, r3, r2
 8017d46:	9b06      	ldr	r3, [sp, #24]
 8017d48:	4319      	orrs	r1, r3
 8017d4a:	d110      	bne.n	8017d6e <_dtoa_r+0xa7e>
 8017d4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017d50:	d029      	beq.n	8017da6 <_dtoa_r+0xab6>
 8017d52:	9b05      	ldr	r3, [sp, #20]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	dd02      	ble.n	8017d5e <_dtoa_r+0xa6e>
 8017d58:	9b02      	ldr	r3, [sp, #8]
 8017d5a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8017d5e:	9b01      	ldr	r3, [sp, #4]
 8017d60:	f883 9000 	strb.w	r9, [r3]
 8017d64:	e774      	b.n	8017c50 <_dtoa_r+0x960>
 8017d66:	4638      	mov	r0, r7
 8017d68:	e7ba      	b.n	8017ce0 <_dtoa_r+0x9f0>
 8017d6a:	2201      	movs	r2, #1
 8017d6c:	e7e1      	b.n	8017d32 <_dtoa_r+0xa42>
 8017d6e:	9b05      	ldr	r3, [sp, #20]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	db04      	blt.n	8017d7e <_dtoa_r+0xa8e>
 8017d74:	9907      	ldr	r1, [sp, #28]
 8017d76:	430b      	orrs	r3, r1
 8017d78:	9906      	ldr	r1, [sp, #24]
 8017d7a:	430b      	orrs	r3, r1
 8017d7c:	d120      	bne.n	8017dc0 <_dtoa_r+0xad0>
 8017d7e:	2a00      	cmp	r2, #0
 8017d80:	dded      	ble.n	8017d5e <_dtoa_r+0xa6e>
 8017d82:	4651      	mov	r1, sl
 8017d84:	2201      	movs	r2, #1
 8017d86:	4620      	mov	r0, r4
 8017d88:	f000 feb4 	bl	8018af4 <__lshift>
 8017d8c:	4631      	mov	r1, r6
 8017d8e:	4682      	mov	sl, r0
 8017d90:	f000 ff1c 	bl	8018bcc <__mcmp>
 8017d94:	2800      	cmp	r0, #0
 8017d96:	dc03      	bgt.n	8017da0 <_dtoa_r+0xab0>
 8017d98:	d1e1      	bne.n	8017d5e <_dtoa_r+0xa6e>
 8017d9a:	f019 0f01 	tst.w	r9, #1
 8017d9e:	d0de      	beq.n	8017d5e <_dtoa_r+0xa6e>
 8017da0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017da4:	d1d8      	bne.n	8017d58 <_dtoa_r+0xa68>
 8017da6:	9a01      	ldr	r2, [sp, #4]
 8017da8:	2339      	movs	r3, #57	; 0x39
 8017daa:	7013      	strb	r3, [r2, #0]
 8017dac:	462b      	mov	r3, r5
 8017dae:	461d      	mov	r5, r3
 8017db0:	3b01      	subs	r3, #1
 8017db2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017db6:	2a39      	cmp	r2, #57	; 0x39
 8017db8:	d06c      	beq.n	8017e94 <_dtoa_r+0xba4>
 8017dba:	3201      	adds	r2, #1
 8017dbc:	701a      	strb	r2, [r3, #0]
 8017dbe:	e747      	b.n	8017c50 <_dtoa_r+0x960>
 8017dc0:	2a00      	cmp	r2, #0
 8017dc2:	dd07      	ble.n	8017dd4 <_dtoa_r+0xae4>
 8017dc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017dc8:	d0ed      	beq.n	8017da6 <_dtoa_r+0xab6>
 8017dca:	9a01      	ldr	r2, [sp, #4]
 8017dcc:	f109 0301 	add.w	r3, r9, #1
 8017dd0:	7013      	strb	r3, [r2, #0]
 8017dd2:	e73d      	b.n	8017c50 <_dtoa_r+0x960>
 8017dd4:	9b04      	ldr	r3, [sp, #16]
 8017dd6:	9a08      	ldr	r2, [sp, #32]
 8017dd8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8017ddc:	4293      	cmp	r3, r2
 8017dde:	d043      	beq.n	8017e68 <_dtoa_r+0xb78>
 8017de0:	4651      	mov	r1, sl
 8017de2:	2300      	movs	r3, #0
 8017de4:	220a      	movs	r2, #10
 8017de6:	4620      	mov	r0, r4
 8017de8:	f000 fc8c 	bl	8018704 <__multadd>
 8017dec:	45b8      	cmp	r8, r7
 8017dee:	4682      	mov	sl, r0
 8017df0:	f04f 0300 	mov.w	r3, #0
 8017df4:	f04f 020a 	mov.w	r2, #10
 8017df8:	4641      	mov	r1, r8
 8017dfa:	4620      	mov	r0, r4
 8017dfc:	d107      	bne.n	8017e0e <_dtoa_r+0xb1e>
 8017dfe:	f000 fc81 	bl	8018704 <__multadd>
 8017e02:	4680      	mov	r8, r0
 8017e04:	4607      	mov	r7, r0
 8017e06:	9b04      	ldr	r3, [sp, #16]
 8017e08:	3301      	adds	r3, #1
 8017e0a:	9304      	str	r3, [sp, #16]
 8017e0c:	e775      	b.n	8017cfa <_dtoa_r+0xa0a>
 8017e0e:	f000 fc79 	bl	8018704 <__multadd>
 8017e12:	4639      	mov	r1, r7
 8017e14:	4680      	mov	r8, r0
 8017e16:	2300      	movs	r3, #0
 8017e18:	220a      	movs	r2, #10
 8017e1a:	4620      	mov	r0, r4
 8017e1c:	f000 fc72 	bl	8018704 <__multadd>
 8017e20:	4607      	mov	r7, r0
 8017e22:	e7f0      	b.n	8017e06 <_dtoa_r+0xb16>
 8017e24:	9b04      	ldr	r3, [sp, #16]
 8017e26:	9301      	str	r3, [sp, #4]
 8017e28:	9d00      	ldr	r5, [sp, #0]
 8017e2a:	4631      	mov	r1, r6
 8017e2c:	4650      	mov	r0, sl
 8017e2e:	f7ff f9d7 	bl	80171e0 <quorem>
 8017e32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017e36:	9b00      	ldr	r3, [sp, #0]
 8017e38:	f805 9b01 	strb.w	r9, [r5], #1
 8017e3c:	1aea      	subs	r2, r5, r3
 8017e3e:	9b01      	ldr	r3, [sp, #4]
 8017e40:	4293      	cmp	r3, r2
 8017e42:	dd07      	ble.n	8017e54 <_dtoa_r+0xb64>
 8017e44:	4651      	mov	r1, sl
 8017e46:	2300      	movs	r3, #0
 8017e48:	220a      	movs	r2, #10
 8017e4a:	4620      	mov	r0, r4
 8017e4c:	f000 fc5a 	bl	8018704 <__multadd>
 8017e50:	4682      	mov	sl, r0
 8017e52:	e7ea      	b.n	8017e2a <_dtoa_r+0xb3a>
 8017e54:	9b01      	ldr	r3, [sp, #4]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	bfc8      	it	gt
 8017e5a:	461d      	movgt	r5, r3
 8017e5c:	9b00      	ldr	r3, [sp, #0]
 8017e5e:	bfd8      	it	le
 8017e60:	2501      	movle	r5, #1
 8017e62:	441d      	add	r5, r3
 8017e64:	f04f 0800 	mov.w	r8, #0
 8017e68:	4651      	mov	r1, sl
 8017e6a:	2201      	movs	r2, #1
 8017e6c:	4620      	mov	r0, r4
 8017e6e:	f000 fe41 	bl	8018af4 <__lshift>
 8017e72:	4631      	mov	r1, r6
 8017e74:	4682      	mov	sl, r0
 8017e76:	f000 fea9 	bl	8018bcc <__mcmp>
 8017e7a:	2800      	cmp	r0, #0
 8017e7c:	dc96      	bgt.n	8017dac <_dtoa_r+0xabc>
 8017e7e:	d102      	bne.n	8017e86 <_dtoa_r+0xb96>
 8017e80:	f019 0f01 	tst.w	r9, #1
 8017e84:	d192      	bne.n	8017dac <_dtoa_r+0xabc>
 8017e86:	462b      	mov	r3, r5
 8017e88:	461d      	mov	r5, r3
 8017e8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017e8e:	2a30      	cmp	r2, #48	; 0x30
 8017e90:	d0fa      	beq.n	8017e88 <_dtoa_r+0xb98>
 8017e92:	e6dd      	b.n	8017c50 <_dtoa_r+0x960>
 8017e94:	9a00      	ldr	r2, [sp, #0]
 8017e96:	429a      	cmp	r2, r3
 8017e98:	d189      	bne.n	8017dae <_dtoa_r+0xabe>
 8017e9a:	f10b 0b01 	add.w	fp, fp, #1
 8017e9e:	2331      	movs	r3, #49	; 0x31
 8017ea0:	e796      	b.n	8017dd0 <_dtoa_r+0xae0>
 8017ea2:	4b0a      	ldr	r3, [pc, #40]	; (8017ecc <_dtoa_r+0xbdc>)
 8017ea4:	f7ff ba99 	b.w	80173da <_dtoa_r+0xea>
 8017ea8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	f47f aa6d 	bne.w	801738a <_dtoa_r+0x9a>
 8017eb0:	4b07      	ldr	r3, [pc, #28]	; (8017ed0 <_dtoa_r+0xbe0>)
 8017eb2:	f7ff ba92 	b.w	80173da <_dtoa_r+0xea>
 8017eb6:	9b01      	ldr	r3, [sp, #4]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	dcb5      	bgt.n	8017e28 <_dtoa_r+0xb38>
 8017ebc:	9b07      	ldr	r3, [sp, #28]
 8017ebe:	2b02      	cmp	r3, #2
 8017ec0:	f73f aeb1 	bgt.w	8017c26 <_dtoa_r+0x936>
 8017ec4:	e7b0      	b.n	8017e28 <_dtoa_r+0xb38>
 8017ec6:	bf00      	nop
 8017ec8:	0801dadc 	.word	0x0801dadc
 8017ecc:	0801d999 	.word	0x0801d999
 8017ed0:	0801da77 	.word	0x0801da77

08017ed4 <_free_r>:
 8017ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017ed6:	2900      	cmp	r1, #0
 8017ed8:	d044      	beq.n	8017f64 <_free_r+0x90>
 8017eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ede:	9001      	str	r0, [sp, #4]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	f1a1 0404 	sub.w	r4, r1, #4
 8017ee6:	bfb8      	it	lt
 8017ee8:	18e4      	addlt	r4, r4, r3
 8017eea:	f7fd f93f 	bl	801516c <__malloc_lock>
 8017eee:	4a1e      	ldr	r2, [pc, #120]	; (8017f68 <_free_r+0x94>)
 8017ef0:	9801      	ldr	r0, [sp, #4]
 8017ef2:	6813      	ldr	r3, [r2, #0]
 8017ef4:	b933      	cbnz	r3, 8017f04 <_free_r+0x30>
 8017ef6:	6063      	str	r3, [r4, #4]
 8017ef8:	6014      	str	r4, [r2, #0]
 8017efa:	b003      	add	sp, #12
 8017efc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017f00:	f7fd b93a 	b.w	8015178 <__malloc_unlock>
 8017f04:	42a3      	cmp	r3, r4
 8017f06:	d908      	bls.n	8017f1a <_free_r+0x46>
 8017f08:	6825      	ldr	r5, [r4, #0]
 8017f0a:	1961      	adds	r1, r4, r5
 8017f0c:	428b      	cmp	r3, r1
 8017f0e:	bf01      	itttt	eq
 8017f10:	6819      	ldreq	r1, [r3, #0]
 8017f12:	685b      	ldreq	r3, [r3, #4]
 8017f14:	1949      	addeq	r1, r1, r5
 8017f16:	6021      	streq	r1, [r4, #0]
 8017f18:	e7ed      	b.n	8017ef6 <_free_r+0x22>
 8017f1a:	461a      	mov	r2, r3
 8017f1c:	685b      	ldr	r3, [r3, #4]
 8017f1e:	b10b      	cbz	r3, 8017f24 <_free_r+0x50>
 8017f20:	42a3      	cmp	r3, r4
 8017f22:	d9fa      	bls.n	8017f1a <_free_r+0x46>
 8017f24:	6811      	ldr	r1, [r2, #0]
 8017f26:	1855      	adds	r5, r2, r1
 8017f28:	42a5      	cmp	r5, r4
 8017f2a:	d10b      	bne.n	8017f44 <_free_r+0x70>
 8017f2c:	6824      	ldr	r4, [r4, #0]
 8017f2e:	4421      	add	r1, r4
 8017f30:	1854      	adds	r4, r2, r1
 8017f32:	42a3      	cmp	r3, r4
 8017f34:	6011      	str	r1, [r2, #0]
 8017f36:	d1e0      	bne.n	8017efa <_free_r+0x26>
 8017f38:	681c      	ldr	r4, [r3, #0]
 8017f3a:	685b      	ldr	r3, [r3, #4]
 8017f3c:	6053      	str	r3, [r2, #4]
 8017f3e:	440c      	add	r4, r1
 8017f40:	6014      	str	r4, [r2, #0]
 8017f42:	e7da      	b.n	8017efa <_free_r+0x26>
 8017f44:	d902      	bls.n	8017f4c <_free_r+0x78>
 8017f46:	230c      	movs	r3, #12
 8017f48:	6003      	str	r3, [r0, #0]
 8017f4a:	e7d6      	b.n	8017efa <_free_r+0x26>
 8017f4c:	6825      	ldr	r5, [r4, #0]
 8017f4e:	1961      	adds	r1, r4, r5
 8017f50:	428b      	cmp	r3, r1
 8017f52:	bf04      	itt	eq
 8017f54:	6819      	ldreq	r1, [r3, #0]
 8017f56:	685b      	ldreq	r3, [r3, #4]
 8017f58:	6063      	str	r3, [r4, #4]
 8017f5a:	bf04      	itt	eq
 8017f5c:	1949      	addeq	r1, r1, r5
 8017f5e:	6021      	streq	r1, [r4, #0]
 8017f60:	6054      	str	r4, [r2, #4]
 8017f62:	e7ca      	b.n	8017efa <_free_r+0x26>
 8017f64:	b003      	add	sp, #12
 8017f66:	bd30      	pop	{r4, r5, pc}
 8017f68:	20002470 	.word	0x20002470

08017f6c <rshift>:
 8017f6c:	6903      	ldr	r3, [r0, #16]
 8017f6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017f72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f76:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017f7a:	f100 0414 	add.w	r4, r0, #20
 8017f7e:	dd45      	ble.n	801800c <rshift+0xa0>
 8017f80:	f011 011f 	ands.w	r1, r1, #31
 8017f84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017f88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017f8c:	d10c      	bne.n	8017fa8 <rshift+0x3c>
 8017f8e:	f100 0710 	add.w	r7, r0, #16
 8017f92:	4629      	mov	r1, r5
 8017f94:	42b1      	cmp	r1, r6
 8017f96:	d334      	bcc.n	8018002 <rshift+0x96>
 8017f98:	1a9b      	subs	r3, r3, r2
 8017f9a:	009b      	lsls	r3, r3, #2
 8017f9c:	1eea      	subs	r2, r5, #3
 8017f9e:	4296      	cmp	r6, r2
 8017fa0:	bf38      	it	cc
 8017fa2:	2300      	movcc	r3, #0
 8017fa4:	4423      	add	r3, r4
 8017fa6:	e015      	b.n	8017fd4 <rshift+0x68>
 8017fa8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017fac:	f1c1 0820 	rsb	r8, r1, #32
 8017fb0:	40cf      	lsrs	r7, r1
 8017fb2:	f105 0e04 	add.w	lr, r5, #4
 8017fb6:	46a1      	mov	r9, r4
 8017fb8:	4576      	cmp	r6, lr
 8017fba:	46f4      	mov	ip, lr
 8017fbc:	d815      	bhi.n	8017fea <rshift+0x7e>
 8017fbe:	1a9a      	subs	r2, r3, r2
 8017fc0:	0092      	lsls	r2, r2, #2
 8017fc2:	3a04      	subs	r2, #4
 8017fc4:	3501      	adds	r5, #1
 8017fc6:	42ae      	cmp	r6, r5
 8017fc8:	bf38      	it	cc
 8017fca:	2200      	movcc	r2, #0
 8017fcc:	18a3      	adds	r3, r4, r2
 8017fce:	50a7      	str	r7, [r4, r2]
 8017fd0:	b107      	cbz	r7, 8017fd4 <rshift+0x68>
 8017fd2:	3304      	adds	r3, #4
 8017fd4:	1b1a      	subs	r2, r3, r4
 8017fd6:	42a3      	cmp	r3, r4
 8017fd8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017fdc:	bf08      	it	eq
 8017fde:	2300      	moveq	r3, #0
 8017fe0:	6102      	str	r2, [r0, #16]
 8017fe2:	bf08      	it	eq
 8017fe4:	6143      	streq	r3, [r0, #20]
 8017fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fea:	f8dc c000 	ldr.w	ip, [ip]
 8017fee:	fa0c fc08 	lsl.w	ip, ip, r8
 8017ff2:	ea4c 0707 	orr.w	r7, ip, r7
 8017ff6:	f849 7b04 	str.w	r7, [r9], #4
 8017ffa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017ffe:	40cf      	lsrs	r7, r1
 8018000:	e7da      	b.n	8017fb8 <rshift+0x4c>
 8018002:	f851 cb04 	ldr.w	ip, [r1], #4
 8018006:	f847 cf04 	str.w	ip, [r7, #4]!
 801800a:	e7c3      	b.n	8017f94 <rshift+0x28>
 801800c:	4623      	mov	r3, r4
 801800e:	e7e1      	b.n	8017fd4 <rshift+0x68>

08018010 <__hexdig_fun>:
 8018010:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018014:	2b09      	cmp	r3, #9
 8018016:	d802      	bhi.n	801801e <__hexdig_fun+0xe>
 8018018:	3820      	subs	r0, #32
 801801a:	b2c0      	uxtb	r0, r0
 801801c:	4770      	bx	lr
 801801e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018022:	2b05      	cmp	r3, #5
 8018024:	d801      	bhi.n	801802a <__hexdig_fun+0x1a>
 8018026:	3847      	subs	r0, #71	; 0x47
 8018028:	e7f7      	b.n	801801a <__hexdig_fun+0xa>
 801802a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801802e:	2b05      	cmp	r3, #5
 8018030:	d801      	bhi.n	8018036 <__hexdig_fun+0x26>
 8018032:	3827      	subs	r0, #39	; 0x27
 8018034:	e7f1      	b.n	801801a <__hexdig_fun+0xa>
 8018036:	2000      	movs	r0, #0
 8018038:	4770      	bx	lr
	...

0801803c <__gethex>:
 801803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018040:	4617      	mov	r7, r2
 8018042:	680a      	ldr	r2, [r1, #0]
 8018044:	b085      	sub	sp, #20
 8018046:	f102 0b02 	add.w	fp, r2, #2
 801804a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801804e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018052:	4681      	mov	r9, r0
 8018054:	468a      	mov	sl, r1
 8018056:	9302      	str	r3, [sp, #8]
 8018058:	32fe      	adds	r2, #254	; 0xfe
 801805a:	eb02 030b 	add.w	r3, r2, fp
 801805e:	46d8      	mov	r8, fp
 8018060:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8018064:	9301      	str	r3, [sp, #4]
 8018066:	2830      	cmp	r0, #48	; 0x30
 8018068:	d0f7      	beq.n	801805a <__gethex+0x1e>
 801806a:	f7ff ffd1 	bl	8018010 <__hexdig_fun>
 801806e:	4604      	mov	r4, r0
 8018070:	2800      	cmp	r0, #0
 8018072:	d138      	bne.n	80180e6 <__gethex+0xaa>
 8018074:	49a7      	ldr	r1, [pc, #668]	; (8018314 <__gethex+0x2d8>)
 8018076:	2201      	movs	r2, #1
 8018078:	4640      	mov	r0, r8
 801807a:	f7fe ff62 	bl	8016f42 <strncmp>
 801807e:	4606      	mov	r6, r0
 8018080:	2800      	cmp	r0, #0
 8018082:	d169      	bne.n	8018158 <__gethex+0x11c>
 8018084:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018088:	465d      	mov	r5, fp
 801808a:	f7ff ffc1 	bl	8018010 <__hexdig_fun>
 801808e:	2800      	cmp	r0, #0
 8018090:	d064      	beq.n	801815c <__gethex+0x120>
 8018092:	465a      	mov	r2, fp
 8018094:	7810      	ldrb	r0, [r2, #0]
 8018096:	2830      	cmp	r0, #48	; 0x30
 8018098:	4690      	mov	r8, r2
 801809a:	f102 0201 	add.w	r2, r2, #1
 801809e:	d0f9      	beq.n	8018094 <__gethex+0x58>
 80180a0:	f7ff ffb6 	bl	8018010 <__hexdig_fun>
 80180a4:	2301      	movs	r3, #1
 80180a6:	fab0 f480 	clz	r4, r0
 80180aa:	0964      	lsrs	r4, r4, #5
 80180ac:	465e      	mov	r6, fp
 80180ae:	9301      	str	r3, [sp, #4]
 80180b0:	4642      	mov	r2, r8
 80180b2:	4615      	mov	r5, r2
 80180b4:	3201      	adds	r2, #1
 80180b6:	7828      	ldrb	r0, [r5, #0]
 80180b8:	f7ff ffaa 	bl	8018010 <__hexdig_fun>
 80180bc:	2800      	cmp	r0, #0
 80180be:	d1f8      	bne.n	80180b2 <__gethex+0x76>
 80180c0:	4994      	ldr	r1, [pc, #592]	; (8018314 <__gethex+0x2d8>)
 80180c2:	2201      	movs	r2, #1
 80180c4:	4628      	mov	r0, r5
 80180c6:	f7fe ff3c 	bl	8016f42 <strncmp>
 80180ca:	b978      	cbnz	r0, 80180ec <__gethex+0xb0>
 80180cc:	b946      	cbnz	r6, 80180e0 <__gethex+0xa4>
 80180ce:	1c6e      	adds	r6, r5, #1
 80180d0:	4632      	mov	r2, r6
 80180d2:	4615      	mov	r5, r2
 80180d4:	3201      	adds	r2, #1
 80180d6:	7828      	ldrb	r0, [r5, #0]
 80180d8:	f7ff ff9a 	bl	8018010 <__hexdig_fun>
 80180dc:	2800      	cmp	r0, #0
 80180de:	d1f8      	bne.n	80180d2 <__gethex+0x96>
 80180e0:	1b73      	subs	r3, r6, r5
 80180e2:	009e      	lsls	r6, r3, #2
 80180e4:	e004      	b.n	80180f0 <__gethex+0xb4>
 80180e6:	2400      	movs	r4, #0
 80180e8:	4626      	mov	r6, r4
 80180ea:	e7e1      	b.n	80180b0 <__gethex+0x74>
 80180ec:	2e00      	cmp	r6, #0
 80180ee:	d1f7      	bne.n	80180e0 <__gethex+0xa4>
 80180f0:	782b      	ldrb	r3, [r5, #0]
 80180f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80180f6:	2b50      	cmp	r3, #80	; 0x50
 80180f8:	d13d      	bne.n	8018176 <__gethex+0x13a>
 80180fa:	786b      	ldrb	r3, [r5, #1]
 80180fc:	2b2b      	cmp	r3, #43	; 0x2b
 80180fe:	d02f      	beq.n	8018160 <__gethex+0x124>
 8018100:	2b2d      	cmp	r3, #45	; 0x2d
 8018102:	d031      	beq.n	8018168 <__gethex+0x12c>
 8018104:	1c69      	adds	r1, r5, #1
 8018106:	f04f 0b00 	mov.w	fp, #0
 801810a:	7808      	ldrb	r0, [r1, #0]
 801810c:	f7ff ff80 	bl	8018010 <__hexdig_fun>
 8018110:	1e42      	subs	r2, r0, #1
 8018112:	b2d2      	uxtb	r2, r2
 8018114:	2a18      	cmp	r2, #24
 8018116:	d82e      	bhi.n	8018176 <__gethex+0x13a>
 8018118:	f1a0 0210 	sub.w	r2, r0, #16
 801811c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018120:	f7ff ff76 	bl	8018010 <__hexdig_fun>
 8018124:	f100 3cff 	add.w	ip, r0, #4294967295
 8018128:	fa5f fc8c 	uxtb.w	ip, ip
 801812c:	f1bc 0f18 	cmp.w	ip, #24
 8018130:	d91d      	bls.n	801816e <__gethex+0x132>
 8018132:	f1bb 0f00 	cmp.w	fp, #0
 8018136:	d000      	beq.n	801813a <__gethex+0xfe>
 8018138:	4252      	negs	r2, r2
 801813a:	4416      	add	r6, r2
 801813c:	f8ca 1000 	str.w	r1, [sl]
 8018140:	b1dc      	cbz	r4, 801817a <__gethex+0x13e>
 8018142:	9b01      	ldr	r3, [sp, #4]
 8018144:	2b00      	cmp	r3, #0
 8018146:	bf14      	ite	ne
 8018148:	f04f 0800 	movne.w	r8, #0
 801814c:	f04f 0806 	moveq.w	r8, #6
 8018150:	4640      	mov	r0, r8
 8018152:	b005      	add	sp, #20
 8018154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018158:	4645      	mov	r5, r8
 801815a:	4626      	mov	r6, r4
 801815c:	2401      	movs	r4, #1
 801815e:	e7c7      	b.n	80180f0 <__gethex+0xb4>
 8018160:	f04f 0b00 	mov.w	fp, #0
 8018164:	1ca9      	adds	r1, r5, #2
 8018166:	e7d0      	b.n	801810a <__gethex+0xce>
 8018168:	f04f 0b01 	mov.w	fp, #1
 801816c:	e7fa      	b.n	8018164 <__gethex+0x128>
 801816e:	230a      	movs	r3, #10
 8018170:	fb03 0002 	mla	r0, r3, r2, r0
 8018174:	e7d0      	b.n	8018118 <__gethex+0xdc>
 8018176:	4629      	mov	r1, r5
 8018178:	e7e0      	b.n	801813c <__gethex+0x100>
 801817a:	eba5 0308 	sub.w	r3, r5, r8
 801817e:	3b01      	subs	r3, #1
 8018180:	4621      	mov	r1, r4
 8018182:	2b07      	cmp	r3, #7
 8018184:	dc0a      	bgt.n	801819c <__gethex+0x160>
 8018186:	4648      	mov	r0, r9
 8018188:	f000 fa5a 	bl	8018640 <_Balloc>
 801818c:	4604      	mov	r4, r0
 801818e:	b940      	cbnz	r0, 80181a2 <__gethex+0x166>
 8018190:	4b61      	ldr	r3, [pc, #388]	; (8018318 <__gethex+0x2dc>)
 8018192:	4602      	mov	r2, r0
 8018194:	21e4      	movs	r1, #228	; 0xe4
 8018196:	4861      	ldr	r0, [pc, #388]	; (801831c <__gethex+0x2e0>)
 8018198:	f7ff f804 	bl	80171a4 <__assert_func>
 801819c:	3101      	adds	r1, #1
 801819e:	105b      	asrs	r3, r3, #1
 80181a0:	e7ef      	b.n	8018182 <__gethex+0x146>
 80181a2:	f100 0a14 	add.w	sl, r0, #20
 80181a6:	2300      	movs	r3, #0
 80181a8:	495a      	ldr	r1, [pc, #360]	; (8018314 <__gethex+0x2d8>)
 80181aa:	f8cd a004 	str.w	sl, [sp, #4]
 80181ae:	469b      	mov	fp, r3
 80181b0:	45a8      	cmp	r8, r5
 80181b2:	d342      	bcc.n	801823a <__gethex+0x1fe>
 80181b4:	9801      	ldr	r0, [sp, #4]
 80181b6:	f840 bb04 	str.w	fp, [r0], #4
 80181ba:	eba0 000a 	sub.w	r0, r0, sl
 80181be:	1080      	asrs	r0, r0, #2
 80181c0:	6120      	str	r0, [r4, #16]
 80181c2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80181c6:	4658      	mov	r0, fp
 80181c8:	f000 fb2c 	bl	8018824 <__hi0bits>
 80181cc:	683d      	ldr	r5, [r7, #0]
 80181ce:	eba8 0000 	sub.w	r0, r8, r0
 80181d2:	42a8      	cmp	r0, r5
 80181d4:	dd59      	ble.n	801828a <__gethex+0x24e>
 80181d6:	eba0 0805 	sub.w	r8, r0, r5
 80181da:	4641      	mov	r1, r8
 80181dc:	4620      	mov	r0, r4
 80181de:	f000 febb 	bl	8018f58 <__any_on>
 80181e2:	4683      	mov	fp, r0
 80181e4:	b1b8      	cbz	r0, 8018216 <__gethex+0x1da>
 80181e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80181ea:	1159      	asrs	r1, r3, #5
 80181ec:	f003 021f 	and.w	r2, r3, #31
 80181f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80181f4:	f04f 0b01 	mov.w	fp, #1
 80181f8:	fa0b f202 	lsl.w	r2, fp, r2
 80181fc:	420a      	tst	r2, r1
 80181fe:	d00a      	beq.n	8018216 <__gethex+0x1da>
 8018200:	455b      	cmp	r3, fp
 8018202:	dd06      	ble.n	8018212 <__gethex+0x1d6>
 8018204:	f1a8 0102 	sub.w	r1, r8, #2
 8018208:	4620      	mov	r0, r4
 801820a:	f000 fea5 	bl	8018f58 <__any_on>
 801820e:	2800      	cmp	r0, #0
 8018210:	d138      	bne.n	8018284 <__gethex+0x248>
 8018212:	f04f 0b02 	mov.w	fp, #2
 8018216:	4641      	mov	r1, r8
 8018218:	4620      	mov	r0, r4
 801821a:	f7ff fea7 	bl	8017f6c <rshift>
 801821e:	4446      	add	r6, r8
 8018220:	68bb      	ldr	r3, [r7, #8]
 8018222:	42b3      	cmp	r3, r6
 8018224:	da41      	bge.n	80182aa <__gethex+0x26e>
 8018226:	4621      	mov	r1, r4
 8018228:	4648      	mov	r0, r9
 801822a:	f000 fa49 	bl	80186c0 <_Bfree>
 801822e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018230:	2300      	movs	r3, #0
 8018232:	6013      	str	r3, [r2, #0]
 8018234:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8018238:	e78a      	b.n	8018150 <__gethex+0x114>
 801823a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801823e:	2a2e      	cmp	r2, #46	; 0x2e
 8018240:	d014      	beq.n	801826c <__gethex+0x230>
 8018242:	2b20      	cmp	r3, #32
 8018244:	d106      	bne.n	8018254 <__gethex+0x218>
 8018246:	9b01      	ldr	r3, [sp, #4]
 8018248:	f843 bb04 	str.w	fp, [r3], #4
 801824c:	f04f 0b00 	mov.w	fp, #0
 8018250:	9301      	str	r3, [sp, #4]
 8018252:	465b      	mov	r3, fp
 8018254:	7828      	ldrb	r0, [r5, #0]
 8018256:	9303      	str	r3, [sp, #12]
 8018258:	f7ff feda 	bl	8018010 <__hexdig_fun>
 801825c:	9b03      	ldr	r3, [sp, #12]
 801825e:	f000 000f 	and.w	r0, r0, #15
 8018262:	4098      	lsls	r0, r3
 8018264:	ea4b 0b00 	orr.w	fp, fp, r0
 8018268:	3304      	adds	r3, #4
 801826a:	e7a1      	b.n	80181b0 <__gethex+0x174>
 801826c:	45a8      	cmp	r8, r5
 801826e:	d8e8      	bhi.n	8018242 <__gethex+0x206>
 8018270:	2201      	movs	r2, #1
 8018272:	4628      	mov	r0, r5
 8018274:	9303      	str	r3, [sp, #12]
 8018276:	f7fe fe64 	bl	8016f42 <strncmp>
 801827a:	4926      	ldr	r1, [pc, #152]	; (8018314 <__gethex+0x2d8>)
 801827c:	9b03      	ldr	r3, [sp, #12]
 801827e:	2800      	cmp	r0, #0
 8018280:	d1df      	bne.n	8018242 <__gethex+0x206>
 8018282:	e795      	b.n	80181b0 <__gethex+0x174>
 8018284:	f04f 0b03 	mov.w	fp, #3
 8018288:	e7c5      	b.n	8018216 <__gethex+0x1da>
 801828a:	da0b      	bge.n	80182a4 <__gethex+0x268>
 801828c:	eba5 0800 	sub.w	r8, r5, r0
 8018290:	4621      	mov	r1, r4
 8018292:	4642      	mov	r2, r8
 8018294:	4648      	mov	r0, r9
 8018296:	f000 fc2d 	bl	8018af4 <__lshift>
 801829a:	eba6 0608 	sub.w	r6, r6, r8
 801829e:	4604      	mov	r4, r0
 80182a0:	f100 0a14 	add.w	sl, r0, #20
 80182a4:	f04f 0b00 	mov.w	fp, #0
 80182a8:	e7ba      	b.n	8018220 <__gethex+0x1e4>
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	42b3      	cmp	r3, r6
 80182ae:	dd73      	ble.n	8018398 <__gethex+0x35c>
 80182b0:	1b9e      	subs	r6, r3, r6
 80182b2:	42b5      	cmp	r5, r6
 80182b4:	dc34      	bgt.n	8018320 <__gethex+0x2e4>
 80182b6:	68fb      	ldr	r3, [r7, #12]
 80182b8:	2b02      	cmp	r3, #2
 80182ba:	d023      	beq.n	8018304 <__gethex+0x2c8>
 80182bc:	2b03      	cmp	r3, #3
 80182be:	d025      	beq.n	801830c <__gethex+0x2d0>
 80182c0:	2b01      	cmp	r3, #1
 80182c2:	d115      	bne.n	80182f0 <__gethex+0x2b4>
 80182c4:	42b5      	cmp	r5, r6
 80182c6:	d113      	bne.n	80182f0 <__gethex+0x2b4>
 80182c8:	2d01      	cmp	r5, #1
 80182ca:	d10b      	bne.n	80182e4 <__gethex+0x2a8>
 80182cc:	9a02      	ldr	r2, [sp, #8]
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	6013      	str	r3, [r2, #0]
 80182d2:	2301      	movs	r3, #1
 80182d4:	6123      	str	r3, [r4, #16]
 80182d6:	f8ca 3000 	str.w	r3, [sl]
 80182da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80182dc:	f04f 0862 	mov.w	r8, #98	; 0x62
 80182e0:	601c      	str	r4, [r3, #0]
 80182e2:	e735      	b.n	8018150 <__gethex+0x114>
 80182e4:	1e69      	subs	r1, r5, #1
 80182e6:	4620      	mov	r0, r4
 80182e8:	f000 fe36 	bl	8018f58 <__any_on>
 80182ec:	2800      	cmp	r0, #0
 80182ee:	d1ed      	bne.n	80182cc <__gethex+0x290>
 80182f0:	4621      	mov	r1, r4
 80182f2:	4648      	mov	r0, r9
 80182f4:	f000 f9e4 	bl	80186c0 <_Bfree>
 80182f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80182fa:	2300      	movs	r3, #0
 80182fc:	6013      	str	r3, [r2, #0]
 80182fe:	f04f 0850 	mov.w	r8, #80	; 0x50
 8018302:	e725      	b.n	8018150 <__gethex+0x114>
 8018304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018306:	2b00      	cmp	r3, #0
 8018308:	d1f2      	bne.n	80182f0 <__gethex+0x2b4>
 801830a:	e7df      	b.n	80182cc <__gethex+0x290>
 801830c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801830e:	2b00      	cmp	r3, #0
 8018310:	d1dc      	bne.n	80182cc <__gethex+0x290>
 8018312:	e7ed      	b.n	80182f0 <__gethex+0x2b4>
 8018314:	0801d830 	.word	0x0801d830
 8018318:	0801dadc 	.word	0x0801dadc
 801831c:	0801daed 	.word	0x0801daed
 8018320:	f106 38ff 	add.w	r8, r6, #4294967295
 8018324:	f1bb 0f00 	cmp.w	fp, #0
 8018328:	d133      	bne.n	8018392 <__gethex+0x356>
 801832a:	f1b8 0f00 	cmp.w	r8, #0
 801832e:	d004      	beq.n	801833a <__gethex+0x2fe>
 8018330:	4641      	mov	r1, r8
 8018332:	4620      	mov	r0, r4
 8018334:	f000 fe10 	bl	8018f58 <__any_on>
 8018338:	4683      	mov	fp, r0
 801833a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801833e:	2301      	movs	r3, #1
 8018340:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018344:	f008 081f 	and.w	r8, r8, #31
 8018348:	fa03 f308 	lsl.w	r3, r3, r8
 801834c:	4213      	tst	r3, r2
 801834e:	4631      	mov	r1, r6
 8018350:	4620      	mov	r0, r4
 8018352:	bf18      	it	ne
 8018354:	f04b 0b02 	orrne.w	fp, fp, #2
 8018358:	1bad      	subs	r5, r5, r6
 801835a:	f7ff fe07 	bl	8017f6c <rshift>
 801835e:	687e      	ldr	r6, [r7, #4]
 8018360:	f04f 0802 	mov.w	r8, #2
 8018364:	f1bb 0f00 	cmp.w	fp, #0
 8018368:	d04a      	beq.n	8018400 <__gethex+0x3c4>
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	2b02      	cmp	r3, #2
 801836e:	d016      	beq.n	801839e <__gethex+0x362>
 8018370:	2b03      	cmp	r3, #3
 8018372:	d018      	beq.n	80183a6 <__gethex+0x36a>
 8018374:	2b01      	cmp	r3, #1
 8018376:	d109      	bne.n	801838c <__gethex+0x350>
 8018378:	f01b 0f02 	tst.w	fp, #2
 801837c:	d006      	beq.n	801838c <__gethex+0x350>
 801837e:	f8da 3000 	ldr.w	r3, [sl]
 8018382:	ea4b 0b03 	orr.w	fp, fp, r3
 8018386:	f01b 0f01 	tst.w	fp, #1
 801838a:	d10f      	bne.n	80183ac <__gethex+0x370>
 801838c:	f048 0810 	orr.w	r8, r8, #16
 8018390:	e036      	b.n	8018400 <__gethex+0x3c4>
 8018392:	f04f 0b01 	mov.w	fp, #1
 8018396:	e7d0      	b.n	801833a <__gethex+0x2fe>
 8018398:	f04f 0801 	mov.w	r8, #1
 801839c:	e7e2      	b.n	8018364 <__gethex+0x328>
 801839e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80183a0:	f1c3 0301 	rsb	r3, r3, #1
 80183a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80183a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d0ef      	beq.n	801838c <__gethex+0x350>
 80183ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80183b0:	f104 0214 	add.w	r2, r4, #20
 80183b4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80183b8:	9301      	str	r3, [sp, #4]
 80183ba:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80183be:	2300      	movs	r3, #0
 80183c0:	4694      	mov	ip, r2
 80183c2:	f852 1b04 	ldr.w	r1, [r2], #4
 80183c6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80183ca:	d01e      	beq.n	801840a <__gethex+0x3ce>
 80183cc:	3101      	adds	r1, #1
 80183ce:	f8cc 1000 	str.w	r1, [ip]
 80183d2:	f1b8 0f02 	cmp.w	r8, #2
 80183d6:	f104 0214 	add.w	r2, r4, #20
 80183da:	d13d      	bne.n	8018458 <__gethex+0x41c>
 80183dc:	683b      	ldr	r3, [r7, #0]
 80183de:	3b01      	subs	r3, #1
 80183e0:	42ab      	cmp	r3, r5
 80183e2:	d10b      	bne.n	80183fc <__gethex+0x3c0>
 80183e4:	1169      	asrs	r1, r5, #5
 80183e6:	2301      	movs	r3, #1
 80183e8:	f005 051f 	and.w	r5, r5, #31
 80183ec:	fa03 f505 	lsl.w	r5, r3, r5
 80183f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80183f4:	421d      	tst	r5, r3
 80183f6:	bf18      	it	ne
 80183f8:	f04f 0801 	movne.w	r8, #1
 80183fc:	f048 0820 	orr.w	r8, r8, #32
 8018400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018402:	601c      	str	r4, [r3, #0]
 8018404:	9b02      	ldr	r3, [sp, #8]
 8018406:	601e      	str	r6, [r3, #0]
 8018408:	e6a2      	b.n	8018150 <__gethex+0x114>
 801840a:	4290      	cmp	r0, r2
 801840c:	f842 3c04 	str.w	r3, [r2, #-4]
 8018410:	d8d6      	bhi.n	80183c0 <__gethex+0x384>
 8018412:	68a2      	ldr	r2, [r4, #8]
 8018414:	4593      	cmp	fp, r2
 8018416:	db17      	blt.n	8018448 <__gethex+0x40c>
 8018418:	6861      	ldr	r1, [r4, #4]
 801841a:	4648      	mov	r0, r9
 801841c:	3101      	adds	r1, #1
 801841e:	f000 f90f 	bl	8018640 <_Balloc>
 8018422:	4682      	mov	sl, r0
 8018424:	b918      	cbnz	r0, 801842e <__gethex+0x3f2>
 8018426:	4b1b      	ldr	r3, [pc, #108]	; (8018494 <__gethex+0x458>)
 8018428:	4602      	mov	r2, r0
 801842a:	2184      	movs	r1, #132	; 0x84
 801842c:	e6b3      	b.n	8018196 <__gethex+0x15a>
 801842e:	6922      	ldr	r2, [r4, #16]
 8018430:	3202      	adds	r2, #2
 8018432:	f104 010c 	add.w	r1, r4, #12
 8018436:	0092      	lsls	r2, r2, #2
 8018438:	300c      	adds	r0, #12
 801843a:	f7fe fe96 	bl	801716a <memcpy>
 801843e:	4621      	mov	r1, r4
 8018440:	4648      	mov	r0, r9
 8018442:	f000 f93d 	bl	80186c0 <_Bfree>
 8018446:	4654      	mov	r4, sl
 8018448:	6922      	ldr	r2, [r4, #16]
 801844a:	1c51      	adds	r1, r2, #1
 801844c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018450:	6121      	str	r1, [r4, #16]
 8018452:	2101      	movs	r1, #1
 8018454:	6151      	str	r1, [r2, #20]
 8018456:	e7bc      	b.n	80183d2 <__gethex+0x396>
 8018458:	6921      	ldr	r1, [r4, #16]
 801845a:	4559      	cmp	r1, fp
 801845c:	dd0b      	ble.n	8018476 <__gethex+0x43a>
 801845e:	2101      	movs	r1, #1
 8018460:	4620      	mov	r0, r4
 8018462:	f7ff fd83 	bl	8017f6c <rshift>
 8018466:	68bb      	ldr	r3, [r7, #8]
 8018468:	3601      	adds	r6, #1
 801846a:	42b3      	cmp	r3, r6
 801846c:	f6ff aedb 	blt.w	8018226 <__gethex+0x1ea>
 8018470:	f04f 0801 	mov.w	r8, #1
 8018474:	e7c2      	b.n	80183fc <__gethex+0x3c0>
 8018476:	f015 051f 	ands.w	r5, r5, #31
 801847a:	d0f9      	beq.n	8018470 <__gethex+0x434>
 801847c:	9b01      	ldr	r3, [sp, #4]
 801847e:	441a      	add	r2, r3
 8018480:	f1c5 0520 	rsb	r5, r5, #32
 8018484:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8018488:	f000 f9cc 	bl	8018824 <__hi0bits>
 801848c:	42a8      	cmp	r0, r5
 801848e:	dbe6      	blt.n	801845e <__gethex+0x422>
 8018490:	e7ee      	b.n	8018470 <__gethex+0x434>
 8018492:	bf00      	nop
 8018494:	0801dadc 	.word	0x0801dadc

08018498 <L_shift>:
 8018498:	f1c2 0208 	rsb	r2, r2, #8
 801849c:	0092      	lsls	r2, r2, #2
 801849e:	b570      	push	{r4, r5, r6, lr}
 80184a0:	f1c2 0620 	rsb	r6, r2, #32
 80184a4:	6843      	ldr	r3, [r0, #4]
 80184a6:	6804      	ldr	r4, [r0, #0]
 80184a8:	fa03 f506 	lsl.w	r5, r3, r6
 80184ac:	432c      	orrs	r4, r5
 80184ae:	40d3      	lsrs	r3, r2
 80184b0:	6004      	str	r4, [r0, #0]
 80184b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80184b6:	4288      	cmp	r0, r1
 80184b8:	d3f4      	bcc.n	80184a4 <L_shift+0xc>
 80184ba:	bd70      	pop	{r4, r5, r6, pc}

080184bc <__match>:
 80184bc:	b530      	push	{r4, r5, lr}
 80184be:	6803      	ldr	r3, [r0, #0]
 80184c0:	3301      	adds	r3, #1
 80184c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80184c6:	b914      	cbnz	r4, 80184ce <__match+0x12>
 80184c8:	6003      	str	r3, [r0, #0]
 80184ca:	2001      	movs	r0, #1
 80184cc:	bd30      	pop	{r4, r5, pc}
 80184ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80184d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80184d6:	2d19      	cmp	r5, #25
 80184d8:	bf98      	it	ls
 80184da:	3220      	addls	r2, #32
 80184dc:	42a2      	cmp	r2, r4
 80184de:	d0f0      	beq.n	80184c2 <__match+0x6>
 80184e0:	2000      	movs	r0, #0
 80184e2:	e7f3      	b.n	80184cc <__match+0x10>

080184e4 <__hexnan>:
 80184e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184e8:	680b      	ldr	r3, [r1, #0]
 80184ea:	6801      	ldr	r1, [r0, #0]
 80184ec:	115e      	asrs	r6, r3, #5
 80184ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80184f2:	f013 031f 	ands.w	r3, r3, #31
 80184f6:	b087      	sub	sp, #28
 80184f8:	bf18      	it	ne
 80184fa:	3604      	addne	r6, #4
 80184fc:	2500      	movs	r5, #0
 80184fe:	1f37      	subs	r7, r6, #4
 8018500:	4682      	mov	sl, r0
 8018502:	4690      	mov	r8, r2
 8018504:	9301      	str	r3, [sp, #4]
 8018506:	f846 5c04 	str.w	r5, [r6, #-4]
 801850a:	46b9      	mov	r9, r7
 801850c:	463c      	mov	r4, r7
 801850e:	9502      	str	r5, [sp, #8]
 8018510:	46ab      	mov	fp, r5
 8018512:	784a      	ldrb	r2, [r1, #1]
 8018514:	1c4b      	adds	r3, r1, #1
 8018516:	9303      	str	r3, [sp, #12]
 8018518:	b342      	cbz	r2, 801856c <__hexnan+0x88>
 801851a:	4610      	mov	r0, r2
 801851c:	9105      	str	r1, [sp, #20]
 801851e:	9204      	str	r2, [sp, #16]
 8018520:	f7ff fd76 	bl	8018010 <__hexdig_fun>
 8018524:	2800      	cmp	r0, #0
 8018526:	d14f      	bne.n	80185c8 <__hexnan+0xe4>
 8018528:	9a04      	ldr	r2, [sp, #16]
 801852a:	9905      	ldr	r1, [sp, #20]
 801852c:	2a20      	cmp	r2, #32
 801852e:	d818      	bhi.n	8018562 <__hexnan+0x7e>
 8018530:	9b02      	ldr	r3, [sp, #8]
 8018532:	459b      	cmp	fp, r3
 8018534:	dd13      	ble.n	801855e <__hexnan+0x7a>
 8018536:	454c      	cmp	r4, r9
 8018538:	d206      	bcs.n	8018548 <__hexnan+0x64>
 801853a:	2d07      	cmp	r5, #7
 801853c:	dc04      	bgt.n	8018548 <__hexnan+0x64>
 801853e:	462a      	mov	r2, r5
 8018540:	4649      	mov	r1, r9
 8018542:	4620      	mov	r0, r4
 8018544:	f7ff ffa8 	bl	8018498 <L_shift>
 8018548:	4544      	cmp	r4, r8
 801854a:	d950      	bls.n	80185ee <__hexnan+0x10a>
 801854c:	2300      	movs	r3, #0
 801854e:	f1a4 0904 	sub.w	r9, r4, #4
 8018552:	f844 3c04 	str.w	r3, [r4, #-4]
 8018556:	f8cd b008 	str.w	fp, [sp, #8]
 801855a:	464c      	mov	r4, r9
 801855c:	461d      	mov	r5, r3
 801855e:	9903      	ldr	r1, [sp, #12]
 8018560:	e7d7      	b.n	8018512 <__hexnan+0x2e>
 8018562:	2a29      	cmp	r2, #41	; 0x29
 8018564:	d155      	bne.n	8018612 <__hexnan+0x12e>
 8018566:	3102      	adds	r1, #2
 8018568:	f8ca 1000 	str.w	r1, [sl]
 801856c:	f1bb 0f00 	cmp.w	fp, #0
 8018570:	d04f      	beq.n	8018612 <__hexnan+0x12e>
 8018572:	454c      	cmp	r4, r9
 8018574:	d206      	bcs.n	8018584 <__hexnan+0xa0>
 8018576:	2d07      	cmp	r5, #7
 8018578:	dc04      	bgt.n	8018584 <__hexnan+0xa0>
 801857a:	462a      	mov	r2, r5
 801857c:	4649      	mov	r1, r9
 801857e:	4620      	mov	r0, r4
 8018580:	f7ff ff8a 	bl	8018498 <L_shift>
 8018584:	4544      	cmp	r4, r8
 8018586:	d934      	bls.n	80185f2 <__hexnan+0x10e>
 8018588:	f1a8 0204 	sub.w	r2, r8, #4
 801858c:	4623      	mov	r3, r4
 801858e:	f853 1b04 	ldr.w	r1, [r3], #4
 8018592:	f842 1f04 	str.w	r1, [r2, #4]!
 8018596:	429f      	cmp	r7, r3
 8018598:	d2f9      	bcs.n	801858e <__hexnan+0xaa>
 801859a:	1b3b      	subs	r3, r7, r4
 801859c:	f023 0303 	bic.w	r3, r3, #3
 80185a0:	3304      	adds	r3, #4
 80185a2:	3e03      	subs	r6, #3
 80185a4:	3401      	adds	r4, #1
 80185a6:	42a6      	cmp	r6, r4
 80185a8:	bf38      	it	cc
 80185aa:	2304      	movcc	r3, #4
 80185ac:	4443      	add	r3, r8
 80185ae:	2200      	movs	r2, #0
 80185b0:	f843 2b04 	str.w	r2, [r3], #4
 80185b4:	429f      	cmp	r7, r3
 80185b6:	d2fb      	bcs.n	80185b0 <__hexnan+0xcc>
 80185b8:	683b      	ldr	r3, [r7, #0]
 80185ba:	b91b      	cbnz	r3, 80185c4 <__hexnan+0xe0>
 80185bc:	4547      	cmp	r7, r8
 80185be:	d126      	bne.n	801860e <__hexnan+0x12a>
 80185c0:	2301      	movs	r3, #1
 80185c2:	603b      	str	r3, [r7, #0]
 80185c4:	2005      	movs	r0, #5
 80185c6:	e025      	b.n	8018614 <__hexnan+0x130>
 80185c8:	3501      	adds	r5, #1
 80185ca:	2d08      	cmp	r5, #8
 80185cc:	f10b 0b01 	add.w	fp, fp, #1
 80185d0:	dd06      	ble.n	80185e0 <__hexnan+0xfc>
 80185d2:	4544      	cmp	r4, r8
 80185d4:	d9c3      	bls.n	801855e <__hexnan+0x7a>
 80185d6:	2300      	movs	r3, #0
 80185d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80185dc:	2501      	movs	r5, #1
 80185de:	3c04      	subs	r4, #4
 80185e0:	6822      	ldr	r2, [r4, #0]
 80185e2:	f000 000f 	and.w	r0, r0, #15
 80185e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80185ea:	6020      	str	r0, [r4, #0]
 80185ec:	e7b7      	b.n	801855e <__hexnan+0x7a>
 80185ee:	2508      	movs	r5, #8
 80185f0:	e7b5      	b.n	801855e <__hexnan+0x7a>
 80185f2:	9b01      	ldr	r3, [sp, #4]
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d0df      	beq.n	80185b8 <__hexnan+0xd4>
 80185f8:	f1c3 0320 	rsb	r3, r3, #32
 80185fc:	f04f 32ff 	mov.w	r2, #4294967295
 8018600:	40da      	lsrs	r2, r3
 8018602:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8018606:	4013      	ands	r3, r2
 8018608:	f846 3c04 	str.w	r3, [r6, #-4]
 801860c:	e7d4      	b.n	80185b8 <__hexnan+0xd4>
 801860e:	3f04      	subs	r7, #4
 8018610:	e7d2      	b.n	80185b8 <__hexnan+0xd4>
 8018612:	2004      	movs	r0, #4
 8018614:	b007      	add	sp, #28
 8018616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801861a <__ascii_mbtowc>:
 801861a:	b082      	sub	sp, #8
 801861c:	b901      	cbnz	r1, 8018620 <__ascii_mbtowc+0x6>
 801861e:	a901      	add	r1, sp, #4
 8018620:	b142      	cbz	r2, 8018634 <__ascii_mbtowc+0x1a>
 8018622:	b14b      	cbz	r3, 8018638 <__ascii_mbtowc+0x1e>
 8018624:	7813      	ldrb	r3, [r2, #0]
 8018626:	600b      	str	r3, [r1, #0]
 8018628:	7812      	ldrb	r2, [r2, #0]
 801862a:	1e10      	subs	r0, r2, #0
 801862c:	bf18      	it	ne
 801862e:	2001      	movne	r0, #1
 8018630:	b002      	add	sp, #8
 8018632:	4770      	bx	lr
 8018634:	4610      	mov	r0, r2
 8018636:	e7fb      	b.n	8018630 <__ascii_mbtowc+0x16>
 8018638:	f06f 0001 	mvn.w	r0, #1
 801863c:	e7f8      	b.n	8018630 <__ascii_mbtowc+0x16>
	...

08018640 <_Balloc>:
 8018640:	b570      	push	{r4, r5, r6, lr}
 8018642:	69c6      	ldr	r6, [r0, #28]
 8018644:	4604      	mov	r4, r0
 8018646:	460d      	mov	r5, r1
 8018648:	b976      	cbnz	r6, 8018668 <_Balloc+0x28>
 801864a:	2010      	movs	r0, #16
 801864c:	f7fc fcde 	bl	801500c <malloc>
 8018650:	4602      	mov	r2, r0
 8018652:	61e0      	str	r0, [r4, #28]
 8018654:	b920      	cbnz	r0, 8018660 <_Balloc+0x20>
 8018656:	4b18      	ldr	r3, [pc, #96]	; (80186b8 <_Balloc+0x78>)
 8018658:	4818      	ldr	r0, [pc, #96]	; (80186bc <_Balloc+0x7c>)
 801865a:	216b      	movs	r1, #107	; 0x6b
 801865c:	f7fe fda2 	bl	80171a4 <__assert_func>
 8018660:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018664:	6006      	str	r6, [r0, #0]
 8018666:	60c6      	str	r6, [r0, #12]
 8018668:	69e6      	ldr	r6, [r4, #28]
 801866a:	68f3      	ldr	r3, [r6, #12]
 801866c:	b183      	cbz	r3, 8018690 <_Balloc+0x50>
 801866e:	69e3      	ldr	r3, [r4, #28]
 8018670:	68db      	ldr	r3, [r3, #12]
 8018672:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018676:	b9b8      	cbnz	r0, 80186a8 <_Balloc+0x68>
 8018678:	2101      	movs	r1, #1
 801867a:	fa01 f605 	lsl.w	r6, r1, r5
 801867e:	1d72      	adds	r2, r6, #5
 8018680:	0092      	lsls	r2, r2, #2
 8018682:	4620      	mov	r0, r4
 8018684:	f000 fecf 	bl	8019426 <_calloc_r>
 8018688:	b160      	cbz	r0, 80186a4 <_Balloc+0x64>
 801868a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801868e:	e00e      	b.n	80186ae <_Balloc+0x6e>
 8018690:	2221      	movs	r2, #33	; 0x21
 8018692:	2104      	movs	r1, #4
 8018694:	4620      	mov	r0, r4
 8018696:	f000 fec6 	bl	8019426 <_calloc_r>
 801869a:	69e3      	ldr	r3, [r4, #28]
 801869c:	60f0      	str	r0, [r6, #12]
 801869e:	68db      	ldr	r3, [r3, #12]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d1e4      	bne.n	801866e <_Balloc+0x2e>
 80186a4:	2000      	movs	r0, #0
 80186a6:	bd70      	pop	{r4, r5, r6, pc}
 80186a8:	6802      	ldr	r2, [r0, #0]
 80186aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80186ae:	2300      	movs	r3, #0
 80186b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80186b4:	e7f7      	b.n	80186a6 <_Balloc+0x66>
 80186b6:	bf00      	nop
 80186b8:	0801d9c2 	.word	0x0801d9c2
 80186bc:	0801db4d 	.word	0x0801db4d

080186c0 <_Bfree>:
 80186c0:	b570      	push	{r4, r5, r6, lr}
 80186c2:	69c6      	ldr	r6, [r0, #28]
 80186c4:	4605      	mov	r5, r0
 80186c6:	460c      	mov	r4, r1
 80186c8:	b976      	cbnz	r6, 80186e8 <_Bfree+0x28>
 80186ca:	2010      	movs	r0, #16
 80186cc:	f7fc fc9e 	bl	801500c <malloc>
 80186d0:	4602      	mov	r2, r0
 80186d2:	61e8      	str	r0, [r5, #28]
 80186d4:	b920      	cbnz	r0, 80186e0 <_Bfree+0x20>
 80186d6:	4b09      	ldr	r3, [pc, #36]	; (80186fc <_Bfree+0x3c>)
 80186d8:	4809      	ldr	r0, [pc, #36]	; (8018700 <_Bfree+0x40>)
 80186da:	218f      	movs	r1, #143	; 0x8f
 80186dc:	f7fe fd62 	bl	80171a4 <__assert_func>
 80186e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80186e4:	6006      	str	r6, [r0, #0]
 80186e6:	60c6      	str	r6, [r0, #12]
 80186e8:	b13c      	cbz	r4, 80186fa <_Bfree+0x3a>
 80186ea:	69eb      	ldr	r3, [r5, #28]
 80186ec:	6862      	ldr	r2, [r4, #4]
 80186ee:	68db      	ldr	r3, [r3, #12]
 80186f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80186f4:	6021      	str	r1, [r4, #0]
 80186f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80186fa:	bd70      	pop	{r4, r5, r6, pc}
 80186fc:	0801d9c2 	.word	0x0801d9c2
 8018700:	0801db4d 	.word	0x0801db4d

08018704 <__multadd>:
 8018704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018708:	690d      	ldr	r5, [r1, #16]
 801870a:	4607      	mov	r7, r0
 801870c:	460c      	mov	r4, r1
 801870e:	461e      	mov	r6, r3
 8018710:	f101 0c14 	add.w	ip, r1, #20
 8018714:	2000      	movs	r0, #0
 8018716:	f8dc 3000 	ldr.w	r3, [ip]
 801871a:	b299      	uxth	r1, r3
 801871c:	fb02 6101 	mla	r1, r2, r1, r6
 8018720:	0c1e      	lsrs	r6, r3, #16
 8018722:	0c0b      	lsrs	r3, r1, #16
 8018724:	fb02 3306 	mla	r3, r2, r6, r3
 8018728:	b289      	uxth	r1, r1
 801872a:	3001      	adds	r0, #1
 801872c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018730:	4285      	cmp	r5, r0
 8018732:	f84c 1b04 	str.w	r1, [ip], #4
 8018736:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801873a:	dcec      	bgt.n	8018716 <__multadd+0x12>
 801873c:	b30e      	cbz	r6, 8018782 <__multadd+0x7e>
 801873e:	68a3      	ldr	r3, [r4, #8]
 8018740:	42ab      	cmp	r3, r5
 8018742:	dc19      	bgt.n	8018778 <__multadd+0x74>
 8018744:	6861      	ldr	r1, [r4, #4]
 8018746:	4638      	mov	r0, r7
 8018748:	3101      	adds	r1, #1
 801874a:	f7ff ff79 	bl	8018640 <_Balloc>
 801874e:	4680      	mov	r8, r0
 8018750:	b928      	cbnz	r0, 801875e <__multadd+0x5a>
 8018752:	4602      	mov	r2, r0
 8018754:	4b0c      	ldr	r3, [pc, #48]	; (8018788 <__multadd+0x84>)
 8018756:	480d      	ldr	r0, [pc, #52]	; (801878c <__multadd+0x88>)
 8018758:	21ba      	movs	r1, #186	; 0xba
 801875a:	f7fe fd23 	bl	80171a4 <__assert_func>
 801875e:	6922      	ldr	r2, [r4, #16]
 8018760:	3202      	adds	r2, #2
 8018762:	f104 010c 	add.w	r1, r4, #12
 8018766:	0092      	lsls	r2, r2, #2
 8018768:	300c      	adds	r0, #12
 801876a:	f7fe fcfe 	bl	801716a <memcpy>
 801876e:	4621      	mov	r1, r4
 8018770:	4638      	mov	r0, r7
 8018772:	f7ff ffa5 	bl	80186c0 <_Bfree>
 8018776:	4644      	mov	r4, r8
 8018778:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801877c:	3501      	adds	r5, #1
 801877e:	615e      	str	r6, [r3, #20]
 8018780:	6125      	str	r5, [r4, #16]
 8018782:	4620      	mov	r0, r4
 8018784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018788:	0801dadc 	.word	0x0801dadc
 801878c:	0801db4d 	.word	0x0801db4d

08018790 <__s2b>:
 8018790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018794:	460c      	mov	r4, r1
 8018796:	4615      	mov	r5, r2
 8018798:	461f      	mov	r7, r3
 801879a:	2209      	movs	r2, #9
 801879c:	3308      	adds	r3, #8
 801879e:	4606      	mov	r6, r0
 80187a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80187a4:	2100      	movs	r1, #0
 80187a6:	2201      	movs	r2, #1
 80187a8:	429a      	cmp	r2, r3
 80187aa:	db09      	blt.n	80187c0 <__s2b+0x30>
 80187ac:	4630      	mov	r0, r6
 80187ae:	f7ff ff47 	bl	8018640 <_Balloc>
 80187b2:	b940      	cbnz	r0, 80187c6 <__s2b+0x36>
 80187b4:	4602      	mov	r2, r0
 80187b6:	4b19      	ldr	r3, [pc, #100]	; (801881c <__s2b+0x8c>)
 80187b8:	4819      	ldr	r0, [pc, #100]	; (8018820 <__s2b+0x90>)
 80187ba:	21d3      	movs	r1, #211	; 0xd3
 80187bc:	f7fe fcf2 	bl	80171a4 <__assert_func>
 80187c0:	0052      	lsls	r2, r2, #1
 80187c2:	3101      	adds	r1, #1
 80187c4:	e7f0      	b.n	80187a8 <__s2b+0x18>
 80187c6:	9b08      	ldr	r3, [sp, #32]
 80187c8:	6143      	str	r3, [r0, #20]
 80187ca:	2d09      	cmp	r5, #9
 80187cc:	f04f 0301 	mov.w	r3, #1
 80187d0:	6103      	str	r3, [r0, #16]
 80187d2:	dd16      	ble.n	8018802 <__s2b+0x72>
 80187d4:	f104 0909 	add.w	r9, r4, #9
 80187d8:	46c8      	mov	r8, r9
 80187da:	442c      	add	r4, r5
 80187dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80187e0:	4601      	mov	r1, r0
 80187e2:	3b30      	subs	r3, #48	; 0x30
 80187e4:	220a      	movs	r2, #10
 80187e6:	4630      	mov	r0, r6
 80187e8:	f7ff ff8c 	bl	8018704 <__multadd>
 80187ec:	45a0      	cmp	r8, r4
 80187ee:	d1f5      	bne.n	80187dc <__s2b+0x4c>
 80187f0:	f1a5 0408 	sub.w	r4, r5, #8
 80187f4:	444c      	add	r4, r9
 80187f6:	1b2d      	subs	r5, r5, r4
 80187f8:	1963      	adds	r3, r4, r5
 80187fa:	42bb      	cmp	r3, r7
 80187fc:	db04      	blt.n	8018808 <__s2b+0x78>
 80187fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018802:	340a      	adds	r4, #10
 8018804:	2509      	movs	r5, #9
 8018806:	e7f6      	b.n	80187f6 <__s2b+0x66>
 8018808:	f814 3b01 	ldrb.w	r3, [r4], #1
 801880c:	4601      	mov	r1, r0
 801880e:	3b30      	subs	r3, #48	; 0x30
 8018810:	220a      	movs	r2, #10
 8018812:	4630      	mov	r0, r6
 8018814:	f7ff ff76 	bl	8018704 <__multadd>
 8018818:	e7ee      	b.n	80187f8 <__s2b+0x68>
 801881a:	bf00      	nop
 801881c:	0801dadc 	.word	0x0801dadc
 8018820:	0801db4d 	.word	0x0801db4d

08018824 <__hi0bits>:
 8018824:	0c03      	lsrs	r3, r0, #16
 8018826:	041b      	lsls	r3, r3, #16
 8018828:	b9d3      	cbnz	r3, 8018860 <__hi0bits+0x3c>
 801882a:	0400      	lsls	r0, r0, #16
 801882c:	2310      	movs	r3, #16
 801882e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018832:	bf04      	itt	eq
 8018834:	0200      	lsleq	r0, r0, #8
 8018836:	3308      	addeq	r3, #8
 8018838:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801883c:	bf04      	itt	eq
 801883e:	0100      	lsleq	r0, r0, #4
 8018840:	3304      	addeq	r3, #4
 8018842:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018846:	bf04      	itt	eq
 8018848:	0080      	lsleq	r0, r0, #2
 801884a:	3302      	addeq	r3, #2
 801884c:	2800      	cmp	r0, #0
 801884e:	db05      	blt.n	801885c <__hi0bits+0x38>
 8018850:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018854:	f103 0301 	add.w	r3, r3, #1
 8018858:	bf08      	it	eq
 801885a:	2320      	moveq	r3, #32
 801885c:	4618      	mov	r0, r3
 801885e:	4770      	bx	lr
 8018860:	2300      	movs	r3, #0
 8018862:	e7e4      	b.n	801882e <__hi0bits+0xa>

08018864 <__lo0bits>:
 8018864:	6803      	ldr	r3, [r0, #0]
 8018866:	f013 0207 	ands.w	r2, r3, #7
 801886a:	d00c      	beq.n	8018886 <__lo0bits+0x22>
 801886c:	07d9      	lsls	r1, r3, #31
 801886e:	d422      	bmi.n	80188b6 <__lo0bits+0x52>
 8018870:	079a      	lsls	r2, r3, #30
 8018872:	bf49      	itett	mi
 8018874:	085b      	lsrmi	r3, r3, #1
 8018876:	089b      	lsrpl	r3, r3, #2
 8018878:	6003      	strmi	r3, [r0, #0]
 801887a:	2201      	movmi	r2, #1
 801887c:	bf5c      	itt	pl
 801887e:	6003      	strpl	r3, [r0, #0]
 8018880:	2202      	movpl	r2, #2
 8018882:	4610      	mov	r0, r2
 8018884:	4770      	bx	lr
 8018886:	b299      	uxth	r1, r3
 8018888:	b909      	cbnz	r1, 801888e <__lo0bits+0x2a>
 801888a:	0c1b      	lsrs	r3, r3, #16
 801888c:	2210      	movs	r2, #16
 801888e:	b2d9      	uxtb	r1, r3
 8018890:	b909      	cbnz	r1, 8018896 <__lo0bits+0x32>
 8018892:	3208      	adds	r2, #8
 8018894:	0a1b      	lsrs	r3, r3, #8
 8018896:	0719      	lsls	r1, r3, #28
 8018898:	bf04      	itt	eq
 801889a:	091b      	lsreq	r3, r3, #4
 801889c:	3204      	addeq	r2, #4
 801889e:	0799      	lsls	r1, r3, #30
 80188a0:	bf04      	itt	eq
 80188a2:	089b      	lsreq	r3, r3, #2
 80188a4:	3202      	addeq	r2, #2
 80188a6:	07d9      	lsls	r1, r3, #31
 80188a8:	d403      	bmi.n	80188b2 <__lo0bits+0x4e>
 80188aa:	085b      	lsrs	r3, r3, #1
 80188ac:	f102 0201 	add.w	r2, r2, #1
 80188b0:	d003      	beq.n	80188ba <__lo0bits+0x56>
 80188b2:	6003      	str	r3, [r0, #0]
 80188b4:	e7e5      	b.n	8018882 <__lo0bits+0x1e>
 80188b6:	2200      	movs	r2, #0
 80188b8:	e7e3      	b.n	8018882 <__lo0bits+0x1e>
 80188ba:	2220      	movs	r2, #32
 80188bc:	e7e1      	b.n	8018882 <__lo0bits+0x1e>
	...

080188c0 <__i2b>:
 80188c0:	b510      	push	{r4, lr}
 80188c2:	460c      	mov	r4, r1
 80188c4:	2101      	movs	r1, #1
 80188c6:	f7ff febb 	bl	8018640 <_Balloc>
 80188ca:	4602      	mov	r2, r0
 80188cc:	b928      	cbnz	r0, 80188da <__i2b+0x1a>
 80188ce:	4b05      	ldr	r3, [pc, #20]	; (80188e4 <__i2b+0x24>)
 80188d0:	4805      	ldr	r0, [pc, #20]	; (80188e8 <__i2b+0x28>)
 80188d2:	f240 1145 	movw	r1, #325	; 0x145
 80188d6:	f7fe fc65 	bl	80171a4 <__assert_func>
 80188da:	2301      	movs	r3, #1
 80188dc:	6144      	str	r4, [r0, #20]
 80188de:	6103      	str	r3, [r0, #16]
 80188e0:	bd10      	pop	{r4, pc}
 80188e2:	bf00      	nop
 80188e4:	0801dadc 	.word	0x0801dadc
 80188e8:	0801db4d 	.word	0x0801db4d

080188ec <__multiply>:
 80188ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188f0:	4691      	mov	r9, r2
 80188f2:	690a      	ldr	r2, [r1, #16]
 80188f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80188f8:	429a      	cmp	r2, r3
 80188fa:	bfb8      	it	lt
 80188fc:	460b      	movlt	r3, r1
 80188fe:	460c      	mov	r4, r1
 8018900:	bfbc      	itt	lt
 8018902:	464c      	movlt	r4, r9
 8018904:	4699      	movlt	r9, r3
 8018906:	6927      	ldr	r7, [r4, #16]
 8018908:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801890c:	68a3      	ldr	r3, [r4, #8]
 801890e:	6861      	ldr	r1, [r4, #4]
 8018910:	eb07 060a 	add.w	r6, r7, sl
 8018914:	42b3      	cmp	r3, r6
 8018916:	b085      	sub	sp, #20
 8018918:	bfb8      	it	lt
 801891a:	3101      	addlt	r1, #1
 801891c:	f7ff fe90 	bl	8018640 <_Balloc>
 8018920:	b930      	cbnz	r0, 8018930 <__multiply+0x44>
 8018922:	4602      	mov	r2, r0
 8018924:	4b44      	ldr	r3, [pc, #272]	; (8018a38 <__multiply+0x14c>)
 8018926:	4845      	ldr	r0, [pc, #276]	; (8018a3c <__multiply+0x150>)
 8018928:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801892c:	f7fe fc3a 	bl	80171a4 <__assert_func>
 8018930:	f100 0514 	add.w	r5, r0, #20
 8018934:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018938:	462b      	mov	r3, r5
 801893a:	2200      	movs	r2, #0
 801893c:	4543      	cmp	r3, r8
 801893e:	d321      	bcc.n	8018984 <__multiply+0x98>
 8018940:	f104 0314 	add.w	r3, r4, #20
 8018944:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018948:	f109 0314 	add.w	r3, r9, #20
 801894c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018950:	9202      	str	r2, [sp, #8]
 8018952:	1b3a      	subs	r2, r7, r4
 8018954:	3a15      	subs	r2, #21
 8018956:	f022 0203 	bic.w	r2, r2, #3
 801895a:	3204      	adds	r2, #4
 801895c:	f104 0115 	add.w	r1, r4, #21
 8018960:	428f      	cmp	r7, r1
 8018962:	bf38      	it	cc
 8018964:	2204      	movcc	r2, #4
 8018966:	9201      	str	r2, [sp, #4]
 8018968:	9a02      	ldr	r2, [sp, #8]
 801896a:	9303      	str	r3, [sp, #12]
 801896c:	429a      	cmp	r2, r3
 801896e:	d80c      	bhi.n	801898a <__multiply+0x9e>
 8018970:	2e00      	cmp	r6, #0
 8018972:	dd03      	ble.n	801897c <__multiply+0x90>
 8018974:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018978:	2b00      	cmp	r3, #0
 801897a:	d05b      	beq.n	8018a34 <__multiply+0x148>
 801897c:	6106      	str	r6, [r0, #16]
 801897e:	b005      	add	sp, #20
 8018980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018984:	f843 2b04 	str.w	r2, [r3], #4
 8018988:	e7d8      	b.n	801893c <__multiply+0x50>
 801898a:	f8b3 a000 	ldrh.w	sl, [r3]
 801898e:	f1ba 0f00 	cmp.w	sl, #0
 8018992:	d024      	beq.n	80189de <__multiply+0xf2>
 8018994:	f104 0e14 	add.w	lr, r4, #20
 8018998:	46a9      	mov	r9, r5
 801899a:	f04f 0c00 	mov.w	ip, #0
 801899e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80189a2:	f8d9 1000 	ldr.w	r1, [r9]
 80189a6:	fa1f fb82 	uxth.w	fp, r2
 80189aa:	b289      	uxth	r1, r1
 80189ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80189b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80189b4:	f8d9 2000 	ldr.w	r2, [r9]
 80189b8:	4461      	add	r1, ip
 80189ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80189be:	fb0a c20b 	mla	r2, sl, fp, ip
 80189c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80189c6:	b289      	uxth	r1, r1
 80189c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80189cc:	4577      	cmp	r7, lr
 80189ce:	f849 1b04 	str.w	r1, [r9], #4
 80189d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80189d6:	d8e2      	bhi.n	801899e <__multiply+0xb2>
 80189d8:	9a01      	ldr	r2, [sp, #4]
 80189da:	f845 c002 	str.w	ip, [r5, r2]
 80189de:	9a03      	ldr	r2, [sp, #12]
 80189e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80189e4:	3304      	adds	r3, #4
 80189e6:	f1b9 0f00 	cmp.w	r9, #0
 80189ea:	d021      	beq.n	8018a30 <__multiply+0x144>
 80189ec:	6829      	ldr	r1, [r5, #0]
 80189ee:	f104 0c14 	add.w	ip, r4, #20
 80189f2:	46ae      	mov	lr, r5
 80189f4:	f04f 0a00 	mov.w	sl, #0
 80189f8:	f8bc b000 	ldrh.w	fp, [ip]
 80189fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018a00:	fb09 220b 	mla	r2, r9, fp, r2
 8018a04:	4452      	add	r2, sl
 8018a06:	b289      	uxth	r1, r1
 8018a08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018a0c:	f84e 1b04 	str.w	r1, [lr], #4
 8018a10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018a14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018a18:	f8be 1000 	ldrh.w	r1, [lr]
 8018a1c:	fb09 110a 	mla	r1, r9, sl, r1
 8018a20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8018a24:	4567      	cmp	r7, ip
 8018a26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018a2a:	d8e5      	bhi.n	80189f8 <__multiply+0x10c>
 8018a2c:	9a01      	ldr	r2, [sp, #4]
 8018a2e:	50a9      	str	r1, [r5, r2]
 8018a30:	3504      	adds	r5, #4
 8018a32:	e799      	b.n	8018968 <__multiply+0x7c>
 8018a34:	3e01      	subs	r6, #1
 8018a36:	e79b      	b.n	8018970 <__multiply+0x84>
 8018a38:	0801dadc 	.word	0x0801dadc
 8018a3c:	0801db4d 	.word	0x0801db4d

08018a40 <__pow5mult>:
 8018a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a44:	4615      	mov	r5, r2
 8018a46:	f012 0203 	ands.w	r2, r2, #3
 8018a4a:	4606      	mov	r6, r0
 8018a4c:	460f      	mov	r7, r1
 8018a4e:	d007      	beq.n	8018a60 <__pow5mult+0x20>
 8018a50:	4c25      	ldr	r4, [pc, #148]	; (8018ae8 <__pow5mult+0xa8>)
 8018a52:	3a01      	subs	r2, #1
 8018a54:	2300      	movs	r3, #0
 8018a56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018a5a:	f7ff fe53 	bl	8018704 <__multadd>
 8018a5e:	4607      	mov	r7, r0
 8018a60:	10ad      	asrs	r5, r5, #2
 8018a62:	d03d      	beq.n	8018ae0 <__pow5mult+0xa0>
 8018a64:	69f4      	ldr	r4, [r6, #28]
 8018a66:	b97c      	cbnz	r4, 8018a88 <__pow5mult+0x48>
 8018a68:	2010      	movs	r0, #16
 8018a6a:	f7fc facf 	bl	801500c <malloc>
 8018a6e:	4602      	mov	r2, r0
 8018a70:	61f0      	str	r0, [r6, #28]
 8018a72:	b928      	cbnz	r0, 8018a80 <__pow5mult+0x40>
 8018a74:	4b1d      	ldr	r3, [pc, #116]	; (8018aec <__pow5mult+0xac>)
 8018a76:	481e      	ldr	r0, [pc, #120]	; (8018af0 <__pow5mult+0xb0>)
 8018a78:	f240 11b3 	movw	r1, #435	; 0x1b3
 8018a7c:	f7fe fb92 	bl	80171a4 <__assert_func>
 8018a80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018a84:	6004      	str	r4, [r0, #0]
 8018a86:	60c4      	str	r4, [r0, #12]
 8018a88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8018a8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018a90:	b94c      	cbnz	r4, 8018aa6 <__pow5mult+0x66>
 8018a92:	f240 2171 	movw	r1, #625	; 0x271
 8018a96:	4630      	mov	r0, r6
 8018a98:	f7ff ff12 	bl	80188c0 <__i2b>
 8018a9c:	2300      	movs	r3, #0
 8018a9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018aa2:	4604      	mov	r4, r0
 8018aa4:	6003      	str	r3, [r0, #0]
 8018aa6:	f04f 0900 	mov.w	r9, #0
 8018aaa:	07eb      	lsls	r3, r5, #31
 8018aac:	d50a      	bpl.n	8018ac4 <__pow5mult+0x84>
 8018aae:	4639      	mov	r1, r7
 8018ab0:	4622      	mov	r2, r4
 8018ab2:	4630      	mov	r0, r6
 8018ab4:	f7ff ff1a 	bl	80188ec <__multiply>
 8018ab8:	4639      	mov	r1, r7
 8018aba:	4680      	mov	r8, r0
 8018abc:	4630      	mov	r0, r6
 8018abe:	f7ff fdff 	bl	80186c0 <_Bfree>
 8018ac2:	4647      	mov	r7, r8
 8018ac4:	106d      	asrs	r5, r5, #1
 8018ac6:	d00b      	beq.n	8018ae0 <__pow5mult+0xa0>
 8018ac8:	6820      	ldr	r0, [r4, #0]
 8018aca:	b938      	cbnz	r0, 8018adc <__pow5mult+0x9c>
 8018acc:	4622      	mov	r2, r4
 8018ace:	4621      	mov	r1, r4
 8018ad0:	4630      	mov	r0, r6
 8018ad2:	f7ff ff0b 	bl	80188ec <__multiply>
 8018ad6:	6020      	str	r0, [r4, #0]
 8018ad8:	f8c0 9000 	str.w	r9, [r0]
 8018adc:	4604      	mov	r4, r0
 8018ade:	e7e4      	b.n	8018aaa <__pow5mult+0x6a>
 8018ae0:	4638      	mov	r0, r7
 8018ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ae6:	bf00      	nop
 8018ae8:	0801dc98 	.word	0x0801dc98
 8018aec:	0801d9c2 	.word	0x0801d9c2
 8018af0:	0801db4d 	.word	0x0801db4d

08018af4 <__lshift>:
 8018af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018af8:	460c      	mov	r4, r1
 8018afa:	6849      	ldr	r1, [r1, #4]
 8018afc:	6923      	ldr	r3, [r4, #16]
 8018afe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018b02:	68a3      	ldr	r3, [r4, #8]
 8018b04:	4607      	mov	r7, r0
 8018b06:	4691      	mov	r9, r2
 8018b08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018b0c:	f108 0601 	add.w	r6, r8, #1
 8018b10:	42b3      	cmp	r3, r6
 8018b12:	db0b      	blt.n	8018b2c <__lshift+0x38>
 8018b14:	4638      	mov	r0, r7
 8018b16:	f7ff fd93 	bl	8018640 <_Balloc>
 8018b1a:	4605      	mov	r5, r0
 8018b1c:	b948      	cbnz	r0, 8018b32 <__lshift+0x3e>
 8018b1e:	4602      	mov	r2, r0
 8018b20:	4b28      	ldr	r3, [pc, #160]	; (8018bc4 <__lshift+0xd0>)
 8018b22:	4829      	ldr	r0, [pc, #164]	; (8018bc8 <__lshift+0xd4>)
 8018b24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018b28:	f7fe fb3c 	bl	80171a4 <__assert_func>
 8018b2c:	3101      	adds	r1, #1
 8018b2e:	005b      	lsls	r3, r3, #1
 8018b30:	e7ee      	b.n	8018b10 <__lshift+0x1c>
 8018b32:	2300      	movs	r3, #0
 8018b34:	f100 0114 	add.w	r1, r0, #20
 8018b38:	f100 0210 	add.w	r2, r0, #16
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	4553      	cmp	r3, sl
 8018b40:	db33      	blt.n	8018baa <__lshift+0xb6>
 8018b42:	6920      	ldr	r0, [r4, #16]
 8018b44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018b48:	f104 0314 	add.w	r3, r4, #20
 8018b4c:	f019 091f 	ands.w	r9, r9, #31
 8018b50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018b54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018b58:	d02b      	beq.n	8018bb2 <__lshift+0xbe>
 8018b5a:	f1c9 0e20 	rsb	lr, r9, #32
 8018b5e:	468a      	mov	sl, r1
 8018b60:	2200      	movs	r2, #0
 8018b62:	6818      	ldr	r0, [r3, #0]
 8018b64:	fa00 f009 	lsl.w	r0, r0, r9
 8018b68:	4310      	orrs	r0, r2
 8018b6a:	f84a 0b04 	str.w	r0, [sl], #4
 8018b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b72:	459c      	cmp	ip, r3
 8018b74:	fa22 f20e 	lsr.w	r2, r2, lr
 8018b78:	d8f3      	bhi.n	8018b62 <__lshift+0x6e>
 8018b7a:	ebac 0304 	sub.w	r3, ip, r4
 8018b7e:	3b15      	subs	r3, #21
 8018b80:	f023 0303 	bic.w	r3, r3, #3
 8018b84:	3304      	adds	r3, #4
 8018b86:	f104 0015 	add.w	r0, r4, #21
 8018b8a:	4584      	cmp	ip, r0
 8018b8c:	bf38      	it	cc
 8018b8e:	2304      	movcc	r3, #4
 8018b90:	50ca      	str	r2, [r1, r3]
 8018b92:	b10a      	cbz	r2, 8018b98 <__lshift+0xa4>
 8018b94:	f108 0602 	add.w	r6, r8, #2
 8018b98:	3e01      	subs	r6, #1
 8018b9a:	4638      	mov	r0, r7
 8018b9c:	612e      	str	r6, [r5, #16]
 8018b9e:	4621      	mov	r1, r4
 8018ba0:	f7ff fd8e 	bl	80186c0 <_Bfree>
 8018ba4:	4628      	mov	r0, r5
 8018ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018baa:	f842 0f04 	str.w	r0, [r2, #4]!
 8018bae:	3301      	adds	r3, #1
 8018bb0:	e7c5      	b.n	8018b3e <__lshift+0x4a>
 8018bb2:	3904      	subs	r1, #4
 8018bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8018bb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8018bbc:	459c      	cmp	ip, r3
 8018bbe:	d8f9      	bhi.n	8018bb4 <__lshift+0xc0>
 8018bc0:	e7ea      	b.n	8018b98 <__lshift+0xa4>
 8018bc2:	bf00      	nop
 8018bc4:	0801dadc 	.word	0x0801dadc
 8018bc8:	0801db4d 	.word	0x0801db4d

08018bcc <__mcmp>:
 8018bcc:	b530      	push	{r4, r5, lr}
 8018bce:	6902      	ldr	r2, [r0, #16]
 8018bd0:	690c      	ldr	r4, [r1, #16]
 8018bd2:	1b12      	subs	r2, r2, r4
 8018bd4:	d10e      	bne.n	8018bf4 <__mcmp+0x28>
 8018bd6:	f100 0314 	add.w	r3, r0, #20
 8018bda:	3114      	adds	r1, #20
 8018bdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018be0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018be4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018be8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018bec:	42a5      	cmp	r5, r4
 8018bee:	d003      	beq.n	8018bf8 <__mcmp+0x2c>
 8018bf0:	d305      	bcc.n	8018bfe <__mcmp+0x32>
 8018bf2:	2201      	movs	r2, #1
 8018bf4:	4610      	mov	r0, r2
 8018bf6:	bd30      	pop	{r4, r5, pc}
 8018bf8:	4283      	cmp	r3, r0
 8018bfa:	d3f3      	bcc.n	8018be4 <__mcmp+0x18>
 8018bfc:	e7fa      	b.n	8018bf4 <__mcmp+0x28>
 8018bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8018c02:	e7f7      	b.n	8018bf4 <__mcmp+0x28>

08018c04 <__mdiff>:
 8018c04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c08:	460c      	mov	r4, r1
 8018c0a:	4606      	mov	r6, r0
 8018c0c:	4611      	mov	r1, r2
 8018c0e:	4620      	mov	r0, r4
 8018c10:	4690      	mov	r8, r2
 8018c12:	f7ff ffdb 	bl	8018bcc <__mcmp>
 8018c16:	1e05      	subs	r5, r0, #0
 8018c18:	d110      	bne.n	8018c3c <__mdiff+0x38>
 8018c1a:	4629      	mov	r1, r5
 8018c1c:	4630      	mov	r0, r6
 8018c1e:	f7ff fd0f 	bl	8018640 <_Balloc>
 8018c22:	b930      	cbnz	r0, 8018c32 <__mdiff+0x2e>
 8018c24:	4b3a      	ldr	r3, [pc, #232]	; (8018d10 <__mdiff+0x10c>)
 8018c26:	4602      	mov	r2, r0
 8018c28:	f240 2137 	movw	r1, #567	; 0x237
 8018c2c:	4839      	ldr	r0, [pc, #228]	; (8018d14 <__mdiff+0x110>)
 8018c2e:	f7fe fab9 	bl	80171a4 <__assert_func>
 8018c32:	2301      	movs	r3, #1
 8018c34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018c38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c3c:	bfa4      	itt	ge
 8018c3e:	4643      	movge	r3, r8
 8018c40:	46a0      	movge	r8, r4
 8018c42:	4630      	mov	r0, r6
 8018c44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018c48:	bfa6      	itte	ge
 8018c4a:	461c      	movge	r4, r3
 8018c4c:	2500      	movge	r5, #0
 8018c4e:	2501      	movlt	r5, #1
 8018c50:	f7ff fcf6 	bl	8018640 <_Balloc>
 8018c54:	b920      	cbnz	r0, 8018c60 <__mdiff+0x5c>
 8018c56:	4b2e      	ldr	r3, [pc, #184]	; (8018d10 <__mdiff+0x10c>)
 8018c58:	4602      	mov	r2, r0
 8018c5a:	f240 2145 	movw	r1, #581	; 0x245
 8018c5e:	e7e5      	b.n	8018c2c <__mdiff+0x28>
 8018c60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018c64:	6926      	ldr	r6, [r4, #16]
 8018c66:	60c5      	str	r5, [r0, #12]
 8018c68:	f104 0914 	add.w	r9, r4, #20
 8018c6c:	f108 0514 	add.w	r5, r8, #20
 8018c70:	f100 0e14 	add.w	lr, r0, #20
 8018c74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018c78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018c7c:	f108 0210 	add.w	r2, r8, #16
 8018c80:	46f2      	mov	sl, lr
 8018c82:	2100      	movs	r1, #0
 8018c84:	f859 3b04 	ldr.w	r3, [r9], #4
 8018c88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018c8c:	fa11 f88b 	uxtah	r8, r1, fp
 8018c90:	b299      	uxth	r1, r3
 8018c92:	0c1b      	lsrs	r3, r3, #16
 8018c94:	eba8 0801 	sub.w	r8, r8, r1
 8018c98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018c9c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018ca0:	fa1f f888 	uxth.w	r8, r8
 8018ca4:	1419      	asrs	r1, r3, #16
 8018ca6:	454e      	cmp	r6, r9
 8018ca8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018cac:	f84a 3b04 	str.w	r3, [sl], #4
 8018cb0:	d8e8      	bhi.n	8018c84 <__mdiff+0x80>
 8018cb2:	1b33      	subs	r3, r6, r4
 8018cb4:	3b15      	subs	r3, #21
 8018cb6:	f023 0303 	bic.w	r3, r3, #3
 8018cba:	3304      	adds	r3, #4
 8018cbc:	3415      	adds	r4, #21
 8018cbe:	42a6      	cmp	r6, r4
 8018cc0:	bf38      	it	cc
 8018cc2:	2304      	movcc	r3, #4
 8018cc4:	441d      	add	r5, r3
 8018cc6:	4473      	add	r3, lr
 8018cc8:	469e      	mov	lr, r3
 8018cca:	462e      	mov	r6, r5
 8018ccc:	4566      	cmp	r6, ip
 8018cce:	d30e      	bcc.n	8018cee <__mdiff+0xea>
 8018cd0:	f10c 0203 	add.w	r2, ip, #3
 8018cd4:	1b52      	subs	r2, r2, r5
 8018cd6:	f022 0203 	bic.w	r2, r2, #3
 8018cda:	3d03      	subs	r5, #3
 8018cdc:	45ac      	cmp	ip, r5
 8018cde:	bf38      	it	cc
 8018ce0:	2200      	movcc	r2, #0
 8018ce2:	4413      	add	r3, r2
 8018ce4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8018ce8:	b17a      	cbz	r2, 8018d0a <__mdiff+0x106>
 8018cea:	6107      	str	r7, [r0, #16]
 8018cec:	e7a4      	b.n	8018c38 <__mdiff+0x34>
 8018cee:	f856 8b04 	ldr.w	r8, [r6], #4
 8018cf2:	fa11 f288 	uxtah	r2, r1, r8
 8018cf6:	1414      	asrs	r4, r2, #16
 8018cf8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018cfc:	b292      	uxth	r2, r2
 8018cfe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018d02:	f84e 2b04 	str.w	r2, [lr], #4
 8018d06:	1421      	asrs	r1, r4, #16
 8018d08:	e7e0      	b.n	8018ccc <__mdiff+0xc8>
 8018d0a:	3f01      	subs	r7, #1
 8018d0c:	e7ea      	b.n	8018ce4 <__mdiff+0xe0>
 8018d0e:	bf00      	nop
 8018d10:	0801dadc 	.word	0x0801dadc
 8018d14:	0801db4d 	.word	0x0801db4d

08018d18 <__ulp>:
 8018d18:	b082      	sub	sp, #8
 8018d1a:	ed8d 0b00 	vstr	d0, [sp]
 8018d1e:	9a01      	ldr	r2, [sp, #4]
 8018d20:	4b0f      	ldr	r3, [pc, #60]	; (8018d60 <__ulp+0x48>)
 8018d22:	4013      	ands	r3, r2
 8018d24:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	dc08      	bgt.n	8018d3e <__ulp+0x26>
 8018d2c:	425b      	negs	r3, r3
 8018d2e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8018d32:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018d36:	da04      	bge.n	8018d42 <__ulp+0x2a>
 8018d38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8018d3c:	4113      	asrs	r3, r2
 8018d3e:	2200      	movs	r2, #0
 8018d40:	e008      	b.n	8018d54 <__ulp+0x3c>
 8018d42:	f1a2 0314 	sub.w	r3, r2, #20
 8018d46:	2b1e      	cmp	r3, #30
 8018d48:	bfda      	itte	le
 8018d4a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8018d4e:	40da      	lsrle	r2, r3
 8018d50:	2201      	movgt	r2, #1
 8018d52:	2300      	movs	r3, #0
 8018d54:	4619      	mov	r1, r3
 8018d56:	4610      	mov	r0, r2
 8018d58:	ec41 0b10 	vmov	d0, r0, r1
 8018d5c:	b002      	add	sp, #8
 8018d5e:	4770      	bx	lr
 8018d60:	7ff00000 	.word	0x7ff00000

08018d64 <__b2d>:
 8018d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d68:	6906      	ldr	r6, [r0, #16]
 8018d6a:	f100 0814 	add.w	r8, r0, #20
 8018d6e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8018d72:	1f37      	subs	r7, r6, #4
 8018d74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018d78:	4610      	mov	r0, r2
 8018d7a:	f7ff fd53 	bl	8018824 <__hi0bits>
 8018d7e:	f1c0 0320 	rsb	r3, r0, #32
 8018d82:	280a      	cmp	r0, #10
 8018d84:	600b      	str	r3, [r1, #0]
 8018d86:	491b      	ldr	r1, [pc, #108]	; (8018df4 <__b2d+0x90>)
 8018d88:	dc15      	bgt.n	8018db6 <__b2d+0x52>
 8018d8a:	f1c0 0c0b 	rsb	ip, r0, #11
 8018d8e:	fa22 f30c 	lsr.w	r3, r2, ip
 8018d92:	45b8      	cmp	r8, r7
 8018d94:	ea43 0501 	orr.w	r5, r3, r1
 8018d98:	bf34      	ite	cc
 8018d9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018d9e:	2300      	movcs	r3, #0
 8018da0:	3015      	adds	r0, #21
 8018da2:	fa02 f000 	lsl.w	r0, r2, r0
 8018da6:	fa23 f30c 	lsr.w	r3, r3, ip
 8018daa:	4303      	orrs	r3, r0
 8018dac:	461c      	mov	r4, r3
 8018dae:	ec45 4b10 	vmov	d0, r4, r5
 8018db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018db6:	45b8      	cmp	r8, r7
 8018db8:	bf3a      	itte	cc
 8018dba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018dbe:	f1a6 0708 	subcc.w	r7, r6, #8
 8018dc2:	2300      	movcs	r3, #0
 8018dc4:	380b      	subs	r0, #11
 8018dc6:	d012      	beq.n	8018dee <__b2d+0x8a>
 8018dc8:	f1c0 0120 	rsb	r1, r0, #32
 8018dcc:	fa23 f401 	lsr.w	r4, r3, r1
 8018dd0:	4082      	lsls	r2, r0
 8018dd2:	4322      	orrs	r2, r4
 8018dd4:	4547      	cmp	r7, r8
 8018dd6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8018dda:	bf8c      	ite	hi
 8018ddc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018de0:	2200      	movls	r2, #0
 8018de2:	4083      	lsls	r3, r0
 8018de4:	40ca      	lsrs	r2, r1
 8018de6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018dea:	4313      	orrs	r3, r2
 8018dec:	e7de      	b.n	8018dac <__b2d+0x48>
 8018dee:	ea42 0501 	orr.w	r5, r2, r1
 8018df2:	e7db      	b.n	8018dac <__b2d+0x48>
 8018df4:	3ff00000 	.word	0x3ff00000

08018df8 <__d2b>:
 8018df8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018dfc:	460f      	mov	r7, r1
 8018dfe:	2101      	movs	r1, #1
 8018e00:	ec59 8b10 	vmov	r8, r9, d0
 8018e04:	4616      	mov	r6, r2
 8018e06:	f7ff fc1b 	bl	8018640 <_Balloc>
 8018e0a:	4604      	mov	r4, r0
 8018e0c:	b930      	cbnz	r0, 8018e1c <__d2b+0x24>
 8018e0e:	4602      	mov	r2, r0
 8018e10:	4b24      	ldr	r3, [pc, #144]	; (8018ea4 <__d2b+0xac>)
 8018e12:	4825      	ldr	r0, [pc, #148]	; (8018ea8 <__d2b+0xb0>)
 8018e14:	f240 310f 	movw	r1, #783	; 0x30f
 8018e18:	f7fe f9c4 	bl	80171a4 <__assert_func>
 8018e1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018e20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018e24:	bb2d      	cbnz	r5, 8018e72 <__d2b+0x7a>
 8018e26:	9301      	str	r3, [sp, #4]
 8018e28:	f1b8 0300 	subs.w	r3, r8, #0
 8018e2c:	d026      	beq.n	8018e7c <__d2b+0x84>
 8018e2e:	4668      	mov	r0, sp
 8018e30:	9300      	str	r3, [sp, #0]
 8018e32:	f7ff fd17 	bl	8018864 <__lo0bits>
 8018e36:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018e3a:	b1e8      	cbz	r0, 8018e78 <__d2b+0x80>
 8018e3c:	f1c0 0320 	rsb	r3, r0, #32
 8018e40:	fa02 f303 	lsl.w	r3, r2, r3
 8018e44:	430b      	orrs	r3, r1
 8018e46:	40c2      	lsrs	r2, r0
 8018e48:	6163      	str	r3, [r4, #20]
 8018e4a:	9201      	str	r2, [sp, #4]
 8018e4c:	9b01      	ldr	r3, [sp, #4]
 8018e4e:	61a3      	str	r3, [r4, #24]
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	bf14      	ite	ne
 8018e54:	2202      	movne	r2, #2
 8018e56:	2201      	moveq	r2, #1
 8018e58:	6122      	str	r2, [r4, #16]
 8018e5a:	b1bd      	cbz	r5, 8018e8c <__d2b+0x94>
 8018e5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018e60:	4405      	add	r5, r0
 8018e62:	603d      	str	r5, [r7, #0]
 8018e64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018e68:	6030      	str	r0, [r6, #0]
 8018e6a:	4620      	mov	r0, r4
 8018e6c:	b003      	add	sp, #12
 8018e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018e76:	e7d6      	b.n	8018e26 <__d2b+0x2e>
 8018e78:	6161      	str	r1, [r4, #20]
 8018e7a:	e7e7      	b.n	8018e4c <__d2b+0x54>
 8018e7c:	a801      	add	r0, sp, #4
 8018e7e:	f7ff fcf1 	bl	8018864 <__lo0bits>
 8018e82:	9b01      	ldr	r3, [sp, #4]
 8018e84:	6163      	str	r3, [r4, #20]
 8018e86:	3020      	adds	r0, #32
 8018e88:	2201      	movs	r2, #1
 8018e8a:	e7e5      	b.n	8018e58 <__d2b+0x60>
 8018e8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018e90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018e94:	6038      	str	r0, [r7, #0]
 8018e96:	6918      	ldr	r0, [r3, #16]
 8018e98:	f7ff fcc4 	bl	8018824 <__hi0bits>
 8018e9c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018ea0:	e7e2      	b.n	8018e68 <__d2b+0x70>
 8018ea2:	bf00      	nop
 8018ea4:	0801dadc 	.word	0x0801dadc
 8018ea8:	0801db4d 	.word	0x0801db4d

08018eac <__ratio>:
 8018eac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eb0:	4688      	mov	r8, r1
 8018eb2:	4669      	mov	r1, sp
 8018eb4:	4681      	mov	r9, r0
 8018eb6:	f7ff ff55 	bl	8018d64 <__b2d>
 8018eba:	a901      	add	r1, sp, #4
 8018ebc:	4640      	mov	r0, r8
 8018ebe:	ec55 4b10 	vmov	r4, r5, d0
 8018ec2:	f7ff ff4f 	bl	8018d64 <__b2d>
 8018ec6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018eca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018ece:	eba3 0c02 	sub.w	ip, r3, r2
 8018ed2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018ed6:	1a9b      	subs	r3, r3, r2
 8018ed8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018edc:	ec51 0b10 	vmov	r0, r1, d0
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	bfd6      	itet	le
 8018ee4:	460a      	movle	r2, r1
 8018ee6:	462a      	movgt	r2, r5
 8018ee8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018eec:	468b      	mov	fp, r1
 8018eee:	462f      	mov	r7, r5
 8018ef0:	bfd4      	ite	le
 8018ef2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018ef6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018efa:	4620      	mov	r0, r4
 8018efc:	ee10 2a10 	vmov	r2, s0
 8018f00:	465b      	mov	r3, fp
 8018f02:	4639      	mov	r1, r7
 8018f04:	f7e7 fca2 	bl	800084c <__aeabi_ddiv>
 8018f08:	ec41 0b10 	vmov	d0, r0, r1
 8018f0c:	b003      	add	sp, #12
 8018f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f12 <__copybits>:
 8018f12:	3901      	subs	r1, #1
 8018f14:	b570      	push	{r4, r5, r6, lr}
 8018f16:	1149      	asrs	r1, r1, #5
 8018f18:	6914      	ldr	r4, [r2, #16]
 8018f1a:	3101      	adds	r1, #1
 8018f1c:	f102 0314 	add.w	r3, r2, #20
 8018f20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018f24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018f28:	1f05      	subs	r5, r0, #4
 8018f2a:	42a3      	cmp	r3, r4
 8018f2c:	d30c      	bcc.n	8018f48 <__copybits+0x36>
 8018f2e:	1aa3      	subs	r3, r4, r2
 8018f30:	3b11      	subs	r3, #17
 8018f32:	f023 0303 	bic.w	r3, r3, #3
 8018f36:	3211      	adds	r2, #17
 8018f38:	42a2      	cmp	r2, r4
 8018f3a:	bf88      	it	hi
 8018f3c:	2300      	movhi	r3, #0
 8018f3e:	4418      	add	r0, r3
 8018f40:	2300      	movs	r3, #0
 8018f42:	4288      	cmp	r0, r1
 8018f44:	d305      	bcc.n	8018f52 <__copybits+0x40>
 8018f46:	bd70      	pop	{r4, r5, r6, pc}
 8018f48:	f853 6b04 	ldr.w	r6, [r3], #4
 8018f4c:	f845 6f04 	str.w	r6, [r5, #4]!
 8018f50:	e7eb      	b.n	8018f2a <__copybits+0x18>
 8018f52:	f840 3b04 	str.w	r3, [r0], #4
 8018f56:	e7f4      	b.n	8018f42 <__copybits+0x30>

08018f58 <__any_on>:
 8018f58:	f100 0214 	add.w	r2, r0, #20
 8018f5c:	6900      	ldr	r0, [r0, #16]
 8018f5e:	114b      	asrs	r3, r1, #5
 8018f60:	4298      	cmp	r0, r3
 8018f62:	b510      	push	{r4, lr}
 8018f64:	db11      	blt.n	8018f8a <__any_on+0x32>
 8018f66:	dd0a      	ble.n	8018f7e <__any_on+0x26>
 8018f68:	f011 011f 	ands.w	r1, r1, #31
 8018f6c:	d007      	beq.n	8018f7e <__any_on+0x26>
 8018f6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018f72:	fa24 f001 	lsr.w	r0, r4, r1
 8018f76:	fa00 f101 	lsl.w	r1, r0, r1
 8018f7a:	428c      	cmp	r4, r1
 8018f7c:	d10b      	bne.n	8018f96 <__any_on+0x3e>
 8018f7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018f82:	4293      	cmp	r3, r2
 8018f84:	d803      	bhi.n	8018f8e <__any_on+0x36>
 8018f86:	2000      	movs	r0, #0
 8018f88:	bd10      	pop	{r4, pc}
 8018f8a:	4603      	mov	r3, r0
 8018f8c:	e7f7      	b.n	8018f7e <__any_on+0x26>
 8018f8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018f92:	2900      	cmp	r1, #0
 8018f94:	d0f5      	beq.n	8018f82 <__any_on+0x2a>
 8018f96:	2001      	movs	r0, #1
 8018f98:	e7f6      	b.n	8018f88 <__any_on+0x30>

08018f9a <__ascii_wctomb>:
 8018f9a:	b149      	cbz	r1, 8018fb0 <__ascii_wctomb+0x16>
 8018f9c:	2aff      	cmp	r2, #255	; 0xff
 8018f9e:	bf85      	ittet	hi
 8018fa0:	238a      	movhi	r3, #138	; 0x8a
 8018fa2:	6003      	strhi	r3, [r0, #0]
 8018fa4:	700a      	strbls	r2, [r1, #0]
 8018fa6:	f04f 30ff 	movhi.w	r0, #4294967295
 8018faa:	bf98      	it	ls
 8018fac:	2001      	movls	r0, #1
 8018fae:	4770      	bx	lr
 8018fb0:	4608      	mov	r0, r1
 8018fb2:	4770      	bx	lr

08018fb4 <__ssputs_r>:
 8018fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fb8:	688e      	ldr	r6, [r1, #8]
 8018fba:	461f      	mov	r7, r3
 8018fbc:	42be      	cmp	r6, r7
 8018fbe:	680b      	ldr	r3, [r1, #0]
 8018fc0:	4682      	mov	sl, r0
 8018fc2:	460c      	mov	r4, r1
 8018fc4:	4690      	mov	r8, r2
 8018fc6:	d82c      	bhi.n	8019022 <__ssputs_r+0x6e>
 8018fc8:	898a      	ldrh	r2, [r1, #12]
 8018fca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018fce:	d026      	beq.n	801901e <__ssputs_r+0x6a>
 8018fd0:	6965      	ldr	r5, [r4, #20]
 8018fd2:	6909      	ldr	r1, [r1, #16]
 8018fd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018fd8:	eba3 0901 	sub.w	r9, r3, r1
 8018fdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018fe0:	1c7b      	adds	r3, r7, #1
 8018fe2:	444b      	add	r3, r9
 8018fe4:	106d      	asrs	r5, r5, #1
 8018fe6:	429d      	cmp	r5, r3
 8018fe8:	bf38      	it	cc
 8018fea:	461d      	movcc	r5, r3
 8018fec:	0553      	lsls	r3, r2, #21
 8018fee:	d527      	bpl.n	8019040 <__ssputs_r+0x8c>
 8018ff0:	4629      	mov	r1, r5
 8018ff2:	f7fc f83b 	bl	801506c <_malloc_r>
 8018ff6:	4606      	mov	r6, r0
 8018ff8:	b360      	cbz	r0, 8019054 <__ssputs_r+0xa0>
 8018ffa:	6921      	ldr	r1, [r4, #16]
 8018ffc:	464a      	mov	r2, r9
 8018ffe:	f7fe f8b4 	bl	801716a <memcpy>
 8019002:	89a3      	ldrh	r3, [r4, #12]
 8019004:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801900c:	81a3      	strh	r3, [r4, #12]
 801900e:	6126      	str	r6, [r4, #16]
 8019010:	6165      	str	r5, [r4, #20]
 8019012:	444e      	add	r6, r9
 8019014:	eba5 0509 	sub.w	r5, r5, r9
 8019018:	6026      	str	r6, [r4, #0]
 801901a:	60a5      	str	r5, [r4, #8]
 801901c:	463e      	mov	r6, r7
 801901e:	42be      	cmp	r6, r7
 8019020:	d900      	bls.n	8019024 <__ssputs_r+0x70>
 8019022:	463e      	mov	r6, r7
 8019024:	6820      	ldr	r0, [r4, #0]
 8019026:	4632      	mov	r2, r6
 8019028:	4641      	mov	r1, r8
 801902a:	f000 f9db 	bl	80193e4 <memmove>
 801902e:	68a3      	ldr	r3, [r4, #8]
 8019030:	1b9b      	subs	r3, r3, r6
 8019032:	60a3      	str	r3, [r4, #8]
 8019034:	6823      	ldr	r3, [r4, #0]
 8019036:	4433      	add	r3, r6
 8019038:	6023      	str	r3, [r4, #0]
 801903a:	2000      	movs	r0, #0
 801903c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019040:	462a      	mov	r2, r5
 8019042:	f000 fa06 	bl	8019452 <_realloc_r>
 8019046:	4606      	mov	r6, r0
 8019048:	2800      	cmp	r0, #0
 801904a:	d1e0      	bne.n	801900e <__ssputs_r+0x5a>
 801904c:	6921      	ldr	r1, [r4, #16]
 801904e:	4650      	mov	r0, sl
 8019050:	f7fe ff40 	bl	8017ed4 <_free_r>
 8019054:	230c      	movs	r3, #12
 8019056:	f8ca 3000 	str.w	r3, [sl]
 801905a:	89a3      	ldrh	r3, [r4, #12]
 801905c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019060:	81a3      	strh	r3, [r4, #12]
 8019062:	f04f 30ff 	mov.w	r0, #4294967295
 8019066:	e7e9      	b.n	801903c <__ssputs_r+0x88>

08019068 <_svfiprintf_r>:
 8019068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801906c:	4698      	mov	r8, r3
 801906e:	898b      	ldrh	r3, [r1, #12]
 8019070:	061b      	lsls	r3, r3, #24
 8019072:	b09d      	sub	sp, #116	; 0x74
 8019074:	4607      	mov	r7, r0
 8019076:	460d      	mov	r5, r1
 8019078:	4614      	mov	r4, r2
 801907a:	d50e      	bpl.n	801909a <_svfiprintf_r+0x32>
 801907c:	690b      	ldr	r3, [r1, #16]
 801907e:	b963      	cbnz	r3, 801909a <_svfiprintf_r+0x32>
 8019080:	2140      	movs	r1, #64	; 0x40
 8019082:	f7fb fff3 	bl	801506c <_malloc_r>
 8019086:	6028      	str	r0, [r5, #0]
 8019088:	6128      	str	r0, [r5, #16]
 801908a:	b920      	cbnz	r0, 8019096 <_svfiprintf_r+0x2e>
 801908c:	230c      	movs	r3, #12
 801908e:	603b      	str	r3, [r7, #0]
 8019090:	f04f 30ff 	mov.w	r0, #4294967295
 8019094:	e0d0      	b.n	8019238 <_svfiprintf_r+0x1d0>
 8019096:	2340      	movs	r3, #64	; 0x40
 8019098:	616b      	str	r3, [r5, #20]
 801909a:	2300      	movs	r3, #0
 801909c:	9309      	str	r3, [sp, #36]	; 0x24
 801909e:	2320      	movs	r3, #32
 80190a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80190a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80190a8:	2330      	movs	r3, #48	; 0x30
 80190aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019250 <_svfiprintf_r+0x1e8>
 80190ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80190b2:	f04f 0901 	mov.w	r9, #1
 80190b6:	4623      	mov	r3, r4
 80190b8:	469a      	mov	sl, r3
 80190ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80190be:	b10a      	cbz	r2, 80190c4 <_svfiprintf_r+0x5c>
 80190c0:	2a25      	cmp	r2, #37	; 0x25
 80190c2:	d1f9      	bne.n	80190b8 <_svfiprintf_r+0x50>
 80190c4:	ebba 0b04 	subs.w	fp, sl, r4
 80190c8:	d00b      	beq.n	80190e2 <_svfiprintf_r+0x7a>
 80190ca:	465b      	mov	r3, fp
 80190cc:	4622      	mov	r2, r4
 80190ce:	4629      	mov	r1, r5
 80190d0:	4638      	mov	r0, r7
 80190d2:	f7ff ff6f 	bl	8018fb4 <__ssputs_r>
 80190d6:	3001      	adds	r0, #1
 80190d8:	f000 80a9 	beq.w	801922e <_svfiprintf_r+0x1c6>
 80190dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80190de:	445a      	add	r2, fp
 80190e0:	9209      	str	r2, [sp, #36]	; 0x24
 80190e2:	f89a 3000 	ldrb.w	r3, [sl]
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	f000 80a1 	beq.w	801922e <_svfiprintf_r+0x1c6>
 80190ec:	2300      	movs	r3, #0
 80190ee:	f04f 32ff 	mov.w	r2, #4294967295
 80190f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80190f6:	f10a 0a01 	add.w	sl, sl, #1
 80190fa:	9304      	str	r3, [sp, #16]
 80190fc:	9307      	str	r3, [sp, #28]
 80190fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019102:	931a      	str	r3, [sp, #104]	; 0x68
 8019104:	4654      	mov	r4, sl
 8019106:	2205      	movs	r2, #5
 8019108:	f814 1b01 	ldrb.w	r1, [r4], #1
 801910c:	4850      	ldr	r0, [pc, #320]	; (8019250 <_svfiprintf_r+0x1e8>)
 801910e:	f7e7 f85f 	bl	80001d0 <memchr>
 8019112:	9a04      	ldr	r2, [sp, #16]
 8019114:	b9d8      	cbnz	r0, 801914e <_svfiprintf_r+0xe6>
 8019116:	06d0      	lsls	r0, r2, #27
 8019118:	bf44      	itt	mi
 801911a:	2320      	movmi	r3, #32
 801911c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019120:	0711      	lsls	r1, r2, #28
 8019122:	bf44      	itt	mi
 8019124:	232b      	movmi	r3, #43	; 0x2b
 8019126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801912a:	f89a 3000 	ldrb.w	r3, [sl]
 801912e:	2b2a      	cmp	r3, #42	; 0x2a
 8019130:	d015      	beq.n	801915e <_svfiprintf_r+0xf6>
 8019132:	9a07      	ldr	r2, [sp, #28]
 8019134:	4654      	mov	r4, sl
 8019136:	2000      	movs	r0, #0
 8019138:	f04f 0c0a 	mov.w	ip, #10
 801913c:	4621      	mov	r1, r4
 801913e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019142:	3b30      	subs	r3, #48	; 0x30
 8019144:	2b09      	cmp	r3, #9
 8019146:	d94d      	bls.n	80191e4 <_svfiprintf_r+0x17c>
 8019148:	b1b0      	cbz	r0, 8019178 <_svfiprintf_r+0x110>
 801914a:	9207      	str	r2, [sp, #28]
 801914c:	e014      	b.n	8019178 <_svfiprintf_r+0x110>
 801914e:	eba0 0308 	sub.w	r3, r0, r8
 8019152:	fa09 f303 	lsl.w	r3, r9, r3
 8019156:	4313      	orrs	r3, r2
 8019158:	9304      	str	r3, [sp, #16]
 801915a:	46a2      	mov	sl, r4
 801915c:	e7d2      	b.n	8019104 <_svfiprintf_r+0x9c>
 801915e:	9b03      	ldr	r3, [sp, #12]
 8019160:	1d19      	adds	r1, r3, #4
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	9103      	str	r1, [sp, #12]
 8019166:	2b00      	cmp	r3, #0
 8019168:	bfbb      	ittet	lt
 801916a:	425b      	neglt	r3, r3
 801916c:	f042 0202 	orrlt.w	r2, r2, #2
 8019170:	9307      	strge	r3, [sp, #28]
 8019172:	9307      	strlt	r3, [sp, #28]
 8019174:	bfb8      	it	lt
 8019176:	9204      	strlt	r2, [sp, #16]
 8019178:	7823      	ldrb	r3, [r4, #0]
 801917a:	2b2e      	cmp	r3, #46	; 0x2e
 801917c:	d10c      	bne.n	8019198 <_svfiprintf_r+0x130>
 801917e:	7863      	ldrb	r3, [r4, #1]
 8019180:	2b2a      	cmp	r3, #42	; 0x2a
 8019182:	d134      	bne.n	80191ee <_svfiprintf_r+0x186>
 8019184:	9b03      	ldr	r3, [sp, #12]
 8019186:	1d1a      	adds	r2, r3, #4
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	9203      	str	r2, [sp, #12]
 801918c:	2b00      	cmp	r3, #0
 801918e:	bfb8      	it	lt
 8019190:	f04f 33ff 	movlt.w	r3, #4294967295
 8019194:	3402      	adds	r4, #2
 8019196:	9305      	str	r3, [sp, #20]
 8019198:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8019260 <_svfiprintf_r+0x1f8>
 801919c:	7821      	ldrb	r1, [r4, #0]
 801919e:	2203      	movs	r2, #3
 80191a0:	4650      	mov	r0, sl
 80191a2:	f7e7 f815 	bl	80001d0 <memchr>
 80191a6:	b138      	cbz	r0, 80191b8 <_svfiprintf_r+0x150>
 80191a8:	9b04      	ldr	r3, [sp, #16]
 80191aa:	eba0 000a 	sub.w	r0, r0, sl
 80191ae:	2240      	movs	r2, #64	; 0x40
 80191b0:	4082      	lsls	r2, r0
 80191b2:	4313      	orrs	r3, r2
 80191b4:	3401      	adds	r4, #1
 80191b6:	9304      	str	r3, [sp, #16]
 80191b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80191bc:	4825      	ldr	r0, [pc, #148]	; (8019254 <_svfiprintf_r+0x1ec>)
 80191be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80191c2:	2206      	movs	r2, #6
 80191c4:	f7e7 f804 	bl	80001d0 <memchr>
 80191c8:	2800      	cmp	r0, #0
 80191ca:	d038      	beq.n	801923e <_svfiprintf_r+0x1d6>
 80191cc:	4b22      	ldr	r3, [pc, #136]	; (8019258 <_svfiprintf_r+0x1f0>)
 80191ce:	bb1b      	cbnz	r3, 8019218 <_svfiprintf_r+0x1b0>
 80191d0:	9b03      	ldr	r3, [sp, #12]
 80191d2:	3307      	adds	r3, #7
 80191d4:	f023 0307 	bic.w	r3, r3, #7
 80191d8:	3308      	adds	r3, #8
 80191da:	9303      	str	r3, [sp, #12]
 80191dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191de:	4433      	add	r3, r6
 80191e0:	9309      	str	r3, [sp, #36]	; 0x24
 80191e2:	e768      	b.n	80190b6 <_svfiprintf_r+0x4e>
 80191e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80191e8:	460c      	mov	r4, r1
 80191ea:	2001      	movs	r0, #1
 80191ec:	e7a6      	b.n	801913c <_svfiprintf_r+0xd4>
 80191ee:	2300      	movs	r3, #0
 80191f0:	3401      	adds	r4, #1
 80191f2:	9305      	str	r3, [sp, #20]
 80191f4:	4619      	mov	r1, r3
 80191f6:	f04f 0c0a 	mov.w	ip, #10
 80191fa:	4620      	mov	r0, r4
 80191fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019200:	3a30      	subs	r2, #48	; 0x30
 8019202:	2a09      	cmp	r2, #9
 8019204:	d903      	bls.n	801920e <_svfiprintf_r+0x1a6>
 8019206:	2b00      	cmp	r3, #0
 8019208:	d0c6      	beq.n	8019198 <_svfiprintf_r+0x130>
 801920a:	9105      	str	r1, [sp, #20]
 801920c:	e7c4      	b.n	8019198 <_svfiprintf_r+0x130>
 801920e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019212:	4604      	mov	r4, r0
 8019214:	2301      	movs	r3, #1
 8019216:	e7f0      	b.n	80191fa <_svfiprintf_r+0x192>
 8019218:	ab03      	add	r3, sp, #12
 801921a:	9300      	str	r3, [sp, #0]
 801921c:	462a      	mov	r2, r5
 801921e:	4b0f      	ldr	r3, [pc, #60]	; (801925c <_svfiprintf_r+0x1f4>)
 8019220:	a904      	add	r1, sp, #16
 8019222:	4638      	mov	r0, r7
 8019224:	f7fc ff56 	bl	80160d4 <_printf_float>
 8019228:	1c42      	adds	r2, r0, #1
 801922a:	4606      	mov	r6, r0
 801922c:	d1d6      	bne.n	80191dc <_svfiprintf_r+0x174>
 801922e:	89ab      	ldrh	r3, [r5, #12]
 8019230:	065b      	lsls	r3, r3, #25
 8019232:	f53f af2d 	bmi.w	8019090 <_svfiprintf_r+0x28>
 8019236:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019238:	b01d      	add	sp, #116	; 0x74
 801923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801923e:	ab03      	add	r3, sp, #12
 8019240:	9300      	str	r3, [sp, #0]
 8019242:	462a      	mov	r2, r5
 8019244:	4b05      	ldr	r3, [pc, #20]	; (801925c <_svfiprintf_r+0x1f4>)
 8019246:	a904      	add	r1, sp, #16
 8019248:	4638      	mov	r0, r7
 801924a:	f7fd f9e7 	bl	801661c <_printf_i>
 801924e:	e7eb      	b.n	8019228 <_svfiprintf_r+0x1c0>
 8019250:	0801dca4 	.word	0x0801dca4
 8019254:	0801dcae 	.word	0x0801dcae
 8019258:	080160d5 	.word	0x080160d5
 801925c:	08018fb5 	.word	0x08018fb5
 8019260:	0801dcaa 	.word	0x0801dcaa

08019264 <__sflush_r>:
 8019264:	898a      	ldrh	r2, [r1, #12]
 8019266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801926a:	4605      	mov	r5, r0
 801926c:	0710      	lsls	r0, r2, #28
 801926e:	460c      	mov	r4, r1
 8019270:	d458      	bmi.n	8019324 <__sflush_r+0xc0>
 8019272:	684b      	ldr	r3, [r1, #4]
 8019274:	2b00      	cmp	r3, #0
 8019276:	dc05      	bgt.n	8019284 <__sflush_r+0x20>
 8019278:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801927a:	2b00      	cmp	r3, #0
 801927c:	dc02      	bgt.n	8019284 <__sflush_r+0x20>
 801927e:	2000      	movs	r0, #0
 8019280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019286:	2e00      	cmp	r6, #0
 8019288:	d0f9      	beq.n	801927e <__sflush_r+0x1a>
 801928a:	2300      	movs	r3, #0
 801928c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019290:	682f      	ldr	r7, [r5, #0]
 8019292:	6a21      	ldr	r1, [r4, #32]
 8019294:	602b      	str	r3, [r5, #0]
 8019296:	d032      	beq.n	80192fe <__sflush_r+0x9a>
 8019298:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801929a:	89a3      	ldrh	r3, [r4, #12]
 801929c:	075a      	lsls	r2, r3, #29
 801929e:	d505      	bpl.n	80192ac <__sflush_r+0x48>
 80192a0:	6863      	ldr	r3, [r4, #4]
 80192a2:	1ac0      	subs	r0, r0, r3
 80192a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80192a6:	b10b      	cbz	r3, 80192ac <__sflush_r+0x48>
 80192a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80192aa:	1ac0      	subs	r0, r0, r3
 80192ac:	2300      	movs	r3, #0
 80192ae:	4602      	mov	r2, r0
 80192b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80192b2:	6a21      	ldr	r1, [r4, #32]
 80192b4:	4628      	mov	r0, r5
 80192b6:	47b0      	blx	r6
 80192b8:	1c43      	adds	r3, r0, #1
 80192ba:	89a3      	ldrh	r3, [r4, #12]
 80192bc:	d106      	bne.n	80192cc <__sflush_r+0x68>
 80192be:	6829      	ldr	r1, [r5, #0]
 80192c0:	291d      	cmp	r1, #29
 80192c2:	d82b      	bhi.n	801931c <__sflush_r+0xb8>
 80192c4:	4a29      	ldr	r2, [pc, #164]	; (801936c <__sflush_r+0x108>)
 80192c6:	410a      	asrs	r2, r1
 80192c8:	07d6      	lsls	r6, r2, #31
 80192ca:	d427      	bmi.n	801931c <__sflush_r+0xb8>
 80192cc:	2200      	movs	r2, #0
 80192ce:	6062      	str	r2, [r4, #4]
 80192d0:	04d9      	lsls	r1, r3, #19
 80192d2:	6922      	ldr	r2, [r4, #16]
 80192d4:	6022      	str	r2, [r4, #0]
 80192d6:	d504      	bpl.n	80192e2 <__sflush_r+0x7e>
 80192d8:	1c42      	adds	r2, r0, #1
 80192da:	d101      	bne.n	80192e0 <__sflush_r+0x7c>
 80192dc:	682b      	ldr	r3, [r5, #0]
 80192de:	b903      	cbnz	r3, 80192e2 <__sflush_r+0x7e>
 80192e0:	6560      	str	r0, [r4, #84]	; 0x54
 80192e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80192e4:	602f      	str	r7, [r5, #0]
 80192e6:	2900      	cmp	r1, #0
 80192e8:	d0c9      	beq.n	801927e <__sflush_r+0x1a>
 80192ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80192ee:	4299      	cmp	r1, r3
 80192f0:	d002      	beq.n	80192f8 <__sflush_r+0x94>
 80192f2:	4628      	mov	r0, r5
 80192f4:	f7fe fdee 	bl	8017ed4 <_free_r>
 80192f8:	2000      	movs	r0, #0
 80192fa:	6360      	str	r0, [r4, #52]	; 0x34
 80192fc:	e7c0      	b.n	8019280 <__sflush_r+0x1c>
 80192fe:	2301      	movs	r3, #1
 8019300:	4628      	mov	r0, r5
 8019302:	47b0      	blx	r6
 8019304:	1c41      	adds	r1, r0, #1
 8019306:	d1c8      	bne.n	801929a <__sflush_r+0x36>
 8019308:	682b      	ldr	r3, [r5, #0]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d0c5      	beq.n	801929a <__sflush_r+0x36>
 801930e:	2b1d      	cmp	r3, #29
 8019310:	d001      	beq.n	8019316 <__sflush_r+0xb2>
 8019312:	2b16      	cmp	r3, #22
 8019314:	d101      	bne.n	801931a <__sflush_r+0xb6>
 8019316:	602f      	str	r7, [r5, #0]
 8019318:	e7b1      	b.n	801927e <__sflush_r+0x1a>
 801931a:	89a3      	ldrh	r3, [r4, #12]
 801931c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019320:	81a3      	strh	r3, [r4, #12]
 8019322:	e7ad      	b.n	8019280 <__sflush_r+0x1c>
 8019324:	690f      	ldr	r7, [r1, #16]
 8019326:	2f00      	cmp	r7, #0
 8019328:	d0a9      	beq.n	801927e <__sflush_r+0x1a>
 801932a:	0793      	lsls	r3, r2, #30
 801932c:	680e      	ldr	r6, [r1, #0]
 801932e:	bf08      	it	eq
 8019330:	694b      	ldreq	r3, [r1, #20]
 8019332:	600f      	str	r7, [r1, #0]
 8019334:	bf18      	it	ne
 8019336:	2300      	movne	r3, #0
 8019338:	eba6 0807 	sub.w	r8, r6, r7
 801933c:	608b      	str	r3, [r1, #8]
 801933e:	f1b8 0f00 	cmp.w	r8, #0
 8019342:	dd9c      	ble.n	801927e <__sflush_r+0x1a>
 8019344:	6a21      	ldr	r1, [r4, #32]
 8019346:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019348:	4643      	mov	r3, r8
 801934a:	463a      	mov	r2, r7
 801934c:	4628      	mov	r0, r5
 801934e:	47b0      	blx	r6
 8019350:	2800      	cmp	r0, #0
 8019352:	dc06      	bgt.n	8019362 <__sflush_r+0xfe>
 8019354:	89a3      	ldrh	r3, [r4, #12]
 8019356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801935a:	81a3      	strh	r3, [r4, #12]
 801935c:	f04f 30ff 	mov.w	r0, #4294967295
 8019360:	e78e      	b.n	8019280 <__sflush_r+0x1c>
 8019362:	4407      	add	r7, r0
 8019364:	eba8 0800 	sub.w	r8, r8, r0
 8019368:	e7e9      	b.n	801933e <__sflush_r+0xda>
 801936a:	bf00      	nop
 801936c:	dfbffffe 	.word	0xdfbffffe

08019370 <_fflush_r>:
 8019370:	b538      	push	{r3, r4, r5, lr}
 8019372:	690b      	ldr	r3, [r1, #16]
 8019374:	4605      	mov	r5, r0
 8019376:	460c      	mov	r4, r1
 8019378:	b913      	cbnz	r3, 8019380 <_fflush_r+0x10>
 801937a:	2500      	movs	r5, #0
 801937c:	4628      	mov	r0, r5
 801937e:	bd38      	pop	{r3, r4, r5, pc}
 8019380:	b118      	cbz	r0, 801938a <_fflush_r+0x1a>
 8019382:	6a03      	ldr	r3, [r0, #32]
 8019384:	b90b      	cbnz	r3, 801938a <_fflush_r+0x1a>
 8019386:	f7fd fd07 	bl	8016d98 <__sinit>
 801938a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d0f3      	beq.n	801937a <_fflush_r+0xa>
 8019392:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019394:	07d0      	lsls	r0, r2, #31
 8019396:	d404      	bmi.n	80193a2 <_fflush_r+0x32>
 8019398:	0599      	lsls	r1, r3, #22
 801939a:	d402      	bmi.n	80193a2 <_fflush_r+0x32>
 801939c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801939e:	f7fd feda 	bl	8017156 <__retarget_lock_acquire_recursive>
 80193a2:	4628      	mov	r0, r5
 80193a4:	4621      	mov	r1, r4
 80193a6:	f7ff ff5d 	bl	8019264 <__sflush_r>
 80193aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80193ac:	07da      	lsls	r2, r3, #31
 80193ae:	4605      	mov	r5, r0
 80193b0:	d4e4      	bmi.n	801937c <_fflush_r+0xc>
 80193b2:	89a3      	ldrh	r3, [r4, #12]
 80193b4:	059b      	lsls	r3, r3, #22
 80193b6:	d4e1      	bmi.n	801937c <_fflush_r+0xc>
 80193b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80193ba:	f7fd fecd 	bl	8017158 <__retarget_lock_release_recursive>
 80193be:	e7dd      	b.n	801937c <_fflush_r+0xc>

080193c0 <fiprintf>:
 80193c0:	b40e      	push	{r1, r2, r3}
 80193c2:	b503      	push	{r0, r1, lr}
 80193c4:	4601      	mov	r1, r0
 80193c6:	ab03      	add	r3, sp, #12
 80193c8:	4805      	ldr	r0, [pc, #20]	; (80193e0 <fiprintf+0x20>)
 80193ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80193ce:	6800      	ldr	r0, [r0, #0]
 80193d0:	9301      	str	r3, [sp, #4]
 80193d2:	f000 f897 	bl	8019504 <_vfiprintf_r>
 80193d6:	b002      	add	sp, #8
 80193d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80193dc:	b003      	add	sp, #12
 80193de:	4770      	bx	lr
 80193e0:	200002f4 	.word	0x200002f4

080193e4 <memmove>:
 80193e4:	4288      	cmp	r0, r1
 80193e6:	b510      	push	{r4, lr}
 80193e8:	eb01 0402 	add.w	r4, r1, r2
 80193ec:	d902      	bls.n	80193f4 <memmove+0x10>
 80193ee:	4284      	cmp	r4, r0
 80193f0:	4623      	mov	r3, r4
 80193f2:	d807      	bhi.n	8019404 <memmove+0x20>
 80193f4:	1e43      	subs	r3, r0, #1
 80193f6:	42a1      	cmp	r1, r4
 80193f8:	d008      	beq.n	801940c <memmove+0x28>
 80193fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80193fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019402:	e7f8      	b.n	80193f6 <memmove+0x12>
 8019404:	4402      	add	r2, r0
 8019406:	4601      	mov	r1, r0
 8019408:	428a      	cmp	r2, r1
 801940a:	d100      	bne.n	801940e <memmove+0x2a>
 801940c:	bd10      	pop	{r4, pc}
 801940e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019412:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019416:	e7f7      	b.n	8019408 <memmove+0x24>

08019418 <abort>:
 8019418:	b508      	push	{r3, lr}
 801941a:	2006      	movs	r0, #6
 801941c:	f000 fa4a 	bl	80198b4 <raise>
 8019420:	2001      	movs	r0, #1
 8019422:	f7ec fc43 	bl	8005cac <_exit>

08019426 <_calloc_r>:
 8019426:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019428:	fba1 2402 	umull	r2, r4, r1, r2
 801942c:	b94c      	cbnz	r4, 8019442 <_calloc_r+0x1c>
 801942e:	4611      	mov	r1, r2
 8019430:	9201      	str	r2, [sp, #4]
 8019432:	f7fb fe1b 	bl	801506c <_malloc_r>
 8019436:	9a01      	ldr	r2, [sp, #4]
 8019438:	4605      	mov	r5, r0
 801943a:	b930      	cbnz	r0, 801944a <_calloc_r+0x24>
 801943c:	4628      	mov	r0, r5
 801943e:	b003      	add	sp, #12
 8019440:	bd30      	pop	{r4, r5, pc}
 8019442:	220c      	movs	r2, #12
 8019444:	6002      	str	r2, [r0, #0]
 8019446:	2500      	movs	r5, #0
 8019448:	e7f8      	b.n	801943c <_calloc_r+0x16>
 801944a:	4621      	mov	r1, r4
 801944c:	f7fd fd71 	bl	8016f32 <memset>
 8019450:	e7f4      	b.n	801943c <_calloc_r+0x16>

08019452 <_realloc_r>:
 8019452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019456:	4680      	mov	r8, r0
 8019458:	4614      	mov	r4, r2
 801945a:	460e      	mov	r6, r1
 801945c:	b921      	cbnz	r1, 8019468 <_realloc_r+0x16>
 801945e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019462:	4611      	mov	r1, r2
 8019464:	f7fb be02 	b.w	801506c <_malloc_r>
 8019468:	b92a      	cbnz	r2, 8019476 <_realloc_r+0x24>
 801946a:	f7fe fd33 	bl	8017ed4 <_free_r>
 801946e:	4625      	mov	r5, r4
 8019470:	4628      	mov	r0, r5
 8019472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019476:	f000 fa39 	bl	80198ec <_malloc_usable_size_r>
 801947a:	4284      	cmp	r4, r0
 801947c:	4607      	mov	r7, r0
 801947e:	d802      	bhi.n	8019486 <_realloc_r+0x34>
 8019480:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019484:	d812      	bhi.n	80194ac <_realloc_r+0x5a>
 8019486:	4621      	mov	r1, r4
 8019488:	4640      	mov	r0, r8
 801948a:	f7fb fdef 	bl	801506c <_malloc_r>
 801948e:	4605      	mov	r5, r0
 8019490:	2800      	cmp	r0, #0
 8019492:	d0ed      	beq.n	8019470 <_realloc_r+0x1e>
 8019494:	42bc      	cmp	r4, r7
 8019496:	4622      	mov	r2, r4
 8019498:	4631      	mov	r1, r6
 801949a:	bf28      	it	cs
 801949c:	463a      	movcs	r2, r7
 801949e:	f7fd fe64 	bl	801716a <memcpy>
 80194a2:	4631      	mov	r1, r6
 80194a4:	4640      	mov	r0, r8
 80194a6:	f7fe fd15 	bl	8017ed4 <_free_r>
 80194aa:	e7e1      	b.n	8019470 <_realloc_r+0x1e>
 80194ac:	4635      	mov	r5, r6
 80194ae:	e7df      	b.n	8019470 <_realloc_r+0x1e>

080194b0 <__sfputc_r>:
 80194b0:	6893      	ldr	r3, [r2, #8]
 80194b2:	3b01      	subs	r3, #1
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	b410      	push	{r4}
 80194b8:	6093      	str	r3, [r2, #8]
 80194ba:	da08      	bge.n	80194ce <__sfputc_r+0x1e>
 80194bc:	6994      	ldr	r4, [r2, #24]
 80194be:	42a3      	cmp	r3, r4
 80194c0:	db01      	blt.n	80194c6 <__sfputc_r+0x16>
 80194c2:	290a      	cmp	r1, #10
 80194c4:	d103      	bne.n	80194ce <__sfputc_r+0x1e>
 80194c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80194ca:	f000 b935 	b.w	8019738 <__swbuf_r>
 80194ce:	6813      	ldr	r3, [r2, #0]
 80194d0:	1c58      	adds	r0, r3, #1
 80194d2:	6010      	str	r0, [r2, #0]
 80194d4:	7019      	strb	r1, [r3, #0]
 80194d6:	4608      	mov	r0, r1
 80194d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80194dc:	4770      	bx	lr

080194de <__sfputs_r>:
 80194de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194e0:	4606      	mov	r6, r0
 80194e2:	460f      	mov	r7, r1
 80194e4:	4614      	mov	r4, r2
 80194e6:	18d5      	adds	r5, r2, r3
 80194e8:	42ac      	cmp	r4, r5
 80194ea:	d101      	bne.n	80194f0 <__sfputs_r+0x12>
 80194ec:	2000      	movs	r0, #0
 80194ee:	e007      	b.n	8019500 <__sfputs_r+0x22>
 80194f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194f4:	463a      	mov	r2, r7
 80194f6:	4630      	mov	r0, r6
 80194f8:	f7ff ffda 	bl	80194b0 <__sfputc_r>
 80194fc:	1c43      	adds	r3, r0, #1
 80194fe:	d1f3      	bne.n	80194e8 <__sfputs_r+0xa>
 8019500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019504 <_vfiprintf_r>:
 8019504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019508:	460d      	mov	r5, r1
 801950a:	b09d      	sub	sp, #116	; 0x74
 801950c:	4614      	mov	r4, r2
 801950e:	4698      	mov	r8, r3
 8019510:	4606      	mov	r6, r0
 8019512:	b118      	cbz	r0, 801951c <_vfiprintf_r+0x18>
 8019514:	6a03      	ldr	r3, [r0, #32]
 8019516:	b90b      	cbnz	r3, 801951c <_vfiprintf_r+0x18>
 8019518:	f7fd fc3e 	bl	8016d98 <__sinit>
 801951c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801951e:	07d9      	lsls	r1, r3, #31
 8019520:	d405      	bmi.n	801952e <_vfiprintf_r+0x2a>
 8019522:	89ab      	ldrh	r3, [r5, #12]
 8019524:	059a      	lsls	r2, r3, #22
 8019526:	d402      	bmi.n	801952e <_vfiprintf_r+0x2a>
 8019528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801952a:	f7fd fe14 	bl	8017156 <__retarget_lock_acquire_recursive>
 801952e:	89ab      	ldrh	r3, [r5, #12]
 8019530:	071b      	lsls	r3, r3, #28
 8019532:	d501      	bpl.n	8019538 <_vfiprintf_r+0x34>
 8019534:	692b      	ldr	r3, [r5, #16]
 8019536:	b99b      	cbnz	r3, 8019560 <_vfiprintf_r+0x5c>
 8019538:	4629      	mov	r1, r5
 801953a:	4630      	mov	r0, r6
 801953c:	f000 f93a 	bl	80197b4 <__swsetup_r>
 8019540:	b170      	cbz	r0, 8019560 <_vfiprintf_r+0x5c>
 8019542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019544:	07dc      	lsls	r4, r3, #31
 8019546:	d504      	bpl.n	8019552 <_vfiprintf_r+0x4e>
 8019548:	f04f 30ff 	mov.w	r0, #4294967295
 801954c:	b01d      	add	sp, #116	; 0x74
 801954e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019552:	89ab      	ldrh	r3, [r5, #12]
 8019554:	0598      	lsls	r0, r3, #22
 8019556:	d4f7      	bmi.n	8019548 <_vfiprintf_r+0x44>
 8019558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801955a:	f7fd fdfd 	bl	8017158 <__retarget_lock_release_recursive>
 801955e:	e7f3      	b.n	8019548 <_vfiprintf_r+0x44>
 8019560:	2300      	movs	r3, #0
 8019562:	9309      	str	r3, [sp, #36]	; 0x24
 8019564:	2320      	movs	r3, #32
 8019566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801956a:	f8cd 800c 	str.w	r8, [sp, #12]
 801956e:	2330      	movs	r3, #48	; 0x30
 8019570:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019724 <_vfiprintf_r+0x220>
 8019574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019578:	f04f 0901 	mov.w	r9, #1
 801957c:	4623      	mov	r3, r4
 801957e:	469a      	mov	sl, r3
 8019580:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019584:	b10a      	cbz	r2, 801958a <_vfiprintf_r+0x86>
 8019586:	2a25      	cmp	r2, #37	; 0x25
 8019588:	d1f9      	bne.n	801957e <_vfiprintf_r+0x7a>
 801958a:	ebba 0b04 	subs.w	fp, sl, r4
 801958e:	d00b      	beq.n	80195a8 <_vfiprintf_r+0xa4>
 8019590:	465b      	mov	r3, fp
 8019592:	4622      	mov	r2, r4
 8019594:	4629      	mov	r1, r5
 8019596:	4630      	mov	r0, r6
 8019598:	f7ff ffa1 	bl	80194de <__sfputs_r>
 801959c:	3001      	adds	r0, #1
 801959e:	f000 80a9 	beq.w	80196f4 <_vfiprintf_r+0x1f0>
 80195a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80195a4:	445a      	add	r2, fp
 80195a6:	9209      	str	r2, [sp, #36]	; 0x24
 80195a8:	f89a 3000 	ldrb.w	r3, [sl]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	f000 80a1 	beq.w	80196f4 <_vfiprintf_r+0x1f0>
 80195b2:	2300      	movs	r3, #0
 80195b4:	f04f 32ff 	mov.w	r2, #4294967295
 80195b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80195bc:	f10a 0a01 	add.w	sl, sl, #1
 80195c0:	9304      	str	r3, [sp, #16]
 80195c2:	9307      	str	r3, [sp, #28]
 80195c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80195c8:	931a      	str	r3, [sp, #104]	; 0x68
 80195ca:	4654      	mov	r4, sl
 80195cc:	2205      	movs	r2, #5
 80195ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195d2:	4854      	ldr	r0, [pc, #336]	; (8019724 <_vfiprintf_r+0x220>)
 80195d4:	f7e6 fdfc 	bl	80001d0 <memchr>
 80195d8:	9a04      	ldr	r2, [sp, #16]
 80195da:	b9d8      	cbnz	r0, 8019614 <_vfiprintf_r+0x110>
 80195dc:	06d1      	lsls	r1, r2, #27
 80195de:	bf44      	itt	mi
 80195e0:	2320      	movmi	r3, #32
 80195e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80195e6:	0713      	lsls	r3, r2, #28
 80195e8:	bf44      	itt	mi
 80195ea:	232b      	movmi	r3, #43	; 0x2b
 80195ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80195f0:	f89a 3000 	ldrb.w	r3, [sl]
 80195f4:	2b2a      	cmp	r3, #42	; 0x2a
 80195f6:	d015      	beq.n	8019624 <_vfiprintf_r+0x120>
 80195f8:	9a07      	ldr	r2, [sp, #28]
 80195fa:	4654      	mov	r4, sl
 80195fc:	2000      	movs	r0, #0
 80195fe:	f04f 0c0a 	mov.w	ip, #10
 8019602:	4621      	mov	r1, r4
 8019604:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019608:	3b30      	subs	r3, #48	; 0x30
 801960a:	2b09      	cmp	r3, #9
 801960c:	d94d      	bls.n	80196aa <_vfiprintf_r+0x1a6>
 801960e:	b1b0      	cbz	r0, 801963e <_vfiprintf_r+0x13a>
 8019610:	9207      	str	r2, [sp, #28]
 8019612:	e014      	b.n	801963e <_vfiprintf_r+0x13a>
 8019614:	eba0 0308 	sub.w	r3, r0, r8
 8019618:	fa09 f303 	lsl.w	r3, r9, r3
 801961c:	4313      	orrs	r3, r2
 801961e:	9304      	str	r3, [sp, #16]
 8019620:	46a2      	mov	sl, r4
 8019622:	e7d2      	b.n	80195ca <_vfiprintf_r+0xc6>
 8019624:	9b03      	ldr	r3, [sp, #12]
 8019626:	1d19      	adds	r1, r3, #4
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	9103      	str	r1, [sp, #12]
 801962c:	2b00      	cmp	r3, #0
 801962e:	bfbb      	ittet	lt
 8019630:	425b      	neglt	r3, r3
 8019632:	f042 0202 	orrlt.w	r2, r2, #2
 8019636:	9307      	strge	r3, [sp, #28]
 8019638:	9307      	strlt	r3, [sp, #28]
 801963a:	bfb8      	it	lt
 801963c:	9204      	strlt	r2, [sp, #16]
 801963e:	7823      	ldrb	r3, [r4, #0]
 8019640:	2b2e      	cmp	r3, #46	; 0x2e
 8019642:	d10c      	bne.n	801965e <_vfiprintf_r+0x15a>
 8019644:	7863      	ldrb	r3, [r4, #1]
 8019646:	2b2a      	cmp	r3, #42	; 0x2a
 8019648:	d134      	bne.n	80196b4 <_vfiprintf_r+0x1b0>
 801964a:	9b03      	ldr	r3, [sp, #12]
 801964c:	1d1a      	adds	r2, r3, #4
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	9203      	str	r2, [sp, #12]
 8019652:	2b00      	cmp	r3, #0
 8019654:	bfb8      	it	lt
 8019656:	f04f 33ff 	movlt.w	r3, #4294967295
 801965a:	3402      	adds	r4, #2
 801965c:	9305      	str	r3, [sp, #20]
 801965e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019734 <_vfiprintf_r+0x230>
 8019662:	7821      	ldrb	r1, [r4, #0]
 8019664:	2203      	movs	r2, #3
 8019666:	4650      	mov	r0, sl
 8019668:	f7e6 fdb2 	bl	80001d0 <memchr>
 801966c:	b138      	cbz	r0, 801967e <_vfiprintf_r+0x17a>
 801966e:	9b04      	ldr	r3, [sp, #16]
 8019670:	eba0 000a 	sub.w	r0, r0, sl
 8019674:	2240      	movs	r2, #64	; 0x40
 8019676:	4082      	lsls	r2, r0
 8019678:	4313      	orrs	r3, r2
 801967a:	3401      	adds	r4, #1
 801967c:	9304      	str	r3, [sp, #16]
 801967e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019682:	4829      	ldr	r0, [pc, #164]	; (8019728 <_vfiprintf_r+0x224>)
 8019684:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019688:	2206      	movs	r2, #6
 801968a:	f7e6 fda1 	bl	80001d0 <memchr>
 801968e:	2800      	cmp	r0, #0
 8019690:	d03f      	beq.n	8019712 <_vfiprintf_r+0x20e>
 8019692:	4b26      	ldr	r3, [pc, #152]	; (801972c <_vfiprintf_r+0x228>)
 8019694:	bb1b      	cbnz	r3, 80196de <_vfiprintf_r+0x1da>
 8019696:	9b03      	ldr	r3, [sp, #12]
 8019698:	3307      	adds	r3, #7
 801969a:	f023 0307 	bic.w	r3, r3, #7
 801969e:	3308      	adds	r3, #8
 80196a0:	9303      	str	r3, [sp, #12]
 80196a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196a4:	443b      	add	r3, r7
 80196a6:	9309      	str	r3, [sp, #36]	; 0x24
 80196a8:	e768      	b.n	801957c <_vfiprintf_r+0x78>
 80196aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80196ae:	460c      	mov	r4, r1
 80196b0:	2001      	movs	r0, #1
 80196b2:	e7a6      	b.n	8019602 <_vfiprintf_r+0xfe>
 80196b4:	2300      	movs	r3, #0
 80196b6:	3401      	adds	r4, #1
 80196b8:	9305      	str	r3, [sp, #20]
 80196ba:	4619      	mov	r1, r3
 80196bc:	f04f 0c0a 	mov.w	ip, #10
 80196c0:	4620      	mov	r0, r4
 80196c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80196c6:	3a30      	subs	r2, #48	; 0x30
 80196c8:	2a09      	cmp	r2, #9
 80196ca:	d903      	bls.n	80196d4 <_vfiprintf_r+0x1d0>
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d0c6      	beq.n	801965e <_vfiprintf_r+0x15a>
 80196d0:	9105      	str	r1, [sp, #20]
 80196d2:	e7c4      	b.n	801965e <_vfiprintf_r+0x15a>
 80196d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80196d8:	4604      	mov	r4, r0
 80196da:	2301      	movs	r3, #1
 80196dc:	e7f0      	b.n	80196c0 <_vfiprintf_r+0x1bc>
 80196de:	ab03      	add	r3, sp, #12
 80196e0:	9300      	str	r3, [sp, #0]
 80196e2:	462a      	mov	r2, r5
 80196e4:	4b12      	ldr	r3, [pc, #72]	; (8019730 <_vfiprintf_r+0x22c>)
 80196e6:	a904      	add	r1, sp, #16
 80196e8:	4630      	mov	r0, r6
 80196ea:	f7fc fcf3 	bl	80160d4 <_printf_float>
 80196ee:	4607      	mov	r7, r0
 80196f0:	1c78      	adds	r0, r7, #1
 80196f2:	d1d6      	bne.n	80196a2 <_vfiprintf_r+0x19e>
 80196f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80196f6:	07d9      	lsls	r1, r3, #31
 80196f8:	d405      	bmi.n	8019706 <_vfiprintf_r+0x202>
 80196fa:	89ab      	ldrh	r3, [r5, #12]
 80196fc:	059a      	lsls	r2, r3, #22
 80196fe:	d402      	bmi.n	8019706 <_vfiprintf_r+0x202>
 8019700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019702:	f7fd fd29 	bl	8017158 <__retarget_lock_release_recursive>
 8019706:	89ab      	ldrh	r3, [r5, #12]
 8019708:	065b      	lsls	r3, r3, #25
 801970a:	f53f af1d 	bmi.w	8019548 <_vfiprintf_r+0x44>
 801970e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019710:	e71c      	b.n	801954c <_vfiprintf_r+0x48>
 8019712:	ab03      	add	r3, sp, #12
 8019714:	9300      	str	r3, [sp, #0]
 8019716:	462a      	mov	r2, r5
 8019718:	4b05      	ldr	r3, [pc, #20]	; (8019730 <_vfiprintf_r+0x22c>)
 801971a:	a904      	add	r1, sp, #16
 801971c:	4630      	mov	r0, r6
 801971e:	f7fc ff7d 	bl	801661c <_printf_i>
 8019722:	e7e4      	b.n	80196ee <_vfiprintf_r+0x1ea>
 8019724:	0801dca4 	.word	0x0801dca4
 8019728:	0801dcae 	.word	0x0801dcae
 801972c:	080160d5 	.word	0x080160d5
 8019730:	080194df 	.word	0x080194df
 8019734:	0801dcaa 	.word	0x0801dcaa

08019738 <__swbuf_r>:
 8019738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801973a:	460e      	mov	r6, r1
 801973c:	4614      	mov	r4, r2
 801973e:	4605      	mov	r5, r0
 8019740:	b118      	cbz	r0, 801974a <__swbuf_r+0x12>
 8019742:	6a03      	ldr	r3, [r0, #32]
 8019744:	b90b      	cbnz	r3, 801974a <__swbuf_r+0x12>
 8019746:	f7fd fb27 	bl	8016d98 <__sinit>
 801974a:	69a3      	ldr	r3, [r4, #24]
 801974c:	60a3      	str	r3, [r4, #8]
 801974e:	89a3      	ldrh	r3, [r4, #12]
 8019750:	071a      	lsls	r2, r3, #28
 8019752:	d525      	bpl.n	80197a0 <__swbuf_r+0x68>
 8019754:	6923      	ldr	r3, [r4, #16]
 8019756:	b31b      	cbz	r3, 80197a0 <__swbuf_r+0x68>
 8019758:	6823      	ldr	r3, [r4, #0]
 801975a:	6922      	ldr	r2, [r4, #16]
 801975c:	1a98      	subs	r0, r3, r2
 801975e:	6963      	ldr	r3, [r4, #20]
 8019760:	b2f6      	uxtb	r6, r6
 8019762:	4283      	cmp	r3, r0
 8019764:	4637      	mov	r7, r6
 8019766:	dc04      	bgt.n	8019772 <__swbuf_r+0x3a>
 8019768:	4621      	mov	r1, r4
 801976a:	4628      	mov	r0, r5
 801976c:	f7ff fe00 	bl	8019370 <_fflush_r>
 8019770:	b9e0      	cbnz	r0, 80197ac <__swbuf_r+0x74>
 8019772:	68a3      	ldr	r3, [r4, #8]
 8019774:	3b01      	subs	r3, #1
 8019776:	60a3      	str	r3, [r4, #8]
 8019778:	6823      	ldr	r3, [r4, #0]
 801977a:	1c5a      	adds	r2, r3, #1
 801977c:	6022      	str	r2, [r4, #0]
 801977e:	701e      	strb	r6, [r3, #0]
 8019780:	6962      	ldr	r2, [r4, #20]
 8019782:	1c43      	adds	r3, r0, #1
 8019784:	429a      	cmp	r2, r3
 8019786:	d004      	beq.n	8019792 <__swbuf_r+0x5a>
 8019788:	89a3      	ldrh	r3, [r4, #12]
 801978a:	07db      	lsls	r3, r3, #31
 801978c:	d506      	bpl.n	801979c <__swbuf_r+0x64>
 801978e:	2e0a      	cmp	r6, #10
 8019790:	d104      	bne.n	801979c <__swbuf_r+0x64>
 8019792:	4621      	mov	r1, r4
 8019794:	4628      	mov	r0, r5
 8019796:	f7ff fdeb 	bl	8019370 <_fflush_r>
 801979a:	b938      	cbnz	r0, 80197ac <__swbuf_r+0x74>
 801979c:	4638      	mov	r0, r7
 801979e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197a0:	4621      	mov	r1, r4
 80197a2:	4628      	mov	r0, r5
 80197a4:	f000 f806 	bl	80197b4 <__swsetup_r>
 80197a8:	2800      	cmp	r0, #0
 80197aa:	d0d5      	beq.n	8019758 <__swbuf_r+0x20>
 80197ac:	f04f 37ff 	mov.w	r7, #4294967295
 80197b0:	e7f4      	b.n	801979c <__swbuf_r+0x64>
	...

080197b4 <__swsetup_r>:
 80197b4:	b538      	push	{r3, r4, r5, lr}
 80197b6:	4b2a      	ldr	r3, [pc, #168]	; (8019860 <__swsetup_r+0xac>)
 80197b8:	4605      	mov	r5, r0
 80197ba:	6818      	ldr	r0, [r3, #0]
 80197bc:	460c      	mov	r4, r1
 80197be:	b118      	cbz	r0, 80197c8 <__swsetup_r+0x14>
 80197c0:	6a03      	ldr	r3, [r0, #32]
 80197c2:	b90b      	cbnz	r3, 80197c8 <__swsetup_r+0x14>
 80197c4:	f7fd fae8 	bl	8016d98 <__sinit>
 80197c8:	89a3      	ldrh	r3, [r4, #12]
 80197ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80197ce:	0718      	lsls	r0, r3, #28
 80197d0:	d422      	bmi.n	8019818 <__swsetup_r+0x64>
 80197d2:	06d9      	lsls	r1, r3, #27
 80197d4:	d407      	bmi.n	80197e6 <__swsetup_r+0x32>
 80197d6:	2309      	movs	r3, #9
 80197d8:	602b      	str	r3, [r5, #0]
 80197da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80197de:	81a3      	strh	r3, [r4, #12]
 80197e0:	f04f 30ff 	mov.w	r0, #4294967295
 80197e4:	e034      	b.n	8019850 <__swsetup_r+0x9c>
 80197e6:	0758      	lsls	r0, r3, #29
 80197e8:	d512      	bpl.n	8019810 <__swsetup_r+0x5c>
 80197ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80197ec:	b141      	cbz	r1, 8019800 <__swsetup_r+0x4c>
 80197ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80197f2:	4299      	cmp	r1, r3
 80197f4:	d002      	beq.n	80197fc <__swsetup_r+0x48>
 80197f6:	4628      	mov	r0, r5
 80197f8:	f7fe fb6c 	bl	8017ed4 <_free_r>
 80197fc:	2300      	movs	r3, #0
 80197fe:	6363      	str	r3, [r4, #52]	; 0x34
 8019800:	89a3      	ldrh	r3, [r4, #12]
 8019802:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019806:	81a3      	strh	r3, [r4, #12]
 8019808:	2300      	movs	r3, #0
 801980a:	6063      	str	r3, [r4, #4]
 801980c:	6923      	ldr	r3, [r4, #16]
 801980e:	6023      	str	r3, [r4, #0]
 8019810:	89a3      	ldrh	r3, [r4, #12]
 8019812:	f043 0308 	orr.w	r3, r3, #8
 8019816:	81a3      	strh	r3, [r4, #12]
 8019818:	6923      	ldr	r3, [r4, #16]
 801981a:	b94b      	cbnz	r3, 8019830 <__swsetup_r+0x7c>
 801981c:	89a3      	ldrh	r3, [r4, #12]
 801981e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019826:	d003      	beq.n	8019830 <__swsetup_r+0x7c>
 8019828:	4621      	mov	r1, r4
 801982a:	4628      	mov	r0, r5
 801982c:	f000 f88c 	bl	8019948 <__smakebuf_r>
 8019830:	89a0      	ldrh	r0, [r4, #12]
 8019832:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019836:	f010 0301 	ands.w	r3, r0, #1
 801983a:	d00a      	beq.n	8019852 <__swsetup_r+0x9e>
 801983c:	2300      	movs	r3, #0
 801983e:	60a3      	str	r3, [r4, #8]
 8019840:	6963      	ldr	r3, [r4, #20]
 8019842:	425b      	negs	r3, r3
 8019844:	61a3      	str	r3, [r4, #24]
 8019846:	6923      	ldr	r3, [r4, #16]
 8019848:	b943      	cbnz	r3, 801985c <__swsetup_r+0xa8>
 801984a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801984e:	d1c4      	bne.n	80197da <__swsetup_r+0x26>
 8019850:	bd38      	pop	{r3, r4, r5, pc}
 8019852:	0781      	lsls	r1, r0, #30
 8019854:	bf58      	it	pl
 8019856:	6963      	ldrpl	r3, [r4, #20]
 8019858:	60a3      	str	r3, [r4, #8]
 801985a:	e7f4      	b.n	8019846 <__swsetup_r+0x92>
 801985c:	2000      	movs	r0, #0
 801985e:	e7f7      	b.n	8019850 <__swsetup_r+0x9c>
 8019860:	200002f4 	.word	0x200002f4

08019864 <_raise_r>:
 8019864:	291f      	cmp	r1, #31
 8019866:	b538      	push	{r3, r4, r5, lr}
 8019868:	4604      	mov	r4, r0
 801986a:	460d      	mov	r5, r1
 801986c:	d904      	bls.n	8019878 <_raise_r+0x14>
 801986e:	2316      	movs	r3, #22
 8019870:	6003      	str	r3, [r0, #0]
 8019872:	f04f 30ff 	mov.w	r0, #4294967295
 8019876:	bd38      	pop	{r3, r4, r5, pc}
 8019878:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801987a:	b112      	cbz	r2, 8019882 <_raise_r+0x1e>
 801987c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019880:	b94b      	cbnz	r3, 8019896 <_raise_r+0x32>
 8019882:	4620      	mov	r0, r4
 8019884:	f000 f830 	bl	80198e8 <_getpid_r>
 8019888:	462a      	mov	r2, r5
 801988a:	4601      	mov	r1, r0
 801988c:	4620      	mov	r0, r4
 801988e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019892:	f000 b817 	b.w	80198c4 <_kill_r>
 8019896:	2b01      	cmp	r3, #1
 8019898:	d00a      	beq.n	80198b0 <_raise_r+0x4c>
 801989a:	1c59      	adds	r1, r3, #1
 801989c:	d103      	bne.n	80198a6 <_raise_r+0x42>
 801989e:	2316      	movs	r3, #22
 80198a0:	6003      	str	r3, [r0, #0]
 80198a2:	2001      	movs	r0, #1
 80198a4:	e7e7      	b.n	8019876 <_raise_r+0x12>
 80198a6:	2400      	movs	r4, #0
 80198a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80198ac:	4628      	mov	r0, r5
 80198ae:	4798      	blx	r3
 80198b0:	2000      	movs	r0, #0
 80198b2:	e7e0      	b.n	8019876 <_raise_r+0x12>

080198b4 <raise>:
 80198b4:	4b02      	ldr	r3, [pc, #8]	; (80198c0 <raise+0xc>)
 80198b6:	4601      	mov	r1, r0
 80198b8:	6818      	ldr	r0, [r3, #0]
 80198ba:	f7ff bfd3 	b.w	8019864 <_raise_r>
 80198be:	bf00      	nop
 80198c0:	200002f4 	.word	0x200002f4

080198c4 <_kill_r>:
 80198c4:	b538      	push	{r3, r4, r5, lr}
 80198c6:	4d07      	ldr	r5, [pc, #28]	; (80198e4 <_kill_r+0x20>)
 80198c8:	2300      	movs	r3, #0
 80198ca:	4604      	mov	r4, r0
 80198cc:	4608      	mov	r0, r1
 80198ce:	4611      	mov	r1, r2
 80198d0:	602b      	str	r3, [r5, #0]
 80198d2:	f7ec f9db 	bl	8005c8c <_kill>
 80198d6:	1c43      	adds	r3, r0, #1
 80198d8:	d102      	bne.n	80198e0 <_kill_r+0x1c>
 80198da:	682b      	ldr	r3, [r5, #0]
 80198dc:	b103      	cbz	r3, 80198e0 <_kill_r+0x1c>
 80198de:	6023      	str	r3, [r4, #0]
 80198e0:	bd38      	pop	{r3, r4, r5, pc}
 80198e2:	bf00      	nop
 80198e4:	200025b4 	.word	0x200025b4

080198e8 <_getpid_r>:
 80198e8:	f7ec b9c8 	b.w	8005c7c <_getpid>

080198ec <_malloc_usable_size_r>:
 80198ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80198f0:	1f18      	subs	r0, r3, #4
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	bfbc      	itt	lt
 80198f6:	580b      	ldrlt	r3, [r1, r0]
 80198f8:	18c0      	addlt	r0, r0, r3
 80198fa:	4770      	bx	lr

080198fc <__swhatbuf_r>:
 80198fc:	b570      	push	{r4, r5, r6, lr}
 80198fe:	460c      	mov	r4, r1
 8019900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019904:	2900      	cmp	r1, #0
 8019906:	b096      	sub	sp, #88	; 0x58
 8019908:	4615      	mov	r5, r2
 801990a:	461e      	mov	r6, r3
 801990c:	da0d      	bge.n	801992a <__swhatbuf_r+0x2e>
 801990e:	89a3      	ldrh	r3, [r4, #12]
 8019910:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019914:	f04f 0100 	mov.w	r1, #0
 8019918:	bf0c      	ite	eq
 801991a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801991e:	2340      	movne	r3, #64	; 0x40
 8019920:	2000      	movs	r0, #0
 8019922:	6031      	str	r1, [r6, #0]
 8019924:	602b      	str	r3, [r5, #0]
 8019926:	b016      	add	sp, #88	; 0x58
 8019928:	bd70      	pop	{r4, r5, r6, pc}
 801992a:	466a      	mov	r2, sp
 801992c:	f000 f848 	bl	80199c0 <_fstat_r>
 8019930:	2800      	cmp	r0, #0
 8019932:	dbec      	blt.n	801990e <__swhatbuf_r+0x12>
 8019934:	9901      	ldr	r1, [sp, #4]
 8019936:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801993a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801993e:	4259      	negs	r1, r3
 8019940:	4159      	adcs	r1, r3
 8019942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019946:	e7eb      	b.n	8019920 <__swhatbuf_r+0x24>

08019948 <__smakebuf_r>:
 8019948:	898b      	ldrh	r3, [r1, #12]
 801994a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801994c:	079d      	lsls	r5, r3, #30
 801994e:	4606      	mov	r6, r0
 8019950:	460c      	mov	r4, r1
 8019952:	d507      	bpl.n	8019964 <__smakebuf_r+0x1c>
 8019954:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019958:	6023      	str	r3, [r4, #0]
 801995a:	6123      	str	r3, [r4, #16]
 801995c:	2301      	movs	r3, #1
 801995e:	6163      	str	r3, [r4, #20]
 8019960:	b002      	add	sp, #8
 8019962:	bd70      	pop	{r4, r5, r6, pc}
 8019964:	ab01      	add	r3, sp, #4
 8019966:	466a      	mov	r2, sp
 8019968:	f7ff ffc8 	bl	80198fc <__swhatbuf_r>
 801996c:	9900      	ldr	r1, [sp, #0]
 801996e:	4605      	mov	r5, r0
 8019970:	4630      	mov	r0, r6
 8019972:	f7fb fb7b 	bl	801506c <_malloc_r>
 8019976:	b948      	cbnz	r0, 801998c <__smakebuf_r+0x44>
 8019978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801997c:	059a      	lsls	r2, r3, #22
 801997e:	d4ef      	bmi.n	8019960 <__smakebuf_r+0x18>
 8019980:	f023 0303 	bic.w	r3, r3, #3
 8019984:	f043 0302 	orr.w	r3, r3, #2
 8019988:	81a3      	strh	r3, [r4, #12]
 801998a:	e7e3      	b.n	8019954 <__smakebuf_r+0xc>
 801998c:	89a3      	ldrh	r3, [r4, #12]
 801998e:	6020      	str	r0, [r4, #0]
 8019990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019994:	81a3      	strh	r3, [r4, #12]
 8019996:	9b00      	ldr	r3, [sp, #0]
 8019998:	6163      	str	r3, [r4, #20]
 801999a:	9b01      	ldr	r3, [sp, #4]
 801999c:	6120      	str	r0, [r4, #16]
 801999e:	b15b      	cbz	r3, 80199b8 <__smakebuf_r+0x70>
 80199a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80199a4:	4630      	mov	r0, r6
 80199a6:	f000 f81d 	bl	80199e4 <_isatty_r>
 80199aa:	b128      	cbz	r0, 80199b8 <__smakebuf_r+0x70>
 80199ac:	89a3      	ldrh	r3, [r4, #12]
 80199ae:	f023 0303 	bic.w	r3, r3, #3
 80199b2:	f043 0301 	orr.w	r3, r3, #1
 80199b6:	81a3      	strh	r3, [r4, #12]
 80199b8:	89a3      	ldrh	r3, [r4, #12]
 80199ba:	431d      	orrs	r5, r3
 80199bc:	81a5      	strh	r5, [r4, #12]
 80199be:	e7cf      	b.n	8019960 <__smakebuf_r+0x18>

080199c0 <_fstat_r>:
 80199c0:	b538      	push	{r3, r4, r5, lr}
 80199c2:	4d07      	ldr	r5, [pc, #28]	; (80199e0 <_fstat_r+0x20>)
 80199c4:	2300      	movs	r3, #0
 80199c6:	4604      	mov	r4, r0
 80199c8:	4608      	mov	r0, r1
 80199ca:	4611      	mov	r1, r2
 80199cc:	602b      	str	r3, [r5, #0]
 80199ce:	f7ec f9bc 	bl	8005d4a <_fstat>
 80199d2:	1c43      	adds	r3, r0, #1
 80199d4:	d102      	bne.n	80199dc <_fstat_r+0x1c>
 80199d6:	682b      	ldr	r3, [r5, #0]
 80199d8:	b103      	cbz	r3, 80199dc <_fstat_r+0x1c>
 80199da:	6023      	str	r3, [r4, #0]
 80199dc:	bd38      	pop	{r3, r4, r5, pc}
 80199de:	bf00      	nop
 80199e0:	200025b4 	.word	0x200025b4

080199e4 <_isatty_r>:
 80199e4:	b538      	push	{r3, r4, r5, lr}
 80199e6:	4d06      	ldr	r5, [pc, #24]	; (8019a00 <_isatty_r+0x1c>)
 80199e8:	2300      	movs	r3, #0
 80199ea:	4604      	mov	r4, r0
 80199ec:	4608      	mov	r0, r1
 80199ee:	602b      	str	r3, [r5, #0]
 80199f0:	f7ec f9bb 	bl	8005d6a <_isatty>
 80199f4:	1c43      	adds	r3, r0, #1
 80199f6:	d102      	bne.n	80199fe <_isatty_r+0x1a>
 80199f8:	682b      	ldr	r3, [r5, #0]
 80199fa:	b103      	cbz	r3, 80199fe <_isatty_r+0x1a>
 80199fc:	6023      	str	r3, [r4, #0]
 80199fe:	bd38      	pop	{r3, r4, r5, pc}
 8019a00:	200025b4 	.word	0x200025b4
 8019a04:	00000000 	.word	0x00000000

08019a08 <log>:
 8019a08:	b538      	push	{r3, r4, r5, lr}
 8019a0a:	ed2d 8b02 	vpush	{d8}
 8019a0e:	ec55 4b10 	vmov	r4, r5, d0
 8019a12:	f000 fb89 	bl	801a128 <__ieee754_log>
 8019a16:	4622      	mov	r2, r4
 8019a18:	462b      	mov	r3, r5
 8019a1a:	4620      	mov	r0, r4
 8019a1c:	4629      	mov	r1, r5
 8019a1e:	eeb0 8a40 	vmov.f32	s16, s0
 8019a22:	eef0 8a60 	vmov.f32	s17, s1
 8019a26:	f7e7 f881 	bl	8000b2c <__aeabi_dcmpun>
 8019a2a:	b998      	cbnz	r0, 8019a54 <log+0x4c>
 8019a2c:	2200      	movs	r2, #0
 8019a2e:	2300      	movs	r3, #0
 8019a30:	4620      	mov	r0, r4
 8019a32:	4629      	mov	r1, r5
 8019a34:	f7e7 f870 	bl	8000b18 <__aeabi_dcmpgt>
 8019a38:	b960      	cbnz	r0, 8019a54 <log+0x4c>
 8019a3a:	2200      	movs	r2, #0
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	4620      	mov	r0, r4
 8019a40:	4629      	mov	r1, r5
 8019a42:	f7e7 f841 	bl	8000ac8 <__aeabi_dcmpeq>
 8019a46:	b160      	cbz	r0, 8019a62 <log+0x5a>
 8019a48:	f7fd fb5a 	bl	8017100 <__errno>
 8019a4c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8019a78 <log+0x70>
 8019a50:	2322      	movs	r3, #34	; 0x22
 8019a52:	6003      	str	r3, [r0, #0]
 8019a54:	eeb0 0a48 	vmov.f32	s0, s16
 8019a58:	eef0 0a68 	vmov.f32	s1, s17
 8019a5c:	ecbd 8b02 	vpop	{d8}
 8019a60:	bd38      	pop	{r3, r4, r5, pc}
 8019a62:	f7fd fb4d 	bl	8017100 <__errno>
 8019a66:	ecbd 8b02 	vpop	{d8}
 8019a6a:	2321      	movs	r3, #33	; 0x21
 8019a6c:	6003      	str	r3, [r0, #0]
 8019a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a72:	4803      	ldr	r0, [pc, #12]	; (8019a80 <log+0x78>)
 8019a74:	f7fd bb88 	b.w	8017188 <nan>
 8019a78:	00000000 	.word	0x00000000
 8019a7c:	fff00000 	.word	0xfff00000
 8019a80:	0801da76 	.word	0x0801da76
 8019a84:	00000000 	.word	0x00000000

08019a88 <cos>:
 8019a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019a8a:	ec53 2b10 	vmov	r2, r3, d0
 8019a8e:	4826      	ldr	r0, [pc, #152]	; (8019b28 <cos+0xa0>)
 8019a90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019a94:	4281      	cmp	r1, r0
 8019a96:	dc06      	bgt.n	8019aa6 <cos+0x1e>
 8019a98:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8019b20 <cos+0x98>
 8019a9c:	b005      	add	sp, #20
 8019a9e:	f85d eb04 	ldr.w	lr, [sp], #4
 8019aa2:	f000 b9b9 	b.w	8019e18 <__kernel_cos>
 8019aa6:	4821      	ldr	r0, [pc, #132]	; (8019b2c <cos+0xa4>)
 8019aa8:	4281      	cmp	r1, r0
 8019aaa:	dd09      	ble.n	8019ac0 <cos+0x38>
 8019aac:	ee10 0a10 	vmov	r0, s0
 8019ab0:	4619      	mov	r1, r3
 8019ab2:	f7e6 fbe9 	bl	8000288 <__aeabi_dsub>
 8019ab6:	ec41 0b10 	vmov	d0, r0, r1
 8019aba:	b005      	add	sp, #20
 8019abc:	f85d fb04 	ldr.w	pc, [sp], #4
 8019ac0:	4668      	mov	r0, sp
 8019ac2:	f000 fced 	bl	801a4a0 <__ieee754_rem_pio2>
 8019ac6:	f000 0003 	and.w	r0, r0, #3
 8019aca:	2801      	cmp	r0, #1
 8019acc:	d00b      	beq.n	8019ae6 <cos+0x5e>
 8019ace:	2802      	cmp	r0, #2
 8019ad0:	d016      	beq.n	8019b00 <cos+0x78>
 8019ad2:	b9e0      	cbnz	r0, 8019b0e <cos+0x86>
 8019ad4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019ad8:	ed9d 0b00 	vldr	d0, [sp]
 8019adc:	f000 f99c 	bl	8019e18 <__kernel_cos>
 8019ae0:	ec51 0b10 	vmov	r0, r1, d0
 8019ae4:	e7e7      	b.n	8019ab6 <cos+0x2e>
 8019ae6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019aea:	ed9d 0b00 	vldr	d0, [sp]
 8019aee:	f000 fa5b 	bl	8019fa8 <__kernel_sin>
 8019af2:	ec53 2b10 	vmov	r2, r3, d0
 8019af6:	ee10 0a10 	vmov	r0, s0
 8019afa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019afe:	e7da      	b.n	8019ab6 <cos+0x2e>
 8019b00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019b04:	ed9d 0b00 	vldr	d0, [sp]
 8019b08:	f000 f986 	bl	8019e18 <__kernel_cos>
 8019b0c:	e7f1      	b.n	8019af2 <cos+0x6a>
 8019b0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019b12:	ed9d 0b00 	vldr	d0, [sp]
 8019b16:	2001      	movs	r0, #1
 8019b18:	f000 fa46 	bl	8019fa8 <__kernel_sin>
 8019b1c:	e7e0      	b.n	8019ae0 <cos+0x58>
 8019b1e:	bf00      	nop
	...
 8019b28:	3fe921fb 	.word	0x3fe921fb
 8019b2c:	7fefffff 	.word	0x7fefffff

08019b30 <sin>:
 8019b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019b32:	ec53 2b10 	vmov	r2, r3, d0
 8019b36:	4828      	ldr	r0, [pc, #160]	; (8019bd8 <sin+0xa8>)
 8019b38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019b3c:	4281      	cmp	r1, r0
 8019b3e:	dc07      	bgt.n	8019b50 <sin+0x20>
 8019b40:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8019bd0 <sin+0xa0>
 8019b44:	2000      	movs	r0, #0
 8019b46:	b005      	add	sp, #20
 8019b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b4c:	f000 ba2c 	b.w	8019fa8 <__kernel_sin>
 8019b50:	4822      	ldr	r0, [pc, #136]	; (8019bdc <sin+0xac>)
 8019b52:	4281      	cmp	r1, r0
 8019b54:	dd09      	ble.n	8019b6a <sin+0x3a>
 8019b56:	ee10 0a10 	vmov	r0, s0
 8019b5a:	4619      	mov	r1, r3
 8019b5c:	f7e6 fb94 	bl	8000288 <__aeabi_dsub>
 8019b60:	ec41 0b10 	vmov	d0, r0, r1
 8019b64:	b005      	add	sp, #20
 8019b66:	f85d fb04 	ldr.w	pc, [sp], #4
 8019b6a:	4668      	mov	r0, sp
 8019b6c:	f000 fc98 	bl	801a4a0 <__ieee754_rem_pio2>
 8019b70:	f000 0003 	and.w	r0, r0, #3
 8019b74:	2801      	cmp	r0, #1
 8019b76:	d00c      	beq.n	8019b92 <sin+0x62>
 8019b78:	2802      	cmp	r0, #2
 8019b7a:	d011      	beq.n	8019ba0 <sin+0x70>
 8019b7c:	b9f0      	cbnz	r0, 8019bbc <sin+0x8c>
 8019b7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019b82:	ed9d 0b00 	vldr	d0, [sp]
 8019b86:	2001      	movs	r0, #1
 8019b88:	f000 fa0e 	bl	8019fa8 <__kernel_sin>
 8019b8c:	ec51 0b10 	vmov	r0, r1, d0
 8019b90:	e7e6      	b.n	8019b60 <sin+0x30>
 8019b92:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019b96:	ed9d 0b00 	vldr	d0, [sp]
 8019b9a:	f000 f93d 	bl	8019e18 <__kernel_cos>
 8019b9e:	e7f5      	b.n	8019b8c <sin+0x5c>
 8019ba0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019ba4:	ed9d 0b00 	vldr	d0, [sp]
 8019ba8:	2001      	movs	r0, #1
 8019baa:	f000 f9fd 	bl	8019fa8 <__kernel_sin>
 8019bae:	ec53 2b10 	vmov	r2, r3, d0
 8019bb2:	ee10 0a10 	vmov	r0, s0
 8019bb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019bba:	e7d1      	b.n	8019b60 <sin+0x30>
 8019bbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019bc0:	ed9d 0b00 	vldr	d0, [sp]
 8019bc4:	f000 f928 	bl	8019e18 <__kernel_cos>
 8019bc8:	e7f1      	b.n	8019bae <sin+0x7e>
 8019bca:	bf00      	nop
 8019bcc:	f3af 8000 	nop.w
	...
 8019bd8:	3fe921fb 	.word	0x3fe921fb
 8019bdc:	7fefffff 	.word	0x7fefffff

08019be0 <expf>:
 8019be0:	b508      	push	{r3, lr}
 8019be2:	ed2d 8b02 	vpush	{d8}
 8019be6:	eef0 8a40 	vmov.f32	s17, s0
 8019bea:	f000 fe9d 	bl	801a928 <__ieee754_expf>
 8019bee:	eeb0 8a40 	vmov.f32	s16, s0
 8019bf2:	eeb0 0a68 	vmov.f32	s0, s17
 8019bf6:	f000 f87b 	bl	8019cf0 <finitef>
 8019bfa:	b160      	cbz	r0, 8019c16 <expf+0x36>
 8019bfc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8019c3c <expf+0x5c>
 8019c00:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c08:	dd0a      	ble.n	8019c20 <expf+0x40>
 8019c0a:	f7fd fa79 	bl	8017100 <__errno>
 8019c0e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8019c40 <expf+0x60>
 8019c12:	2322      	movs	r3, #34	; 0x22
 8019c14:	6003      	str	r3, [r0, #0]
 8019c16:	eeb0 0a48 	vmov.f32	s0, s16
 8019c1a:	ecbd 8b02 	vpop	{d8}
 8019c1e:	bd08      	pop	{r3, pc}
 8019c20:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019c44 <expf+0x64>
 8019c24:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c2c:	d5f3      	bpl.n	8019c16 <expf+0x36>
 8019c2e:	f7fd fa67 	bl	8017100 <__errno>
 8019c32:	2322      	movs	r3, #34	; 0x22
 8019c34:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8019c48 <expf+0x68>
 8019c38:	6003      	str	r3, [r0, #0]
 8019c3a:	e7ec      	b.n	8019c16 <expf+0x36>
 8019c3c:	42b17217 	.word	0x42b17217
 8019c40:	7f800000 	.word	0x7f800000
 8019c44:	c2cff1b5 	.word	0xc2cff1b5
 8019c48:	00000000 	.word	0x00000000

08019c4c <fmin>:
 8019c4c:	b508      	push	{r3, lr}
 8019c4e:	ed2d 8b04 	vpush	{d8-d9}
 8019c52:	eeb0 8a40 	vmov.f32	s16, s0
 8019c56:	eef0 8a60 	vmov.f32	s17, s1
 8019c5a:	eeb0 9a41 	vmov.f32	s18, s2
 8019c5e:	eef0 9a61 	vmov.f32	s19, s3
 8019c62:	f000 f81b 	bl	8019c9c <__fpclassifyd>
 8019c66:	b168      	cbz	r0, 8019c84 <fmin+0x38>
 8019c68:	eeb0 0a49 	vmov.f32	s0, s18
 8019c6c:	eef0 0a69 	vmov.f32	s1, s19
 8019c70:	f000 f814 	bl	8019c9c <__fpclassifyd>
 8019c74:	b150      	cbz	r0, 8019c8c <fmin+0x40>
 8019c76:	ec53 2b19 	vmov	r2, r3, d9
 8019c7a:	ec51 0b18 	vmov	r0, r1, d8
 8019c7e:	f7e6 ff2d 	bl	8000adc <__aeabi_dcmplt>
 8019c82:	b918      	cbnz	r0, 8019c8c <fmin+0x40>
 8019c84:	eeb0 8a49 	vmov.f32	s16, s18
 8019c88:	eef0 8a69 	vmov.f32	s17, s19
 8019c8c:	eeb0 0a48 	vmov.f32	s0, s16
 8019c90:	eef0 0a68 	vmov.f32	s1, s17
 8019c94:	ecbd 8b04 	vpop	{d8-d9}
 8019c98:	bd08      	pop	{r3, pc}
	...

08019c9c <__fpclassifyd>:
 8019c9c:	ec51 0b10 	vmov	r0, r1, d0
 8019ca0:	b510      	push	{r4, lr}
 8019ca2:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8019ca6:	460b      	mov	r3, r1
 8019ca8:	d019      	beq.n	8019cde <__fpclassifyd+0x42>
 8019caa:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8019cae:	490e      	ldr	r1, [pc, #56]	; (8019ce8 <__fpclassifyd+0x4c>)
 8019cb0:	428a      	cmp	r2, r1
 8019cb2:	d90e      	bls.n	8019cd2 <__fpclassifyd+0x36>
 8019cb4:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8019cb8:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8019cbc:	428a      	cmp	r2, r1
 8019cbe:	d908      	bls.n	8019cd2 <__fpclassifyd+0x36>
 8019cc0:	4a0a      	ldr	r2, [pc, #40]	; (8019cec <__fpclassifyd+0x50>)
 8019cc2:	4213      	tst	r3, r2
 8019cc4:	d007      	beq.n	8019cd6 <__fpclassifyd+0x3a>
 8019cc6:	4294      	cmp	r4, r2
 8019cc8:	d107      	bne.n	8019cda <__fpclassifyd+0x3e>
 8019cca:	fab0 f080 	clz	r0, r0
 8019cce:	0940      	lsrs	r0, r0, #5
 8019cd0:	bd10      	pop	{r4, pc}
 8019cd2:	2004      	movs	r0, #4
 8019cd4:	e7fc      	b.n	8019cd0 <__fpclassifyd+0x34>
 8019cd6:	2003      	movs	r0, #3
 8019cd8:	e7fa      	b.n	8019cd0 <__fpclassifyd+0x34>
 8019cda:	2000      	movs	r0, #0
 8019cdc:	e7f8      	b.n	8019cd0 <__fpclassifyd+0x34>
 8019cde:	2800      	cmp	r0, #0
 8019ce0:	d1ee      	bne.n	8019cc0 <__fpclassifyd+0x24>
 8019ce2:	2002      	movs	r0, #2
 8019ce4:	e7f4      	b.n	8019cd0 <__fpclassifyd+0x34>
 8019ce6:	bf00      	nop
 8019ce8:	7fdfffff 	.word	0x7fdfffff
 8019cec:	7ff00000 	.word	0x7ff00000

08019cf0 <finitef>:
 8019cf0:	b082      	sub	sp, #8
 8019cf2:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019cf6:	9801      	ldr	r0, [sp, #4]
 8019cf8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019cfc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019d00:	bfac      	ite	ge
 8019d02:	2000      	movge	r0, #0
 8019d04:	2001      	movlt	r0, #1
 8019d06:	b002      	add	sp, #8
 8019d08:	4770      	bx	lr

08019d0a <cosl>:
 8019d0a:	f7ff bebd 	b.w	8019a88 <cos>

08019d0e <sinl>:
 8019d0e:	f7ff bf0f 	b.w	8019b30 <sin>

08019d12 <acosl>:
 8019d12:	f000 bdcb 	b.w	801a8ac <acos>
	...

08019d18 <floor>:
 8019d18:	ec51 0b10 	vmov	r0, r1, d0
 8019d1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d24:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8019d28:	2e13      	cmp	r6, #19
 8019d2a:	ee10 5a10 	vmov	r5, s0
 8019d2e:	ee10 8a10 	vmov	r8, s0
 8019d32:	460c      	mov	r4, r1
 8019d34:	dc31      	bgt.n	8019d9a <floor+0x82>
 8019d36:	2e00      	cmp	r6, #0
 8019d38:	da14      	bge.n	8019d64 <floor+0x4c>
 8019d3a:	a333      	add	r3, pc, #204	; (adr r3, 8019e08 <floor+0xf0>)
 8019d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d40:	f7e6 faa4 	bl	800028c <__adddf3>
 8019d44:	2200      	movs	r2, #0
 8019d46:	2300      	movs	r3, #0
 8019d48:	f7e6 fee6 	bl	8000b18 <__aeabi_dcmpgt>
 8019d4c:	b138      	cbz	r0, 8019d5e <floor+0x46>
 8019d4e:	2c00      	cmp	r4, #0
 8019d50:	da53      	bge.n	8019dfa <floor+0xe2>
 8019d52:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8019d56:	4325      	orrs	r5, r4
 8019d58:	d052      	beq.n	8019e00 <floor+0xe8>
 8019d5a:	4c2d      	ldr	r4, [pc, #180]	; (8019e10 <floor+0xf8>)
 8019d5c:	2500      	movs	r5, #0
 8019d5e:	4621      	mov	r1, r4
 8019d60:	4628      	mov	r0, r5
 8019d62:	e024      	b.n	8019dae <floor+0x96>
 8019d64:	4f2b      	ldr	r7, [pc, #172]	; (8019e14 <floor+0xfc>)
 8019d66:	4137      	asrs	r7, r6
 8019d68:	ea01 0307 	and.w	r3, r1, r7
 8019d6c:	4303      	orrs	r3, r0
 8019d6e:	d01e      	beq.n	8019dae <floor+0x96>
 8019d70:	a325      	add	r3, pc, #148	; (adr r3, 8019e08 <floor+0xf0>)
 8019d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d76:	f7e6 fa89 	bl	800028c <__adddf3>
 8019d7a:	2200      	movs	r2, #0
 8019d7c:	2300      	movs	r3, #0
 8019d7e:	f7e6 fecb 	bl	8000b18 <__aeabi_dcmpgt>
 8019d82:	2800      	cmp	r0, #0
 8019d84:	d0eb      	beq.n	8019d5e <floor+0x46>
 8019d86:	2c00      	cmp	r4, #0
 8019d88:	bfbe      	ittt	lt
 8019d8a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8019d8e:	4133      	asrlt	r3, r6
 8019d90:	18e4      	addlt	r4, r4, r3
 8019d92:	ea24 0407 	bic.w	r4, r4, r7
 8019d96:	2500      	movs	r5, #0
 8019d98:	e7e1      	b.n	8019d5e <floor+0x46>
 8019d9a:	2e33      	cmp	r6, #51	; 0x33
 8019d9c:	dd0b      	ble.n	8019db6 <floor+0x9e>
 8019d9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019da2:	d104      	bne.n	8019dae <floor+0x96>
 8019da4:	ee10 2a10 	vmov	r2, s0
 8019da8:	460b      	mov	r3, r1
 8019daa:	f7e6 fa6f 	bl	800028c <__adddf3>
 8019dae:	ec41 0b10 	vmov	d0, r0, r1
 8019db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019db6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8019dba:	f04f 37ff 	mov.w	r7, #4294967295
 8019dbe:	40df      	lsrs	r7, r3
 8019dc0:	4238      	tst	r0, r7
 8019dc2:	d0f4      	beq.n	8019dae <floor+0x96>
 8019dc4:	a310      	add	r3, pc, #64	; (adr r3, 8019e08 <floor+0xf0>)
 8019dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dca:	f7e6 fa5f 	bl	800028c <__adddf3>
 8019dce:	2200      	movs	r2, #0
 8019dd0:	2300      	movs	r3, #0
 8019dd2:	f7e6 fea1 	bl	8000b18 <__aeabi_dcmpgt>
 8019dd6:	2800      	cmp	r0, #0
 8019dd8:	d0c1      	beq.n	8019d5e <floor+0x46>
 8019dda:	2c00      	cmp	r4, #0
 8019ddc:	da0a      	bge.n	8019df4 <floor+0xdc>
 8019dde:	2e14      	cmp	r6, #20
 8019de0:	d101      	bne.n	8019de6 <floor+0xce>
 8019de2:	3401      	adds	r4, #1
 8019de4:	e006      	b.n	8019df4 <floor+0xdc>
 8019de6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019dea:	2301      	movs	r3, #1
 8019dec:	40b3      	lsls	r3, r6
 8019dee:	441d      	add	r5, r3
 8019df0:	45a8      	cmp	r8, r5
 8019df2:	d8f6      	bhi.n	8019de2 <floor+0xca>
 8019df4:	ea25 0507 	bic.w	r5, r5, r7
 8019df8:	e7b1      	b.n	8019d5e <floor+0x46>
 8019dfa:	2500      	movs	r5, #0
 8019dfc:	462c      	mov	r4, r5
 8019dfe:	e7ae      	b.n	8019d5e <floor+0x46>
 8019e00:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019e04:	e7ab      	b.n	8019d5e <floor+0x46>
 8019e06:	bf00      	nop
 8019e08:	8800759c 	.word	0x8800759c
 8019e0c:	7e37e43c 	.word	0x7e37e43c
 8019e10:	bff00000 	.word	0xbff00000
 8019e14:	000fffff 	.word	0x000fffff

08019e18 <__kernel_cos>:
 8019e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e1c:	ec57 6b10 	vmov	r6, r7, d0
 8019e20:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019e24:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8019e28:	ed8d 1b00 	vstr	d1, [sp]
 8019e2c:	da07      	bge.n	8019e3e <__kernel_cos+0x26>
 8019e2e:	ee10 0a10 	vmov	r0, s0
 8019e32:	4639      	mov	r1, r7
 8019e34:	f7e6 fe90 	bl	8000b58 <__aeabi_d2iz>
 8019e38:	2800      	cmp	r0, #0
 8019e3a:	f000 8088 	beq.w	8019f4e <__kernel_cos+0x136>
 8019e3e:	4632      	mov	r2, r6
 8019e40:	463b      	mov	r3, r7
 8019e42:	4630      	mov	r0, r6
 8019e44:	4639      	mov	r1, r7
 8019e46:	f7e6 fbd7 	bl	80005f8 <__aeabi_dmul>
 8019e4a:	4b51      	ldr	r3, [pc, #324]	; (8019f90 <__kernel_cos+0x178>)
 8019e4c:	2200      	movs	r2, #0
 8019e4e:	4604      	mov	r4, r0
 8019e50:	460d      	mov	r5, r1
 8019e52:	f7e6 fbd1 	bl	80005f8 <__aeabi_dmul>
 8019e56:	a340      	add	r3, pc, #256	; (adr r3, 8019f58 <__kernel_cos+0x140>)
 8019e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e5c:	4682      	mov	sl, r0
 8019e5e:	468b      	mov	fp, r1
 8019e60:	4620      	mov	r0, r4
 8019e62:	4629      	mov	r1, r5
 8019e64:	f7e6 fbc8 	bl	80005f8 <__aeabi_dmul>
 8019e68:	a33d      	add	r3, pc, #244	; (adr r3, 8019f60 <__kernel_cos+0x148>)
 8019e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e6e:	f7e6 fa0d 	bl	800028c <__adddf3>
 8019e72:	4622      	mov	r2, r4
 8019e74:	462b      	mov	r3, r5
 8019e76:	f7e6 fbbf 	bl	80005f8 <__aeabi_dmul>
 8019e7a:	a33b      	add	r3, pc, #236	; (adr r3, 8019f68 <__kernel_cos+0x150>)
 8019e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e80:	f7e6 fa02 	bl	8000288 <__aeabi_dsub>
 8019e84:	4622      	mov	r2, r4
 8019e86:	462b      	mov	r3, r5
 8019e88:	f7e6 fbb6 	bl	80005f8 <__aeabi_dmul>
 8019e8c:	a338      	add	r3, pc, #224	; (adr r3, 8019f70 <__kernel_cos+0x158>)
 8019e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e92:	f7e6 f9fb 	bl	800028c <__adddf3>
 8019e96:	4622      	mov	r2, r4
 8019e98:	462b      	mov	r3, r5
 8019e9a:	f7e6 fbad 	bl	80005f8 <__aeabi_dmul>
 8019e9e:	a336      	add	r3, pc, #216	; (adr r3, 8019f78 <__kernel_cos+0x160>)
 8019ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ea4:	f7e6 f9f0 	bl	8000288 <__aeabi_dsub>
 8019ea8:	4622      	mov	r2, r4
 8019eaa:	462b      	mov	r3, r5
 8019eac:	f7e6 fba4 	bl	80005f8 <__aeabi_dmul>
 8019eb0:	a333      	add	r3, pc, #204	; (adr r3, 8019f80 <__kernel_cos+0x168>)
 8019eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eb6:	f7e6 f9e9 	bl	800028c <__adddf3>
 8019eba:	4622      	mov	r2, r4
 8019ebc:	462b      	mov	r3, r5
 8019ebe:	f7e6 fb9b 	bl	80005f8 <__aeabi_dmul>
 8019ec2:	4622      	mov	r2, r4
 8019ec4:	462b      	mov	r3, r5
 8019ec6:	f7e6 fb97 	bl	80005f8 <__aeabi_dmul>
 8019eca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019ece:	4604      	mov	r4, r0
 8019ed0:	460d      	mov	r5, r1
 8019ed2:	4630      	mov	r0, r6
 8019ed4:	4639      	mov	r1, r7
 8019ed6:	f7e6 fb8f 	bl	80005f8 <__aeabi_dmul>
 8019eda:	460b      	mov	r3, r1
 8019edc:	4602      	mov	r2, r0
 8019ede:	4629      	mov	r1, r5
 8019ee0:	4620      	mov	r0, r4
 8019ee2:	f7e6 f9d1 	bl	8000288 <__aeabi_dsub>
 8019ee6:	4b2b      	ldr	r3, [pc, #172]	; (8019f94 <__kernel_cos+0x17c>)
 8019ee8:	4598      	cmp	r8, r3
 8019eea:	4606      	mov	r6, r0
 8019eec:	460f      	mov	r7, r1
 8019eee:	dc10      	bgt.n	8019f12 <__kernel_cos+0xfa>
 8019ef0:	4602      	mov	r2, r0
 8019ef2:	460b      	mov	r3, r1
 8019ef4:	4650      	mov	r0, sl
 8019ef6:	4659      	mov	r1, fp
 8019ef8:	f7e6 f9c6 	bl	8000288 <__aeabi_dsub>
 8019efc:	460b      	mov	r3, r1
 8019efe:	4926      	ldr	r1, [pc, #152]	; (8019f98 <__kernel_cos+0x180>)
 8019f00:	4602      	mov	r2, r0
 8019f02:	2000      	movs	r0, #0
 8019f04:	f7e6 f9c0 	bl	8000288 <__aeabi_dsub>
 8019f08:	ec41 0b10 	vmov	d0, r0, r1
 8019f0c:	b003      	add	sp, #12
 8019f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f12:	4b22      	ldr	r3, [pc, #136]	; (8019f9c <__kernel_cos+0x184>)
 8019f14:	4920      	ldr	r1, [pc, #128]	; (8019f98 <__kernel_cos+0x180>)
 8019f16:	4598      	cmp	r8, r3
 8019f18:	bfcc      	ite	gt
 8019f1a:	4d21      	ldrgt	r5, [pc, #132]	; (8019fa0 <__kernel_cos+0x188>)
 8019f1c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8019f20:	2400      	movs	r4, #0
 8019f22:	4622      	mov	r2, r4
 8019f24:	462b      	mov	r3, r5
 8019f26:	2000      	movs	r0, #0
 8019f28:	f7e6 f9ae 	bl	8000288 <__aeabi_dsub>
 8019f2c:	4622      	mov	r2, r4
 8019f2e:	4680      	mov	r8, r0
 8019f30:	4689      	mov	r9, r1
 8019f32:	462b      	mov	r3, r5
 8019f34:	4650      	mov	r0, sl
 8019f36:	4659      	mov	r1, fp
 8019f38:	f7e6 f9a6 	bl	8000288 <__aeabi_dsub>
 8019f3c:	4632      	mov	r2, r6
 8019f3e:	463b      	mov	r3, r7
 8019f40:	f7e6 f9a2 	bl	8000288 <__aeabi_dsub>
 8019f44:	4602      	mov	r2, r0
 8019f46:	460b      	mov	r3, r1
 8019f48:	4640      	mov	r0, r8
 8019f4a:	4649      	mov	r1, r9
 8019f4c:	e7da      	b.n	8019f04 <__kernel_cos+0xec>
 8019f4e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8019f88 <__kernel_cos+0x170>
 8019f52:	e7db      	b.n	8019f0c <__kernel_cos+0xf4>
 8019f54:	f3af 8000 	nop.w
 8019f58:	be8838d4 	.word	0xbe8838d4
 8019f5c:	bda8fae9 	.word	0xbda8fae9
 8019f60:	bdb4b1c4 	.word	0xbdb4b1c4
 8019f64:	3e21ee9e 	.word	0x3e21ee9e
 8019f68:	809c52ad 	.word	0x809c52ad
 8019f6c:	3e927e4f 	.word	0x3e927e4f
 8019f70:	19cb1590 	.word	0x19cb1590
 8019f74:	3efa01a0 	.word	0x3efa01a0
 8019f78:	16c15177 	.word	0x16c15177
 8019f7c:	3f56c16c 	.word	0x3f56c16c
 8019f80:	5555554c 	.word	0x5555554c
 8019f84:	3fa55555 	.word	0x3fa55555
 8019f88:	00000000 	.word	0x00000000
 8019f8c:	3ff00000 	.word	0x3ff00000
 8019f90:	3fe00000 	.word	0x3fe00000
 8019f94:	3fd33332 	.word	0x3fd33332
 8019f98:	3ff00000 	.word	0x3ff00000
 8019f9c:	3fe90000 	.word	0x3fe90000
 8019fa0:	3fd20000 	.word	0x3fd20000
 8019fa4:	00000000 	.word	0x00000000

08019fa8 <__kernel_sin>:
 8019fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fac:	ed2d 8b04 	vpush	{d8-d9}
 8019fb0:	eeb0 8a41 	vmov.f32	s16, s2
 8019fb4:	eef0 8a61 	vmov.f32	s17, s3
 8019fb8:	ec55 4b10 	vmov	r4, r5, d0
 8019fbc:	b083      	sub	sp, #12
 8019fbe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019fc2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8019fc6:	9001      	str	r0, [sp, #4]
 8019fc8:	da06      	bge.n	8019fd8 <__kernel_sin+0x30>
 8019fca:	ee10 0a10 	vmov	r0, s0
 8019fce:	4629      	mov	r1, r5
 8019fd0:	f7e6 fdc2 	bl	8000b58 <__aeabi_d2iz>
 8019fd4:	2800      	cmp	r0, #0
 8019fd6:	d051      	beq.n	801a07c <__kernel_sin+0xd4>
 8019fd8:	4622      	mov	r2, r4
 8019fda:	462b      	mov	r3, r5
 8019fdc:	4620      	mov	r0, r4
 8019fde:	4629      	mov	r1, r5
 8019fe0:	f7e6 fb0a 	bl	80005f8 <__aeabi_dmul>
 8019fe4:	4682      	mov	sl, r0
 8019fe6:	468b      	mov	fp, r1
 8019fe8:	4602      	mov	r2, r0
 8019fea:	460b      	mov	r3, r1
 8019fec:	4620      	mov	r0, r4
 8019fee:	4629      	mov	r1, r5
 8019ff0:	f7e6 fb02 	bl	80005f8 <__aeabi_dmul>
 8019ff4:	a341      	add	r3, pc, #260	; (adr r3, 801a0fc <__kernel_sin+0x154>)
 8019ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ffa:	4680      	mov	r8, r0
 8019ffc:	4689      	mov	r9, r1
 8019ffe:	4650      	mov	r0, sl
 801a000:	4659      	mov	r1, fp
 801a002:	f7e6 faf9 	bl	80005f8 <__aeabi_dmul>
 801a006:	a33f      	add	r3, pc, #252	; (adr r3, 801a104 <__kernel_sin+0x15c>)
 801a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a00c:	f7e6 f93c 	bl	8000288 <__aeabi_dsub>
 801a010:	4652      	mov	r2, sl
 801a012:	465b      	mov	r3, fp
 801a014:	f7e6 faf0 	bl	80005f8 <__aeabi_dmul>
 801a018:	a33c      	add	r3, pc, #240	; (adr r3, 801a10c <__kernel_sin+0x164>)
 801a01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a01e:	f7e6 f935 	bl	800028c <__adddf3>
 801a022:	4652      	mov	r2, sl
 801a024:	465b      	mov	r3, fp
 801a026:	f7e6 fae7 	bl	80005f8 <__aeabi_dmul>
 801a02a:	a33a      	add	r3, pc, #232	; (adr r3, 801a114 <__kernel_sin+0x16c>)
 801a02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a030:	f7e6 f92a 	bl	8000288 <__aeabi_dsub>
 801a034:	4652      	mov	r2, sl
 801a036:	465b      	mov	r3, fp
 801a038:	f7e6 fade 	bl	80005f8 <__aeabi_dmul>
 801a03c:	a337      	add	r3, pc, #220	; (adr r3, 801a11c <__kernel_sin+0x174>)
 801a03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a042:	f7e6 f923 	bl	800028c <__adddf3>
 801a046:	9b01      	ldr	r3, [sp, #4]
 801a048:	4606      	mov	r6, r0
 801a04a:	460f      	mov	r7, r1
 801a04c:	b9eb      	cbnz	r3, 801a08a <__kernel_sin+0xe2>
 801a04e:	4602      	mov	r2, r0
 801a050:	460b      	mov	r3, r1
 801a052:	4650      	mov	r0, sl
 801a054:	4659      	mov	r1, fp
 801a056:	f7e6 facf 	bl	80005f8 <__aeabi_dmul>
 801a05a:	a325      	add	r3, pc, #148	; (adr r3, 801a0f0 <__kernel_sin+0x148>)
 801a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a060:	f7e6 f912 	bl	8000288 <__aeabi_dsub>
 801a064:	4642      	mov	r2, r8
 801a066:	464b      	mov	r3, r9
 801a068:	f7e6 fac6 	bl	80005f8 <__aeabi_dmul>
 801a06c:	4602      	mov	r2, r0
 801a06e:	460b      	mov	r3, r1
 801a070:	4620      	mov	r0, r4
 801a072:	4629      	mov	r1, r5
 801a074:	f7e6 f90a 	bl	800028c <__adddf3>
 801a078:	4604      	mov	r4, r0
 801a07a:	460d      	mov	r5, r1
 801a07c:	ec45 4b10 	vmov	d0, r4, r5
 801a080:	b003      	add	sp, #12
 801a082:	ecbd 8b04 	vpop	{d8-d9}
 801a086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a08a:	4b1b      	ldr	r3, [pc, #108]	; (801a0f8 <__kernel_sin+0x150>)
 801a08c:	ec51 0b18 	vmov	r0, r1, d8
 801a090:	2200      	movs	r2, #0
 801a092:	f7e6 fab1 	bl	80005f8 <__aeabi_dmul>
 801a096:	4632      	mov	r2, r6
 801a098:	ec41 0b19 	vmov	d9, r0, r1
 801a09c:	463b      	mov	r3, r7
 801a09e:	4640      	mov	r0, r8
 801a0a0:	4649      	mov	r1, r9
 801a0a2:	f7e6 faa9 	bl	80005f8 <__aeabi_dmul>
 801a0a6:	4602      	mov	r2, r0
 801a0a8:	460b      	mov	r3, r1
 801a0aa:	ec51 0b19 	vmov	r0, r1, d9
 801a0ae:	f7e6 f8eb 	bl	8000288 <__aeabi_dsub>
 801a0b2:	4652      	mov	r2, sl
 801a0b4:	465b      	mov	r3, fp
 801a0b6:	f7e6 fa9f 	bl	80005f8 <__aeabi_dmul>
 801a0ba:	ec53 2b18 	vmov	r2, r3, d8
 801a0be:	f7e6 f8e3 	bl	8000288 <__aeabi_dsub>
 801a0c2:	a30b      	add	r3, pc, #44	; (adr r3, 801a0f0 <__kernel_sin+0x148>)
 801a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0c8:	4606      	mov	r6, r0
 801a0ca:	460f      	mov	r7, r1
 801a0cc:	4640      	mov	r0, r8
 801a0ce:	4649      	mov	r1, r9
 801a0d0:	f7e6 fa92 	bl	80005f8 <__aeabi_dmul>
 801a0d4:	4602      	mov	r2, r0
 801a0d6:	460b      	mov	r3, r1
 801a0d8:	4630      	mov	r0, r6
 801a0da:	4639      	mov	r1, r7
 801a0dc:	f7e6 f8d6 	bl	800028c <__adddf3>
 801a0e0:	4602      	mov	r2, r0
 801a0e2:	460b      	mov	r3, r1
 801a0e4:	4620      	mov	r0, r4
 801a0e6:	4629      	mov	r1, r5
 801a0e8:	f7e6 f8ce 	bl	8000288 <__aeabi_dsub>
 801a0ec:	e7c4      	b.n	801a078 <__kernel_sin+0xd0>
 801a0ee:	bf00      	nop
 801a0f0:	55555549 	.word	0x55555549
 801a0f4:	3fc55555 	.word	0x3fc55555
 801a0f8:	3fe00000 	.word	0x3fe00000
 801a0fc:	5acfd57c 	.word	0x5acfd57c
 801a100:	3de5d93a 	.word	0x3de5d93a
 801a104:	8a2b9ceb 	.word	0x8a2b9ceb
 801a108:	3e5ae5e6 	.word	0x3e5ae5e6
 801a10c:	57b1fe7d 	.word	0x57b1fe7d
 801a110:	3ec71de3 	.word	0x3ec71de3
 801a114:	19c161d5 	.word	0x19c161d5
 801a118:	3f2a01a0 	.word	0x3f2a01a0
 801a11c:	1110f8a6 	.word	0x1110f8a6
 801a120:	3f811111 	.word	0x3f811111
 801a124:	00000000 	.word	0x00000000

0801a128 <__ieee754_log>:
 801a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a12c:	ec51 0b10 	vmov	r0, r1, d0
 801a130:	ed2d 8b04 	vpush	{d8-d9}
 801a134:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801a138:	b083      	sub	sp, #12
 801a13a:	460d      	mov	r5, r1
 801a13c:	da29      	bge.n	801a192 <__ieee754_log+0x6a>
 801a13e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a142:	4303      	orrs	r3, r0
 801a144:	ee10 2a10 	vmov	r2, s0
 801a148:	d10c      	bne.n	801a164 <__ieee754_log+0x3c>
 801a14a:	49cf      	ldr	r1, [pc, #828]	; (801a488 <__ieee754_log+0x360>)
 801a14c:	2200      	movs	r2, #0
 801a14e:	2300      	movs	r3, #0
 801a150:	2000      	movs	r0, #0
 801a152:	f7e6 fb7b 	bl	800084c <__aeabi_ddiv>
 801a156:	ec41 0b10 	vmov	d0, r0, r1
 801a15a:	b003      	add	sp, #12
 801a15c:	ecbd 8b04 	vpop	{d8-d9}
 801a160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a164:	2900      	cmp	r1, #0
 801a166:	da05      	bge.n	801a174 <__ieee754_log+0x4c>
 801a168:	460b      	mov	r3, r1
 801a16a:	f7e6 f88d 	bl	8000288 <__aeabi_dsub>
 801a16e:	2200      	movs	r2, #0
 801a170:	2300      	movs	r3, #0
 801a172:	e7ee      	b.n	801a152 <__ieee754_log+0x2a>
 801a174:	4bc5      	ldr	r3, [pc, #788]	; (801a48c <__ieee754_log+0x364>)
 801a176:	2200      	movs	r2, #0
 801a178:	f7e6 fa3e 	bl	80005f8 <__aeabi_dmul>
 801a17c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801a180:	460d      	mov	r5, r1
 801a182:	4ac3      	ldr	r2, [pc, #780]	; (801a490 <__ieee754_log+0x368>)
 801a184:	4295      	cmp	r5, r2
 801a186:	dd06      	ble.n	801a196 <__ieee754_log+0x6e>
 801a188:	4602      	mov	r2, r0
 801a18a:	460b      	mov	r3, r1
 801a18c:	f7e6 f87e 	bl	800028c <__adddf3>
 801a190:	e7e1      	b.n	801a156 <__ieee754_log+0x2e>
 801a192:	2300      	movs	r3, #0
 801a194:	e7f5      	b.n	801a182 <__ieee754_log+0x5a>
 801a196:	152c      	asrs	r4, r5, #20
 801a198:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801a19c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801a1a0:	441c      	add	r4, r3
 801a1a2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801a1a6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801a1aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a1ae:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801a1b2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801a1b6:	ea42 0105 	orr.w	r1, r2, r5
 801a1ba:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801a1be:	2200      	movs	r2, #0
 801a1c0:	4bb4      	ldr	r3, [pc, #720]	; (801a494 <__ieee754_log+0x36c>)
 801a1c2:	f7e6 f861 	bl	8000288 <__aeabi_dsub>
 801a1c6:	1cab      	adds	r3, r5, #2
 801a1c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a1cc:	2b02      	cmp	r3, #2
 801a1ce:	4682      	mov	sl, r0
 801a1d0:	468b      	mov	fp, r1
 801a1d2:	f04f 0200 	mov.w	r2, #0
 801a1d6:	dc53      	bgt.n	801a280 <__ieee754_log+0x158>
 801a1d8:	2300      	movs	r3, #0
 801a1da:	f7e6 fc75 	bl	8000ac8 <__aeabi_dcmpeq>
 801a1de:	b1d0      	cbz	r0, 801a216 <__ieee754_log+0xee>
 801a1e0:	2c00      	cmp	r4, #0
 801a1e2:	f000 8122 	beq.w	801a42a <__ieee754_log+0x302>
 801a1e6:	4620      	mov	r0, r4
 801a1e8:	f7e6 f99c 	bl	8000524 <__aeabi_i2d>
 801a1ec:	a390      	add	r3, pc, #576	; (adr r3, 801a430 <__ieee754_log+0x308>)
 801a1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1f2:	4606      	mov	r6, r0
 801a1f4:	460f      	mov	r7, r1
 801a1f6:	f7e6 f9ff 	bl	80005f8 <__aeabi_dmul>
 801a1fa:	a38f      	add	r3, pc, #572	; (adr r3, 801a438 <__ieee754_log+0x310>)
 801a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a200:	4604      	mov	r4, r0
 801a202:	460d      	mov	r5, r1
 801a204:	4630      	mov	r0, r6
 801a206:	4639      	mov	r1, r7
 801a208:	f7e6 f9f6 	bl	80005f8 <__aeabi_dmul>
 801a20c:	4602      	mov	r2, r0
 801a20e:	460b      	mov	r3, r1
 801a210:	4620      	mov	r0, r4
 801a212:	4629      	mov	r1, r5
 801a214:	e7ba      	b.n	801a18c <__ieee754_log+0x64>
 801a216:	a38a      	add	r3, pc, #552	; (adr r3, 801a440 <__ieee754_log+0x318>)
 801a218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a21c:	4650      	mov	r0, sl
 801a21e:	4659      	mov	r1, fp
 801a220:	f7e6 f9ea 	bl	80005f8 <__aeabi_dmul>
 801a224:	4602      	mov	r2, r0
 801a226:	460b      	mov	r3, r1
 801a228:	2000      	movs	r0, #0
 801a22a:	499b      	ldr	r1, [pc, #620]	; (801a498 <__ieee754_log+0x370>)
 801a22c:	f7e6 f82c 	bl	8000288 <__aeabi_dsub>
 801a230:	4652      	mov	r2, sl
 801a232:	4606      	mov	r6, r0
 801a234:	460f      	mov	r7, r1
 801a236:	465b      	mov	r3, fp
 801a238:	4650      	mov	r0, sl
 801a23a:	4659      	mov	r1, fp
 801a23c:	f7e6 f9dc 	bl	80005f8 <__aeabi_dmul>
 801a240:	4602      	mov	r2, r0
 801a242:	460b      	mov	r3, r1
 801a244:	4630      	mov	r0, r6
 801a246:	4639      	mov	r1, r7
 801a248:	f7e6 f9d6 	bl	80005f8 <__aeabi_dmul>
 801a24c:	4606      	mov	r6, r0
 801a24e:	460f      	mov	r7, r1
 801a250:	b914      	cbnz	r4, 801a258 <__ieee754_log+0x130>
 801a252:	4632      	mov	r2, r6
 801a254:	463b      	mov	r3, r7
 801a256:	e0a2      	b.n	801a39e <__ieee754_log+0x276>
 801a258:	4620      	mov	r0, r4
 801a25a:	f7e6 f963 	bl	8000524 <__aeabi_i2d>
 801a25e:	a374      	add	r3, pc, #464	; (adr r3, 801a430 <__ieee754_log+0x308>)
 801a260:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a264:	4680      	mov	r8, r0
 801a266:	4689      	mov	r9, r1
 801a268:	f7e6 f9c6 	bl	80005f8 <__aeabi_dmul>
 801a26c:	a372      	add	r3, pc, #456	; (adr r3, 801a438 <__ieee754_log+0x310>)
 801a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a272:	4604      	mov	r4, r0
 801a274:	460d      	mov	r5, r1
 801a276:	4640      	mov	r0, r8
 801a278:	4649      	mov	r1, r9
 801a27a:	f7e6 f9bd 	bl	80005f8 <__aeabi_dmul>
 801a27e:	e0a7      	b.n	801a3d0 <__ieee754_log+0x2a8>
 801a280:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a284:	f7e6 f802 	bl	800028c <__adddf3>
 801a288:	4602      	mov	r2, r0
 801a28a:	460b      	mov	r3, r1
 801a28c:	4650      	mov	r0, sl
 801a28e:	4659      	mov	r1, fp
 801a290:	f7e6 fadc 	bl	800084c <__aeabi_ddiv>
 801a294:	ec41 0b18 	vmov	d8, r0, r1
 801a298:	4620      	mov	r0, r4
 801a29a:	f7e6 f943 	bl	8000524 <__aeabi_i2d>
 801a29e:	ec53 2b18 	vmov	r2, r3, d8
 801a2a2:	ec41 0b19 	vmov	d9, r0, r1
 801a2a6:	ec51 0b18 	vmov	r0, r1, d8
 801a2aa:	f7e6 f9a5 	bl	80005f8 <__aeabi_dmul>
 801a2ae:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801a2b2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801a2b6:	9301      	str	r3, [sp, #4]
 801a2b8:	4602      	mov	r2, r0
 801a2ba:	460b      	mov	r3, r1
 801a2bc:	4680      	mov	r8, r0
 801a2be:	4689      	mov	r9, r1
 801a2c0:	f7e6 f99a 	bl	80005f8 <__aeabi_dmul>
 801a2c4:	a360      	add	r3, pc, #384	; (adr r3, 801a448 <__ieee754_log+0x320>)
 801a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ca:	4606      	mov	r6, r0
 801a2cc:	460f      	mov	r7, r1
 801a2ce:	f7e6 f993 	bl	80005f8 <__aeabi_dmul>
 801a2d2:	a35f      	add	r3, pc, #380	; (adr r3, 801a450 <__ieee754_log+0x328>)
 801a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2d8:	f7e5 ffd8 	bl	800028c <__adddf3>
 801a2dc:	4632      	mov	r2, r6
 801a2de:	463b      	mov	r3, r7
 801a2e0:	f7e6 f98a 	bl	80005f8 <__aeabi_dmul>
 801a2e4:	a35c      	add	r3, pc, #368	; (adr r3, 801a458 <__ieee754_log+0x330>)
 801a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ea:	f7e5 ffcf 	bl	800028c <__adddf3>
 801a2ee:	4632      	mov	r2, r6
 801a2f0:	463b      	mov	r3, r7
 801a2f2:	f7e6 f981 	bl	80005f8 <__aeabi_dmul>
 801a2f6:	a35a      	add	r3, pc, #360	; (adr r3, 801a460 <__ieee754_log+0x338>)
 801a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2fc:	f7e5 ffc6 	bl	800028c <__adddf3>
 801a300:	4642      	mov	r2, r8
 801a302:	464b      	mov	r3, r9
 801a304:	f7e6 f978 	bl	80005f8 <__aeabi_dmul>
 801a308:	a357      	add	r3, pc, #348	; (adr r3, 801a468 <__ieee754_log+0x340>)
 801a30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a30e:	4680      	mov	r8, r0
 801a310:	4689      	mov	r9, r1
 801a312:	4630      	mov	r0, r6
 801a314:	4639      	mov	r1, r7
 801a316:	f7e6 f96f 	bl	80005f8 <__aeabi_dmul>
 801a31a:	a355      	add	r3, pc, #340	; (adr r3, 801a470 <__ieee754_log+0x348>)
 801a31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a320:	f7e5 ffb4 	bl	800028c <__adddf3>
 801a324:	4632      	mov	r2, r6
 801a326:	463b      	mov	r3, r7
 801a328:	f7e6 f966 	bl	80005f8 <__aeabi_dmul>
 801a32c:	a352      	add	r3, pc, #328	; (adr r3, 801a478 <__ieee754_log+0x350>)
 801a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a332:	f7e5 ffab 	bl	800028c <__adddf3>
 801a336:	4632      	mov	r2, r6
 801a338:	463b      	mov	r3, r7
 801a33a:	f7e6 f95d 	bl	80005f8 <__aeabi_dmul>
 801a33e:	460b      	mov	r3, r1
 801a340:	4602      	mov	r2, r0
 801a342:	4649      	mov	r1, r9
 801a344:	4640      	mov	r0, r8
 801a346:	f7e5 ffa1 	bl	800028c <__adddf3>
 801a34a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801a34e:	9b01      	ldr	r3, [sp, #4]
 801a350:	3551      	adds	r5, #81	; 0x51
 801a352:	431d      	orrs	r5, r3
 801a354:	2d00      	cmp	r5, #0
 801a356:	4680      	mov	r8, r0
 801a358:	4689      	mov	r9, r1
 801a35a:	dd48      	ble.n	801a3ee <__ieee754_log+0x2c6>
 801a35c:	4b4e      	ldr	r3, [pc, #312]	; (801a498 <__ieee754_log+0x370>)
 801a35e:	2200      	movs	r2, #0
 801a360:	4650      	mov	r0, sl
 801a362:	4659      	mov	r1, fp
 801a364:	f7e6 f948 	bl	80005f8 <__aeabi_dmul>
 801a368:	4652      	mov	r2, sl
 801a36a:	465b      	mov	r3, fp
 801a36c:	f7e6 f944 	bl	80005f8 <__aeabi_dmul>
 801a370:	4602      	mov	r2, r0
 801a372:	460b      	mov	r3, r1
 801a374:	4606      	mov	r6, r0
 801a376:	460f      	mov	r7, r1
 801a378:	4640      	mov	r0, r8
 801a37a:	4649      	mov	r1, r9
 801a37c:	f7e5 ff86 	bl	800028c <__adddf3>
 801a380:	ec53 2b18 	vmov	r2, r3, d8
 801a384:	f7e6 f938 	bl	80005f8 <__aeabi_dmul>
 801a388:	4680      	mov	r8, r0
 801a38a:	4689      	mov	r9, r1
 801a38c:	b964      	cbnz	r4, 801a3a8 <__ieee754_log+0x280>
 801a38e:	4602      	mov	r2, r0
 801a390:	460b      	mov	r3, r1
 801a392:	4630      	mov	r0, r6
 801a394:	4639      	mov	r1, r7
 801a396:	f7e5 ff77 	bl	8000288 <__aeabi_dsub>
 801a39a:	4602      	mov	r2, r0
 801a39c:	460b      	mov	r3, r1
 801a39e:	4650      	mov	r0, sl
 801a3a0:	4659      	mov	r1, fp
 801a3a2:	f7e5 ff71 	bl	8000288 <__aeabi_dsub>
 801a3a6:	e6d6      	b.n	801a156 <__ieee754_log+0x2e>
 801a3a8:	a321      	add	r3, pc, #132	; (adr r3, 801a430 <__ieee754_log+0x308>)
 801a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3ae:	ec51 0b19 	vmov	r0, r1, d9
 801a3b2:	f7e6 f921 	bl	80005f8 <__aeabi_dmul>
 801a3b6:	a320      	add	r3, pc, #128	; (adr r3, 801a438 <__ieee754_log+0x310>)
 801a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3bc:	4604      	mov	r4, r0
 801a3be:	460d      	mov	r5, r1
 801a3c0:	ec51 0b19 	vmov	r0, r1, d9
 801a3c4:	f7e6 f918 	bl	80005f8 <__aeabi_dmul>
 801a3c8:	4642      	mov	r2, r8
 801a3ca:	464b      	mov	r3, r9
 801a3cc:	f7e5 ff5e 	bl	800028c <__adddf3>
 801a3d0:	4602      	mov	r2, r0
 801a3d2:	460b      	mov	r3, r1
 801a3d4:	4630      	mov	r0, r6
 801a3d6:	4639      	mov	r1, r7
 801a3d8:	f7e5 ff56 	bl	8000288 <__aeabi_dsub>
 801a3dc:	4652      	mov	r2, sl
 801a3de:	465b      	mov	r3, fp
 801a3e0:	f7e5 ff52 	bl	8000288 <__aeabi_dsub>
 801a3e4:	4602      	mov	r2, r0
 801a3e6:	460b      	mov	r3, r1
 801a3e8:	4620      	mov	r0, r4
 801a3ea:	4629      	mov	r1, r5
 801a3ec:	e7d9      	b.n	801a3a2 <__ieee754_log+0x27a>
 801a3ee:	4602      	mov	r2, r0
 801a3f0:	460b      	mov	r3, r1
 801a3f2:	4650      	mov	r0, sl
 801a3f4:	4659      	mov	r1, fp
 801a3f6:	f7e5 ff47 	bl	8000288 <__aeabi_dsub>
 801a3fa:	ec53 2b18 	vmov	r2, r3, d8
 801a3fe:	f7e6 f8fb 	bl	80005f8 <__aeabi_dmul>
 801a402:	4606      	mov	r6, r0
 801a404:	460f      	mov	r7, r1
 801a406:	2c00      	cmp	r4, #0
 801a408:	f43f af23 	beq.w	801a252 <__ieee754_log+0x12a>
 801a40c:	a308      	add	r3, pc, #32	; (adr r3, 801a430 <__ieee754_log+0x308>)
 801a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a412:	ec51 0b19 	vmov	r0, r1, d9
 801a416:	f7e6 f8ef 	bl	80005f8 <__aeabi_dmul>
 801a41a:	a307      	add	r3, pc, #28	; (adr r3, 801a438 <__ieee754_log+0x310>)
 801a41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a420:	4604      	mov	r4, r0
 801a422:	460d      	mov	r5, r1
 801a424:	ec51 0b19 	vmov	r0, r1, d9
 801a428:	e727      	b.n	801a27a <__ieee754_log+0x152>
 801a42a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801a480 <__ieee754_log+0x358>
 801a42e:	e694      	b.n	801a15a <__ieee754_log+0x32>
 801a430:	fee00000 	.word	0xfee00000
 801a434:	3fe62e42 	.word	0x3fe62e42
 801a438:	35793c76 	.word	0x35793c76
 801a43c:	3dea39ef 	.word	0x3dea39ef
 801a440:	55555555 	.word	0x55555555
 801a444:	3fd55555 	.word	0x3fd55555
 801a448:	df3e5244 	.word	0xdf3e5244
 801a44c:	3fc2f112 	.word	0x3fc2f112
 801a450:	96cb03de 	.word	0x96cb03de
 801a454:	3fc74664 	.word	0x3fc74664
 801a458:	94229359 	.word	0x94229359
 801a45c:	3fd24924 	.word	0x3fd24924
 801a460:	55555593 	.word	0x55555593
 801a464:	3fe55555 	.word	0x3fe55555
 801a468:	d078c69f 	.word	0xd078c69f
 801a46c:	3fc39a09 	.word	0x3fc39a09
 801a470:	1d8e78af 	.word	0x1d8e78af
 801a474:	3fcc71c5 	.word	0x3fcc71c5
 801a478:	9997fa04 	.word	0x9997fa04
 801a47c:	3fd99999 	.word	0x3fd99999
	...
 801a488:	c3500000 	.word	0xc3500000
 801a48c:	43500000 	.word	0x43500000
 801a490:	7fefffff 	.word	0x7fefffff
 801a494:	3ff00000 	.word	0x3ff00000
 801a498:	3fe00000 	.word	0x3fe00000
 801a49c:	00000000 	.word	0x00000000

0801a4a0 <__ieee754_rem_pio2>:
 801a4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4a4:	ed2d 8b02 	vpush	{d8}
 801a4a8:	ec55 4b10 	vmov	r4, r5, d0
 801a4ac:	4bca      	ldr	r3, [pc, #808]	; (801a7d8 <__ieee754_rem_pio2+0x338>)
 801a4ae:	b08b      	sub	sp, #44	; 0x2c
 801a4b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801a4b4:	4598      	cmp	r8, r3
 801a4b6:	4682      	mov	sl, r0
 801a4b8:	9502      	str	r5, [sp, #8]
 801a4ba:	dc08      	bgt.n	801a4ce <__ieee754_rem_pio2+0x2e>
 801a4bc:	2200      	movs	r2, #0
 801a4be:	2300      	movs	r3, #0
 801a4c0:	ed80 0b00 	vstr	d0, [r0]
 801a4c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a4c8:	f04f 0b00 	mov.w	fp, #0
 801a4cc:	e028      	b.n	801a520 <__ieee754_rem_pio2+0x80>
 801a4ce:	4bc3      	ldr	r3, [pc, #780]	; (801a7dc <__ieee754_rem_pio2+0x33c>)
 801a4d0:	4598      	cmp	r8, r3
 801a4d2:	dc78      	bgt.n	801a5c6 <__ieee754_rem_pio2+0x126>
 801a4d4:	9b02      	ldr	r3, [sp, #8]
 801a4d6:	4ec2      	ldr	r6, [pc, #776]	; (801a7e0 <__ieee754_rem_pio2+0x340>)
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	ee10 0a10 	vmov	r0, s0
 801a4de:	a3b0      	add	r3, pc, #704	; (adr r3, 801a7a0 <__ieee754_rem_pio2+0x300>)
 801a4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4e4:	4629      	mov	r1, r5
 801a4e6:	dd39      	ble.n	801a55c <__ieee754_rem_pio2+0xbc>
 801a4e8:	f7e5 fece 	bl	8000288 <__aeabi_dsub>
 801a4ec:	45b0      	cmp	r8, r6
 801a4ee:	4604      	mov	r4, r0
 801a4f0:	460d      	mov	r5, r1
 801a4f2:	d01b      	beq.n	801a52c <__ieee754_rem_pio2+0x8c>
 801a4f4:	a3ac      	add	r3, pc, #688	; (adr r3, 801a7a8 <__ieee754_rem_pio2+0x308>)
 801a4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4fa:	f7e5 fec5 	bl	8000288 <__aeabi_dsub>
 801a4fe:	4602      	mov	r2, r0
 801a500:	460b      	mov	r3, r1
 801a502:	e9ca 2300 	strd	r2, r3, [sl]
 801a506:	4620      	mov	r0, r4
 801a508:	4629      	mov	r1, r5
 801a50a:	f7e5 febd 	bl	8000288 <__aeabi_dsub>
 801a50e:	a3a6      	add	r3, pc, #664	; (adr r3, 801a7a8 <__ieee754_rem_pio2+0x308>)
 801a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a514:	f7e5 feb8 	bl	8000288 <__aeabi_dsub>
 801a518:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a51c:	f04f 0b01 	mov.w	fp, #1
 801a520:	4658      	mov	r0, fp
 801a522:	b00b      	add	sp, #44	; 0x2c
 801a524:	ecbd 8b02 	vpop	{d8}
 801a528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a52c:	a3a0      	add	r3, pc, #640	; (adr r3, 801a7b0 <__ieee754_rem_pio2+0x310>)
 801a52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a532:	f7e5 fea9 	bl	8000288 <__aeabi_dsub>
 801a536:	a3a0      	add	r3, pc, #640	; (adr r3, 801a7b8 <__ieee754_rem_pio2+0x318>)
 801a538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a53c:	4604      	mov	r4, r0
 801a53e:	460d      	mov	r5, r1
 801a540:	f7e5 fea2 	bl	8000288 <__aeabi_dsub>
 801a544:	4602      	mov	r2, r0
 801a546:	460b      	mov	r3, r1
 801a548:	e9ca 2300 	strd	r2, r3, [sl]
 801a54c:	4620      	mov	r0, r4
 801a54e:	4629      	mov	r1, r5
 801a550:	f7e5 fe9a 	bl	8000288 <__aeabi_dsub>
 801a554:	a398      	add	r3, pc, #608	; (adr r3, 801a7b8 <__ieee754_rem_pio2+0x318>)
 801a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a55a:	e7db      	b.n	801a514 <__ieee754_rem_pio2+0x74>
 801a55c:	f7e5 fe96 	bl	800028c <__adddf3>
 801a560:	45b0      	cmp	r8, r6
 801a562:	4604      	mov	r4, r0
 801a564:	460d      	mov	r5, r1
 801a566:	d016      	beq.n	801a596 <__ieee754_rem_pio2+0xf6>
 801a568:	a38f      	add	r3, pc, #572	; (adr r3, 801a7a8 <__ieee754_rem_pio2+0x308>)
 801a56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a56e:	f7e5 fe8d 	bl	800028c <__adddf3>
 801a572:	4602      	mov	r2, r0
 801a574:	460b      	mov	r3, r1
 801a576:	e9ca 2300 	strd	r2, r3, [sl]
 801a57a:	4620      	mov	r0, r4
 801a57c:	4629      	mov	r1, r5
 801a57e:	f7e5 fe83 	bl	8000288 <__aeabi_dsub>
 801a582:	a389      	add	r3, pc, #548	; (adr r3, 801a7a8 <__ieee754_rem_pio2+0x308>)
 801a584:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a588:	f7e5 fe80 	bl	800028c <__adddf3>
 801a58c:	f04f 3bff 	mov.w	fp, #4294967295
 801a590:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a594:	e7c4      	b.n	801a520 <__ieee754_rem_pio2+0x80>
 801a596:	a386      	add	r3, pc, #536	; (adr r3, 801a7b0 <__ieee754_rem_pio2+0x310>)
 801a598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a59c:	f7e5 fe76 	bl	800028c <__adddf3>
 801a5a0:	a385      	add	r3, pc, #532	; (adr r3, 801a7b8 <__ieee754_rem_pio2+0x318>)
 801a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5a6:	4604      	mov	r4, r0
 801a5a8:	460d      	mov	r5, r1
 801a5aa:	f7e5 fe6f 	bl	800028c <__adddf3>
 801a5ae:	4602      	mov	r2, r0
 801a5b0:	460b      	mov	r3, r1
 801a5b2:	e9ca 2300 	strd	r2, r3, [sl]
 801a5b6:	4620      	mov	r0, r4
 801a5b8:	4629      	mov	r1, r5
 801a5ba:	f7e5 fe65 	bl	8000288 <__aeabi_dsub>
 801a5be:	a37e      	add	r3, pc, #504	; (adr r3, 801a7b8 <__ieee754_rem_pio2+0x318>)
 801a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5c4:	e7e0      	b.n	801a588 <__ieee754_rem_pio2+0xe8>
 801a5c6:	4b87      	ldr	r3, [pc, #540]	; (801a7e4 <__ieee754_rem_pio2+0x344>)
 801a5c8:	4598      	cmp	r8, r3
 801a5ca:	f300 80d8 	bgt.w	801a77e <__ieee754_rem_pio2+0x2de>
 801a5ce:	f000 f9a1 	bl	801a914 <fabs>
 801a5d2:	ec55 4b10 	vmov	r4, r5, d0
 801a5d6:	ee10 0a10 	vmov	r0, s0
 801a5da:	a379      	add	r3, pc, #484	; (adr r3, 801a7c0 <__ieee754_rem_pio2+0x320>)
 801a5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5e0:	4629      	mov	r1, r5
 801a5e2:	f7e6 f809 	bl	80005f8 <__aeabi_dmul>
 801a5e6:	4b80      	ldr	r3, [pc, #512]	; (801a7e8 <__ieee754_rem_pio2+0x348>)
 801a5e8:	2200      	movs	r2, #0
 801a5ea:	f7e5 fe4f 	bl	800028c <__adddf3>
 801a5ee:	f7e6 fab3 	bl	8000b58 <__aeabi_d2iz>
 801a5f2:	4683      	mov	fp, r0
 801a5f4:	f7e5 ff96 	bl	8000524 <__aeabi_i2d>
 801a5f8:	4602      	mov	r2, r0
 801a5fa:	460b      	mov	r3, r1
 801a5fc:	ec43 2b18 	vmov	d8, r2, r3
 801a600:	a367      	add	r3, pc, #412	; (adr r3, 801a7a0 <__ieee754_rem_pio2+0x300>)
 801a602:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a606:	f7e5 fff7 	bl	80005f8 <__aeabi_dmul>
 801a60a:	4602      	mov	r2, r0
 801a60c:	460b      	mov	r3, r1
 801a60e:	4620      	mov	r0, r4
 801a610:	4629      	mov	r1, r5
 801a612:	f7e5 fe39 	bl	8000288 <__aeabi_dsub>
 801a616:	a364      	add	r3, pc, #400	; (adr r3, 801a7a8 <__ieee754_rem_pio2+0x308>)
 801a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a61c:	4606      	mov	r6, r0
 801a61e:	460f      	mov	r7, r1
 801a620:	ec51 0b18 	vmov	r0, r1, d8
 801a624:	f7e5 ffe8 	bl	80005f8 <__aeabi_dmul>
 801a628:	f1bb 0f1f 	cmp.w	fp, #31
 801a62c:	4604      	mov	r4, r0
 801a62e:	460d      	mov	r5, r1
 801a630:	dc0d      	bgt.n	801a64e <__ieee754_rem_pio2+0x1ae>
 801a632:	4b6e      	ldr	r3, [pc, #440]	; (801a7ec <__ieee754_rem_pio2+0x34c>)
 801a634:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a63c:	4543      	cmp	r3, r8
 801a63e:	d006      	beq.n	801a64e <__ieee754_rem_pio2+0x1ae>
 801a640:	4622      	mov	r2, r4
 801a642:	462b      	mov	r3, r5
 801a644:	4630      	mov	r0, r6
 801a646:	4639      	mov	r1, r7
 801a648:	f7e5 fe1e 	bl	8000288 <__aeabi_dsub>
 801a64c:	e00e      	b.n	801a66c <__ieee754_rem_pio2+0x1cc>
 801a64e:	462b      	mov	r3, r5
 801a650:	4622      	mov	r2, r4
 801a652:	4630      	mov	r0, r6
 801a654:	4639      	mov	r1, r7
 801a656:	f7e5 fe17 	bl	8000288 <__aeabi_dsub>
 801a65a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a65e:	9303      	str	r3, [sp, #12]
 801a660:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a664:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801a668:	2b10      	cmp	r3, #16
 801a66a:	dc02      	bgt.n	801a672 <__ieee754_rem_pio2+0x1d2>
 801a66c:	e9ca 0100 	strd	r0, r1, [sl]
 801a670:	e039      	b.n	801a6e6 <__ieee754_rem_pio2+0x246>
 801a672:	a34f      	add	r3, pc, #316	; (adr r3, 801a7b0 <__ieee754_rem_pio2+0x310>)
 801a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a678:	ec51 0b18 	vmov	r0, r1, d8
 801a67c:	f7e5 ffbc 	bl	80005f8 <__aeabi_dmul>
 801a680:	4604      	mov	r4, r0
 801a682:	460d      	mov	r5, r1
 801a684:	4602      	mov	r2, r0
 801a686:	460b      	mov	r3, r1
 801a688:	4630      	mov	r0, r6
 801a68a:	4639      	mov	r1, r7
 801a68c:	f7e5 fdfc 	bl	8000288 <__aeabi_dsub>
 801a690:	4602      	mov	r2, r0
 801a692:	460b      	mov	r3, r1
 801a694:	4680      	mov	r8, r0
 801a696:	4689      	mov	r9, r1
 801a698:	4630      	mov	r0, r6
 801a69a:	4639      	mov	r1, r7
 801a69c:	f7e5 fdf4 	bl	8000288 <__aeabi_dsub>
 801a6a0:	4622      	mov	r2, r4
 801a6a2:	462b      	mov	r3, r5
 801a6a4:	f7e5 fdf0 	bl	8000288 <__aeabi_dsub>
 801a6a8:	a343      	add	r3, pc, #268	; (adr r3, 801a7b8 <__ieee754_rem_pio2+0x318>)
 801a6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ae:	4604      	mov	r4, r0
 801a6b0:	460d      	mov	r5, r1
 801a6b2:	ec51 0b18 	vmov	r0, r1, d8
 801a6b6:	f7e5 ff9f 	bl	80005f8 <__aeabi_dmul>
 801a6ba:	4622      	mov	r2, r4
 801a6bc:	462b      	mov	r3, r5
 801a6be:	f7e5 fde3 	bl	8000288 <__aeabi_dsub>
 801a6c2:	4602      	mov	r2, r0
 801a6c4:	460b      	mov	r3, r1
 801a6c6:	4604      	mov	r4, r0
 801a6c8:	460d      	mov	r5, r1
 801a6ca:	4640      	mov	r0, r8
 801a6cc:	4649      	mov	r1, r9
 801a6ce:	f7e5 fddb 	bl	8000288 <__aeabi_dsub>
 801a6d2:	9a03      	ldr	r2, [sp, #12]
 801a6d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a6d8:	1ad3      	subs	r3, r2, r3
 801a6da:	2b31      	cmp	r3, #49	; 0x31
 801a6dc:	dc24      	bgt.n	801a728 <__ieee754_rem_pio2+0x288>
 801a6de:	e9ca 0100 	strd	r0, r1, [sl]
 801a6e2:	4646      	mov	r6, r8
 801a6e4:	464f      	mov	r7, r9
 801a6e6:	e9da 8900 	ldrd	r8, r9, [sl]
 801a6ea:	4630      	mov	r0, r6
 801a6ec:	4642      	mov	r2, r8
 801a6ee:	464b      	mov	r3, r9
 801a6f0:	4639      	mov	r1, r7
 801a6f2:	f7e5 fdc9 	bl	8000288 <__aeabi_dsub>
 801a6f6:	462b      	mov	r3, r5
 801a6f8:	4622      	mov	r2, r4
 801a6fa:	f7e5 fdc5 	bl	8000288 <__aeabi_dsub>
 801a6fe:	9b02      	ldr	r3, [sp, #8]
 801a700:	2b00      	cmp	r3, #0
 801a702:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a706:	f6bf af0b 	bge.w	801a520 <__ieee754_rem_pio2+0x80>
 801a70a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a70e:	f8ca 3004 	str.w	r3, [sl, #4]
 801a712:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a716:	f8ca 8000 	str.w	r8, [sl]
 801a71a:	f8ca 0008 	str.w	r0, [sl, #8]
 801a71e:	f8ca 300c 	str.w	r3, [sl, #12]
 801a722:	f1cb 0b00 	rsb	fp, fp, #0
 801a726:	e6fb      	b.n	801a520 <__ieee754_rem_pio2+0x80>
 801a728:	a327      	add	r3, pc, #156	; (adr r3, 801a7c8 <__ieee754_rem_pio2+0x328>)
 801a72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a72e:	ec51 0b18 	vmov	r0, r1, d8
 801a732:	f7e5 ff61 	bl	80005f8 <__aeabi_dmul>
 801a736:	4604      	mov	r4, r0
 801a738:	460d      	mov	r5, r1
 801a73a:	4602      	mov	r2, r0
 801a73c:	460b      	mov	r3, r1
 801a73e:	4640      	mov	r0, r8
 801a740:	4649      	mov	r1, r9
 801a742:	f7e5 fda1 	bl	8000288 <__aeabi_dsub>
 801a746:	4602      	mov	r2, r0
 801a748:	460b      	mov	r3, r1
 801a74a:	4606      	mov	r6, r0
 801a74c:	460f      	mov	r7, r1
 801a74e:	4640      	mov	r0, r8
 801a750:	4649      	mov	r1, r9
 801a752:	f7e5 fd99 	bl	8000288 <__aeabi_dsub>
 801a756:	4622      	mov	r2, r4
 801a758:	462b      	mov	r3, r5
 801a75a:	f7e5 fd95 	bl	8000288 <__aeabi_dsub>
 801a75e:	a31c      	add	r3, pc, #112	; (adr r3, 801a7d0 <__ieee754_rem_pio2+0x330>)
 801a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a764:	4604      	mov	r4, r0
 801a766:	460d      	mov	r5, r1
 801a768:	ec51 0b18 	vmov	r0, r1, d8
 801a76c:	f7e5 ff44 	bl	80005f8 <__aeabi_dmul>
 801a770:	4622      	mov	r2, r4
 801a772:	462b      	mov	r3, r5
 801a774:	f7e5 fd88 	bl	8000288 <__aeabi_dsub>
 801a778:	4604      	mov	r4, r0
 801a77a:	460d      	mov	r5, r1
 801a77c:	e760      	b.n	801a640 <__ieee754_rem_pio2+0x1a0>
 801a77e:	4b1c      	ldr	r3, [pc, #112]	; (801a7f0 <__ieee754_rem_pio2+0x350>)
 801a780:	4598      	cmp	r8, r3
 801a782:	dd37      	ble.n	801a7f4 <__ieee754_rem_pio2+0x354>
 801a784:	ee10 2a10 	vmov	r2, s0
 801a788:	462b      	mov	r3, r5
 801a78a:	4620      	mov	r0, r4
 801a78c:	4629      	mov	r1, r5
 801a78e:	f7e5 fd7b 	bl	8000288 <__aeabi_dsub>
 801a792:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a796:	e9ca 0100 	strd	r0, r1, [sl]
 801a79a:	e695      	b.n	801a4c8 <__ieee754_rem_pio2+0x28>
 801a79c:	f3af 8000 	nop.w
 801a7a0:	54400000 	.word	0x54400000
 801a7a4:	3ff921fb 	.word	0x3ff921fb
 801a7a8:	1a626331 	.word	0x1a626331
 801a7ac:	3dd0b461 	.word	0x3dd0b461
 801a7b0:	1a600000 	.word	0x1a600000
 801a7b4:	3dd0b461 	.word	0x3dd0b461
 801a7b8:	2e037073 	.word	0x2e037073
 801a7bc:	3ba3198a 	.word	0x3ba3198a
 801a7c0:	6dc9c883 	.word	0x6dc9c883
 801a7c4:	3fe45f30 	.word	0x3fe45f30
 801a7c8:	2e000000 	.word	0x2e000000
 801a7cc:	3ba3198a 	.word	0x3ba3198a
 801a7d0:	252049c1 	.word	0x252049c1
 801a7d4:	397b839a 	.word	0x397b839a
 801a7d8:	3fe921fb 	.word	0x3fe921fb
 801a7dc:	4002d97b 	.word	0x4002d97b
 801a7e0:	3ff921fb 	.word	0x3ff921fb
 801a7e4:	413921fb 	.word	0x413921fb
 801a7e8:	3fe00000 	.word	0x3fe00000
 801a7ec:	0801dcb8 	.word	0x0801dcb8
 801a7f0:	7fefffff 	.word	0x7fefffff
 801a7f4:	ea4f 5628 	mov.w	r6, r8, asr #20
 801a7f8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801a7fc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 801a800:	4620      	mov	r0, r4
 801a802:	460d      	mov	r5, r1
 801a804:	f7e6 f9a8 	bl	8000b58 <__aeabi_d2iz>
 801a808:	f7e5 fe8c 	bl	8000524 <__aeabi_i2d>
 801a80c:	4602      	mov	r2, r0
 801a80e:	460b      	mov	r3, r1
 801a810:	4620      	mov	r0, r4
 801a812:	4629      	mov	r1, r5
 801a814:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a818:	f7e5 fd36 	bl	8000288 <__aeabi_dsub>
 801a81c:	4b21      	ldr	r3, [pc, #132]	; (801a8a4 <__ieee754_rem_pio2+0x404>)
 801a81e:	2200      	movs	r2, #0
 801a820:	f7e5 feea 	bl	80005f8 <__aeabi_dmul>
 801a824:	460d      	mov	r5, r1
 801a826:	4604      	mov	r4, r0
 801a828:	f7e6 f996 	bl	8000b58 <__aeabi_d2iz>
 801a82c:	f7e5 fe7a 	bl	8000524 <__aeabi_i2d>
 801a830:	4602      	mov	r2, r0
 801a832:	460b      	mov	r3, r1
 801a834:	4620      	mov	r0, r4
 801a836:	4629      	mov	r1, r5
 801a838:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a83c:	f7e5 fd24 	bl	8000288 <__aeabi_dsub>
 801a840:	4b18      	ldr	r3, [pc, #96]	; (801a8a4 <__ieee754_rem_pio2+0x404>)
 801a842:	2200      	movs	r2, #0
 801a844:	f7e5 fed8 	bl	80005f8 <__aeabi_dmul>
 801a848:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a84c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801a850:	2703      	movs	r7, #3
 801a852:	2400      	movs	r4, #0
 801a854:	2500      	movs	r5, #0
 801a856:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801a85a:	4622      	mov	r2, r4
 801a85c:	462b      	mov	r3, r5
 801a85e:	46b9      	mov	r9, r7
 801a860:	3f01      	subs	r7, #1
 801a862:	f7e6 f931 	bl	8000ac8 <__aeabi_dcmpeq>
 801a866:	2800      	cmp	r0, #0
 801a868:	d1f5      	bne.n	801a856 <__ieee754_rem_pio2+0x3b6>
 801a86a:	4b0f      	ldr	r3, [pc, #60]	; (801a8a8 <__ieee754_rem_pio2+0x408>)
 801a86c:	9301      	str	r3, [sp, #4]
 801a86e:	2302      	movs	r3, #2
 801a870:	9300      	str	r3, [sp, #0]
 801a872:	4632      	mov	r2, r6
 801a874:	464b      	mov	r3, r9
 801a876:	4651      	mov	r1, sl
 801a878:	a804      	add	r0, sp, #16
 801a87a:	f000 faa1 	bl	801adc0 <__kernel_rem_pio2>
 801a87e:	9b02      	ldr	r3, [sp, #8]
 801a880:	2b00      	cmp	r3, #0
 801a882:	4683      	mov	fp, r0
 801a884:	f6bf ae4c 	bge.w	801a520 <__ieee754_rem_pio2+0x80>
 801a888:	e9da 2100 	ldrd	r2, r1, [sl]
 801a88c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a890:	e9ca 2300 	strd	r2, r3, [sl]
 801a894:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801a898:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a89c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801a8a0:	e73f      	b.n	801a722 <__ieee754_rem_pio2+0x282>
 801a8a2:	bf00      	nop
 801a8a4:	41700000 	.word	0x41700000
 801a8a8:	0801dd38 	.word	0x0801dd38

0801a8ac <acos>:
 801a8ac:	b538      	push	{r3, r4, r5, lr}
 801a8ae:	ed2d 8b02 	vpush	{d8}
 801a8b2:	ec55 4b10 	vmov	r4, r5, d0
 801a8b6:	f000 fdd3 	bl	801b460 <__ieee754_acos>
 801a8ba:	4622      	mov	r2, r4
 801a8bc:	462b      	mov	r3, r5
 801a8be:	4620      	mov	r0, r4
 801a8c0:	4629      	mov	r1, r5
 801a8c2:	eeb0 8a40 	vmov.f32	s16, s0
 801a8c6:	eef0 8a60 	vmov.f32	s17, s1
 801a8ca:	f7e6 f92f 	bl	8000b2c <__aeabi_dcmpun>
 801a8ce:	b9a8      	cbnz	r0, 801a8fc <acos+0x50>
 801a8d0:	ec45 4b10 	vmov	d0, r4, r5
 801a8d4:	f000 f81e 	bl	801a914 <fabs>
 801a8d8:	4b0c      	ldr	r3, [pc, #48]	; (801a90c <acos+0x60>)
 801a8da:	ec51 0b10 	vmov	r0, r1, d0
 801a8de:	2200      	movs	r2, #0
 801a8e0:	f7e6 f91a 	bl	8000b18 <__aeabi_dcmpgt>
 801a8e4:	b150      	cbz	r0, 801a8fc <acos+0x50>
 801a8e6:	f7fc fc0b 	bl	8017100 <__errno>
 801a8ea:	ecbd 8b02 	vpop	{d8}
 801a8ee:	2321      	movs	r3, #33	; 0x21
 801a8f0:	6003      	str	r3, [r0, #0]
 801a8f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a8f6:	4806      	ldr	r0, [pc, #24]	; (801a910 <acos+0x64>)
 801a8f8:	f7fc bc46 	b.w	8017188 <nan>
 801a8fc:	eeb0 0a48 	vmov.f32	s0, s16
 801a900:	eef0 0a68 	vmov.f32	s1, s17
 801a904:	ecbd 8b02 	vpop	{d8}
 801a908:	bd38      	pop	{r3, r4, r5, pc}
 801a90a:	bf00      	nop
 801a90c:	3ff00000 	.word	0x3ff00000
 801a910:	0801da76 	.word	0x0801da76

0801a914 <fabs>:
 801a914:	ec51 0b10 	vmov	r0, r1, d0
 801a918:	ee10 2a10 	vmov	r2, s0
 801a91c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a920:	ec43 2b10 	vmov	d0, r2, r3
 801a924:	4770      	bx	lr
	...

0801a928 <__ieee754_expf>:
 801a928:	ee10 2a10 	vmov	r2, s0
 801a92c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801a930:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a934:	d902      	bls.n	801a93c <__ieee754_expf+0x14>
 801a936:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a93a:	4770      	bx	lr
 801a93c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801a940:	d106      	bne.n	801a950 <__ieee754_expf+0x28>
 801a942:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801aa7c <__ieee754_expf+0x154>
 801a946:	2900      	cmp	r1, #0
 801a948:	bf18      	it	ne
 801a94a:	eeb0 0a67 	vmovne.f32	s0, s15
 801a94e:	4770      	bx	lr
 801a950:	484b      	ldr	r0, [pc, #300]	; (801aa80 <__ieee754_expf+0x158>)
 801a952:	4282      	cmp	r2, r0
 801a954:	dd02      	ble.n	801a95c <__ieee754_expf+0x34>
 801a956:	2000      	movs	r0, #0
 801a958:	f000 b950 	b.w	801abfc <__math_oflowf>
 801a95c:	2a00      	cmp	r2, #0
 801a95e:	da05      	bge.n	801a96c <__ieee754_expf+0x44>
 801a960:	4a48      	ldr	r2, [pc, #288]	; (801aa84 <__ieee754_expf+0x15c>)
 801a962:	4293      	cmp	r3, r2
 801a964:	d902      	bls.n	801a96c <__ieee754_expf+0x44>
 801a966:	2000      	movs	r0, #0
 801a968:	f000 b942 	b.w	801abf0 <__math_uflowf>
 801a96c:	4a46      	ldr	r2, [pc, #280]	; (801aa88 <__ieee754_expf+0x160>)
 801a96e:	4293      	cmp	r3, r2
 801a970:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801a974:	d952      	bls.n	801aa1c <__ieee754_expf+0xf4>
 801a976:	4a45      	ldr	r2, [pc, #276]	; (801aa8c <__ieee754_expf+0x164>)
 801a978:	4293      	cmp	r3, r2
 801a97a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801a97e:	d834      	bhi.n	801a9ea <__ieee754_expf+0xc2>
 801a980:	4b43      	ldr	r3, [pc, #268]	; (801aa90 <__ieee754_expf+0x168>)
 801a982:	4413      	add	r3, r2
 801a984:	ed93 7a00 	vldr	s14, [r3]
 801a988:	4b42      	ldr	r3, [pc, #264]	; (801aa94 <__ieee754_expf+0x16c>)
 801a98a:	4413      	add	r3, r2
 801a98c:	ee30 7a47 	vsub.f32	s14, s0, s14
 801a990:	f1c1 0201 	rsb	r2, r1, #1
 801a994:	edd3 7a00 	vldr	s15, [r3]
 801a998:	1a52      	subs	r2, r2, r1
 801a99a:	ee37 0a67 	vsub.f32	s0, s14, s15
 801a99e:	ee20 6a00 	vmul.f32	s12, s0, s0
 801a9a2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801aa98 <__ieee754_expf+0x170>
 801a9a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801aa9c <__ieee754_expf+0x174>
 801a9aa:	eee6 6a05 	vfma.f32	s13, s12, s10
 801a9ae:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801aaa0 <__ieee754_expf+0x178>
 801a9b2:	eea6 5a86 	vfma.f32	s10, s13, s12
 801a9b6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801aaa4 <__ieee754_expf+0x17c>
 801a9ba:	eee5 6a06 	vfma.f32	s13, s10, s12
 801a9be:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801aaa8 <__ieee754_expf+0x180>
 801a9c2:	eea6 5a86 	vfma.f32	s10, s13, s12
 801a9c6:	eef0 6a40 	vmov.f32	s13, s0
 801a9ca:	eee5 6a46 	vfms.f32	s13, s10, s12
 801a9ce:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801a9d2:	ee20 5a26 	vmul.f32	s10, s0, s13
 801a9d6:	bb92      	cbnz	r2, 801aa3e <__ieee754_expf+0x116>
 801a9d8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801a9dc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801a9e0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801a9e4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801a9e8:	4770      	bx	lr
 801a9ea:	4b30      	ldr	r3, [pc, #192]	; (801aaac <__ieee754_expf+0x184>)
 801a9ec:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801aab0 <__ieee754_expf+0x188>
 801a9f0:	eddf 6a30 	vldr	s13, [pc, #192]	; 801aab4 <__ieee754_expf+0x18c>
 801a9f4:	4413      	add	r3, r2
 801a9f6:	edd3 7a00 	vldr	s15, [r3]
 801a9fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a9fe:	eeb0 7a40 	vmov.f32	s14, s0
 801aa02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aa06:	ee17 2a90 	vmov	r2, s15
 801aa0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa0e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801aa12:	eddf 6a29 	vldr	s13, [pc, #164]	; 801aab8 <__ieee754_expf+0x190>
 801aa16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801aa1a:	e7be      	b.n	801a99a <__ieee754_expf+0x72>
 801aa1c:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 801aa20:	d20b      	bcs.n	801aa3a <__ieee754_expf+0x112>
 801aa22:	eddf 6a26 	vldr	s13, [pc, #152]	; 801aabc <__ieee754_expf+0x194>
 801aa26:	ee70 6a26 	vadd.f32	s13, s0, s13
 801aa2a:	eef4 6ae5 	vcmpe.f32	s13, s11
 801aa2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa32:	dd02      	ble.n	801aa3a <__ieee754_expf+0x112>
 801aa34:	ee30 0a25 	vadd.f32	s0, s0, s11
 801aa38:	4770      	bx	lr
 801aa3a:	2200      	movs	r2, #0
 801aa3c:	e7af      	b.n	801a99e <__ieee754_expf+0x76>
 801aa3e:	ee36 6a66 	vsub.f32	s12, s12, s13
 801aa42:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801aa46:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801aa4a:	bfb8      	it	lt
 801aa4c:	3264      	addlt	r2, #100	; 0x64
 801aa4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801aa52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aa56:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801aa5a:	ee17 3a90 	vmov	r3, s15
 801aa5e:	bfab      	itete	ge
 801aa60:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801aa64:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801aa68:	ee00 3a10 	vmovge	s0, r3
 801aa6c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 801aac0 <__ieee754_expf+0x198>
 801aa70:	bfbc      	itt	lt
 801aa72:	ee00 3a10 	vmovlt	s0, r3
 801aa76:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801aa7a:	4770      	bx	lr
 801aa7c:	00000000 	.word	0x00000000
 801aa80:	42b17217 	.word	0x42b17217
 801aa84:	42cff1b5 	.word	0x42cff1b5
 801aa88:	3eb17218 	.word	0x3eb17218
 801aa8c:	3f851591 	.word	0x3f851591
 801aa90:	0801de48 	.word	0x0801de48
 801aa94:	0801de50 	.word	0x0801de50
 801aa98:	3331bb4c 	.word	0x3331bb4c
 801aa9c:	b5ddea0e 	.word	0xb5ddea0e
 801aaa0:	388ab355 	.word	0x388ab355
 801aaa4:	bb360b61 	.word	0xbb360b61
 801aaa8:	3e2aaaab 	.word	0x3e2aaaab
 801aaac:	0801de40 	.word	0x0801de40
 801aab0:	3fb8aa3b 	.word	0x3fb8aa3b
 801aab4:	3f317180 	.word	0x3f317180
 801aab8:	3717f7d1 	.word	0x3717f7d1
 801aabc:	7149f2ca 	.word	0x7149f2ca
 801aac0:	0d800000 	.word	0x0d800000
 801aac4:	00000000 	.word	0x00000000

0801aac8 <scalbn>:
 801aac8:	b570      	push	{r4, r5, r6, lr}
 801aaca:	ec55 4b10 	vmov	r4, r5, d0
 801aace:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801aad2:	4606      	mov	r6, r0
 801aad4:	462b      	mov	r3, r5
 801aad6:	b999      	cbnz	r1, 801ab00 <scalbn+0x38>
 801aad8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801aadc:	4323      	orrs	r3, r4
 801aade:	d03f      	beq.n	801ab60 <scalbn+0x98>
 801aae0:	4b35      	ldr	r3, [pc, #212]	; (801abb8 <scalbn+0xf0>)
 801aae2:	4629      	mov	r1, r5
 801aae4:	ee10 0a10 	vmov	r0, s0
 801aae8:	2200      	movs	r2, #0
 801aaea:	f7e5 fd85 	bl	80005f8 <__aeabi_dmul>
 801aaee:	4b33      	ldr	r3, [pc, #204]	; (801abbc <scalbn+0xf4>)
 801aaf0:	429e      	cmp	r6, r3
 801aaf2:	4604      	mov	r4, r0
 801aaf4:	460d      	mov	r5, r1
 801aaf6:	da10      	bge.n	801ab1a <scalbn+0x52>
 801aaf8:	a327      	add	r3, pc, #156	; (adr r3, 801ab98 <scalbn+0xd0>)
 801aafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aafe:	e01f      	b.n	801ab40 <scalbn+0x78>
 801ab00:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801ab04:	4291      	cmp	r1, r2
 801ab06:	d10c      	bne.n	801ab22 <scalbn+0x5a>
 801ab08:	ee10 2a10 	vmov	r2, s0
 801ab0c:	4620      	mov	r0, r4
 801ab0e:	4629      	mov	r1, r5
 801ab10:	f7e5 fbbc 	bl	800028c <__adddf3>
 801ab14:	4604      	mov	r4, r0
 801ab16:	460d      	mov	r5, r1
 801ab18:	e022      	b.n	801ab60 <scalbn+0x98>
 801ab1a:	460b      	mov	r3, r1
 801ab1c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801ab20:	3936      	subs	r1, #54	; 0x36
 801ab22:	f24c 3250 	movw	r2, #50000	; 0xc350
 801ab26:	4296      	cmp	r6, r2
 801ab28:	dd0d      	ble.n	801ab46 <scalbn+0x7e>
 801ab2a:	2d00      	cmp	r5, #0
 801ab2c:	a11c      	add	r1, pc, #112	; (adr r1, 801aba0 <scalbn+0xd8>)
 801ab2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab32:	da02      	bge.n	801ab3a <scalbn+0x72>
 801ab34:	a11c      	add	r1, pc, #112	; (adr r1, 801aba8 <scalbn+0xe0>)
 801ab36:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab3a:	a319      	add	r3, pc, #100	; (adr r3, 801aba0 <scalbn+0xd8>)
 801ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab40:	f7e5 fd5a 	bl	80005f8 <__aeabi_dmul>
 801ab44:	e7e6      	b.n	801ab14 <scalbn+0x4c>
 801ab46:	1872      	adds	r2, r6, r1
 801ab48:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801ab4c:	428a      	cmp	r2, r1
 801ab4e:	dcec      	bgt.n	801ab2a <scalbn+0x62>
 801ab50:	2a00      	cmp	r2, #0
 801ab52:	dd08      	ble.n	801ab66 <scalbn+0x9e>
 801ab54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ab58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ab5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ab60:	ec45 4b10 	vmov	d0, r4, r5
 801ab64:	bd70      	pop	{r4, r5, r6, pc}
 801ab66:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ab6a:	da08      	bge.n	801ab7e <scalbn+0xb6>
 801ab6c:	2d00      	cmp	r5, #0
 801ab6e:	a10a      	add	r1, pc, #40	; (adr r1, 801ab98 <scalbn+0xd0>)
 801ab70:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab74:	dac0      	bge.n	801aaf8 <scalbn+0x30>
 801ab76:	a10e      	add	r1, pc, #56	; (adr r1, 801abb0 <scalbn+0xe8>)
 801ab78:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab7c:	e7bc      	b.n	801aaf8 <scalbn+0x30>
 801ab7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ab82:	3236      	adds	r2, #54	; 0x36
 801ab84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ab88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801ab8c:	4620      	mov	r0, r4
 801ab8e:	4b0c      	ldr	r3, [pc, #48]	; (801abc0 <scalbn+0xf8>)
 801ab90:	2200      	movs	r2, #0
 801ab92:	e7d5      	b.n	801ab40 <scalbn+0x78>
 801ab94:	f3af 8000 	nop.w
 801ab98:	c2f8f359 	.word	0xc2f8f359
 801ab9c:	01a56e1f 	.word	0x01a56e1f
 801aba0:	8800759c 	.word	0x8800759c
 801aba4:	7e37e43c 	.word	0x7e37e43c
 801aba8:	8800759c 	.word	0x8800759c
 801abac:	fe37e43c 	.word	0xfe37e43c
 801abb0:	c2f8f359 	.word	0xc2f8f359
 801abb4:	81a56e1f 	.word	0x81a56e1f
 801abb8:	43500000 	.word	0x43500000
 801abbc:	ffff3cb0 	.word	0xffff3cb0
 801abc0:	3c900000 	.word	0x3c900000

0801abc4 <with_errnof>:
 801abc4:	b513      	push	{r0, r1, r4, lr}
 801abc6:	4604      	mov	r4, r0
 801abc8:	ed8d 0a01 	vstr	s0, [sp, #4]
 801abcc:	f7fc fa98 	bl	8017100 <__errno>
 801abd0:	ed9d 0a01 	vldr	s0, [sp, #4]
 801abd4:	6004      	str	r4, [r0, #0]
 801abd6:	b002      	add	sp, #8
 801abd8:	bd10      	pop	{r4, pc}

0801abda <xflowf>:
 801abda:	b130      	cbz	r0, 801abea <xflowf+0x10>
 801abdc:	eef1 7a40 	vneg.f32	s15, s0
 801abe0:	ee27 0a80 	vmul.f32	s0, s15, s0
 801abe4:	2022      	movs	r0, #34	; 0x22
 801abe6:	f7ff bfed 	b.w	801abc4 <with_errnof>
 801abea:	eef0 7a40 	vmov.f32	s15, s0
 801abee:	e7f7      	b.n	801abe0 <xflowf+0x6>

0801abf0 <__math_uflowf>:
 801abf0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801abf8 <__math_uflowf+0x8>
 801abf4:	f7ff bff1 	b.w	801abda <xflowf>
 801abf8:	10000000 	.word	0x10000000

0801abfc <__math_oflowf>:
 801abfc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ac04 <__math_oflowf+0x8>
 801ac00:	f7ff bfeb 	b.w	801abda <xflowf>
 801ac04:	70000000 	.word	0x70000000

0801ac08 <__ieee754_sqrt>:
 801ac08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac0c:	ec55 4b10 	vmov	r4, r5, d0
 801ac10:	4e67      	ldr	r6, [pc, #412]	; (801adb0 <__ieee754_sqrt+0x1a8>)
 801ac12:	43ae      	bics	r6, r5
 801ac14:	ee10 0a10 	vmov	r0, s0
 801ac18:	ee10 2a10 	vmov	r2, s0
 801ac1c:	4629      	mov	r1, r5
 801ac1e:	462b      	mov	r3, r5
 801ac20:	d10d      	bne.n	801ac3e <__ieee754_sqrt+0x36>
 801ac22:	f7e5 fce9 	bl	80005f8 <__aeabi_dmul>
 801ac26:	4602      	mov	r2, r0
 801ac28:	460b      	mov	r3, r1
 801ac2a:	4620      	mov	r0, r4
 801ac2c:	4629      	mov	r1, r5
 801ac2e:	f7e5 fb2d 	bl	800028c <__adddf3>
 801ac32:	4604      	mov	r4, r0
 801ac34:	460d      	mov	r5, r1
 801ac36:	ec45 4b10 	vmov	d0, r4, r5
 801ac3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac3e:	2d00      	cmp	r5, #0
 801ac40:	dc0b      	bgt.n	801ac5a <__ieee754_sqrt+0x52>
 801ac42:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ac46:	4326      	orrs	r6, r4
 801ac48:	d0f5      	beq.n	801ac36 <__ieee754_sqrt+0x2e>
 801ac4a:	b135      	cbz	r5, 801ac5a <__ieee754_sqrt+0x52>
 801ac4c:	f7e5 fb1c 	bl	8000288 <__aeabi_dsub>
 801ac50:	4602      	mov	r2, r0
 801ac52:	460b      	mov	r3, r1
 801ac54:	f7e5 fdfa 	bl	800084c <__aeabi_ddiv>
 801ac58:	e7eb      	b.n	801ac32 <__ieee754_sqrt+0x2a>
 801ac5a:	1509      	asrs	r1, r1, #20
 801ac5c:	f000 808d 	beq.w	801ad7a <__ieee754_sqrt+0x172>
 801ac60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ac64:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801ac68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ac6c:	07c9      	lsls	r1, r1, #31
 801ac6e:	bf5c      	itt	pl
 801ac70:	005b      	lslpl	r3, r3, #1
 801ac72:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801ac76:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ac7a:	bf58      	it	pl
 801ac7c:	0052      	lslpl	r2, r2, #1
 801ac7e:	2500      	movs	r5, #0
 801ac80:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801ac84:	1076      	asrs	r6, r6, #1
 801ac86:	0052      	lsls	r2, r2, #1
 801ac88:	f04f 0e16 	mov.w	lr, #22
 801ac8c:	46ac      	mov	ip, r5
 801ac8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801ac92:	eb0c 0001 	add.w	r0, ip, r1
 801ac96:	4298      	cmp	r0, r3
 801ac98:	bfde      	ittt	le
 801ac9a:	1a1b      	suble	r3, r3, r0
 801ac9c:	eb00 0c01 	addle.w	ip, r0, r1
 801aca0:	186d      	addle	r5, r5, r1
 801aca2:	005b      	lsls	r3, r3, #1
 801aca4:	f1be 0e01 	subs.w	lr, lr, #1
 801aca8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801acac:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801acb0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801acb4:	d1ed      	bne.n	801ac92 <__ieee754_sqrt+0x8a>
 801acb6:	4674      	mov	r4, lr
 801acb8:	2720      	movs	r7, #32
 801acba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801acbe:	4563      	cmp	r3, ip
 801acc0:	eb01 000e 	add.w	r0, r1, lr
 801acc4:	dc02      	bgt.n	801accc <__ieee754_sqrt+0xc4>
 801acc6:	d113      	bne.n	801acf0 <__ieee754_sqrt+0xe8>
 801acc8:	4290      	cmp	r0, r2
 801acca:	d811      	bhi.n	801acf0 <__ieee754_sqrt+0xe8>
 801accc:	2800      	cmp	r0, #0
 801acce:	eb00 0e01 	add.w	lr, r0, r1
 801acd2:	da57      	bge.n	801ad84 <__ieee754_sqrt+0x17c>
 801acd4:	f1be 0f00 	cmp.w	lr, #0
 801acd8:	db54      	blt.n	801ad84 <__ieee754_sqrt+0x17c>
 801acda:	f10c 0801 	add.w	r8, ip, #1
 801acde:	eba3 030c 	sub.w	r3, r3, ip
 801ace2:	4290      	cmp	r0, r2
 801ace4:	bf88      	it	hi
 801ace6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801acea:	1a12      	subs	r2, r2, r0
 801acec:	440c      	add	r4, r1
 801acee:	46c4      	mov	ip, r8
 801acf0:	005b      	lsls	r3, r3, #1
 801acf2:	3f01      	subs	r7, #1
 801acf4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801acf8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801acfc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801ad00:	d1dd      	bne.n	801acbe <__ieee754_sqrt+0xb6>
 801ad02:	4313      	orrs	r3, r2
 801ad04:	d01b      	beq.n	801ad3e <__ieee754_sqrt+0x136>
 801ad06:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801adb4 <__ieee754_sqrt+0x1ac>
 801ad0a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801adb8 <__ieee754_sqrt+0x1b0>
 801ad0e:	e9da 0100 	ldrd	r0, r1, [sl]
 801ad12:	e9db 2300 	ldrd	r2, r3, [fp]
 801ad16:	f7e5 fab7 	bl	8000288 <__aeabi_dsub>
 801ad1a:	e9da 8900 	ldrd	r8, r9, [sl]
 801ad1e:	4602      	mov	r2, r0
 801ad20:	460b      	mov	r3, r1
 801ad22:	4640      	mov	r0, r8
 801ad24:	4649      	mov	r1, r9
 801ad26:	f7e5 fee3 	bl	8000af0 <__aeabi_dcmple>
 801ad2a:	b140      	cbz	r0, 801ad3e <__ieee754_sqrt+0x136>
 801ad2c:	f1b4 3fff 	cmp.w	r4, #4294967295
 801ad30:	e9da 0100 	ldrd	r0, r1, [sl]
 801ad34:	e9db 2300 	ldrd	r2, r3, [fp]
 801ad38:	d126      	bne.n	801ad88 <__ieee754_sqrt+0x180>
 801ad3a:	3501      	adds	r5, #1
 801ad3c:	463c      	mov	r4, r7
 801ad3e:	106a      	asrs	r2, r5, #1
 801ad40:	0863      	lsrs	r3, r4, #1
 801ad42:	07e9      	lsls	r1, r5, #31
 801ad44:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801ad48:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801ad4c:	bf48      	it	mi
 801ad4e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801ad52:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801ad56:	461c      	mov	r4, r3
 801ad58:	e76d      	b.n	801ac36 <__ieee754_sqrt+0x2e>
 801ad5a:	0ad3      	lsrs	r3, r2, #11
 801ad5c:	3815      	subs	r0, #21
 801ad5e:	0552      	lsls	r2, r2, #21
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	d0fa      	beq.n	801ad5a <__ieee754_sqrt+0x152>
 801ad64:	02dc      	lsls	r4, r3, #11
 801ad66:	d50a      	bpl.n	801ad7e <__ieee754_sqrt+0x176>
 801ad68:	f1c1 0420 	rsb	r4, r1, #32
 801ad6c:	fa22 f404 	lsr.w	r4, r2, r4
 801ad70:	1e4d      	subs	r5, r1, #1
 801ad72:	408a      	lsls	r2, r1
 801ad74:	4323      	orrs	r3, r4
 801ad76:	1b41      	subs	r1, r0, r5
 801ad78:	e772      	b.n	801ac60 <__ieee754_sqrt+0x58>
 801ad7a:	4608      	mov	r0, r1
 801ad7c:	e7f0      	b.n	801ad60 <__ieee754_sqrt+0x158>
 801ad7e:	005b      	lsls	r3, r3, #1
 801ad80:	3101      	adds	r1, #1
 801ad82:	e7ef      	b.n	801ad64 <__ieee754_sqrt+0x15c>
 801ad84:	46e0      	mov	r8, ip
 801ad86:	e7aa      	b.n	801acde <__ieee754_sqrt+0xd6>
 801ad88:	f7e5 fa80 	bl	800028c <__adddf3>
 801ad8c:	e9da 8900 	ldrd	r8, r9, [sl]
 801ad90:	4602      	mov	r2, r0
 801ad92:	460b      	mov	r3, r1
 801ad94:	4640      	mov	r0, r8
 801ad96:	4649      	mov	r1, r9
 801ad98:	f7e5 fea0 	bl	8000adc <__aeabi_dcmplt>
 801ad9c:	b120      	cbz	r0, 801ada8 <__ieee754_sqrt+0x1a0>
 801ad9e:	1ca0      	adds	r0, r4, #2
 801ada0:	bf08      	it	eq
 801ada2:	3501      	addeq	r5, #1
 801ada4:	3402      	adds	r4, #2
 801ada6:	e7ca      	b.n	801ad3e <__ieee754_sqrt+0x136>
 801ada8:	3401      	adds	r4, #1
 801adaa:	f024 0401 	bic.w	r4, r4, #1
 801adae:	e7c6      	b.n	801ad3e <__ieee754_sqrt+0x136>
 801adb0:	7ff00000 	.word	0x7ff00000
 801adb4:	200002f8 	.word	0x200002f8
 801adb8:	20000300 	.word	0x20000300
 801adbc:	00000000 	.word	0x00000000

0801adc0 <__kernel_rem_pio2>:
 801adc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adc4:	ed2d 8b02 	vpush	{d8}
 801adc8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801adcc:	f112 0f14 	cmn.w	r2, #20
 801add0:	9306      	str	r3, [sp, #24]
 801add2:	9104      	str	r1, [sp, #16]
 801add4:	4bc2      	ldr	r3, [pc, #776]	; (801b0e0 <__kernel_rem_pio2+0x320>)
 801add6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801add8:	9009      	str	r0, [sp, #36]	; 0x24
 801adda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801adde:	9300      	str	r3, [sp, #0]
 801ade0:	9b06      	ldr	r3, [sp, #24]
 801ade2:	f103 33ff 	add.w	r3, r3, #4294967295
 801ade6:	bfa8      	it	ge
 801ade8:	1ed4      	subge	r4, r2, #3
 801adea:	9305      	str	r3, [sp, #20]
 801adec:	bfb2      	itee	lt
 801adee:	2400      	movlt	r4, #0
 801adf0:	2318      	movge	r3, #24
 801adf2:	fb94 f4f3 	sdivge	r4, r4, r3
 801adf6:	f06f 0317 	mvn.w	r3, #23
 801adfa:	fb04 3303 	mla	r3, r4, r3, r3
 801adfe:	eb03 0a02 	add.w	sl, r3, r2
 801ae02:	9b00      	ldr	r3, [sp, #0]
 801ae04:	9a05      	ldr	r2, [sp, #20]
 801ae06:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 801b0d0 <__kernel_rem_pio2+0x310>
 801ae0a:	eb03 0802 	add.w	r8, r3, r2
 801ae0e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801ae10:	1aa7      	subs	r7, r4, r2
 801ae12:	ae20      	add	r6, sp, #128	; 0x80
 801ae14:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801ae18:	2500      	movs	r5, #0
 801ae1a:	4545      	cmp	r5, r8
 801ae1c:	dd13      	ble.n	801ae46 <__kernel_rem_pio2+0x86>
 801ae1e:	9b06      	ldr	r3, [sp, #24]
 801ae20:	aa20      	add	r2, sp, #128	; 0x80
 801ae22:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801ae26:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801ae2a:	f04f 0800 	mov.w	r8, #0
 801ae2e:	9b00      	ldr	r3, [sp, #0]
 801ae30:	4598      	cmp	r8, r3
 801ae32:	dc31      	bgt.n	801ae98 <__kernel_rem_pio2+0xd8>
 801ae34:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 801b0d0 <__kernel_rem_pio2+0x310>
 801ae38:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ae3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ae40:	462f      	mov	r7, r5
 801ae42:	2600      	movs	r6, #0
 801ae44:	e01b      	b.n	801ae7e <__kernel_rem_pio2+0xbe>
 801ae46:	42ef      	cmn	r7, r5
 801ae48:	d407      	bmi.n	801ae5a <__kernel_rem_pio2+0x9a>
 801ae4a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801ae4e:	f7e5 fb69 	bl	8000524 <__aeabi_i2d>
 801ae52:	e8e6 0102 	strd	r0, r1, [r6], #8
 801ae56:	3501      	adds	r5, #1
 801ae58:	e7df      	b.n	801ae1a <__kernel_rem_pio2+0x5a>
 801ae5a:	ec51 0b18 	vmov	r0, r1, d8
 801ae5e:	e7f8      	b.n	801ae52 <__kernel_rem_pio2+0x92>
 801ae60:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ae64:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801ae68:	f7e5 fbc6 	bl	80005f8 <__aeabi_dmul>
 801ae6c:	4602      	mov	r2, r0
 801ae6e:	460b      	mov	r3, r1
 801ae70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ae74:	f7e5 fa0a 	bl	800028c <__adddf3>
 801ae78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ae7c:	3601      	adds	r6, #1
 801ae7e:	9b05      	ldr	r3, [sp, #20]
 801ae80:	429e      	cmp	r6, r3
 801ae82:	f1a7 0708 	sub.w	r7, r7, #8
 801ae86:	ddeb      	ble.n	801ae60 <__kernel_rem_pio2+0xa0>
 801ae88:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ae8c:	f108 0801 	add.w	r8, r8, #1
 801ae90:	ecab 7b02 	vstmia	fp!, {d7}
 801ae94:	3508      	adds	r5, #8
 801ae96:	e7ca      	b.n	801ae2e <__kernel_rem_pio2+0x6e>
 801ae98:	9b00      	ldr	r3, [sp, #0]
 801ae9a:	aa0c      	add	r2, sp, #48	; 0x30
 801ae9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801aea0:	930b      	str	r3, [sp, #44]	; 0x2c
 801aea2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801aea4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801aea8:	9c00      	ldr	r4, [sp, #0]
 801aeaa:	930a      	str	r3, [sp, #40]	; 0x28
 801aeac:	00e3      	lsls	r3, r4, #3
 801aeae:	9308      	str	r3, [sp, #32]
 801aeb0:	ab98      	add	r3, sp, #608	; 0x260
 801aeb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801aeb6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801aeba:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801aebe:	ab70      	add	r3, sp, #448	; 0x1c0
 801aec0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801aec4:	46c3      	mov	fp, r8
 801aec6:	46a1      	mov	r9, r4
 801aec8:	f1b9 0f00 	cmp.w	r9, #0
 801aecc:	f1a5 0508 	sub.w	r5, r5, #8
 801aed0:	dc77      	bgt.n	801afc2 <__kernel_rem_pio2+0x202>
 801aed2:	ec47 6b10 	vmov	d0, r6, r7
 801aed6:	4650      	mov	r0, sl
 801aed8:	f7ff fdf6 	bl	801aac8 <scalbn>
 801aedc:	ec57 6b10 	vmov	r6, r7, d0
 801aee0:	2200      	movs	r2, #0
 801aee2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801aee6:	ee10 0a10 	vmov	r0, s0
 801aeea:	4639      	mov	r1, r7
 801aeec:	f7e5 fb84 	bl	80005f8 <__aeabi_dmul>
 801aef0:	ec41 0b10 	vmov	d0, r0, r1
 801aef4:	f7fe ff10 	bl	8019d18 <floor>
 801aef8:	4b7a      	ldr	r3, [pc, #488]	; (801b0e4 <__kernel_rem_pio2+0x324>)
 801aefa:	ec51 0b10 	vmov	r0, r1, d0
 801aefe:	2200      	movs	r2, #0
 801af00:	f7e5 fb7a 	bl	80005f8 <__aeabi_dmul>
 801af04:	4602      	mov	r2, r0
 801af06:	460b      	mov	r3, r1
 801af08:	4630      	mov	r0, r6
 801af0a:	4639      	mov	r1, r7
 801af0c:	f7e5 f9bc 	bl	8000288 <__aeabi_dsub>
 801af10:	460f      	mov	r7, r1
 801af12:	4606      	mov	r6, r0
 801af14:	f7e5 fe20 	bl	8000b58 <__aeabi_d2iz>
 801af18:	9002      	str	r0, [sp, #8]
 801af1a:	f7e5 fb03 	bl	8000524 <__aeabi_i2d>
 801af1e:	4602      	mov	r2, r0
 801af20:	460b      	mov	r3, r1
 801af22:	4630      	mov	r0, r6
 801af24:	4639      	mov	r1, r7
 801af26:	f7e5 f9af 	bl	8000288 <__aeabi_dsub>
 801af2a:	f1ba 0f00 	cmp.w	sl, #0
 801af2e:	4606      	mov	r6, r0
 801af30:	460f      	mov	r7, r1
 801af32:	dd6d      	ble.n	801b010 <__kernel_rem_pio2+0x250>
 801af34:	1e61      	subs	r1, r4, #1
 801af36:	ab0c      	add	r3, sp, #48	; 0x30
 801af38:	9d02      	ldr	r5, [sp, #8]
 801af3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801af3e:	f1ca 0018 	rsb	r0, sl, #24
 801af42:	fa43 f200 	asr.w	r2, r3, r0
 801af46:	4415      	add	r5, r2
 801af48:	4082      	lsls	r2, r0
 801af4a:	1a9b      	subs	r3, r3, r2
 801af4c:	aa0c      	add	r2, sp, #48	; 0x30
 801af4e:	9502      	str	r5, [sp, #8]
 801af50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801af54:	f1ca 0217 	rsb	r2, sl, #23
 801af58:	fa43 fb02 	asr.w	fp, r3, r2
 801af5c:	f1bb 0f00 	cmp.w	fp, #0
 801af60:	dd65      	ble.n	801b02e <__kernel_rem_pio2+0x26e>
 801af62:	9b02      	ldr	r3, [sp, #8]
 801af64:	2200      	movs	r2, #0
 801af66:	3301      	adds	r3, #1
 801af68:	9302      	str	r3, [sp, #8]
 801af6a:	4615      	mov	r5, r2
 801af6c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801af70:	4294      	cmp	r4, r2
 801af72:	f300 809f 	bgt.w	801b0b4 <__kernel_rem_pio2+0x2f4>
 801af76:	f1ba 0f00 	cmp.w	sl, #0
 801af7a:	dd07      	ble.n	801af8c <__kernel_rem_pio2+0x1cc>
 801af7c:	f1ba 0f01 	cmp.w	sl, #1
 801af80:	f000 80c1 	beq.w	801b106 <__kernel_rem_pio2+0x346>
 801af84:	f1ba 0f02 	cmp.w	sl, #2
 801af88:	f000 80c7 	beq.w	801b11a <__kernel_rem_pio2+0x35a>
 801af8c:	f1bb 0f02 	cmp.w	fp, #2
 801af90:	d14d      	bne.n	801b02e <__kernel_rem_pio2+0x26e>
 801af92:	4632      	mov	r2, r6
 801af94:	463b      	mov	r3, r7
 801af96:	4954      	ldr	r1, [pc, #336]	; (801b0e8 <__kernel_rem_pio2+0x328>)
 801af98:	2000      	movs	r0, #0
 801af9a:	f7e5 f975 	bl	8000288 <__aeabi_dsub>
 801af9e:	4606      	mov	r6, r0
 801afa0:	460f      	mov	r7, r1
 801afa2:	2d00      	cmp	r5, #0
 801afa4:	d043      	beq.n	801b02e <__kernel_rem_pio2+0x26e>
 801afa6:	4650      	mov	r0, sl
 801afa8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 801b0d8 <__kernel_rem_pio2+0x318>
 801afac:	f7ff fd8c 	bl	801aac8 <scalbn>
 801afb0:	4630      	mov	r0, r6
 801afb2:	4639      	mov	r1, r7
 801afb4:	ec53 2b10 	vmov	r2, r3, d0
 801afb8:	f7e5 f966 	bl	8000288 <__aeabi_dsub>
 801afbc:	4606      	mov	r6, r0
 801afbe:	460f      	mov	r7, r1
 801afc0:	e035      	b.n	801b02e <__kernel_rem_pio2+0x26e>
 801afc2:	4b4a      	ldr	r3, [pc, #296]	; (801b0ec <__kernel_rem_pio2+0x32c>)
 801afc4:	2200      	movs	r2, #0
 801afc6:	4630      	mov	r0, r6
 801afc8:	4639      	mov	r1, r7
 801afca:	f7e5 fb15 	bl	80005f8 <__aeabi_dmul>
 801afce:	f7e5 fdc3 	bl	8000b58 <__aeabi_d2iz>
 801afd2:	f7e5 faa7 	bl	8000524 <__aeabi_i2d>
 801afd6:	4602      	mov	r2, r0
 801afd8:	460b      	mov	r3, r1
 801afda:	ec43 2b18 	vmov	d8, r2, r3
 801afde:	4b44      	ldr	r3, [pc, #272]	; (801b0f0 <__kernel_rem_pio2+0x330>)
 801afe0:	2200      	movs	r2, #0
 801afe2:	f7e5 fb09 	bl	80005f8 <__aeabi_dmul>
 801afe6:	4602      	mov	r2, r0
 801afe8:	460b      	mov	r3, r1
 801afea:	4630      	mov	r0, r6
 801afec:	4639      	mov	r1, r7
 801afee:	f7e5 f94b 	bl	8000288 <__aeabi_dsub>
 801aff2:	f7e5 fdb1 	bl	8000b58 <__aeabi_d2iz>
 801aff6:	e9d5 2300 	ldrd	r2, r3, [r5]
 801affa:	f84b 0b04 	str.w	r0, [fp], #4
 801affe:	ec51 0b18 	vmov	r0, r1, d8
 801b002:	f7e5 f943 	bl	800028c <__adddf3>
 801b006:	f109 39ff 	add.w	r9, r9, #4294967295
 801b00a:	4606      	mov	r6, r0
 801b00c:	460f      	mov	r7, r1
 801b00e:	e75b      	b.n	801aec8 <__kernel_rem_pio2+0x108>
 801b010:	d106      	bne.n	801b020 <__kernel_rem_pio2+0x260>
 801b012:	1e63      	subs	r3, r4, #1
 801b014:	aa0c      	add	r2, sp, #48	; 0x30
 801b016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b01a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801b01e:	e79d      	b.n	801af5c <__kernel_rem_pio2+0x19c>
 801b020:	4b34      	ldr	r3, [pc, #208]	; (801b0f4 <__kernel_rem_pio2+0x334>)
 801b022:	2200      	movs	r2, #0
 801b024:	f7e5 fd6e 	bl	8000b04 <__aeabi_dcmpge>
 801b028:	2800      	cmp	r0, #0
 801b02a:	d140      	bne.n	801b0ae <__kernel_rem_pio2+0x2ee>
 801b02c:	4683      	mov	fp, r0
 801b02e:	2200      	movs	r2, #0
 801b030:	2300      	movs	r3, #0
 801b032:	4630      	mov	r0, r6
 801b034:	4639      	mov	r1, r7
 801b036:	f7e5 fd47 	bl	8000ac8 <__aeabi_dcmpeq>
 801b03a:	2800      	cmp	r0, #0
 801b03c:	f000 80c1 	beq.w	801b1c2 <__kernel_rem_pio2+0x402>
 801b040:	1e65      	subs	r5, r4, #1
 801b042:	462b      	mov	r3, r5
 801b044:	2200      	movs	r2, #0
 801b046:	9900      	ldr	r1, [sp, #0]
 801b048:	428b      	cmp	r3, r1
 801b04a:	da6d      	bge.n	801b128 <__kernel_rem_pio2+0x368>
 801b04c:	2a00      	cmp	r2, #0
 801b04e:	f000 808a 	beq.w	801b166 <__kernel_rem_pio2+0x3a6>
 801b052:	ab0c      	add	r3, sp, #48	; 0x30
 801b054:	f1aa 0a18 	sub.w	sl, sl, #24
 801b058:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	f000 80ae 	beq.w	801b1be <__kernel_rem_pio2+0x3fe>
 801b062:	4650      	mov	r0, sl
 801b064:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801b0d8 <__kernel_rem_pio2+0x318>
 801b068:	f7ff fd2e 	bl	801aac8 <scalbn>
 801b06c:	1c6b      	adds	r3, r5, #1
 801b06e:	00da      	lsls	r2, r3, #3
 801b070:	9205      	str	r2, [sp, #20]
 801b072:	ec57 6b10 	vmov	r6, r7, d0
 801b076:	aa70      	add	r2, sp, #448	; 0x1c0
 801b078:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801b0ec <__kernel_rem_pio2+0x32c>
 801b07c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 801b080:	462c      	mov	r4, r5
 801b082:	f04f 0800 	mov.w	r8, #0
 801b086:	2c00      	cmp	r4, #0
 801b088:	f280 80d4 	bge.w	801b234 <__kernel_rem_pio2+0x474>
 801b08c:	462c      	mov	r4, r5
 801b08e:	2c00      	cmp	r4, #0
 801b090:	f2c0 8102 	blt.w	801b298 <__kernel_rem_pio2+0x4d8>
 801b094:	4b18      	ldr	r3, [pc, #96]	; (801b0f8 <__kernel_rem_pio2+0x338>)
 801b096:	461e      	mov	r6, r3
 801b098:	ab70      	add	r3, sp, #448	; 0x1c0
 801b09a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801b09e:	1b2b      	subs	r3, r5, r4
 801b0a0:	f04f 0900 	mov.w	r9, #0
 801b0a4:	f04f 0a00 	mov.w	sl, #0
 801b0a8:	2700      	movs	r7, #0
 801b0aa:	9306      	str	r3, [sp, #24]
 801b0ac:	e0e6      	b.n	801b27c <__kernel_rem_pio2+0x4bc>
 801b0ae:	f04f 0b02 	mov.w	fp, #2
 801b0b2:	e756      	b.n	801af62 <__kernel_rem_pio2+0x1a2>
 801b0b4:	f8d8 3000 	ldr.w	r3, [r8]
 801b0b8:	bb05      	cbnz	r5, 801b0fc <__kernel_rem_pio2+0x33c>
 801b0ba:	b123      	cbz	r3, 801b0c6 <__kernel_rem_pio2+0x306>
 801b0bc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801b0c0:	f8c8 3000 	str.w	r3, [r8]
 801b0c4:	2301      	movs	r3, #1
 801b0c6:	3201      	adds	r2, #1
 801b0c8:	f108 0804 	add.w	r8, r8, #4
 801b0cc:	461d      	mov	r5, r3
 801b0ce:	e74f      	b.n	801af70 <__kernel_rem_pio2+0x1b0>
	...
 801b0dc:	3ff00000 	.word	0x3ff00000
 801b0e0:	0801de98 	.word	0x0801de98
 801b0e4:	40200000 	.word	0x40200000
 801b0e8:	3ff00000 	.word	0x3ff00000
 801b0ec:	3e700000 	.word	0x3e700000
 801b0f0:	41700000 	.word	0x41700000
 801b0f4:	3fe00000 	.word	0x3fe00000
 801b0f8:	0801de58 	.word	0x0801de58
 801b0fc:	1acb      	subs	r3, r1, r3
 801b0fe:	f8c8 3000 	str.w	r3, [r8]
 801b102:	462b      	mov	r3, r5
 801b104:	e7df      	b.n	801b0c6 <__kernel_rem_pio2+0x306>
 801b106:	1e62      	subs	r2, r4, #1
 801b108:	ab0c      	add	r3, sp, #48	; 0x30
 801b10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b10e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b112:	a90c      	add	r1, sp, #48	; 0x30
 801b114:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801b118:	e738      	b.n	801af8c <__kernel_rem_pio2+0x1cc>
 801b11a:	1e62      	subs	r2, r4, #1
 801b11c:	ab0c      	add	r3, sp, #48	; 0x30
 801b11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b122:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b126:	e7f4      	b.n	801b112 <__kernel_rem_pio2+0x352>
 801b128:	a90c      	add	r1, sp, #48	; 0x30
 801b12a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801b12e:	3b01      	subs	r3, #1
 801b130:	430a      	orrs	r2, r1
 801b132:	e788      	b.n	801b046 <__kernel_rem_pio2+0x286>
 801b134:	3301      	adds	r3, #1
 801b136:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801b13a:	2900      	cmp	r1, #0
 801b13c:	d0fa      	beq.n	801b134 <__kernel_rem_pio2+0x374>
 801b13e:	9a08      	ldr	r2, [sp, #32]
 801b140:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801b144:	446a      	add	r2, sp
 801b146:	3a98      	subs	r2, #152	; 0x98
 801b148:	9208      	str	r2, [sp, #32]
 801b14a:	9a06      	ldr	r2, [sp, #24]
 801b14c:	a920      	add	r1, sp, #128	; 0x80
 801b14e:	18a2      	adds	r2, r4, r2
 801b150:	18e3      	adds	r3, r4, r3
 801b152:	f104 0801 	add.w	r8, r4, #1
 801b156:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801b15a:	9302      	str	r3, [sp, #8]
 801b15c:	9b02      	ldr	r3, [sp, #8]
 801b15e:	4543      	cmp	r3, r8
 801b160:	da04      	bge.n	801b16c <__kernel_rem_pio2+0x3ac>
 801b162:	461c      	mov	r4, r3
 801b164:	e6a2      	b.n	801aeac <__kernel_rem_pio2+0xec>
 801b166:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b168:	2301      	movs	r3, #1
 801b16a:	e7e4      	b.n	801b136 <__kernel_rem_pio2+0x376>
 801b16c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b16e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801b172:	f7e5 f9d7 	bl	8000524 <__aeabi_i2d>
 801b176:	e8e5 0102 	strd	r0, r1, [r5], #8
 801b17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b17c:	46ab      	mov	fp, r5
 801b17e:	461c      	mov	r4, r3
 801b180:	f04f 0900 	mov.w	r9, #0
 801b184:	2600      	movs	r6, #0
 801b186:	2700      	movs	r7, #0
 801b188:	9b05      	ldr	r3, [sp, #20]
 801b18a:	4599      	cmp	r9, r3
 801b18c:	dd06      	ble.n	801b19c <__kernel_rem_pio2+0x3dc>
 801b18e:	9b08      	ldr	r3, [sp, #32]
 801b190:	e8e3 6702 	strd	r6, r7, [r3], #8
 801b194:	f108 0801 	add.w	r8, r8, #1
 801b198:	9308      	str	r3, [sp, #32]
 801b19a:	e7df      	b.n	801b15c <__kernel_rem_pio2+0x39c>
 801b19c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801b1a0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801b1a4:	f7e5 fa28 	bl	80005f8 <__aeabi_dmul>
 801b1a8:	4602      	mov	r2, r0
 801b1aa:	460b      	mov	r3, r1
 801b1ac:	4630      	mov	r0, r6
 801b1ae:	4639      	mov	r1, r7
 801b1b0:	f7e5 f86c 	bl	800028c <__adddf3>
 801b1b4:	f109 0901 	add.w	r9, r9, #1
 801b1b8:	4606      	mov	r6, r0
 801b1ba:	460f      	mov	r7, r1
 801b1bc:	e7e4      	b.n	801b188 <__kernel_rem_pio2+0x3c8>
 801b1be:	3d01      	subs	r5, #1
 801b1c0:	e747      	b.n	801b052 <__kernel_rem_pio2+0x292>
 801b1c2:	ec47 6b10 	vmov	d0, r6, r7
 801b1c6:	f1ca 0000 	rsb	r0, sl, #0
 801b1ca:	f7ff fc7d 	bl	801aac8 <scalbn>
 801b1ce:	ec57 6b10 	vmov	r6, r7, d0
 801b1d2:	4ba0      	ldr	r3, [pc, #640]	; (801b454 <__kernel_rem_pio2+0x694>)
 801b1d4:	ee10 0a10 	vmov	r0, s0
 801b1d8:	2200      	movs	r2, #0
 801b1da:	4639      	mov	r1, r7
 801b1dc:	f7e5 fc92 	bl	8000b04 <__aeabi_dcmpge>
 801b1e0:	b1f8      	cbz	r0, 801b222 <__kernel_rem_pio2+0x462>
 801b1e2:	4b9d      	ldr	r3, [pc, #628]	; (801b458 <__kernel_rem_pio2+0x698>)
 801b1e4:	2200      	movs	r2, #0
 801b1e6:	4630      	mov	r0, r6
 801b1e8:	4639      	mov	r1, r7
 801b1ea:	f7e5 fa05 	bl	80005f8 <__aeabi_dmul>
 801b1ee:	f7e5 fcb3 	bl	8000b58 <__aeabi_d2iz>
 801b1f2:	4680      	mov	r8, r0
 801b1f4:	f7e5 f996 	bl	8000524 <__aeabi_i2d>
 801b1f8:	4b96      	ldr	r3, [pc, #600]	; (801b454 <__kernel_rem_pio2+0x694>)
 801b1fa:	2200      	movs	r2, #0
 801b1fc:	f7e5 f9fc 	bl	80005f8 <__aeabi_dmul>
 801b200:	460b      	mov	r3, r1
 801b202:	4602      	mov	r2, r0
 801b204:	4639      	mov	r1, r7
 801b206:	4630      	mov	r0, r6
 801b208:	f7e5 f83e 	bl	8000288 <__aeabi_dsub>
 801b20c:	f7e5 fca4 	bl	8000b58 <__aeabi_d2iz>
 801b210:	1c65      	adds	r5, r4, #1
 801b212:	ab0c      	add	r3, sp, #48	; 0x30
 801b214:	f10a 0a18 	add.w	sl, sl, #24
 801b218:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b21c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801b220:	e71f      	b.n	801b062 <__kernel_rem_pio2+0x2a2>
 801b222:	4630      	mov	r0, r6
 801b224:	4639      	mov	r1, r7
 801b226:	f7e5 fc97 	bl	8000b58 <__aeabi_d2iz>
 801b22a:	ab0c      	add	r3, sp, #48	; 0x30
 801b22c:	4625      	mov	r5, r4
 801b22e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b232:	e716      	b.n	801b062 <__kernel_rem_pio2+0x2a2>
 801b234:	ab0c      	add	r3, sp, #48	; 0x30
 801b236:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b23a:	f7e5 f973 	bl	8000524 <__aeabi_i2d>
 801b23e:	4632      	mov	r2, r6
 801b240:	463b      	mov	r3, r7
 801b242:	f7e5 f9d9 	bl	80005f8 <__aeabi_dmul>
 801b246:	4642      	mov	r2, r8
 801b248:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801b24c:	464b      	mov	r3, r9
 801b24e:	4630      	mov	r0, r6
 801b250:	4639      	mov	r1, r7
 801b252:	f7e5 f9d1 	bl	80005f8 <__aeabi_dmul>
 801b256:	3c01      	subs	r4, #1
 801b258:	4606      	mov	r6, r0
 801b25a:	460f      	mov	r7, r1
 801b25c:	e713      	b.n	801b086 <__kernel_rem_pio2+0x2c6>
 801b25e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801b262:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801b266:	f7e5 f9c7 	bl	80005f8 <__aeabi_dmul>
 801b26a:	4602      	mov	r2, r0
 801b26c:	460b      	mov	r3, r1
 801b26e:	4648      	mov	r0, r9
 801b270:	4651      	mov	r1, sl
 801b272:	f7e5 f80b 	bl	800028c <__adddf3>
 801b276:	3701      	adds	r7, #1
 801b278:	4681      	mov	r9, r0
 801b27a:	468a      	mov	sl, r1
 801b27c:	9b00      	ldr	r3, [sp, #0]
 801b27e:	429f      	cmp	r7, r3
 801b280:	dc02      	bgt.n	801b288 <__kernel_rem_pio2+0x4c8>
 801b282:	9b06      	ldr	r3, [sp, #24]
 801b284:	429f      	cmp	r7, r3
 801b286:	ddea      	ble.n	801b25e <__kernel_rem_pio2+0x49e>
 801b288:	9a06      	ldr	r2, [sp, #24]
 801b28a:	ab48      	add	r3, sp, #288	; 0x120
 801b28c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801b290:	e9c6 9a00 	strd	r9, sl, [r6]
 801b294:	3c01      	subs	r4, #1
 801b296:	e6fa      	b.n	801b08e <__kernel_rem_pio2+0x2ce>
 801b298:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b29a:	2b02      	cmp	r3, #2
 801b29c:	dc0b      	bgt.n	801b2b6 <__kernel_rem_pio2+0x4f6>
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	dc39      	bgt.n	801b316 <__kernel_rem_pio2+0x556>
 801b2a2:	d05d      	beq.n	801b360 <__kernel_rem_pio2+0x5a0>
 801b2a4:	9b02      	ldr	r3, [sp, #8]
 801b2a6:	f003 0007 	and.w	r0, r3, #7
 801b2aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801b2ae:	ecbd 8b02 	vpop	{d8}
 801b2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2b6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b2b8:	2b03      	cmp	r3, #3
 801b2ba:	d1f3      	bne.n	801b2a4 <__kernel_rem_pio2+0x4e4>
 801b2bc:	9b05      	ldr	r3, [sp, #20]
 801b2be:	9500      	str	r5, [sp, #0]
 801b2c0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801b2c4:	eb0d 0403 	add.w	r4, sp, r3
 801b2c8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801b2cc:	46a2      	mov	sl, r4
 801b2ce:	9b00      	ldr	r3, [sp, #0]
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	f1aa 0a08 	sub.w	sl, sl, #8
 801b2d6:	dc69      	bgt.n	801b3ac <__kernel_rem_pio2+0x5ec>
 801b2d8:	46aa      	mov	sl, r5
 801b2da:	f1ba 0f01 	cmp.w	sl, #1
 801b2de:	f1a4 0408 	sub.w	r4, r4, #8
 801b2e2:	f300 8083 	bgt.w	801b3ec <__kernel_rem_pio2+0x62c>
 801b2e6:	9c05      	ldr	r4, [sp, #20]
 801b2e8:	ab48      	add	r3, sp, #288	; 0x120
 801b2ea:	441c      	add	r4, r3
 801b2ec:	2000      	movs	r0, #0
 801b2ee:	2100      	movs	r1, #0
 801b2f0:	2d01      	cmp	r5, #1
 801b2f2:	f300 809a 	bgt.w	801b42a <__kernel_rem_pio2+0x66a>
 801b2f6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801b2fa:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801b2fe:	f1bb 0f00 	cmp.w	fp, #0
 801b302:	f040 8098 	bne.w	801b436 <__kernel_rem_pio2+0x676>
 801b306:	9b04      	ldr	r3, [sp, #16]
 801b308:	e9c3 7800 	strd	r7, r8, [r3]
 801b30c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801b310:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801b314:	e7c6      	b.n	801b2a4 <__kernel_rem_pio2+0x4e4>
 801b316:	9e05      	ldr	r6, [sp, #20]
 801b318:	ab48      	add	r3, sp, #288	; 0x120
 801b31a:	441e      	add	r6, r3
 801b31c:	462c      	mov	r4, r5
 801b31e:	2000      	movs	r0, #0
 801b320:	2100      	movs	r1, #0
 801b322:	2c00      	cmp	r4, #0
 801b324:	da33      	bge.n	801b38e <__kernel_rem_pio2+0x5ce>
 801b326:	f1bb 0f00 	cmp.w	fp, #0
 801b32a:	d036      	beq.n	801b39a <__kernel_rem_pio2+0x5da>
 801b32c:	4602      	mov	r2, r0
 801b32e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b332:	9c04      	ldr	r4, [sp, #16]
 801b334:	e9c4 2300 	strd	r2, r3, [r4]
 801b338:	4602      	mov	r2, r0
 801b33a:	460b      	mov	r3, r1
 801b33c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801b340:	f7e4 ffa2 	bl	8000288 <__aeabi_dsub>
 801b344:	ae4a      	add	r6, sp, #296	; 0x128
 801b346:	2401      	movs	r4, #1
 801b348:	42a5      	cmp	r5, r4
 801b34a:	da29      	bge.n	801b3a0 <__kernel_rem_pio2+0x5e0>
 801b34c:	f1bb 0f00 	cmp.w	fp, #0
 801b350:	d002      	beq.n	801b358 <__kernel_rem_pio2+0x598>
 801b352:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b356:	4619      	mov	r1, r3
 801b358:	9b04      	ldr	r3, [sp, #16]
 801b35a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801b35e:	e7a1      	b.n	801b2a4 <__kernel_rem_pio2+0x4e4>
 801b360:	9c05      	ldr	r4, [sp, #20]
 801b362:	ab48      	add	r3, sp, #288	; 0x120
 801b364:	441c      	add	r4, r3
 801b366:	2000      	movs	r0, #0
 801b368:	2100      	movs	r1, #0
 801b36a:	2d00      	cmp	r5, #0
 801b36c:	da09      	bge.n	801b382 <__kernel_rem_pio2+0x5c2>
 801b36e:	f1bb 0f00 	cmp.w	fp, #0
 801b372:	d002      	beq.n	801b37a <__kernel_rem_pio2+0x5ba>
 801b374:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b378:	4619      	mov	r1, r3
 801b37a:	9b04      	ldr	r3, [sp, #16]
 801b37c:	e9c3 0100 	strd	r0, r1, [r3]
 801b380:	e790      	b.n	801b2a4 <__kernel_rem_pio2+0x4e4>
 801b382:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b386:	f7e4 ff81 	bl	800028c <__adddf3>
 801b38a:	3d01      	subs	r5, #1
 801b38c:	e7ed      	b.n	801b36a <__kernel_rem_pio2+0x5aa>
 801b38e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801b392:	f7e4 ff7b 	bl	800028c <__adddf3>
 801b396:	3c01      	subs	r4, #1
 801b398:	e7c3      	b.n	801b322 <__kernel_rem_pio2+0x562>
 801b39a:	4602      	mov	r2, r0
 801b39c:	460b      	mov	r3, r1
 801b39e:	e7c8      	b.n	801b332 <__kernel_rem_pio2+0x572>
 801b3a0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801b3a4:	f7e4 ff72 	bl	800028c <__adddf3>
 801b3a8:	3401      	adds	r4, #1
 801b3aa:	e7cd      	b.n	801b348 <__kernel_rem_pio2+0x588>
 801b3ac:	e9da 8900 	ldrd	r8, r9, [sl]
 801b3b0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801b3b4:	9b00      	ldr	r3, [sp, #0]
 801b3b6:	3b01      	subs	r3, #1
 801b3b8:	9300      	str	r3, [sp, #0]
 801b3ba:	4632      	mov	r2, r6
 801b3bc:	463b      	mov	r3, r7
 801b3be:	4640      	mov	r0, r8
 801b3c0:	4649      	mov	r1, r9
 801b3c2:	f7e4 ff63 	bl	800028c <__adddf3>
 801b3c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b3ca:	4602      	mov	r2, r0
 801b3cc:	460b      	mov	r3, r1
 801b3ce:	4640      	mov	r0, r8
 801b3d0:	4649      	mov	r1, r9
 801b3d2:	f7e4 ff59 	bl	8000288 <__aeabi_dsub>
 801b3d6:	4632      	mov	r2, r6
 801b3d8:	463b      	mov	r3, r7
 801b3da:	f7e4 ff57 	bl	800028c <__adddf3>
 801b3de:	ed9d 7b06 	vldr	d7, [sp, #24]
 801b3e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b3e6:	ed8a 7b00 	vstr	d7, [sl]
 801b3ea:	e770      	b.n	801b2ce <__kernel_rem_pio2+0x50e>
 801b3ec:	e9d4 8900 	ldrd	r8, r9, [r4]
 801b3f0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801b3f4:	4640      	mov	r0, r8
 801b3f6:	4632      	mov	r2, r6
 801b3f8:	463b      	mov	r3, r7
 801b3fa:	4649      	mov	r1, r9
 801b3fc:	f7e4 ff46 	bl	800028c <__adddf3>
 801b400:	e9cd 0100 	strd	r0, r1, [sp]
 801b404:	4602      	mov	r2, r0
 801b406:	460b      	mov	r3, r1
 801b408:	4640      	mov	r0, r8
 801b40a:	4649      	mov	r1, r9
 801b40c:	f7e4 ff3c 	bl	8000288 <__aeabi_dsub>
 801b410:	4632      	mov	r2, r6
 801b412:	463b      	mov	r3, r7
 801b414:	f7e4 ff3a 	bl	800028c <__adddf3>
 801b418:	ed9d 7b00 	vldr	d7, [sp]
 801b41c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801b420:	ed84 7b00 	vstr	d7, [r4]
 801b424:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b428:	e757      	b.n	801b2da <__kernel_rem_pio2+0x51a>
 801b42a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b42e:	f7e4 ff2d 	bl	800028c <__adddf3>
 801b432:	3d01      	subs	r5, #1
 801b434:	e75c      	b.n	801b2f0 <__kernel_rem_pio2+0x530>
 801b436:	9b04      	ldr	r3, [sp, #16]
 801b438:	9a04      	ldr	r2, [sp, #16]
 801b43a:	601f      	str	r7, [r3, #0]
 801b43c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801b440:	605c      	str	r4, [r3, #4]
 801b442:	609d      	str	r5, [r3, #8]
 801b444:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801b448:	60d3      	str	r3, [r2, #12]
 801b44a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b44e:	6110      	str	r0, [r2, #16]
 801b450:	6153      	str	r3, [r2, #20]
 801b452:	e727      	b.n	801b2a4 <__kernel_rem_pio2+0x4e4>
 801b454:	41700000 	.word	0x41700000
 801b458:	3e700000 	.word	0x3e700000
 801b45c:	00000000 	.word	0x00000000

0801b460 <__ieee754_acos>:
 801b460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b464:	ec55 4b10 	vmov	r4, r5, d0
 801b468:	49b7      	ldr	r1, [pc, #732]	; (801b748 <__ieee754_acos+0x2e8>)
 801b46a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b46e:	428b      	cmp	r3, r1
 801b470:	dd1b      	ble.n	801b4aa <__ieee754_acos+0x4a>
 801b472:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801b476:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b47a:	4323      	orrs	r3, r4
 801b47c:	d106      	bne.n	801b48c <__ieee754_acos+0x2c>
 801b47e:	2d00      	cmp	r5, #0
 801b480:	f300 8211 	bgt.w	801b8a6 <__ieee754_acos+0x446>
 801b484:	ed9f 0b96 	vldr	d0, [pc, #600]	; 801b6e0 <__ieee754_acos+0x280>
 801b488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b48c:	ee10 2a10 	vmov	r2, s0
 801b490:	462b      	mov	r3, r5
 801b492:	ee10 0a10 	vmov	r0, s0
 801b496:	4629      	mov	r1, r5
 801b498:	f7e4 fef6 	bl	8000288 <__aeabi_dsub>
 801b49c:	4602      	mov	r2, r0
 801b49e:	460b      	mov	r3, r1
 801b4a0:	f7e5 f9d4 	bl	800084c <__aeabi_ddiv>
 801b4a4:	ec41 0b10 	vmov	d0, r0, r1
 801b4a8:	e7ee      	b.n	801b488 <__ieee754_acos+0x28>
 801b4aa:	49a8      	ldr	r1, [pc, #672]	; (801b74c <__ieee754_acos+0x2ec>)
 801b4ac:	428b      	cmp	r3, r1
 801b4ae:	f300 8087 	bgt.w	801b5c0 <__ieee754_acos+0x160>
 801b4b2:	4aa7      	ldr	r2, [pc, #668]	; (801b750 <__ieee754_acos+0x2f0>)
 801b4b4:	4293      	cmp	r3, r2
 801b4b6:	f340 81f9 	ble.w	801b8ac <__ieee754_acos+0x44c>
 801b4ba:	ee10 2a10 	vmov	r2, s0
 801b4be:	ee10 0a10 	vmov	r0, s0
 801b4c2:	462b      	mov	r3, r5
 801b4c4:	4629      	mov	r1, r5
 801b4c6:	f7e5 f897 	bl	80005f8 <__aeabi_dmul>
 801b4ca:	a387      	add	r3, pc, #540	; (adr r3, 801b6e8 <__ieee754_acos+0x288>)
 801b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4d0:	4606      	mov	r6, r0
 801b4d2:	460f      	mov	r7, r1
 801b4d4:	f7e5 f890 	bl	80005f8 <__aeabi_dmul>
 801b4d8:	a385      	add	r3, pc, #532	; (adr r3, 801b6f0 <__ieee754_acos+0x290>)
 801b4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4de:	f7e4 fed5 	bl	800028c <__adddf3>
 801b4e2:	4632      	mov	r2, r6
 801b4e4:	463b      	mov	r3, r7
 801b4e6:	f7e5 f887 	bl	80005f8 <__aeabi_dmul>
 801b4ea:	a383      	add	r3, pc, #524	; (adr r3, 801b6f8 <__ieee754_acos+0x298>)
 801b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4f0:	f7e4 feca 	bl	8000288 <__aeabi_dsub>
 801b4f4:	4632      	mov	r2, r6
 801b4f6:	463b      	mov	r3, r7
 801b4f8:	f7e5 f87e 	bl	80005f8 <__aeabi_dmul>
 801b4fc:	a380      	add	r3, pc, #512	; (adr r3, 801b700 <__ieee754_acos+0x2a0>)
 801b4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b502:	f7e4 fec3 	bl	800028c <__adddf3>
 801b506:	4632      	mov	r2, r6
 801b508:	463b      	mov	r3, r7
 801b50a:	f7e5 f875 	bl	80005f8 <__aeabi_dmul>
 801b50e:	a37e      	add	r3, pc, #504	; (adr r3, 801b708 <__ieee754_acos+0x2a8>)
 801b510:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b514:	f7e4 feb8 	bl	8000288 <__aeabi_dsub>
 801b518:	4632      	mov	r2, r6
 801b51a:	463b      	mov	r3, r7
 801b51c:	f7e5 f86c 	bl	80005f8 <__aeabi_dmul>
 801b520:	a37b      	add	r3, pc, #492	; (adr r3, 801b710 <__ieee754_acos+0x2b0>)
 801b522:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b526:	f7e4 feb1 	bl	800028c <__adddf3>
 801b52a:	4632      	mov	r2, r6
 801b52c:	463b      	mov	r3, r7
 801b52e:	f7e5 f863 	bl	80005f8 <__aeabi_dmul>
 801b532:	a379      	add	r3, pc, #484	; (adr r3, 801b718 <__ieee754_acos+0x2b8>)
 801b534:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b538:	4680      	mov	r8, r0
 801b53a:	4689      	mov	r9, r1
 801b53c:	4630      	mov	r0, r6
 801b53e:	4639      	mov	r1, r7
 801b540:	f7e5 f85a 	bl	80005f8 <__aeabi_dmul>
 801b544:	a376      	add	r3, pc, #472	; (adr r3, 801b720 <__ieee754_acos+0x2c0>)
 801b546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b54a:	f7e4 fe9d 	bl	8000288 <__aeabi_dsub>
 801b54e:	4632      	mov	r2, r6
 801b550:	463b      	mov	r3, r7
 801b552:	f7e5 f851 	bl	80005f8 <__aeabi_dmul>
 801b556:	a374      	add	r3, pc, #464	; (adr r3, 801b728 <__ieee754_acos+0x2c8>)
 801b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b55c:	f7e4 fe96 	bl	800028c <__adddf3>
 801b560:	4632      	mov	r2, r6
 801b562:	463b      	mov	r3, r7
 801b564:	f7e5 f848 	bl	80005f8 <__aeabi_dmul>
 801b568:	a371      	add	r3, pc, #452	; (adr r3, 801b730 <__ieee754_acos+0x2d0>)
 801b56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b56e:	f7e4 fe8b 	bl	8000288 <__aeabi_dsub>
 801b572:	4632      	mov	r2, r6
 801b574:	463b      	mov	r3, r7
 801b576:	f7e5 f83f 	bl	80005f8 <__aeabi_dmul>
 801b57a:	4b76      	ldr	r3, [pc, #472]	; (801b754 <__ieee754_acos+0x2f4>)
 801b57c:	2200      	movs	r2, #0
 801b57e:	f7e4 fe85 	bl	800028c <__adddf3>
 801b582:	4602      	mov	r2, r0
 801b584:	460b      	mov	r3, r1
 801b586:	4640      	mov	r0, r8
 801b588:	4649      	mov	r1, r9
 801b58a:	f7e5 f95f 	bl	800084c <__aeabi_ddiv>
 801b58e:	4622      	mov	r2, r4
 801b590:	462b      	mov	r3, r5
 801b592:	f7e5 f831 	bl	80005f8 <__aeabi_dmul>
 801b596:	4602      	mov	r2, r0
 801b598:	460b      	mov	r3, r1
 801b59a:	a167      	add	r1, pc, #412	; (adr r1, 801b738 <__ieee754_acos+0x2d8>)
 801b59c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b5a0:	f7e4 fe72 	bl	8000288 <__aeabi_dsub>
 801b5a4:	4602      	mov	r2, r0
 801b5a6:	460b      	mov	r3, r1
 801b5a8:	4620      	mov	r0, r4
 801b5aa:	4629      	mov	r1, r5
 801b5ac:	f7e4 fe6c 	bl	8000288 <__aeabi_dsub>
 801b5b0:	4602      	mov	r2, r0
 801b5b2:	460b      	mov	r3, r1
 801b5b4:	a162      	add	r1, pc, #392	; (adr r1, 801b740 <__ieee754_acos+0x2e0>)
 801b5b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b5ba:	f7e4 fe65 	bl	8000288 <__aeabi_dsub>
 801b5be:	e771      	b.n	801b4a4 <__ieee754_acos+0x44>
 801b5c0:	2d00      	cmp	r5, #0
 801b5c2:	f280 80cb 	bge.w	801b75c <__ieee754_acos+0x2fc>
 801b5c6:	ee10 0a10 	vmov	r0, s0
 801b5ca:	4b62      	ldr	r3, [pc, #392]	; (801b754 <__ieee754_acos+0x2f4>)
 801b5cc:	2200      	movs	r2, #0
 801b5ce:	4629      	mov	r1, r5
 801b5d0:	f7e4 fe5c 	bl	800028c <__adddf3>
 801b5d4:	4b60      	ldr	r3, [pc, #384]	; (801b758 <__ieee754_acos+0x2f8>)
 801b5d6:	2200      	movs	r2, #0
 801b5d8:	f7e5 f80e 	bl	80005f8 <__aeabi_dmul>
 801b5dc:	a342      	add	r3, pc, #264	; (adr r3, 801b6e8 <__ieee754_acos+0x288>)
 801b5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5e2:	4604      	mov	r4, r0
 801b5e4:	460d      	mov	r5, r1
 801b5e6:	f7e5 f807 	bl	80005f8 <__aeabi_dmul>
 801b5ea:	a341      	add	r3, pc, #260	; (adr r3, 801b6f0 <__ieee754_acos+0x290>)
 801b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5f0:	f7e4 fe4c 	bl	800028c <__adddf3>
 801b5f4:	4622      	mov	r2, r4
 801b5f6:	462b      	mov	r3, r5
 801b5f8:	f7e4 fffe 	bl	80005f8 <__aeabi_dmul>
 801b5fc:	a33e      	add	r3, pc, #248	; (adr r3, 801b6f8 <__ieee754_acos+0x298>)
 801b5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b602:	f7e4 fe41 	bl	8000288 <__aeabi_dsub>
 801b606:	4622      	mov	r2, r4
 801b608:	462b      	mov	r3, r5
 801b60a:	f7e4 fff5 	bl	80005f8 <__aeabi_dmul>
 801b60e:	a33c      	add	r3, pc, #240	; (adr r3, 801b700 <__ieee754_acos+0x2a0>)
 801b610:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b614:	f7e4 fe3a 	bl	800028c <__adddf3>
 801b618:	4622      	mov	r2, r4
 801b61a:	462b      	mov	r3, r5
 801b61c:	f7e4 ffec 	bl	80005f8 <__aeabi_dmul>
 801b620:	a339      	add	r3, pc, #228	; (adr r3, 801b708 <__ieee754_acos+0x2a8>)
 801b622:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b626:	f7e4 fe2f 	bl	8000288 <__aeabi_dsub>
 801b62a:	4622      	mov	r2, r4
 801b62c:	462b      	mov	r3, r5
 801b62e:	f7e4 ffe3 	bl	80005f8 <__aeabi_dmul>
 801b632:	a337      	add	r3, pc, #220	; (adr r3, 801b710 <__ieee754_acos+0x2b0>)
 801b634:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b638:	f7e4 fe28 	bl	800028c <__adddf3>
 801b63c:	4622      	mov	r2, r4
 801b63e:	462b      	mov	r3, r5
 801b640:	f7e4 ffda 	bl	80005f8 <__aeabi_dmul>
 801b644:	ec45 4b10 	vmov	d0, r4, r5
 801b648:	4680      	mov	r8, r0
 801b64a:	4689      	mov	r9, r1
 801b64c:	f7ff fadc 	bl	801ac08 <__ieee754_sqrt>
 801b650:	a331      	add	r3, pc, #196	; (adr r3, 801b718 <__ieee754_acos+0x2b8>)
 801b652:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b656:	4620      	mov	r0, r4
 801b658:	4629      	mov	r1, r5
 801b65a:	ec57 6b10 	vmov	r6, r7, d0
 801b65e:	f7e4 ffcb 	bl	80005f8 <__aeabi_dmul>
 801b662:	a32f      	add	r3, pc, #188	; (adr r3, 801b720 <__ieee754_acos+0x2c0>)
 801b664:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b668:	f7e4 fe0e 	bl	8000288 <__aeabi_dsub>
 801b66c:	4622      	mov	r2, r4
 801b66e:	462b      	mov	r3, r5
 801b670:	f7e4 ffc2 	bl	80005f8 <__aeabi_dmul>
 801b674:	a32c      	add	r3, pc, #176	; (adr r3, 801b728 <__ieee754_acos+0x2c8>)
 801b676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b67a:	f7e4 fe07 	bl	800028c <__adddf3>
 801b67e:	4622      	mov	r2, r4
 801b680:	462b      	mov	r3, r5
 801b682:	f7e4 ffb9 	bl	80005f8 <__aeabi_dmul>
 801b686:	a32a      	add	r3, pc, #168	; (adr r3, 801b730 <__ieee754_acos+0x2d0>)
 801b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b68c:	f7e4 fdfc 	bl	8000288 <__aeabi_dsub>
 801b690:	4622      	mov	r2, r4
 801b692:	462b      	mov	r3, r5
 801b694:	f7e4 ffb0 	bl	80005f8 <__aeabi_dmul>
 801b698:	4b2e      	ldr	r3, [pc, #184]	; (801b754 <__ieee754_acos+0x2f4>)
 801b69a:	2200      	movs	r2, #0
 801b69c:	f7e4 fdf6 	bl	800028c <__adddf3>
 801b6a0:	4602      	mov	r2, r0
 801b6a2:	460b      	mov	r3, r1
 801b6a4:	4640      	mov	r0, r8
 801b6a6:	4649      	mov	r1, r9
 801b6a8:	f7e5 f8d0 	bl	800084c <__aeabi_ddiv>
 801b6ac:	4632      	mov	r2, r6
 801b6ae:	463b      	mov	r3, r7
 801b6b0:	f7e4 ffa2 	bl	80005f8 <__aeabi_dmul>
 801b6b4:	a320      	add	r3, pc, #128	; (adr r3, 801b738 <__ieee754_acos+0x2d8>)
 801b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6ba:	f7e4 fde5 	bl	8000288 <__aeabi_dsub>
 801b6be:	4632      	mov	r2, r6
 801b6c0:	463b      	mov	r3, r7
 801b6c2:	f7e4 fde3 	bl	800028c <__adddf3>
 801b6c6:	4602      	mov	r2, r0
 801b6c8:	460b      	mov	r3, r1
 801b6ca:	f7e4 fddf 	bl	800028c <__adddf3>
 801b6ce:	4602      	mov	r2, r0
 801b6d0:	460b      	mov	r3, r1
 801b6d2:	a103      	add	r1, pc, #12	; (adr r1, 801b6e0 <__ieee754_acos+0x280>)
 801b6d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b6d8:	e76f      	b.n	801b5ba <__ieee754_acos+0x15a>
 801b6da:	bf00      	nop
 801b6dc:	f3af 8000 	nop.w
 801b6e0:	54442d18 	.word	0x54442d18
 801b6e4:	400921fb 	.word	0x400921fb
 801b6e8:	0dfdf709 	.word	0x0dfdf709
 801b6ec:	3f023de1 	.word	0x3f023de1
 801b6f0:	7501b288 	.word	0x7501b288
 801b6f4:	3f49efe0 	.word	0x3f49efe0
 801b6f8:	b5688f3b 	.word	0xb5688f3b
 801b6fc:	3fa48228 	.word	0x3fa48228
 801b700:	0e884455 	.word	0x0e884455
 801b704:	3fc9c155 	.word	0x3fc9c155
 801b708:	03eb6f7d 	.word	0x03eb6f7d
 801b70c:	3fd4d612 	.word	0x3fd4d612
 801b710:	55555555 	.word	0x55555555
 801b714:	3fc55555 	.word	0x3fc55555
 801b718:	b12e9282 	.word	0xb12e9282
 801b71c:	3fb3b8c5 	.word	0x3fb3b8c5
 801b720:	1b8d0159 	.word	0x1b8d0159
 801b724:	3fe6066c 	.word	0x3fe6066c
 801b728:	9c598ac8 	.word	0x9c598ac8
 801b72c:	40002ae5 	.word	0x40002ae5
 801b730:	1c8a2d4b 	.word	0x1c8a2d4b
 801b734:	40033a27 	.word	0x40033a27
 801b738:	33145c07 	.word	0x33145c07
 801b73c:	3c91a626 	.word	0x3c91a626
 801b740:	54442d18 	.word	0x54442d18
 801b744:	3ff921fb 	.word	0x3ff921fb
 801b748:	3fefffff 	.word	0x3fefffff
 801b74c:	3fdfffff 	.word	0x3fdfffff
 801b750:	3c600000 	.word	0x3c600000
 801b754:	3ff00000 	.word	0x3ff00000
 801b758:	3fe00000 	.word	0x3fe00000
 801b75c:	ee10 2a10 	vmov	r2, s0
 801b760:	462b      	mov	r3, r5
 801b762:	496d      	ldr	r1, [pc, #436]	; (801b918 <__ieee754_acos+0x4b8>)
 801b764:	2000      	movs	r0, #0
 801b766:	f7e4 fd8f 	bl	8000288 <__aeabi_dsub>
 801b76a:	4b6c      	ldr	r3, [pc, #432]	; (801b91c <__ieee754_acos+0x4bc>)
 801b76c:	2200      	movs	r2, #0
 801b76e:	f7e4 ff43 	bl	80005f8 <__aeabi_dmul>
 801b772:	4604      	mov	r4, r0
 801b774:	460d      	mov	r5, r1
 801b776:	ec45 4b10 	vmov	d0, r4, r5
 801b77a:	f7ff fa45 	bl	801ac08 <__ieee754_sqrt>
 801b77e:	a34e      	add	r3, pc, #312	; (adr r3, 801b8b8 <__ieee754_acos+0x458>)
 801b780:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b784:	4620      	mov	r0, r4
 801b786:	4629      	mov	r1, r5
 801b788:	ec59 8b10 	vmov	r8, r9, d0
 801b78c:	f7e4 ff34 	bl	80005f8 <__aeabi_dmul>
 801b790:	a34b      	add	r3, pc, #300	; (adr r3, 801b8c0 <__ieee754_acos+0x460>)
 801b792:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b796:	f7e4 fd79 	bl	800028c <__adddf3>
 801b79a:	4622      	mov	r2, r4
 801b79c:	462b      	mov	r3, r5
 801b79e:	f7e4 ff2b 	bl	80005f8 <__aeabi_dmul>
 801b7a2:	a349      	add	r3, pc, #292	; (adr r3, 801b8c8 <__ieee754_acos+0x468>)
 801b7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7a8:	f7e4 fd6e 	bl	8000288 <__aeabi_dsub>
 801b7ac:	4622      	mov	r2, r4
 801b7ae:	462b      	mov	r3, r5
 801b7b0:	f7e4 ff22 	bl	80005f8 <__aeabi_dmul>
 801b7b4:	a346      	add	r3, pc, #280	; (adr r3, 801b8d0 <__ieee754_acos+0x470>)
 801b7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7ba:	f7e4 fd67 	bl	800028c <__adddf3>
 801b7be:	4622      	mov	r2, r4
 801b7c0:	462b      	mov	r3, r5
 801b7c2:	f7e4 ff19 	bl	80005f8 <__aeabi_dmul>
 801b7c6:	a344      	add	r3, pc, #272	; (adr r3, 801b8d8 <__ieee754_acos+0x478>)
 801b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7cc:	f7e4 fd5c 	bl	8000288 <__aeabi_dsub>
 801b7d0:	4622      	mov	r2, r4
 801b7d2:	462b      	mov	r3, r5
 801b7d4:	f7e4 ff10 	bl	80005f8 <__aeabi_dmul>
 801b7d8:	a341      	add	r3, pc, #260	; (adr r3, 801b8e0 <__ieee754_acos+0x480>)
 801b7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7de:	f7e4 fd55 	bl	800028c <__adddf3>
 801b7e2:	4622      	mov	r2, r4
 801b7e4:	462b      	mov	r3, r5
 801b7e6:	f7e4 ff07 	bl	80005f8 <__aeabi_dmul>
 801b7ea:	a33f      	add	r3, pc, #252	; (adr r3, 801b8e8 <__ieee754_acos+0x488>)
 801b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7f0:	4682      	mov	sl, r0
 801b7f2:	468b      	mov	fp, r1
 801b7f4:	4620      	mov	r0, r4
 801b7f6:	4629      	mov	r1, r5
 801b7f8:	f7e4 fefe 	bl	80005f8 <__aeabi_dmul>
 801b7fc:	a33c      	add	r3, pc, #240	; (adr r3, 801b8f0 <__ieee754_acos+0x490>)
 801b7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b802:	f7e4 fd41 	bl	8000288 <__aeabi_dsub>
 801b806:	4622      	mov	r2, r4
 801b808:	462b      	mov	r3, r5
 801b80a:	f7e4 fef5 	bl	80005f8 <__aeabi_dmul>
 801b80e:	a33a      	add	r3, pc, #232	; (adr r3, 801b8f8 <__ieee754_acos+0x498>)
 801b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b814:	f7e4 fd3a 	bl	800028c <__adddf3>
 801b818:	4622      	mov	r2, r4
 801b81a:	462b      	mov	r3, r5
 801b81c:	f7e4 feec 	bl	80005f8 <__aeabi_dmul>
 801b820:	a337      	add	r3, pc, #220	; (adr r3, 801b900 <__ieee754_acos+0x4a0>)
 801b822:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b826:	f7e4 fd2f 	bl	8000288 <__aeabi_dsub>
 801b82a:	4622      	mov	r2, r4
 801b82c:	462b      	mov	r3, r5
 801b82e:	f7e4 fee3 	bl	80005f8 <__aeabi_dmul>
 801b832:	4b39      	ldr	r3, [pc, #228]	; (801b918 <__ieee754_acos+0x4b8>)
 801b834:	2200      	movs	r2, #0
 801b836:	f7e4 fd29 	bl	800028c <__adddf3>
 801b83a:	4602      	mov	r2, r0
 801b83c:	460b      	mov	r3, r1
 801b83e:	4650      	mov	r0, sl
 801b840:	4659      	mov	r1, fp
 801b842:	f7e5 f803 	bl	800084c <__aeabi_ddiv>
 801b846:	4642      	mov	r2, r8
 801b848:	464b      	mov	r3, r9
 801b84a:	f7e4 fed5 	bl	80005f8 <__aeabi_dmul>
 801b84e:	2600      	movs	r6, #0
 801b850:	4682      	mov	sl, r0
 801b852:	468b      	mov	fp, r1
 801b854:	4632      	mov	r2, r6
 801b856:	464b      	mov	r3, r9
 801b858:	4630      	mov	r0, r6
 801b85a:	4649      	mov	r1, r9
 801b85c:	f7e4 fecc 	bl	80005f8 <__aeabi_dmul>
 801b860:	4602      	mov	r2, r0
 801b862:	460b      	mov	r3, r1
 801b864:	4620      	mov	r0, r4
 801b866:	4629      	mov	r1, r5
 801b868:	f7e4 fd0e 	bl	8000288 <__aeabi_dsub>
 801b86c:	4632      	mov	r2, r6
 801b86e:	4604      	mov	r4, r0
 801b870:	460d      	mov	r5, r1
 801b872:	464b      	mov	r3, r9
 801b874:	4640      	mov	r0, r8
 801b876:	4649      	mov	r1, r9
 801b878:	f7e4 fd08 	bl	800028c <__adddf3>
 801b87c:	4602      	mov	r2, r0
 801b87e:	460b      	mov	r3, r1
 801b880:	4620      	mov	r0, r4
 801b882:	4629      	mov	r1, r5
 801b884:	f7e4 ffe2 	bl	800084c <__aeabi_ddiv>
 801b888:	4602      	mov	r2, r0
 801b88a:	460b      	mov	r3, r1
 801b88c:	4650      	mov	r0, sl
 801b88e:	4659      	mov	r1, fp
 801b890:	f7e4 fcfc 	bl	800028c <__adddf3>
 801b894:	4632      	mov	r2, r6
 801b896:	464b      	mov	r3, r9
 801b898:	f7e4 fcf8 	bl	800028c <__adddf3>
 801b89c:	4602      	mov	r2, r0
 801b89e:	460b      	mov	r3, r1
 801b8a0:	f7e4 fcf4 	bl	800028c <__adddf3>
 801b8a4:	e5fe      	b.n	801b4a4 <__ieee754_acos+0x44>
 801b8a6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801b908 <__ieee754_acos+0x4a8>
 801b8aa:	e5ed      	b.n	801b488 <__ieee754_acos+0x28>
 801b8ac:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801b910 <__ieee754_acos+0x4b0>
 801b8b0:	e5ea      	b.n	801b488 <__ieee754_acos+0x28>
 801b8b2:	bf00      	nop
 801b8b4:	f3af 8000 	nop.w
 801b8b8:	0dfdf709 	.word	0x0dfdf709
 801b8bc:	3f023de1 	.word	0x3f023de1
 801b8c0:	7501b288 	.word	0x7501b288
 801b8c4:	3f49efe0 	.word	0x3f49efe0
 801b8c8:	b5688f3b 	.word	0xb5688f3b
 801b8cc:	3fa48228 	.word	0x3fa48228
 801b8d0:	0e884455 	.word	0x0e884455
 801b8d4:	3fc9c155 	.word	0x3fc9c155
 801b8d8:	03eb6f7d 	.word	0x03eb6f7d
 801b8dc:	3fd4d612 	.word	0x3fd4d612
 801b8e0:	55555555 	.word	0x55555555
 801b8e4:	3fc55555 	.word	0x3fc55555
 801b8e8:	b12e9282 	.word	0xb12e9282
 801b8ec:	3fb3b8c5 	.word	0x3fb3b8c5
 801b8f0:	1b8d0159 	.word	0x1b8d0159
 801b8f4:	3fe6066c 	.word	0x3fe6066c
 801b8f8:	9c598ac8 	.word	0x9c598ac8
 801b8fc:	40002ae5 	.word	0x40002ae5
 801b900:	1c8a2d4b 	.word	0x1c8a2d4b
 801b904:	40033a27 	.word	0x40033a27
	...
 801b910:	54442d18 	.word	0x54442d18
 801b914:	3ff921fb 	.word	0x3ff921fb
 801b918:	3ff00000 	.word	0x3ff00000
 801b91c:	3fe00000 	.word	0x3fe00000

0801b920 <_init>:
 801b920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b922:	bf00      	nop
 801b924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b926:	bc08      	pop	{r3}
 801b928:	469e      	mov	lr, r3
 801b92a:	4770      	bx	lr

0801b92c <_fini>:
 801b92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b92e:	bf00      	nop
 801b930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b932:	bc08      	pop	{r3}
 801b934:	469e      	mov	lr, r3
 801b936:	4770      	bx	lr
