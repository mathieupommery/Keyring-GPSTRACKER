
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c030  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b58  0800c1c0  0800c1c0  0001c1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd18  0800dd18  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd18  0800dd18  0001dd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd20  0800dd20  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd20  0800dd20  0001dd20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd24  0800dd24  0001dd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800dd28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a50  200001e8  0800df0c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c38  0800df0c  00020c38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001515d  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000338d  00000000  00000000  000353b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  00038748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d63  00000000  00000000  000398b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022cc4  00000000  00000000  0003a61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000173ff  00000000  00000000  0005d2df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8e5a  00000000  00000000  000746de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e1c  00000000  00000000  0013d538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00143354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c1a8 	.word	0x0800c1a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800c1a8 	.word	0x0800c1a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <QMC_init>:
#include "math.h"
#include "ssd1306.h"

//###############################################################################################################
uint8_t QMC_init(QMC_t *qmc,I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	71fb      	strb	r3, [r7, #7]
	uint8_t array[2];
	qmc->i2c=i2c;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	601a      	str	r2, [r3, #0]
	qmc->Control_Register=0x11;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2211      	movs	r2, #17
 8001008:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 800100a:	2301      	movs	r3, #1
 800100c:	753b      	strb	r3, [r7, #20]
	array[1]=qmc->Control_Register;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	791b      	ldrb	r3, [r3, #4]
 8001012:	757b      	strb	r3, [r7, #21]

	if(Output_Data_Rate==200)qmc->Control_Register|=0b00001100;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2bc8      	cmp	r3, #200	; 0xc8
 8001018:	d107      	bne.n	800102a <QMC_init+0x3a>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	791b      	ldrb	r3, [r3, #4]
 800101e:	f043 030c 	orr.w	r3, r3, #12
 8001022:	b2da      	uxtb	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	711a      	strb	r2, [r3, #4]
 8001028:	e024      	b.n	8001074 <QMC_init+0x84>
	else if(Output_Data_Rate==100)qmc->Control_Register|=0b00001000;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b64      	cmp	r3, #100	; 0x64
 800102e:	d107      	bne.n	8001040 <QMC_init+0x50>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	791b      	ldrb	r3, [r3, #4]
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	b2da      	uxtb	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	711a      	strb	r2, [r3, #4]
 800103e:	e019      	b.n	8001074 <QMC_init+0x84>
	else if(Output_Data_Rate==50)qmc->Control_Register|=0b00000100;
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b32      	cmp	r3, #50	; 0x32
 8001044:	d107      	bne.n	8001056 <QMC_init+0x66>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	b2da      	uxtb	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	711a      	strb	r2, [r3, #4]
 8001054:	e00e      	b.n	8001074 <QMC_init+0x84>
	else if(Output_Data_Rate==10)qmc->Control_Register|=0b00000000;
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b0a      	cmp	r3, #10
 800105a:	d104      	bne.n	8001066 <QMC_init+0x76>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	791a      	ldrb	r2, [r3, #4]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	711a      	strb	r2, [r3, #4]
 8001064:	e006      	b.n	8001074 <QMC_init+0x84>
	else qmc->Control_Register|=0b00001100;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	791b      	ldrb	r3, [r3, #4]
 800106a:	f043 030c 	orr.w	r3, r3, #12
 800106e:	b2da      	uxtb	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	2301      	movs	r3, #1
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	220b      	movs	r2, #11
 800108a:	211a      	movs	r1, #26
 800108c:	f003 f9e8 	bl	8004460 <HAL_I2C_Mem_Write>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <QMC_init+0xaa>
 8001096:	2301      	movs	r3, #1
 8001098:	e014      	b.n	80010c4 <QMC_init+0xd4>
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2364      	movs	r3, #100	; 0x64
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	3301      	adds	r3, #1
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	2209      	movs	r2, #9
 80010b2:	211a      	movs	r1, #26
 80010b4:	f003 f9d4 	bl	8004460 <HAL_I2C_Mem_Write>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <QMC_init+0xd2>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <QMC_init+0xd4>

	return 0;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010dc:	d104      	bne.n	80010e8 <HAL_GPIO_EXTI_Callback+0x1c>
//		ssd1306_SetCursor(33, 44);
//		ssd1306_WriteString("btna", Font_6x8, White);
//		ssd1306_UpdateScreen();
		BTN_A++;
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_GPIO_EXTI_Callback+0x3c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_GPIO_EXTI_Callback+0x3c>)
 80010e6:	6013      	str	r3, [r2, #0]


	}
	if(GPIO_Pin==GPIO_PIN_15){
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010ee:	d104      	bne.n	80010fa <HAL_GPIO_EXTI_Callback+0x2e>
		//ssd1306_SetCursor(33, 44);
		//ssd1306_WriteString("btnb", Font_6x8, White);
		//ssd1306_UpdateScreen();
		BTN_B++;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_GPIO_EXTI_Callback+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <HAL_GPIO_EXTI_Callback+0x40>)
 80010f8:	6013      	str	r3, [r2, #0]

	}
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000650 	.word	0x20000650
 800110c:	20000654 	.word	0x20000654

08001110 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <HAL_UART_RxCpltCallback+0xc4>)
 800111a:	881a      	ldrh	r2, [r3, #0]
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800111e:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001128:	d922      	bls.n	8001170 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001132:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <HAL_UART_RxCpltCallback+0xcc>)
 800113c:	4413      	add	r3, r2
 800113e:	89fa      	ldrh	r2, [r7, #14]
 8001140:	4927      	ldr	r1, [pc, #156]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001142:	4618      	mov	r0, r3
 8001144:	f008 fb61 	bl	800980a <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800114a:	2200      	movs	r2, #0
 800114c:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 800114e:	89fb      	ldrh	r3, [r7, #14]
 8001150:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001152:	1899      	adds	r1, r3, r2
 8001154:	89fb      	ldrh	r3, [r7, #14]
 8001156:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800115a:	461a      	mov	r2, r3
 800115c:	481f      	ldr	r0, [pc, #124]	; (80011dc <HAL_UART_RxCpltCallback+0xcc>)
 800115e:	f008 fb54 	bl	800980a <memcpy>
				newPos = (64-datatocopy);  // update the position
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_UART_RxCpltCallback+0xc4>)
 800116c:	801a      	strh	r2, [r3, #0]
 800116e:	e01b      	b.n	80011a8 <HAL_UART_RxCpltCallback+0x98>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_UART_RxCpltCallback+0xcc>)
 8001178:	4413      	add	r3, r2
 800117a:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 800117c:	4614      	mov	r4, r2
 800117e:	469c      	mov	ip, r3
 8001180:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8001184:	4665      	mov	r5, ip
 8001186:	4626      	mov	r6, r4
 8001188:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800118a:	6028      	str	r0, [r5, #0]
 800118c:	6069      	str	r1, [r5, #4]
 800118e:	60aa      	str	r2, [r5, #8]
 8001190:	60eb      	str	r3, [r5, #12]
 8001192:	3410      	adds	r4, #16
 8001194:	f10c 0c10 	add.w	ip, ip, #16
 8001198:	4574      	cmp	r4, lr
 800119a:	d1f3      	bne.n	8001184 <HAL_UART_RxCpltCallback+0x74>
				newPos = 64+oldPos; //update buffer position
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	3340      	adds	r3, #64	; 0x40
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_UART_RxCpltCallback+0xc4>)
 80011a6:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 80011a8:	2240      	movs	r2, #64	; 0x40
 80011aa:	490d      	ldr	r1, [pc, #52]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <HAL_UART_RxCpltCallback+0xd4>)
 80011ae:	f004 ffdb 	bl	8006168 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_UART_RxCpltCallback+0xd8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_UART_RxCpltCallback+0xd8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0204 	bic.w	r2, r2, #4
 80011c0:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 80011c2:	2240      	movs	r2, #64	; 0x40
 80011c4:	4906      	ldr	r1, [pc, #24]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 80011c6:	4807      	ldr	r0, [pc, #28]	; (80011e4 <HAL_UART_RxCpltCallback+0xd4>)
 80011c8:	f004 ffce 	bl	8006168 <HAL_UART_Receive_DMA>
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d4:	200003ca 	.word	0x200003ca
 80011d8:	200003c8 	.word	0x200003c8
 80011dc:	2000040c 	.word	0x2000040c
 80011e0:	200003cc 	.word	0x200003cc
 80011e4:	200002f8 	.word	0x200002f8
 80011e8:	20000380 	.word	0x20000380

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f2:	f002 f98a 	bl	800350a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f6:	f000 f84d 	bl	8001294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fa:	f000 f9c9 	bl	8001590 <MX_GPIO_Init>
  MX_DMA_Init();
 80011fe:	f000 f9a9 	bl	8001554 <MX_DMA_Init>
  MX_I2C1_Init();
 8001202:	f000 f8cd 	bl	80013a0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001206:	f000 f90b 	bl	8001420 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 800120a:	f000 f977 	bl	80014fc <MX_LPUART1_UART_Init>
  MX_LPTIM1_Init();
 800120e:	f000 f947 	bl	80014a0 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 8001212:	f000 f893 	bl	800133c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

	ssd1306_Init();
 8001216:	f000 fe37 	bl	8001e88 <ssd1306_Init>
	HAL_Delay(100);
 800121a:	2064      	movs	r0, #100	; 0x64
 800121c:	f002 f9ea 	bl	80035f4 <HAL_Delay>
	ssd1306_Fill(Black);
 8001220:	2000      	movs	r0, #0
 8001222:	f000 fe9b 	bl	8001f5c <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);//start screen
 8001226:	2301      	movs	r3, #1
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	2340      	movs	r3, #64	; 0x40
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2340      	movs	r3, #64	; 0x40
 8001230:	4a13      	ldr	r2, [pc, #76]	; (8001280 <main+0x94>)
 8001232:	2120      	movs	r1, #32
 8001234:	2020      	movs	r0, #32
 8001236:	f000 ffeb 	bl	8002210 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();//demarrage des différents périphériques en i2c, qui ont besoin detre configuré
 800123a:	f000 fea7 	bl	8001f8c <ssd1306_UpdateScreen>
	QMC_init(&compasdata,&hi2c1,10);
 800123e:	220a      	movs	r2, #10
 8001240:	4910      	ldr	r1, [pc, #64]	; (8001284 <main+0x98>)
 8001242:	4811      	ldr	r0, [pc, #68]	; (8001288 <main+0x9c>)
 8001244:	f7ff fed4 	bl	8000ff0 <QMC_init>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);//pour l'instant le gps est toujours alimenté
 8001248:	2201      	movs	r2, #1
 800124a:	2102      	movs	r1, #2
 800124c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001250:	f003 f83a 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8001254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001258:	f002 f9cc 	bl	80035f4 <HAL_Delay>


	HAL_UART_Abort(&hlpuart1);
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <main+0xa0>)
 800125e:	f004 ffcf 	bl	8006200 <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//lancement du dma pour le gps
 8001262:	2240      	movs	r2, #64	; 0x40
 8001264:	490a      	ldr	r1, [pc, #40]	; (8001290 <main+0xa4>)
 8001266:	4809      	ldr	r0, [pc, #36]	; (800128c <main+0xa0>)
 8001268:	f004 ff7e 	bl	8006168 <HAL_UART_Receive_DMA>

	ssd1306_Fill(Black);
 800126c:	2000      	movs	r0, #0
 800126e:	f000 fe75 	bl	8001f5c <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001272:	f000 fe8b 	bl	8001f8c <ssd1306_UpdateScreen>

    /* USER CODE BEGIN 3 */



		statemachine();//on execute la machine à etat
 8001276:	f001 f857 	bl	8002328 <statemachine>
		ssd1306_UpdateScreen();//la machine a état ce sera occupe de mettre les choses necessaire dans le buffer du processeur necessaire a envoyer a l'ecran, il reste plus qu'a l'envoyer en i2c
 800127a:	f000 fe87 	bl	8001f8c <ssd1306_UpdateScreen>
		statemachine();//on execute la machine à etat
 800127e:	e7fa      	b.n	8001276 <main+0x8a>
 8001280:	0800c300 	.word	0x0800c300
 8001284:	20000218 	.word	0x20000218
 8001288:	20000ac8 	.word	0x20000ac8
 800128c:	200002f8 	.word	0x200002f8
 8001290:	200003cc 	.word	0x200003cc

08001294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b096      	sub	sp, #88	; 0x58
 8001298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	2244      	movs	r2, #68	; 0x44
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f008 f995 	bl	80095d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a8:	463b      	mov	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012ba:	f003 fd91 	bl	8004de0 <HAL_PWREx_ControlVoltageScaling>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012c4:	f000 f9dc 	bl	8001680 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012c8:	2310      	movs	r3, #16
 80012ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012cc:	2301      	movs	r3, #1
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012d4:	2360      	movs	r3, #96	; 0x60
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d8:	2302      	movs	r3, #2
 80012da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012dc:	2301      	movs	r3, #1
 80012de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80012e4:	2328      	movs	r3, #40	; 0x28
 80012e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012e8:	2307      	movs	r3, #7
 80012ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012f0:	2302      	movs	r3, #2
 80012f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 fdc7 	bl	8004e8c <HAL_RCC_OscConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001304:	f000 f9bc 	bl	8001680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001308:	230f      	movs	r3, #15
 800130a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130c:	2303      	movs	r3, #3
 800130e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001314:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001318:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	2104      	movs	r1, #4
 8001322:	4618      	mov	r0, r3
 8001324:	f004 f9c6 	bl	80056b4 <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800132e:	f000 f9a7 	bl	8001680 <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3758      	adds	r7, #88	; 0x58
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2224      	movs	r2, #36	; 0x24
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f008 f942 	bl	80095d2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_DAC1_Init+0x5c>)
 8001350:	4a12      	ldr	r2, [pc, #72]	; (800139c <MX_DAC1_Init+0x60>)
 8001352:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001354:	4810      	ldr	r0, [pc, #64]	; (8001398 <MX_DAC1_Init+0x5c>)
 8001356:	f002 fa82 	bl	800385e <HAL_DAC_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001360:	f000 f98e 	bl	8001680 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2200      	movs	r2, #0
 800137c:	4619      	mov	r1, r3
 800137e:	4806      	ldr	r0, [pc, #24]	; (8001398 <MX_DAC1_Init+0x5c>)
 8001380:	f002 fa8f 	bl	80038a2 <HAL_DAC_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800138a:	f000 f979 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	; 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000204 	.word	0x20000204
 800139c:	40007400 	.word	0x40007400

080013a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_I2C1_Init+0x74>)
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <MX_I2C1_Init+0x78>)
 80013a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_I2C1_Init+0x74>)
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <MX_I2C1_Init+0x7c>)
 80013ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_I2C1_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_I2C1_Init+0x74>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <MX_I2C1_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_I2C1_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_I2C1_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_I2C1_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_I2C1_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013da:	480e      	ldr	r0, [pc, #56]	; (8001414 <MX_I2C1_Init+0x74>)
 80013dc:	f002 ffa4 	bl	8004328 <HAL_I2C_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013e6:	f000 f94b 	bl	8001680 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ea:	2100      	movs	r1, #0
 80013ec:	4809      	ldr	r0, [pc, #36]	; (8001414 <MX_I2C1_Init+0x74>)
 80013ee:	f003 fbaf 	bl	8004b50 <HAL_I2CEx_ConfigAnalogFilter>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013f8:	f000 f942 	bl	8001680 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013fc:	2100      	movs	r1, #0
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_I2C1_Init+0x74>)
 8001400:	f003 fbf1 	bl	8004be6 <HAL_I2CEx_ConfigDigitalFilter>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800140a:	f000 f939 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000218 	.word	0x20000218
 8001418:	40005400 	.word	0x40005400
 800141c:	00202538 	.word	0x00202538

08001420 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <MX_I2C3_Init+0x74>)
 8001426:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <MX_I2C3_Init+0x78>)
 8001428:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00202538;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_I2C3_Init+0x74>)
 800142c:	4a1b      	ldr	r2, [pc, #108]	; (800149c <MX_I2C3_Init+0x7c>)
 800142e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_I2C3_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_I2C3_Init+0x74>)
 8001438:	2201      	movs	r2, #1
 800143a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_I2C3_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_I2C3_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_I2C3_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_I2C3_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_I2C3_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800145a:	480e      	ldr	r0, [pc, #56]	; (8001494 <MX_I2C3_Init+0x74>)
 800145c:	f002 ff64 	bl	8004328 <HAL_I2C_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001466:	f000 f90b 	bl	8001680 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800146a:	2100      	movs	r1, #0
 800146c:	4809      	ldr	r0, [pc, #36]	; (8001494 <MX_I2C3_Init+0x74>)
 800146e:	f003 fb6f 	bl	8004b50 <HAL_I2CEx_ConfigAnalogFilter>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001478:	f000 f902 	bl	8001680 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800147c:	2100      	movs	r1, #0
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_I2C3_Init+0x74>)
 8001480:	f003 fbb1 	bl	8004be6 <HAL_I2CEx_ConfigDigitalFilter>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800148a:	f000 f8f9 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000026c 	.word	0x2000026c
 8001498:	40005c00 	.word	0x40005c00
 800149c:	00202538 	.word	0x00202538

080014a0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014a6:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <MX_LPTIM1_Init+0x58>)
 80014a8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014b2:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80014b6:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014be:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014da:	2200      	movs	r2, #0
 80014dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014e0:	f003 fbce 	bl	8004c80 <HAL_LPTIM_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 80014ea:	f000 f8c9 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200002c0 	.word	0x200002c0
 80014f8:	40007c00 	.word	0x40007c00

080014fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <MX_LPUART1_UART_Init+0x54>)
 8001504:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001508:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800150c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001522:	220c      	movs	r2, #12
 8001524:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 800153a:	f004 fdc7 	bl	80060cc <HAL_UART_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001544:	f000 f89c 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200002f8 	.word	0x200002f8
 8001550:	40008000 	.word	0x40008000

08001554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_DMA_Init+0x38>)
 800155c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <MX_DMA_Init+0x38>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6493      	str	r3, [r2, #72]	; 0x48
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_DMA_Init+0x38>)
 8001568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2045      	movs	r0, #69	; 0x45
 8001578:	f002 f93b 	bl	80037f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 800157c:	2045      	movs	r0, #69	; 0x45
 800157e:	f002 f954 	bl	800382a <HAL_NVIC_EnableIRQ>

}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	4b33      	ldr	r3, [pc, #204]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a32      	ldr	r2, [pc, #200]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b30      	ldr	r3, [pc, #192]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a2c      	ldr	r2, [pc, #176]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	4b27      	ldr	r3, [pc, #156]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a26      	ldr	r2, [pc, #152]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b24      	ldr	r3, [pc, #144]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2102      	movs	r1, #2
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f6:	f002 fe67 	bl	80042c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2101      	movs	r1, #1
 80015fe:	481e      	ldr	r0, [pc, #120]	; (8001678 <MX_GPIO_Init+0xe8>)
 8001600:	f002 fe62 	bl	80042c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001604:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800160e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001610:	2302      	movs	r3, #2
 8001612:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	4619      	mov	r1, r3
 800161a:	4818      	ldr	r0, [pc, #96]	; (800167c <MX_GPIO_Init+0xec>)
 800161c:	f002 fcea 	bl	8003ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001620:	2302      	movs	r3, #2
 8001622:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	4619      	mov	r1, r3
 8001636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163a:	f002 fcdb 	bl	8003ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800163e:	2301      	movs	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	4619      	mov	r1, r3
 8001654:	4808      	ldr	r0, [pc, #32]	; (8001678 <MX_GPIO_Init+0xe8>)
 8001656:	f002 fccd 	bl	8003ff4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2028      	movs	r0, #40	; 0x28
 8001660:	f002 f8c7 	bl	80037f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001664:	2028      	movs	r0, #40	; 0x28
 8001666:	f002 f8e0 	bl	800382a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800166a:	bf00      	nop
 800166c:	3720      	adds	r7, #32
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	48000400 	.word	0x48000400
 800167c:	48000800 	.word	0x48000800

08001680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
}
 8001686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001688:	e7fe      	b.n	8001688 <Error_Handler+0x8>

0800168a <gps_checksum>:
//code globalement recuperer, nous nous en somme inspiré afin de recuperer la vitesse sur la trame gnrmc

char *data[15];

int gps_checksum(char *nmea_data)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe fdec 	bl	8000270 <strlen>
 8001698:	4603      	mov	r3, r0
 800169a:	2b04      	cmp	r3, #4
 800169c:	d801      	bhi.n	80016a2 <gps_checksum+0x18>
 800169e:	2300      	movs	r3, #0
 80016a0:	e038      	b.n	8001714 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7fe fde4 	bl	8000270 <strlen>
 80016a8:	4603      	mov	r3, r0
 80016aa:	3b04      	subs	r3, #4
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4413      	add	r3, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7fe fddb 	bl	8000270 <strlen>
 80016ba:	4603      	mov	r3, r0
 80016bc:	3b03      	subs	r3, #3
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	e00a      	b.n	80016e6 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	4053      	eors	r3, r2
 80016de:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	3301      	adds	r3, #1
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7fe fdc2 	bl	8000270 <strlen>
 80016ec:	4603      	mov	r3, r0
 80016ee:	1f5a      	subs	r2, r3, #5
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d8ec      	bhi.n	80016d0 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	2210      	movs	r2, #16
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f006 ff8e 	bl	8008620 <strtol>
 8001704:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	429a      	cmp	r2, r3
 800170c:	d101      	bne.n	8001712 <gps_checksum+0x88>
        return 1;
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8001712:	2300      	movs	r3, #0
    }
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	b0b7      	sub	sp, #220	; 0xdc
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 800172c:	f107 0320 	add.w	r3, r7, #32
 8001730:	2264      	movs	r2, #100	; 0x64
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f007 ff4c 	bl	80095d2 <memset>
    char *marker = strtok(inputString, ",");
 800173a:	49c2      	ldr	r1, [pc, #776]	; (8001a44 <nmea_GPGGA+0x328>)
 800173c:	6838      	ldr	r0, [r7, #0]
 800173e:	f007 ff63 	bl	8009608 <strtok>
 8001742:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001746:	e027      	b.n	8001798 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001748:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800174c:	f7fe fd90 	bl	8000270 <strlen>
 8001750:	4603      	mov	r3, r0
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001758:	1c63      	adds	r3, r4, #1
 800175a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800175e:	4610      	mov	r0, r2
 8001760:	f005 ffa4 	bl	80076ac <malloc>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	00a3      	lsls	r3, r4, #2
 800176a:	33d8      	adds	r3, #216	; 0xd8
 800176c:	443b      	add	r3, r7
 800176e:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001776:	3b01      	subs	r3, #1
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	33d8      	adds	r3, #216	; 0xd8
 800177c:	443b      	add	r3, r7
 800177e:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001782:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001786:	4618      	mov	r0, r3
 8001788:	f008 f837 	bl	80097fa <strcpy>
        marker = strtok(NULL, ",");
 800178c:	49ad      	ldr	r1, [pc, #692]	; (8001a44 <nmea_GPGGA+0x328>)
 800178e:	2000      	movs	r0, #0
 8001790:	f007 ff3a 	bl	8009608 <strtok>
 8001794:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001798:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1d3      	bne.n	8001748 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 80017a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	332c      	adds	r3, #44	; 0x2c
 80017b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f008 f81e 	bl	80097fa <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 80017be:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80017c2:	2b53      	cmp	r3, #83	; 0x53
 80017c4:	d004      	beq.n	80017d0 <nmea_GPGGA+0xb4>
 80017c6:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80017ca:	2b4e      	cmp	r3, #78	; 0x4e
 80017cc:	f040 8159 	bne.w	8001a82 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80017d6:	e010      	b.n	80017fa <nmea_GPGGA+0xde>
 80017d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017de:	4413      	add	r3, r2
 80017e0:	7819      	ldrb	r1, [r3, #0]
 80017e2:	f107 021c 	add.w	r2, r7, #28
 80017e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017ea:	4413      	add	r3, r2
 80017ec:	460a      	mov	r2, r1
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017f4:	3301      	adds	r3, #1
 80017f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80017fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017fe:	2b01      	cmp	r3, #1
 8001800:	ddea      	ble.n	80017d8 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8001802:	2300      	movs	r3, #0
 8001804:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001808:	e011      	b.n	800182e <nmea_GPGGA+0x112>
 800180a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800180c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001810:	3302      	adds	r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	7819      	ldrb	r1, [r3, #0]
 8001816:	f107 0214 	add.w	r2, r7, #20
 800181a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800181e:	4413      	add	r3, r2
 8001820:	460a      	mov	r2, r1
 8001822:	701a      	strb	r2, [r3, #0]
 8001824:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001828:	3301      	adds	r3, #1
 800182a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800182e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001832:	2b05      	cmp	r3, #5
 8001834:	dde9      	ble.n	800180a <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	220a      	movs	r2, #10
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f006 feee 	bl	8008620 <strtol>
 8001844:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f006 fdfc 	bl	800844c <strtof>
 8001854:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001858:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001864:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001868:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8001a48 <nmea_GPGGA+0x32c>
 800186c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001874:	ee17 0a90 	vmov	r0, s15
 8001878:	f7fe fe66 	bl	8000548 <__aeabi_f2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800188a:	e010      	b.n	80018ae <nmea_GPGGA+0x192>
 800188c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800188e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001892:	4413      	add	r3, r2
 8001894:	7819      	ldrb	r1, [r3, #0]
 8001896:	f107 0210 	add.w	r2, r7, #16
 800189a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800189e:	4413      	add	r3, r2
 80018a0:	460a      	mov	r2, r1
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018a8:	3301      	adds	r3, #1
 80018aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80018ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	ddea      	ble.n	800188c <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80018bc:	e011      	b.n	80018e2 <nmea_GPGGA+0x1c6>
 80018be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018c4:	3303      	adds	r3, #3
 80018c6:	4413      	add	r3, r2
 80018c8:	7819      	ldrb	r1, [r3, #0]
 80018ca:	f107 0208 	add.w	r2, r7, #8
 80018ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018d2:	4413      	add	r3, r2
 80018d4:	460a      	mov	r2, r1
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018dc:	3301      	adds	r3, #1
 80018de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80018e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	dde9      	ble.n	80018be <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	220a      	movs	r2, #10
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f006 fe94 	bl	8008620 <strtol>
 80018f8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 80018fc:	f107 0308 	add.w	r3, r7, #8
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f006 fda2 	bl	800844c <strtof>
 8001908:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 800190c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001918:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 800191c:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001a48 <nmea_GPGGA+0x32c>
 8001920:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001928:	ee17 0a90 	vmov	r0, s15
 800192c:	f7fe fe0c 	bl	8000548 <__aeabi_f2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001944:	f7ff f8c0 	bl	8000ac8 <__aeabi_dcmpeq>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d176      	bne.n	8001a3c <nmea_GPGGA+0x320>
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800195a:	f7ff f8b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d16b      	bne.n	8001a3c <nmea_GPGGA+0x320>
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <nmea_GPGGA+0x330>)
 800196a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800196e:	f7ff f8b5 	bl	8000adc <__aeabi_dcmplt>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d061      	beq.n	8001a3c <nmea_GPGGA+0x320>
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <nmea_GPGGA+0x334>)
 800197e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001982:	f7ff f8ab 	bl	8000adc <__aeabi_dcmplt>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d057      	beq.n	8001a3c <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001992:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 800199c:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80019a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 80019ae:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 80019b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f006 fd49 	bl	800844c <strtof>
 80019ba:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80019be:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80019c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	d102      	bne.n	80019d2 <nmea_GPGGA+0x2b6>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	e001      	b.n	80019d6 <nmea_GPGGA+0x2ba>
 80019d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 80019da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019dc:	220a      	movs	r2, #10
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f006 fe1d 	bl	8008620 <strtol>
 80019e6:	4602      	mov	r2, r0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 80019ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ee:	220a      	movs	r2, #10
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f006 fe14 	bl	8008620 <strtol>
 80019f8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 80019fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bfcc      	ite	gt
 8001a04:	2301      	movgt	r3, #1
 8001a06:	2300      	movle	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f006 fd19 	bl	800844c <strtof>
 8001a1a:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8001a1e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001a22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	d102      	bne.n	8001a32 <nmea_GPGGA+0x316>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	e001      	b.n	8001a36 <nmea_GPGGA+0x31a>
 8001a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001a3a:	e022      	b.n	8001a82 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001a42:	e016      	b.n	8001a72 <nmea_GPGGA+0x356>
 8001a44:	0800c1c0 	.word	0x0800c1c0
 8001a48:	42700000 	.word	0x42700000
 8001a4c:	40568000 	.word	0x40568000
 8001a50:	40668000 	.word	0x40668000
 8001a54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	33d8      	adds	r3, #216	; 0xd8
 8001a5c:	443b      	add	r3, r7
 8001a5e:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f005 fe2a 	bl	80076bc <free>
 8001a68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001a72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	dbea      	blt.n	8001a54 <nmea_GPGGA+0x338>
            return 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e019      	b.n	8001ab6 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001a88:	e00e      	b.n	8001aa8 <nmea_GPGGA+0x38c>
 8001a8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	33d8      	adds	r3, #216	; 0xd8
 8001a92:	443b      	add	r3, r7
 8001a94:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f005 fe0f 	bl	80076bc <free>
 8001a9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001aa8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001aac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbea      	blt.n	8001a8a <nmea_GPGGA+0x36e>
    return 1;
 8001ab4:	2301      	movs	r3, #1
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	37dc      	adds	r7, #220	; 0xdc
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd90      	pop	{r4, r7, pc}
 8001abe:	bf00      	nop

08001ac0 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b0a3      	sub	sp, #140	; 0x8c
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	2264      	movs	r2, #100	; 0x64
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f007 fd7a 	bl	80095d2 <memset>
    char *marker = strtok(inputString, ",");
 8001ade:	493b      	ldr	r1, [pc, #236]	; (8001bcc <nmea_GPGSA+0x10c>)
 8001ae0:	6838      	ldr	r0, [r7, #0]
 8001ae2:	f007 fd91 	bl	8009608 <strtok>
 8001ae6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001aea:	e027      	b.n	8001b3c <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001aec:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001af0:	f7fe fbbe 	bl	8000270 <strlen>
 8001af4:	4603      	mov	r3, r0
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8001afc:	1c63      	adds	r3, r4, #1
 8001afe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b02:	4610      	mov	r0, r2
 8001b04:	f005 fdd2 	bl	80076ac <malloc>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	00a3      	lsls	r3, r4, #2
 8001b0e:	3388      	adds	r3, #136	; 0x88
 8001b10:	443b      	add	r3, r7
 8001b12:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8001b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	3388      	adds	r3, #136	; 0x88
 8001b20:	443b      	add	r3, r7
 8001b22:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001b26:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f007 fe65 	bl	80097fa <strcpy>
        marker = strtok(NULL, ",");
 8001b30:	4926      	ldr	r1, [pc, #152]	; (8001bcc <nmea_GPGSA+0x10c>)
 8001b32:	2000      	movs	r0, #0
 8001b34:	f007 fd68 	bl	8009608 <strtok>
 8001b38:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001b3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1d3      	bne.n	8001aec <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	220a      	movs	r2, #10
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f006 fd68 	bl	8008620 <strtol>
 8001b50:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8001b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	bfcc      	ite	gt
 8001b58:	2301      	movgt	r3, #1
 8001b5a:	2300      	movle	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001b68:	2303      	movs	r3, #3
 8001b6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b6c:	e00e      	b.n	8001b8c <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	3388      	adds	r3, #136	; 0x88
 8001b74:	443b      	add	r3, r7
 8001b76:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001b80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b82:	3301      	adds	r3, #1
 8001b84:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b88:	3301      	adds	r3, #1
 8001b8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b8e:	2b0e      	cmp	r3, #14
 8001b90:	dded      	ble.n	8001b6e <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8001b98:	2300      	movs	r3, #0
 8001b9a:	677b      	str	r3, [r7, #116]	; 0x74
 8001b9c:	e00b      	b.n	8001bb6 <nmea_GPGSA+0xf6>
 8001b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	3388      	adds	r3, #136	; 0x88
 8001ba4:	443b      	add	r3, r7
 8001ba6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f005 fd86 	bl	80076bc <free>
 8001bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	677b      	str	r3, [r7, #116]	; 0x74
 8001bb6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dbee      	blt.n	8001b9e <nmea_GPGSA+0xde>
    return 1;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	378c      	adds	r7, #140	; 0x8c
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	0800c1c0 	.word	0x0800c1c0

08001bd0 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b0a1      	sub	sp, #132	; 0x84
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	2264      	movs	r2, #100	; 0x64
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f007 fcf3 	bl	80095d2 <memset>
    char *marker = strtok(inputString, ",");
 8001bec:	4930      	ldr	r1, [pc, #192]	; (8001cb0 <nmea_GNRMC+0xe0>)
 8001bee:	6838      	ldr	r0, [r7, #0]
 8001bf0:	f007 fd0a 	bl	8009608 <strtok>
 8001bf4:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001bf6:	e021      	b.n	8001c3c <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001bf8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001bfa:	f7fe fb39 	bl	8000270 <strlen>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8001c04:	1c63      	adds	r3, r4, #1
 8001c06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c08:	4610      	mov	r0, r2
 8001c0a:	f005 fd4f 	bl	80076ac <malloc>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	00a3      	lsls	r3, r4, #2
 8001c14:	3380      	adds	r3, #128	; 0x80
 8001c16:	443b      	add	r3, r7
 8001c18:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8001c1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	3380      	adds	r3, #128	; 0x80
 8001c24:	443b      	add	r3, r7
 8001c26:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001c2a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f007 fde4 	bl	80097fa <strcpy>
        marker = strtok(NULL, ",");
 8001c32:	491f      	ldr	r1, [pc, #124]	; (8001cb0 <nmea_GNRMC+0xe0>)
 8001c34:	2000      	movs	r0, #0
 8001c36:	f007 fce7 	bl	8009608 <strtok>
 8001c3a:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1da      	bne.n	8001bf8 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8001c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f006 fc00 	bl	800844c <strtof>
 8001c4c:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8001c50:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001c52:	f7fe fc79 	bl	8000548 <__aeabi_f2d>
 8001c56:	a314      	add	r3, pc, #80	; (adr r3, 8001ca8 <nmea_GNRMC+0xd8>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	f7fe fdf6 	bl	800084c <__aeabi_ddiv>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7fe ffbe 	bl	8000be8 <__aeabi_d2f>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8001c72:	2300      	movs	r3, #0
 8001c74:	677b      	str	r3, [r7, #116]	; 0x74
 8001c76:	e00b      	b.n	8001c90 <nmea_GNRMC+0xc0>
 8001c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	3380      	adds	r3, #128	; 0x80
 8001c7e:	443b      	add	r3, r7
 8001c80:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f005 fd19 	bl	80076bc <free>
 8001c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	677b      	str	r3, [r7, #116]	; 0x74
 8001c90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001c92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c94:	429a      	cmp	r2, r3
 8001c96:	dbef      	blt.n	8001c78 <nmea_GNRMC+0xa8>
    return 1;
 8001c98:	2301      	movs	r3, #1
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3784      	adds	r7, #132	; 0x84
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd90      	pop	{r4, r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	be76c8b4 	.word	0xbe76c8b4
 8001cac:	3fff1a9f 	.word	0x3fff1a9f
 8001cb0:	0800c1c0 	.word	0x0800c1c0

08001cb4 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8001cbe:	223c      	movs	r2, #60	; 0x3c
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	484e      	ldr	r0, [pc, #312]	; (8001dfc <nmea_parse+0x148>)
 8001cc4:	f007 fc85 	bl	80095d2 <memset>
    char * token = strtok(buffer, "$");
 8001cc8:	494d      	ldr	r1, [pc, #308]	; (8001e00 <nmea_parse+0x14c>)
 8001cca:	6838      	ldr	r0, [r7, #0]
 8001ccc:	f007 fc9c 	bl	8009608 <strtok>
 8001cd0:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8001cd6:	e01d      	b.n	8001d14 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8001cd8:	6978      	ldr	r0, [r7, #20]
 8001cda:	f7fe fac9 	bl	8000270 <strlen>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	693c      	ldr	r4, [r7, #16]
 8001ce4:	1c63      	adds	r3, r4, #1
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	4610      	mov	r0, r2
 8001cea:	f005 fcdf 	bl	80076ac <malloc>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b42      	ldr	r3, [pc, #264]	; (8001dfc <nmea_parse+0x148>)
 8001cf4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <nmea_parse+0x148>)
 8001cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d02:	6979      	ldr	r1, [r7, #20]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f007 fd78 	bl	80097fa <strcpy>
        token = strtok(NULL, "$");
 8001d0a:	493d      	ldr	r1, [pc, #244]	; (8001e00 <nmea_parse+0x14c>)
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f007 fc7b 	bl	8009608 <strtok>
 8001d12:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1de      	bne.n	8001cd8 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	e052      	b.n	8001dc6 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8001d20:	4a36      	ldr	r2, [pc, #216]	; (8001dfc <nmea_parse+0x148>)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	4936      	ldr	r1, [pc, #216]	; (8001e04 <nmea_parse+0x150>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f007 fcc8 	bl	80096c0 <strstr>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d044      	beq.n	8001dc0 <nmea_parse+0x10c>
 8001d36:	4a31      	ldr	r2, [pc, #196]	; (8001dfc <nmea_parse+0x148>)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fca3 	bl	800168a <gps_checksum>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d03a      	beq.n	8001dc0 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 8001d4a:	4a2c      	ldr	r2, [pc, #176]	; (8001dfc <nmea_parse+0x148>)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	492d      	ldr	r1, [pc, #180]	; (8001e08 <nmea_parse+0x154>)
 8001d54:	4618      	mov	r0, r3
 8001d56:	f007 fcb3 	bl	80096c0 <strstr>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8001d60:	4a26      	ldr	r2, [pc, #152]	; (8001dfc <nmea_parse+0x148>)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ff30 	bl	8001bd0 <nmea_GNRMC>
 8001d70:	e026      	b.n	8001dc0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 8001d72:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <nmea_parse+0x148>)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7a:	4924      	ldr	r1, [pc, #144]	; (8001e0c <nmea_parse+0x158>)
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f007 fc9f 	bl	80096c0 <strstr>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8001d88:	4a1c      	ldr	r2, [pc, #112]	; (8001dfc <nmea_parse+0x148>)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d90:	4619      	mov	r1, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fe94 	bl	8001ac0 <nmea_GPGSA>
 8001d98:	e012      	b.n	8001dc0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 8001d9a:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <nmea_parse+0x148>)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da2:	491b      	ldr	r1, [pc, #108]	; (8001e10 <nmea_parse+0x15c>)
 8001da4:	4618      	mov	r0, r3
 8001da6:	f007 fc8b 	bl	80096c0 <strstr>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8001db0:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <nmea_parse+0x148>)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fcae 	bl	800171c <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	dba8      	blt.n	8001d20 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	e009      	b.n	8001de8 <nmea_parse+0x134>
 8001dd4:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <nmea_parse+0x148>)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f005 fc6d 	bl	80076bc <free>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	3301      	adds	r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	dbf1      	blt.n	8001dd4 <nmea_parse+0x120>


}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd90      	pop	{r4, r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000668 	.word	0x20000668
 8001e00:	0800c1c4 	.word	0x0800c1c4
 8001e04:	0800c1c8 	.word	0x0800c1c8
 8001e08:	0800c1cc 	.word	0x0800c1cc
 8001e0c:	0800c1d4 	.word	0x0800c1d4
 8001e10:	0800c1dc 	.word	0x0800c1dc

08001e14 <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h>  // For memcpy


void ssd1306_Reset(void) {
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af04      	add	r7, sp, #16
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	9302      	str	r3, [sp, #8]
 8001e34:	2301      	movs	r3, #1
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	1dfb      	adds	r3, r7, #7
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2178      	movs	r1, #120	; 0x78
 8001e42:	4803      	ldr	r0, [pc, #12]	; (8001e50 <ssd1306_WriteCommand+0x2c>)
 8001e44:	f002 fb0c 	bl	8004460 <HAL_I2C_Mem_Write>
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	2000026c 	.word	0x2000026c

08001e54 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af04      	add	r7, sp, #16
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	f04f 32ff 	mov.w	r2, #4294967295
 8001e66:	9202      	str	r2, [sp, #8]
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2301      	movs	r3, #1
 8001e70:	2240      	movs	r2, #64	; 0x40
 8001e72:	2178      	movs	r1, #120	; 0x78
 8001e74:	4803      	ldr	r0, [pc, #12]	; (8001e84 <ssd1306_WriteData+0x30>)
 8001e76:	f002 faf3 	bl	8004460 <HAL_I2C_Mem_Write>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000026c 	.word	0x2000026c

08001e88 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001e8c:	f7ff ffc2 	bl	8001e14 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001e90:	2064      	movs	r0, #100	; 0x64
 8001e92:	f001 fbaf 	bl	80035f4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001e96:	2000      	movs	r0, #0
 8001e98:	f000 fa28 	bl	80022ec <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001e9c:	2020      	movs	r0, #32
 8001e9e:	f7ff ffc1 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7ff ffbe 	bl	8001e24 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001ea8:	20b0      	movs	r0, #176	; 0xb0
 8001eaa:	f7ff ffbb 	bl	8001e24 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001eae:	20c8      	movs	r0, #200	; 0xc8
 8001eb0:	f7ff ffb8 	bl	8001e24 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff ffb5 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001eba:	2010      	movs	r0, #16
 8001ebc:	f7ff ffb2 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001ec0:	2040      	movs	r0, #64	; 0x40
 8001ec2:	f7ff ffaf 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001ec6:	20ff      	movs	r0, #255	; 0xff
 8001ec8:	f000 f9fd 	bl	80022c6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001ecc:	20a1      	movs	r0, #161	; 0xa1
 8001ece:	f7ff ffa9 	bl	8001e24 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001ed2:	20a6      	movs	r0, #166	; 0xa6
 8001ed4:	f7ff ffa6 	bl	8001e24 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001ed8:	20a8      	movs	r0, #168	; 0xa8
 8001eda:	f7ff ffa3 	bl	8001e24 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001ede:	203f      	movs	r0, #63	; 0x3f
 8001ee0:	f7ff ffa0 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ee4:	20a4      	movs	r0, #164	; 0xa4
 8001ee6:	f7ff ff9d 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001eea:	20d3      	movs	r0, #211	; 0xd3
 8001eec:	f7ff ff9a 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff ff97 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ef6:	20d5      	movs	r0, #213	; 0xd5
 8001ef8:	f7ff ff94 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001efc:	20f0      	movs	r0, #240	; 0xf0
 8001efe:	f7ff ff91 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001f02:	20d9      	movs	r0, #217	; 0xd9
 8001f04:	f7ff ff8e 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001f08:	2022      	movs	r0, #34	; 0x22
 8001f0a:	f7ff ff8b 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001f0e:	20da      	movs	r0, #218	; 0xda
 8001f10:	f7ff ff88 	bl	8001e24 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001f14:	2012      	movs	r0, #18
 8001f16:	f7ff ff85 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001f1a:	20db      	movs	r0, #219	; 0xdb
 8001f1c:	f7ff ff82 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001f20:	2020      	movs	r0, #32
 8001f22:	f7ff ff7f 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001f26:	208d      	movs	r0, #141	; 0x8d
 8001f28:	f7ff ff7c 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001f2c:	2014      	movs	r0, #20
 8001f2e:	f7ff ff79 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001f32:	2001      	movs	r0, #1
 8001f34:	f000 f9da 	bl	80022ec <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f000 f80f 	bl	8001f5c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001f3e:	f000 f825 	bl	8001f8c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <ssd1306_Init+0xd0>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <ssd1306_Init+0xd0>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001f4e:	4b02      	ldr	r3, [pc, #8]	; (8001f58 <ssd1306_Init+0xd0>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	711a      	strb	r2, [r3, #4]
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000aa4 	.word	0x20000aa4

08001f5c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <ssd1306_Fill+0x14>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e000      	b.n	8001f72 <ssd1306_Fill+0x16>
 8001f70:	23ff      	movs	r3, #255	; 0xff
 8001f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f76:	4619      	mov	r1, r3
 8001f78:	4803      	ldr	r0, [pc, #12]	; (8001f88 <ssd1306_Fill+0x2c>)
 8001f7a:	f007 fb2a 	bl	80095d2 <memset>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200006a4 	.word	0x200006a4

08001f8c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f92:	2300      	movs	r3, #0
 8001f94:	71fb      	strb	r3, [r7, #7]
 8001f96:	e016      	b.n	8001fc6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	3b50      	subs	r3, #80	; 0x50
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ff40 	bl	8001e24 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff ff3d 	bl	8001e24 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001faa:	2010      	movs	r0, #16
 8001fac:	f7ff ff3a 	bl	8001e24 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	01db      	lsls	r3, r3, #7
 8001fb4:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <ssd1306_UpdateScreen+0x4c>)
 8001fb6:	4413      	add	r3, r2
 8001fb8:	2180      	movs	r1, #128	; 0x80
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff ff4a 	bl	8001e54 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	71fb      	strb	r3, [r7, #7]
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b07      	cmp	r3, #7
 8001fca:	d9e5      	bls.n	8001f98 <ssd1306_UpdateScreen+0xc>
    }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200006a4 	.word	0x200006a4

08001fdc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	71bb      	strb	r3, [r7, #6]
 8001fea:	4613      	mov	r3, r2
 8001fec:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	db3d      	blt.n	8002072 <ssd1306_DrawPixel+0x96>
 8001ff6:	79bb      	ldrb	r3, [r7, #6]
 8001ff8:	2b3f      	cmp	r3, #63	; 0x3f
 8001ffa:	d83a      	bhi.n	8002072 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001ffc:	797b      	ldrb	r3, [r7, #5]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d11a      	bne.n	8002038 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002002:	79fa      	ldrb	r2, [r7, #7]
 8002004:	79bb      	ldrb	r3, [r7, #6]
 8002006:	08db      	lsrs	r3, r3, #3
 8002008:	b2d8      	uxtb	r0, r3
 800200a:	4603      	mov	r3, r0
 800200c:	01db      	lsls	r3, r3, #7
 800200e:	4413      	add	r3, r2
 8002010:	4a1b      	ldr	r2, [pc, #108]	; (8002080 <ssd1306_DrawPixel+0xa4>)
 8002012:	5cd3      	ldrb	r3, [r2, r3]
 8002014:	b25a      	sxtb	r2, r3
 8002016:	79bb      	ldrb	r3, [r7, #6]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	2101      	movs	r1, #1
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	b25b      	sxtb	r3, r3
 8002024:	4313      	orrs	r3, r2
 8002026:	b259      	sxtb	r1, r3
 8002028:	79fa      	ldrb	r2, [r7, #7]
 800202a:	4603      	mov	r3, r0
 800202c:	01db      	lsls	r3, r3, #7
 800202e:	4413      	add	r3, r2
 8002030:	b2c9      	uxtb	r1, r1
 8002032:	4a13      	ldr	r2, [pc, #76]	; (8002080 <ssd1306_DrawPixel+0xa4>)
 8002034:	54d1      	strb	r1, [r2, r3]
 8002036:	e01d      	b.n	8002074 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002038:	79fa      	ldrb	r2, [r7, #7]
 800203a:	79bb      	ldrb	r3, [r7, #6]
 800203c:	08db      	lsrs	r3, r3, #3
 800203e:	b2d8      	uxtb	r0, r3
 8002040:	4603      	mov	r3, r0
 8002042:	01db      	lsls	r3, r3, #7
 8002044:	4413      	add	r3, r2
 8002046:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <ssd1306_DrawPixel+0xa4>)
 8002048:	5cd3      	ldrb	r3, [r2, r3]
 800204a:	b25a      	sxtb	r2, r3
 800204c:	79bb      	ldrb	r3, [r7, #6]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	2101      	movs	r1, #1
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	b25b      	sxtb	r3, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	b25b      	sxtb	r3, r3
 800205e:	4013      	ands	r3, r2
 8002060:	b259      	sxtb	r1, r3
 8002062:	79fa      	ldrb	r2, [r7, #7]
 8002064:	4603      	mov	r3, r0
 8002066:	01db      	lsls	r3, r3, #7
 8002068:	4413      	add	r3, r2
 800206a:	b2c9      	uxtb	r1, r1
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <ssd1306_DrawPixel+0xa4>)
 800206e:	54d1      	strb	r1, [r2, r3]
 8002070:	e000      	b.n	8002074 <ssd1306_DrawPixel+0x98>
        return;
 8002072:	bf00      	nop
    }
}
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	200006a4 	.word	0x200006a4

08002084 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	4604      	mov	r4, r0
 800208c:	1d38      	adds	r0, r7, #4
 800208e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002092:	461a      	mov	r2, r3
 8002094:	4623      	mov	r3, r4
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	4613      	mov	r3, r2
 800209a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	2b1f      	cmp	r3, #31
 80020a0:	d902      	bls.n	80020a8 <ssd1306_WriteChar+0x24>
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	2b7e      	cmp	r3, #126	; 0x7e
 80020a6:	d901      	bls.n	80020ac <ssd1306_WriteChar+0x28>
        return 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e06d      	b.n	8002188 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80020ac:	4b38      	ldr	r3, [pc, #224]	; (8002190 <ssd1306_WriteChar+0x10c>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	793b      	ldrb	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	2b80      	cmp	r3, #128	; 0x80
 80020b8:	dc06      	bgt.n	80020c8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80020ba:	4b35      	ldr	r3, [pc, #212]	; (8002190 <ssd1306_WriteChar+0x10c>)
 80020bc:	885b      	ldrh	r3, [r3, #2]
 80020be:	461a      	mov	r2, r3
 80020c0:	797b      	ldrb	r3, [r7, #5]
 80020c2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80020c4:	2b40      	cmp	r3, #64	; 0x40
 80020c6:	dd01      	ble.n	80020cc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	e05d      	b.n	8002188 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	e04c      	b.n	800216c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	3b20      	subs	r3, #32
 80020d8:	7979      	ldrb	r1, [r7, #5]
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4619      	mov	r1, r3
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	440b      	add	r3, r1
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80020ec:	2300      	movs	r3, #0
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	e034      	b.n	800215c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d012      	beq.n	8002128 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002102:	4b23      	ldr	r3, [pc, #140]	; (8002190 <ssd1306_WriteChar+0x10c>)
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	4413      	add	r3, r2
 800210e:	b2d8      	uxtb	r0, r3
 8002110:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <ssd1306_WriteChar+0x10c>)
 8002112:	885b      	ldrh	r3, [r3, #2]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	4413      	add	r3, r2
 800211c:	b2db      	uxtb	r3, r3
 800211e:	7bba      	ldrb	r2, [r7, #14]
 8002120:	4619      	mov	r1, r3
 8002122:	f7ff ff5b 	bl	8001fdc <ssd1306_DrawPixel>
 8002126:	e016      	b.n	8002156 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <ssd1306_WriteChar+0x10c>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	4413      	add	r3, r2
 8002134:	b2d8      	uxtb	r0, r3
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <ssd1306_WriteChar+0x10c>)
 8002138:	885b      	ldrh	r3, [r3, #2]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	4413      	add	r3, r2
 8002142:	b2d9      	uxtb	r1, r3
 8002144:	7bbb      	ldrb	r3, [r7, #14]
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	f7ff ff43 	bl	8001fdc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	3301      	adds	r3, #1
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	793b      	ldrb	r3, [r7, #4]
 800215e:	461a      	mov	r2, r3
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	4293      	cmp	r3, r2
 8002164:	d3c5      	bcc.n	80020f2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	797b      	ldrb	r3, [r7, #5]
 800216e:	461a      	mov	r2, r3
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	4293      	cmp	r3, r2
 8002174:	d3ad      	bcc.n	80020d2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <ssd1306_WriteChar+0x10c>)
 8002178:	881a      	ldrh	r2, [r3, #0]
 800217a:	793b      	ldrb	r3, [r7, #4]
 800217c:	b29b      	uxth	r3, r3
 800217e:	4413      	add	r3, r2
 8002180:	b29a      	uxth	r2, r3
 8002182:	4b03      	ldr	r3, [pc, #12]	; (8002190 <ssd1306_WriteChar+0x10c>)
 8002184:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002186:	7bfb      	ldrb	r3, [r7, #15]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3724      	adds	r7, #36	; 0x24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd90      	pop	{r4, r7, pc}
 8002190:	20000aa4 	.word	0x20000aa4

08002194 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	1d38      	adds	r0, r7, #4
 800219e:	e880 0006 	stmia.w	r0, {r1, r2}
 80021a2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80021a4:	e012      	b.n	80021cc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	7818      	ldrb	r0, [r3, #0]
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	1d3a      	adds	r2, r7, #4
 80021ae:	ca06      	ldmia	r2, {r1, r2}
 80021b0:	f7ff ff68 	bl	8002084 <ssd1306_WriteChar>
 80021b4:	4603      	mov	r3, r0
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d002      	beq.n	80021c6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	e008      	b.n	80021d8 <ssd1306_WriteString+0x44>
        }
        str++;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	3301      	adds	r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1e8      	bne.n	80021a6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	781b      	ldrb	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	460a      	mov	r2, r1
 80021ea:	71fb      	strb	r3, [r7, #7]
 80021ec:	4613      	mov	r3, r2
 80021ee:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <ssd1306_SetCursor+0x2c>)
 80021f6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80021f8:	79bb      	ldrb	r3, [r7, #6]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <ssd1306_SetCursor+0x2c>)
 80021fe:	805a      	strh	r2, [r3, #2]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	20000aa4 	.word	0x20000aa4

08002210 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	603a      	str	r2, [r7, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
 800221e:	460b      	mov	r3, r1
 8002220:	71bb      	strb	r3, [r7, #6]
 8002222:	4613      	mov	r3, r2
 8002224:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002226:	797b      	ldrb	r3, [r7, #5]
 8002228:	3307      	adds	r3, #7
 800222a:	2b00      	cmp	r3, #0
 800222c:	da00      	bge.n	8002230 <ssd1306_DrawBitmap+0x20>
 800222e:	3307      	adds	r3, #7
 8002230:	10db      	asrs	r3, r3, #3
 8002232:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	2b00      	cmp	r3, #0
 800223e:	db3e      	blt.n	80022be <ssd1306_DrawBitmap+0xae>
 8002240:	79bb      	ldrb	r3, [r7, #6]
 8002242:	2b3f      	cmp	r3, #63	; 0x3f
 8002244:	d83b      	bhi.n	80022be <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8002246:	2300      	movs	r3, #0
 8002248:	73bb      	strb	r3, [r7, #14]
 800224a:	e033      	b.n	80022b4 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 800224c:	2300      	movs	r3, #0
 800224e:	737b      	strb	r3, [r7, #13]
 8002250:	e026      	b.n	80022a0 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8002252:	7b7b      	ldrb	r3, [r7, #13]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	e00d      	b.n	8002280 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002264:	7bbb      	ldrb	r3, [r7, #14]
 8002266:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	7b7a      	ldrb	r2, [r7, #13]
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	4413      	add	r3, r2
 8002276:	461a      	mov	r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4413      	add	r3, r2
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002284:	2b00      	cmp	r3, #0
 8002286:	da08      	bge.n	800229a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8002288:	79fa      	ldrb	r2, [r7, #7]
 800228a:	7b7b      	ldrb	r3, [r7, #13]
 800228c:	4413      	add	r3, r2
 800228e:	b2db      	uxtb	r3, r3
 8002290:	7f3a      	ldrb	r2, [r7, #28]
 8002292:	79b9      	ldrb	r1, [r7, #6]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fea1 	bl	8001fdc <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800229a:	7b7b      	ldrb	r3, [r7, #13]
 800229c:	3301      	adds	r3, #1
 800229e:	737b      	strb	r3, [r7, #13]
 80022a0:	7b7a      	ldrb	r2, [r7, #13]
 80022a2:	797b      	ldrb	r3, [r7, #5]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d3d4      	bcc.n	8002252 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80022a8:	7bbb      	ldrb	r3, [r7, #14]
 80022aa:	3301      	adds	r3, #1
 80022ac:	73bb      	strb	r3, [r7, #14]
 80022ae:	79bb      	ldrb	r3, [r7, #6]
 80022b0:	3301      	adds	r3, #1
 80022b2:	71bb      	strb	r3, [r7, #6]
 80022b4:	7bba      	ldrb	r2, [r7, #14]
 80022b6:	7e3b      	ldrb	r3, [r7, #24]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d3c7      	bcc.n	800224c <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80022bc:	e000      	b.n	80022c0 <ssd1306_DrawBitmap+0xb0>
        return;
 80022be:	bf00      	nop
}
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80022d0:	2381      	movs	r3, #129	; 0x81
 80022d2:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fda4 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fda0 	bl	8001e24 <ssd1306_WriteCommand>
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80022fc:	23af      	movs	r3, #175	; 0xaf
 80022fe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <ssd1306_SetDisplayOn+0x38>)
 8002302:	2201      	movs	r2, #1
 8002304:	715a      	strb	r2, [r3, #5]
 8002306:	e004      	b.n	8002312 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002308:	23ae      	movs	r3, #174	; 0xae
 800230a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <ssd1306_SetDisplayOn+0x38>)
 800230e:	2200      	movs	r2, #0
 8002310:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fd85 	bl	8001e24 <ssd1306_WriteCommand>
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000aa4 	.word	0x20000aa4

08002328 <statemachine>:
		};



//le code qui permet d'avoir les ecran de donnée que l'on souhaite, changeable a souhait on peut d'ailleur rajouter des état ou rajouter des fonctionnalité au sein de chaque état, pas encore décidé de la version définitive.
void statemachine(void){
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	ed2d 8b02 	vpush	{d8}
 800232e:	b094      	sub	sp, #80	; 0x50
 8002330:	af04      	add	r7, sp, #16
	switch(state){
 8002332:	4b67      	ldr	r3, [pc, #412]	; (80024d0 <statemachine+0x1a8>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b04      	cmp	r3, #4
 8002338:	f200 858d 	bhi.w	8002e56 <statemachine+0xb2e>
 800233c:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <statemachine+0x1c>)
 800233e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002342:	bf00      	nop
 8002344:	08002359 	.word	0x08002359
 8002348:	08002465 	.word	0x08002465
 800234c:	0800270b 	.word	0x0800270b
 8002350:	0800284d 	.word	0x0800284d
 8002354:	0800296d 	.word	0x0800296d
		  case STATE_INIT:
			  ssd1306_Fill(Black);
 8002358:	2000      	movs	r0, #0
 800235a:	f7ff fdff 	bl	8001f5c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 800235e:	495d      	ldr	r1, [pc, #372]	; (80024d4 <statemachine+0x1ac>)
 8002360:	485d      	ldr	r0, [pc, #372]	; (80024d8 <statemachine+0x1b0>)
 8002362:	f7ff fca7 	bl	8001cb4 <nmea_parse>
			  if(myData.fix == 1){
 8002366:	4b5c      	ldr	r3, [pc, #368]	; (80024d8 <statemachine+0x1b0>)
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	2b01      	cmp	r3, #1
 800236c:	d14e      	bne.n	800240c <statemachine+0xe4>
						char * str = (char*)malloc(sizeof(char)*20);
 800236e:	2014      	movs	r0, #20
 8002370:	f005 f99c 	bl	80076ac <malloc>
 8002374:	4603      	mov	r3, r0
 8002376:	607b      	str	r3, [r7, #4]
						ssd1306_SetCursor(32, 32);
 8002378:	2120      	movs	r1, #32
 800237a:	2020      	movs	r0, #32
 800237c:	f7ff ff30 	bl	80021e0 <ssd1306_SetCursor>
						snprintf(str,15, "Latitude:");
 8002380:	4a56      	ldr	r2, [pc, #344]	; (80024dc <statemachine+0x1b4>)
 8002382:	210f      	movs	r1, #15
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f007 f88d 	bl	80094a4 <sniprintf>
						ssd1306_WriteString(str, Font_6x8, White);
 800238a:	4a55      	ldr	r2, [pc, #340]	; (80024e0 <statemachine+0x1b8>)
 800238c:	2301      	movs	r3, #1
 800238e:	ca06      	ldmia	r2, {r1, r2}
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff feff 	bl	8002194 <ssd1306_WriteString>
						snprintf(str,15, "%0.7f",myData.latitude);
 8002396:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <statemachine+0x1b0>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	e9cd 2300 	strd	r2, r3, [sp]
 80023a0:	4a50      	ldr	r2, [pc, #320]	; (80024e4 <statemachine+0x1bc>)
 80023a2:	210f      	movs	r1, #15
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f007 f87d 	bl	80094a4 <sniprintf>
						ssd1306_SetCursor(32, 40);
 80023aa:	2128      	movs	r1, #40	; 0x28
 80023ac:	2020      	movs	r0, #32
 80023ae:	f7ff ff17 	bl	80021e0 <ssd1306_SetCursor>
						ssd1306_WriteString(str, Font_6x8, White);
 80023b2:	4a4b      	ldr	r2, [pc, #300]	; (80024e0 <statemachine+0x1b8>)
 80023b4:	2301      	movs	r3, #1
 80023b6:	ca06      	ldmia	r2, {r1, r2}
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff feeb 	bl	8002194 <ssd1306_WriteString>
						snprintf(str,15, "Longitude:");
 80023be:	4a4a      	ldr	r2, [pc, #296]	; (80024e8 <statemachine+0x1c0>)
 80023c0:	210f      	movs	r1, #15
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f007 f86e 	bl	80094a4 <sniprintf>
						ssd1306_SetCursor(32, 48);
 80023c8:	2130      	movs	r1, #48	; 0x30
 80023ca:	2020      	movs	r0, #32
 80023cc:	f7ff ff08 	bl	80021e0 <ssd1306_SetCursor>
						ssd1306_WriteString(str, Font_6x8, White);
 80023d0:	4a43      	ldr	r2, [pc, #268]	; (80024e0 <statemachine+0x1b8>)
 80023d2:	2301      	movs	r3, #1
 80023d4:	ca06      	ldmia	r2, {r1, r2}
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff fedc 	bl	8002194 <ssd1306_WriteString>
						snprintf(str,15, "%0.7f",myData.longitude);
 80023dc:	4b3e      	ldr	r3, [pc, #248]	; (80024d8 <statemachine+0x1b0>)
 80023de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023e2:	e9cd 2300 	strd	r2, r3, [sp]
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <statemachine+0x1bc>)
 80023e8:	210f      	movs	r1, #15
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f007 f85a 	bl	80094a4 <sniprintf>
						ssd1306_SetCursor(32, 56);
 80023f0:	2138      	movs	r1, #56	; 0x38
 80023f2:	2020      	movs	r0, #32
 80023f4:	f7ff fef4 	bl	80021e0 <ssd1306_SetCursor>
						ssd1306_WriteString(str, Font_6x8, White);
 80023f8:	4a39      	ldr	r2, [pc, #228]	; (80024e0 <statemachine+0x1b8>)
 80023fa:	2301      	movs	r3, #1
 80023fc:	ca06      	ldmia	r2, {r1, r2}
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff fec8 	bl	8002194 <ssd1306_WriteString>
						free(str);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f005 f959 	bl	80076bc <free>
 800240a:	e01b      	b.n	8002444 <statemachine+0x11c>
					}
				else{ //if the GPS doesn't have a fix, print a message
						char *str = (char*)malloc(sizeof(char)*20);
 800240c:	2014      	movs	r0, #20
 800240e:	f005 f94d 	bl	80076ac <malloc>
 8002412:	4603      	mov	r3, r0
 8002414:	60bb      	str	r3, [r7, #8]
						ssd1306_SetCursor(32, 32);
 8002416:	2120      	movs	r1, #32
 8002418:	2020      	movs	r0, #32
 800241a:	f7ff fee1 	bl	80021e0 <ssd1306_SetCursor>
						ssd1306_WriteString("Pos screen", Font_6x8, White);
 800241e:	4a30      	ldr	r2, [pc, #192]	; (80024e0 <statemachine+0x1b8>)
 8002420:	2301      	movs	r3, #1
 8002422:	ca06      	ldmia	r2, {r1, r2}
 8002424:	4831      	ldr	r0, [pc, #196]	; (80024ec <statemachine+0x1c4>)
 8002426:	f7ff feb5 	bl	8002194 <ssd1306_WriteString>
						ssd1306_SetCursor(32, 44);
 800242a:	212c      	movs	r1, #44	; 0x2c
 800242c:	2020      	movs	r0, #32
 800242e:	f7ff fed7 	bl	80021e0 <ssd1306_SetCursor>
						ssd1306_WriteString("Wait gps", Font_6x8, White);
 8002432:	4a2b      	ldr	r2, [pc, #172]	; (80024e0 <statemachine+0x1b8>)
 8002434:	2301      	movs	r3, #1
 8002436:	ca06      	ldmia	r2, {r1, r2}
 8002438:	482d      	ldr	r0, [pc, #180]	; (80024f0 <statemachine+0x1c8>)
 800243a:	f7ff feab 	bl	8002194 <ssd1306_WriteString>
						free(str);
 800243e:	68b8      	ldr	r0, [r7, #8]
 8002440:	f005 f93c 	bl	80076bc <free>
					}
					if(BTN_A>=1){
 8002444:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <statemachine+0x1cc>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f340 84fa 	ble.w	8002e42 <statemachine+0xb1a>
							state++;//un appuie sur le bouton a nous fait passer a l'etat suivant
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <statemachine+0x1a8>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	3301      	adds	r3, #1
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <statemachine+0x1a8>)
 8002458:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <statemachine+0x1cc>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
						}
			  break;
 8002460:	f000 bcef 	b.w	8002e42 <statemachine+0xb1a>
		  case STATE_SPEED:
			  ssd1306_Fill(Black);
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff fd79 	bl	8001f5c <ssd1306_Fill>
			 ssd1306_SetCursor(32, 32);
 800246a:	2120      	movs	r1, #32
 800246c:	2020      	movs	r0, #32
 800246e:	f7ff feb7 	bl	80021e0 <ssd1306_SetCursor>
			 nmea_parse(&myData, DataBuffer);
 8002472:	4918      	ldr	r1, [pc, #96]	; (80024d4 <statemachine+0x1ac>)
 8002474:	4818      	ldr	r0, [pc, #96]	; (80024d8 <statemachine+0x1b0>)
 8002476:	f7ff fc1d 	bl	8001cb4 <nmea_parse>
			 if(myData.speed>=vitmax){
 800247a:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <statemachine+0x1b0>)
 800247c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002480:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <statemachine+0x1d0>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248e:	db03      	blt.n	8002498 <statemachine+0x170>
				 vitmax=myData.speed;
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <statemachine+0x1b0>)
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <statemachine+0x1d0>)
 8002496:	6013      	str	r3, [r2, #0]
			 }
			 float pace=0;
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	63fb      	str	r3, [r7, #60]	; 0x3c
			 float sec=0;
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	63bb      	str	r3, [r7, #56]	; 0x38
			 if (myData.speed!=0){
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <statemachine+0x1b0>)
 80024a6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80024aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b2:	d027      	beq.n	8002504 <statemachine+0x1dc>
				 pace=1000/(60*myData.speed);//ici on convertie la vitesse en m/s en un pace en mim/Km on ecarte les erreure possite comme la division par 0
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <statemachine+0x1b0>)
 80024b6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80024ba:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80024fc <statemachine+0x1d4>
 80024be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024c2:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002500 <statemachine+0x1d8>
 80024c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80024ce:	e01b      	b.n	8002508 <statemachine+0x1e0>
 80024d0:	20000658 	.word	0x20000658
 80024d4:	2000040c 	.word	0x2000040c
 80024d8:	20000610 	.word	0x20000610
 80024dc:	0800c1e4 	.word	0x0800c1e4
 80024e0:	20000000 	.word	0x20000000
 80024e4:	0800c1f0 	.word	0x0800c1f0
 80024e8:	0800c1f8 	.word	0x0800c1f8
 80024ec:	0800c204 	.word	0x0800c204
 80024f0:	0800c210 	.word	0x0800c210
 80024f4:	20000650 	.word	0x20000650
 80024f8:	20000aac 	.word	0x20000aac
 80024fc:	42700000 	.word	0x42700000
 8002500:	447a0000 	.word	0x447a0000
			 }
			 else {
				 pace=9999;//en cas de division par 0, techniquement le temps devient infini mais ce n'est pas intérréssant
 8002504:	4bc0      	ldr	r3, [pc, #768]	; (8002808 <statemachine+0x4e0>)
 8002506:	63fb      	str	r3, [r7, #60]	; 0x3c
			 }
			 if((pace-floor(pace))>=0.60){//conversion en minute
 8002508:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800250a:	f7fe f81d 	bl	8000548 <__aeabi_f2d>
 800250e:	4604      	mov	r4, r0
 8002510:	460d      	mov	r5, r1
 8002512:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002514:	f7fe f818 	bl	8000548 <__aeabi_f2d>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	ec43 2b10 	vmov	d0, r2, r3
 8002520:	f009 fdc2 	bl	800c0a8 <floor>
 8002524:	ec53 2b10 	vmov	r2, r3, d0
 8002528:	4620      	mov	r0, r4
 800252a:	4629      	mov	r1, r5
 800252c:	f7fd feac 	bl	8000288 <__aeabi_dsub>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	a3af      	add	r3, pc, #700	; (adr r3, 80027f8 <statemachine+0x4d0>)
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	f7fe fae1 	bl	8000b04 <__aeabi_dcmpge>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d02c      	beq.n	80025a2 <statemachine+0x27a>
				 pace=pace+1;
 8002548:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800254c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002550:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002554:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				 sec=(pace-floor(pace))-0.60;
 8002558:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800255a:	f7fd fff5 	bl	8000548 <__aeabi_f2d>
 800255e:	4604      	mov	r4, r0
 8002560:	460d      	mov	r5, r1
 8002562:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002564:	f7fd fff0 	bl	8000548 <__aeabi_f2d>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	ec43 2b10 	vmov	d0, r2, r3
 8002570:	f009 fd9a 	bl	800c0a8 <floor>
 8002574:	ec53 2b10 	vmov	r2, r3, d0
 8002578:	4620      	mov	r0, r4
 800257a:	4629      	mov	r1, r5
 800257c:	f7fd fe84 	bl	8000288 <__aeabi_dsub>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	a39b      	add	r3, pc, #620	; (adr r3, 80027f8 <statemachine+0x4d0>)
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	f7fd fe7b 	bl	8000288 <__aeabi_dsub>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	f7fe fb25 	bl	8000be8 <__aeabi_d2f>
 800259e:	4603      	mov	r3, r0
 80025a0:	63bb      	str	r3, [r7, #56]	; 0x38
			 }
			 if(myData.fix == 1){ //if the GPS has a fix, print the data
 80025a2:	4b9a      	ldr	r3, [pc, #616]	; (800280c <statemachine+0x4e4>)
 80025a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d176      	bne.n	8002698 <statemachine+0x370>
			 						char * str = (char*)malloc(sizeof(char)*20);
 80025aa:	2014      	movs	r0, #20
 80025ac:	f005 f87e 	bl	80076ac <malloc>
 80025b0:	4603      	mov	r3, r0
 80025b2:	60fb      	str	r3, [r7, #12]
			 						snprintf(str,15, "Vitmax=%.1f",vitmax*3.6);//amélioration possible la stocker en eeprom
 80025b4:	4b96      	ldr	r3, [pc, #600]	; (8002810 <statemachine+0x4e8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd ffc5 	bl	8000548 <__aeabi_f2d>
 80025be:	a390      	add	r3, pc, #576	; (adr r3, 8002800 <statemachine+0x4d8>)
 80025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c4:	f7fe f818 	bl	80005f8 <__aeabi_dmul>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	e9cd 2300 	strd	r2, r3, [sp]
 80025d0:	4a90      	ldr	r2, [pc, #576]	; (8002814 <statemachine+0x4ec>)
 80025d2:	210f      	movs	r1, #15
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f006 ff65 	bl	80094a4 <sniprintf>
			 						ssd1306_SetCursor(32, 32);
 80025da:	2120      	movs	r1, #32
 80025dc:	2020      	movs	r0, #32
 80025de:	f7ff fdff 	bl	80021e0 <ssd1306_SetCursor>
			 						ssd1306_WriteString(str, Font_6x8, White);
 80025e2:	4a8d      	ldr	r2, [pc, #564]	; (8002818 <statemachine+0x4f0>)
 80025e4:	2301      	movs	r3, #1
 80025e6:	ca06      	ldmia	r2, {r1, r2}
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f7ff fdd3 	bl	8002194 <ssd1306_WriteString>
			 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 80025ee:	4b87      	ldr	r3, [pc, #540]	; (800280c <statemachine+0x4e4>)
 80025f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fd ffa8 	bl	8000548 <__aeabi_f2d>
 80025f8:	a381      	add	r3, pc, #516	; (adr r3, 8002800 <statemachine+0x4d8>)
 80025fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fe:	f7fd fffb 	bl	80005f8 <__aeabi_dmul>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	e9cd 2300 	strd	r2, r3, [sp]
 800260a:	4a84      	ldr	r2, [pc, #528]	; (800281c <statemachine+0x4f4>)
 800260c:	210f      	movs	r1, #15
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f006 ff48 	bl	80094a4 <sniprintf>
			 						ssd1306_SetCursor(32, 42);
 8002614:	212a      	movs	r1, #42	; 0x2a
 8002616:	2020      	movs	r0, #32
 8002618:	f7ff fde2 	bl	80021e0 <ssd1306_SetCursor>
			 						ssd1306_WriteString(str, Font_6x8, White);
 800261c:	4a7e      	ldr	r2, [pc, #504]	; (8002818 <statemachine+0x4f0>)
 800261e:	2301      	movs	r3, #1
 8002620:	ca06      	ldmia	r2, {r1, r2}
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f7ff fdb6 	bl	8002194 <ssd1306_WriteString>
			 						snprintf(str,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec*100));//affichage au format minute puis seconde
 8002628:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800262a:	f7fd ff8d 	bl	8000548 <__aeabi_f2d>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	ec43 2b10 	vmov	d0, r2, r3
 8002636:	f009 fd37 	bl	800c0a8 <floor>
 800263a:	eeb0 8a40 	vmov.f32	s16, s0
 800263e:	eef0 8a60 	vmov.f32	s17, s1
 8002642:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002646:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002820 <statemachine+0x4f8>
 800264a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800264e:	ee17 0a90 	vmov	r0, s15
 8002652:	f7fd ff79 	bl	8000548 <__aeabi_f2d>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	ec43 2b10 	vmov	d0, r2, r3
 800265e:	f009 fd23 	bl	800c0a8 <floor>
 8002662:	eeb0 7a40 	vmov.f32	s14, s0
 8002666:	eef0 7a60 	vmov.f32	s15, s1
 800266a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800266e:	ed8d 8b00 	vstr	d8, [sp]
 8002672:	4a6c      	ldr	r2, [pc, #432]	; (8002824 <statemachine+0x4fc>)
 8002674:	210f      	movs	r1, #15
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f006 ff14 	bl	80094a4 <sniprintf>
			 						ssd1306_SetCursor(32, 52);
 800267c:	2134      	movs	r1, #52	; 0x34
 800267e:	2020      	movs	r0, #32
 8002680:	f7ff fdae 	bl	80021e0 <ssd1306_SetCursor>
			 						ssd1306_WriteString(str, Font_6x8, White);
 8002684:	4a64      	ldr	r2, [pc, #400]	; (8002818 <statemachine+0x4f0>)
 8002686:	2301      	movs	r3, #1
 8002688:	ca06      	ldmia	r2, {r1, r2}
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f7ff fd82 	bl	8002194 <ssd1306_WriteString>
			 						free(str);
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f005 f813 	bl	80076bc <free>
 8002696:	e01b      	b.n	80026d0 <statemachine+0x3a8>
			 					}
			 	else{ //if the GPS doesn't have a fix, print a message
			 						char *str = (char*)malloc(sizeof(char)*20);
 8002698:	2014      	movs	r0, #20
 800269a:	f005 f807 	bl	80076ac <malloc>
 800269e:	4603      	mov	r3, r0
 80026a0:	613b      	str	r3, [r7, #16]
			 						ssd1306_SetCursor(32, 32);
 80026a2:	2120      	movs	r1, #32
 80026a4:	2020      	movs	r0, #32
 80026a6:	f7ff fd9b 	bl	80021e0 <ssd1306_SetCursor>
			 						ssd1306_WriteString("Speed screen", Font_6x8, White);
 80026aa:	4a5b      	ldr	r2, [pc, #364]	; (8002818 <statemachine+0x4f0>)
 80026ac:	2301      	movs	r3, #1
 80026ae:	ca06      	ldmia	r2, {r1, r2}
 80026b0:	485d      	ldr	r0, [pc, #372]	; (8002828 <statemachine+0x500>)
 80026b2:	f7ff fd6f 	bl	8002194 <ssd1306_WriteString>
			 						ssd1306_SetCursor(32, 44);
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	2020      	movs	r0, #32
 80026ba:	f7ff fd91 	bl	80021e0 <ssd1306_SetCursor>
			 						ssd1306_WriteString("Wait gps", Font_6x8, White);
 80026be:	4a56      	ldr	r2, [pc, #344]	; (8002818 <statemachine+0x4f0>)
 80026c0:	2301      	movs	r3, #1
 80026c2:	ca06      	ldmia	r2, {r1, r2}
 80026c4:	4859      	ldr	r0, [pc, #356]	; (800282c <statemachine+0x504>)
 80026c6:	f7ff fd65 	bl	8002194 <ssd1306_WriteString>
			 						free(str);
 80026ca:	6938      	ldr	r0, [r7, #16]
 80026cc:	f004 fff6 	bl	80076bc <free>
			 					}
			 if(BTN_B>=1){
 80026d0:	4b57      	ldr	r3, [pc, #348]	; (8002830 <statemachine+0x508>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	dd06      	ble.n	80026e6 <statemachine+0x3be>
			 vitmax=0;
 80026d8:	4b4d      	ldr	r3, [pc, #308]	; (8002810 <statemachine+0x4e8>)
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
			 BTN_B=0;
 80026e0:	4b53      	ldr	r3, [pc, #332]	; (8002830 <statemachine+0x508>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
			 	}
			 				HAL_Delay(100);
 80026e6:	2064      	movs	r0, #100	; 0x64
 80026e8:	f000 ff84 	bl	80035f4 <HAL_Delay>
			 				if(BTN_A>=1){
 80026ec:	4b51      	ldr	r3, [pc, #324]	; (8002834 <statemachine+0x50c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f340 83a8 	ble.w	8002e46 <statemachine+0xb1e>
			 					state++;
 80026f6:	4b50      	ldr	r3, [pc, #320]	; (8002838 <statemachine+0x510>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	3301      	adds	r3, #1
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4b4e      	ldr	r3, [pc, #312]	; (8002838 <statemachine+0x510>)
 8002700:	701a      	strb	r2, [r3, #0]
			 					BTN_A=0;
 8002702:	4b4c      	ldr	r3, [pc, #304]	; (8002834 <statemachine+0x50c>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
			  	}
			  break;
 8002708:	e39d      	b.n	8002e46 <statemachine+0xb1e>
		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 800270a:	2000      	movs	r0, #0
 800270c:	f7ff fc26 	bl	8001f5c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8002710:	494a      	ldr	r1, [pc, #296]	; (800283c <statemachine+0x514>)
 8002712:	483e      	ldr	r0, [pc, #248]	; (800280c <statemachine+0x4e4>)
 8002714:	f7ff face 	bl	8001cb4 <nmea_parse>
			  ssd1306_SetCursor(32, 32);
 8002718:	2120      	movs	r1, #32
 800271a:	2020      	movs	r0, #32
 800271c:	f7ff fd60 	bl	80021e0 <ssd1306_SetCursor>
			  ssd1306_WriteString("hr GMT+2:", Font_6x8, White);
 8002720:	4a3d      	ldr	r2, [pc, #244]	; (8002818 <statemachine+0x4f0>)
 8002722:	2301      	movs	r3, #1
 8002724:	ca06      	ldmia	r2, {r1, r2}
 8002726:	4846      	ldr	r0, [pc, #280]	; (8002840 <statemachine+0x518>)
 8002728:	f7ff fd34 	bl	8002194 <ssd1306_WriteString>
			  int heure=0;
 800272c:	2300      	movs	r3, #0
 800272e:	637b      	str	r3, [r7, #52]	; 0x34
			  heure=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8002730:	4b36      	ldr	r3, [pc, #216]	; (800280c <statemachine+0x4e4>)
 8002732:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002736:	f003 020f 	and.w	r2, r3, #15
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	461a      	mov	r2, r3
 8002744:	4b31      	ldr	r3, [pc, #196]	; (800280c <statemachine+0x4e4>)
 8002746:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	4413      	add	r3, r2
 8002750:	637b      	str	r3, [r7, #52]	; 0x34
			  if((heure+2)>=24){
 8002752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002754:	2b15      	cmp	r3, #21
 8002756:	dd03      	ble.n	8002760 <statemachine+0x438>
				  heure=heure-22;
 8002758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275a:	3b16      	subs	r3, #22
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
 800275e:	e002      	b.n	8002766 <statemachine+0x43e>
			  }
			  else{
				  heure=heure+2;
 8002760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002762:	3302      	adds	r3, #2
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
			  }

			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8002766:	4b29      	ldr	r3, [pc, #164]	; (800280c <statemachine+0x4e4>)
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	2b01      	cmp	r3, #1
 800276c:	d121      	bne.n	80027b2 <statemachine+0x48a>
			  			 						char * str = (char*)malloc(sizeof(char)*20);
 800276e:	2014      	movs	r0, #20
 8002770:	f004 ff9c 	bl	80076ac <malloc>
 8002774:	4603      	mov	r3, r0
 8002776:	617b      	str	r3, [r7, #20]
			  			 						ssd1306_SetCursor(34, 42);
 8002778:	212a      	movs	r1, #42	; 0x2a
 800277a:	2022      	movs	r0, #34	; 0x22
 800277c:	f7ff fd30 	bl	80021e0 <ssd1306_SetCursor>
			  			 						snprintf(str,15, "%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <statemachine+0x4e4>)
 8002782:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002786:	461a      	mov	r2, r3
 8002788:	4b20      	ldr	r3, [pc, #128]	; (800280c <statemachine+0x4e4>)
 800278a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	9200      	str	r2, [sp, #0]
 8002792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002794:	4a2b      	ldr	r2, [pc, #172]	; (8002844 <statemachine+0x51c>)
 8002796:	210f      	movs	r1, #15
 8002798:	6978      	ldr	r0, [r7, #20]
 800279a:	f006 fe83 	bl	80094a4 <sniprintf>
			  			 						ssd1306_WriteString(str, Font_11x18, White);
 800279e:	4a2a      	ldr	r2, [pc, #168]	; (8002848 <statemachine+0x520>)
 80027a0:	2301      	movs	r3, #1
 80027a2:	ca06      	ldmia	r2, {r1, r2}
 80027a4:	6978      	ldr	r0, [r7, #20]
 80027a6:	f7ff fcf5 	bl	8002194 <ssd1306_WriteString>
//			  			 						snprintf(str,15, "%c%c sec",myData.lastMeasure[4],myData.lastMeasure[5]);
//			  			 						ssd1306_WriteString(str, Font_6x8, White);
			  			 						free(str);
 80027aa:	6978      	ldr	r0, [r7, #20]
 80027ac:	f004 ff86 	bl	80076bc <free>
 80027b0:	e011      	b.n	80027d6 <statemachine+0x4ae>
			  			 					}
			  			 	else{ //if the GPS doesn't have a fix, print a message
			  			 						char *str = (char*)malloc(sizeof(char)*20);
 80027b2:	2014      	movs	r0, #20
 80027b4:	f004 ff7a 	bl	80076ac <malloc>
 80027b8:	4603      	mov	r3, r0
 80027ba:	61bb      	str	r3, [r7, #24]
			  			 						ssd1306_SetCursor(32, 44);
 80027bc:	212c      	movs	r1, #44	; 0x2c
 80027be:	2020      	movs	r0, #32
 80027c0:	f7ff fd0e 	bl	80021e0 <ssd1306_SetCursor>
			  			 						ssd1306_WriteString("Wait gps", Font_6x8, White);
 80027c4:	4a14      	ldr	r2, [pc, #80]	; (8002818 <statemachine+0x4f0>)
 80027c6:	2301      	movs	r3, #1
 80027c8:	ca06      	ldmia	r2, {r1, r2}
 80027ca:	4818      	ldr	r0, [pc, #96]	; (800282c <statemachine+0x504>)
 80027cc:	f7ff fce2 	bl	8002194 <ssd1306_WriteString>
			  			 						free(str);
 80027d0:	69b8      	ldr	r0, [r7, #24]
 80027d2:	f004 ff73 	bl	80076bc <free>
			  			 	}
				  if(BTN_A>=1){
 80027d6:	4b17      	ldr	r3, [pc, #92]	; (8002834 <statemachine+0x50c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f340 8335 	ble.w	8002e4a <statemachine+0xb22>
			  		state++;
 80027e0:	4b15      	ldr	r3, [pc, #84]	; (8002838 <statemachine+0x510>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	3301      	adds	r3, #1
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	4b13      	ldr	r3, [pc, #76]	; (8002838 <statemachine+0x510>)
 80027ea:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <statemachine+0x50c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 80027f2:	e32a      	b.n	8002e4a <statemachine+0xb22>
 80027f4:	f3af 8000 	nop.w
 80027f8:	33333333 	.word	0x33333333
 80027fc:	3fe33333 	.word	0x3fe33333
 8002800:	cccccccd 	.word	0xcccccccd
 8002804:	400ccccc 	.word	0x400ccccc
 8002808:	461c3c00 	.word	0x461c3c00
 800280c:	20000610 	.word	0x20000610
 8002810:	20000aac 	.word	0x20000aac
 8002814:	0800c21c 	.word	0x0800c21c
 8002818:	20000000 	.word	0x20000000
 800281c:	0800c228 	.word	0x0800c228
 8002820:	42c80000 	.word	0x42c80000
 8002824:	0800c230 	.word	0x0800c230
 8002828:	0800c244 	.word	0x0800c244
 800282c:	0800c210 	.word	0x0800c210
 8002830:	20000654 	.word	0x20000654
 8002834:	20000650 	.word	0x20000650
 8002838:	20000658 	.word	0x20000658
 800283c:	2000040c 	.word	0x2000040c
 8002840:	0800c254 	.word	0x0800c254
 8002844:	0800c260 	.word	0x0800c260
 8002848:	20000008 	.word	0x20000008
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 800284c:	2000      	movs	r0, #0
 800284e:	f7ff fb85 	bl	8001f5c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8002852:	4988      	ldr	r1, [pc, #544]	; (8002a74 <statemachine+0x74c>)
 8002854:	4888      	ldr	r0, [pc, #544]	; (8002a78 <statemachine+0x750>)
 8002856:	f7ff fa2d 	bl	8001cb4 <nmea_parse>
			  if(BTN_B==0){
 800285a:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <statemachine+0x754>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d152      	bne.n	8002908 <statemachine+0x5e0>
			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8002862:	4b85      	ldr	r3, [pc, #532]	; (8002a78 <statemachine+0x750>)
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	2b01      	cmp	r3, #1
 8002868:	d131      	bne.n	80028ce <statemachine+0x5a6>
			 			 						char * str = (char*)malloc(sizeof(char)*20);
 800286a:	2014      	movs	r0, #20
 800286c:	f004 ff1e 	bl	80076ac <malloc>
 8002870:	4603      	mov	r3, r0
 8002872:	61fb      	str	r3, [r7, #28]
			 			 						snprintf(str,15, "hdop=%.1f",myData.hdop);//amélioration possible la stocker en eeprom
 8002874:	4b80      	ldr	r3, [pc, #512]	; (8002a78 <statemachine+0x750>)
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4618      	mov	r0, r3
 800287a:	f7fd fe65 	bl	8000548 <__aeabi_f2d>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	e9cd 2300 	strd	r2, r3, [sp]
 8002886:	4a7e      	ldr	r2, [pc, #504]	; (8002a80 <statemachine+0x758>)
 8002888:	210f      	movs	r1, #15
 800288a:	69f8      	ldr	r0, [r7, #28]
 800288c:	f006 fe0a 	bl	80094a4 <sniprintf>
			 			 						ssd1306_SetCursor(32, 32);
 8002890:	2120      	movs	r1, #32
 8002892:	2020      	movs	r0, #32
 8002894:	f7ff fca4 	bl	80021e0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8002898:	4a7a      	ldr	r2, [pc, #488]	; (8002a84 <statemachine+0x75c>)
 800289a:	2301      	movs	r3, #1
 800289c:	ca06      	ldmia	r2, {r1, r2}
 800289e:	69f8      	ldr	r0, [r7, #28]
 80028a0:	f7ff fc78 	bl	8002194 <ssd1306_WriteString>
			 			 						snprintf(str,15, "SatNb :%d",myData.satelliteCount);
 80028a4:	4b74      	ldr	r3, [pc, #464]	; (8002a78 <statemachine+0x750>)
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	4a77      	ldr	r2, [pc, #476]	; (8002a88 <statemachine+0x760>)
 80028aa:	210f      	movs	r1, #15
 80028ac:	69f8      	ldr	r0, [r7, #28]
 80028ae:	f006 fdf9 	bl	80094a4 <sniprintf>
			 			 						ssd1306_SetCursor(32, 42);
 80028b2:	212a      	movs	r1, #42	; 0x2a
 80028b4:	2020      	movs	r0, #32
 80028b6:	f7ff fc93 	bl	80021e0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80028ba:	4a72      	ldr	r2, [pc, #456]	; (8002a84 <statemachine+0x75c>)
 80028bc:	2301      	movs	r3, #1
 80028be:	ca06      	ldmia	r2, {r1, r2}
 80028c0:	69f8      	ldr	r0, [r7, #28]
 80028c2:	f7ff fc67 	bl	8002194 <ssd1306_WriteString>
			 			 						free(str);
 80028c6:	69f8      	ldr	r0, [r7, #28]
 80028c8:	f004 fef8 	bl	80076bc <free>
 80028cc:	e03f      	b.n	800294e <statemachine+0x626>
			 			 					}
			 			 	else{ //if the GPS doesn't have a fix, print a message
			 			 						char *str = (char*)malloc(sizeof(char)*20);
 80028ce:	2014      	movs	r0, #20
 80028d0:	f004 feec 	bl	80076ac <malloc>
 80028d4:	4603      	mov	r3, r0
 80028d6:	623b      	str	r3, [r7, #32]
			 			 						ssd1306_SetCursor(32, 32);
 80028d8:	2120      	movs	r1, #32
 80028da:	2020      	movs	r0, #32
 80028dc:	f7ff fc80 	bl	80021e0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("balise", Font_6x8, White);
 80028e0:	4a68      	ldr	r2, [pc, #416]	; (8002a84 <statemachine+0x75c>)
 80028e2:	2301      	movs	r3, #1
 80028e4:	ca06      	ldmia	r2, {r1, r2}
 80028e6:	4869      	ldr	r0, [pc, #420]	; (8002a8c <statemachine+0x764>)
 80028e8:	f7ff fc54 	bl	8002194 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 44);
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	2020      	movs	r0, #32
 80028f0:	f7ff fc76 	bl	80021e0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("Wait gps", Font_6x8, White);
 80028f4:	4a63      	ldr	r2, [pc, #396]	; (8002a84 <statemachine+0x75c>)
 80028f6:	2301      	movs	r3, #1
 80028f8:	ca06      	ldmia	r2, {r1, r2}
 80028fa:	4865      	ldr	r0, [pc, #404]	; (8002a90 <statemachine+0x768>)
 80028fc:	f7ff fc4a 	bl	8002194 <ssd1306_WriteString>
			 			 						free(str);
 8002900:	6a38      	ldr	r0, [r7, #32]
 8002902:	f004 fedb 	bl	80076bc <free>
 8002906:	e022      	b.n	800294e <statemachine+0x626>
			 			 					}
			  }
			  else{
			  		ssd1306_DrawBitmap(32, 32, speciale, 64, 64, White);
 8002908:	2301      	movs	r3, #1
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	2340      	movs	r3, #64	; 0x40
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2340      	movs	r3, #64	; 0x40
 8002912:	4a60      	ldr	r2, [pc, #384]	; (8002a94 <statemachine+0x76c>)
 8002914:	2120      	movs	r1, #32
 8002916:	2020      	movs	r0, #32
 8002918:	f7ff fc7a 	bl	8002210 <ssd1306_DrawBitmap>
			  		ssd1306_UpdateScreen();
 800291c:	f7ff fb36 	bl	8001f8c <ssd1306_UpdateScreen>
			  		HAL_Delay(1000);
 8002920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002924:	f000 fe66 	bl	80035f4 <HAL_Delay>
			  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8002928:	2201      	movs	r2, #1
 800292a:	2110      	movs	r1, #16
 800292c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002930:	f001 fcca 	bl	80042c8 <HAL_GPIO_WritePin>
			  		HAL_Delay(400);
 8002934:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002938:	f000 fe5c 	bl	80035f4 <HAL_Delay>
			  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);
 800293c:	2200      	movs	r2, #0
 800293e:	2110      	movs	r1, #16
 8002940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002944:	f001 fcc0 	bl	80042c8 <HAL_GPIO_WritePin>
			  		BTN_B=0;
 8002948:	4b4c      	ldr	r3, [pc, #304]	; (8002a7c <statemachine+0x754>)
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
			  		}
			  if(BTN_A>=1){
 800294e:	4b52      	ldr	r3, [pc, #328]	; (8002a98 <statemachine+0x770>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f340 827b 	ble.w	8002e4e <statemachine+0xb26>
			  		state++;
 8002958:	4b50      	ldr	r3, [pc, #320]	; (8002a9c <statemachine+0x774>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	3301      	adds	r3, #1
 800295e:	b2da      	uxtb	r2, r3
 8002960:	4b4e      	ldr	r3, [pc, #312]	; (8002a9c <statemachine+0x774>)
 8002962:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8002964:	4b4c      	ldr	r3, [pc, #304]	; (8002a98 <statemachine+0x770>)
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 800296a:	e270      	b.n	8002e4e <statemachine+0xb26>
		  case STATE_CHOOSE:
		  		if(choose==0){
 800296c:	4b4c      	ldr	r3, [pc, #304]	; (8002aa0 <statemachine+0x778>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	f040 80f9 	bne.w	8002b68 <statemachine+0x840>

			  ssd1306_Fill(Black);
 8002976:	2000      	movs	r0, #0
 8002978:	f7ff faf0 	bl	8001f5c <ssd1306_Fill>
		  			ssd1306_SetCursor(32, 32);
 800297c:	2120      	movs	r1, #32
 800297e:	2020      	movs	r0, #32
 8002980:	f7ff fc2e 	bl	80021e0 <ssd1306_SetCursor>
		  			ssd1306_WriteString("choosehoure", Font_6x8, White);
 8002984:	4a3f      	ldr	r2, [pc, #252]	; (8002a84 <statemachine+0x75c>)
 8002986:	2301      	movs	r3, #1
 8002988:	ca06      	ldmia	r2, {r1, r2}
 800298a:	4846      	ldr	r0, [pc, #280]	; (8002aa4 <statemachine+0x77c>)
 800298c:	f7ff fc02 	bl	8002194 <ssd1306_WriteString>
		  		switch(statecpt){
 8002990:	4b45      	ldr	r3, [pc, #276]	; (8002aa8 <statemachine+0x780>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b02      	cmp	r3, #2
 8002996:	f000 8093 	beq.w	8002ac0 <statemachine+0x798>
 800299a:	2b02      	cmp	r3, #2
 800299c:	f300 8259 	bgt.w	8002e52 <statemachine+0xb2a>
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <statemachine+0x682>
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d032      	beq.n	8002a0e <statemachine+0x6e6>




		  		}
		  		 break;
 80029a8:	e253      	b.n	8002e52 <statemachine+0xb2a>
		  				if(BTN_A>=1){
 80029aa:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <statemachine+0x770>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	dd07      	ble.n	80029c2 <statemachine+0x69a>
		  					(boumheure)=(boumheure)+1;
 80029b2:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <statemachine+0x784>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3301      	adds	r3, #1
 80029b8:	4a3c      	ldr	r2, [pc, #240]	; (8002aac <statemachine+0x784>)
 80029ba:	6013      	str	r3, [r2, #0]
		  					BTN_A=0;
 80029bc:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <statemachine+0x770>)
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
		  				if(boumheure>=24){
 80029c2:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <statemachine+0x784>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b17      	cmp	r3, #23
 80029c8:	dd02      	ble.n	80029d0 <statemachine+0x6a8>
		  					boumheure=0;
 80029ca:	4b38      	ldr	r3, [pc, #224]	; (8002aac <statemachine+0x784>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
		  				if(BTN_B>=1){
 80029d0:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <statemachine+0x754>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	dd08      	ble.n	80029ea <statemachine+0x6c2>
		  					statecpt++;
 80029d8:	4b33      	ldr	r3, [pc, #204]	; (8002aa8 <statemachine+0x780>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	3301      	adds	r3, #1
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <statemachine+0x780>)
 80029e2:	701a      	strb	r2, [r3, #0]
		  					BTN_B=0;
 80029e4:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <statemachine+0x754>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
		  				ssd1306_SetCursor(32, 42);
 80029ea:	212a      	movs	r1, #42	; 0x2a
 80029ec:	2020      	movs	r0, #32
 80029ee:	f7ff fbf7 	bl	80021e0 <ssd1306_SetCursor>
		  				snprintf(str,15, "hr:%d",boumheure);
 80029f2:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <statemachine+0x784>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a2e      	ldr	r2, [pc, #184]	; (8002ab0 <statemachine+0x788>)
 80029f8:	210f      	movs	r1, #15
 80029fa:	482e      	ldr	r0, [pc, #184]	; (8002ab4 <statemachine+0x78c>)
 80029fc:	f006 fd52 	bl	80094a4 <sniprintf>
		  				ssd1306_WriteString(str, Font_6x8, White);
 8002a00:	4a20      	ldr	r2, [pc, #128]	; (8002a84 <statemachine+0x75c>)
 8002a02:	2301      	movs	r3, #1
 8002a04:	ca06      	ldmia	r2, {r1, r2}
 8002a06:	482b      	ldr	r0, [pc, #172]	; (8002ab4 <statemachine+0x78c>)
 8002a08:	f7ff fbc4 	bl	8002194 <ssd1306_WriteString>
		  				break;
 8002a0c:	e218      	b.n	8002e40 <statemachine+0xb18>
		  				if(BTN_A>=1){
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <statemachine+0x770>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	dd07      	ble.n	8002a26 <statemachine+0x6fe>
		  					(boumminutes)=(boumminutes)+1;
 8002a16:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <statemachine+0x790>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	4a26      	ldr	r2, [pc, #152]	; (8002ab8 <statemachine+0x790>)
 8002a1e:	6013      	str	r3, [r2, #0]
		  					BTN_A=0;
 8002a20:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <statemachine+0x770>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
		  				if(boumminutes>=59){
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <statemachine+0x790>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b3a      	cmp	r3, #58	; 0x3a
 8002a2c:	dd02      	ble.n	8002a34 <statemachine+0x70c>
		  					boumminutes=0;
 8002a2e:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <statemachine+0x790>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
		  				if(BTN_B>=1){
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <statemachine+0x754>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	dd08      	ble.n	8002a4e <statemachine+0x726>
		  					statecpt++;
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <statemachine+0x780>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	3301      	adds	r3, #1
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <statemachine+0x780>)
 8002a46:	701a      	strb	r2, [r3, #0]
		  					BTN_B=0;
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <statemachine+0x754>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
		  				ssd1306_SetCursor(32, 42);
 8002a4e:	212a      	movs	r1, #42	; 0x2a
 8002a50:	2020      	movs	r0, #32
 8002a52:	f7ff fbc5 	bl	80021e0 <ssd1306_SetCursor>
		  				snprintf(str,15, "min:%d",boumminutes);
 8002a56:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <statemachine+0x790>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a18      	ldr	r2, [pc, #96]	; (8002abc <statemachine+0x794>)
 8002a5c:	210f      	movs	r1, #15
 8002a5e:	4815      	ldr	r0, [pc, #84]	; (8002ab4 <statemachine+0x78c>)
 8002a60:	f006 fd20 	bl	80094a4 <sniprintf>
		  				ssd1306_WriteString(str, Font_6x8, White);
 8002a64:	4a07      	ldr	r2, [pc, #28]	; (8002a84 <statemachine+0x75c>)
 8002a66:	2301      	movs	r3, #1
 8002a68:	ca06      	ldmia	r2, {r1, r2}
 8002a6a:	4812      	ldr	r0, [pc, #72]	; (8002ab4 <statemachine+0x78c>)
 8002a6c:	f7ff fb92 	bl	8002194 <ssd1306_WriteString>
		  				break;
 8002a70:	e1e6      	b.n	8002e40 <statemachine+0xb18>
 8002a72:	bf00      	nop
 8002a74:	2000040c 	.word	0x2000040c
 8002a78:	20000610 	.word	0x20000610
 8002a7c:	20000654 	.word	0x20000654
 8002a80:	0800c268 	.word	0x0800c268
 8002a84:	20000000 	.word	0x20000000
 8002a88:	0800c274 	.word	0x0800c274
 8002a8c:	0800c280 	.word	0x0800c280
 8002a90:	0800c210 	.word	0x0800c210
 8002a94:	0800d74c 	.word	0x0800d74c
 8002a98:	20000650 	.word	0x20000650
 8002a9c:	20000658 	.word	0x20000658
 8002aa0:	20000664 	.word	0x20000664
 8002aa4:	0800c288 	.word	0x0800c288
 8002aa8:	20000ab0 	.word	0x20000ab0
 8002aac:	2000065c 	.word	0x2000065c
 8002ab0:	0800c294 	.word	0x0800c294
 8002ab4:	20000ab4 	.word	0x20000ab4
 8002ab8:	20000660 	.word	0x20000660
 8002abc:	0800c29c 	.word	0x0800c29c
		  				ssd1306_Fill(Black);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7ff fa4b 	bl	8001f5c <ssd1306_Fill>
		  				char * str = (char*)malloc(sizeof(char)*20);
 8002ac6:	2014      	movs	r0, #20
 8002ac8:	f004 fdf0 	bl	80076ac <malloc>
 8002acc:	4603      	mov	r3, r0
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
		  				ssd1306_WriteString("heure choisi:", Font_6x8, White);
 8002ad0:	4ab2      	ldr	r2, [pc, #712]	; (8002d9c <statemachine+0xa74>)
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	ca06      	ldmia	r2, {r1, r2}
 8002ad6:	48b2      	ldr	r0, [pc, #712]	; (8002da0 <statemachine+0xa78>)
 8002ad8:	f7ff fb5c 	bl	8002194 <ssd1306_WriteString>
		  				ssd1306_SetCursor(32, 42);
 8002adc:	212a      	movs	r1, #42	; 0x2a
 8002ade:	2020      	movs	r0, #32
 8002ae0:	f7ff fb7e 	bl	80021e0 <ssd1306_SetCursor>
		  				snprintf(str,15, "%dH%dMin",boumheure,boumminutes);
 8002ae4:	4baf      	ldr	r3, [pc, #700]	; (8002da4 <statemachine+0xa7c>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4baf      	ldr	r3, [pc, #700]	; (8002da8 <statemachine+0xa80>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	4613      	mov	r3, r2
 8002af0:	4aae      	ldr	r2, [pc, #696]	; (8002dac <statemachine+0xa84>)
 8002af2:	210f      	movs	r1, #15
 8002af4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002af6:	f006 fcd5 	bl	80094a4 <sniprintf>
		  				ssd1306_WriteString(str, Font_6x8, White);
 8002afa:	4aa8      	ldr	r2, [pc, #672]	; (8002d9c <statemachine+0xa74>)
 8002afc:	2301      	movs	r3, #1
 8002afe:	ca06      	ldmia	r2, {r1, r2}
 8002b00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b02:	f7ff fb47 	bl	8002194 <ssd1306_WriteString>
		  				ssd1306_UpdateScreen();
 8002b06:	f7ff fa41 	bl	8001f8c <ssd1306_UpdateScreen>
		  				HAL_Delay(2000);
 8002b0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b0e:	f000 fd71 	bl	80035f4 <HAL_Delay>
		  				choose=1;
 8002b12:	4ba7      	ldr	r3, [pc, #668]	; (8002db0 <statemachine+0xa88>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
		  				free(str);
 8002b18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b1a:	f004 fdcf 	bl	80076bc <free>
		  				statecpt--;
 8002b1e:	4ba5      	ldr	r3, [pc, #660]	; (8002db4 <statemachine+0xa8c>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4ba3      	ldr	r3, [pc, #652]	; (8002db4 <statemachine+0xa8c>)
 8002b28:	701a      	strb	r2, [r3, #0]
		  				statecpt--;
 8002b2a:	4ba2      	ldr	r3, [pc, #648]	; (8002db4 <statemachine+0xa8c>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	4ba0      	ldr	r3, [pc, #640]	; (8002db4 <statemachine+0xa8c>)
 8002b34:	701a      	strb	r2, [r3, #0]
		  				state--;
 8002b36:	4ba0      	ldr	r3, [pc, #640]	; (8002db8 <statemachine+0xa90>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4b9e      	ldr	r3, [pc, #632]	; (8002db8 <statemachine+0xa90>)
 8002b40:	701a      	strb	r2, [r3, #0]
		  				state--;//state=state-4 ne marche pas pour une raison que nous ignorons
 8002b42:	4b9d      	ldr	r3, [pc, #628]	; (8002db8 <statemachine+0xa90>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4b9b      	ldr	r3, [pc, #620]	; (8002db8 <statemachine+0xa90>)
 8002b4c:	701a      	strb	r2, [r3, #0]
		  				state--;
 8002b4e:	4b9a      	ldr	r3, [pc, #616]	; (8002db8 <statemachine+0xa90>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	4b98      	ldr	r3, [pc, #608]	; (8002db8 <statemachine+0xa90>)
 8002b58:	701a      	strb	r2, [r3, #0]
		  				state--;
 8002b5a:	4b97      	ldr	r3, [pc, #604]	; (8002db8 <statemachine+0xa90>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4b95      	ldr	r3, [pc, #596]	; (8002db8 <statemachine+0xa90>)
 8002b64:	701a      	strb	r2, [r3, #0]
		  				break;
 8002b66:	e16b      	b.n	8002e40 <statemachine+0xb18>
		  			ssd1306_Fill(Black);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7ff f9f7 	bl	8001f5c <ssd1306_Fill>
		  			nmea_parse(&myData, DataBuffer);
 8002b6e:	4993      	ldr	r1, [pc, #588]	; (8002dbc <statemachine+0xa94>)
 8002b70:	4893      	ldr	r0, [pc, #588]	; (8002dc0 <statemachine+0xa98>)
 8002b72:	f7ff f89f 	bl	8001cb4 <nmea_parse>
		  			ssd1306_SetCursor(32, 32);
 8002b76:	2120      	movs	r1, #32
 8002b78:	2020      	movs	r0, #32
 8002b7a:	f7ff fb31 	bl	80021e0 <ssd1306_SetCursor>
		  			ssd1306_WriteString("tps restant:", Font_6x8, White);
 8002b7e:	4a87      	ldr	r2, [pc, #540]	; (8002d9c <statemachine+0xa74>)
 8002b80:	2301      	movs	r3, #1
 8002b82:	ca06      	ldmia	r2, {r1, r2}
 8002b84:	488f      	ldr	r0, [pc, #572]	; (8002dc4 <statemachine+0xa9c>)
 8002b86:	f7ff fb05 	bl	8002194 <ssd1306_WriteString>
		  						  int heure=0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	633b      	str	r3, [r7, #48]	; 0x30
		  						  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8002b8e:	4b8c      	ldr	r3, [pc, #560]	; (8002dc0 <statemachine+0xa98>)
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	f040 8122 	bne.w	8002ddc <statemachine+0xab4>
		  							heure=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8002b98:	4b89      	ldr	r3, [pc, #548]	; (8002dc0 <statemachine+0xa98>)
 8002b9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002b9e:	f003 020f 	and.w	r2, r3, #15
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	461a      	mov	r2, r3
 8002bac:	4b84      	ldr	r3, [pc, #528]	; (8002dc0 <statemachine+0xa98>)
 8002bae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	4413      	add	r3, r2
 8002bb8:	633b      	str	r3, [r7, #48]	; 0x30
		  							if((heure+2)>=24){
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	2b15      	cmp	r3, #21
 8002bbe:	dd03      	ble.n	8002bc8 <statemachine+0x8a0>
		  									 heure=heure-22;
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	3b16      	subs	r3, #22
 8002bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002bc6:	e002      	b.n	8002bce <statemachine+0x8a6>
		  									heure=heure+2;
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	3302      	adds	r3, #2
 8002bcc:	633b      	str	r3, [r7, #48]	; 0x30
		  							  	char * str = (char*)malloc(sizeof(char)*20);
 8002bce:	2014      	movs	r0, #20
 8002bd0:	f004 fd6c 	bl	80076ac <malloc>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
		  						  		ssd1306_SetCursor(34, 40);
 8002bd8:	2128      	movs	r1, #40	; 0x28
 8002bda:	2022      	movs	r0, #34	; 0x22
 8002bdc:	f7ff fb00 	bl	80021e0 <ssd1306_SetCursor>
		  						  		if((boumminutes-((myData.lastMeasure[2]&0x0F)*10+(myData.lastMeasure[3]&0x0F)))>=0){
 8002be0:	4b71      	ldr	r3, [pc, #452]	; (8002da8 <statemachine+0xa80>)
 8002be2:	6819      	ldr	r1, [r3, #0]
 8002be4:	4b76      	ldr	r3, [pc, #472]	; (8002dc0 <statemachine+0xa98>)
 8002be6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002bea:	f003 020f 	and.w	r2, r3, #15
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4b71      	ldr	r3, [pc, #452]	; (8002dc0 <statemachine+0xa98>)
 8002bfa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	4413      	add	r3, r2
 8002c04:	1acb      	subs	r3, r1, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	db1e      	blt.n	8002c48 <statemachine+0x920>
		  						  			 					snprintf(str,15, "%d:%d",(boumheure-heure),(boumminutes-((myData.lastMeasure[2]&0x0F)*10+(myData.lastMeasure[3]&0x0F))));
 8002c0a:	4b66      	ldr	r3, [pc, #408]	; (8002da4 <statemachine+0xa7c>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	1ad0      	subs	r0, r2, r3
 8002c12:	4b65      	ldr	r3, [pc, #404]	; (8002da8 <statemachine+0xa80>)
 8002c14:	6819      	ldr	r1, [r3, #0]
 8002c16:	4b6a      	ldr	r3, [pc, #424]	; (8002dc0 <statemachine+0xa98>)
 8002c18:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002c1c:	f003 020f 	and.w	r2, r3, #15
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b65      	ldr	r3, [pc, #404]	; (8002dc0 <statemachine+0xa98>)
 8002c2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	4413      	add	r3, r2
 8002c36:	1acb      	subs	r3, r1, r3
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4a62      	ldr	r2, [pc, #392]	; (8002dc8 <statemachine+0xaa0>)
 8002c3e:	210f      	movs	r1, #15
 8002c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c42:	f006 fc2f 	bl	80094a4 <sniprintf>
 8002c46:	e01f      	b.n	8002c88 <statemachine+0x960>
		  						  			 					snprintf(str,15, "%d:%d",(boumheure-heure)-1,60+(boumminutes-((myData.lastMeasure[2]&0x0F)*10+(myData.lastMeasure[3]&0x0F))));
 8002c48:	4b56      	ldr	r3, [pc, #344]	; (8002da4 <statemachine+0xa7c>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	1e58      	subs	r0, r3, #1
 8002c52:	4b55      	ldr	r3, [pc, #340]	; (8002da8 <statemachine+0xa80>)
 8002c54:	6819      	ldr	r1, [r3, #0]
 8002c56:	4b5a      	ldr	r3, [pc, #360]	; (8002dc0 <statemachine+0xa98>)
 8002c58:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002c5c:	f003 020f 	and.w	r2, r3, #15
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4b55      	ldr	r3, [pc, #340]	; (8002dc0 <statemachine+0xa98>)
 8002c6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	4413      	add	r3, r2
 8002c76:	1acb      	subs	r3, r1, r3
 8002c78:	333c      	adds	r3, #60	; 0x3c
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	4a52      	ldr	r2, [pc, #328]	; (8002dc8 <statemachine+0xaa0>)
 8002c80:	210f      	movs	r1, #15
 8002c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c84:	f006 fc0e 	bl	80094a4 <sniprintf>
		  						  			 				ssd1306_WriteString(str, Font_11x18, White);
 8002c88:	4a50      	ldr	r2, [pc, #320]	; (8002dcc <statemachine+0xaa4>)
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	ca06      	ldmia	r2, {r1, r2}
 8002c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c90:	f7ff fa80 	bl	8002194 <ssd1306_WriteString>
		  						  			 				snprintf(str,15, "%d sec",60-(((myData.lastMeasure[4]&0x0F)*10)+(myData.lastMeasure[5]&0x0F)));
 8002c94:	4b4a      	ldr	r3, [pc, #296]	; (8002dc0 <statemachine+0xa98>)
 8002c96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c9a:	f003 020f 	and.w	r2, r3, #15
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4b45      	ldr	r3, [pc, #276]	; (8002dc0 <statemachine+0xa98>)
 8002caa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8002cb8:	4a45      	ldr	r2, [pc, #276]	; (8002dd0 <statemachine+0xaa8>)
 8002cba:	210f      	movs	r1, #15
 8002cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cbe:	f006 fbf1 	bl	80094a4 <sniprintf>
		  						  			 				ssd1306_SetCursor(34, 58);
 8002cc2:	213a      	movs	r1, #58	; 0x3a
 8002cc4:	2022      	movs	r0, #34	; 0x22
 8002cc6:	f7ff fa8b 	bl	80021e0 <ssd1306_SetCursor>
		  						  			 				ssd1306_WriteString(str, Font_6x8, White);
 8002cca:	4a34      	ldr	r2, [pc, #208]	; (8002d9c <statemachine+0xa74>)
 8002ccc:	2301      	movs	r3, #1
 8002cce:	ca06      	ldmia	r2, {r1, r2}
 8002cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cd2:	f7ff fa5f 	bl	8002194 <ssd1306_WriteString>
		  						  			 				free(str);
 8002cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cd8:	f004 fcf0 	bl	80076bc <free>
		  						  		if((boumheure-heure)<=0&&(boumminutes-((myData.lastMeasure[2]&0x0F)*10+(myData.lastMeasure[3]&0x0F)))<=0){
 8002cdc:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <statemachine+0xa7c>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f300 808b 	bgt.w	8002e00 <statemachine+0xad8>
 8002cea:	4b2f      	ldr	r3, [pc, #188]	; (8002da8 <statemachine+0xa80>)
 8002cec:	6819      	ldr	r1, [r3, #0]
 8002cee:	4b34      	ldr	r3, [pc, #208]	; (8002dc0 <statemachine+0xa98>)
 8002cf0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002cf4:	f003 020f 	and.w	r2, r3, #15
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	461a      	mov	r2, r3
 8002d02:	4b2f      	ldr	r3, [pc, #188]	; (8002dc0 <statemachine+0xa98>)
 8002d04:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	4413      	add	r3, r2
 8002d0e:	1acb      	subs	r3, r1, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	dc75      	bgt.n	8002e00 <statemachine+0xad8>
		  						  			 							HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8002d14:	2201      	movs	r2, #1
 8002d16:	2110      	movs	r1, #16
 8002d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d1c:	f001 fad4 	bl	80042c8 <HAL_GPIO_WritePin>
		  						  			 						ssd1306_Fill(Black);
 8002d20:	2000      	movs	r0, #0
 8002d22:	f7ff f91b 	bl	8001f5c <ssd1306_Fill>
		  						  			 							ssd1306_SetCursor(32, 48);
 8002d26:	2130      	movs	r1, #48	; 0x30
 8002d28:	2020      	movs	r0, #32
 8002d2a:	f7ff fa59 	bl	80021e0 <ssd1306_SetCursor>
		  						  			 							ssd1306_WriteString("explosion", Font_6x8, White);
 8002d2e:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <statemachine+0xa74>)
 8002d30:	2301      	movs	r3, #1
 8002d32:	ca06      	ldmia	r2, {r1, r2}
 8002d34:	4827      	ldr	r0, [pc, #156]	; (8002dd4 <statemachine+0xaac>)
 8002d36:	f7ff fa2d 	bl	8002194 <ssd1306_WriteString>
		  						  			 						ssd1306_UpdateScreen();
 8002d3a:	f7ff f927 	bl	8001f8c <ssd1306_UpdateScreen>
		  						  			 						HAL_Delay(2000);
 8002d3e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d42:	f000 fc57 	bl	80035f4 <HAL_Delay>
		  						  			 							HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	2110      	movs	r1, #16
 8002d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d4e:	f001 fabb 	bl	80042c8 <HAL_GPIO_WritePin>
		  						  			 							boumheure=0;
 8002d52:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <statemachine+0xa7c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
		  						  			 							boumminutes=0;
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <statemachine+0xa80>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
		  						  			 							choose=0;
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <statemachine+0xa88>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
		  						  			 							state--;
 8002d64:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <statemachine+0xa90>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <statemachine+0xa90>)
 8002d6e:	701a      	strb	r2, [r3, #0]
		  						  			 							state--;//state=state-4 ne marche pas pour une raison que nous ignorons
 8002d70:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <statemachine+0xa90>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <statemachine+0xa90>)
 8002d7a:	701a      	strb	r2, [r3, #0]
		  						  			 							state--;
 8002d7c:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <statemachine+0xa90>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <statemachine+0xa90>)
 8002d86:	701a      	strb	r2, [r3, #0]
		  						  			 							state--;
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <statemachine+0xa90>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <statemachine+0xa90>)
 8002d92:	701a      	strb	r2, [r3, #0]
		  						  			 							BTN_A=0;
 8002d94:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <statemachine+0xab0>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e031      	b.n	8002e00 <statemachine+0xad8>
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	0800c2a4 	.word	0x0800c2a4
 8002da4:	2000065c 	.word	0x2000065c
 8002da8:	20000660 	.word	0x20000660
 8002dac:	0800c2b4 	.word	0x0800c2b4
 8002db0:	20000664 	.word	0x20000664
 8002db4:	20000ab0 	.word	0x20000ab0
 8002db8:	20000658 	.word	0x20000658
 8002dbc:	2000040c 	.word	0x2000040c
 8002dc0:	20000610 	.word	0x20000610
 8002dc4:	0800c2c0 	.word	0x0800c2c0
 8002dc8:	0800c2d0 	.word	0x0800c2d0
 8002dcc:	20000008 	.word	0x20000008
 8002dd0:	0800c2d8 	.word	0x0800c2d8
 8002dd4:	0800c2e0 	.word	0x0800c2e0
 8002dd8:	20000650 	.word	0x20000650
		  						  			 						char *str = (char*)malloc(sizeof(char)*20);
 8002ddc:	2014      	movs	r0, #20
 8002dde:	f004 fc65 	bl	80076ac <malloc>
 8002de2:	4603      	mov	r3, r0
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
		  						  			 						ssd1306_SetCursor(32, 44);
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	2020      	movs	r0, #32
 8002dea:	f7ff f9f9 	bl	80021e0 <ssd1306_SetCursor>
		  						  			 						ssd1306_WriteString("Wait gps", Font_6x8, White);
 8002dee:	4a1d      	ldr	r2, [pc, #116]	; (8002e64 <statemachine+0xb3c>)
 8002df0:	2301      	movs	r3, #1
 8002df2:	ca06      	ldmia	r2, {r1, r2}
 8002df4:	481c      	ldr	r0, [pc, #112]	; (8002e68 <statemachine+0xb40>)
 8002df6:	f7ff f9cd 	bl	8002194 <ssd1306_WriteString>
		  						  			 						free(str);
 8002dfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dfc:	f004 fc5e 	bl	80076bc <free>
		  						  if(BTN_A>=1){
 8002e00:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <statemachine+0xb44>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	dd24      	ble.n	8002e52 <statemachine+0xb2a>
		  							state--;
 8002e08:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <statemachine+0xb48>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <statemachine+0xb48>)
 8002e12:	701a      	strb	r2, [r3, #0]
		  							state--;//state=state-4 ne marche pas pour une raison que nous ignorons
 8002e14:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <statemachine+0xb48>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <statemachine+0xb48>)
 8002e1e:	701a      	strb	r2, [r3, #0]
		  							state--;
 8002e20:	4b13      	ldr	r3, [pc, #76]	; (8002e70 <statemachine+0xb48>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <statemachine+0xb48>)
 8002e2a:	701a      	strb	r2, [r3, #0]
		  							state--;
 8002e2c:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <statemachine+0xb48>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <statemachine+0xb48>)
 8002e36:	701a      	strb	r2, [r3, #0]
		  							BTN_A=0;
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <statemachine+0xb44>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
		  		 break;
 8002e3e:	e008      	b.n	8002e52 <statemachine+0xb2a>
 8002e40:	e007      	b.n	8002e52 <statemachine+0xb2a>
			  break;
 8002e42:	bf00      	nop
 8002e44:	e006      	b.n	8002e54 <statemachine+0xb2c>
			  break;
 8002e46:	bf00      	nop
 8002e48:	e004      	b.n	8002e54 <statemachine+0xb2c>
			  break;
 8002e4a:	bf00      	nop
 8002e4c:	e002      	b.n	8002e54 <statemachine+0xb2c>
			  break;
 8002e4e:	bf00      	nop
 8002e50:	e000      	b.n	8002e54 <statemachine+0xb2c>
		  		 break;
 8002e52:	bf00      	nop
	}

return ;
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
}
 8002e58:	3740      	adds	r7, #64	; 0x40
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	ecbd 8b02 	vpop	{d8}
 8002e60:	bdb0      	pop	{r4, r5, r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000000 	.word	0x20000000
 8002e68:	0800c210 	.word	0x0800c210
 8002e6c:	20000650 	.word	0x20000650
 8002e70:	20000658 	.word	0x20000658

08002e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7a:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <HAL_MspInit+0x44>)
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7e:	4a0e      	ldr	r2, [pc, #56]	; (8002eb8 <HAL_MspInit+0x44>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6613      	str	r3, [r2, #96]	; 0x60
 8002e86:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <HAL_MspInit+0x44>)
 8002e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_MspInit+0x44>)
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	4a08      	ldr	r2, [pc, #32]	; (8002eb8 <HAL_MspInit+0x44>)
 8002e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_MspInit+0x44>)
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000

08002ebc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <HAL_DAC_MspInit+0x74>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d124      	bne.n	8002f28 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002ede:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <HAL_DAC_MspInit+0x78>)
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee2:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <HAL_DAC_MspInit+0x78>)
 8002ee4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eea:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <HAL_DAC_MspInit+0x78>)
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef6:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_DAC_MspInit+0x78>)
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efa:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <HAL_DAC_MspInit+0x78>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <HAL_DAC_MspInit+0x78>)
 8002f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f0e:	2310      	movs	r3, #16
 8002f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f12:	2303      	movs	r3, #3
 8002f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1a:	f107 0314 	add.w	r3, r7, #20
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f24:	f001 f866 	bl	8003ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002f28:	bf00      	nop
 8002f2a:	3728      	adds	r7, #40	; 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40007400 	.word	0x40007400
 8002f34:	40021000 	.word	0x40021000

08002f38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b0a2      	sub	sp, #136	; 0x88
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f50:	f107 0320 	add.w	r3, r7, #32
 8002f54:	2254      	movs	r2, #84	; 0x54
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f006 fb3a 	bl	80095d2 <memset>
  if(hi2c->Instance==I2C1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a4f      	ldr	r2, [pc, #316]	; (80030a0 <HAL_I2C_MspInit+0x168>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d13a      	bne.n	8002fde <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002f68:	2340      	movs	r3, #64	; 0x40
 8002f6a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f70:	f107 0320 	add.w	r3, r7, #32
 8002f74:	4618      	mov	r0, r3
 8002f76:	f002 fdc1 	bl	8005afc <HAL_RCCEx_PeriphCLKConfig>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002f80:	f7fe fb7e 	bl	8001680 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f84:	4b47      	ldr	r3, [pc, #284]	; (80030a4 <HAL_I2C_MspInit+0x16c>)
 8002f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f88:	4a46      	ldr	r2, [pc, #280]	; (80030a4 <HAL_I2C_MspInit+0x16c>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f90:	4b44      	ldr	r3, [pc, #272]	; (80030a4 <HAL_I2C_MspInit+0x16c>)
 8002f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f9c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002fa0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fa2:	2312      	movs	r3, #18
 8002fa4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002faa:	2303      	movs	r3, #3
 8002fac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fc0:	f001 f818 	bl	8003ff4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fc4:	4b37      	ldr	r3, [pc, #220]	; (80030a4 <HAL_I2C_MspInit+0x16c>)
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc8:	4a36      	ldr	r2, [pc, #216]	; (80030a4 <HAL_I2C_MspInit+0x16c>)
 8002fca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fce:	6593      	str	r3, [r2, #88]	; 0x58
 8002fd0:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <HAL_I2C_MspInit+0x16c>)
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002fdc:	e05c      	b.n	8003098 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a31      	ldr	r2, [pc, #196]	; (80030a8 <HAL_I2C_MspInit+0x170>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d157      	bne.n	8003098 <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fec:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ff2:	f107 0320 	add.w	r3, r7, #32
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f002 fd80 	bl	8005afc <HAL_RCCEx_PeriphCLKConfig>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8003002:	f7fe fb3d 	bl	8001680 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003006:	4b27      	ldr	r3, [pc, #156]	; (80030a4 <HAL_I2C_MspInit+0x16c>)
 8003008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300a:	4a26      	ldr	r2, [pc, #152]	; (80030a4 <HAL_I2C_MspInit+0x16c>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003012:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <HAL_I2C_MspInit+0x16c>)
 8003014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800301e:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <HAL_I2C_MspInit+0x16c>)
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003022:	4a20      	ldr	r2, [pc, #128]	; (80030a4 <HAL_I2C_MspInit+0x16c>)
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800302a:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <HAL_I2C_MspInit+0x16c>)
 800302c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800303a:	2312      	movs	r3, #18
 800303c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003042:	2303      	movs	r3, #3
 8003044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003048:	2304      	movs	r3, #4
 800304a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003052:	4619      	mov	r1, r3
 8003054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003058:	f000 ffcc 	bl	8003ff4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800305c:	2310      	movs	r3, #16
 800305e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003060:	2312      	movs	r3, #18
 8003062:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003068:	2303      	movs	r3, #3
 800306a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800306e:	2304      	movs	r3, #4
 8003070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003074:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003078:	4619      	mov	r1, r3
 800307a:	480c      	ldr	r0, [pc, #48]	; (80030ac <HAL_I2C_MspInit+0x174>)
 800307c:	f000 ffba 	bl	8003ff4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003080:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <HAL_I2C_MspInit+0x16c>)
 8003082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003084:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <HAL_I2C_MspInit+0x16c>)
 8003086:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800308a:	6593      	str	r3, [r2, #88]	; 0x58
 800308c:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <HAL_I2C_MspInit+0x16c>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003090:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
}
 8003098:	bf00      	nop
 800309a:	3788      	adds	r7, #136	; 0x88
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40005400 	.word	0x40005400
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40005c00 	.word	0x40005c00
 80030ac:	48000400 	.word	0x48000400

080030b0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b098      	sub	sp, #96	; 0x60
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030b8:	f107 030c 	add.w	r3, r7, #12
 80030bc:	2254      	movs	r2, #84	; 0x54
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f006 fa86 	bl	80095d2 <memset>
  if(hlptim->Instance==LPTIM1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a11      	ldr	r2, [pc, #68]	; (8003110 <HAL_LPTIM_MspInit+0x60>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d11a      	bne.n	8003106 <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80030d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030d4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030da:	f107 030c 	add.w	r3, r7, #12
 80030de:	4618      	mov	r0, r3
 80030e0:	f002 fd0c 	bl	8005afc <HAL_RCCEx_PeriphCLKConfig>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 80030ea:	f7fe fac9 	bl	8001680 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_LPTIM_MspInit+0x64>)
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	4a08      	ldr	r2, [pc, #32]	; (8003114 <HAL_LPTIM_MspInit+0x64>)
 80030f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030f8:	6593      	str	r3, [r2, #88]	; 0x58
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_LPTIM_MspInit+0x64>)
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8003106:	bf00      	nop
 8003108:	3760      	adds	r7, #96	; 0x60
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40007c00 	.word	0x40007c00
 8003114:	40021000 	.word	0x40021000

08003118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b09e      	sub	sp, #120	; 0x78
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003130:	f107 0310 	add.w	r3, r7, #16
 8003134:	2254      	movs	r2, #84	; 0x54
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f006 fa4a 	bl	80095d2 <memset>
  if(huart->Instance==LPUART1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a38      	ldr	r2, [pc, #224]	; (8003224 <HAL_UART_MspInit+0x10c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d168      	bne.n	800321a <HAL_UART_MspInit+0x102>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003148:	2320      	movs	r3, #32
 800314a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800314c:	2300      	movs	r3, #0
 800314e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003150:	f107 0310 	add.w	r3, r7, #16
 8003154:	4618      	mov	r0, r3
 8003156:	f002 fcd1 	bl	8005afc <HAL_RCCEx_PeriphCLKConfig>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003160:	f7fe fa8e 	bl	8001680 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003164:	4b30      	ldr	r3, [pc, #192]	; (8003228 <HAL_UART_MspInit+0x110>)
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	4a2f      	ldr	r2, [pc, #188]	; (8003228 <HAL_UART_MspInit+0x110>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003170:	4b2d      	ldr	r3, [pc, #180]	; (8003228 <HAL_UART_MspInit+0x110>)
 8003172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317c:	4b2a      	ldr	r3, [pc, #168]	; (8003228 <HAL_UART_MspInit+0x110>)
 800317e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003180:	4a29      	ldr	r2, [pc, #164]	; (8003228 <HAL_UART_MspInit+0x110>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003188:	4b27      	ldr	r3, [pc, #156]	; (8003228 <HAL_UART_MspInit+0x110>)
 800318a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003194:	230c      	movs	r3, #12
 8003196:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003198:	2302      	movs	r3, #2
 800319a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a0:	2303      	movs	r3, #3
 80031a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80031a4:	2308      	movs	r3, #8
 80031a6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80031ac:	4619      	mov	r1, r3
 80031ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031b2:	f000 ff1f 	bl	8003ff4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 80031b6:	4b1d      	ldr	r3, [pc, #116]	; (800322c <HAL_UART_MspInit+0x114>)
 80031b8:	4a1d      	ldr	r2, [pc, #116]	; (8003230 <HAL_UART_MspInit+0x118>)
 80031ba:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 80031bc:	4b1b      	ldr	r3, [pc, #108]	; (800322c <HAL_UART_MspInit+0x114>)
 80031be:	2204      	movs	r2, #4
 80031c0:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031c2:	4b1a      	ldr	r3, [pc, #104]	; (800322c <HAL_UART_MspInit+0x114>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c8:	4b18      	ldr	r3, [pc, #96]	; (800322c <HAL_UART_MspInit+0x114>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031ce:	4b17      	ldr	r3, [pc, #92]	; (800322c <HAL_UART_MspInit+0x114>)
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031d4:	4b15      	ldr	r3, [pc, #84]	; (800322c <HAL_UART_MspInit+0x114>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <HAL_UART_MspInit+0x114>)
 80031dc:	2200      	movs	r2, #0
 80031de:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_CIRCULAR;
 80031e0:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_UART_MspInit+0x114>)
 80031e2:	2220      	movs	r2, #32
 80031e4:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <HAL_UART_MspInit+0x114>)
 80031e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 80031ee:	480f      	ldr	r0, [pc, #60]	; (800322c <HAL_UART_MspInit+0x114>)
 80031f0:	f000 fc7e 	bl	8003af0 <HAL_DMA_Init>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80031fa:	f7fe fa41 	bl	8001680 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart_rx);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a0a      	ldr	r2, [pc, #40]	; (800322c <HAL_UART_MspInit+0x114>)
 8003202:	675a      	str	r2, [r3, #116]	; 0x74
 8003204:	4a09      	ldr	r2, [pc, #36]	; (800322c <HAL_UART_MspInit+0x114>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800320a:	2200      	movs	r2, #0
 800320c:	2100      	movs	r1, #0
 800320e:	2046      	movs	r0, #70	; 0x46
 8003210:	f000 faef 	bl	80037f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003214:	2046      	movs	r0, #70	; 0x46
 8003216:	f000 fb08 	bl	800382a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800321a:	bf00      	nop
 800321c:	3778      	adds	r7, #120	; 0x78
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40008000 	.word	0x40008000
 8003228:	40021000 	.word	0x40021000
 800322c:	20000380 	.word	0x20000380
 8003230:	40020480 	.word	0x40020480

08003234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003238:	e7fe      	b.n	8003238 <NMI_Handler+0x4>
	...

0800323c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_Fill(Black);
 8003240:	2000      	movs	r0, #0
 8003242:	f7fe fe8b 	bl	8001f5c <ssd1306_Fill>
	  ssd1306_SetCursor(33, 36);
 8003246:	2124      	movs	r1, #36	; 0x24
 8003248:	2021      	movs	r0, #33	; 0x21
 800324a:	f7fe ffc9 	bl	80021e0 <ssd1306_SetCursor>
	  ssd1306_WriteString("rincee en", Font_6x8, White);
 800324e:	4a09      	ldr	r2, [pc, #36]	; (8003274 <HardFault_Handler+0x38>)
 8003250:	2301      	movs	r3, #1
 8003252:	ca06      	ldmia	r2, {r1, r2}
 8003254:	4808      	ldr	r0, [pc, #32]	; (8003278 <HardFault_Handler+0x3c>)
 8003256:	f7fe ff9d 	bl	8002194 <ssd1306_WriteString>
	  ssd1306_SetCursor(33, 46);
 800325a:	212e      	movs	r1, #46	; 0x2e
 800325c:	2021      	movs	r0, #33	; 0x21
 800325e:	f7fe ffbf 	bl	80021e0 <ssd1306_SetCursor>
	  ssd1306_WriteString("code", Font_6x8, White);
 8003262:	4a04      	ldr	r2, [pc, #16]	; (8003274 <HardFault_Handler+0x38>)
 8003264:	2301      	movs	r3, #1
 8003266:	ca06      	ldmia	r2, {r1, r2}
 8003268:	4804      	ldr	r0, [pc, #16]	; (800327c <HardFault_Handler+0x40>)
 800326a:	f7fe ff93 	bl	8002194 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 800326e:	f7fe fe8d 	bl	8001f8c <ssd1306_UpdateScreen>
	  ssd1306_Fill(Black);
 8003272:	e7e5      	b.n	8003240 <HardFault_Handler+0x4>
 8003274:	20000000 	.word	0x20000000
 8003278:	0800c2ec 	.word	0x0800c2ec
 800327c:	0800c2f8 	.word	0x0800c2f8

08003280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003284:	e7fe      	b.n	8003284 <MemManage_Handler+0x4>

08003286 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800328a:	e7fe      	b.n	800328a <BusFault_Handler+0x4>

0800328c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003290:	e7fe      	b.n	8003290 <UsageFault_Handler+0x4>

08003292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032c0:	f000 f978 	bl	80035b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032c4:	bf00      	nop
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80032cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80032d0:	f001 f812 	bl	80042f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80032d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80032d8:	f001 f80e 	bl	80042f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}

080032e0 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 80032e4:	4802      	ldr	r0, [pc, #8]	; (80032f0 <DMA2_Channel7_IRQHandler+0x10>)
 80032e6:	f000 fd9a 	bl	8003e1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000380 	.word	0x20000380

080032f4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <LPUART1_IRQHandler+0x10>)
 80032fa:	f003 f87d 	bl	80063f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	200002f8 	.word	0x200002f8

08003308 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return 1;
 800330c:	2301      	movs	r3, #1
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <_kill>:

int _kill(int pid, int sig)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003322:	f006 fa3d 	bl	80097a0 <__errno>
 8003326:	4603      	mov	r3, r0
 8003328:	2216      	movs	r2, #22
 800332a:	601a      	str	r2, [r3, #0]
  return -1;
 800332c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <_exit>:

void _exit (int status)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003340:	f04f 31ff 	mov.w	r1, #4294967295
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff ffe7 	bl	8003318 <_kill>
  while (1) {}    /* Make sure we hang here */
 800334a:	e7fe      	b.n	800334a <_exit+0x12>

0800334c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	e00a      	b.n	8003374 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800335e:	f3af 8000 	nop.w
 8003362:	4601      	mov	r1, r0
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	1c5a      	adds	r2, r3, #1
 8003368:	60ba      	str	r2, [r7, #8]
 800336a:	b2ca      	uxtb	r2, r1
 800336c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	3301      	adds	r3, #1
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	429a      	cmp	r2, r3
 800337a:	dbf0      	blt.n	800335e <_read+0x12>
  }

  return len;
 800337c:	687b      	ldr	r3, [r7, #4]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b086      	sub	sp, #24
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	e009      	b.n	80033ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	60ba      	str	r2, [r7, #8]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3301      	adds	r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	dbf1      	blt.n	8003398 <_write+0x12>
  }
  return len;
 80033b4:	687b      	ldr	r3, [r7, #4]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <_close>:

int _close(int file)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033e6:	605a      	str	r2, [r3, #4]
  return 0;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <_isatty>:

int _isatty(int file)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033fe:	2301      	movs	r3, #1
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003430:	4a14      	ldr	r2, [pc, #80]	; (8003484 <_sbrk+0x5c>)
 8003432:	4b15      	ldr	r3, [pc, #84]	; (8003488 <_sbrk+0x60>)
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800343c:	4b13      	ldr	r3, [pc, #76]	; (800348c <_sbrk+0x64>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <_sbrk+0x64>)
 8003446:	4a12      	ldr	r2, [pc, #72]	; (8003490 <_sbrk+0x68>)
 8003448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <_sbrk+0x64>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4413      	add	r3, r2
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	429a      	cmp	r2, r3
 8003456:	d207      	bcs.n	8003468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003458:	f006 f9a2 	bl	80097a0 <__errno>
 800345c:	4603      	mov	r3, r0
 800345e:	220c      	movs	r2, #12
 8003460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
 8003466:	e009      	b.n	800347c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003468:	4b08      	ldr	r3, [pc, #32]	; (800348c <_sbrk+0x64>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800346e:	4b07      	ldr	r3, [pc, #28]	; (800348c <_sbrk+0x64>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4413      	add	r3, r2
 8003476:	4a05      	ldr	r2, [pc, #20]	; (800348c <_sbrk+0x64>)
 8003478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800347a:	68fb      	ldr	r3, [r7, #12]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20010000 	.word	0x20010000
 8003488:	00000400 	.word	0x00000400
 800348c:	20000ae4 	.word	0x20000ae4
 8003490:	20000c38 	.word	0x20000c38

08003494 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <SystemInit+0x20>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349e:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <SystemInit+0x20>)
 80034a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80034b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034bc:	f7ff ffea 	bl	8003494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034c0:	480c      	ldr	r0, [pc, #48]	; (80034f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80034c2:	490d      	ldr	r1, [pc, #52]	; (80034f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034c4:	4a0d      	ldr	r2, [pc, #52]	; (80034fc <LoopForever+0xe>)
  movs r3, #0
 80034c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034c8:	e002      	b.n	80034d0 <LoopCopyDataInit>

080034ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ce:	3304      	adds	r3, #4

080034d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034d4:	d3f9      	bcc.n	80034ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034d6:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034d8:	4c0a      	ldr	r4, [pc, #40]	; (8003504 <LoopForever+0x16>)
  movs r3, #0
 80034da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034dc:	e001      	b.n	80034e2 <LoopFillZerobss>

080034de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034e0:	3204      	adds	r2, #4

080034e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034e4:	d3fb      	bcc.n	80034de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034e6:	f006 f961 	bl	80097ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034ea:	f7fd fe7f 	bl	80011ec <main>

080034ee <LoopForever>:

LoopForever:
    b LoopForever
 80034ee:	e7fe      	b.n	80034ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80034f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80034f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034f8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80034fc:	0800dd28 	.word	0x0800dd28
  ldr r2, =_sbss
 8003500:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003504:	20000c38 	.word	0x20000c38

08003508 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003508:	e7fe      	b.n	8003508 <ADC1_IRQHandler>

0800350a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003514:	2003      	movs	r0, #3
 8003516:	f000 f961 	bl	80037dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800351a:	200f      	movs	r0, #15
 800351c:	f000 f80e 	bl	800353c <HAL_InitTick>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	71fb      	strb	r3, [r7, #7]
 800352a:	e001      	b.n	8003530 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800352c:	f7ff fca2 	bl	8002e74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003530:	79fb      	ldrb	r3, [r7, #7]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003548:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <HAL_InitTick+0x6c>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d023      	beq.n	8003598 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003550:	4b16      	ldr	r3, [pc, #88]	; (80035ac <HAL_InitTick+0x70>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <HAL_InitTick+0x6c>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	4619      	mov	r1, r3
 800355a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800355e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003562:	fbb2 f3f3 	udiv	r3, r2, r3
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f96d 	bl	8003846 <HAL_SYSTICK_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10f      	bne.n	8003592 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b0f      	cmp	r3, #15
 8003576:	d809      	bhi.n	800358c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003578:	2200      	movs	r2, #0
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	f04f 30ff 	mov.w	r0, #4294967295
 8003580:	f000 f937 	bl	80037f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003584:	4a0a      	ldr	r2, [pc, #40]	; (80035b0 <HAL_InitTick+0x74>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e007      	b.n	800359c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
 8003590:	e004      	b.n	800359c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
 8003596:	e001      	b.n	800359c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000018 	.word	0x20000018
 80035ac:	20000010 	.word	0x20000010
 80035b0:	20000014 	.word	0x20000014

080035b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <HAL_IncTick+0x20>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_IncTick+0x24>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4413      	add	r3, r2
 80035c4:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <HAL_IncTick+0x24>)
 80035c6:	6013      	str	r3, [r2, #0]
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000018 	.word	0x20000018
 80035d8:	20000ae8 	.word	0x20000ae8

080035dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return uwTick;
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <HAL_GetTick+0x14>)
 80035e2:	681b      	ldr	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000ae8 	.word	0x20000ae8

080035f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035fc:	f7ff ffee 	bl	80035dc <HAL_GetTick>
 8003600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d005      	beq.n	800361a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <HAL_Delay+0x44>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800361a:	bf00      	nop
 800361c:	f7ff ffde 	bl	80035dc <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	429a      	cmp	r2, r3
 800362a:	d8f7      	bhi.n	800361c <HAL_Delay+0x28>
  {
  }
}
 800362c:	bf00      	nop
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000018 	.word	0x20000018

0800363c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <__NVIC_SetPriorityGrouping+0x44>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003658:	4013      	ands	r3, r2
 800365a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800366c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800366e:	4a04      	ldr	r2, [pc, #16]	; (8003680 <__NVIC_SetPriorityGrouping+0x44>)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	60d3      	str	r3, [r2, #12]
}
 8003674:	bf00      	nop
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003688:	4b04      	ldr	r3, [pc, #16]	; (800369c <__NVIC_GetPriorityGrouping+0x18>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	0a1b      	lsrs	r3, r3, #8
 800368e:	f003 0307 	and.w	r3, r3, #7
}
 8003692:	4618      	mov	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	db0b      	blt.n	80036ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	f003 021f 	and.w	r2, r3, #31
 80036b8:	4907      	ldr	r1, [pc, #28]	; (80036d8 <__NVIC_EnableIRQ+0x38>)
 80036ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	2001      	movs	r0, #1
 80036c2:	fa00 f202 	lsl.w	r2, r0, r2
 80036c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	e000e100 	.word	0xe000e100

080036dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	6039      	str	r1, [r7, #0]
 80036e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	db0a      	blt.n	8003706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	490c      	ldr	r1, [pc, #48]	; (8003728 <__NVIC_SetPriority+0x4c>)
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	0112      	lsls	r2, r2, #4
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	440b      	add	r3, r1
 8003700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003704:	e00a      	b.n	800371c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4908      	ldr	r1, [pc, #32]	; (800372c <__NVIC_SetPriority+0x50>)
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	3b04      	subs	r3, #4
 8003714:	0112      	lsls	r2, r2, #4
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	440b      	add	r3, r1
 800371a:	761a      	strb	r2, [r3, #24]
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	e000e100 	.word	0xe000e100
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003730:	b480      	push	{r7}
 8003732:	b089      	sub	sp, #36	; 0x24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f1c3 0307 	rsb	r3, r3, #7
 800374a:	2b04      	cmp	r3, #4
 800374c:	bf28      	it	cs
 800374e:	2304      	movcs	r3, #4
 8003750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3304      	adds	r3, #4
 8003756:	2b06      	cmp	r3, #6
 8003758:	d902      	bls.n	8003760 <NVIC_EncodePriority+0x30>
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3b03      	subs	r3, #3
 800375e:	e000      	b.n	8003762 <NVIC_EncodePriority+0x32>
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003764:	f04f 32ff 	mov.w	r2, #4294967295
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43da      	mvns	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	401a      	ands	r2, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003778:	f04f 31ff 	mov.w	r1, #4294967295
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	fa01 f303 	lsl.w	r3, r1, r3
 8003782:	43d9      	mvns	r1, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003788:	4313      	orrs	r3, r2
         );
}
 800378a:	4618      	mov	r0, r3
 800378c:	3724      	adds	r7, #36	; 0x24
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037a8:	d301      	bcc.n	80037ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037aa:	2301      	movs	r3, #1
 80037ac:	e00f      	b.n	80037ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ae:	4a0a      	ldr	r2, [pc, #40]	; (80037d8 <SysTick_Config+0x40>)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037b6:	210f      	movs	r1, #15
 80037b8:	f04f 30ff 	mov.w	r0, #4294967295
 80037bc:	f7ff ff8e 	bl	80036dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <SysTick_Config+0x40>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037c6:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <SysTick_Config+0x40>)
 80037c8:	2207      	movs	r2, #7
 80037ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	e000e010 	.word	0xe000e010

080037dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff ff29 	bl	800363c <__NVIC_SetPriorityGrouping>
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b086      	sub	sp, #24
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	4603      	mov	r3, r0
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003804:	f7ff ff3e 	bl	8003684 <__NVIC_GetPriorityGrouping>
 8003808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	6978      	ldr	r0, [r7, #20]
 8003810:	f7ff ff8e 	bl	8003730 <NVIC_EncodePriority>
 8003814:	4602      	mov	r2, r0
 8003816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff ff5d 	bl	80036dc <__NVIC_SetPriority>
}
 8003822:	bf00      	nop
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	4603      	mov	r3, r0
 8003832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff ff31 	bl	80036a0 <__NVIC_EnableIRQ>
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ffa2 	bl	8003798 <SysTick_Config>
 8003854:	4603      	mov	r3, r0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b082      	sub	sp, #8
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e014      	b.n	800389a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	791b      	ldrb	r3, [r3, #4]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d105      	bne.n	8003886 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff fb1b 	bl	8002ebc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2202      	movs	r2, #2
 800388a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b088      	sub	sp, #32
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	795b      	ldrb	r3, [r3, #5]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_DAC_ConfigChannel+0x1c>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e114      	b.n	8003ae8 <HAL_DAC_ConfigChannel+0x246>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2202      	movs	r2, #2
 80038c8:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	f040 8081 	bne.w	80039d6 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80038d4:	f7ff fe82 	bl	80035dc <HAL_GetTick>
 80038d8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d140      	bne.n	8003962 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80038e0:	e018      	b.n	8003914 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80038e2:	f7ff fe7b 	bl	80035dc <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d911      	bls.n	8003914 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f043 0208 	orr.w	r2, r3, #8
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2203      	movs	r2, #3
 800390e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e0e9      	b.n	8003ae8 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1df      	bne.n	80038e2 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003922:	2001      	movs	r0, #1
 8003924:	f7ff fe66 	bl	80035f4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	6992      	ldr	r2, [r2, #24]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
 8003932:	e023      	b.n	800397c <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003934:	f7ff fe52 	bl	80035dc <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b01      	cmp	r3, #1
 8003940:	d90f      	bls.n	8003962 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003948:	2b00      	cmp	r3, #0
 800394a:	da0a      	bge.n	8003962 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f043 0208 	orr.w	r2, r3, #8
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2203      	movs	r2, #3
 800395c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e0c2      	b.n	8003ae8 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003968:	2b00      	cmp	r3, #0
 800396a:	dbe3      	blt.n	8003934 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800396c:	2001      	movs	r0, #1
 800396e:	f7ff fe41 	bl	80035f4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	6992      	ldr	r2, [r2, #24]
 800397a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	ea02 0103 	and.w	r1, r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	69da      	ldr	r2, [r3, #28]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	409a      	lsls	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	21ff      	movs	r1, #255	; 0xff
 80039b8:	fa01 f303 	lsl.w	r3, r1, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	ea02 0103 	and.w	r1, r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	6a1a      	ldr	r2, [r3, #32]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	409a      	lsls	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d11d      	bne.n	8003a1a <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	221f      	movs	r2, #31
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4013      	ands	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a20:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2207      	movs	r2, #7
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6819      	ldr	r1, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f003 0310 	and.w	r3, r3, #16
 8003a6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43da      	mvns	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	400a      	ands	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6819      	ldr	r1, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	22c0      	movs	r2, #192	; 0xc0
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43da      	mvns	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e098      	b.n	8003c34 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	4b4d      	ldr	r3, [pc, #308]	; (8003c40 <HAL_DMA_Init+0x150>)
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d80f      	bhi.n	8003b2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	4b4b      	ldr	r3, [pc, #300]	; (8003c44 <HAL_DMA_Init+0x154>)
 8003b16:	4413      	add	r3, r2
 8003b18:	4a4b      	ldr	r2, [pc, #300]	; (8003c48 <HAL_DMA_Init+0x158>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	091b      	lsrs	r3, r3, #4
 8003b20:	009a      	lsls	r2, r3, #2
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a48      	ldr	r2, [pc, #288]	; (8003c4c <HAL_DMA_Init+0x15c>)
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40
 8003b2c:	e00e      	b.n	8003b4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	4b46      	ldr	r3, [pc, #280]	; (8003c50 <HAL_DMA_Init+0x160>)
 8003b36:	4413      	add	r3, r2
 8003b38:	4a43      	ldr	r2, [pc, #268]	; (8003c48 <HAL_DMA_Init+0x158>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	009a      	lsls	r2, r3, #2
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a42      	ldr	r2, [pc, #264]	; (8003c54 <HAL_DMA_Init+0x164>)
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba6:	d039      	beq.n	8003c1c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	4a27      	ldr	r2, [pc, #156]	; (8003c4c <HAL_DMA_Init+0x15c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d11a      	bne.n	8003be8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003bb2:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <HAL_DMA_Init+0x168>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	f003 031c 	and.w	r3, r3, #28
 8003bbe:	210f      	movs	r1, #15
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	4924      	ldr	r1, [pc, #144]	; (8003c58 <HAL_DMA_Init+0x168>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003bcc:	4b22      	ldr	r3, [pc, #136]	; (8003c58 <HAL_DMA_Init+0x168>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd8:	f003 031c 	and.w	r3, r3, #28
 8003bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003be0:	491d      	ldr	r1, [pc, #116]	; (8003c58 <HAL_DMA_Init+0x168>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]
 8003be6:	e019      	b.n	8003c1c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003be8:	4b1c      	ldr	r3, [pc, #112]	; (8003c5c <HAL_DMA_Init+0x16c>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf0:	f003 031c 	and.w	r3, r3, #28
 8003bf4:	210f      	movs	r1, #15
 8003bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	4917      	ldr	r1, [pc, #92]	; (8003c5c <HAL_DMA_Init+0x16c>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c02:	4b16      	ldr	r3, [pc, #88]	; (8003c5c <HAL_DMA_Init+0x16c>)
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6859      	ldr	r1, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	f003 031c 	and.w	r3, r3, #28
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	4911      	ldr	r1, [pc, #68]	; (8003c5c <HAL_DMA_Init+0x16c>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	40020407 	.word	0x40020407
 8003c44:	bffdfff8 	.word	0xbffdfff8
 8003c48:	cccccccd 	.word	0xcccccccd
 8003c4c:	40020000 	.word	0x40020000
 8003c50:	bffdfbf8 	.word	0xbffdfbf8
 8003c54:	40020400 	.word	0x40020400
 8003c58:	400200a8 	.word	0x400200a8
 8003c5c:	400204a8 	.word	0x400204a8

08003c60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_DMA_Start_IT+0x20>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e04b      	b.n	8003d18 <HAL_DMA_Start_IT+0xb8>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d13a      	bne.n	8003d0a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0201 	bic.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f96b 	bl	8003f94 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d008      	beq.n	8003cd8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 020e 	orr.w	r2, r2, #14
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e00f      	b.n	8003cf8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0204 	bic.w	r2, r2, #4
 8003ce6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 020a 	orr.w	r2, r2, #10
 8003cf6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	e005      	b.n	8003d16 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d12:	2302      	movs	r3, #2
 8003d14:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d008      	beq.n	8003d4a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2204      	movs	r2, #4
 8003d3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e022      	b.n	8003d90 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 020e 	bic.w	r2, r2, #14
 8003d58:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0201 	bic.w	r2, r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	f003 021c 	and.w	r2, r3, #28
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	2101      	movs	r1, #1
 8003d78:	fa01 f202 	lsl.w	r2, r1, r2
 8003d7c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d005      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2204      	movs	r2, #4
 8003db8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	73fb      	strb	r3, [r7, #15]
 8003dbe:	e029      	b.n	8003e14 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 020e 	bic.w	r2, r2, #14
 8003dce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0201 	bic.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de4:	f003 021c 	and.w	r2, r3, #28
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	2101      	movs	r1, #1
 8003dee:	fa01 f202 	lsl.w	r2, r1, r2
 8003df2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	4798      	blx	r3
    }
  }
  return status;
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	f003 031c 	and.w	r3, r3, #28
 8003e3e:	2204      	movs	r2, #4
 8003e40:	409a      	lsls	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d026      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x7a>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d021      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d107      	bne.n	8003e72 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0204 	bic.w	r2, r2, #4
 8003e70:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	f003 021c 	and.w	r2, r3, #28
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	2104      	movs	r1, #4
 8003e80:	fa01 f202 	lsl.w	r2, r1, r2
 8003e84:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d071      	beq.n	8003f72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e96:	e06c      	b.n	8003f72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9c:	f003 031c 	and.w	r3, r3, #28
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d02e      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xec>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d029      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10b      	bne.n	8003edc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 020a 	bic.w	r2, r2, #10
 8003ed2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee0:	f003 021c 	and.w	r2, r3, #28
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	2102      	movs	r1, #2
 8003eea:	fa01 f202 	lsl.w	r2, r1, r2
 8003eee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d038      	beq.n	8003f72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f08:	e033      	b.n	8003f72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	f003 031c 	and.w	r3, r3, #28
 8003f12:	2208      	movs	r2, #8
 8003f14:	409a      	lsls	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d02a      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x156>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d025      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 020e 	bic.w	r2, r2, #14
 8003f36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3c:	f003 021c 	and.w	r2, r3, #28
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	2101      	movs	r1, #1
 8003f46:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d004      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f72:	bf00      	nop
 8003f74:	bf00      	nop
}
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	f003 021c 	and.w	r2, r3, #28
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	2101      	movs	r1, #1
 8003fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b10      	cmp	r3, #16
 8003fc4:	d108      	bne.n	8003fd8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003fd6:	e007      	b.n	8003fe8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	60da      	str	r2, [r3, #12]
}
 8003fe8:	bf00      	nop
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004002:	e148      	b.n	8004296 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	2101      	movs	r1, #1
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	fa01 f303 	lsl.w	r3, r1, r3
 8004010:	4013      	ands	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 813a 	beq.w	8004290 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	2b01      	cmp	r3, #1
 8004026:	d005      	beq.n	8004034 <HAL_GPIO_Init+0x40>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d130      	bne.n	8004096 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	2203      	movs	r2, #3
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	43db      	mvns	r3, r3
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4013      	ands	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800406a:	2201      	movs	r2, #1
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4013      	ands	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	f003 0201 	and.w	r2, r3, #1
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d017      	beq.n	80040d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	2203      	movs	r2, #3
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	43db      	mvns	r3, r3
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4013      	ands	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d123      	bne.n	8004126 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	08da      	lsrs	r2, r3, #3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3208      	adds	r2, #8
 80040e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	220f      	movs	r2, #15
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43db      	mvns	r3, r3
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4013      	ands	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	691a      	ldr	r2, [r3, #16]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	08da      	lsrs	r2, r3, #3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3208      	adds	r2, #8
 8004120:	6939      	ldr	r1, [r7, #16]
 8004122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	2203      	movs	r2, #3
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43db      	mvns	r3, r3
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4013      	ands	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 0203 	and.w	r2, r3, #3
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8094 	beq.w	8004290 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004168:	4b52      	ldr	r3, [pc, #328]	; (80042b4 <HAL_GPIO_Init+0x2c0>)
 800416a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800416c:	4a51      	ldr	r2, [pc, #324]	; (80042b4 <HAL_GPIO_Init+0x2c0>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	6613      	str	r3, [r2, #96]	; 0x60
 8004174:	4b4f      	ldr	r3, [pc, #316]	; (80042b4 <HAL_GPIO_Init+0x2c0>)
 8004176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004180:	4a4d      	ldr	r2, [pc, #308]	; (80042b8 <HAL_GPIO_Init+0x2c4>)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	089b      	lsrs	r3, r3, #2
 8004186:	3302      	adds	r3, #2
 8004188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800418c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	220f      	movs	r2, #15
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	43db      	mvns	r3, r3
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4013      	ands	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041aa:	d00d      	beq.n	80041c8 <HAL_GPIO_Init+0x1d4>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a43      	ldr	r2, [pc, #268]	; (80042bc <HAL_GPIO_Init+0x2c8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d007      	beq.n	80041c4 <HAL_GPIO_Init+0x1d0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a42      	ldr	r2, [pc, #264]	; (80042c0 <HAL_GPIO_Init+0x2cc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d101      	bne.n	80041c0 <HAL_GPIO_Init+0x1cc>
 80041bc:	2302      	movs	r3, #2
 80041be:	e004      	b.n	80041ca <HAL_GPIO_Init+0x1d6>
 80041c0:	2307      	movs	r3, #7
 80041c2:	e002      	b.n	80041ca <HAL_GPIO_Init+0x1d6>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <HAL_GPIO_Init+0x1d6>
 80041c8:	2300      	movs	r3, #0
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	f002 0203 	and.w	r2, r2, #3
 80041d0:	0092      	lsls	r2, r2, #2
 80041d2:	4093      	lsls	r3, r2
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041da:	4937      	ldr	r1, [pc, #220]	; (80042b8 <HAL_GPIO_Init+0x2c4>)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	089b      	lsrs	r3, r3, #2
 80041e0:	3302      	adds	r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041e8:	4b36      	ldr	r3, [pc, #216]	; (80042c4 <HAL_GPIO_Init+0x2d0>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	43db      	mvns	r3, r3
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4013      	ands	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800420c:	4a2d      	ldr	r2, [pc, #180]	; (80042c4 <HAL_GPIO_Init+0x2d0>)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004212:	4b2c      	ldr	r3, [pc, #176]	; (80042c4 <HAL_GPIO_Init+0x2d0>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	43db      	mvns	r3, r3
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4013      	ands	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004236:	4a23      	ldr	r2, [pc, #140]	; (80042c4 <HAL_GPIO_Init+0x2d0>)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800423c:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <HAL_GPIO_Init+0x2d0>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	43db      	mvns	r3, r3
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4013      	ands	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004260:	4a18      	ldr	r2, [pc, #96]	; (80042c4 <HAL_GPIO_Init+0x2d0>)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004266:	4b17      	ldr	r3, [pc, #92]	; (80042c4 <HAL_GPIO_Init+0x2d0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	43db      	mvns	r3, r3
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4013      	ands	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800428a:	4a0e      	ldr	r2, [pc, #56]	; (80042c4 <HAL_GPIO_Init+0x2d0>)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	3301      	adds	r3, #1
 8004294:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f47f aeaf 	bne.w	8004004 <HAL_GPIO_Init+0x10>
  }
}
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40010000 	.word	0x40010000
 80042bc:	48000400 	.word	0x48000400
 80042c0:	48000800 	.word	0x48000800
 80042c4:	40010400 	.word	0x40010400

080042c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	807b      	strh	r3, [r7, #2]
 80042d4:	4613      	mov	r3, r2
 80042d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042d8:	787b      	ldrb	r3, [r7, #1]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042de:	887a      	ldrh	r2, [r7, #2]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042e4:	e002      	b.n	80042ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042e6:	887a      	ldrh	r2, [r7, #2]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004302:	4b08      	ldr	r3, [pc, #32]	; (8004324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	4013      	ands	r3, r2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d006      	beq.n	800431c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800430e:	4a05      	ldr	r2, [pc, #20]	; (8004324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004310:	88fb      	ldrh	r3, [r7, #6]
 8004312:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	4618      	mov	r0, r3
 8004318:	f7fc fed8 	bl	80010cc <HAL_GPIO_EXTI_Callback>
  }
}
 800431c:	bf00      	nop
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40010400 	.word	0x40010400

08004328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e08d      	b.n	8004456 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fe fdf2 	bl	8002f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2224      	movs	r2, #36	; 0x24
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0201 	bic.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004378:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004388:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d107      	bne.n	80043a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	e006      	b.n	80043b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80043ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d108      	bne.n	80043ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	e007      	b.n	80043da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69d9      	ldr	r1, [r3, #28]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1a      	ldr	r2, [r3, #32]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	4608      	mov	r0, r1
 800446a:	4611      	mov	r1, r2
 800446c:	461a      	mov	r2, r3
 800446e:	4603      	mov	r3, r0
 8004470:	817b      	strh	r3, [r7, #10]
 8004472:	460b      	mov	r3, r1
 8004474:	813b      	strh	r3, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b20      	cmp	r3, #32
 8004484:	f040 80f9 	bne.w	800467a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_I2C_Mem_Write+0x34>
 800448e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004490:	2b00      	cmp	r3, #0
 8004492:	d105      	bne.n	80044a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800449a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e0ed      	b.n	800467c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_I2C_Mem_Write+0x4e>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e0e6      	b.n	800467c <HAL_I2C_Mem_Write+0x21c>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044b6:	f7ff f891 	bl	80035dc <HAL_GetTick>
 80044ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	2319      	movs	r3, #25
 80044c2:	2201      	movs	r2, #1
 80044c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f955 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0d1      	b.n	800467c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2221      	movs	r2, #33	; 0x21
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2240      	movs	r2, #64	; 0x40
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6a3a      	ldr	r2, [r7, #32]
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004500:	88f8      	ldrh	r0, [r7, #6]
 8004502:	893a      	ldrh	r2, [r7, #8]
 8004504:	8979      	ldrh	r1, [r7, #10]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	4603      	mov	r3, r0
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f8b9 	bl	8004688 <I2C_RequestMemoryWrite>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e0a9      	b.n	800467c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452c:	b29b      	uxth	r3, r3
 800452e:	2bff      	cmp	r3, #255	; 0xff
 8004530:	d90e      	bls.n	8004550 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	22ff      	movs	r2, #255	; 0xff
 8004536:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453c:	b2da      	uxtb	r2, r3
 800453e:	8979      	ldrh	r1, [r7, #10]
 8004540:	2300      	movs	r3, #0
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 facf 	bl	8004aec <I2C_TransferConfig>
 800454e:	e00f      	b.n	8004570 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455e:	b2da      	uxtb	r2, r3
 8004560:	8979      	ldrh	r1, [r7, #10]
 8004562:	2300      	movs	r3, #0
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 fabe 	bl	8004aec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f94e 	bl	8004816 <I2C_WaitOnTXISFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e07b      	b.n	800467c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	781a      	ldrb	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d034      	beq.n	8004628 <HAL_I2C_Mem_Write+0x1c8>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d130      	bne.n	8004628 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	2200      	movs	r2, #0
 80045ce:	2180      	movs	r1, #128	; 0x80
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f8d1 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e04d      	b.n	800467c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2bff      	cmp	r3, #255	; 0xff
 80045e8:	d90e      	bls.n	8004608 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	22ff      	movs	r2, #255	; 0xff
 80045ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	8979      	ldrh	r1, [r7, #10]
 80045f8:	2300      	movs	r3, #0
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 fa73 	bl	8004aec <I2C_TransferConfig>
 8004606:	e00f      	b.n	8004628 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004616:	b2da      	uxtb	r2, r3
 8004618:	8979      	ldrh	r1, [r7, #10]
 800461a:	2300      	movs	r3, #0
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fa62 	bl	8004aec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d19e      	bne.n	8004570 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f934 	bl	80048a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e01a      	b.n	800467c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2220      	movs	r2, #32
 800464c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6859      	ldr	r1, [r3, #4]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <HAL_I2C_Mem_Write+0x224>)
 800465a:	400b      	ands	r3, r1
 800465c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	e000      	b.n	800467c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800467a:	2302      	movs	r3, #2
  }
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	fe00e800 	.word	0xfe00e800

08004688 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af02      	add	r7, sp, #8
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	4608      	mov	r0, r1
 8004692:	4611      	mov	r1, r2
 8004694:	461a      	mov	r2, r3
 8004696:	4603      	mov	r3, r0
 8004698:	817b      	strh	r3, [r7, #10]
 800469a:	460b      	mov	r3, r1
 800469c:	813b      	strh	r3, [r7, #8]
 800469e:	4613      	mov	r3, r2
 80046a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	8979      	ldrh	r1, [r7, #10]
 80046a8:	4b20      	ldr	r3, [pc, #128]	; (800472c <I2C_RequestMemoryWrite+0xa4>)
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fa1b 	bl	8004aec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	69b9      	ldr	r1, [r7, #24]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f8ab 	bl	8004816 <I2C_WaitOnTXISFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e02c      	b.n	8004724 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046ca:	88fb      	ldrh	r3, [r7, #6]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d105      	bne.n	80046dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046d0:	893b      	ldrh	r3, [r7, #8]
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	629a      	str	r2, [r3, #40]	; 0x28
 80046da:	e015      	b.n	8004708 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80046dc:	893b      	ldrh	r3, [r7, #8]
 80046de:	0a1b      	lsrs	r3, r3, #8
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	69b9      	ldr	r1, [r7, #24]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f891 	bl	8004816 <I2C_WaitOnTXISFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e012      	b.n	8004724 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046fe:	893b      	ldrh	r3, [r7, #8]
 8004700:	b2da      	uxtb	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2200      	movs	r2, #0
 8004710:	2180      	movs	r1, #128	; 0x80
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f830 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	80002000 	.word	0x80002000

08004730 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b02      	cmp	r3, #2
 8004744:	d103      	bne.n	800474e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2200      	movs	r2, #0
 800474c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b01      	cmp	r3, #1
 800475a:	d007      	beq.n	800476c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	619a      	str	r2, [r3, #24]
  }
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	4613      	mov	r3, r2
 8004786:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004788:	e031      	b.n	80047ee <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004790:	d02d      	beq.n	80047ee <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004792:	f7fe ff23 	bl	80035dc <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d302      	bcc.n	80047a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d122      	bne.n	80047ee <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	4013      	ands	r3, r2
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	bf0c      	ite	eq
 80047b8:	2301      	moveq	r3, #1
 80047ba:	2300      	movne	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	79fb      	ldrb	r3, [r7, #7]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d113      	bne.n	80047ee <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	f043 0220 	orr.w	r2, r3, #32
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e00f      	b.n	800480e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699a      	ldr	r2, [r3, #24]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4013      	ands	r3, r2
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	bf0c      	ite	eq
 80047fe:	2301      	moveq	r3, #1
 8004800:	2300      	movne	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	79fb      	ldrb	r3, [r7, #7]
 8004808:	429a      	cmp	r2, r3
 800480a:	d0be      	beq.n	800478a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004822:	e033      	b.n	800488c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	68b9      	ldr	r1, [r7, #8]
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f87f 	bl	800492c <I2C_IsErrorOccurred>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e031      	b.n	800489c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483e:	d025      	beq.n	800488c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004840:	f7fe fecc 	bl	80035dc <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	429a      	cmp	r2, r3
 800484e:	d302      	bcc.n	8004856 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d11a      	bne.n	800488c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b02      	cmp	r3, #2
 8004862:	d013      	beq.n	800488c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004868:	f043 0220 	orr.w	r2, r3, #32
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e007      	b.n	800489c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b02      	cmp	r3, #2
 8004898:	d1c4      	bne.n	8004824 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048b0:	e02f      	b.n	8004912 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f838 	bl	800492c <I2C_IsErrorOccurred>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e02d      	b.n	8004922 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c6:	f7fe fe89 	bl	80035dc <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d302      	bcc.n	80048dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d11a      	bne.n	8004912 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d013      	beq.n	8004912 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e007      	b.n	8004922 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b20      	cmp	r3, #32
 800491e:	d1c8      	bne.n	80048b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	; 0x28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004946:	2300      	movs	r3, #0
 8004948:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b00      	cmp	r3, #0
 8004956:	d068      	beq.n	8004a2a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2210      	movs	r2, #16
 800495e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004960:	e049      	b.n	80049f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004968:	d045      	beq.n	80049f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800496a:	f7fe fe37 	bl	80035dc <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	429a      	cmp	r2, r3
 8004978:	d302      	bcc.n	8004980 <I2C_IsErrorOccurred+0x54>
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d13a      	bne.n	80049f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004992:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800499e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a2:	d121      	bne.n	80049e8 <I2C_IsErrorOccurred+0xbc>
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049aa:	d01d      	beq.n	80049e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80049ac:	7cfb      	ldrb	r3, [r7, #19]
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	d01a      	beq.n	80049e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80049c2:	f7fe fe0b 	bl	80035dc <HAL_GetTick>
 80049c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049c8:	e00e      	b.n	80049e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80049ca:	f7fe fe07 	bl	80035dc <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b19      	cmp	r3, #25
 80049d6:	d907      	bls.n	80049e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	f043 0320 	orr.w	r3, r3, #32
 80049de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80049e6:	e006      	b.n	80049f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d1e9      	bne.n	80049ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	d003      	beq.n	8004a0c <I2C_IsErrorOccurred+0xe0>
 8004a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0aa      	beq.n	8004962 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d103      	bne.n	8004a1c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	f043 0304 	orr.w	r3, r3, #4
 8004a22:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00b      	beq.n	8004a54 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	f043 0301 	orr.w	r3, r3, #1
 8004a42:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	f043 0308 	orr.w	r3, r3, #8
 8004a64:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00b      	beq.n	8004a98 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	f043 0302 	orr.w	r3, r3, #2
 8004a86:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01c      	beq.n	8004ada <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f7ff fe45 	bl	8004730 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6859      	ldr	r1, [r3, #4]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <I2C_IsErrorOccurred+0x1bc>)
 8004ab2:	400b      	ands	r3, r1
 8004ab4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	431a      	orrs	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3728      	adds	r7, #40	; 0x28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	fe00e800 	.word	0xfe00e800

08004aec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	607b      	str	r3, [r7, #4]
 8004af6:	460b      	mov	r3, r1
 8004af8:	817b      	strh	r3, [r7, #10]
 8004afa:	4613      	mov	r3, r2
 8004afc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004afe:	897b      	ldrh	r3, [r7, #10]
 8004b00:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b04:	7a7b      	ldrb	r3, [r7, #9]
 8004b06:	041b      	lsls	r3, r3, #16
 8004b08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b0c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b1a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	0d5b      	lsrs	r3, r3, #21
 8004b26:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004b2a:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <I2C_TransferConfig+0x60>)
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	ea02 0103 	and.w	r1, r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b3e:	bf00      	nop
 8004b40:	371c      	adds	r7, #28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	03ff63ff 	.word	0x03ff63ff

08004b50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d138      	bne.n	8004bd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e032      	b.n	8004bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2224      	movs	r2, #36	; 0x24
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0201 	bic.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ba2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6819      	ldr	r1, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	e000      	b.n	8004bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004bd8:	2302      	movs	r3, #2
  }
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d139      	bne.n	8004c70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e033      	b.n	8004c72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2224      	movs	r2, #36	; 0x24
 8004c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0201 	bic.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e000      	b.n	8004c72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c70:	2302      	movs	r3, #2
  }
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e08f      	b.n	8004db2 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d106      	bne.n	8004cb2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7fe f9ff 	bl	80030b0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d004      	beq.n	8004cd4 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cd2:	d103      	bne.n	8004cdc <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 031e 	bic.w	r3, r3, #30
 8004cda:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d005      	beq.n	8004cf4 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004cee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4b31      	ldr	r3, [pc, #196]	; (8004dbc <HAL_LPTIM_Init+0x13c>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004d04:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004d0a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004d10:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004d16:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d107      	bne.n	8004d36 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d004      	beq.n	8004d48 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d46:	d107      	bne.n	8004d58 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004d50:	4313      	orrs	r3, r2
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00a      	beq.n	8004d7a <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004d6c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004d72:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a0e      	ldr	r2, [pc, #56]	; (8004dc0 <HAL_LPTIM_Init+0x140>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d108      	bne.n	8004d9e <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	621a      	str	r2, [r3, #32]
 8004d9c:	e004      	b.n	8004da8 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004da6:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	ff19f1fe 	.word	0xff19f1fe
 8004dc0:	40007c00 	.word	0x40007c00

08004dc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004dc8:	4b04      	ldr	r3, [pc, #16]	; (8004ddc <HAL_PWREx_GetVoltageRange+0x18>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40007000 	.word	0x40007000

08004de0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dee:	d130      	bne.n	8004e52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004df0:	4b23      	ldr	r3, [pc, #140]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dfc:	d038      	beq.n	8004e70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dfe:	4b20      	ldr	r3, [pc, #128]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e06:	4a1e      	ldr	r2, [pc, #120]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e0e:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2232      	movs	r2, #50	; 0x32
 8004e14:	fb02 f303 	mul.w	r3, r2, r3
 8004e18:	4a1b      	ldr	r2, [pc, #108]	; (8004e88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	0c9b      	lsrs	r3, r3, #18
 8004e20:	3301      	adds	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e24:	e002      	b.n	8004e2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e2c:	4b14      	ldr	r3, [pc, #80]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e38:	d102      	bne.n	8004e40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1f2      	bne.n	8004e26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e40:	4b0f      	ldr	r3, [pc, #60]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4c:	d110      	bne.n	8004e70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e00f      	b.n	8004e72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e52:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e5e:	d007      	beq.n	8004e70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e60:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e68:	4a05      	ldr	r2, [pc, #20]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40007000 	.word	0x40007000
 8004e84:	20000010 	.word	0x20000010
 8004e88:	431bde83 	.word	0x431bde83

08004e8c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d102      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f000 bc02 	b.w	80056a4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ea0:	4b96      	ldr	r3, [pc, #600]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 030c 	and.w	r3, r3, #12
 8004ea8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eaa:	4b94      	ldr	r3, [pc, #592]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80e4 	beq.w	800508a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d007      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x4c>
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	2b0c      	cmp	r3, #12
 8004ecc:	f040 808b 	bne.w	8004fe6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	f040 8087 	bne.w	8004fe6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ed8:	4b88      	ldr	r3, [pc, #544]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x64>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e3d9      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1a      	ldr	r2, [r3, #32]
 8004ef4:	4b81      	ldr	r3, [pc, #516]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d004      	beq.n	8004f0a <HAL_RCC_OscConfig+0x7e>
 8004f00:	4b7e      	ldr	r3, [pc, #504]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f08:	e005      	b.n	8004f16 <HAL_RCC_OscConfig+0x8a>
 8004f0a:	4b7c      	ldr	r3, [pc, #496]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d223      	bcs.n	8004f62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fd8c 	bl	8005a3c <RCC_SetFlashLatencyFromMSIRange>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e3ba      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f2e:	4b73      	ldr	r3, [pc, #460]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a72      	ldr	r2, [pc, #456]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004f34:	f043 0308 	orr.w	r3, r3, #8
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	4b70      	ldr	r3, [pc, #448]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	496d      	ldr	r1, [pc, #436]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f4c:	4b6b      	ldr	r3, [pc, #428]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	021b      	lsls	r3, r3, #8
 8004f5a:	4968      	ldr	r1, [pc, #416]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	604b      	str	r3, [r1, #4]
 8004f60:	e025      	b.n	8004fae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f62:	4b66      	ldr	r3, [pc, #408]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a65      	ldr	r2, [pc, #404]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004f68:	f043 0308 	orr.w	r3, r3, #8
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	4b63      	ldr	r3, [pc, #396]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	4960      	ldr	r1, [pc, #384]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f80:	4b5e      	ldr	r3, [pc, #376]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	495b      	ldr	r1, [pc, #364]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fd4c 	bl	8005a3c <RCC_SetFlashLatencyFromMSIRange>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e37a      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fae:	f000 fc81 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	4b51      	ldr	r3, [pc, #324]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	091b      	lsrs	r3, r3, #4
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	4950      	ldr	r1, [pc, #320]	; (8005100 <HAL_RCC_OscConfig+0x274>)
 8004fc0:	5ccb      	ldrb	r3, [r1, r3]
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fca:	4a4e      	ldr	r2, [pc, #312]	; (8005104 <HAL_RCC_OscConfig+0x278>)
 8004fcc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004fce:	4b4e      	ldr	r3, [pc, #312]	; (8005108 <HAL_RCC_OscConfig+0x27c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fe fab2 	bl	800353c <HAL_InitTick>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d052      	beq.n	8005088 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	e35e      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d032      	beq.n	8005054 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004fee:	4b43      	ldr	r3, [pc, #268]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a42      	ldr	r2, [pc, #264]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ffa:	f7fe faef 	bl	80035dc <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005002:	f7fe faeb 	bl	80035dc <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e347      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005014:	4b39      	ldr	r3, [pc, #228]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f0      	beq.n	8005002 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005020:	4b36      	ldr	r3, [pc, #216]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a35      	ldr	r2, [pc, #212]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8005026:	f043 0308 	orr.w	r3, r3, #8
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	4b33      	ldr	r3, [pc, #204]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	4930      	ldr	r1, [pc, #192]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 800503a:	4313      	orrs	r3, r2
 800503c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800503e:	4b2f      	ldr	r3, [pc, #188]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	492b      	ldr	r1, [pc, #172]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 800504e:	4313      	orrs	r3, r2
 8005050:	604b      	str	r3, [r1, #4]
 8005052:	e01a      	b.n	800508a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005054:	4b29      	ldr	r3, [pc, #164]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a28      	ldr	r2, [pc, #160]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 800505a:	f023 0301 	bic.w	r3, r3, #1
 800505e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005060:	f7fe fabc 	bl	80035dc <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005068:	f7fe fab8 	bl	80035dc <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e314      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800507a:	4b20      	ldr	r3, [pc, #128]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x1dc>
 8005086:	e000      	b.n	800508a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005088:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d073      	beq.n	800517e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d005      	beq.n	80050a8 <HAL_RCC_OscConfig+0x21c>
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2b0c      	cmp	r3, #12
 80050a0:	d10e      	bne.n	80050c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d10b      	bne.n	80050c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a8:	4b14      	ldr	r3, [pc, #80]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d063      	beq.n	800517c <HAL_RCC_OscConfig+0x2f0>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d15f      	bne.n	800517c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e2f1      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c8:	d106      	bne.n	80050d8 <HAL_RCC_OscConfig+0x24c>
 80050ca:	4b0c      	ldr	r3, [pc, #48]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a0b      	ldr	r2, [pc, #44]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 80050d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	e025      	b.n	8005124 <HAL_RCC_OscConfig+0x298>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050e0:	d114      	bne.n	800510c <HAL_RCC_OscConfig+0x280>
 80050e2:	4b06      	ldr	r3, [pc, #24]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a05      	ldr	r2, [pc, #20]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 80050e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	4b03      	ldr	r3, [pc, #12]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a02      	ldr	r2, [pc, #8]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 80050f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	e013      	b.n	8005124 <HAL_RCC_OscConfig+0x298>
 80050fc:	40021000 	.word	0x40021000
 8005100:	0800d84c 	.word	0x0800d84c
 8005104:	20000010 	.word	0x20000010
 8005108:	20000014 	.word	0x20000014
 800510c:	4ba0      	ldr	r3, [pc, #640]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a9f      	ldr	r2, [pc, #636]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 8005112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	4b9d      	ldr	r3, [pc, #628]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a9c      	ldr	r2, [pc, #624]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 800511e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d013      	beq.n	8005154 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512c:	f7fe fa56 	bl	80035dc <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005134:	f7fe fa52 	bl	80035dc <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b64      	cmp	r3, #100	; 0x64
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e2ae      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005146:	4b92      	ldr	r3, [pc, #584]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0f0      	beq.n	8005134 <HAL_RCC_OscConfig+0x2a8>
 8005152:	e014      	b.n	800517e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005154:	f7fe fa42 	bl	80035dc <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800515c:	f7fe fa3e 	bl	80035dc <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b64      	cmp	r3, #100	; 0x64
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e29a      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800516e:	4b88      	ldr	r3, [pc, #544]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x2d0>
 800517a:	e000      	b.n	800517e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800517c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d060      	beq.n	800524c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b04      	cmp	r3, #4
 800518e:	d005      	beq.n	800519c <HAL_RCC_OscConfig+0x310>
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	2b0c      	cmp	r3, #12
 8005194:	d119      	bne.n	80051ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d116      	bne.n	80051ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800519c:	4b7c      	ldr	r3, [pc, #496]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <HAL_RCC_OscConfig+0x328>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e277      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b4:	4b76      	ldr	r3, [pc, #472]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	061b      	lsls	r3, r3, #24
 80051c2:	4973      	ldr	r1, [pc, #460]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051c8:	e040      	b.n	800524c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d023      	beq.n	800521a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051d2:	4b6f      	ldr	r3, [pc, #444]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a6e      	ldr	r2, [pc, #440]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 80051d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051de:	f7fe f9fd 	bl	80035dc <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051e6:	f7fe f9f9 	bl	80035dc <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e255      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051f8:	4b65      	ldr	r3, [pc, #404]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0f0      	beq.n	80051e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005204:	4b62      	ldr	r3, [pc, #392]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	061b      	lsls	r3, r3, #24
 8005212:	495f      	ldr	r1, [pc, #380]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 8005214:	4313      	orrs	r3, r2
 8005216:	604b      	str	r3, [r1, #4]
 8005218:	e018      	b.n	800524c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800521a:	4b5d      	ldr	r3, [pc, #372]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a5c      	ldr	r2, [pc, #368]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 8005220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005226:	f7fe f9d9 	bl	80035dc <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800522e:	f7fe f9d5 	bl	80035dc <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e231      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005240:	4b53      	ldr	r3, [pc, #332]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1f0      	bne.n	800522e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d03c      	beq.n	80052d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01c      	beq.n	800529a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005260:	4b4b      	ldr	r3, [pc, #300]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 8005262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005266:	4a4a      	ldr	r2, [pc, #296]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 8005268:	f043 0301 	orr.w	r3, r3, #1
 800526c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005270:	f7fe f9b4 	bl	80035dc <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005278:	f7fe f9b0 	bl	80035dc <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e20c      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800528a:	4b41      	ldr	r3, [pc, #260]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 800528c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0ef      	beq.n	8005278 <HAL_RCC_OscConfig+0x3ec>
 8005298:	e01b      	b.n	80052d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800529a:	4b3d      	ldr	r3, [pc, #244]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 800529c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a0:	4a3b      	ldr	r2, [pc, #236]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 80052a2:	f023 0301 	bic.w	r3, r3, #1
 80052a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052aa:	f7fe f997 	bl	80035dc <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052b2:	f7fe f993 	bl	80035dc <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e1ef      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052c4:	4b32      	ldr	r3, [pc, #200]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 80052c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1ef      	bne.n	80052b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 80a6 	beq.w	800542c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052e0:	2300      	movs	r3, #0
 80052e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80052e4:	4b2a      	ldr	r3, [pc, #168]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 80052e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10d      	bne.n	800530c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f0:	4b27      	ldr	r3, [pc, #156]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 80052f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f4:	4a26      	ldr	r2, [pc, #152]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 80052f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fa:	6593      	str	r3, [r2, #88]	; 0x58
 80052fc:	4b24      	ldr	r3, [pc, #144]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005308:	2301      	movs	r3, #1
 800530a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800530c:	4b21      	ldr	r3, [pc, #132]	; (8005394 <HAL_RCC_OscConfig+0x508>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005314:	2b00      	cmp	r3, #0
 8005316:	d118      	bne.n	800534a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005318:	4b1e      	ldr	r3, [pc, #120]	; (8005394 <HAL_RCC_OscConfig+0x508>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a1d      	ldr	r2, [pc, #116]	; (8005394 <HAL_RCC_OscConfig+0x508>)
 800531e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005322:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005324:	f7fe f95a 	bl	80035dc <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532c:	f7fe f956 	bl	80035dc <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e1b2      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800533e:	4b15      	ldr	r3, [pc, #84]	; (8005394 <HAL_RCC_OscConfig+0x508>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d108      	bne.n	8005364 <HAL_RCC_OscConfig+0x4d8>
 8005352:	4b0f      	ldr	r3, [pc, #60]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 8005354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005358:	4a0d      	ldr	r2, [pc, #52]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005362:	e029      	b.n	80053b8 <HAL_RCC_OscConfig+0x52c>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	2b05      	cmp	r3, #5
 800536a:	d115      	bne.n	8005398 <HAL_RCC_OscConfig+0x50c>
 800536c:	4b08      	ldr	r3, [pc, #32]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005372:	4a07      	ldr	r2, [pc, #28]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 8005374:	f043 0304 	orr.w	r3, r3, #4
 8005378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800537c:	4b04      	ldr	r3, [pc, #16]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005382:	4a03      	ldr	r2, [pc, #12]	; (8005390 <HAL_RCC_OscConfig+0x504>)
 8005384:	f043 0301 	orr.w	r3, r3, #1
 8005388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800538c:	e014      	b.n	80053b8 <HAL_RCC_OscConfig+0x52c>
 800538e:	bf00      	nop
 8005390:	40021000 	.word	0x40021000
 8005394:	40007000 	.word	0x40007000
 8005398:	4b9a      	ldr	r3, [pc, #616]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 800539a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539e:	4a99      	ldr	r2, [pc, #612]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 80053a0:	f023 0301 	bic.w	r3, r3, #1
 80053a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053a8:	4b96      	ldr	r3, [pc, #600]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ae:	4a95      	ldr	r2, [pc, #596]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 80053b0:	f023 0304 	bic.w	r3, r3, #4
 80053b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d016      	beq.n	80053ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c0:	f7fe f90c 	bl	80035dc <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053c6:	e00a      	b.n	80053de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c8:	f7fe f908 	bl	80035dc <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e162      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053de:	4b89      	ldr	r3, [pc, #548]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 80053e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0ed      	beq.n	80053c8 <HAL_RCC_OscConfig+0x53c>
 80053ec:	e015      	b.n	800541a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ee:	f7fe f8f5 	bl	80035dc <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053f4:	e00a      	b.n	800540c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f6:	f7fe f8f1 	bl	80035dc <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	f241 3288 	movw	r2, #5000	; 0x1388
 8005404:	4293      	cmp	r3, r2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e14b      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800540c:	4b7d      	ldr	r3, [pc, #500]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1ed      	bne.n	80053f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800541a:	7ffb      	ldrb	r3, [r7, #31]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d105      	bne.n	800542c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005420:	4b78      	ldr	r3, [pc, #480]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 8005422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005424:	4a77      	ldr	r2, [pc, #476]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 8005426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800542a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b00      	cmp	r3, #0
 8005436:	d03c      	beq.n	80054b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01c      	beq.n	800547a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005440:	4b70      	ldr	r3, [pc, #448]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 8005442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005446:	4a6f      	ldr	r2, [pc, #444]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 8005448:	f043 0301 	orr.w	r3, r3, #1
 800544c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005450:	f7fe f8c4 	bl	80035dc <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005458:	f7fe f8c0 	bl	80035dc <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e11c      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800546a:	4b66      	ldr	r3, [pc, #408]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 800546c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0ef      	beq.n	8005458 <HAL_RCC_OscConfig+0x5cc>
 8005478:	e01b      	b.n	80054b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800547a:	4b62      	ldr	r3, [pc, #392]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 800547c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005480:	4a60      	ldr	r2, [pc, #384]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 8005482:	f023 0301 	bic.w	r3, r3, #1
 8005486:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548a:	f7fe f8a7 	bl	80035dc <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005492:	f7fe f8a3 	bl	80035dc <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e0ff      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054a4:	4b57      	ldr	r3, [pc, #348]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 80054a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1ef      	bne.n	8005492 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 80f3 	beq.w	80056a2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	f040 80c9 	bne.w	8005658 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80054c6:	4b4f      	ldr	r3, [pc, #316]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f003 0203 	and.w	r2, r3, #3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d12c      	bne.n	8005534 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	3b01      	subs	r3, #1
 80054e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d123      	bne.n	8005534 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d11b      	bne.n	8005534 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005508:	429a      	cmp	r2, r3
 800550a:	d113      	bne.n	8005534 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005516:	085b      	lsrs	r3, r3, #1
 8005518:	3b01      	subs	r3, #1
 800551a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800551c:	429a      	cmp	r2, r3
 800551e:	d109      	bne.n	8005534 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	3b01      	subs	r3, #1
 800552e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005530:	429a      	cmp	r2, r3
 8005532:	d06b      	beq.n	800560c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2b0c      	cmp	r3, #12
 8005538:	d062      	beq.n	8005600 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800553a:	4b32      	ldr	r3, [pc, #200]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e0ac      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800554a:	4b2e      	ldr	r3, [pc, #184]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a2d      	ldr	r2, [pc, #180]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 8005550:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005554:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005556:	f7fe f841 	bl	80035dc <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800555e:	f7fe f83d 	bl	80035dc <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e099      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005570:	4b24      	ldr	r3, [pc, #144]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1f0      	bne.n	800555e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800557c:	4b21      	ldr	r3, [pc, #132]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	4b21      	ldr	r3, [pc, #132]	; (8005608 <HAL_RCC_OscConfig+0x77c>)
 8005582:	4013      	ands	r3, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800558c:	3a01      	subs	r2, #1
 800558e:	0112      	lsls	r2, r2, #4
 8005590:	4311      	orrs	r1, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005596:	0212      	lsls	r2, r2, #8
 8005598:	4311      	orrs	r1, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800559e:	0852      	lsrs	r2, r2, #1
 80055a0:	3a01      	subs	r2, #1
 80055a2:	0552      	lsls	r2, r2, #21
 80055a4:	4311      	orrs	r1, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055aa:	0852      	lsrs	r2, r2, #1
 80055ac:	3a01      	subs	r2, #1
 80055ae:	0652      	lsls	r2, r2, #25
 80055b0:	4311      	orrs	r1, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055b6:	06d2      	lsls	r2, r2, #27
 80055b8:	430a      	orrs	r2, r1
 80055ba:	4912      	ldr	r1, [pc, #72]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80055c0:	4b10      	ldr	r3, [pc, #64]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a0f      	ldr	r2, [pc, #60]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 80055c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055cc:	4b0d      	ldr	r3, [pc, #52]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4a0c      	ldr	r2, [pc, #48]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 80055d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055d8:	f7fe f800 	bl	80035dc <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e0:	f7fd fffc 	bl	80035dc <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e058      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055f2:	4b04      	ldr	r3, [pc, #16]	; (8005604 <HAL_RCC_OscConfig+0x778>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055fe:	e050      	b.n	80056a2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e04f      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
 8005604:	40021000 	.word	0x40021000
 8005608:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800560c:	4b27      	ldr	r3, [pc, #156]	; (80056ac <HAL_RCC_OscConfig+0x820>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d144      	bne.n	80056a2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005618:	4b24      	ldr	r3, [pc, #144]	; (80056ac <HAL_RCC_OscConfig+0x820>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a23      	ldr	r2, [pc, #140]	; (80056ac <HAL_RCC_OscConfig+0x820>)
 800561e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005622:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005624:	4b21      	ldr	r3, [pc, #132]	; (80056ac <HAL_RCC_OscConfig+0x820>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	4a20      	ldr	r2, [pc, #128]	; (80056ac <HAL_RCC_OscConfig+0x820>)
 800562a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800562e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005630:	f7fd ffd4 	bl	80035dc <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005638:	f7fd ffd0 	bl	80035dc <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e02c      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800564a:	4b18      	ldr	r3, [pc, #96]	; (80056ac <HAL_RCC_OscConfig+0x820>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0f0      	beq.n	8005638 <HAL_RCC_OscConfig+0x7ac>
 8005656:	e024      	b.n	80056a2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	2b0c      	cmp	r3, #12
 800565c:	d01f      	beq.n	800569e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800565e:	4b13      	ldr	r3, [pc, #76]	; (80056ac <HAL_RCC_OscConfig+0x820>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a12      	ldr	r2, [pc, #72]	; (80056ac <HAL_RCC_OscConfig+0x820>)
 8005664:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566a:	f7fd ffb7 	bl	80035dc <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005672:	f7fd ffb3 	bl	80035dc <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e00f      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005684:	4b09      	ldr	r3, [pc, #36]	; (80056ac <HAL_RCC_OscConfig+0x820>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1f0      	bne.n	8005672 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005690:	4b06      	ldr	r3, [pc, #24]	; (80056ac <HAL_RCC_OscConfig+0x820>)
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	4905      	ldr	r1, [pc, #20]	; (80056ac <HAL_RCC_OscConfig+0x820>)
 8005696:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 8005698:	4013      	ands	r3, r2
 800569a:	60cb      	str	r3, [r1, #12]
 800569c:	e001      	b.n	80056a2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3720      	adds	r7, #32
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40021000 	.word	0x40021000
 80056b0:	feeefffc 	.word	0xfeeefffc

080056b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0e7      	b.n	8005898 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056c8:	4b75      	ldr	r3, [pc, #468]	; (80058a0 <HAL_RCC_ClockConfig+0x1ec>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d910      	bls.n	80056f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d6:	4b72      	ldr	r3, [pc, #456]	; (80058a0 <HAL_RCC_ClockConfig+0x1ec>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f023 0207 	bic.w	r2, r3, #7
 80056de:	4970      	ldr	r1, [pc, #448]	; (80058a0 <HAL_RCC_ClockConfig+0x1ec>)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e6:	4b6e      	ldr	r3, [pc, #440]	; (80058a0 <HAL_RCC_ClockConfig+0x1ec>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d001      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0cf      	b.n	8005898 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d010      	beq.n	8005726 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	4b66      	ldr	r3, [pc, #408]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005710:	429a      	cmp	r2, r3
 8005712:	d908      	bls.n	8005726 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005714:	4b63      	ldr	r3, [pc, #396]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	4960      	ldr	r1, [pc, #384]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005722:	4313      	orrs	r3, r2
 8005724:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d04c      	beq.n	80057cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b03      	cmp	r3, #3
 8005738:	d107      	bne.n	800574a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800573a:	4b5a      	ldr	r3, [pc, #360]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d121      	bne.n	800578a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e0a6      	b.n	8005898 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b02      	cmp	r3, #2
 8005750:	d107      	bne.n	8005762 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005752:	4b54      	ldr	r3, [pc, #336]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d115      	bne.n	800578a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e09a      	b.n	8005898 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d107      	bne.n	800577a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800576a:	4b4e      	ldr	r3, [pc, #312]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e08e      	b.n	8005898 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800577a:	4b4a      	ldr	r3, [pc, #296]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e086      	b.n	8005898 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800578a:	4b46      	ldr	r3, [pc, #280]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f023 0203 	bic.w	r2, r3, #3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4943      	ldr	r1, [pc, #268]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005798:	4313      	orrs	r3, r2
 800579a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800579c:	f7fd ff1e 	bl	80035dc <HAL_GetTick>
 80057a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a2:	e00a      	b.n	80057ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a4:	f7fd ff1a 	bl	80035dc <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e06e      	b.n	8005898 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ba:	4b3a      	ldr	r3, [pc, #232]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 020c 	and.w	r2, r3, #12
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d1eb      	bne.n	80057a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d010      	beq.n	80057fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	4b31      	ldr	r3, [pc, #196]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d208      	bcs.n	80057fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057e8:	4b2e      	ldr	r3, [pc, #184]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	492b      	ldr	r1, [pc, #172]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057fa:	4b29      	ldr	r3, [pc, #164]	; (80058a0 <HAL_RCC_ClockConfig+0x1ec>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d210      	bcs.n	800582a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005808:	4b25      	ldr	r3, [pc, #148]	; (80058a0 <HAL_RCC_ClockConfig+0x1ec>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f023 0207 	bic.w	r2, r3, #7
 8005810:	4923      	ldr	r1, [pc, #140]	; (80058a0 <HAL_RCC_ClockConfig+0x1ec>)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	4313      	orrs	r3, r2
 8005816:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005818:	4b21      	ldr	r3, [pc, #132]	; (80058a0 <HAL_RCC_ClockConfig+0x1ec>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d001      	beq.n	800582a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e036      	b.n	8005898 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d008      	beq.n	8005848 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005836:	4b1b      	ldr	r3, [pc, #108]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	4918      	ldr	r1, [pc, #96]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005844:	4313      	orrs	r3, r2
 8005846:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b00      	cmp	r3, #0
 8005852:	d009      	beq.n	8005868 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005854:	4b13      	ldr	r3, [pc, #76]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4910      	ldr	r1, [pc, #64]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005864:	4313      	orrs	r3, r2
 8005866:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005868:	f000 f824 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
 800586c:	4602      	mov	r2, r0
 800586e:	4b0d      	ldr	r3, [pc, #52]	; (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	091b      	lsrs	r3, r3, #4
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	490b      	ldr	r1, [pc, #44]	; (80058a8 <HAL_RCC_ClockConfig+0x1f4>)
 800587a:	5ccb      	ldrb	r3, [r1, r3]
 800587c:	f003 031f 	and.w	r3, r3, #31
 8005880:	fa22 f303 	lsr.w	r3, r2, r3
 8005884:	4a09      	ldr	r2, [pc, #36]	; (80058ac <HAL_RCC_ClockConfig+0x1f8>)
 8005886:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005888:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <HAL_RCC_ClockConfig+0x1fc>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4618      	mov	r0, r3
 800588e:	f7fd fe55 	bl	800353c <HAL_InitTick>
 8005892:	4603      	mov	r3, r0
 8005894:	72fb      	strb	r3, [r7, #11]

  return status;
 8005896:	7afb      	ldrb	r3, [r7, #11]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40022000 	.word	0x40022000
 80058a4:	40021000 	.word	0x40021000
 80058a8:	0800d84c 	.word	0x0800d84c
 80058ac:	20000010 	.word	0x20000010
 80058b0:	20000014 	.word	0x20000014

080058b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b089      	sub	sp, #36	; 0x24
 80058b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61fb      	str	r3, [r7, #28]
 80058be:	2300      	movs	r3, #0
 80058c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058c2:	4b3e      	ldr	r3, [pc, #248]	; (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 030c 	and.w	r3, r3, #12
 80058ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058cc:	4b3b      	ldr	r3, [pc, #236]	; (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0x34>
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b0c      	cmp	r3, #12
 80058e0:	d121      	bne.n	8005926 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d11e      	bne.n	8005926 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80058e8:	4b34      	ldr	r3, [pc, #208]	; (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d107      	bne.n	8005904 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058f4:	4b31      	ldr	r3, [pc, #196]	; (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 80058f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	e005      	b.n	8005910 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005904:	4b2d      	ldr	r3, [pc, #180]	; (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	091b      	lsrs	r3, r3, #4
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005910:	4a2b      	ldr	r2, [pc, #172]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005918:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10d      	bne.n	800593c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005924:	e00a      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2b04      	cmp	r3, #4
 800592a:	d102      	bne.n	8005932 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800592c:	4b25      	ldr	r3, [pc, #148]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800592e:	61bb      	str	r3, [r7, #24]
 8005930:	e004      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	2b08      	cmp	r3, #8
 8005936:	d101      	bne.n	800593c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005938:	4b23      	ldr	r3, [pc, #140]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800593a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b0c      	cmp	r3, #12
 8005940:	d134      	bne.n	80059ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005942:	4b1e      	ldr	r3, [pc, #120]	; (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b02      	cmp	r3, #2
 8005950:	d003      	beq.n	800595a <HAL_RCC_GetSysClockFreq+0xa6>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b03      	cmp	r3, #3
 8005956:	d003      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0xac>
 8005958:	e005      	b.n	8005966 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800595a:	4b1a      	ldr	r3, [pc, #104]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800595c:	617b      	str	r3, [r7, #20]
      break;
 800595e:	e005      	b.n	800596c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005960:	4b19      	ldr	r3, [pc, #100]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005962:	617b      	str	r3, [r7, #20]
      break;
 8005964:	e002      	b.n	800596c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	617b      	str	r3, [r7, #20]
      break;
 800596a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800596c:	4b13      	ldr	r3, [pc, #76]	; (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	091b      	lsrs	r3, r3, #4
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	3301      	adds	r3, #1
 8005978:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800597a:	4b10      	ldr	r3, [pc, #64]	; (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	0a1b      	lsrs	r3, r3, #8
 8005980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	fb03 f202 	mul.w	r2, r3, r2
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005990:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005992:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	0e5b      	lsrs	r3, r3, #25
 8005998:	f003 0303 	and.w	r3, r3, #3
 800599c:	3301      	adds	r3, #1
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80059ac:	69bb      	ldr	r3, [r7, #24]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3724      	adds	r7, #36	; 0x24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40021000 	.word	0x40021000
 80059c0:	0800d864 	.word	0x0800d864
 80059c4:	00f42400 	.word	0x00f42400
 80059c8:	007a1200 	.word	0x007a1200

080059cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059d0:	4b03      	ldr	r3, [pc, #12]	; (80059e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059d2:	681b      	ldr	r3, [r3, #0]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	20000010 	.word	0x20000010

080059e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059e8:	f7ff fff0 	bl	80059cc <HAL_RCC_GetHCLKFreq>
 80059ec:	4602      	mov	r2, r0
 80059ee:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	0a1b      	lsrs	r3, r3, #8
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	4904      	ldr	r1, [pc, #16]	; (8005a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80059fa:	5ccb      	ldrb	r3, [r1, r3]
 80059fc:	f003 031f 	and.w	r3, r3, #31
 8005a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	0800d85c 	.word	0x0800d85c

08005a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a14:	f7ff ffda 	bl	80059cc <HAL_RCC_GetHCLKFreq>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	0adb      	lsrs	r3, r3, #11
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	4904      	ldr	r1, [pc, #16]	; (8005a38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a26:	5ccb      	ldrb	r3, [r1, r3]
 8005a28:	f003 031f 	and.w	r3, r3, #31
 8005a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40021000 	.word	0x40021000
 8005a38:	0800d85c 	.word	0x0800d85c

08005a3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005a44:	2300      	movs	r3, #0
 8005a46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005a48:	4b2a      	ldr	r3, [pc, #168]	; (8005af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a54:	f7ff f9b6 	bl	8004dc4 <HAL_PWREx_GetVoltageRange>
 8005a58:	6178      	str	r0, [r7, #20]
 8005a5a:	e014      	b.n	8005a86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a5c:	4b25      	ldr	r3, [pc, #148]	; (8005af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a60:	4a24      	ldr	r2, [pc, #144]	; (8005af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a66:	6593      	str	r3, [r2, #88]	; 0x58
 8005a68:	4b22      	ldr	r3, [pc, #136]	; (8005af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a74:	f7ff f9a6 	bl	8004dc4 <HAL_PWREx_GetVoltageRange>
 8005a78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a7a:	4b1e      	ldr	r3, [pc, #120]	; (8005af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7e:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a8c:	d10b      	bne.n	8005aa6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b80      	cmp	r3, #128	; 0x80
 8005a92:	d919      	bls.n	8005ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2ba0      	cmp	r3, #160	; 0xa0
 8005a98:	d902      	bls.n	8005aa0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	e013      	b.n	8005ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	613b      	str	r3, [r7, #16]
 8005aa4:	e010      	b.n	8005ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b80      	cmp	r3, #128	; 0x80
 8005aaa:	d902      	bls.n	8005ab2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005aac:	2303      	movs	r3, #3
 8005aae:	613b      	str	r3, [r7, #16]
 8005ab0:	e00a      	b.n	8005ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b80      	cmp	r3, #128	; 0x80
 8005ab6:	d102      	bne.n	8005abe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ab8:	2302      	movs	r3, #2
 8005aba:	613b      	str	r3, [r7, #16]
 8005abc:	e004      	b.n	8005ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b70      	cmp	r3, #112	; 0x70
 8005ac2:	d101      	bne.n	8005ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f023 0207 	bic.w	r2, r3, #7
 8005ad0:	4909      	ldr	r1, [pc, #36]	; (8005af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005ad8:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d001      	beq.n	8005aea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	40021000 	.word	0x40021000
 8005af8:	40022000 	.word	0x40022000

08005afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b04:	2300      	movs	r3, #0
 8005b06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b08:	2300      	movs	r3, #0
 8005b0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d031      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b20:	d01a      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005b22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b26:	d814      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d009      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005b2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b30:	d10f      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005b32:	4b5d      	ldr	r3, [pc, #372]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	4a5c      	ldr	r2, [pc, #368]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b3c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b3e:	e00c      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3304      	adds	r3, #4
 8005b44:	2100      	movs	r1, #0
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 f9ce 	bl	8005ee8 <RCCEx_PLLSAI1_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b50:	e003      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	74fb      	strb	r3, [r7, #19]
      break;
 8005b56:	e000      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005b58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b5a:	7cfb      	ldrb	r3, [r7, #19]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10b      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b60:	4b51      	ldr	r3, [pc, #324]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6e:	494e      	ldr	r1, [pc, #312]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b76:	e001      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b78:	7cfb      	ldrb	r3, [r7, #19]
 8005b7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 809e 	beq.w	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b8e:	4b46      	ldr	r3, [pc, #280]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00d      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba4:	4b40      	ldr	r3, [pc, #256]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba8:	4a3f      	ldr	r2, [pc, #252]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bae:	6593      	str	r3, [r2, #88]	; 0x58
 8005bb0:	4b3d      	ldr	r3, [pc, #244]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb8:	60bb      	str	r3, [r7, #8]
 8005bba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bc0:	4b3a      	ldr	r3, [pc, #232]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a39      	ldr	r2, [pc, #228]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bcc:	f7fd fd06 	bl	80035dc <HAL_GetTick>
 8005bd0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005bd2:	e009      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bd4:	f7fd fd02 	bl	80035dc <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d902      	bls.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	74fb      	strb	r3, [r7, #19]
        break;
 8005be6:	e005      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005be8:	4b30      	ldr	r3, [pc, #192]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0ef      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005bf4:	7cfb      	ldrb	r3, [r7, #19]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d15a      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005bfa:	4b2b      	ldr	r3, [pc, #172]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01e      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d019      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c16:	4b24      	ldr	r3, [pc, #144]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c20:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c22:	4b21      	ldr	r3, [pc, #132]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c28:	4a1f      	ldr	r2, [pc, #124]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c32:	4b1d      	ldr	r3, [pc, #116]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c38:	4a1b      	ldr	r2, [pc, #108]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c42:	4a19      	ldr	r2, [pc, #100]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d016      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c54:	f7fd fcc2 	bl	80035dc <HAL_GetTick>
 8005c58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c5a:	e00b      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5c:	f7fd fcbe 	bl	80035dc <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d902      	bls.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	74fb      	strb	r3, [r7, #19]
            break;
 8005c72:	e006      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c74:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0ec      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005c82:	7cfb      	ldrb	r3, [r7, #19]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10b      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c88:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c96:	4904      	ldr	r1, [pc, #16]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c9e:	e009      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ca0:	7cfb      	ldrb	r3, [r7, #19]
 8005ca2:	74bb      	strb	r3, [r7, #18]
 8005ca4:	e006      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005ca6:	bf00      	nop
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb0:	7cfb      	ldrb	r3, [r7, #19]
 8005cb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cb4:	7c7b      	ldrb	r3, [r7, #17]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d105      	bne.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cba:	4b8a      	ldr	r3, [pc, #552]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cbe:	4a89      	ldr	r2, [pc, #548]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cd2:	4b84      	ldr	r3, [pc, #528]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd8:	f023 0203 	bic.w	r2, r3, #3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	4980      	ldr	r1, [pc, #512]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cf4:	4b7b      	ldr	r3, [pc, #492]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfa:	f023 020c 	bic.w	r2, r3, #12
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	4978      	ldr	r1, [pc, #480]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d16:	4b73      	ldr	r3, [pc, #460]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	496f      	ldr	r1, [pc, #444]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00a      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d38:	4b6a      	ldr	r3, [pc, #424]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d46:	4967      	ldr	r1, [pc, #412]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d5a:	4b62      	ldr	r3, [pc, #392]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	495e      	ldr	r1, [pc, #376]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00a      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d7c:	4b59      	ldr	r3, [pc, #356]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8a:	4956      	ldr	r1, [pc, #344]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d9e:	4b51      	ldr	r3, [pc, #324]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dac:	494d      	ldr	r1, [pc, #308]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d028      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dc0:	4b48      	ldr	r3, [pc, #288]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	4945      	ldr	r1, [pc, #276]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dde:	d106      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005de0:	4b40      	ldr	r3, [pc, #256]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	4a3f      	ldr	r2, [pc, #252]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dea:	60d3      	str	r3, [r2, #12]
 8005dec:	e011      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005df6:	d10c      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 f872 	bl	8005ee8 <RCCEx_PLLSAI1_Config>
 8005e04:	4603      	mov	r3, r0
 8005e06:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005e08:	7cfb      	ldrb	r3, [r7, #19]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005e0e:	7cfb      	ldrb	r3, [r7, #19]
 8005e10:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d028      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e1e:	4b31      	ldr	r3, [pc, #196]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2c:	492d      	ldr	r1, [pc, #180]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e3c:	d106      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e3e:	4b29      	ldr	r3, [pc, #164]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	4a28      	ldr	r2, [pc, #160]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e48:	60d3      	str	r3, [r2, #12]
 8005e4a:	e011      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e54:	d10c      	bne.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 f843 	bl	8005ee8 <RCCEx_PLLSAI1_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e66:	7cfb      	ldrb	r3, [r7, #19]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005e6c:	7cfb      	ldrb	r3, [r7, #19]
 8005e6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d01c      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e7c:	4b19      	ldr	r3, [pc, #100]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e8a:	4916      	ldr	r1, [pc, #88]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e9a:	d10c      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	2102      	movs	r1, #2
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 f820 	bl	8005ee8 <RCCEx_PLLSAI1_Config>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005eac:	7cfb      	ldrb	r3, [r7, #19]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005eb2:	7cfb      	ldrb	r3, [r7, #19]
 8005eb4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ec2:	4b08      	ldr	r3, [pc, #32]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed0:	4904      	ldr	r1, [pc, #16]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ed8:	7cbb      	ldrb	r3, [r7, #18]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40021000 	.word	0x40021000

08005ee8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ef6:	4b74      	ldr	r3, [pc, #464]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d018      	beq.n	8005f34 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f02:	4b71      	ldr	r3, [pc, #452]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0203 	and.w	r2, r3, #3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d10d      	bne.n	8005f2e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
       ||
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d009      	beq.n	8005f2e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005f1a:	4b6b      	ldr	r3, [pc, #428]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	091b      	lsrs	r3, r3, #4
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
       ||
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d047      	beq.n	8005fbe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	73fb      	strb	r3, [r7, #15]
 8005f32:	e044      	b.n	8005fbe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d018      	beq.n	8005f6e <RCCEx_PLLSAI1_Config+0x86>
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d825      	bhi.n	8005f8c <RCCEx_PLLSAI1_Config+0xa4>
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d002      	beq.n	8005f4a <RCCEx_PLLSAI1_Config+0x62>
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d009      	beq.n	8005f5c <RCCEx_PLLSAI1_Config+0x74>
 8005f48:	e020      	b.n	8005f8c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f4a:	4b5f      	ldr	r3, [pc, #380]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d11d      	bne.n	8005f92 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f5a:	e01a      	b.n	8005f92 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f5c:	4b5a      	ldr	r3, [pc, #360]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d116      	bne.n	8005f96 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f6c:	e013      	b.n	8005f96 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f6e:	4b56      	ldr	r3, [pc, #344]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10f      	bne.n	8005f9a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f7a:	4b53      	ldr	r3, [pc, #332]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f8a:	e006      	b.n	8005f9a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f90:	e004      	b.n	8005f9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f92:	bf00      	nop
 8005f94:	e002      	b.n	8005f9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f96:	bf00      	nop
 8005f98:	e000      	b.n	8005f9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10d      	bne.n	8005fbe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005fa2:	4b49      	ldr	r3, [pc, #292]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6819      	ldr	r1, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	430b      	orrs	r3, r1
 8005fb8:	4943      	ldr	r1, [pc, #268]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d17c      	bne.n	80060be <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005fc4:	4b40      	ldr	r3, [pc, #256]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a3f      	ldr	r2, [pc, #252]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd0:	f7fd fb04 	bl	80035dc <HAL_GetTick>
 8005fd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fd6:	e009      	b.n	8005fec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fd8:	f7fd fb00 	bl	80035dc <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d902      	bls.n	8005fec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	73fb      	strb	r3, [r7, #15]
        break;
 8005fea:	e005      	b.n	8005ff8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fec:	4b36      	ldr	r3, [pc, #216]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1ef      	bne.n	8005fd8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d15f      	bne.n	80060be <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d110      	bne.n	8006026 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006004:	4b30      	ldr	r3, [pc, #192]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800600c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6892      	ldr	r2, [r2, #8]
 8006014:	0211      	lsls	r1, r2, #8
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	68d2      	ldr	r2, [r2, #12]
 800601a:	06d2      	lsls	r2, r2, #27
 800601c:	430a      	orrs	r2, r1
 800601e:	492a      	ldr	r1, [pc, #168]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006020:	4313      	orrs	r3, r2
 8006022:	610b      	str	r3, [r1, #16]
 8006024:	e027      	b.n	8006076 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d112      	bne.n	8006052 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800602c:	4b26      	ldr	r3, [pc, #152]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006034:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6892      	ldr	r2, [r2, #8]
 800603c:	0211      	lsls	r1, r2, #8
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6912      	ldr	r2, [r2, #16]
 8006042:	0852      	lsrs	r2, r2, #1
 8006044:	3a01      	subs	r2, #1
 8006046:	0552      	lsls	r2, r2, #21
 8006048:	430a      	orrs	r2, r1
 800604a:	491f      	ldr	r1, [pc, #124]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800604c:	4313      	orrs	r3, r2
 800604e:	610b      	str	r3, [r1, #16]
 8006050:	e011      	b.n	8006076 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006052:	4b1d      	ldr	r3, [pc, #116]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800605a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6892      	ldr	r2, [r2, #8]
 8006062:	0211      	lsls	r1, r2, #8
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6952      	ldr	r2, [r2, #20]
 8006068:	0852      	lsrs	r2, r2, #1
 800606a:	3a01      	subs	r2, #1
 800606c:	0652      	lsls	r2, r2, #25
 800606e:	430a      	orrs	r2, r1
 8006070:	4915      	ldr	r1, [pc, #84]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006072:	4313      	orrs	r3, r2
 8006074:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006076:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a13      	ldr	r2, [pc, #76]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800607c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006080:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006082:	f7fd faab 	bl	80035dc <HAL_GetTick>
 8006086:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006088:	e009      	b.n	800609e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800608a:	f7fd faa7 	bl	80035dc <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d902      	bls.n	800609e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	73fb      	strb	r3, [r7, #15]
          break;
 800609c:	e005      	b.n	80060aa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800609e:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0ef      	beq.n	800608a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d106      	bne.n	80060be <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80060b0:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060b2:	691a      	ldr	r2, [r3, #16]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	4903      	ldr	r1, [pc, #12]	; (80060c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80060be:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40021000 	.word	0x40021000

080060cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e040      	b.n	8006160 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7fd f812 	bl	8003118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2224      	movs	r2, #36	; 0x24
 80060f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0201 	bic.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 feb0 	bl	8006e78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fc81 	bl	8006a20 <UART_SetConfig>
 800611e:	4603      	mov	r3, r0
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e01b      	b.n	8006160 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 ff2f 	bl	8006fbc <UART_CheckIdleState>
 800615e:	4603      	mov	r3, r0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08a      	sub	sp, #40	; 0x28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	4613      	mov	r3, r2
 8006174:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800617c:	2b20      	cmp	r3, #32
 800617e:	d137      	bne.n	80061f0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <HAL_UART_Receive_DMA+0x24>
 8006186:	88fb      	ldrh	r3, [r7, #6]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e030      	b.n	80061f2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a18      	ldr	r2, [pc, #96]	; (80061fc <HAL_UART_Receive_DMA+0x94>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d01f      	beq.n	80061e0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d018      	beq.n	80061e0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	e853 3f00 	ldrex	r3, [r3]
 80061ba:	613b      	str	r3, [r7, #16]
   return(result);
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	461a      	mov	r2, r3
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	623b      	str	r3, [r7, #32]
 80061ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d0:	69f9      	ldr	r1, [r7, #28]
 80061d2:	6a3a      	ldr	r2, [r7, #32]
 80061d4:	e841 2300 	strex	r3, r2, [r1]
 80061d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e6      	bne.n	80061ae <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80061e0:	88fb      	ldrh	r3, [r7, #6]
 80061e2:	461a      	mov	r2, r3
 80061e4:	68b9      	ldr	r1, [r7, #8]
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 fff8 	bl	80071dc <UART_Start_Receive_DMA>
 80061ec:	4603      	mov	r3, r0
 80061ee:	e000      	b.n	80061f2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061f0:	2302      	movs	r3, #2
  }
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3728      	adds	r7, #40	; 0x28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	40008000 	.word	0x40008000

08006200 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b0a0      	sub	sp, #128	; 0x80
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006218:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800621c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006226:	66bb      	str	r3, [r7, #104]	; 0x68
 8006228:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800622c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e6      	bne.n	8006208 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3308      	adds	r3, #8
 8006240:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006244:	e853 3f00 	ldrex	r3, [r3]
 8006248:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800624a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800624c:	f023 0301 	bic.w	r3, r3, #1
 8006250:	67bb      	str	r3, [r7, #120]	; 0x78
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3308      	adds	r3, #8
 8006258:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800625a:	657a      	str	r2, [r7, #84]	; 0x54
 800625c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006260:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006262:	e841 2300 	strex	r3, r2, [r1]
 8006266:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1e5      	bne.n	800623a <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006272:	2b01      	cmp	r3, #1
 8006274:	d118      	bne.n	80062a8 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627e:	e853 3f00 	ldrex	r3, [r3]
 8006282:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	f023 0310 	bic.w	r3, r3, #16
 800628a:	677b      	str	r3, [r7, #116]	; 0x74
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006294:	643b      	str	r3, [r7, #64]	; 0x40
 8006296:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800629a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e6      	bne.n	8006276 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b2:	2b80      	cmp	r3, #128	; 0x80
 80062b4:	d137      	bne.n	8006326 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3308      	adds	r3, #8
 80062bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	e853 3f00 	ldrex	r3, [r3]
 80062c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062cc:	673b      	str	r3, [r7, #112]	; 0x70
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3308      	adds	r3, #8
 80062d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80062d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1e5      	bne.n	80062b6 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d019      	beq.n	8006326 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f6:	2200      	movs	r2, #0
 80062f8:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fd fd0e 	bl	8003d20 <HAL_DMA_Abort>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00d      	beq.n	8006326 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630e:	4618      	mov	r0, r3
 8006310:	f7fd fe34 	bl	8003f7c <HAL_DMA_GetError>
 8006314:	4603      	mov	r3, r0
 8006316:	2b20      	cmp	r3, #32
 8006318:	d105      	bne.n	8006326 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2210      	movs	r2, #16
 800631e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e063      	b.n	80063ee <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006330:	2b40      	cmp	r3, #64	; 0x40
 8006332:	d137      	bne.n	80063a4 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3308      	adds	r3, #8
 800633a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	e853 3f00 	ldrex	r3, [r3]
 8006342:	60bb      	str	r3, [r7, #8]
   return(result);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800634a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3308      	adds	r3, #8
 8006352:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006354:	61ba      	str	r2, [r7, #24]
 8006356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	6979      	ldr	r1, [r7, #20]
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	e841 2300 	strex	r3, r2, [r1]
 8006360:	613b      	str	r3, [r7, #16]
   return(result);
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e5      	bne.n	8006334 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800636c:	2b00      	cmp	r3, #0
 800636e:	d019      	beq.n	80063a4 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006374:	2200      	movs	r2, #0
 8006376:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800637c:	4618      	mov	r0, r3
 800637e:	f7fd fccf 	bl	8003d20 <HAL_DMA_Abort>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00d      	beq.n	80063a4 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800638c:	4618      	mov	r0, r3
 800638e:	f7fd fdf5 	bl	8003f7c <HAL_DMA_GetError>
 8006392:	4603      	mov	r3, r0
 8006394:	2b20      	cmp	r3, #32
 8006396:	d105      	bne.n	80063a4 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2210      	movs	r2, #16
 800639c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e024      	b.n	80063ee <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	220f      	movs	r2, #15
 80063ba:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	8b1b      	ldrh	r3, [r3, #24]
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f042 0208 	orr.w	r2, r2, #8
 80063cc:	b292      	uxth	r2, r2
 80063ce:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3780      	adds	r7, #128	; 0x80
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b0ba      	sub	sp, #232	; 0xe8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800641e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006422:	f640 030f 	movw	r3, #2063	; 0x80f
 8006426:	4013      	ands	r3, r2
 8006428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800642c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006430:	2b00      	cmp	r3, #0
 8006432:	d115      	bne.n	8006460 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006438:	f003 0320 	and.w	r3, r3, #32
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00f      	beq.n	8006460 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006444:	f003 0320 	and.w	r3, r3, #32
 8006448:	2b00      	cmp	r3, #0
 800644a:	d009      	beq.n	8006460 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 82ae 	beq.w	80069b2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	4798      	blx	r3
      }
      return;
 800645e:	e2a8      	b.n	80069b2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8117 	beq.w	8006698 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800646a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d106      	bne.n	8006484 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006476:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800647a:	4b85      	ldr	r3, [pc, #532]	; (8006690 <HAL_UART_IRQHandler+0x298>)
 800647c:	4013      	ands	r3, r2
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 810a 	beq.w	8006698 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d011      	beq.n	80064b4 <HAL_UART_IRQHandler+0xbc>
 8006490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00b      	beq.n	80064b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2201      	movs	r2, #1
 80064a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064aa:	f043 0201 	orr.w	r2, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d011      	beq.n	80064e4 <HAL_UART_IRQHandler+0xec>
 80064c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00b      	beq.n	80064e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2202      	movs	r2, #2
 80064d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064da:	f043 0204 	orr.w	r2, r3, #4
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d011      	beq.n	8006514 <HAL_UART_IRQHandler+0x11c>
 80064f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00b      	beq.n	8006514 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2204      	movs	r2, #4
 8006502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800650a:	f043 0202 	orr.w	r2, r3, #2
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b00      	cmp	r3, #0
 800651e:	d017      	beq.n	8006550 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	2b00      	cmp	r3, #0
 800652a:	d105      	bne.n	8006538 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800652c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006530:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00b      	beq.n	8006550 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2208      	movs	r2, #8
 800653e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006546:	f043 0208 	orr.w	r2, r3, #8
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006558:	2b00      	cmp	r3, #0
 800655a:	d012      	beq.n	8006582 <HAL_UART_IRQHandler+0x18a>
 800655c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006560:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00c      	beq.n	8006582 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006570:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006578:	f043 0220 	orr.w	r2, r3, #32
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 8214 	beq.w	80069b6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800658e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00d      	beq.n	80065b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800659a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d007      	beq.n	80065b6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ca:	2b40      	cmp	r3, #64	; 0x40
 80065cc:	d005      	beq.n	80065da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d04f      	beq.n	800667a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fec4 	bl	8007368 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ea:	2b40      	cmp	r3, #64	; 0x40
 80065ec:	d141      	bne.n	8006672 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3308      	adds	r3, #8
 80065f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006604:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800660c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3308      	adds	r3, #8
 8006616:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800661a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800661e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006622:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006626:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1d9      	bne.n	80065ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800663e:	2b00      	cmp	r3, #0
 8006640:	d013      	beq.n	800666a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006646:	4a13      	ldr	r2, [pc, #76]	; (8006694 <HAL_UART_IRQHandler+0x29c>)
 8006648:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800664e:	4618      	mov	r0, r3
 8006650:	f7fd fba4 	bl	8003d9c <HAL_DMA_Abort_IT>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d017      	beq.n	800668a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006664:	4610      	mov	r0, r2
 8006666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006668:	e00f      	b.n	800668a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f9c2 	bl	80069f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006670:	e00b      	b.n	800668a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f9be 	bl	80069f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006678:	e007      	b.n	800668a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f9ba 	bl	80069f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006688:	e195      	b.n	80069b6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800668a:	bf00      	nop
    return;
 800668c:	e193      	b.n	80069b6 <HAL_UART_IRQHandler+0x5be>
 800668e:	bf00      	nop
 8006690:	04000120 	.word	0x04000120
 8006694:	08007619 	.word	0x08007619

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800669c:	2b01      	cmp	r3, #1
 800669e:	f040 814e 	bne.w	800693e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a6:	f003 0310 	and.w	r3, r3, #16
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 8147 	beq.w	800693e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b4:	f003 0310 	and.w	r3, r3, #16
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 8140 	beq.w	800693e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2210      	movs	r2, #16
 80066c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d0:	2b40      	cmp	r3, #64	; 0x40
 80066d2:	f040 80b8 	bne.w	8006846 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 8167 	beq.w	80069ba <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066f6:	429a      	cmp	r2, r3
 80066f8:	f080 815f 	bcs.w	80069ba <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006702:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	2b00      	cmp	r3, #0
 8006714:	f040 8086 	bne.w	8006824 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800672c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006734:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006742:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006746:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800674e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800675a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1da      	bne.n	8006718 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3308      	adds	r3, #8
 8006768:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006774:	f023 0301 	bic.w	r3, r3, #1
 8006778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3308      	adds	r3, #8
 8006782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006786:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800678a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800678e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006792:	e841 2300 	strex	r3, r2, [r1]
 8006796:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1e1      	bne.n	8006762 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3308      	adds	r3, #8
 80067a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3308      	adds	r3, #8
 80067be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067ca:	e841 2300 	strex	r3, r2, [r1]
 80067ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1e3      	bne.n	800679e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ec:	e853 3f00 	ldrex	r3, [r3]
 80067f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f4:	f023 0310 	bic.w	r3, r3, #16
 80067f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	461a      	mov	r2, r3
 8006802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006806:	65bb      	str	r3, [r7, #88]	; 0x58
 8006808:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800680c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e4      	bne.n	80067e4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800681e:	4618      	mov	r0, r3
 8006820:	f7fd fa7e 	bl	8003d20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006836:	b29b      	uxth	r3, r3
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	b29b      	uxth	r3, r3
 800683c:	4619      	mov	r1, r3
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f8e2 	bl	8006a08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006844:	e0b9      	b.n	80069ba <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006852:	b29b      	uxth	r3, r3
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006860:	b29b      	uxth	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 80ab 	beq.w	80069be <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 80a6 	beq.w	80069be <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006882:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006886:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006894:	647b      	str	r3, [r7, #68]	; 0x44
 8006896:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006898:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800689a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800689c:	e841 2300 	strex	r3, r2, [r1]
 80068a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e4      	bne.n	8006872 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3308      	adds	r3, #8
 80068ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	e853 3f00 	ldrex	r3, [r3]
 80068b6:	623b      	str	r3, [r7, #32]
   return(result);
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	f023 0301 	bic.w	r3, r3, #1
 80068be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3308      	adds	r3, #8
 80068c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068cc:	633a      	str	r2, [r7, #48]	; 0x30
 80068ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068d4:	e841 2300 	strex	r3, r2, [r1]
 80068d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e3      	bne.n	80068a8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	60fb      	str	r3, [r7, #12]
   return(result);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f023 0310 	bic.w	r3, r3, #16
 8006908:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006916:	61fb      	str	r3, [r7, #28]
 8006918:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	69b9      	ldr	r1, [r7, #24]
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	617b      	str	r3, [r7, #20]
   return(result);
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e4      	bne.n	80068f4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2202      	movs	r2, #2
 800692e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006930:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f866 	bl	8006a08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800693c:	e03f      	b.n	80069be <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800693e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00e      	beq.n	8006968 <HAL_UART_IRQHandler+0x570>
 800694a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800694e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d008      	beq.n	8006968 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800695e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fe99 	bl	8007698 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006966:	e02d      	b.n	80069c4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00e      	beq.n	8006992 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697c:	2b00      	cmp	r3, #0
 800697e:	d008      	beq.n	8006992 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01c      	beq.n	80069c2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	4798      	blx	r3
    }
    return;
 8006990:	e017      	b.n	80069c2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d012      	beq.n	80069c4 <HAL_UART_IRQHandler+0x5cc>
 800699e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00c      	beq.n	80069c4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fe4a 	bl	8007644 <UART_EndTransmit_IT>
    return;
 80069b0:	e008      	b.n	80069c4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80069b2:	bf00      	nop
 80069b4:	e006      	b.n	80069c4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80069b6:	bf00      	nop
 80069b8:	e004      	b.n	80069c4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80069ba:	bf00      	nop
 80069bc:	e002      	b.n	80069c4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80069be:	bf00      	nop
 80069c0:	e000      	b.n	80069c4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80069c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80069c4:	37e8      	adds	r7, #232	; 0xe8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop

080069cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a24:	b08a      	sub	sp, #40	; 0x28
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689a      	ldr	r2, [r3, #8]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	4bb4      	ldr	r3, [pc, #720]	; (8006d20 <UART_SetConfig+0x300>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	6812      	ldr	r2, [r2, #0]
 8006a56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4aa9      	ldr	r2, [pc, #676]	; (8006d24 <UART_SetConfig+0x304>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d004      	beq.n	8006a8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4aa0      	ldr	r2, [pc, #640]	; (8006d28 <UART_SetConfig+0x308>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d126      	bne.n	8006af8 <UART_SetConfig+0xd8>
 8006aaa:	4ba0      	ldr	r3, [pc, #640]	; (8006d2c <UART_SetConfig+0x30c>)
 8006aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab0:	f003 0303 	and.w	r3, r3, #3
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d81b      	bhi.n	8006af0 <UART_SetConfig+0xd0>
 8006ab8:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <UART_SetConfig+0xa0>)
 8006aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abe:	bf00      	nop
 8006ac0:	08006ad1 	.word	0x08006ad1
 8006ac4:	08006ae1 	.word	0x08006ae1
 8006ac8:	08006ad9 	.word	0x08006ad9
 8006acc:	08006ae9 	.word	0x08006ae9
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad6:	e080      	b.n	8006bda <UART_SetConfig+0x1ba>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ade:	e07c      	b.n	8006bda <UART_SetConfig+0x1ba>
 8006ae0:	2304      	movs	r3, #4
 8006ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae6:	e078      	b.n	8006bda <UART_SetConfig+0x1ba>
 8006ae8:	2308      	movs	r3, #8
 8006aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aee:	e074      	b.n	8006bda <UART_SetConfig+0x1ba>
 8006af0:	2310      	movs	r3, #16
 8006af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af6:	e070      	b.n	8006bda <UART_SetConfig+0x1ba>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a8c      	ldr	r2, [pc, #560]	; (8006d30 <UART_SetConfig+0x310>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d138      	bne.n	8006b74 <UART_SetConfig+0x154>
 8006b02:	4b8a      	ldr	r3, [pc, #552]	; (8006d2c <UART_SetConfig+0x30c>)
 8006b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b08:	f003 030c 	and.w	r3, r3, #12
 8006b0c:	2b0c      	cmp	r3, #12
 8006b0e:	d82d      	bhi.n	8006b6c <UART_SetConfig+0x14c>
 8006b10:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <UART_SetConfig+0xf8>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006b4d 	.word	0x08006b4d
 8006b1c:	08006b6d 	.word	0x08006b6d
 8006b20:	08006b6d 	.word	0x08006b6d
 8006b24:	08006b6d 	.word	0x08006b6d
 8006b28:	08006b5d 	.word	0x08006b5d
 8006b2c:	08006b6d 	.word	0x08006b6d
 8006b30:	08006b6d 	.word	0x08006b6d
 8006b34:	08006b6d 	.word	0x08006b6d
 8006b38:	08006b55 	.word	0x08006b55
 8006b3c:	08006b6d 	.word	0x08006b6d
 8006b40:	08006b6d 	.word	0x08006b6d
 8006b44:	08006b6d 	.word	0x08006b6d
 8006b48:	08006b65 	.word	0x08006b65
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b52:	e042      	b.n	8006bda <UART_SetConfig+0x1ba>
 8006b54:	2302      	movs	r3, #2
 8006b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b5a:	e03e      	b.n	8006bda <UART_SetConfig+0x1ba>
 8006b5c:	2304      	movs	r3, #4
 8006b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b62:	e03a      	b.n	8006bda <UART_SetConfig+0x1ba>
 8006b64:	2308      	movs	r3, #8
 8006b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b6a:	e036      	b.n	8006bda <UART_SetConfig+0x1ba>
 8006b6c:	2310      	movs	r3, #16
 8006b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b72:	e032      	b.n	8006bda <UART_SetConfig+0x1ba>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a6a      	ldr	r2, [pc, #424]	; (8006d24 <UART_SetConfig+0x304>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d12a      	bne.n	8006bd4 <UART_SetConfig+0x1b4>
 8006b7e:	4b6b      	ldr	r3, [pc, #428]	; (8006d2c <UART_SetConfig+0x30c>)
 8006b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b8c:	d01a      	beq.n	8006bc4 <UART_SetConfig+0x1a4>
 8006b8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b92:	d81b      	bhi.n	8006bcc <UART_SetConfig+0x1ac>
 8006b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b98:	d00c      	beq.n	8006bb4 <UART_SetConfig+0x194>
 8006b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b9e:	d815      	bhi.n	8006bcc <UART_SetConfig+0x1ac>
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <UART_SetConfig+0x18c>
 8006ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba8:	d008      	beq.n	8006bbc <UART_SetConfig+0x19c>
 8006baa:	e00f      	b.n	8006bcc <UART_SetConfig+0x1ac>
 8006bac:	2300      	movs	r3, #0
 8006bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bb2:	e012      	b.n	8006bda <UART_SetConfig+0x1ba>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bba:	e00e      	b.n	8006bda <UART_SetConfig+0x1ba>
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bc2:	e00a      	b.n	8006bda <UART_SetConfig+0x1ba>
 8006bc4:	2308      	movs	r3, #8
 8006bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bca:	e006      	b.n	8006bda <UART_SetConfig+0x1ba>
 8006bcc:	2310      	movs	r3, #16
 8006bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bd2:	e002      	b.n	8006bda <UART_SetConfig+0x1ba>
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a51      	ldr	r2, [pc, #324]	; (8006d24 <UART_SetConfig+0x304>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d17a      	bne.n	8006cda <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006be4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d824      	bhi.n	8006c36 <UART_SetConfig+0x216>
 8006bec:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <UART_SetConfig+0x1d4>)
 8006bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf2:	bf00      	nop
 8006bf4:	08006c19 	.word	0x08006c19
 8006bf8:	08006c37 	.word	0x08006c37
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c37 	.word	0x08006c37
 8006c04:	08006c27 	.word	0x08006c27
 8006c08:	08006c37 	.word	0x08006c37
 8006c0c:	08006c37 	.word	0x08006c37
 8006c10:	08006c37 	.word	0x08006c37
 8006c14:	08006c2f 	.word	0x08006c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c18:	f7fe fee4 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 8006c1c:	61f8      	str	r0, [r7, #28]
        break;
 8006c1e:	e010      	b.n	8006c42 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c20:	4b44      	ldr	r3, [pc, #272]	; (8006d34 <UART_SetConfig+0x314>)
 8006c22:	61fb      	str	r3, [r7, #28]
        break;
 8006c24:	e00d      	b.n	8006c42 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c26:	f7fe fe45 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
 8006c2a:	61f8      	str	r0, [r7, #28]
        break;
 8006c2c:	e009      	b.n	8006c42 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c32:	61fb      	str	r3, [r7, #28]
        break;
 8006c34:	e005      	b.n	8006c42 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 8107 	beq.w	8006e58 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	4413      	add	r3, r2
 8006c54:	69fa      	ldr	r2, [r7, #28]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d305      	bcc.n	8006c66 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c60:	69fa      	ldr	r2, [r7, #28]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d903      	bls.n	8006c6e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c6c:	e0f4      	b.n	8006e58 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	2200      	movs	r2, #0
 8006c72:	461c      	mov	r4, r3
 8006c74:	4615      	mov	r5, r2
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	f04f 0300 	mov.w	r3, #0
 8006c7e:	022b      	lsls	r3, r5, #8
 8006c80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c84:	0222      	lsls	r2, r4, #8
 8006c86:	68f9      	ldr	r1, [r7, #12]
 8006c88:	6849      	ldr	r1, [r1, #4]
 8006c8a:	0849      	lsrs	r1, r1, #1
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	4688      	mov	r8, r1
 8006c90:	4681      	mov	r9, r0
 8006c92:	eb12 0a08 	adds.w	sl, r2, r8
 8006c96:	eb43 0b09 	adc.w	fp, r3, r9
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	603b      	str	r3, [r7, #0]
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ca8:	4650      	mov	r0, sl
 8006caa:	4659      	mov	r1, fp
 8006cac:	f7f9 ffec 	bl	8000c88 <__aeabi_uldivmod>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cbe:	d308      	bcc.n	8006cd2 <UART_SetConfig+0x2b2>
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cc6:	d204      	bcs.n	8006cd2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	60da      	str	r2, [r3, #12]
 8006cd0:	e0c2      	b.n	8006e58 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006cd8:	e0be      	b.n	8006e58 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce2:	d16a      	bne.n	8006dba <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	d834      	bhi.n	8006d56 <UART_SetConfig+0x336>
 8006cec:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <UART_SetConfig+0x2d4>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d39 	.word	0x08006d39
 8006cfc:	08006d41 	.word	0x08006d41
 8006d00:	08006d57 	.word	0x08006d57
 8006d04:	08006d47 	.word	0x08006d47
 8006d08:	08006d57 	.word	0x08006d57
 8006d0c:	08006d57 	.word	0x08006d57
 8006d10:	08006d57 	.word	0x08006d57
 8006d14:	08006d4f 	.word	0x08006d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d18:	f7fe fe64 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 8006d1c:	61f8      	str	r0, [r7, #28]
        break;
 8006d1e:	e020      	b.n	8006d62 <UART_SetConfig+0x342>
 8006d20:	efff69f3 	.word	0xefff69f3
 8006d24:	40008000 	.word	0x40008000
 8006d28:	40013800 	.word	0x40013800
 8006d2c:	40021000 	.word	0x40021000
 8006d30:	40004400 	.word	0x40004400
 8006d34:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d38:	f7fe fe6a 	bl	8005a10 <HAL_RCC_GetPCLK2Freq>
 8006d3c:	61f8      	str	r0, [r7, #28]
        break;
 8006d3e:	e010      	b.n	8006d62 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d40:	4b4c      	ldr	r3, [pc, #304]	; (8006e74 <UART_SetConfig+0x454>)
 8006d42:	61fb      	str	r3, [r7, #28]
        break;
 8006d44:	e00d      	b.n	8006d62 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d46:	f7fe fdb5 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
 8006d4a:	61f8      	str	r0, [r7, #28]
        break;
 8006d4c:	e009      	b.n	8006d62 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d52:	61fb      	str	r3, [r7, #28]
        break;
 8006d54:	e005      	b.n	8006d62 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d077      	beq.n	8006e58 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	005a      	lsls	r2, r3, #1
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	085b      	lsrs	r3, r3, #1
 8006d72:	441a      	add	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	2b0f      	cmp	r3, #15
 8006d82:	d916      	bls.n	8006db2 <UART_SetConfig+0x392>
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d8a:	d212      	bcs.n	8006db2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	f023 030f 	bic.w	r3, r3, #15
 8006d94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	085b      	lsrs	r3, r3, #1
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	8afb      	ldrh	r3, [r7, #22]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	8afa      	ldrh	r2, [r7, #22]
 8006dae:	60da      	str	r2, [r3, #12]
 8006db0:	e052      	b.n	8006e58 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006db8:	e04e      	b.n	8006e58 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dbe:	2b08      	cmp	r3, #8
 8006dc0:	d827      	bhi.n	8006e12 <UART_SetConfig+0x3f2>
 8006dc2:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <UART_SetConfig+0x3a8>)
 8006dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc8:	08006ded 	.word	0x08006ded
 8006dcc:	08006df5 	.word	0x08006df5
 8006dd0:	08006dfd 	.word	0x08006dfd
 8006dd4:	08006e13 	.word	0x08006e13
 8006dd8:	08006e03 	.word	0x08006e03
 8006ddc:	08006e13 	.word	0x08006e13
 8006de0:	08006e13 	.word	0x08006e13
 8006de4:	08006e13 	.word	0x08006e13
 8006de8:	08006e0b 	.word	0x08006e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dec:	f7fe fdfa 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 8006df0:	61f8      	str	r0, [r7, #28]
        break;
 8006df2:	e014      	b.n	8006e1e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006df4:	f7fe fe0c 	bl	8005a10 <HAL_RCC_GetPCLK2Freq>
 8006df8:	61f8      	str	r0, [r7, #28]
        break;
 8006dfa:	e010      	b.n	8006e1e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dfc:	4b1d      	ldr	r3, [pc, #116]	; (8006e74 <UART_SetConfig+0x454>)
 8006dfe:	61fb      	str	r3, [r7, #28]
        break;
 8006e00:	e00d      	b.n	8006e1e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e02:	f7fe fd57 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
 8006e06:	61f8      	str	r0, [r7, #28]
        break;
 8006e08:	e009      	b.n	8006e1e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e0e:	61fb      	str	r3, [r7, #28]
        break;
 8006e10:	e005      	b.n	8006e1e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e1c:	bf00      	nop
    }

    if (pclk != 0U)
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d019      	beq.n	8006e58 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	085a      	lsrs	r2, r3, #1
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	441a      	add	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	2b0f      	cmp	r3, #15
 8006e3c:	d909      	bls.n	8006e52 <UART_SetConfig+0x432>
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e44:	d205      	bcs.n	8006e52 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	60da      	str	r2, [r3, #12]
 8006e50:	e002      	b.n	8006e58 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006e64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3728      	adds	r7, #40	; 0x28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e72:	bf00      	nop
 8006e74:	00f42400 	.word	0x00f42400

08006e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	f003 0308 	and.w	r3, r3, #8
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	f003 0304 	and.w	r3, r3, #4
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	f003 0310 	and.w	r3, r3, #16
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00a      	beq.n	8006f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	f003 0320 	and.w	r3, r3, #32
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01a      	beq.n	8006f8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f76:	d10a      	bne.n	8006f8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	605a      	str	r2, [r3, #4]
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b098      	sub	sp, #96	; 0x60
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fcc:	f7fc fb06 	bl	80035dc <HAL_GetTick>
 8006fd0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0308 	and.w	r3, r3, #8
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	d12e      	bne.n	800703e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fe0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f88c 	bl	800710c <UART_WaitOnFlagUntilTimeout>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d021      	beq.n	800703e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007002:	e853 3f00 	ldrex	r3, [r3]
 8007006:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800700e:	653b      	str	r3, [r7, #80]	; 0x50
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	461a      	mov	r2, r3
 8007016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007018:	647b      	str	r3, [r7, #68]	; 0x44
 800701a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800701e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007020:	e841 2300 	strex	r3, r2, [r1]
 8007024:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1e6      	bne.n	8006ffa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2220      	movs	r2, #32
 8007030:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e062      	b.n	8007104 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b04      	cmp	r3, #4
 800704a:	d149      	bne.n	80070e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800704c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007054:	2200      	movs	r2, #0
 8007056:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f856 	bl	800710c <UART_WaitOnFlagUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d03c      	beq.n	80070e0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	e853 3f00 	ldrex	r3, [r3]
 8007072:	623b      	str	r3, [r7, #32]
   return(result);
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800707a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	461a      	mov	r2, r3
 8007082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007084:	633b      	str	r3, [r7, #48]	; 0x30
 8007086:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007088:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800708a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800708c:	e841 2300 	strex	r3, r2, [r1]
 8007090:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e6      	bne.n	8007066 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	3308      	adds	r3, #8
 800709e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	e853 3f00 	ldrex	r3, [r3]
 80070a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 0301 	bic.w	r3, r3, #1
 80070ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3308      	adds	r3, #8
 80070b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070b8:	61fa      	str	r2, [r7, #28]
 80070ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	69b9      	ldr	r1, [r7, #24]
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	617b      	str	r3, [r7, #20]
   return(result);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e5      	bne.n	8007098 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e011      	b.n	8007104 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2220      	movs	r2, #32
 80070e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3758      	adds	r7, #88	; 0x58
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	4613      	mov	r3, r2
 800711a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800711c:	e049      	b.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007124:	d045      	beq.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007126:	f7fc fa59 	bl	80035dc <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	429a      	cmp	r2, r3
 8007134:	d302      	bcc.n	800713c <UART_WaitOnFlagUntilTimeout+0x30>
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e048      	b.n	80071d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0304 	and.w	r3, r3, #4
 800714a:	2b00      	cmp	r3, #0
 800714c:	d031      	beq.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	f003 0308 	and.w	r3, r3, #8
 8007158:	2b08      	cmp	r3, #8
 800715a:	d110      	bne.n	800717e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2208      	movs	r2, #8
 8007162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f8ff 	bl	8007368 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2208      	movs	r2, #8
 800716e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e029      	b.n	80071d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800718c:	d111      	bne.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f8e5 	bl	8007368 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e00f      	b.n	80071d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69da      	ldr	r2, [r3, #28]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4013      	ands	r3, r2
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	429a      	cmp	r2, r3
 80071c0:	bf0c      	ite	eq
 80071c2:	2301      	moveq	r3, #1
 80071c4:	2300      	movne	r3, #0
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	461a      	mov	r2, r3
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d0a6      	beq.n	800711e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b096      	sub	sp, #88	; 0x58
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	4613      	mov	r3, r2
 80071e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	88fa      	ldrh	r2, [r7, #6]
 80071f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2222      	movs	r2, #34	; 0x22
 8007204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800720c:	2b00      	cmp	r3, #0
 800720e:	d028      	beq.n	8007262 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007214:	4a3e      	ldr	r2, [pc, #248]	; (8007310 <UART_Start_Receive_DMA+0x134>)
 8007216:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800721c:	4a3d      	ldr	r2, [pc, #244]	; (8007314 <UART_Start_Receive_DMA+0x138>)
 800721e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007224:	4a3c      	ldr	r2, [pc, #240]	; (8007318 <UART_Start_Receive_DMA+0x13c>)
 8007226:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800722c:	2200      	movs	r2, #0
 800722e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3324      	adds	r3, #36	; 0x24
 800723a:	4619      	mov	r1, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007240:	461a      	mov	r2, r3
 8007242:	88fb      	ldrh	r3, [r7, #6]
 8007244:	f7fc fd0c 	bl	8003c60 <HAL_DMA_Start_IT>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d009      	beq.n	8007262 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2210      	movs	r2, #16
 8007252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2220      	movs	r2, #32
 800725a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e051      	b.n	8007306 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d018      	beq.n	800729c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800727e:	657b      	str	r3, [r7, #84]	; 0x54
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007288:	64bb      	str	r3, [r7, #72]	; 0x48
 800728a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800728e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e6      	bne.n	800726a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3308      	adds	r3, #8
 80072a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a6:	e853 3f00 	ldrex	r3, [r3]
 80072aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	f043 0301 	orr.w	r3, r3, #1
 80072b2:	653b      	str	r3, [r7, #80]	; 0x50
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3308      	adds	r3, #8
 80072ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072bc:	637a      	str	r2, [r7, #52]	; 0x34
 80072be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072c4:	e841 2300 	strex	r3, r2, [r1]
 80072c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e5      	bne.n	800729c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3308      	adds	r3, #8
 80072d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	e853 3f00 	ldrex	r3, [r3]
 80072de:	613b      	str	r3, [r7, #16]
   return(result);
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3308      	adds	r3, #8
 80072ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072f0:	623a      	str	r2, [r7, #32]
 80072f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f4:	69f9      	ldr	r1, [r7, #28]
 80072f6:	6a3a      	ldr	r2, [r7, #32]
 80072f8:	e841 2300 	strex	r3, r2, [r1]
 80072fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e5      	bne.n	80072d0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3758      	adds	r7, #88	; 0x58
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	08007431 	.word	0x08007431
 8007314:	0800755d 	.word	0x0800755d
 8007318:	0800759b 	.word	0x0800759b

0800731c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800731c:	b480      	push	{r7}
 800731e:	b089      	sub	sp, #36	; 0x24
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	60bb      	str	r3, [r7, #8]
   return(result);
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007338:	61fb      	str	r3, [r7, #28]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	461a      	mov	r2, r3
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	61bb      	str	r3, [r7, #24]
 8007344:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007346:	6979      	ldr	r1, [r7, #20]
 8007348:	69ba      	ldr	r2, [r7, #24]
 800734a:	e841 2300 	strex	r3, r2, [r1]
 800734e:	613b      	str	r3, [r7, #16]
   return(result);
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1e6      	bne.n	8007324 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2220      	movs	r2, #32
 800735a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800735c:	bf00      	nop
 800735e:	3724      	adds	r7, #36	; 0x24
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007368:	b480      	push	{r7}
 800736a:	b095      	sub	sp, #84	; 0x54
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007384:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800738e:	643b      	str	r3, [r7, #64]	; 0x40
 8007390:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007394:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800739c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e6      	bne.n	8007370 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3308      	adds	r3, #8
 80073a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	f023 0301 	bic.w	r3, r3, #1
 80073b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3308      	adds	r3, #8
 80073c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e5      	bne.n	80073a2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d118      	bne.n	8007410 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	e853 3f00 	ldrex	r3, [r3]
 80073ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f023 0310 	bic.w	r3, r3, #16
 80073f2:	647b      	str	r3, [r7, #68]	; 0x44
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	461a      	mov	r2, r3
 80073fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	6979      	ldr	r1, [r7, #20]
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	e841 2300 	strex	r3, r2, [r1]
 8007408:	613b      	str	r3, [r7, #16]
   return(result);
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1e6      	bne.n	80073de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2220      	movs	r2, #32
 8007414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007424:	bf00      	nop
 8007426:	3754      	adds	r7, #84	; 0x54
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b09c      	sub	sp, #112	; 0x70
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0320 	and.w	r3, r3, #32
 8007448:	2b00      	cmp	r3, #0
 800744a:	d171      	bne.n	8007530 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800744c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800744e:	2200      	movs	r2, #0
 8007450:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007468:	66bb      	str	r3, [r7, #104]	; 0x68
 800746a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007472:	65bb      	str	r3, [r7, #88]	; 0x58
 8007474:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007478:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e6      	bne.n	8007454 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3308      	adds	r3, #8
 800748c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007490:	e853 3f00 	ldrex	r3, [r3]
 8007494:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007498:	f023 0301 	bic.w	r3, r3, #1
 800749c:	667b      	str	r3, [r7, #100]	; 0x64
 800749e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3308      	adds	r3, #8
 80074a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80074a6:	647a      	str	r2, [r7, #68]	; 0x44
 80074a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074ae:	e841 2300 	strex	r3, r2, [r1]
 80074b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1e5      	bne.n	8007486 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3308      	adds	r3, #8
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	623b      	str	r3, [r7, #32]
   return(result);
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074d0:	663b      	str	r3, [r7, #96]	; 0x60
 80074d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3308      	adds	r3, #8
 80074d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80074da:	633a      	str	r2, [r7, #48]	; 0x30
 80074dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e5      	bne.n	80074ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f0:	2220      	movs	r2, #32
 80074f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d118      	bne.n	8007530 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	60fb      	str	r3, [r7, #12]
   return(result);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 0310 	bic.w	r3, r3, #16
 8007512:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800751c:	61fb      	str	r3, [r7, #28]
 800751e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	69b9      	ldr	r1, [r7, #24]
 8007522:	69fa      	ldr	r2, [r7, #28]
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	617b      	str	r3, [r7, #20]
   return(result);
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e6      	bne.n	80074fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007532:	2200      	movs	r2, #0
 8007534:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800753a:	2b01      	cmp	r3, #1
 800753c:	d107      	bne.n	800754e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800753e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007540:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007544:	4619      	mov	r1, r3
 8007546:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007548:	f7ff fa5e 	bl	8006a08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800754c:	e002      	b.n	8007554 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800754e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007550:	f7f9 fdde 	bl	8001110 <HAL_UART_RxCpltCallback>
}
 8007554:	bf00      	nop
 8007556:	3770      	adds	r7, #112	; 0x70
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007568:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2201      	movs	r2, #1
 800756e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007574:	2b01      	cmp	r3, #1
 8007576:	d109      	bne.n	800758c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800757e:	085b      	lsrs	r3, r3, #1
 8007580:	b29b      	uxth	r3, r3
 8007582:	4619      	mov	r1, r3
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f7ff fa3f 	bl	8006a08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800758a:	e002      	b.n	8007592 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7ff fa27 	bl	80069e0 <HAL_UART_RxHalfCpltCallback>
}
 8007592:	bf00      	nop
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b086      	sub	sp, #24
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075b4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c0:	2b80      	cmp	r3, #128	; 0x80
 80075c2:	d109      	bne.n	80075d8 <UART_DMAError+0x3e>
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	2b21      	cmp	r3, #33	; 0x21
 80075c8:	d106      	bne.n	80075d8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80075d2:	6978      	ldr	r0, [r7, #20]
 80075d4:	f7ff fea2 	bl	800731c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e2:	2b40      	cmp	r3, #64	; 0x40
 80075e4:	d109      	bne.n	80075fa <UART_DMAError+0x60>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b22      	cmp	r3, #34	; 0x22
 80075ea:	d106      	bne.n	80075fa <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80075f4:	6978      	ldr	r0, [r7, #20]
 80075f6:	f7ff feb7 	bl	8007368 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007600:	f043 0210 	orr.w	r2, r3, #16
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800760a:	6978      	ldr	r0, [r7, #20]
 800760c:	f7ff f9f2 	bl	80069f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007610:	bf00      	nop
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007624:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f7ff f9dc 	bl	80069f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800763c:	bf00      	nop
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	60bb      	str	r3, [r7, #8]
   return(result);
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007660:	61fb      	str	r3, [r7, #28]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	461a      	mov	r2, r3
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	61bb      	str	r3, [r7, #24]
 800766c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766e:	6979      	ldr	r1, [r7, #20]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	e841 2300 	strex	r3, r2, [r1]
 8007676:	613b      	str	r3, [r7, #16]
   return(result);
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1e6      	bne.n	800764c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2220      	movs	r2, #32
 8007682:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7ff f99e 	bl	80069cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007690:	bf00      	nop
 8007692:	3720      	adds	r7, #32
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <malloc>:
 80076ac:	4b02      	ldr	r3, [pc, #8]	; (80076b8 <malloc+0xc>)
 80076ae:	4601      	mov	r1, r0
 80076b0:	6818      	ldr	r0, [r3, #0]
 80076b2:	f000 b82b 	b.w	800770c <_malloc_r>
 80076b6:	bf00      	nop
 80076b8:	200001e0 	.word	0x200001e0

080076bc <free>:
 80076bc:	4b02      	ldr	r3, [pc, #8]	; (80076c8 <free+0xc>)
 80076be:	4601      	mov	r1, r0
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	f002 bf57 	b.w	800a574 <_free_r>
 80076c6:	bf00      	nop
 80076c8:	200001e0 	.word	0x200001e0

080076cc <sbrk_aligned>:
 80076cc:	b570      	push	{r4, r5, r6, lr}
 80076ce:	4e0e      	ldr	r6, [pc, #56]	; (8007708 <sbrk_aligned+0x3c>)
 80076d0:	460c      	mov	r4, r1
 80076d2:	6831      	ldr	r1, [r6, #0]
 80076d4:	4605      	mov	r5, r0
 80076d6:	b911      	cbnz	r1, 80076de <sbrk_aligned+0x12>
 80076d8:	f002 f840 	bl	800975c <_sbrk_r>
 80076dc:	6030      	str	r0, [r6, #0]
 80076de:	4621      	mov	r1, r4
 80076e0:	4628      	mov	r0, r5
 80076e2:	f002 f83b 	bl	800975c <_sbrk_r>
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	d00a      	beq.n	8007700 <sbrk_aligned+0x34>
 80076ea:	1cc4      	adds	r4, r0, #3
 80076ec:	f024 0403 	bic.w	r4, r4, #3
 80076f0:	42a0      	cmp	r0, r4
 80076f2:	d007      	beq.n	8007704 <sbrk_aligned+0x38>
 80076f4:	1a21      	subs	r1, r4, r0
 80076f6:	4628      	mov	r0, r5
 80076f8:	f002 f830 	bl	800975c <_sbrk_r>
 80076fc:	3001      	adds	r0, #1
 80076fe:	d101      	bne.n	8007704 <sbrk_aligned+0x38>
 8007700:	f04f 34ff 	mov.w	r4, #4294967295
 8007704:	4620      	mov	r0, r4
 8007706:	bd70      	pop	{r4, r5, r6, pc}
 8007708:	20000af0 	.word	0x20000af0

0800770c <_malloc_r>:
 800770c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007710:	1ccd      	adds	r5, r1, #3
 8007712:	f025 0503 	bic.w	r5, r5, #3
 8007716:	3508      	adds	r5, #8
 8007718:	2d0c      	cmp	r5, #12
 800771a:	bf38      	it	cc
 800771c:	250c      	movcc	r5, #12
 800771e:	2d00      	cmp	r5, #0
 8007720:	4607      	mov	r7, r0
 8007722:	db01      	blt.n	8007728 <_malloc_r+0x1c>
 8007724:	42a9      	cmp	r1, r5
 8007726:	d905      	bls.n	8007734 <_malloc_r+0x28>
 8007728:	230c      	movs	r3, #12
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	2600      	movs	r6, #0
 800772e:	4630      	mov	r0, r6
 8007730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007734:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007808 <_malloc_r+0xfc>
 8007738:	f000 f868 	bl	800780c <__malloc_lock>
 800773c:	f8d8 3000 	ldr.w	r3, [r8]
 8007740:	461c      	mov	r4, r3
 8007742:	bb5c      	cbnz	r4, 800779c <_malloc_r+0x90>
 8007744:	4629      	mov	r1, r5
 8007746:	4638      	mov	r0, r7
 8007748:	f7ff ffc0 	bl	80076cc <sbrk_aligned>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	4604      	mov	r4, r0
 8007750:	d155      	bne.n	80077fe <_malloc_r+0xf2>
 8007752:	f8d8 4000 	ldr.w	r4, [r8]
 8007756:	4626      	mov	r6, r4
 8007758:	2e00      	cmp	r6, #0
 800775a:	d145      	bne.n	80077e8 <_malloc_r+0xdc>
 800775c:	2c00      	cmp	r4, #0
 800775e:	d048      	beq.n	80077f2 <_malloc_r+0xe6>
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	4631      	mov	r1, r6
 8007764:	4638      	mov	r0, r7
 8007766:	eb04 0903 	add.w	r9, r4, r3
 800776a:	f001 fff7 	bl	800975c <_sbrk_r>
 800776e:	4581      	cmp	r9, r0
 8007770:	d13f      	bne.n	80077f2 <_malloc_r+0xe6>
 8007772:	6821      	ldr	r1, [r4, #0]
 8007774:	1a6d      	subs	r5, r5, r1
 8007776:	4629      	mov	r1, r5
 8007778:	4638      	mov	r0, r7
 800777a:	f7ff ffa7 	bl	80076cc <sbrk_aligned>
 800777e:	3001      	adds	r0, #1
 8007780:	d037      	beq.n	80077f2 <_malloc_r+0xe6>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	442b      	add	r3, r5
 8007786:	6023      	str	r3, [r4, #0]
 8007788:	f8d8 3000 	ldr.w	r3, [r8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d038      	beq.n	8007802 <_malloc_r+0xf6>
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	42a2      	cmp	r2, r4
 8007794:	d12b      	bne.n	80077ee <_malloc_r+0xe2>
 8007796:	2200      	movs	r2, #0
 8007798:	605a      	str	r2, [r3, #4]
 800779a:	e00f      	b.n	80077bc <_malloc_r+0xb0>
 800779c:	6822      	ldr	r2, [r4, #0]
 800779e:	1b52      	subs	r2, r2, r5
 80077a0:	d41f      	bmi.n	80077e2 <_malloc_r+0xd6>
 80077a2:	2a0b      	cmp	r2, #11
 80077a4:	d917      	bls.n	80077d6 <_malloc_r+0xca>
 80077a6:	1961      	adds	r1, r4, r5
 80077a8:	42a3      	cmp	r3, r4
 80077aa:	6025      	str	r5, [r4, #0]
 80077ac:	bf18      	it	ne
 80077ae:	6059      	strne	r1, [r3, #4]
 80077b0:	6863      	ldr	r3, [r4, #4]
 80077b2:	bf08      	it	eq
 80077b4:	f8c8 1000 	streq.w	r1, [r8]
 80077b8:	5162      	str	r2, [r4, r5]
 80077ba:	604b      	str	r3, [r1, #4]
 80077bc:	4638      	mov	r0, r7
 80077be:	f104 060b 	add.w	r6, r4, #11
 80077c2:	f000 f829 	bl	8007818 <__malloc_unlock>
 80077c6:	f026 0607 	bic.w	r6, r6, #7
 80077ca:	1d23      	adds	r3, r4, #4
 80077cc:	1af2      	subs	r2, r6, r3
 80077ce:	d0ae      	beq.n	800772e <_malloc_r+0x22>
 80077d0:	1b9b      	subs	r3, r3, r6
 80077d2:	50a3      	str	r3, [r4, r2]
 80077d4:	e7ab      	b.n	800772e <_malloc_r+0x22>
 80077d6:	42a3      	cmp	r3, r4
 80077d8:	6862      	ldr	r2, [r4, #4]
 80077da:	d1dd      	bne.n	8007798 <_malloc_r+0x8c>
 80077dc:	f8c8 2000 	str.w	r2, [r8]
 80077e0:	e7ec      	b.n	80077bc <_malloc_r+0xb0>
 80077e2:	4623      	mov	r3, r4
 80077e4:	6864      	ldr	r4, [r4, #4]
 80077e6:	e7ac      	b.n	8007742 <_malloc_r+0x36>
 80077e8:	4634      	mov	r4, r6
 80077ea:	6876      	ldr	r6, [r6, #4]
 80077ec:	e7b4      	b.n	8007758 <_malloc_r+0x4c>
 80077ee:	4613      	mov	r3, r2
 80077f0:	e7cc      	b.n	800778c <_malloc_r+0x80>
 80077f2:	230c      	movs	r3, #12
 80077f4:	603b      	str	r3, [r7, #0]
 80077f6:	4638      	mov	r0, r7
 80077f8:	f000 f80e 	bl	8007818 <__malloc_unlock>
 80077fc:	e797      	b.n	800772e <_malloc_r+0x22>
 80077fe:	6025      	str	r5, [r4, #0]
 8007800:	e7dc      	b.n	80077bc <_malloc_r+0xb0>
 8007802:	605b      	str	r3, [r3, #4]
 8007804:	deff      	udf	#255	; 0xff
 8007806:	bf00      	nop
 8007808:	20000aec 	.word	0x20000aec

0800780c <__malloc_lock>:
 800780c:	4801      	ldr	r0, [pc, #4]	; (8007814 <__malloc_lock+0x8>)
 800780e:	f001 bff2 	b.w	80097f6 <__retarget_lock_acquire_recursive>
 8007812:	bf00      	nop
 8007814:	20000c34 	.word	0x20000c34

08007818 <__malloc_unlock>:
 8007818:	4801      	ldr	r0, [pc, #4]	; (8007820 <__malloc_unlock+0x8>)
 800781a:	f001 bfed 	b.w	80097f8 <__retarget_lock_release_recursive>
 800781e:	bf00      	nop
 8007820:	20000c34 	.word	0x20000c34

08007824 <sulp>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	4604      	mov	r4, r0
 8007828:	460d      	mov	r5, r1
 800782a:	ec45 4b10 	vmov	d0, r4, r5
 800782e:	4616      	mov	r6, r2
 8007830:	f003 fdc2 	bl	800b3b8 <__ulp>
 8007834:	ec51 0b10 	vmov	r0, r1, d0
 8007838:	b17e      	cbz	r6, 800785a <sulp+0x36>
 800783a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800783e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007842:	2b00      	cmp	r3, #0
 8007844:	dd09      	ble.n	800785a <sulp+0x36>
 8007846:	051b      	lsls	r3, r3, #20
 8007848:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800784c:	2400      	movs	r4, #0
 800784e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007852:	4622      	mov	r2, r4
 8007854:	462b      	mov	r3, r5
 8007856:	f7f8 fecf 	bl	80005f8 <__aeabi_dmul>
 800785a:	bd70      	pop	{r4, r5, r6, pc}
 800785c:	0000      	movs	r0, r0
	...

08007860 <_strtod_l>:
 8007860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007864:	ed2d 8b02 	vpush	{d8}
 8007868:	b09b      	sub	sp, #108	; 0x6c
 800786a:	4604      	mov	r4, r0
 800786c:	9213      	str	r2, [sp, #76]	; 0x4c
 800786e:	2200      	movs	r2, #0
 8007870:	9216      	str	r2, [sp, #88]	; 0x58
 8007872:	460d      	mov	r5, r1
 8007874:	f04f 0800 	mov.w	r8, #0
 8007878:	f04f 0900 	mov.w	r9, #0
 800787c:	460a      	mov	r2, r1
 800787e:	9215      	str	r2, [sp, #84]	; 0x54
 8007880:	7811      	ldrb	r1, [r2, #0]
 8007882:	292b      	cmp	r1, #43	; 0x2b
 8007884:	d04c      	beq.n	8007920 <_strtod_l+0xc0>
 8007886:	d83a      	bhi.n	80078fe <_strtod_l+0x9e>
 8007888:	290d      	cmp	r1, #13
 800788a:	d834      	bhi.n	80078f6 <_strtod_l+0x96>
 800788c:	2908      	cmp	r1, #8
 800788e:	d834      	bhi.n	80078fa <_strtod_l+0x9a>
 8007890:	2900      	cmp	r1, #0
 8007892:	d03d      	beq.n	8007910 <_strtod_l+0xb0>
 8007894:	2200      	movs	r2, #0
 8007896:	920a      	str	r2, [sp, #40]	; 0x28
 8007898:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800789a:	7832      	ldrb	r2, [r6, #0]
 800789c:	2a30      	cmp	r2, #48	; 0x30
 800789e:	f040 80b4 	bne.w	8007a0a <_strtod_l+0x1aa>
 80078a2:	7872      	ldrb	r2, [r6, #1]
 80078a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80078a8:	2a58      	cmp	r2, #88	; 0x58
 80078aa:	d170      	bne.n	800798e <_strtod_l+0x12e>
 80078ac:	9302      	str	r3, [sp, #8]
 80078ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b0:	9301      	str	r3, [sp, #4]
 80078b2:	ab16      	add	r3, sp, #88	; 0x58
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	4a8e      	ldr	r2, [pc, #568]	; (8007af0 <_strtod_l+0x290>)
 80078b8:	ab17      	add	r3, sp, #92	; 0x5c
 80078ba:	a915      	add	r1, sp, #84	; 0x54
 80078bc:	4620      	mov	r0, r4
 80078be:	f002 ff0d 	bl	800a6dc <__gethex>
 80078c2:	f010 070f 	ands.w	r7, r0, #15
 80078c6:	4605      	mov	r5, r0
 80078c8:	d005      	beq.n	80078d6 <_strtod_l+0x76>
 80078ca:	2f06      	cmp	r7, #6
 80078cc:	d12a      	bne.n	8007924 <_strtod_l+0xc4>
 80078ce:	3601      	adds	r6, #1
 80078d0:	2300      	movs	r3, #0
 80078d2:	9615      	str	r6, [sp, #84]	; 0x54
 80078d4:	930a      	str	r3, [sp, #40]	; 0x28
 80078d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f040 857f 	bne.w	80083dc <_strtod_l+0xb7c>
 80078de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e0:	b1db      	cbz	r3, 800791a <_strtod_l+0xba>
 80078e2:	4642      	mov	r2, r8
 80078e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80078e8:	ec43 2b10 	vmov	d0, r2, r3
 80078ec:	b01b      	add	sp, #108	; 0x6c
 80078ee:	ecbd 8b02 	vpop	{d8}
 80078f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f6:	2920      	cmp	r1, #32
 80078f8:	d1cc      	bne.n	8007894 <_strtod_l+0x34>
 80078fa:	3201      	adds	r2, #1
 80078fc:	e7bf      	b.n	800787e <_strtod_l+0x1e>
 80078fe:	292d      	cmp	r1, #45	; 0x2d
 8007900:	d1c8      	bne.n	8007894 <_strtod_l+0x34>
 8007902:	2101      	movs	r1, #1
 8007904:	910a      	str	r1, [sp, #40]	; 0x28
 8007906:	1c51      	adds	r1, r2, #1
 8007908:	9115      	str	r1, [sp, #84]	; 0x54
 800790a:	7852      	ldrb	r2, [r2, #1]
 800790c:	2a00      	cmp	r2, #0
 800790e:	d1c3      	bne.n	8007898 <_strtod_l+0x38>
 8007910:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007912:	9515      	str	r5, [sp, #84]	; 0x54
 8007914:	2b00      	cmp	r3, #0
 8007916:	f040 855f 	bne.w	80083d8 <_strtod_l+0xb78>
 800791a:	4642      	mov	r2, r8
 800791c:	464b      	mov	r3, r9
 800791e:	e7e3      	b.n	80078e8 <_strtod_l+0x88>
 8007920:	2100      	movs	r1, #0
 8007922:	e7ef      	b.n	8007904 <_strtod_l+0xa4>
 8007924:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007926:	b13a      	cbz	r2, 8007938 <_strtod_l+0xd8>
 8007928:	2135      	movs	r1, #53	; 0x35
 800792a:	a818      	add	r0, sp, #96	; 0x60
 800792c:	f003 fe41 	bl	800b5b2 <__copybits>
 8007930:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007932:	4620      	mov	r0, r4
 8007934:	f003 fa14 	bl	800ad60 <_Bfree>
 8007938:	3f01      	subs	r7, #1
 800793a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800793c:	2f04      	cmp	r7, #4
 800793e:	d806      	bhi.n	800794e <_strtod_l+0xee>
 8007940:	e8df f007 	tbb	[pc, r7]
 8007944:	201d0314 	.word	0x201d0314
 8007948:	14          	.byte	0x14
 8007949:	00          	.byte	0x00
 800794a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800794e:	05e9      	lsls	r1, r5, #23
 8007950:	bf48      	it	mi
 8007952:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007956:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800795a:	0d1b      	lsrs	r3, r3, #20
 800795c:	051b      	lsls	r3, r3, #20
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1b9      	bne.n	80078d6 <_strtod_l+0x76>
 8007962:	f001 ff1d 	bl	80097a0 <__errno>
 8007966:	2322      	movs	r3, #34	; 0x22
 8007968:	6003      	str	r3, [r0, #0]
 800796a:	e7b4      	b.n	80078d6 <_strtod_l+0x76>
 800796c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007970:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007974:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007978:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800797c:	e7e7      	b.n	800794e <_strtod_l+0xee>
 800797e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007af8 <_strtod_l+0x298>
 8007982:	e7e4      	b.n	800794e <_strtod_l+0xee>
 8007984:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007988:	f04f 38ff 	mov.w	r8, #4294967295
 800798c:	e7df      	b.n	800794e <_strtod_l+0xee>
 800798e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007990:	1c5a      	adds	r2, r3, #1
 8007992:	9215      	str	r2, [sp, #84]	; 0x54
 8007994:	785b      	ldrb	r3, [r3, #1]
 8007996:	2b30      	cmp	r3, #48	; 0x30
 8007998:	d0f9      	beq.n	800798e <_strtod_l+0x12e>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d09b      	beq.n	80078d6 <_strtod_l+0x76>
 800799e:	2301      	movs	r3, #1
 80079a0:	f04f 0a00 	mov.w	sl, #0
 80079a4:	9304      	str	r3, [sp, #16]
 80079a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80079aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80079ae:	46d3      	mov	fp, sl
 80079b0:	220a      	movs	r2, #10
 80079b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80079b4:	7806      	ldrb	r6, [r0, #0]
 80079b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80079ba:	b2d9      	uxtb	r1, r3
 80079bc:	2909      	cmp	r1, #9
 80079be:	d926      	bls.n	8007a0e <_strtod_l+0x1ae>
 80079c0:	494c      	ldr	r1, [pc, #304]	; (8007af4 <_strtod_l+0x294>)
 80079c2:	2201      	movs	r2, #1
 80079c4:	f001 fe0d 	bl	80095e2 <strncmp>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d030      	beq.n	8007a2e <_strtod_l+0x1ce>
 80079cc:	2000      	movs	r0, #0
 80079ce:	4632      	mov	r2, r6
 80079d0:	9005      	str	r0, [sp, #20]
 80079d2:	465e      	mov	r6, fp
 80079d4:	4603      	mov	r3, r0
 80079d6:	2a65      	cmp	r2, #101	; 0x65
 80079d8:	d001      	beq.n	80079de <_strtod_l+0x17e>
 80079da:	2a45      	cmp	r2, #69	; 0x45
 80079dc:	d113      	bne.n	8007a06 <_strtod_l+0x1a6>
 80079de:	b91e      	cbnz	r6, 80079e8 <_strtod_l+0x188>
 80079e0:	9a04      	ldr	r2, [sp, #16]
 80079e2:	4302      	orrs	r2, r0
 80079e4:	d094      	beq.n	8007910 <_strtod_l+0xb0>
 80079e6:	2600      	movs	r6, #0
 80079e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80079ea:	1c6a      	adds	r2, r5, #1
 80079ec:	9215      	str	r2, [sp, #84]	; 0x54
 80079ee:	786a      	ldrb	r2, [r5, #1]
 80079f0:	2a2b      	cmp	r2, #43	; 0x2b
 80079f2:	d074      	beq.n	8007ade <_strtod_l+0x27e>
 80079f4:	2a2d      	cmp	r2, #45	; 0x2d
 80079f6:	d078      	beq.n	8007aea <_strtod_l+0x28a>
 80079f8:	f04f 0c00 	mov.w	ip, #0
 80079fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007a00:	2909      	cmp	r1, #9
 8007a02:	d97f      	bls.n	8007b04 <_strtod_l+0x2a4>
 8007a04:	9515      	str	r5, [sp, #84]	; 0x54
 8007a06:	2700      	movs	r7, #0
 8007a08:	e09e      	b.n	8007b48 <_strtod_l+0x2e8>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	e7c8      	b.n	80079a0 <_strtod_l+0x140>
 8007a0e:	f1bb 0f08 	cmp.w	fp, #8
 8007a12:	bfd8      	it	le
 8007a14:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007a16:	f100 0001 	add.w	r0, r0, #1
 8007a1a:	bfda      	itte	le
 8007a1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a20:	9309      	strle	r3, [sp, #36]	; 0x24
 8007a22:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007a26:	f10b 0b01 	add.w	fp, fp, #1
 8007a2a:	9015      	str	r0, [sp, #84]	; 0x54
 8007a2c:	e7c1      	b.n	80079b2 <_strtod_l+0x152>
 8007a2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	9215      	str	r2, [sp, #84]	; 0x54
 8007a34:	785a      	ldrb	r2, [r3, #1]
 8007a36:	f1bb 0f00 	cmp.w	fp, #0
 8007a3a:	d037      	beq.n	8007aac <_strtod_l+0x24c>
 8007a3c:	9005      	str	r0, [sp, #20]
 8007a3e:	465e      	mov	r6, fp
 8007a40:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007a44:	2b09      	cmp	r3, #9
 8007a46:	d912      	bls.n	8007a6e <_strtod_l+0x20e>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e7c4      	b.n	80079d6 <_strtod_l+0x176>
 8007a4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a4e:	1c5a      	adds	r2, r3, #1
 8007a50:	9215      	str	r2, [sp, #84]	; 0x54
 8007a52:	785a      	ldrb	r2, [r3, #1]
 8007a54:	3001      	adds	r0, #1
 8007a56:	2a30      	cmp	r2, #48	; 0x30
 8007a58:	d0f8      	beq.n	8007a4c <_strtod_l+0x1ec>
 8007a5a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007a5e:	2b08      	cmp	r3, #8
 8007a60:	f200 84c1 	bhi.w	80083e6 <_strtod_l+0xb86>
 8007a64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a66:	9005      	str	r0, [sp, #20]
 8007a68:	2000      	movs	r0, #0
 8007a6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	3a30      	subs	r2, #48	; 0x30
 8007a70:	f100 0301 	add.w	r3, r0, #1
 8007a74:	d014      	beq.n	8007aa0 <_strtod_l+0x240>
 8007a76:	9905      	ldr	r1, [sp, #20]
 8007a78:	4419      	add	r1, r3
 8007a7a:	9105      	str	r1, [sp, #20]
 8007a7c:	4633      	mov	r3, r6
 8007a7e:	eb00 0c06 	add.w	ip, r0, r6
 8007a82:	210a      	movs	r1, #10
 8007a84:	4563      	cmp	r3, ip
 8007a86:	d113      	bne.n	8007ab0 <_strtod_l+0x250>
 8007a88:	1833      	adds	r3, r6, r0
 8007a8a:	2b08      	cmp	r3, #8
 8007a8c:	f106 0601 	add.w	r6, r6, #1
 8007a90:	4406      	add	r6, r0
 8007a92:	dc1a      	bgt.n	8007aca <_strtod_l+0x26a>
 8007a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a96:	230a      	movs	r3, #10
 8007a98:	fb03 2301 	mla	r3, r3, r1, r2
 8007a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007aa2:	1c51      	adds	r1, r2, #1
 8007aa4:	9115      	str	r1, [sp, #84]	; 0x54
 8007aa6:	7852      	ldrb	r2, [r2, #1]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	e7c9      	b.n	8007a40 <_strtod_l+0x1e0>
 8007aac:	4658      	mov	r0, fp
 8007aae:	e7d2      	b.n	8007a56 <_strtod_l+0x1f6>
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	f103 0301 	add.w	r3, r3, #1
 8007ab6:	dc03      	bgt.n	8007ac0 <_strtod_l+0x260>
 8007ab8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007aba:	434f      	muls	r7, r1
 8007abc:	9709      	str	r7, [sp, #36]	; 0x24
 8007abe:	e7e1      	b.n	8007a84 <_strtod_l+0x224>
 8007ac0:	2b10      	cmp	r3, #16
 8007ac2:	bfd8      	it	le
 8007ac4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007ac8:	e7dc      	b.n	8007a84 <_strtod_l+0x224>
 8007aca:	2e10      	cmp	r6, #16
 8007acc:	bfdc      	itt	le
 8007ace:	230a      	movle	r3, #10
 8007ad0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007ad4:	e7e3      	b.n	8007a9e <_strtod_l+0x23e>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	9305      	str	r3, [sp, #20]
 8007ada:	2301      	movs	r3, #1
 8007adc:	e780      	b.n	80079e0 <_strtod_l+0x180>
 8007ade:	f04f 0c00 	mov.w	ip, #0
 8007ae2:	1caa      	adds	r2, r5, #2
 8007ae4:	9215      	str	r2, [sp, #84]	; 0x54
 8007ae6:	78aa      	ldrb	r2, [r5, #2]
 8007ae8:	e788      	b.n	80079fc <_strtod_l+0x19c>
 8007aea:	f04f 0c01 	mov.w	ip, #1
 8007aee:	e7f8      	b.n	8007ae2 <_strtod_l+0x282>
 8007af0:	0800d898 	.word	0x0800d898
 8007af4:	0800d894 	.word	0x0800d894
 8007af8:	7ff00000 	.word	0x7ff00000
 8007afc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007afe:	1c51      	adds	r1, r2, #1
 8007b00:	9115      	str	r1, [sp, #84]	; 0x54
 8007b02:	7852      	ldrb	r2, [r2, #1]
 8007b04:	2a30      	cmp	r2, #48	; 0x30
 8007b06:	d0f9      	beq.n	8007afc <_strtod_l+0x29c>
 8007b08:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007b0c:	2908      	cmp	r1, #8
 8007b0e:	f63f af7a 	bhi.w	8007a06 <_strtod_l+0x1a6>
 8007b12:	3a30      	subs	r2, #48	; 0x30
 8007b14:	9208      	str	r2, [sp, #32]
 8007b16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b18:	920c      	str	r2, [sp, #48]	; 0x30
 8007b1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b1c:	1c57      	adds	r7, r2, #1
 8007b1e:	9715      	str	r7, [sp, #84]	; 0x54
 8007b20:	7852      	ldrb	r2, [r2, #1]
 8007b22:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007b26:	f1be 0f09 	cmp.w	lr, #9
 8007b2a:	d938      	bls.n	8007b9e <_strtod_l+0x33e>
 8007b2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b2e:	1a7f      	subs	r7, r7, r1
 8007b30:	2f08      	cmp	r7, #8
 8007b32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007b36:	dc03      	bgt.n	8007b40 <_strtod_l+0x2e0>
 8007b38:	9908      	ldr	r1, [sp, #32]
 8007b3a:	428f      	cmp	r7, r1
 8007b3c:	bfa8      	it	ge
 8007b3e:	460f      	movge	r7, r1
 8007b40:	f1bc 0f00 	cmp.w	ip, #0
 8007b44:	d000      	beq.n	8007b48 <_strtod_l+0x2e8>
 8007b46:	427f      	negs	r7, r7
 8007b48:	2e00      	cmp	r6, #0
 8007b4a:	d14f      	bne.n	8007bec <_strtod_l+0x38c>
 8007b4c:	9904      	ldr	r1, [sp, #16]
 8007b4e:	4301      	orrs	r1, r0
 8007b50:	f47f aec1 	bne.w	80078d6 <_strtod_l+0x76>
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f47f aedb 	bne.w	8007910 <_strtod_l+0xb0>
 8007b5a:	2a69      	cmp	r2, #105	; 0x69
 8007b5c:	d029      	beq.n	8007bb2 <_strtod_l+0x352>
 8007b5e:	dc26      	bgt.n	8007bae <_strtod_l+0x34e>
 8007b60:	2a49      	cmp	r2, #73	; 0x49
 8007b62:	d026      	beq.n	8007bb2 <_strtod_l+0x352>
 8007b64:	2a4e      	cmp	r2, #78	; 0x4e
 8007b66:	f47f aed3 	bne.w	8007910 <_strtod_l+0xb0>
 8007b6a:	499b      	ldr	r1, [pc, #620]	; (8007dd8 <_strtod_l+0x578>)
 8007b6c:	a815      	add	r0, sp, #84	; 0x54
 8007b6e:	f002 fff5 	bl	800ab5c <__match>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	f43f aecc 	beq.w	8007910 <_strtod_l+0xb0>
 8007b78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b28      	cmp	r3, #40	; 0x28
 8007b7e:	d12f      	bne.n	8007be0 <_strtod_l+0x380>
 8007b80:	4996      	ldr	r1, [pc, #600]	; (8007ddc <_strtod_l+0x57c>)
 8007b82:	aa18      	add	r2, sp, #96	; 0x60
 8007b84:	a815      	add	r0, sp, #84	; 0x54
 8007b86:	f002 fffd 	bl	800ab84 <__hexnan>
 8007b8a:	2805      	cmp	r0, #5
 8007b8c:	d128      	bne.n	8007be0 <_strtod_l+0x380>
 8007b8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007b94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007b98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007b9c:	e69b      	b.n	80078d6 <_strtod_l+0x76>
 8007b9e:	9f08      	ldr	r7, [sp, #32]
 8007ba0:	210a      	movs	r1, #10
 8007ba2:	fb01 2107 	mla	r1, r1, r7, r2
 8007ba6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007baa:	9208      	str	r2, [sp, #32]
 8007bac:	e7b5      	b.n	8007b1a <_strtod_l+0x2ba>
 8007bae:	2a6e      	cmp	r2, #110	; 0x6e
 8007bb0:	e7d9      	b.n	8007b66 <_strtod_l+0x306>
 8007bb2:	498b      	ldr	r1, [pc, #556]	; (8007de0 <_strtod_l+0x580>)
 8007bb4:	a815      	add	r0, sp, #84	; 0x54
 8007bb6:	f002 ffd1 	bl	800ab5c <__match>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	f43f aea8 	beq.w	8007910 <_strtod_l+0xb0>
 8007bc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bc2:	4988      	ldr	r1, [pc, #544]	; (8007de4 <_strtod_l+0x584>)
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	a815      	add	r0, sp, #84	; 0x54
 8007bc8:	9315      	str	r3, [sp, #84]	; 0x54
 8007bca:	f002 ffc7 	bl	800ab5c <__match>
 8007bce:	b910      	cbnz	r0, 8007bd6 <_strtod_l+0x376>
 8007bd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	9315      	str	r3, [sp, #84]	; 0x54
 8007bd6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007df4 <_strtod_l+0x594>
 8007bda:	f04f 0800 	mov.w	r8, #0
 8007bde:	e67a      	b.n	80078d6 <_strtod_l+0x76>
 8007be0:	4881      	ldr	r0, [pc, #516]	; (8007de8 <_strtod_l+0x588>)
 8007be2:	f001 fe21 	bl	8009828 <nan>
 8007be6:	ec59 8b10 	vmov	r8, r9, d0
 8007bea:	e674      	b.n	80078d6 <_strtod_l+0x76>
 8007bec:	9b05      	ldr	r3, [sp, #20]
 8007bee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bf0:	1afb      	subs	r3, r7, r3
 8007bf2:	f1bb 0f00 	cmp.w	fp, #0
 8007bf6:	bf08      	it	eq
 8007bf8:	46b3      	moveq	fp, r6
 8007bfa:	2e10      	cmp	r6, #16
 8007bfc:	9308      	str	r3, [sp, #32]
 8007bfe:	4635      	mov	r5, r6
 8007c00:	bfa8      	it	ge
 8007c02:	2510      	movge	r5, #16
 8007c04:	f7f8 fc7e 	bl	8000504 <__aeabi_ui2d>
 8007c08:	2e09      	cmp	r6, #9
 8007c0a:	4680      	mov	r8, r0
 8007c0c:	4689      	mov	r9, r1
 8007c0e:	dd13      	ble.n	8007c38 <_strtod_l+0x3d8>
 8007c10:	4b76      	ldr	r3, [pc, #472]	; (8007dec <_strtod_l+0x58c>)
 8007c12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007c16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007c1a:	f7f8 fced 	bl	80005f8 <__aeabi_dmul>
 8007c1e:	4680      	mov	r8, r0
 8007c20:	4650      	mov	r0, sl
 8007c22:	4689      	mov	r9, r1
 8007c24:	f7f8 fc6e 	bl	8000504 <__aeabi_ui2d>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4640      	mov	r0, r8
 8007c2e:	4649      	mov	r1, r9
 8007c30:	f7f8 fb2c 	bl	800028c <__adddf3>
 8007c34:	4680      	mov	r8, r0
 8007c36:	4689      	mov	r9, r1
 8007c38:	2e0f      	cmp	r6, #15
 8007c3a:	dc38      	bgt.n	8007cae <_strtod_l+0x44e>
 8007c3c:	9b08      	ldr	r3, [sp, #32]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f43f ae49 	beq.w	80078d6 <_strtod_l+0x76>
 8007c44:	dd24      	ble.n	8007c90 <_strtod_l+0x430>
 8007c46:	2b16      	cmp	r3, #22
 8007c48:	dc0b      	bgt.n	8007c62 <_strtod_l+0x402>
 8007c4a:	4968      	ldr	r1, [pc, #416]	; (8007dec <_strtod_l+0x58c>)
 8007c4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c54:	4642      	mov	r2, r8
 8007c56:	464b      	mov	r3, r9
 8007c58:	f7f8 fcce 	bl	80005f8 <__aeabi_dmul>
 8007c5c:	4680      	mov	r8, r0
 8007c5e:	4689      	mov	r9, r1
 8007c60:	e639      	b.n	80078d6 <_strtod_l+0x76>
 8007c62:	9a08      	ldr	r2, [sp, #32]
 8007c64:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	db20      	blt.n	8007cae <_strtod_l+0x44e>
 8007c6c:	4c5f      	ldr	r4, [pc, #380]	; (8007dec <_strtod_l+0x58c>)
 8007c6e:	f1c6 060f 	rsb	r6, r6, #15
 8007c72:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007c76:	4642      	mov	r2, r8
 8007c78:	464b      	mov	r3, r9
 8007c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c7e:	f7f8 fcbb 	bl	80005f8 <__aeabi_dmul>
 8007c82:	9b08      	ldr	r3, [sp, #32]
 8007c84:	1b9e      	subs	r6, r3, r6
 8007c86:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007c8a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c8e:	e7e3      	b.n	8007c58 <_strtod_l+0x3f8>
 8007c90:	9b08      	ldr	r3, [sp, #32]
 8007c92:	3316      	adds	r3, #22
 8007c94:	db0b      	blt.n	8007cae <_strtod_l+0x44e>
 8007c96:	9b05      	ldr	r3, [sp, #20]
 8007c98:	1bdf      	subs	r7, r3, r7
 8007c9a:	4b54      	ldr	r3, [pc, #336]	; (8007dec <_strtod_l+0x58c>)
 8007c9c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	f7f8 fdd0 	bl	800084c <__aeabi_ddiv>
 8007cac:	e7d6      	b.n	8007c5c <_strtod_l+0x3fc>
 8007cae:	9b08      	ldr	r3, [sp, #32]
 8007cb0:	1b75      	subs	r5, r6, r5
 8007cb2:	441d      	add	r5, r3
 8007cb4:	2d00      	cmp	r5, #0
 8007cb6:	dd70      	ble.n	8007d9a <_strtod_l+0x53a>
 8007cb8:	f015 030f 	ands.w	r3, r5, #15
 8007cbc:	d00a      	beq.n	8007cd4 <_strtod_l+0x474>
 8007cbe:	494b      	ldr	r1, [pc, #300]	; (8007dec <_strtod_l+0x58c>)
 8007cc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cc4:	4642      	mov	r2, r8
 8007cc6:	464b      	mov	r3, r9
 8007cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ccc:	f7f8 fc94 	bl	80005f8 <__aeabi_dmul>
 8007cd0:	4680      	mov	r8, r0
 8007cd2:	4689      	mov	r9, r1
 8007cd4:	f035 050f 	bics.w	r5, r5, #15
 8007cd8:	d04d      	beq.n	8007d76 <_strtod_l+0x516>
 8007cda:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007cde:	dd22      	ble.n	8007d26 <_strtod_l+0x4c6>
 8007ce0:	2500      	movs	r5, #0
 8007ce2:	46ab      	mov	fp, r5
 8007ce4:	9509      	str	r5, [sp, #36]	; 0x24
 8007ce6:	9505      	str	r5, [sp, #20]
 8007ce8:	2322      	movs	r3, #34	; 0x22
 8007cea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007df4 <_strtod_l+0x594>
 8007cee:	6023      	str	r3, [r4, #0]
 8007cf0:	f04f 0800 	mov.w	r8, #0
 8007cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f43f aded 	beq.w	80078d6 <_strtod_l+0x76>
 8007cfc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f003 f82e 	bl	800ad60 <_Bfree>
 8007d04:	9905      	ldr	r1, [sp, #20]
 8007d06:	4620      	mov	r0, r4
 8007d08:	f003 f82a 	bl	800ad60 <_Bfree>
 8007d0c:	4659      	mov	r1, fp
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f003 f826 	bl	800ad60 <_Bfree>
 8007d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d16:	4620      	mov	r0, r4
 8007d18:	f003 f822 	bl	800ad60 <_Bfree>
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f003 f81e 	bl	800ad60 <_Bfree>
 8007d24:	e5d7      	b.n	80078d6 <_strtod_l+0x76>
 8007d26:	4b32      	ldr	r3, [pc, #200]	; (8007df0 <_strtod_l+0x590>)
 8007d28:	9304      	str	r3, [sp, #16]
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	112d      	asrs	r5, r5, #4
 8007d2e:	4640      	mov	r0, r8
 8007d30:	4649      	mov	r1, r9
 8007d32:	469a      	mov	sl, r3
 8007d34:	2d01      	cmp	r5, #1
 8007d36:	dc21      	bgt.n	8007d7c <_strtod_l+0x51c>
 8007d38:	b10b      	cbz	r3, 8007d3e <_strtod_l+0x4de>
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	4689      	mov	r9, r1
 8007d3e:	492c      	ldr	r1, [pc, #176]	; (8007df0 <_strtod_l+0x590>)
 8007d40:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007d44:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007d48:	4642      	mov	r2, r8
 8007d4a:	464b      	mov	r3, r9
 8007d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d50:	f7f8 fc52 	bl	80005f8 <__aeabi_dmul>
 8007d54:	4b27      	ldr	r3, [pc, #156]	; (8007df4 <_strtod_l+0x594>)
 8007d56:	460a      	mov	r2, r1
 8007d58:	400b      	ands	r3, r1
 8007d5a:	4927      	ldr	r1, [pc, #156]	; (8007df8 <_strtod_l+0x598>)
 8007d5c:	428b      	cmp	r3, r1
 8007d5e:	4680      	mov	r8, r0
 8007d60:	d8be      	bhi.n	8007ce0 <_strtod_l+0x480>
 8007d62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007d66:	428b      	cmp	r3, r1
 8007d68:	bf86      	itte	hi
 8007d6a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007dfc <_strtod_l+0x59c>
 8007d6e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007d72:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007d76:	2300      	movs	r3, #0
 8007d78:	9304      	str	r3, [sp, #16]
 8007d7a:	e07b      	b.n	8007e74 <_strtod_l+0x614>
 8007d7c:	07ea      	lsls	r2, r5, #31
 8007d7e:	d505      	bpl.n	8007d8c <_strtod_l+0x52c>
 8007d80:	9b04      	ldr	r3, [sp, #16]
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	f7f8 fc37 	bl	80005f8 <__aeabi_dmul>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	9a04      	ldr	r2, [sp, #16]
 8007d8e:	3208      	adds	r2, #8
 8007d90:	f10a 0a01 	add.w	sl, sl, #1
 8007d94:	106d      	asrs	r5, r5, #1
 8007d96:	9204      	str	r2, [sp, #16]
 8007d98:	e7cc      	b.n	8007d34 <_strtod_l+0x4d4>
 8007d9a:	d0ec      	beq.n	8007d76 <_strtod_l+0x516>
 8007d9c:	426d      	negs	r5, r5
 8007d9e:	f015 020f 	ands.w	r2, r5, #15
 8007da2:	d00a      	beq.n	8007dba <_strtod_l+0x55a>
 8007da4:	4b11      	ldr	r3, [pc, #68]	; (8007dec <_strtod_l+0x58c>)
 8007da6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007daa:	4640      	mov	r0, r8
 8007dac:	4649      	mov	r1, r9
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	f7f8 fd4b 	bl	800084c <__aeabi_ddiv>
 8007db6:	4680      	mov	r8, r0
 8007db8:	4689      	mov	r9, r1
 8007dba:	112d      	asrs	r5, r5, #4
 8007dbc:	d0db      	beq.n	8007d76 <_strtod_l+0x516>
 8007dbe:	2d1f      	cmp	r5, #31
 8007dc0:	dd1e      	ble.n	8007e00 <_strtod_l+0x5a0>
 8007dc2:	2500      	movs	r5, #0
 8007dc4:	46ab      	mov	fp, r5
 8007dc6:	9509      	str	r5, [sp, #36]	; 0x24
 8007dc8:	9505      	str	r5, [sp, #20]
 8007dca:	2322      	movs	r3, #34	; 0x22
 8007dcc:	f04f 0800 	mov.w	r8, #0
 8007dd0:	f04f 0900 	mov.w	r9, #0
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	e78d      	b.n	8007cf4 <_strtod_l+0x494>
 8007dd8:	0800d9f6 	.word	0x0800d9f6
 8007ddc:	0800d8ac 	.word	0x0800d8ac
 8007de0:	0800d9ee 	.word	0x0800d9ee
 8007de4:	0800dada 	.word	0x0800dada
 8007de8:	0800dad6 	.word	0x0800dad6
 8007dec:	0800dc30 	.word	0x0800dc30
 8007df0:	0800dc08 	.word	0x0800dc08
 8007df4:	7ff00000 	.word	0x7ff00000
 8007df8:	7ca00000 	.word	0x7ca00000
 8007dfc:	7fefffff 	.word	0x7fefffff
 8007e00:	f015 0310 	ands.w	r3, r5, #16
 8007e04:	bf18      	it	ne
 8007e06:	236a      	movne	r3, #106	; 0x6a
 8007e08:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80081ac <_strtod_l+0x94c>
 8007e0c:	9304      	str	r3, [sp, #16]
 8007e0e:	4640      	mov	r0, r8
 8007e10:	4649      	mov	r1, r9
 8007e12:	2300      	movs	r3, #0
 8007e14:	07ea      	lsls	r2, r5, #31
 8007e16:	d504      	bpl.n	8007e22 <_strtod_l+0x5c2>
 8007e18:	e9da 2300 	ldrd	r2, r3, [sl]
 8007e1c:	f7f8 fbec 	bl	80005f8 <__aeabi_dmul>
 8007e20:	2301      	movs	r3, #1
 8007e22:	106d      	asrs	r5, r5, #1
 8007e24:	f10a 0a08 	add.w	sl, sl, #8
 8007e28:	d1f4      	bne.n	8007e14 <_strtod_l+0x5b4>
 8007e2a:	b10b      	cbz	r3, 8007e30 <_strtod_l+0x5d0>
 8007e2c:	4680      	mov	r8, r0
 8007e2e:	4689      	mov	r9, r1
 8007e30:	9b04      	ldr	r3, [sp, #16]
 8007e32:	b1bb      	cbz	r3, 8007e64 <_strtod_l+0x604>
 8007e34:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007e38:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	4649      	mov	r1, r9
 8007e40:	dd10      	ble.n	8007e64 <_strtod_l+0x604>
 8007e42:	2b1f      	cmp	r3, #31
 8007e44:	f340 811e 	ble.w	8008084 <_strtod_l+0x824>
 8007e48:	2b34      	cmp	r3, #52	; 0x34
 8007e4a:	bfde      	ittt	le
 8007e4c:	f04f 33ff 	movle.w	r3, #4294967295
 8007e50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007e54:	4093      	lslle	r3, r2
 8007e56:	f04f 0800 	mov.w	r8, #0
 8007e5a:	bfcc      	ite	gt
 8007e5c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007e60:	ea03 0901 	andle.w	r9, r3, r1
 8007e64:	2200      	movs	r2, #0
 8007e66:	2300      	movs	r3, #0
 8007e68:	4640      	mov	r0, r8
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	f7f8 fe2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d1a6      	bne.n	8007dc2 <_strtod_l+0x562>
 8007e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e7a:	4633      	mov	r3, r6
 8007e7c:	465a      	mov	r2, fp
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f002 ffd6 	bl	800ae30 <__s2b>
 8007e84:	9009      	str	r0, [sp, #36]	; 0x24
 8007e86:	2800      	cmp	r0, #0
 8007e88:	f43f af2a 	beq.w	8007ce0 <_strtod_l+0x480>
 8007e8c:	9a08      	ldr	r2, [sp, #32]
 8007e8e:	9b05      	ldr	r3, [sp, #20]
 8007e90:	2a00      	cmp	r2, #0
 8007e92:	eba3 0307 	sub.w	r3, r3, r7
 8007e96:	bfa8      	it	ge
 8007e98:	2300      	movge	r3, #0
 8007e9a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e9c:	2500      	movs	r5, #0
 8007e9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007ea2:	9312      	str	r3, [sp, #72]	; 0x48
 8007ea4:	46ab      	mov	fp, r5
 8007ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	6859      	ldr	r1, [r3, #4]
 8007eac:	f002 ff18 	bl	800ace0 <_Balloc>
 8007eb0:	9005      	str	r0, [sp, #20]
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	f43f af18 	beq.w	8007ce8 <_strtod_l+0x488>
 8007eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eba:	691a      	ldr	r2, [r3, #16]
 8007ebc:	3202      	adds	r2, #2
 8007ebe:	f103 010c 	add.w	r1, r3, #12
 8007ec2:	0092      	lsls	r2, r2, #2
 8007ec4:	300c      	adds	r0, #12
 8007ec6:	f001 fca0 	bl	800980a <memcpy>
 8007eca:	ec49 8b10 	vmov	d0, r8, r9
 8007ece:	aa18      	add	r2, sp, #96	; 0x60
 8007ed0:	a917      	add	r1, sp, #92	; 0x5c
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f003 fae0 	bl	800b498 <__d2b>
 8007ed8:	ec49 8b18 	vmov	d8, r8, r9
 8007edc:	9016      	str	r0, [sp, #88]	; 0x58
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	f43f af02 	beq.w	8007ce8 <_strtod_l+0x488>
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f003 f83a 	bl	800af60 <__i2b>
 8007eec:	4683      	mov	fp, r0
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	f43f aefa 	beq.w	8007ce8 <_strtod_l+0x488>
 8007ef4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007ef6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007ef8:	2e00      	cmp	r6, #0
 8007efa:	bfab      	itete	ge
 8007efc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007efe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007f00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007f02:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007f06:	bfac      	ite	ge
 8007f08:	eb06 0a03 	addge.w	sl, r6, r3
 8007f0c:	1b9f      	sublt	r7, r3, r6
 8007f0e:	9b04      	ldr	r3, [sp, #16]
 8007f10:	1af6      	subs	r6, r6, r3
 8007f12:	4416      	add	r6, r2
 8007f14:	4ba0      	ldr	r3, [pc, #640]	; (8008198 <_strtod_l+0x938>)
 8007f16:	3e01      	subs	r6, #1
 8007f18:	429e      	cmp	r6, r3
 8007f1a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007f1e:	f280 80c4 	bge.w	80080aa <_strtod_l+0x84a>
 8007f22:	1b9b      	subs	r3, r3, r6
 8007f24:	2b1f      	cmp	r3, #31
 8007f26:	eba2 0203 	sub.w	r2, r2, r3
 8007f2a:	f04f 0101 	mov.w	r1, #1
 8007f2e:	f300 80b0 	bgt.w	8008092 <_strtod_l+0x832>
 8007f32:	fa01 f303 	lsl.w	r3, r1, r3
 8007f36:	930e      	str	r3, [sp, #56]	; 0x38
 8007f38:	2300      	movs	r3, #0
 8007f3a:	930d      	str	r3, [sp, #52]	; 0x34
 8007f3c:	eb0a 0602 	add.w	r6, sl, r2
 8007f40:	9b04      	ldr	r3, [sp, #16]
 8007f42:	45b2      	cmp	sl, r6
 8007f44:	4417      	add	r7, r2
 8007f46:	441f      	add	r7, r3
 8007f48:	4653      	mov	r3, sl
 8007f4a:	bfa8      	it	ge
 8007f4c:	4633      	movge	r3, r6
 8007f4e:	42bb      	cmp	r3, r7
 8007f50:	bfa8      	it	ge
 8007f52:	463b      	movge	r3, r7
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	bfc2      	ittt	gt
 8007f58:	1af6      	subgt	r6, r6, r3
 8007f5a:	1aff      	subgt	r7, r7, r3
 8007f5c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	dd17      	ble.n	8007f96 <_strtod_l+0x736>
 8007f66:	4659      	mov	r1, fp
 8007f68:	461a      	mov	r2, r3
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f003 f8b8 	bl	800b0e0 <__pow5mult>
 8007f70:	4683      	mov	fp, r0
 8007f72:	2800      	cmp	r0, #0
 8007f74:	f43f aeb8 	beq.w	8007ce8 <_strtod_l+0x488>
 8007f78:	4601      	mov	r1, r0
 8007f7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f003 f805 	bl	800af8c <__multiply>
 8007f82:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f84:	2800      	cmp	r0, #0
 8007f86:	f43f aeaf 	beq.w	8007ce8 <_strtod_l+0x488>
 8007f8a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f002 fee7 	bl	800ad60 <_Bfree>
 8007f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f94:	9316      	str	r3, [sp, #88]	; 0x58
 8007f96:	2e00      	cmp	r6, #0
 8007f98:	f300 808c 	bgt.w	80080b4 <_strtod_l+0x854>
 8007f9c:	9b08      	ldr	r3, [sp, #32]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	dd08      	ble.n	8007fb4 <_strtod_l+0x754>
 8007fa2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fa4:	9905      	ldr	r1, [sp, #20]
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f003 f89a 	bl	800b0e0 <__pow5mult>
 8007fac:	9005      	str	r0, [sp, #20]
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	f43f ae9a 	beq.w	8007ce8 <_strtod_l+0x488>
 8007fb4:	2f00      	cmp	r7, #0
 8007fb6:	dd08      	ble.n	8007fca <_strtod_l+0x76a>
 8007fb8:	9905      	ldr	r1, [sp, #20]
 8007fba:	463a      	mov	r2, r7
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f003 f8e9 	bl	800b194 <__lshift>
 8007fc2:	9005      	str	r0, [sp, #20]
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	f43f ae8f 	beq.w	8007ce8 <_strtod_l+0x488>
 8007fca:	f1ba 0f00 	cmp.w	sl, #0
 8007fce:	dd08      	ble.n	8007fe2 <_strtod_l+0x782>
 8007fd0:	4659      	mov	r1, fp
 8007fd2:	4652      	mov	r2, sl
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f003 f8dd 	bl	800b194 <__lshift>
 8007fda:	4683      	mov	fp, r0
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	f43f ae83 	beq.w	8007ce8 <_strtod_l+0x488>
 8007fe2:	9a05      	ldr	r2, [sp, #20]
 8007fe4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f003 f95c 	bl	800b2a4 <__mdiff>
 8007fec:	4605      	mov	r5, r0
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	f43f ae7a 	beq.w	8007ce8 <_strtod_l+0x488>
 8007ff4:	68c3      	ldr	r3, [r0, #12]
 8007ff6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	60c3      	str	r3, [r0, #12]
 8007ffc:	4659      	mov	r1, fp
 8007ffe:	f003 f935 	bl	800b26c <__mcmp>
 8008002:	2800      	cmp	r0, #0
 8008004:	da60      	bge.n	80080c8 <_strtod_l+0x868>
 8008006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008008:	ea53 0308 	orrs.w	r3, r3, r8
 800800c:	f040 8084 	bne.w	8008118 <_strtod_l+0x8b8>
 8008010:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008014:	2b00      	cmp	r3, #0
 8008016:	d17f      	bne.n	8008118 <_strtod_l+0x8b8>
 8008018:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800801c:	0d1b      	lsrs	r3, r3, #20
 800801e:	051b      	lsls	r3, r3, #20
 8008020:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008024:	d978      	bls.n	8008118 <_strtod_l+0x8b8>
 8008026:	696b      	ldr	r3, [r5, #20]
 8008028:	b913      	cbnz	r3, 8008030 <_strtod_l+0x7d0>
 800802a:	692b      	ldr	r3, [r5, #16]
 800802c:	2b01      	cmp	r3, #1
 800802e:	dd73      	ble.n	8008118 <_strtod_l+0x8b8>
 8008030:	4629      	mov	r1, r5
 8008032:	2201      	movs	r2, #1
 8008034:	4620      	mov	r0, r4
 8008036:	f003 f8ad 	bl	800b194 <__lshift>
 800803a:	4659      	mov	r1, fp
 800803c:	4605      	mov	r5, r0
 800803e:	f003 f915 	bl	800b26c <__mcmp>
 8008042:	2800      	cmp	r0, #0
 8008044:	dd68      	ble.n	8008118 <_strtod_l+0x8b8>
 8008046:	9904      	ldr	r1, [sp, #16]
 8008048:	4a54      	ldr	r2, [pc, #336]	; (800819c <_strtod_l+0x93c>)
 800804a:	464b      	mov	r3, r9
 800804c:	2900      	cmp	r1, #0
 800804e:	f000 8084 	beq.w	800815a <_strtod_l+0x8fa>
 8008052:	ea02 0109 	and.w	r1, r2, r9
 8008056:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800805a:	dc7e      	bgt.n	800815a <_strtod_l+0x8fa>
 800805c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008060:	f77f aeb3 	ble.w	8007dca <_strtod_l+0x56a>
 8008064:	4b4e      	ldr	r3, [pc, #312]	; (80081a0 <_strtod_l+0x940>)
 8008066:	4640      	mov	r0, r8
 8008068:	4649      	mov	r1, r9
 800806a:	2200      	movs	r2, #0
 800806c:	f7f8 fac4 	bl	80005f8 <__aeabi_dmul>
 8008070:	4b4a      	ldr	r3, [pc, #296]	; (800819c <_strtod_l+0x93c>)
 8008072:	400b      	ands	r3, r1
 8008074:	4680      	mov	r8, r0
 8008076:	4689      	mov	r9, r1
 8008078:	2b00      	cmp	r3, #0
 800807a:	f47f ae3f 	bne.w	8007cfc <_strtod_l+0x49c>
 800807e:	2322      	movs	r3, #34	; 0x22
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	e63b      	b.n	8007cfc <_strtod_l+0x49c>
 8008084:	f04f 32ff 	mov.w	r2, #4294967295
 8008088:	fa02 f303 	lsl.w	r3, r2, r3
 800808c:	ea03 0808 	and.w	r8, r3, r8
 8008090:	e6e8      	b.n	8007e64 <_strtod_l+0x604>
 8008092:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008096:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800809a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800809e:	36e2      	adds	r6, #226	; 0xe2
 80080a0:	fa01 f306 	lsl.w	r3, r1, r6
 80080a4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80080a8:	e748      	b.n	8007f3c <_strtod_l+0x6dc>
 80080aa:	2100      	movs	r1, #0
 80080ac:	2301      	movs	r3, #1
 80080ae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80080b2:	e743      	b.n	8007f3c <_strtod_l+0x6dc>
 80080b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80080b6:	4632      	mov	r2, r6
 80080b8:	4620      	mov	r0, r4
 80080ba:	f003 f86b 	bl	800b194 <__lshift>
 80080be:	9016      	str	r0, [sp, #88]	; 0x58
 80080c0:	2800      	cmp	r0, #0
 80080c2:	f47f af6b 	bne.w	8007f9c <_strtod_l+0x73c>
 80080c6:	e60f      	b.n	8007ce8 <_strtod_l+0x488>
 80080c8:	46ca      	mov	sl, r9
 80080ca:	d171      	bne.n	80081b0 <_strtod_l+0x950>
 80080cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080d2:	b352      	cbz	r2, 800812a <_strtod_l+0x8ca>
 80080d4:	4a33      	ldr	r2, [pc, #204]	; (80081a4 <_strtod_l+0x944>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d12a      	bne.n	8008130 <_strtod_l+0x8d0>
 80080da:	9b04      	ldr	r3, [sp, #16]
 80080dc:	4641      	mov	r1, r8
 80080de:	b1fb      	cbz	r3, 8008120 <_strtod_l+0x8c0>
 80080e0:	4b2e      	ldr	r3, [pc, #184]	; (800819c <_strtod_l+0x93c>)
 80080e2:	ea09 0303 	and.w	r3, r9, r3
 80080e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80080ea:	f04f 32ff 	mov.w	r2, #4294967295
 80080ee:	d81a      	bhi.n	8008126 <_strtod_l+0x8c6>
 80080f0:	0d1b      	lsrs	r3, r3, #20
 80080f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80080f6:	fa02 f303 	lsl.w	r3, r2, r3
 80080fa:	4299      	cmp	r1, r3
 80080fc:	d118      	bne.n	8008130 <_strtod_l+0x8d0>
 80080fe:	4b2a      	ldr	r3, [pc, #168]	; (80081a8 <_strtod_l+0x948>)
 8008100:	459a      	cmp	sl, r3
 8008102:	d102      	bne.n	800810a <_strtod_l+0x8aa>
 8008104:	3101      	adds	r1, #1
 8008106:	f43f adef 	beq.w	8007ce8 <_strtod_l+0x488>
 800810a:	4b24      	ldr	r3, [pc, #144]	; (800819c <_strtod_l+0x93c>)
 800810c:	ea0a 0303 	and.w	r3, sl, r3
 8008110:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008114:	f04f 0800 	mov.w	r8, #0
 8008118:	9b04      	ldr	r3, [sp, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1a2      	bne.n	8008064 <_strtod_l+0x804>
 800811e:	e5ed      	b.n	8007cfc <_strtod_l+0x49c>
 8008120:	f04f 33ff 	mov.w	r3, #4294967295
 8008124:	e7e9      	b.n	80080fa <_strtod_l+0x89a>
 8008126:	4613      	mov	r3, r2
 8008128:	e7e7      	b.n	80080fa <_strtod_l+0x89a>
 800812a:	ea53 0308 	orrs.w	r3, r3, r8
 800812e:	d08a      	beq.n	8008046 <_strtod_l+0x7e6>
 8008130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008132:	b1e3      	cbz	r3, 800816e <_strtod_l+0x90e>
 8008134:	ea13 0f0a 	tst.w	r3, sl
 8008138:	d0ee      	beq.n	8008118 <_strtod_l+0x8b8>
 800813a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800813c:	9a04      	ldr	r2, [sp, #16]
 800813e:	4640      	mov	r0, r8
 8008140:	4649      	mov	r1, r9
 8008142:	b1c3      	cbz	r3, 8008176 <_strtod_l+0x916>
 8008144:	f7ff fb6e 	bl	8007824 <sulp>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	ec51 0b18 	vmov	r0, r1, d8
 8008150:	f7f8 f89c 	bl	800028c <__adddf3>
 8008154:	4680      	mov	r8, r0
 8008156:	4689      	mov	r9, r1
 8008158:	e7de      	b.n	8008118 <_strtod_l+0x8b8>
 800815a:	4013      	ands	r3, r2
 800815c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008160:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008164:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008168:	f04f 38ff 	mov.w	r8, #4294967295
 800816c:	e7d4      	b.n	8008118 <_strtod_l+0x8b8>
 800816e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008170:	ea13 0f08 	tst.w	r3, r8
 8008174:	e7e0      	b.n	8008138 <_strtod_l+0x8d8>
 8008176:	f7ff fb55 	bl	8007824 <sulp>
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	ec51 0b18 	vmov	r0, r1, d8
 8008182:	f7f8 f881 	bl	8000288 <__aeabi_dsub>
 8008186:	2200      	movs	r2, #0
 8008188:	2300      	movs	r3, #0
 800818a:	4680      	mov	r8, r0
 800818c:	4689      	mov	r9, r1
 800818e:	f7f8 fc9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008192:	2800      	cmp	r0, #0
 8008194:	d0c0      	beq.n	8008118 <_strtod_l+0x8b8>
 8008196:	e618      	b.n	8007dca <_strtod_l+0x56a>
 8008198:	fffffc02 	.word	0xfffffc02
 800819c:	7ff00000 	.word	0x7ff00000
 80081a0:	39500000 	.word	0x39500000
 80081a4:	000fffff 	.word	0x000fffff
 80081a8:	7fefffff 	.word	0x7fefffff
 80081ac:	0800d8c0 	.word	0x0800d8c0
 80081b0:	4659      	mov	r1, fp
 80081b2:	4628      	mov	r0, r5
 80081b4:	f003 f9ca 	bl	800b54c <__ratio>
 80081b8:	ec57 6b10 	vmov	r6, r7, d0
 80081bc:	ee10 0a10 	vmov	r0, s0
 80081c0:	2200      	movs	r2, #0
 80081c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081c6:	4639      	mov	r1, r7
 80081c8:	f7f8 fc92 	bl	8000af0 <__aeabi_dcmple>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d071      	beq.n	80082b4 <_strtod_l+0xa54>
 80081d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d17c      	bne.n	80082d0 <_strtod_l+0xa70>
 80081d6:	f1b8 0f00 	cmp.w	r8, #0
 80081da:	d15a      	bne.n	8008292 <_strtod_l+0xa32>
 80081dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d15d      	bne.n	80082a0 <_strtod_l+0xa40>
 80081e4:	4b90      	ldr	r3, [pc, #576]	; (8008428 <_strtod_l+0xbc8>)
 80081e6:	2200      	movs	r2, #0
 80081e8:	4630      	mov	r0, r6
 80081ea:	4639      	mov	r1, r7
 80081ec:	f7f8 fc76 	bl	8000adc <__aeabi_dcmplt>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d15c      	bne.n	80082ae <_strtod_l+0xa4e>
 80081f4:	4630      	mov	r0, r6
 80081f6:	4639      	mov	r1, r7
 80081f8:	4b8c      	ldr	r3, [pc, #560]	; (800842c <_strtod_l+0xbcc>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	f7f8 f9fc 	bl	80005f8 <__aeabi_dmul>
 8008200:	4606      	mov	r6, r0
 8008202:	460f      	mov	r7, r1
 8008204:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008208:	9606      	str	r6, [sp, #24]
 800820a:	9307      	str	r3, [sp, #28]
 800820c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008210:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008214:	4b86      	ldr	r3, [pc, #536]	; (8008430 <_strtod_l+0xbd0>)
 8008216:	ea0a 0303 	and.w	r3, sl, r3
 800821a:	930d      	str	r3, [sp, #52]	; 0x34
 800821c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800821e:	4b85      	ldr	r3, [pc, #532]	; (8008434 <_strtod_l+0xbd4>)
 8008220:	429a      	cmp	r2, r3
 8008222:	f040 8090 	bne.w	8008346 <_strtod_l+0xae6>
 8008226:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800822a:	ec49 8b10 	vmov	d0, r8, r9
 800822e:	f003 f8c3 	bl	800b3b8 <__ulp>
 8008232:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008236:	ec51 0b10 	vmov	r0, r1, d0
 800823a:	f7f8 f9dd 	bl	80005f8 <__aeabi_dmul>
 800823e:	4642      	mov	r2, r8
 8008240:	464b      	mov	r3, r9
 8008242:	f7f8 f823 	bl	800028c <__adddf3>
 8008246:	460b      	mov	r3, r1
 8008248:	4979      	ldr	r1, [pc, #484]	; (8008430 <_strtod_l+0xbd0>)
 800824a:	4a7b      	ldr	r2, [pc, #492]	; (8008438 <_strtod_l+0xbd8>)
 800824c:	4019      	ands	r1, r3
 800824e:	4291      	cmp	r1, r2
 8008250:	4680      	mov	r8, r0
 8008252:	d944      	bls.n	80082de <_strtod_l+0xa7e>
 8008254:	ee18 2a90 	vmov	r2, s17
 8008258:	4b78      	ldr	r3, [pc, #480]	; (800843c <_strtod_l+0xbdc>)
 800825a:	429a      	cmp	r2, r3
 800825c:	d104      	bne.n	8008268 <_strtod_l+0xa08>
 800825e:	ee18 3a10 	vmov	r3, s16
 8008262:	3301      	adds	r3, #1
 8008264:	f43f ad40 	beq.w	8007ce8 <_strtod_l+0x488>
 8008268:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800843c <_strtod_l+0xbdc>
 800826c:	f04f 38ff 	mov.w	r8, #4294967295
 8008270:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008272:	4620      	mov	r0, r4
 8008274:	f002 fd74 	bl	800ad60 <_Bfree>
 8008278:	9905      	ldr	r1, [sp, #20]
 800827a:	4620      	mov	r0, r4
 800827c:	f002 fd70 	bl	800ad60 <_Bfree>
 8008280:	4659      	mov	r1, fp
 8008282:	4620      	mov	r0, r4
 8008284:	f002 fd6c 	bl	800ad60 <_Bfree>
 8008288:	4629      	mov	r1, r5
 800828a:	4620      	mov	r0, r4
 800828c:	f002 fd68 	bl	800ad60 <_Bfree>
 8008290:	e609      	b.n	8007ea6 <_strtod_l+0x646>
 8008292:	f1b8 0f01 	cmp.w	r8, #1
 8008296:	d103      	bne.n	80082a0 <_strtod_l+0xa40>
 8008298:	f1b9 0f00 	cmp.w	r9, #0
 800829c:	f43f ad95 	beq.w	8007dca <_strtod_l+0x56a>
 80082a0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80083f8 <_strtod_l+0xb98>
 80082a4:	4f60      	ldr	r7, [pc, #384]	; (8008428 <_strtod_l+0xbc8>)
 80082a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80082aa:	2600      	movs	r6, #0
 80082ac:	e7ae      	b.n	800820c <_strtod_l+0x9ac>
 80082ae:	4f5f      	ldr	r7, [pc, #380]	; (800842c <_strtod_l+0xbcc>)
 80082b0:	2600      	movs	r6, #0
 80082b2:	e7a7      	b.n	8008204 <_strtod_l+0x9a4>
 80082b4:	4b5d      	ldr	r3, [pc, #372]	; (800842c <_strtod_l+0xbcc>)
 80082b6:	4630      	mov	r0, r6
 80082b8:	4639      	mov	r1, r7
 80082ba:	2200      	movs	r2, #0
 80082bc:	f7f8 f99c 	bl	80005f8 <__aeabi_dmul>
 80082c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082c2:	4606      	mov	r6, r0
 80082c4:	460f      	mov	r7, r1
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d09c      	beq.n	8008204 <_strtod_l+0x9a4>
 80082ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80082ce:	e79d      	b.n	800820c <_strtod_l+0x9ac>
 80082d0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008400 <_strtod_l+0xba0>
 80082d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80082d8:	ec57 6b17 	vmov	r6, r7, d7
 80082dc:	e796      	b.n	800820c <_strtod_l+0x9ac>
 80082de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80082e2:	9b04      	ldr	r3, [sp, #16]
 80082e4:	46ca      	mov	sl, r9
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1c2      	bne.n	8008270 <_strtod_l+0xa10>
 80082ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082f0:	0d1b      	lsrs	r3, r3, #20
 80082f2:	051b      	lsls	r3, r3, #20
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d1bb      	bne.n	8008270 <_strtod_l+0xa10>
 80082f8:	4630      	mov	r0, r6
 80082fa:	4639      	mov	r1, r7
 80082fc:	f7f8 fcdc 	bl	8000cb8 <__aeabi_d2lz>
 8008300:	f7f8 f94c 	bl	800059c <__aeabi_l2d>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	4630      	mov	r0, r6
 800830a:	4639      	mov	r1, r7
 800830c:	f7f7 ffbc 	bl	8000288 <__aeabi_dsub>
 8008310:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008312:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008316:	ea43 0308 	orr.w	r3, r3, r8
 800831a:	4313      	orrs	r3, r2
 800831c:	4606      	mov	r6, r0
 800831e:	460f      	mov	r7, r1
 8008320:	d054      	beq.n	80083cc <_strtod_l+0xb6c>
 8008322:	a339      	add	r3, pc, #228	; (adr r3, 8008408 <_strtod_l+0xba8>)
 8008324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008328:	f7f8 fbd8 	bl	8000adc <__aeabi_dcmplt>
 800832c:	2800      	cmp	r0, #0
 800832e:	f47f ace5 	bne.w	8007cfc <_strtod_l+0x49c>
 8008332:	a337      	add	r3, pc, #220	; (adr r3, 8008410 <_strtod_l+0xbb0>)
 8008334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008338:	4630      	mov	r0, r6
 800833a:	4639      	mov	r1, r7
 800833c:	f7f8 fbec 	bl	8000b18 <__aeabi_dcmpgt>
 8008340:	2800      	cmp	r0, #0
 8008342:	d095      	beq.n	8008270 <_strtod_l+0xa10>
 8008344:	e4da      	b.n	8007cfc <_strtod_l+0x49c>
 8008346:	9b04      	ldr	r3, [sp, #16]
 8008348:	b333      	cbz	r3, 8008398 <_strtod_l+0xb38>
 800834a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800834c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008350:	d822      	bhi.n	8008398 <_strtod_l+0xb38>
 8008352:	a331      	add	r3, pc, #196	; (adr r3, 8008418 <_strtod_l+0xbb8>)
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	4630      	mov	r0, r6
 800835a:	4639      	mov	r1, r7
 800835c:	f7f8 fbc8 	bl	8000af0 <__aeabi_dcmple>
 8008360:	b1a0      	cbz	r0, 800838c <_strtod_l+0xb2c>
 8008362:	4639      	mov	r1, r7
 8008364:	4630      	mov	r0, r6
 8008366:	f7f8 fc1f 	bl	8000ba8 <__aeabi_d2uiz>
 800836a:	2801      	cmp	r0, #1
 800836c:	bf38      	it	cc
 800836e:	2001      	movcc	r0, #1
 8008370:	f7f8 f8c8 	bl	8000504 <__aeabi_ui2d>
 8008374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008376:	4606      	mov	r6, r0
 8008378:	460f      	mov	r7, r1
 800837a:	bb23      	cbnz	r3, 80083c6 <_strtod_l+0xb66>
 800837c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008380:	9010      	str	r0, [sp, #64]	; 0x40
 8008382:	9311      	str	r3, [sp, #68]	; 0x44
 8008384:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008388:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800838c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800838e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008390:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008394:	1a9b      	subs	r3, r3, r2
 8008396:	930f      	str	r3, [sp, #60]	; 0x3c
 8008398:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800839c:	eeb0 0a48 	vmov.f32	s0, s16
 80083a0:	eef0 0a68 	vmov.f32	s1, s17
 80083a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80083a8:	f003 f806 	bl	800b3b8 <__ulp>
 80083ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80083b0:	ec53 2b10 	vmov	r2, r3, d0
 80083b4:	f7f8 f920 	bl	80005f8 <__aeabi_dmul>
 80083b8:	ec53 2b18 	vmov	r2, r3, d8
 80083bc:	f7f7 ff66 	bl	800028c <__adddf3>
 80083c0:	4680      	mov	r8, r0
 80083c2:	4689      	mov	r9, r1
 80083c4:	e78d      	b.n	80082e2 <_strtod_l+0xa82>
 80083c6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80083ca:	e7db      	b.n	8008384 <_strtod_l+0xb24>
 80083cc:	a314      	add	r3, pc, #80	; (adr r3, 8008420 <_strtod_l+0xbc0>)
 80083ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d2:	f7f8 fb83 	bl	8000adc <__aeabi_dcmplt>
 80083d6:	e7b3      	b.n	8008340 <_strtod_l+0xae0>
 80083d8:	2300      	movs	r3, #0
 80083da:	930a      	str	r3, [sp, #40]	; 0x28
 80083dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083e0:	6013      	str	r3, [r2, #0]
 80083e2:	f7ff ba7c 	b.w	80078de <_strtod_l+0x7e>
 80083e6:	2a65      	cmp	r2, #101	; 0x65
 80083e8:	f43f ab75 	beq.w	8007ad6 <_strtod_l+0x276>
 80083ec:	2a45      	cmp	r2, #69	; 0x45
 80083ee:	f43f ab72 	beq.w	8007ad6 <_strtod_l+0x276>
 80083f2:	2301      	movs	r3, #1
 80083f4:	f7ff bbaa 	b.w	8007b4c <_strtod_l+0x2ec>
 80083f8:	00000000 	.word	0x00000000
 80083fc:	bff00000 	.word	0xbff00000
 8008400:	00000000 	.word	0x00000000
 8008404:	3ff00000 	.word	0x3ff00000
 8008408:	94a03595 	.word	0x94a03595
 800840c:	3fdfffff 	.word	0x3fdfffff
 8008410:	35afe535 	.word	0x35afe535
 8008414:	3fe00000 	.word	0x3fe00000
 8008418:	ffc00000 	.word	0xffc00000
 800841c:	41dfffff 	.word	0x41dfffff
 8008420:	94a03595 	.word	0x94a03595
 8008424:	3fcfffff 	.word	0x3fcfffff
 8008428:	3ff00000 	.word	0x3ff00000
 800842c:	3fe00000 	.word	0x3fe00000
 8008430:	7ff00000 	.word	0x7ff00000
 8008434:	7fe00000 	.word	0x7fe00000
 8008438:	7c9fffff 	.word	0x7c9fffff
 800843c:	7fefffff 	.word	0x7fefffff

08008440 <_strtod_r>:
 8008440:	4b01      	ldr	r3, [pc, #4]	; (8008448 <_strtod_r+0x8>)
 8008442:	f7ff ba0d 	b.w	8007860 <_strtod_l>
 8008446:	bf00      	nop
 8008448:	20000028 	.word	0x20000028

0800844c <strtof>:
 800844c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008450:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8008514 <strtof+0xc8>
 8008454:	4b2a      	ldr	r3, [pc, #168]	; (8008500 <strtof+0xb4>)
 8008456:	460a      	mov	r2, r1
 8008458:	ed2d 8b02 	vpush	{d8}
 800845c:	4601      	mov	r1, r0
 800845e:	f8d8 0000 	ldr.w	r0, [r8]
 8008462:	f7ff f9fd 	bl	8007860 <_strtod_l>
 8008466:	ec55 4b10 	vmov	r4, r5, d0
 800846a:	ee10 2a10 	vmov	r2, s0
 800846e:	ee10 0a10 	vmov	r0, s0
 8008472:	462b      	mov	r3, r5
 8008474:	4629      	mov	r1, r5
 8008476:	f7f8 fb59 	bl	8000b2c <__aeabi_dcmpun>
 800847a:	b190      	cbz	r0, 80084a2 <strtof+0x56>
 800847c:	2d00      	cmp	r5, #0
 800847e:	4821      	ldr	r0, [pc, #132]	; (8008504 <strtof+0xb8>)
 8008480:	da09      	bge.n	8008496 <strtof+0x4a>
 8008482:	f001 f9d9 	bl	8009838 <nanf>
 8008486:	eeb1 8a40 	vneg.f32	s16, s0
 800848a:	eeb0 0a48 	vmov.f32	s0, s16
 800848e:	ecbd 8b02 	vpop	{d8}
 8008492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008496:	ecbd 8b02 	vpop	{d8}
 800849a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800849e:	f001 b9cb 	b.w	8009838 <nanf>
 80084a2:	4620      	mov	r0, r4
 80084a4:	4629      	mov	r1, r5
 80084a6:	f7f8 fb9f 	bl	8000be8 <__aeabi_d2f>
 80084aa:	ee08 0a10 	vmov	s16, r0
 80084ae:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008508 <strtof+0xbc>
 80084b2:	eeb0 7ac8 	vabs.f32	s14, s16
 80084b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80084ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084be:	dd11      	ble.n	80084e4 <strtof+0x98>
 80084c0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80084c4:	4b11      	ldr	r3, [pc, #68]	; (800850c <strtof+0xc0>)
 80084c6:	f04f 32ff 	mov.w	r2, #4294967295
 80084ca:	4620      	mov	r0, r4
 80084cc:	4639      	mov	r1, r7
 80084ce:	f7f8 fb2d 	bl	8000b2c <__aeabi_dcmpun>
 80084d2:	b980      	cbnz	r0, 80084f6 <strtof+0xaa>
 80084d4:	4b0d      	ldr	r3, [pc, #52]	; (800850c <strtof+0xc0>)
 80084d6:	f04f 32ff 	mov.w	r2, #4294967295
 80084da:	4620      	mov	r0, r4
 80084dc:	4639      	mov	r1, r7
 80084de:	f7f8 fb07 	bl	8000af0 <__aeabi_dcmple>
 80084e2:	b940      	cbnz	r0, 80084f6 <strtof+0xaa>
 80084e4:	ee18 3a10 	vmov	r3, s16
 80084e8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80084ec:	d1cd      	bne.n	800848a <strtof+0x3e>
 80084ee:	4b08      	ldr	r3, [pc, #32]	; (8008510 <strtof+0xc4>)
 80084f0:	402b      	ands	r3, r5
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0c9      	beq.n	800848a <strtof+0x3e>
 80084f6:	f8d8 3000 	ldr.w	r3, [r8]
 80084fa:	2222      	movs	r2, #34	; 0x22
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	e7c4      	b.n	800848a <strtof+0x3e>
 8008500:	20000028 	.word	0x20000028
 8008504:	0800dad6 	.word	0x0800dad6
 8008508:	7f7fffff 	.word	0x7f7fffff
 800850c:	7fefffff 	.word	0x7fefffff
 8008510:	7ff00000 	.word	0x7ff00000
 8008514:	200001e0 	.word	0x200001e0

08008518 <_strtol_l.constprop.0>:
 8008518:	2b01      	cmp	r3, #1
 800851a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800851e:	d001      	beq.n	8008524 <_strtol_l.constprop.0+0xc>
 8008520:	2b24      	cmp	r3, #36	; 0x24
 8008522:	d906      	bls.n	8008532 <_strtol_l.constprop.0+0x1a>
 8008524:	f001 f93c 	bl	80097a0 <__errno>
 8008528:	2316      	movs	r3, #22
 800852a:	6003      	str	r3, [r0, #0]
 800852c:	2000      	movs	r0, #0
 800852e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008532:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008618 <_strtol_l.constprop.0+0x100>
 8008536:	460d      	mov	r5, r1
 8008538:	462e      	mov	r6, r5
 800853a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800853e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008542:	f017 0708 	ands.w	r7, r7, #8
 8008546:	d1f7      	bne.n	8008538 <_strtol_l.constprop.0+0x20>
 8008548:	2c2d      	cmp	r4, #45	; 0x2d
 800854a:	d132      	bne.n	80085b2 <_strtol_l.constprop.0+0x9a>
 800854c:	782c      	ldrb	r4, [r5, #0]
 800854e:	2701      	movs	r7, #1
 8008550:	1cb5      	adds	r5, r6, #2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d05b      	beq.n	800860e <_strtol_l.constprop.0+0xf6>
 8008556:	2b10      	cmp	r3, #16
 8008558:	d109      	bne.n	800856e <_strtol_l.constprop.0+0x56>
 800855a:	2c30      	cmp	r4, #48	; 0x30
 800855c:	d107      	bne.n	800856e <_strtol_l.constprop.0+0x56>
 800855e:	782c      	ldrb	r4, [r5, #0]
 8008560:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008564:	2c58      	cmp	r4, #88	; 0x58
 8008566:	d14d      	bne.n	8008604 <_strtol_l.constprop.0+0xec>
 8008568:	786c      	ldrb	r4, [r5, #1]
 800856a:	2310      	movs	r3, #16
 800856c:	3502      	adds	r5, #2
 800856e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008572:	f108 38ff 	add.w	r8, r8, #4294967295
 8008576:	f04f 0e00 	mov.w	lr, #0
 800857a:	fbb8 f9f3 	udiv	r9, r8, r3
 800857e:	4676      	mov	r6, lr
 8008580:	fb03 8a19 	mls	sl, r3, r9, r8
 8008584:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008588:	f1bc 0f09 	cmp.w	ip, #9
 800858c:	d816      	bhi.n	80085bc <_strtol_l.constprop.0+0xa4>
 800858e:	4664      	mov	r4, ip
 8008590:	42a3      	cmp	r3, r4
 8008592:	dd24      	ble.n	80085de <_strtol_l.constprop.0+0xc6>
 8008594:	f1be 3fff 	cmp.w	lr, #4294967295
 8008598:	d008      	beq.n	80085ac <_strtol_l.constprop.0+0x94>
 800859a:	45b1      	cmp	r9, r6
 800859c:	d31c      	bcc.n	80085d8 <_strtol_l.constprop.0+0xc0>
 800859e:	d101      	bne.n	80085a4 <_strtol_l.constprop.0+0x8c>
 80085a0:	45a2      	cmp	sl, r4
 80085a2:	db19      	blt.n	80085d8 <_strtol_l.constprop.0+0xc0>
 80085a4:	fb06 4603 	mla	r6, r6, r3, r4
 80085a8:	f04f 0e01 	mov.w	lr, #1
 80085ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085b0:	e7e8      	b.n	8008584 <_strtol_l.constprop.0+0x6c>
 80085b2:	2c2b      	cmp	r4, #43	; 0x2b
 80085b4:	bf04      	itt	eq
 80085b6:	782c      	ldrbeq	r4, [r5, #0]
 80085b8:	1cb5      	addeq	r5, r6, #2
 80085ba:	e7ca      	b.n	8008552 <_strtol_l.constprop.0+0x3a>
 80085bc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80085c0:	f1bc 0f19 	cmp.w	ip, #25
 80085c4:	d801      	bhi.n	80085ca <_strtol_l.constprop.0+0xb2>
 80085c6:	3c37      	subs	r4, #55	; 0x37
 80085c8:	e7e2      	b.n	8008590 <_strtol_l.constprop.0+0x78>
 80085ca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80085ce:	f1bc 0f19 	cmp.w	ip, #25
 80085d2:	d804      	bhi.n	80085de <_strtol_l.constprop.0+0xc6>
 80085d4:	3c57      	subs	r4, #87	; 0x57
 80085d6:	e7db      	b.n	8008590 <_strtol_l.constprop.0+0x78>
 80085d8:	f04f 3eff 	mov.w	lr, #4294967295
 80085dc:	e7e6      	b.n	80085ac <_strtol_l.constprop.0+0x94>
 80085de:	f1be 3fff 	cmp.w	lr, #4294967295
 80085e2:	d105      	bne.n	80085f0 <_strtol_l.constprop.0+0xd8>
 80085e4:	2322      	movs	r3, #34	; 0x22
 80085e6:	6003      	str	r3, [r0, #0]
 80085e8:	4646      	mov	r6, r8
 80085ea:	b942      	cbnz	r2, 80085fe <_strtol_l.constprop.0+0xe6>
 80085ec:	4630      	mov	r0, r6
 80085ee:	e79e      	b.n	800852e <_strtol_l.constprop.0+0x16>
 80085f0:	b107      	cbz	r7, 80085f4 <_strtol_l.constprop.0+0xdc>
 80085f2:	4276      	negs	r6, r6
 80085f4:	2a00      	cmp	r2, #0
 80085f6:	d0f9      	beq.n	80085ec <_strtol_l.constprop.0+0xd4>
 80085f8:	f1be 0f00 	cmp.w	lr, #0
 80085fc:	d000      	beq.n	8008600 <_strtol_l.constprop.0+0xe8>
 80085fe:	1e69      	subs	r1, r5, #1
 8008600:	6011      	str	r1, [r2, #0]
 8008602:	e7f3      	b.n	80085ec <_strtol_l.constprop.0+0xd4>
 8008604:	2430      	movs	r4, #48	; 0x30
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1b1      	bne.n	800856e <_strtol_l.constprop.0+0x56>
 800860a:	2308      	movs	r3, #8
 800860c:	e7af      	b.n	800856e <_strtol_l.constprop.0+0x56>
 800860e:	2c30      	cmp	r4, #48	; 0x30
 8008610:	d0a5      	beq.n	800855e <_strtol_l.constprop.0+0x46>
 8008612:	230a      	movs	r3, #10
 8008614:	e7ab      	b.n	800856e <_strtol_l.constprop.0+0x56>
 8008616:	bf00      	nop
 8008618:	0800d8e9 	.word	0x0800d8e9

0800861c <_strtol_r>:
 800861c:	f7ff bf7c 	b.w	8008518 <_strtol_l.constprop.0>

08008620 <strtol>:
 8008620:	4613      	mov	r3, r2
 8008622:	460a      	mov	r2, r1
 8008624:	4601      	mov	r1, r0
 8008626:	4802      	ldr	r0, [pc, #8]	; (8008630 <strtol+0x10>)
 8008628:	6800      	ldr	r0, [r0, #0]
 800862a:	f7ff bf75 	b.w	8008518 <_strtol_l.constprop.0>
 800862e:	bf00      	nop
 8008630:	200001e0 	.word	0x200001e0

08008634 <__cvt>:
 8008634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008638:	ec55 4b10 	vmov	r4, r5, d0
 800863c:	2d00      	cmp	r5, #0
 800863e:	460e      	mov	r6, r1
 8008640:	4619      	mov	r1, r3
 8008642:	462b      	mov	r3, r5
 8008644:	bfbb      	ittet	lt
 8008646:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800864a:	461d      	movlt	r5, r3
 800864c:	2300      	movge	r3, #0
 800864e:	232d      	movlt	r3, #45	; 0x2d
 8008650:	700b      	strb	r3, [r1, #0]
 8008652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008654:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008658:	4691      	mov	r9, r2
 800865a:	f023 0820 	bic.w	r8, r3, #32
 800865e:	bfbc      	itt	lt
 8008660:	4622      	movlt	r2, r4
 8008662:	4614      	movlt	r4, r2
 8008664:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008668:	d005      	beq.n	8008676 <__cvt+0x42>
 800866a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800866e:	d100      	bne.n	8008672 <__cvt+0x3e>
 8008670:	3601      	adds	r6, #1
 8008672:	2102      	movs	r1, #2
 8008674:	e000      	b.n	8008678 <__cvt+0x44>
 8008676:	2103      	movs	r1, #3
 8008678:	ab03      	add	r3, sp, #12
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	ab02      	add	r3, sp, #8
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	ec45 4b10 	vmov	d0, r4, r5
 8008684:	4653      	mov	r3, sl
 8008686:	4632      	mov	r2, r6
 8008688:	f001 f982 	bl	8009990 <_dtoa_r>
 800868c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008690:	4607      	mov	r7, r0
 8008692:	d102      	bne.n	800869a <__cvt+0x66>
 8008694:	f019 0f01 	tst.w	r9, #1
 8008698:	d022      	beq.n	80086e0 <__cvt+0xac>
 800869a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800869e:	eb07 0906 	add.w	r9, r7, r6
 80086a2:	d110      	bne.n	80086c6 <__cvt+0x92>
 80086a4:	783b      	ldrb	r3, [r7, #0]
 80086a6:	2b30      	cmp	r3, #48	; 0x30
 80086a8:	d10a      	bne.n	80086c0 <__cvt+0x8c>
 80086aa:	2200      	movs	r2, #0
 80086ac:	2300      	movs	r3, #0
 80086ae:	4620      	mov	r0, r4
 80086b0:	4629      	mov	r1, r5
 80086b2:	f7f8 fa09 	bl	8000ac8 <__aeabi_dcmpeq>
 80086b6:	b918      	cbnz	r0, 80086c0 <__cvt+0x8c>
 80086b8:	f1c6 0601 	rsb	r6, r6, #1
 80086bc:	f8ca 6000 	str.w	r6, [sl]
 80086c0:	f8da 3000 	ldr.w	r3, [sl]
 80086c4:	4499      	add	r9, r3
 80086c6:	2200      	movs	r2, #0
 80086c8:	2300      	movs	r3, #0
 80086ca:	4620      	mov	r0, r4
 80086cc:	4629      	mov	r1, r5
 80086ce:	f7f8 f9fb 	bl	8000ac8 <__aeabi_dcmpeq>
 80086d2:	b108      	cbz	r0, 80086d8 <__cvt+0xa4>
 80086d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80086d8:	2230      	movs	r2, #48	; 0x30
 80086da:	9b03      	ldr	r3, [sp, #12]
 80086dc:	454b      	cmp	r3, r9
 80086de:	d307      	bcc.n	80086f0 <__cvt+0xbc>
 80086e0:	9b03      	ldr	r3, [sp, #12]
 80086e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086e4:	1bdb      	subs	r3, r3, r7
 80086e6:	4638      	mov	r0, r7
 80086e8:	6013      	str	r3, [r2, #0]
 80086ea:	b004      	add	sp, #16
 80086ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f0:	1c59      	adds	r1, r3, #1
 80086f2:	9103      	str	r1, [sp, #12]
 80086f4:	701a      	strb	r2, [r3, #0]
 80086f6:	e7f0      	b.n	80086da <__cvt+0xa6>

080086f8 <__exponent>:
 80086f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086fa:	4603      	mov	r3, r0
 80086fc:	2900      	cmp	r1, #0
 80086fe:	bfb8      	it	lt
 8008700:	4249      	neglt	r1, r1
 8008702:	f803 2b02 	strb.w	r2, [r3], #2
 8008706:	bfb4      	ite	lt
 8008708:	222d      	movlt	r2, #45	; 0x2d
 800870a:	222b      	movge	r2, #43	; 0x2b
 800870c:	2909      	cmp	r1, #9
 800870e:	7042      	strb	r2, [r0, #1]
 8008710:	dd2a      	ble.n	8008768 <__exponent+0x70>
 8008712:	f10d 0207 	add.w	r2, sp, #7
 8008716:	4617      	mov	r7, r2
 8008718:	260a      	movs	r6, #10
 800871a:	4694      	mov	ip, r2
 800871c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008720:	fb06 1415 	mls	r4, r6, r5, r1
 8008724:	3430      	adds	r4, #48	; 0x30
 8008726:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800872a:	460c      	mov	r4, r1
 800872c:	2c63      	cmp	r4, #99	; 0x63
 800872e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008732:	4629      	mov	r1, r5
 8008734:	dcf1      	bgt.n	800871a <__exponent+0x22>
 8008736:	3130      	adds	r1, #48	; 0x30
 8008738:	f1ac 0402 	sub.w	r4, ip, #2
 800873c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008740:	1c41      	adds	r1, r0, #1
 8008742:	4622      	mov	r2, r4
 8008744:	42ba      	cmp	r2, r7
 8008746:	d30a      	bcc.n	800875e <__exponent+0x66>
 8008748:	f10d 0209 	add.w	r2, sp, #9
 800874c:	eba2 020c 	sub.w	r2, r2, ip
 8008750:	42bc      	cmp	r4, r7
 8008752:	bf88      	it	hi
 8008754:	2200      	movhi	r2, #0
 8008756:	4413      	add	r3, r2
 8008758:	1a18      	subs	r0, r3, r0
 800875a:	b003      	add	sp, #12
 800875c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800875e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008762:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008766:	e7ed      	b.n	8008744 <__exponent+0x4c>
 8008768:	2330      	movs	r3, #48	; 0x30
 800876a:	3130      	adds	r1, #48	; 0x30
 800876c:	7083      	strb	r3, [r0, #2]
 800876e:	70c1      	strb	r1, [r0, #3]
 8008770:	1d03      	adds	r3, r0, #4
 8008772:	e7f1      	b.n	8008758 <__exponent+0x60>

08008774 <_printf_float>:
 8008774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008778:	ed2d 8b02 	vpush	{d8}
 800877c:	b08d      	sub	sp, #52	; 0x34
 800877e:	460c      	mov	r4, r1
 8008780:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008784:	4616      	mov	r6, r2
 8008786:	461f      	mov	r7, r3
 8008788:	4605      	mov	r5, r0
 800878a:	f000 ffaf 	bl	80096ec <_localeconv_r>
 800878e:	f8d0 a000 	ldr.w	sl, [r0]
 8008792:	4650      	mov	r0, sl
 8008794:	f7f7 fd6c 	bl	8000270 <strlen>
 8008798:	2300      	movs	r3, #0
 800879a:	930a      	str	r3, [sp, #40]	; 0x28
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	9305      	str	r3, [sp, #20]
 80087a0:	f8d8 3000 	ldr.w	r3, [r8]
 80087a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087a8:	3307      	adds	r3, #7
 80087aa:	f023 0307 	bic.w	r3, r3, #7
 80087ae:	f103 0208 	add.w	r2, r3, #8
 80087b2:	f8c8 2000 	str.w	r2, [r8]
 80087b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087be:	9307      	str	r3, [sp, #28]
 80087c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80087c4:	ee08 0a10 	vmov	s16, r0
 80087c8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80087cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087d0:	4b9e      	ldr	r3, [pc, #632]	; (8008a4c <_printf_float+0x2d8>)
 80087d2:	f04f 32ff 	mov.w	r2, #4294967295
 80087d6:	f7f8 f9a9 	bl	8000b2c <__aeabi_dcmpun>
 80087da:	bb88      	cbnz	r0, 8008840 <_printf_float+0xcc>
 80087dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087e0:	4b9a      	ldr	r3, [pc, #616]	; (8008a4c <_printf_float+0x2d8>)
 80087e2:	f04f 32ff 	mov.w	r2, #4294967295
 80087e6:	f7f8 f983 	bl	8000af0 <__aeabi_dcmple>
 80087ea:	bb48      	cbnz	r0, 8008840 <_printf_float+0xcc>
 80087ec:	2200      	movs	r2, #0
 80087ee:	2300      	movs	r3, #0
 80087f0:	4640      	mov	r0, r8
 80087f2:	4649      	mov	r1, r9
 80087f4:	f7f8 f972 	bl	8000adc <__aeabi_dcmplt>
 80087f8:	b110      	cbz	r0, 8008800 <_printf_float+0x8c>
 80087fa:	232d      	movs	r3, #45	; 0x2d
 80087fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008800:	4a93      	ldr	r2, [pc, #588]	; (8008a50 <_printf_float+0x2dc>)
 8008802:	4b94      	ldr	r3, [pc, #592]	; (8008a54 <_printf_float+0x2e0>)
 8008804:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008808:	bf94      	ite	ls
 800880a:	4690      	movls	r8, r2
 800880c:	4698      	movhi	r8, r3
 800880e:	2303      	movs	r3, #3
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	9b05      	ldr	r3, [sp, #20]
 8008814:	f023 0304 	bic.w	r3, r3, #4
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	f04f 0900 	mov.w	r9, #0
 800881e:	9700      	str	r7, [sp, #0]
 8008820:	4633      	mov	r3, r6
 8008822:	aa0b      	add	r2, sp, #44	; 0x2c
 8008824:	4621      	mov	r1, r4
 8008826:	4628      	mov	r0, r5
 8008828:	f000 f9da 	bl	8008be0 <_printf_common>
 800882c:	3001      	adds	r0, #1
 800882e:	f040 8090 	bne.w	8008952 <_printf_float+0x1de>
 8008832:	f04f 30ff 	mov.w	r0, #4294967295
 8008836:	b00d      	add	sp, #52	; 0x34
 8008838:	ecbd 8b02 	vpop	{d8}
 800883c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008840:	4642      	mov	r2, r8
 8008842:	464b      	mov	r3, r9
 8008844:	4640      	mov	r0, r8
 8008846:	4649      	mov	r1, r9
 8008848:	f7f8 f970 	bl	8000b2c <__aeabi_dcmpun>
 800884c:	b140      	cbz	r0, 8008860 <_printf_float+0xec>
 800884e:	464b      	mov	r3, r9
 8008850:	2b00      	cmp	r3, #0
 8008852:	bfbc      	itt	lt
 8008854:	232d      	movlt	r3, #45	; 0x2d
 8008856:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800885a:	4a7f      	ldr	r2, [pc, #508]	; (8008a58 <_printf_float+0x2e4>)
 800885c:	4b7f      	ldr	r3, [pc, #508]	; (8008a5c <_printf_float+0x2e8>)
 800885e:	e7d1      	b.n	8008804 <_printf_float+0x90>
 8008860:	6863      	ldr	r3, [r4, #4]
 8008862:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008866:	9206      	str	r2, [sp, #24]
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	d13f      	bne.n	80088ec <_printf_float+0x178>
 800886c:	2306      	movs	r3, #6
 800886e:	6063      	str	r3, [r4, #4]
 8008870:	9b05      	ldr	r3, [sp, #20]
 8008872:	6861      	ldr	r1, [r4, #4]
 8008874:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008878:	2300      	movs	r3, #0
 800887a:	9303      	str	r3, [sp, #12]
 800887c:	ab0a      	add	r3, sp, #40	; 0x28
 800887e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008882:	ab09      	add	r3, sp, #36	; 0x24
 8008884:	ec49 8b10 	vmov	d0, r8, r9
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	6022      	str	r2, [r4, #0]
 800888c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008890:	4628      	mov	r0, r5
 8008892:	f7ff fecf 	bl	8008634 <__cvt>
 8008896:	9b06      	ldr	r3, [sp, #24]
 8008898:	9909      	ldr	r1, [sp, #36]	; 0x24
 800889a:	2b47      	cmp	r3, #71	; 0x47
 800889c:	4680      	mov	r8, r0
 800889e:	d108      	bne.n	80088b2 <_printf_float+0x13e>
 80088a0:	1cc8      	adds	r0, r1, #3
 80088a2:	db02      	blt.n	80088aa <_printf_float+0x136>
 80088a4:	6863      	ldr	r3, [r4, #4]
 80088a6:	4299      	cmp	r1, r3
 80088a8:	dd41      	ble.n	800892e <_printf_float+0x1ba>
 80088aa:	f1ab 0302 	sub.w	r3, fp, #2
 80088ae:	fa5f fb83 	uxtb.w	fp, r3
 80088b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088b6:	d820      	bhi.n	80088fa <_printf_float+0x186>
 80088b8:	3901      	subs	r1, #1
 80088ba:	465a      	mov	r2, fp
 80088bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088c0:	9109      	str	r1, [sp, #36]	; 0x24
 80088c2:	f7ff ff19 	bl	80086f8 <__exponent>
 80088c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088c8:	1813      	adds	r3, r2, r0
 80088ca:	2a01      	cmp	r2, #1
 80088cc:	4681      	mov	r9, r0
 80088ce:	6123      	str	r3, [r4, #16]
 80088d0:	dc02      	bgt.n	80088d8 <_printf_float+0x164>
 80088d2:	6822      	ldr	r2, [r4, #0]
 80088d4:	07d2      	lsls	r2, r2, #31
 80088d6:	d501      	bpl.n	80088dc <_printf_float+0x168>
 80088d8:	3301      	adds	r3, #1
 80088da:	6123      	str	r3, [r4, #16]
 80088dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d09c      	beq.n	800881e <_printf_float+0xaa>
 80088e4:	232d      	movs	r3, #45	; 0x2d
 80088e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088ea:	e798      	b.n	800881e <_printf_float+0xaa>
 80088ec:	9a06      	ldr	r2, [sp, #24]
 80088ee:	2a47      	cmp	r2, #71	; 0x47
 80088f0:	d1be      	bne.n	8008870 <_printf_float+0xfc>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1bc      	bne.n	8008870 <_printf_float+0xfc>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e7b9      	b.n	800886e <_printf_float+0xfa>
 80088fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80088fe:	d118      	bne.n	8008932 <_printf_float+0x1be>
 8008900:	2900      	cmp	r1, #0
 8008902:	6863      	ldr	r3, [r4, #4]
 8008904:	dd0b      	ble.n	800891e <_printf_float+0x1aa>
 8008906:	6121      	str	r1, [r4, #16]
 8008908:	b913      	cbnz	r3, 8008910 <_printf_float+0x19c>
 800890a:	6822      	ldr	r2, [r4, #0]
 800890c:	07d0      	lsls	r0, r2, #31
 800890e:	d502      	bpl.n	8008916 <_printf_float+0x1a2>
 8008910:	3301      	adds	r3, #1
 8008912:	440b      	add	r3, r1
 8008914:	6123      	str	r3, [r4, #16]
 8008916:	65a1      	str	r1, [r4, #88]	; 0x58
 8008918:	f04f 0900 	mov.w	r9, #0
 800891c:	e7de      	b.n	80088dc <_printf_float+0x168>
 800891e:	b913      	cbnz	r3, 8008926 <_printf_float+0x1b2>
 8008920:	6822      	ldr	r2, [r4, #0]
 8008922:	07d2      	lsls	r2, r2, #31
 8008924:	d501      	bpl.n	800892a <_printf_float+0x1b6>
 8008926:	3302      	adds	r3, #2
 8008928:	e7f4      	b.n	8008914 <_printf_float+0x1a0>
 800892a:	2301      	movs	r3, #1
 800892c:	e7f2      	b.n	8008914 <_printf_float+0x1a0>
 800892e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008934:	4299      	cmp	r1, r3
 8008936:	db05      	blt.n	8008944 <_printf_float+0x1d0>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	6121      	str	r1, [r4, #16]
 800893c:	07d8      	lsls	r0, r3, #31
 800893e:	d5ea      	bpl.n	8008916 <_printf_float+0x1a2>
 8008940:	1c4b      	adds	r3, r1, #1
 8008942:	e7e7      	b.n	8008914 <_printf_float+0x1a0>
 8008944:	2900      	cmp	r1, #0
 8008946:	bfd4      	ite	le
 8008948:	f1c1 0202 	rsble	r2, r1, #2
 800894c:	2201      	movgt	r2, #1
 800894e:	4413      	add	r3, r2
 8008950:	e7e0      	b.n	8008914 <_printf_float+0x1a0>
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	055a      	lsls	r2, r3, #21
 8008956:	d407      	bmi.n	8008968 <_printf_float+0x1f4>
 8008958:	6923      	ldr	r3, [r4, #16]
 800895a:	4642      	mov	r2, r8
 800895c:	4631      	mov	r1, r6
 800895e:	4628      	mov	r0, r5
 8008960:	47b8      	blx	r7
 8008962:	3001      	adds	r0, #1
 8008964:	d12c      	bne.n	80089c0 <_printf_float+0x24c>
 8008966:	e764      	b.n	8008832 <_printf_float+0xbe>
 8008968:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800896c:	f240 80e0 	bls.w	8008b30 <_printf_float+0x3bc>
 8008970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008974:	2200      	movs	r2, #0
 8008976:	2300      	movs	r3, #0
 8008978:	f7f8 f8a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800897c:	2800      	cmp	r0, #0
 800897e:	d034      	beq.n	80089ea <_printf_float+0x276>
 8008980:	4a37      	ldr	r2, [pc, #220]	; (8008a60 <_printf_float+0x2ec>)
 8008982:	2301      	movs	r3, #1
 8008984:	4631      	mov	r1, r6
 8008986:	4628      	mov	r0, r5
 8008988:	47b8      	blx	r7
 800898a:	3001      	adds	r0, #1
 800898c:	f43f af51 	beq.w	8008832 <_printf_float+0xbe>
 8008990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008994:	429a      	cmp	r2, r3
 8008996:	db02      	blt.n	800899e <_printf_float+0x22a>
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	07d8      	lsls	r0, r3, #31
 800899c:	d510      	bpl.n	80089c0 <_printf_float+0x24c>
 800899e:	ee18 3a10 	vmov	r3, s16
 80089a2:	4652      	mov	r2, sl
 80089a4:	4631      	mov	r1, r6
 80089a6:	4628      	mov	r0, r5
 80089a8:	47b8      	blx	r7
 80089aa:	3001      	adds	r0, #1
 80089ac:	f43f af41 	beq.w	8008832 <_printf_float+0xbe>
 80089b0:	f04f 0800 	mov.w	r8, #0
 80089b4:	f104 091a 	add.w	r9, r4, #26
 80089b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ba:	3b01      	subs	r3, #1
 80089bc:	4543      	cmp	r3, r8
 80089be:	dc09      	bgt.n	80089d4 <_printf_float+0x260>
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	079b      	lsls	r3, r3, #30
 80089c4:	f100 8107 	bmi.w	8008bd6 <_printf_float+0x462>
 80089c8:	68e0      	ldr	r0, [r4, #12]
 80089ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089cc:	4298      	cmp	r0, r3
 80089ce:	bfb8      	it	lt
 80089d0:	4618      	movlt	r0, r3
 80089d2:	e730      	b.n	8008836 <_printf_float+0xc2>
 80089d4:	2301      	movs	r3, #1
 80089d6:	464a      	mov	r2, r9
 80089d8:	4631      	mov	r1, r6
 80089da:	4628      	mov	r0, r5
 80089dc:	47b8      	blx	r7
 80089de:	3001      	adds	r0, #1
 80089e0:	f43f af27 	beq.w	8008832 <_printf_float+0xbe>
 80089e4:	f108 0801 	add.w	r8, r8, #1
 80089e8:	e7e6      	b.n	80089b8 <_printf_float+0x244>
 80089ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	dc39      	bgt.n	8008a64 <_printf_float+0x2f0>
 80089f0:	4a1b      	ldr	r2, [pc, #108]	; (8008a60 <_printf_float+0x2ec>)
 80089f2:	2301      	movs	r3, #1
 80089f4:	4631      	mov	r1, r6
 80089f6:	4628      	mov	r0, r5
 80089f8:	47b8      	blx	r7
 80089fa:	3001      	adds	r0, #1
 80089fc:	f43f af19 	beq.w	8008832 <_printf_float+0xbe>
 8008a00:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008a04:	4313      	orrs	r3, r2
 8008a06:	d102      	bne.n	8008a0e <_printf_float+0x29a>
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	07d9      	lsls	r1, r3, #31
 8008a0c:	d5d8      	bpl.n	80089c0 <_printf_float+0x24c>
 8008a0e:	ee18 3a10 	vmov	r3, s16
 8008a12:	4652      	mov	r2, sl
 8008a14:	4631      	mov	r1, r6
 8008a16:	4628      	mov	r0, r5
 8008a18:	47b8      	blx	r7
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	f43f af09 	beq.w	8008832 <_printf_float+0xbe>
 8008a20:	f04f 0900 	mov.w	r9, #0
 8008a24:	f104 0a1a 	add.w	sl, r4, #26
 8008a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a2a:	425b      	negs	r3, r3
 8008a2c:	454b      	cmp	r3, r9
 8008a2e:	dc01      	bgt.n	8008a34 <_printf_float+0x2c0>
 8008a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a32:	e792      	b.n	800895a <_printf_float+0x1e6>
 8008a34:	2301      	movs	r3, #1
 8008a36:	4652      	mov	r2, sl
 8008a38:	4631      	mov	r1, r6
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	47b8      	blx	r7
 8008a3e:	3001      	adds	r0, #1
 8008a40:	f43f aef7 	beq.w	8008832 <_printf_float+0xbe>
 8008a44:	f109 0901 	add.w	r9, r9, #1
 8008a48:	e7ee      	b.n	8008a28 <_printf_float+0x2b4>
 8008a4a:	bf00      	nop
 8008a4c:	7fefffff 	.word	0x7fefffff
 8008a50:	0800d9e9 	.word	0x0800d9e9
 8008a54:	0800d9ed 	.word	0x0800d9ed
 8008a58:	0800d9f1 	.word	0x0800d9f1
 8008a5c:	0800d9f5 	.word	0x0800d9f5
 8008a60:	0800d9f9 	.word	0x0800d9f9
 8008a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	bfa8      	it	ge
 8008a6c:	461a      	movge	r2, r3
 8008a6e:	2a00      	cmp	r2, #0
 8008a70:	4691      	mov	r9, r2
 8008a72:	dc37      	bgt.n	8008ae4 <_printf_float+0x370>
 8008a74:	f04f 0b00 	mov.w	fp, #0
 8008a78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a7c:	f104 021a 	add.w	r2, r4, #26
 8008a80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a82:	9305      	str	r3, [sp, #20]
 8008a84:	eba3 0309 	sub.w	r3, r3, r9
 8008a88:	455b      	cmp	r3, fp
 8008a8a:	dc33      	bgt.n	8008af4 <_printf_float+0x380>
 8008a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a90:	429a      	cmp	r2, r3
 8008a92:	db3b      	blt.n	8008b0c <_printf_float+0x398>
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	07da      	lsls	r2, r3, #31
 8008a98:	d438      	bmi.n	8008b0c <_printf_float+0x398>
 8008a9a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008a9e:	eba2 0903 	sub.w	r9, r2, r3
 8008aa2:	9b05      	ldr	r3, [sp, #20]
 8008aa4:	1ad2      	subs	r2, r2, r3
 8008aa6:	4591      	cmp	r9, r2
 8008aa8:	bfa8      	it	ge
 8008aaa:	4691      	movge	r9, r2
 8008aac:	f1b9 0f00 	cmp.w	r9, #0
 8008ab0:	dc35      	bgt.n	8008b1e <_printf_float+0x3aa>
 8008ab2:	f04f 0800 	mov.w	r8, #0
 8008ab6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008aba:	f104 0a1a 	add.w	sl, r4, #26
 8008abe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ac2:	1a9b      	subs	r3, r3, r2
 8008ac4:	eba3 0309 	sub.w	r3, r3, r9
 8008ac8:	4543      	cmp	r3, r8
 8008aca:	f77f af79 	ble.w	80089c0 <_printf_float+0x24c>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	4652      	mov	r2, sl
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b8      	blx	r7
 8008ad8:	3001      	adds	r0, #1
 8008ada:	f43f aeaa 	beq.w	8008832 <_printf_float+0xbe>
 8008ade:	f108 0801 	add.w	r8, r8, #1
 8008ae2:	e7ec      	b.n	8008abe <_printf_float+0x34a>
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	4631      	mov	r1, r6
 8008ae8:	4642      	mov	r2, r8
 8008aea:	4628      	mov	r0, r5
 8008aec:	47b8      	blx	r7
 8008aee:	3001      	adds	r0, #1
 8008af0:	d1c0      	bne.n	8008a74 <_printf_float+0x300>
 8008af2:	e69e      	b.n	8008832 <_printf_float+0xbe>
 8008af4:	2301      	movs	r3, #1
 8008af6:	4631      	mov	r1, r6
 8008af8:	4628      	mov	r0, r5
 8008afa:	9205      	str	r2, [sp, #20]
 8008afc:	47b8      	blx	r7
 8008afe:	3001      	adds	r0, #1
 8008b00:	f43f ae97 	beq.w	8008832 <_printf_float+0xbe>
 8008b04:	9a05      	ldr	r2, [sp, #20]
 8008b06:	f10b 0b01 	add.w	fp, fp, #1
 8008b0a:	e7b9      	b.n	8008a80 <_printf_float+0x30c>
 8008b0c:	ee18 3a10 	vmov	r3, s16
 8008b10:	4652      	mov	r2, sl
 8008b12:	4631      	mov	r1, r6
 8008b14:	4628      	mov	r0, r5
 8008b16:	47b8      	blx	r7
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d1be      	bne.n	8008a9a <_printf_float+0x326>
 8008b1c:	e689      	b.n	8008832 <_printf_float+0xbe>
 8008b1e:	9a05      	ldr	r2, [sp, #20]
 8008b20:	464b      	mov	r3, r9
 8008b22:	4442      	add	r2, r8
 8008b24:	4631      	mov	r1, r6
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b8      	blx	r7
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d1c1      	bne.n	8008ab2 <_printf_float+0x33e>
 8008b2e:	e680      	b.n	8008832 <_printf_float+0xbe>
 8008b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b32:	2a01      	cmp	r2, #1
 8008b34:	dc01      	bgt.n	8008b3a <_printf_float+0x3c6>
 8008b36:	07db      	lsls	r3, r3, #31
 8008b38:	d53a      	bpl.n	8008bb0 <_printf_float+0x43c>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	4642      	mov	r2, r8
 8008b3e:	4631      	mov	r1, r6
 8008b40:	4628      	mov	r0, r5
 8008b42:	47b8      	blx	r7
 8008b44:	3001      	adds	r0, #1
 8008b46:	f43f ae74 	beq.w	8008832 <_printf_float+0xbe>
 8008b4a:	ee18 3a10 	vmov	r3, s16
 8008b4e:	4652      	mov	r2, sl
 8008b50:	4631      	mov	r1, r6
 8008b52:	4628      	mov	r0, r5
 8008b54:	47b8      	blx	r7
 8008b56:	3001      	adds	r0, #1
 8008b58:	f43f ae6b 	beq.w	8008832 <_printf_float+0xbe>
 8008b5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b60:	2200      	movs	r2, #0
 8008b62:	2300      	movs	r3, #0
 8008b64:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008b68:	f7f7 ffae 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b6c:	b9d8      	cbnz	r0, 8008ba6 <_printf_float+0x432>
 8008b6e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008b72:	f108 0201 	add.w	r2, r8, #1
 8008b76:	4631      	mov	r1, r6
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b8      	blx	r7
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	d10e      	bne.n	8008b9e <_printf_float+0x42a>
 8008b80:	e657      	b.n	8008832 <_printf_float+0xbe>
 8008b82:	2301      	movs	r3, #1
 8008b84:	4652      	mov	r2, sl
 8008b86:	4631      	mov	r1, r6
 8008b88:	4628      	mov	r0, r5
 8008b8a:	47b8      	blx	r7
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	f43f ae50 	beq.w	8008832 <_printf_float+0xbe>
 8008b92:	f108 0801 	add.w	r8, r8, #1
 8008b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	4543      	cmp	r3, r8
 8008b9c:	dcf1      	bgt.n	8008b82 <_printf_float+0x40e>
 8008b9e:	464b      	mov	r3, r9
 8008ba0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ba4:	e6da      	b.n	800895c <_printf_float+0x1e8>
 8008ba6:	f04f 0800 	mov.w	r8, #0
 8008baa:	f104 0a1a 	add.w	sl, r4, #26
 8008bae:	e7f2      	b.n	8008b96 <_printf_float+0x422>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	4642      	mov	r2, r8
 8008bb4:	e7df      	b.n	8008b76 <_printf_float+0x402>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	464a      	mov	r2, r9
 8008bba:	4631      	mov	r1, r6
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	47b8      	blx	r7
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	f43f ae36 	beq.w	8008832 <_printf_float+0xbe>
 8008bc6:	f108 0801 	add.w	r8, r8, #1
 8008bca:	68e3      	ldr	r3, [r4, #12]
 8008bcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bce:	1a5b      	subs	r3, r3, r1
 8008bd0:	4543      	cmp	r3, r8
 8008bd2:	dcf0      	bgt.n	8008bb6 <_printf_float+0x442>
 8008bd4:	e6f8      	b.n	80089c8 <_printf_float+0x254>
 8008bd6:	f04f 0800 	mov.w	r8, #0
 8008bda:	f104 0919 	add.w	r9, r4, #25
 8008bde:	e7f4      	b.n	8008bca <_printf_float+0x456>

08008be0 <_printf_common>:
 8008be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be4:	4616      	mov	r6, r2
 8008be6:	4699      	mov	r9, r3
 8008be8:	688a      	ldr	r2, [r1, #8]
 8008bea:	690b      	ldr	r3, [r1, #16]
 8008bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	bfb8      	it	lt
 8008bf4:	4613      	movlt	r3, r2
 8008bf6:	6033      	str	r3, [r6, #0]
 8008bf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bfc:	4607      	mov	r7, r0
 8008bfe:	460c      	mov	r4, r1
 8008c00:	b10a      	cbz	r2, 8008c06 <_printf_common+0x26>
 8008c02:	3301      	adds	r3, #1
 8008c04:	6033      	str	r3, [r6, #0]
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	0699      	lsls	r1, r3, #26
 8008c0a:	bf42      	ittt	mi
 8008c0c:	6833      	ldrmi	r3, [r6, #0]
 8008c0e:	3302      	addmi	r3, #2
 8008c10:	6033      	strmi	r3, [r6, #0]
 8008c12:	6825      	ldr	r5, [r4, #0]
 8008c14:	f015 0506 	ands.w	r5, r5, #6
 8008c18:	d106      	bne.n	8008c28 <_printf_common+0x48>
 8008c1a:	f104 0a19 	add.w	sl, r4, #25
 8008c1e:	68e3      	ldr	r3, [r4, #12]
 8008c20:	6832      	ldr	r2, [r6, #0]
 8008c22:	1a9b      	subs	r3, r3, r2
 8008c24:	42ab      	cmp	r3, r5
 8008c26:	dc26      	bgt.n	8008c76 <_printf_common+0x96>
 8008c28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c2c:	1e13      	subs	r3, r2, #0
 8008c2e:	6822      	ldr	r2, [r4, #0]
 8008c30:	bf18      	it	ne
 8008c32:	2301      	movne	r3, #1
 8008c34:	0692      	lsls	r2, r2, #26
 8008c36:	d42b      	bmi.n	8008c90 <_printf_common+0xb0>
 8008c38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	4638      	mov	r0, r7
 8008c40:	47c0      	blx	r8
 8008c42:	3001      	adds	r0, #1
 8008c44:	d01e      	beq.n	8008c84 <_printf_common+0xa4>
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	6922      	ldr	r2, [r4, #16]
 8008c4a:	f003 0306 	and.w	r3, r3, #6
 8008c4e:	2b04      	cmp	r3, #4
 8008c50:	bf02      	ittt	eq
 8008c52:	68e5      	ldreq	r5, [r4, #12]
 8008c54:	6833      	ldreq	r3, [r6, #0]
 8008c56:	1aed      	subeq	r5, r5, r3
 8008c58:	68a3      	ldr	r3, [r4, #8]
 8008c5a:	bf0c      	ite	eq
 8008c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c60:	2500      	movne	r5, #0
 8008c62:	4293      	cmp	r3, r2
 8008c64:	bfc4      	itt	gt
 8008c66:	1a9b      	subgt	r3, r3, r2
 8008c68:	18ed      	addgt	r5, r5, r3
 8008c6a:	2600      	movs	r6, #0
 8008c6c:	341a      	adds	r4, #26
 8008c6e:	42b5      	cmp	r5, r6
 8008c70:	d11a      	bne.n	8008ca8 <_printf_common+0xc8>
 8008c72:	2000      	movs	r0, #0
 8008c74:	e008      	b.n	8008c88 <_printf_common+0xa8>
 8008c76:	2301      	movs	r3, #1
 8008c78:	4652      	mov	r2, sl
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	47c0      	blx	r8
 8008c80:	3001      	adds	r0, #1
 8008c82:	d103      	bne.n	8008c8c <_printf_common+0xac>
 8008c84:	f04f 30ff 	mov.w	r0, #4294967295
 8008c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8c:	3501      	adds	r5, #1
 8008c8e:	e7c6      	b.n	8008c1e <_printf_common+0x3e>
 8008c90:	18e1      	adds	r1, r4, r3
 8008c92:	1c5a      	adds	r2, r3, #1
 8008c94:	2030      	movs	r0, #48	; 0x30
 8008c96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c9a:	4422      	add	r2, r4
 8008c9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ca0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ca4:	3302      	adds	r3, #2
 8008ca6:	e7c7      	b.n	8008c38 <_printf_common+0x58>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	4622      	mov	r2, r4
 8008cac:	4649      	mov	r1, r9
 8008cae:	4638      	mov	r0, r7
 8008cb0:	47c0      	blx	r8
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	d0e6      	beq.n	8008c84 <_printf_common+0xa4>
 8008cb6:	3601      	adds	r6, #1
 8008cb8:	e7d9      	b.n	8008c6e <_printf_common+0x8e>
	...

08008cbc <_printf_i>:
 8008cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc0:	7e0f      	ldrb	r7, [r1, #24]
 8008cc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cc4:	2f78      	cmp	r7, #120	; 0x78
 8008cc6:	4691      	mov	r9, r2
 8008cc8:	4680      	mov	r8, r0
 8008cca:	460c      	mov	r4, r1
 8008ccc:	469a      	mov	sl, r3
 8008cce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cd2:	d807      	bhi.n	8008ce4 <_printf_i+0x28>
 8008cd4:	2f62      	cmp	r7, #98	; 0x62
 8008cd6:	d80a      	bhi.n	8008cee <_printf_i+0x32>
 8008cd8:	2f00      	cmp	r7, #0
 8008cda:	f000 80d4 	beq.w	8008e86 <_printf_i+0x1ca>
 8008cde:	2f58      	cmp	r7, #88	; 0x58
 8008ce0:	f000 80c0 	beq.w	8008e64 <_printf_i+0x1a8>
 8008ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cec:	e03a      	b.n	8008d64 <_printf_i+0xa8>
 8008cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cf2:	2b15      	cmp	r3, #21
 8008cf4:	d8f6      	bhi.n	8008ce4 <_printf_i+0x28>
 8008cf6:	a101      	add	r1, pc, #4	; (adr r1, 8008cfc <_printf_i+0x40>)
 8008cf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cfc:	08008d55 	.word	0x08008d55
 8008d00:	08008d69 	.word	0x08008d69
 8008d04:	08008ce5 	.word	0x08008ce5
 8008d08:	08008ce5 	.word	0x08008ce5
 8008d0c:	08008ce5 	.word	0x08008ce5
 8008d10:	08008ce5 	.word	0x08008ce5
 8008d14:	08008d69 	.word	0x08008d69
 8008d18:	08008ce5 	.word	0x08008ce5
 8008d1c:	08008ce5 	.word	0x08008ce5
 8008d20:	08008ce5 	.word	0x08008ce5
 8008d24:	08008ce5 	.word	0x08008ce5
 8008d28:	08008e6d 	.word	0x08008e6d
 8008d2c:	08008d95 	.word	0x08008d95
 8008d30:	08008e27 	.word	0x08008e27
 8008d34:	08008ce5 	.word	0x08008ce5
 8008d38:	08008ce5 	.word	0x08008ce5
 8008d3c:	08008e8f 	.word	0x08008e8f
 8008d40:	08008ce5 	.word	0x08008ce5
 8008d44:	08008d95 	.word	0x08008d95
 8008d48:	08008ce5 	.word	0x08008ce5
 8008d4c:	08008ce5 	.word	0x08008ce5
 8008d50:	08008e2f 	.word	0x08008e2f
 8008d54:	682b      	ldr	r3, [r5, #0]
 8008d56:	1d1a      	adds	r2, r3, #4
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	602a      	str	r2, [r5, #0]
 8008d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d64:	2301      	movs	r3, #1
 8008d66:	e09f      	b.n	8008ea8 <_printf_i+0x1ec>
 8008d68:	6820      	ldr	r0, [r4, #0]
 8008d6a:	682b      	ldr	r3, [r5, #0]
 8008d6c:	0607      	lsls	r7, r0, #24
 8008d6e:	f103 0104 	add.w	r1, r3, #4
 8008d72:	6029      	str	r1, [r5, #0]
 8008d74:	d501      	bpl.n	8008d7a <_printf_i+0xbe>
 8008d76:	681e      	ldr	r6, [r3, #0]
 8008d78:	e003      	b.n	8008d82 <_printf_i+0xc6>
 8008d7a:	0646      	lsls	r6, r0, #25
 8008d7c:	d5fb      	bpl.n	8008d76 <_printf_i+0xba>
 8008d7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d82:	2e00      	cmp	r6, #0
 8008d84:	da03      	bge.n	8008d8e <_printf_i+0xd2>
 8008d86:	232d      	movs	r3, #45	; 0x2d
 8008d88:	4276      	negs	r6, r6
 8008d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d8e:	485a      	ldr	r0, [pc, #360]	; (8008ef8 <_printf_i+0x23c>)
 8008d90:	230a      	movs	r3, #10
 8008d92:	e012      	b.n	8008dba <_printf_i+0xfe>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	6820      	ldr	r0, [r4, #0]
 8008d98:	1d19      	adds	r1, r3, #4
 8008d9a:	6029      	str	r1, [r5, #0]
 8008d9c:	0605      	lsls	r5, r0, #24
 8008d9e:	d501      	bpl.n	8008da4 <_printf_i+0xe8>
 8008da0:	681e      	ldr	r6, [r3, #0]
 8008da2:	e002      	b.n	8008daa <_printf_i+0xee>
 8008da4:	0641      	lsls	r1, r0, #25
 8008da6:	d5fb      	bpl.n	8008da0 <_printf_i+0xe4>
 8008da8:	881e      	ldrh	r6, [r3, #0]
 8008daa:	4853      	ldr	r0, [pc, #332]	; (8008ef8 <_printf_i+0x23c>)
 8008dac:	2f6f      	cmp	r7, #111	; 0x6f
 8008dae:	bf0c      	ite	eq
 8008db0:	2308      	moveq	r3, #8
 8008db2:	230a      	movne	r3, #10
 8008db4:	2100      	movs	r1, #0
 8008db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dba:	6865      	ldr	r5, [r4, #4]
 8008dbc:	60a5      	str	r5, [r4, #8]
 8008dbe:	2d00      	cmp	r5, #0
 8008dc0:	bfa2      	ittt	ge
 8008dc2:	6821      	ldrge	r1, [r4, #0]
 8008dc4:	f021 0104 	bicge.w	r1, r1, #4
 8008dc8:	6021      	strge	r1, [r4, #0]
 8008dca:	b90e      	cbnz	r6, 8008dd0 <_printf_i+0x114>
 8008dcc:	2d00      	cmp	r5, #0
 8008dce:	d04b      	beq.n	8008e68 <_printf_i+0x1ac>
 8008dd0:	4615      	mov	r5, r2
 8008dd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dd6:	fb03 6711 	mls	r7, r3, r1, r6
 8008dda:	5dc7      	ldrb	r7, [r0, r7]
 8008ddc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008de0:	4637      	mov	r7, r6
 8008de2:	42bb      	cmp	r3, r7
 8008de4:	460e      	mov	r6, r1
 8008de6:	d9f4      	bls.n	8008dd2 <_printf_i+0x116>
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d10b      	bne.n	8008e04 <_printf_i+0x148>
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	07de      	lsls	r6, r3, #31
 8008df0:	d508      	bpl.n	8008e04 <_printf_i+0x148>
 8008df2:	6923      	ldr	r3, [r4, #16]
 8008df4:	6861      	ldr	r1, [r4, #4]
 8008df6:	4299      	cmp	r1, r3
 8008df8:	bfde      	ittt	le
 8008dfa:	2330      	movle	r3, #48	; 0x30
 8008dfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e04:	1b52      	subs	r2, r2, r5
 8008e06:	6122      	str	r2, [r4, #16]
 8008e08:	f8cd a000 	str.w	sl, [sp]
 8008e0c:	464b      	mov	r3, r9
 8008e0e:	aa03      	add	r2, sp, #12
 8008e10:	4621      	mov	r1, r4
 8008e12:	4640      	mov	r0, r8
 8008e14:	f7ff fee4 	bl	8008be0 <_printf_common>
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d14a      	bne.n	8008eb2 <_printf_i+0x1f6>
 8008e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e20:	b004      	add	sp, #16
 8008e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	f043 0320 	orr.w	r3, r3, #32
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	4833      	ldr	r0, [pc, #204]	; (8008efc <_printf_i+0x240>)
 8008e30:	2778      	movs	r7, #120	; 0x78
 8008e32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	6829      	ldr	r1, [r5, #0]
 8008e3a:	061f      	lsls	r7, r3, #24
 8008e3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e40:	d402      	bmi.n	8008e48 <_printf_i+0x18c>
 8008e42:	065f      	lsls	r7, r3, #25
 8008e44:	bf48      	it	mi
 8008e46:	b2b6      	uxthmi	r6, r6
 8008e48:	07df      	lsls	r7, r3, #31
 8008e4a:	bf48      	it	mi
 8008e4c:	f043 0320 	orrmi.w	r3, r3, #32
 8008e50:	6029      	str	r1, [r5, #0]
 8008e52:	bf48      	it	mi
 8008e54:	6023      	strmi	r3, [r4, #0]
 8008e56:	b91e      	cbnz	r6, 8008e60 <_printf_i+0x1a4>
 8008e58:	6823      	ldr	r3, [r4, #0]
 8008e5a:	f023 0320 	bic.w	r3, r3, #32
 8008e5e:	6023      	str	r3, [r4, #0]
 8008e60:	2310      	movs	r3, #16
 8008e62:	e7a7      	b.n	8008db4 <_printf_i+0xf8>
 8008e64:	4824      	ldr	r0, [pc, #144]	; (8008ef8 <_printf_i+0x23c>)
 8008e66:	e7e4      	b.n	8008e32 <_printf_i+0x176>
 8008e68:	4615      	mov	r5, r2
 8008e6a:	e7bd      	b.n	8008de8 <_printf_i+0x12c>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	6826      	ldr	r6, [r4, #0]
 8008e70:	6961      	ldr	r1, [r4, #20]
 8008e72:	1d18      	adds	r0, r3, #4
 8008e74:	6028      	str	r0, [r5, #0]
 8008e76:	0635      	lsls	r5, r6, #24
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	d501      	bpl.n	8008e80 <_printf_i+0x1c4>
 8008e7c:	6019      	str	r1, [r3, #0]
 8008e7e:	e002      	b.n	8008e86 <_printf_i+0x1ca>
 8008e80:	0670      	lsls	r0, r6, #25
 8008e82:	d5fb      	bpl.n	8008e7c <_printf_i+0x1c0>
 8008e84:	8019      	strh	r1, [r3, #0]
 8008e86:	2300      	movs	r3, #0
 8008e88:	6123      	str	r3, [r4, #16]
 8008e8a:	4615      	mov	r5, r2
 8008e8c:	e7bc      	b.n	8008e08 <_printf_i+0x14c>
 8008e8e:	682b      	ldr	r3, [r5, #0]
 8008e90:	1d1a      	adds	r2, r3, #4
 8008e92:	602a      	str	r2, [r5, #0]
 8008e94:	681d      	ldr	r5, [r3, #0]
 8008e96:	6862      	ldr	r2, [r4, #4]
 8008e98:	2100      	movs	r1, #0
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f7f7 f998 	bl	80001d0 <memchr>
 8008ea0:	b108      	cbz	r0, 8008ea6 <_printf_i+0x1ea>
 8008ea2:	1b40      	subs	r0, r0, r5
 8008ea4:	6060      	str	r0, [r4, #4]
 8008ea6:	6863      	ldr	r3, [r4, #4]
 8008ea8:	6123      	str	r3, [r4, #16]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eb0:	e7aa      	b.n	8008e08 <_printf_i+0x14c>
 8008eb2:	6923      	ldr	r3, [r4, #16]
 8008eb4:	462a      	mov	r2, r5
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	4640      	mov	r0, r8
 8008eba:	47d0      	blx	sl
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	d0ad      	beq.n	8008e1c <_printf_i+0x160>
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	079b      	lsls	r3, r3, #30
 8008ec4:	d413      	bmi.n	8008eee <_printf_i+0x232>
 8008ec6:	68e0      	ldr	r0, [r4, #12]
 8008ec8:	9b03      	ldr	r3, [sp, #12]
 8008eca:	4298      	cmp	r0, r3
 8008ecc:	bfb8      	it	lt
 8008ece:	4618      	movlt	r0, r3
 8008ed0:	e7a6      	b.n	8008e20 <_printf_i+0x164>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	4632      	mov	r2, r6
 8008ed6:	4649      	mov	r1, r9
 8008ed8:	4640      	mov	r0, r8
 8008eda:	47d0      	blx	sl
 8008edc:	3001      	adds	r0, #1
 8008ede:	d09d      	beq.n	8008e1c <_printf_i+0x160>
 8008ee0:	3501      	adds	r5, #1
 8008ee2:	68e3      	ldr	r3, [r4, #12]
 8008ee4:	9903      	ldr	r1, [sp, #12]
 8008ee6:	1a5b      	subs	r3, r3, r1
 8008ee8:	42ab      	cmp	r3, r5
 8008eea:	dcf2      	bgt.n	8008ed2 <_printf_i+0x216>
 8008eec:	e7eb      	b.n	8008ec6 <_printf_i+0x20a>
 8008eee:	2500      	movs	r5, #0
 8008ef0:	f104 0619 	add.w	r6, r4, #25
 8008ef4:	e7f5      	b.n	8008ee2 <_printf_i+0x226>
 8008ef6:	bf00      	nop
 8008ef8:	0800d9fb 	.word	0x0800d9fb
 8008efc:	0800da0c 	.word	0x0800da0c

08008f00 <_scanf_float>:
 8008f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f04:	b087      	sub	sp, #28
 8008f06:	4617      	mov	r7, r2
 8008f08:	9303      	str	r3, [sp, #12]
 8008f0a:	688b      	ldr	r3, [r1, #8]
 8008f0c:	1e5a      	subs	r2, r3, #1
 8008f0e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f12:	bf83      	ittte	hi
 8008f14:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f18:	195b      	addhi	r3, r3, r5
 8008f1a:	9302      	strhi	r3, [sp, #8]
 8008f1c:	2300      	movls	r3, #0
 8008f1e:	bf86      	itte	hi
 8008f20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f24:	608b      	strhi	r3, [r1, #8]
 8008f26:	9302      	strls	r3, [sp, #8]
 8008f28:	680b      	ldr	r3, [r1, #0]
 8008f2a:	468b      	mov	fp, r1
 8008f2c:	2500      	movs	r5, #0
 8008f2e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008f32:	f84b 3b1c 	str.w	r3, [fp], #28
 8008f36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008f3a:	4680      	mov	r8, r0
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	465e      	mov	r6, fp
 8008f40:	46aa      	mov	sl, r5
 8008f42:	46a9      	mov	r9, r5
 8008f44:	9501      	str	r5, [sp, #4]
 8008f46:	68a2      	ldr	r2, [r4, #8]
 8008f48:	b152      	cbz	r2, 8008f60 <_scanf_float+0x60>
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b4e      	cmp	r3, #78	; 0x4e
 8008f50:	d864      	bhi.n	800901c <_scanf_float+0x11c>
 8008f52:	2b40      	cmp	r3, #64	; 0x40
 8008f54:	d83c      	bhi.n	8008fd0 <_scanf_float+0xd0>
 8008f56:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008f5a:	b2c8      	uxtb	r0, r1
 8008f5c:	280e      	cmp	r0, #14
 8008f5e:	d93a      	bls.n	8008fd6 <_scanf_float+0xd6>
 8008f60:	f1b9 0f00 	cmp.w	r9, #0
 8008f64:	d003      	beq.n	8008f6e <_scanf_float+0x6e>
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f6c:	6023      	str	r3, [r4, #0]
 8008f6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f72:	f1ba 0f01 	cmp.w	sl, #1
 8008f76:	f200 8113 	bhi.w	80091a0 <_scanf_float+0x2a0>
 8008f7a:	455e      	cmp	r6, fp
 8008f7c:	f200 8105 	bhi.w	800918a <_scanf_float+0x28a>
 8008f80:	2501      	movs	r5, #1
 8008f82:	4628      	mov	r0, r5
 8008f84:	b007      	add	sp, #28
 8008f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008f8e:	2a0d      	cmp	r2, #13
 8008f90:	d8e6      	bhi.n	8008f60 <_scanf_float+0x60>
 8008f92:	a101      	add	r1, pc, #4	; (adr r1, 8008f98 <_scanf_float+0x98>)
 8008f94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008f98:	080090d7 	.word	0x080090d7
 8008f9c:	08008f61 	.word	0x08008f61
 8008fa0:	08008f61 	.word	0x08008f61
 8008fa4:	08008f61 	.word	0x08008f61
 8008fa8:	08009137 	.word	0x08009137
 8008fac:	0800910f 	.word	0x0800910f
 8008fb0:	08008f61 	.word	0x08008f61
 8008fb4:	08008f61 	.word	0x08008f61
 8008fb8:	080090e5 	.word	0x080090e5
 8008fbc:	08008f61 	.word	0x08008f61
 8008fc0:	08008f61 	.word	0x08008f61
 8008fc4:	08008f61 	.word	0x08008f61
 8008fc8:	08008f61 	.word	0x08008f61
 8008fcc:	0800909d 	.word	0x0800909d
 8008fd0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008fd4:	e7db      	b.n	8008f8e <_scanf_float+0x8e>
 8008fd6:	290e      	cmp	r1, #14
 8008fd8:	d8c2      	bhi.n	8008f60 <_scanf_float+0x60>
 8008fda:	a001      	add	r0, pc, #4	; (adr r0, 8008fe0 <_scanf_float+0xe0>)
 8008fdc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008fe0:	0800908f 	.word	0x0800908f
 8008fe4:	08008f61 	.word	0x08008f61
 8008fe8:	0800908f 	.word	0x0800908f
 8008fec:	08009123 	.word	0x08009123
 8008ff0:	08008f61 	.word	0x08008f61
 8008ff4:	0800903d 	.word	0x0800903d
 8008ff8:	08009079 	.word	0x08009079
 8008ffc:	08009079 	.word	0x08009079
 8009000:	08009079 	.word	0x08009079
 8009004:	08009079 	.word	0x08009079
 8009008:	08009079 	.word	0x08009079
 800900c:	08009079 	.word	0x08009079
 8009010:	08009079 	.word	0x08009079
 8009014:	08009079 	.word	0x08009079
 8009018:	08009079 	.word	0x08009079
 800901c:	2b6e      	cmp	r3, #110	; 0x6e
 800901e:	d809      	bhi.n	8009034 <_scanf_float+0x134>
 8009020:	2b60      	cmp	r3, #96	; 0x60
 8009022:	d8b2      	bhi.n	8008f8a <_scanf_float+0x8a>
 8009024:	2b54      	cmp	r3, #84	; 0x54
 8009026:	d077      	beq.n	8009118 <_scanf_float+0x218>
 8009028:	2b59      	cmp	r3, #89	; 0x59
 800902a:	d199      	bne.n	8008f60 <_scanf_float+0x60>
 800902c:	2d07      	cmp	r5, #7
 800902e:	d197      	bne.n	8008f60 <_scanf_float+0x60>
 8009030:	2508      	movs	r5, #8
 8009032:	e029      	b.n	8009088 <_scanf_float+0x188>
 8009034:	2b74      	cmp	r3, #116	; 0x74
 8009036:	d06f      	beq.n	8009118 <_scanf_float+0x218>
 8009038:	2b79      	cmp	r3, #121	; 0x79
 800903a:	e7f6      	b.n	800902a <_scanf_float+0x12a>
 800903c:	6821      	ldr	r1, [r4, #0]
 800903e:	05c8      	lsls	r0, r1, #23
 8009040:	d51a      	bpl.n	8009078 <_scanf_float+0x178>
 8009042:	9b02      	ldr	r3, [sp, #8]
 8009044:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009048:	6021      	str	r1, [r4, #0]
 800904a:	f109 0901 	add.w	r9, r9, #1
 800904e:	b11b      	cbz	r3, 8009058 <_scanf_float+0x158>
 8009050:	3b01      	subs	r3, #1
 8009052:	3201      	adds	r2, #1
 8009054:	9302      	str	r3, [sp, #8]
 8009056:	60a2      	str	r2, [r4, #8]
 8009058:	68a3      	ldr	r3, [r4, #8]
 800905a:	3b01      	subs	r3, #1
 800905c:	60a3      	str	r3, [r4, #8]
 800905e:	6923      	ldr	r3, [r4, #16]
 8009060:	3301      	adds	r3, #1
 8009062:	6123      	str	r3, [r4, #16]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	3b01      	subs	r3, #1
 8009068:	2b00      	cmp	r3, #0
 800906a:	607b      	str	r3, [r7, #4]
 800906c:	f340 8084 	ble.w	8009178 <_scanf_float+0x278>
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	3301      	adds	r3, #1
 8009074:	603b      	str	r3, [r7, #0]
 8009076:	e766      	b.n	8008f46 <_scanf_float+0x46>
 8009078:	eb1a 0f05 	cmn.w	sl, r5
 800907c:	f47f af70 	bne.w	8008f60 <_scanf_float+0x60>
 8009080:	6822      	ldr	r2, [r4, #0]
 8009082:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009086:	6022      	str	r2, [r4, #0]
 8009088:	f806 3b01 	strb.w	r3, [r6], #1
 800908c:	e7e4      	b.n	8009058 <_scanf_float+0x158>
 800908e:	6822      	ldr	r2, [r4, #0]
 8009090:	0610      	lsls	r0, r2, #24
 8009092:	f57f af65 	bpl.w	8008f60 <_scanf_float+0x60>
 8009096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800909a:	e7f4      	b.n	8009086 <_scanf_float+0x186>
 800909c:	f1ba 0f00 	cmp.w	sl, #0
 80090a0:	d10e      	bne.n	80090c0 <_scanf_float+0x1c0>
 80090a2:	f1b9 0f00 	cmp.w	r9, #0
 80090a6:	d10e      	bne.n	80090c6 <_scanf_float+0x1c6>
 80090a8:	6822      	ldr	r2, [r4, #0]
 80090aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80090b2:	d108      	bne.n	80090c6 <_scanf_float+0x1c6>
 80090b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80090b8:	6022      	str	r2, [r4, #0]
 80090ba:	f04f 0a01 	mov.w	sl, #1
 80090be:	e7e3      	b.n	8009088 <_scanf_float+0x188>
 80090c0:	f1ba 0f02 	cmp.w	sl, #2
 80090c4:	d055      	beq.n	8009172 <_scanf_float+0x272>
 80090c6:	2d01      	cmp	r5, #1
 80090c8:	d002      	beq.n	80090d0 <_scanf_float+0x1d0>
 80090ca:	2d04      	cmp	r5, #4
 80090cc:	f47f af48 	bne.w	8008f60 <_scanf_float+0x60>
 80090d0:	3501      	adds	r5, #1
 80090d2:	b2ed      	uxtb	r5, r5
 80090d4:	e7d8      	b.n	8009088 <_scanf_float+0x188>
 80090d6:	f1ba 0f01 	cmp.w	sl, #1
 80090da:	f47f af41 	bne.w	8008f60 <_scanf_float+0x60>
 80090de:	f04f 0a02 	mov.w	sl, #2
 80090e2:	e7d1      	b.n	8009088 <_scanf_float+0x188>
 80090e4:	b97d      	cbnz	r5, 8009106 <_scanf_float+0x206>
 80090e6:	f1b9 0f00 	cmp.w	r9, #0
 80090ea:	f47f af3c 	bne.w	8008f66 <_scanf_float+0x66>
 80090ee:	6822      	ldr	r2, [r4, #0]
 80090f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80090f8:	f47f af39 	bne.w	8008f6e <_scanf_float+0x6e>
 80090fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009100:	6022      	str	r2, [r4, #0]
 8009102:	2501      	movs	r5, #1
 8009104:	e7c0      	b.n	8009088 <_scanf_float+0x188>
 8009106:	2d03      	cmp	r5, #3
 8009108:	d0e2      	beq.n	80090d0 <_scanf_float+0x1d0>
 800910a:	2d05      	cmp	r5, #5
 800910c:	e7de      	b.n	80090cc <_scanf_float+0x1cc>
 800910e:	2d02      	cmp	r5, #2
 8009110:	f47f af26 	bne.w	8008f60 <_scanf_float+0x60>
 8009114:	2503      	movs	r5, #3
 8009116:	e7b7      	b.n	8009088 <_scanf_float+0x188>
 8009118:	2d06      	cmp	r5, #6
 800911a:	f47f af21 	bne.w	8008f60 <_scanf_float+0x60>
 800911e:	2507      	movs	r5, #7
 8009120:	e7b2      	b.n	8009088 <_scanf_float+0x188>
 8009122:	6822      	ldr	r2, [r4, #0]
 8009124:	0591      	lsls	r1, r2, #22
 8009126:	f57f af1b 	bpl.w	8008f60 <_scanf_float+0x60>
 800912a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800912e:	6022      	str	r2, [r4, #0]
 8009130:	f8cd 9004 	str.w	r9, [sp, #4]
 8009134:	e7a8      	b.n	8009088 <_scanf_float+0x188>
 8009136:	6822      	ldr	r2, [r4, #0]
 8009138:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800913c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009140:	d006      	beq.n	8009150 <_scanf_float+0x250>
 8009142:	0550      	lsls	r0, r2, #21
 8009144:	f57f af0c 	bpl.w	8008f60 <_scanf_float+0x60>
 8009148:	f1b9 0f00 	cmp.w	r9, #0
 800914c:	f43f af0f 	beq.w	8008f6e <_scanf_float+0x6e>
 8009150:	0591      	lsls	r1, r2, #22
 8009152:	bf58      	it	pl
 8009154:	9901      	ldrpl	r1, [sp, #4]
 8009156:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800915a:	bf58      	it	pl
 800915c:	eba9 0101 	subpl.w	r1, r9, r1
 8009160:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009164:	bf58      	it	pl
 8009166:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800916a:	6022      	str	r2, [r4, #0]
 800916c:	f04f 0900 	mov.w	r9, #0
 8009170:	e78a      	b.n	8009088 <_scanf_float+0x188>
 8009172:	f04f 0a03 	mov.w	sl, #3
 8009176:	e787      	b.n	8009088 <_scanf_float+0x188>
 8009178:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800917c:	4639      	mov	r1, r7
 800917e:	4640      	mov	r0, r8
 8009180:	4798      	blx	r3
 8009182:	2800      	cmp	r0, #0
 8009184:	f43f aedf 	beq.w	8008f46 <_scanf_float+0x46>
 8009188:	e6ea      	b.n	8008f60 <_scanf_float+0x60>
 800918a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800918e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009192:	463a      	mov	r2, r7
 8009194:	4640      	mov	r0, r8
 8009196:	4798      	blx	r3
 8009198:	6923      	ldr	r3, [r4, #16]
 800919a:	3b01      	subs	r3, #1
 800919c:	6123      	str	r3, [r4, #16]
 800919e:	e6ec      	b.n	8008f7a <_scanf_float+0x7a>
 80091a0:	1e6b      	subs	r3, r5, #1
 80091a2:	2b06      	cmp	r3, #6
 80091a4:	d825      	bhi.n	80091f2 <_scanf_float+0x2f2>
 80091a6:	2d02      	cmp	r5, #2
 80091a8:	d836      	bhi.n	8009218 <_scanf_float+0x318>
 80091aa:	455e      	cmp	r6, fp
 80091ac:	f67f aee8 	bls.w	8008f80 <_scanf_float+0x80>
 80091b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091b4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091b8:	463a      	mov	r2, r7
 80091ba:	4640      	mov	r0, r8
 80091bc:	4798      	blx	r3
 80091be:	6923      	ldr	r3, [r4, #16]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	e7f1      	b.n	80091aa <_scanf_float+0x2aa>
 80091c6:	9802      	ldr	r0, [sp, #8]
 80091c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80091d0:	9002      	str	r0, [sp, #8]
 80091d2:	463a      	mov	r2, r7
 80091d4:	4640      	mov	r0, r8
 80091d6:	4798      	blx	r3
 80091d8:	6923      	ldr	r3, [r4, #16]
 80091da:	3b01      	subs	r3, #1
 80091dc:	6123      	str	r3, [r4, #16]
 80091de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091e2:	fa5f fa8a 	uxtb.w	sl, sl
 80091e6:	f1ba 0f02 	cmp.w	sl, #2
 80091ea:	d1ec      	bne.n	80091c6 <_scanf_float+0x2c6>
 80091ec:	3d03      	subs	r5, #3
 80091ee:	b2ed      	uxtb	r5, r5
 80091f0:	1b76      	subs	r6, r6, r5
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	05da      	lsls	r2, r3, #23
 80091f6:	d52f      	bpl.n	8009258 <_scanf_float+0x358>
 80091f8:	055b      	lsls	r3, r3, #21
 80091fa:	d510      	bpl.n	800921e <_scanf_float+0x31e>
 80091fc:	455e      	cmp	r6, fp
 80091fe:	f67f aebf 	bls.w	8008f80 <_scanf_float+0x80>
 8009202:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009206:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800920a:	463a      	mov	r2, r7
 800920c:	4640      	mov	r0, r8
 800920e:	4798      	blx	r3
 8009210:	6923      	ldr	r3, [r4, #16]
 8009212:	3b01      	subs	r3, #1
 8009214:	6123      	str	r3, [r4, #16]
 8009216:	e7f1      	b.n	80091fc <_scanf_float+0x2fc>
 8009218:	46aa      	mov	sl, r5
 800921a:	9602      	str	r6, [sp, #8]
 800921c:	e7df      	b.n	80091de <_scanf_float+0x2de>
 800921e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009222:	6923      	ldr	r3, [r4, #16]
 8009224:	2965      	cmp	r1, #101	; 0x65
 8009226:	f103 33ff 	add.w	r3, r3, #4294967295
 800922a:	f106 35ff 	add.w	r5, r6, #4294967295
 800922e:	6123      	str	r3, [r4, #16]
 8009230:	d00c      	beq.n	800924c <_scanf_float+0x34c>
 8009232:	2945      	cmp	r1, #69	; 0x45
 8009234:	d00a      	beq.n	800924c <_scanf_float+0x34c>
 8009236:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800923a:	463a      	mov	r2, r7
 800923c:	4640      	mov	r0, r8
 800923e:	4798      	blx	r3
 8009240:	6923      	ldr	r3, [r4, #16]
 8009242:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009246:	3b01      	subs	r3, #1
 8009248:	1eb5      	subs	r5, r6, #2
 800924a:	6123      	str	r3, [r4, #16]
 800924c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009250:	463a      	mov	r2, r7
 8009252:	4640      	mov	r0, r8
 8009254:	4798      	blx	r3
 8009256:	462e      	mov	r6, r5
 8009258:	6825      	ldr	r5, [r4, #0]
 800925a:	f015 0510 	ands.w	r5, r5, #16
 800925e:	d158      	bne.n	8009312 <_scanf_float+0x412>
 8009260:	7035      	strb	r5, [r6, #0]
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800926c:	d11c      	bne.n	80092a8 <_scanf_float+0x3a8>
 800926e:	9b01      	ldr	r3, [sp, #4]
 8009270:	454b      	cmp	r3, r9
 8009272:	eba3 0209 	sub.w	r2, r3, r9
 8009276:	d124      	bne.n	80092c2 <_scanf_float+0x3c2>
 8009278:	2200      	movs	r2, #0
 800927a:	4659      	mov	r1, fp
 800927c:	4640      	mov	r0, r8
 800927e:	f7ff f8df 	bl	8008440 <_strtod_r>
 8009282:	9b03      	ldr	r3, [sp, #12]
 8009284:	6821      	ldr	r1, [r4, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f011 0f02 	tst.w	r1, #2
 800928c:	ec57 6b10 	vmov	r6, r7, d0
 8009290:	f103 0204 	add.w	r2, r3, #4
 8009294:	d020      	beq.n	80092d8 <_scanf_float+0x3d8>
 8009296:	9903      	ldr	r1, [sp, #12]
 8009298:	600a      	str	r2, [r1, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	e9c3 6700 	strd	r6, r7, [r3]
 80092a0:	68e3      	ldr	r3, [r4, #12]
 80092a2:	3301      	adds	r3, #1
 80092a4:	60e3      	str	r3, [r4, #12]
 80092a6:	e66c      	b.n	8008f82 <_scanf_float+0x82>
 80092a8:	9b04      	ldr	r3, [sp, #16]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d0e4      	beq.n	8009278 <_scanf_float+0x378>
 80092ae:	9905      	ldr	r1, [sp, #20]
 80092b0:	230a      	movs	r3, #10
 80092b2:	462a      	mov	r2, r5
 80092b4:	3101      	adds	r1, #1
 80092b6:	4640      	mov	r0, r8
 80092b8:	f7ff f9b0 	bl	800861c <_strtol_r>
 80092bc:	9b04      	ldr	r3, [sp, #16]
 80092be:	9e05      	ldr	r6, [sp, #20]
 80092c0:	1ac2      	subs	r2, r0, r3
 80092c2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80092c6:	429e      	cmp	r6, r3
 80092c8:	bf28      	it	cs
 80092ca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80092ce:	4912      	ldr	r1, [pc, #72]	; (8009318 <_scanf_float+0x418>)
 80092d0:	4630      	mov	r0, r6
 80092d2:	f000 f91b 	bl	800950c <siprintf>
 80092d6:	e7cf      	b.n	8009278 <_scanf_float+0x378>
 80092d8:	f011 0f04 	tst.w	r1, #4
 80092dc:	9903      	ldr	r1, [sp, #12]
 80092de:	600a      	str	r2, [r1, #0]
 80092e0:	d1db      	bne.n	800929a <_scanf_float+0x39a>
 80092e2:	f8d3 8000 	ldr.w	r8, [r3]
 80092e6:	ee10 2a10 	vmov	r2, s0
 80092ea:	ee10 0a10 	vmov	r0, s0
 80092ee:	463b      	mov	r3, r7
 80092f0:	4639      	mov	r1, r7
 80092f2:	f7f7 fc1b 	bl	8000b2c <__aeabi_dcmpun>
 80092f6:	b128      	cbz	r0, 8009304 <_scanf_float+0x404>
 80092f8:	4808      	ldr	r0, [pc, #32]	; (800931c <_scanf_float+0x41c>)
 80092fa:	f000 fa9d 	bl	8009838 <nanf>
 80092fe:	ed88 0a00 	vstr	s0, [r8]
 8009302:	e7cd      	b.n	80092a0 <_scanf_float+0x3a0>
 8009304:	4630      	mov	r0, r6
 8009306:	4639      	mov	r1, r7
 8009308:	f7f7 fc6e 	bl	8000be8 <__aeabi_d2f>
 800930c:	f8c8 0000 	str.w	r0, [r8]
 8009310:	e7c6      	b.n	80092a0 <_scanf_float+0x3a0>
 8009312:	2500      	movs	r5, #0
 8009314:	e635      	b.n	8008f82 <_scanf_float+0x82>
 8009316:	bf00      	nop
 8009318:	0800da1d 	.word	0x0800da1d
 800931c:	0800dad6 	.word	0x0800dad6

08009320 <std>:
 8009320:	2300      	movs	r3, #0
 8009322:	b510      	push	{r4, lr}
 8009324:	4604      	mov	r4, r0
 8009326:	e9c0 3300 	strd	r3, r3, [r0]
 800932a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800932e:	6083      	str	r3, [r0, #8]
 8009330:	8181      	strh	r1, [r0, #12]
 8009332:	6643      	str	r3, [r0, #100]	; 0x64
 8009334:	81c2      	strh	r2, [r0, #14]
 8009336:	6183      	str	r3, [r0, #24]
 8009338:	4619      	mov	r1, r3
 800933a:	2208      	movs	r2, #8
 800933c:	305c      	adds	r0, #92	; 0x5c
 800933e:	f000 f948 	bl	80095d2 <memset>
 8009342:	4b0d      	ldr	r3, [pc, #52]	; (8009378 <std+0x58>)
 8009344:	6263      	str	r3, [r4, #36]	; 0x24
 8009346:	4b0d      	ldr	r3, [pc, #52]	; (800937c <std+0x5c>)
 8009348:	62a3      	str	r3, [r4, #40]	; 0x28
 800934a:	4b0d      	ldr	r3, [pc, #52]	; (8009380 <std+0x60>)
 800934c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800934e:	4b0d      	ldr	r3, [pc, #52]	; (8009384 <std+0x64>)
 8009350:	6323      	str	r3, [r4, #48]	; 0x30
 8009352:	4b0d      	ldr	r3, [pc, #52]	; (8009388 <std+0x68>)
 8009354:	6224      	str	r4, [r4, #32]
 8009356:	429c      	cmp	r4, r3
 8009358:	d006      	beq.n	8009368 <std+0x48>
 800935a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800935e:	4294      	cmp	r4, r2
 8009360:	d002      	beq.n	8009368 <std+0x48>
 8009362:	33d0      	adds	r3, #208	; 0xd0
 8009364:	429c      	cmp	r4, r3
 8009366:	d105      	bne.n	8009374 <std+0x54>
 8009368:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800936c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009370:	f000 ba40 	b.w	80097f4 <__retarget_lock_init_recursive>
 8009374:	bd10      	pop	{r4, pc}
 8009376:	bf00      	nop
 8009378:	0800954d 	.word	0x0800954d
 800937c:	0800956f 	.word	0x0800956f
 8009380:	080095a7 	.word	0x080095a7
 8009384:	080095cb 	.word	0x080095cb
 8009388:	20000af4 	.word	0x20000af4

0800938c <stdio_exit_handler>:
 800938c:	4a02      	ldr	r2, [pc, #8]	; (8009398 <stdio_exit_handler+0xc>)
 800938e:	4903      	ldr	r1, [pc, #12]	; (800939c <stdio_exit_handler+0x10>)
 8009390:	4803      	ldr	r0, [pc, #12]	; (80093a0 <stdio_exit_handler+0x14>)
 8009392:	f000 b869 	b.w	8009468 <_fwalk_sglue>
 8009396:	bf00      	nop
 8009398:	2000001c 	.word	0x2000001c
 800939c:	0800ba11 	.word	0x0800ba11
 80093a0:	20000194 	.word	0x20000194

080093a4 <cleanup_stdio>:
 80093a4:	6841      	ldr	r1, [r0, #4]
 80093a6:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <cleanup_stdio+0x34>)
 80093a8:	4299      	cmp	r1, r3
 80093aa:	b510      	push	{r4, lr}
 80093ac:	4604      	mov	r4, r0
 80093ae:	d001      	beq.n	80093b4 <cleanup_stdio+0x10>
 80093b0:	f002 fb2e 	bl	800ba10 <_fflush_r>
 80093b4:	68a1      	ldr	r1, [r4, #8]
 80093b6:	4b09      	ldr	r3, [pc, #36]	; (80093dc <cleanup_stdio+0x38>)
 80093b8:	4299      	cmp	r1, r3
 80093ba:	d002      	beq.n	80093c2 <cleanup_stdio+0x1e>
 80093bc:	4620      	mov	r0, r4
 80093be:	f002 fb27 	bl	800ba10 <_fflush_r>
 80093c2:	68e1      	ldr	r1, [r4, #12]
 80093c4:	4b06      	ldr	r3, [pc, #24]	; (80093e0 <cleanup_stdio+0x3c>)
 80093c6:	4299      	cmp	r1, r3
 80093c8:	d004      	beq.n	80093d4 <cleanup_stdio+0x30>
 80093ca:	4620      	mov	r0, r4
 80093cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093d0:	f002 bb1e 	b.w	800ba10 <_fflush_r>
 80093d4:	bd10      	pop	{r4, pc}
 80093d6:	bf00      	nop
 80093d8:	20000af4 	.word	0x20000af4
 80093dc:	20000b5c 	.word	0x20000b5c
 80093e0:	20000bc4 	.word	0x20000bc4

080093e4 <global_stdio_init.part.0>:
 80093e4:	b510      	push	{r4, lr}
 80093e6:	4b0b      	ldr	r3, [pc, #44]	; (8009414 <global_stdio_init.part.0+0x30>)
 80093e8:	4c0b      	ldr	r4, [pc, #44]	; (8009418 <global_stdio_init.part.0+0x34>)
 80093ea:	4a0c      	ldr	r2, [pc, #48]	; (800941c <global_stdio_init.part.0+0x38>)
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	4620      	mov	r0, r4
 80093f0:	2200      	movs	r2, #0
 80093f2:	2104      	movs	r1, #4
 80093f4:	f7ff ff94 	bl	8009320 <std>
 80093f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80093fc:	2201      	movs	r2, #1
 80093fe:	2109      	movs	r1, #9
 8009400:	f7ff ff8e 	bl	8009320 <std>
 8009404:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009408:	2202      	movs	r2, #2
 800940a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800940e:	2112      	movs	r1, #18
 8009410:	f7ff bf86 	b.w	8009320 <std>
 8009414:	20000c2c 	.word	0x20000c2c
 8009418:	20000af4 	.word	0x20000af4
 800941c:	0800938d 	.word	0x0800938d

08009420 <__sfp_lock_acquire>:
 8009420:	4801      	ldr	r0, [pc, #4]	; (8009428 <__sfp_lock_acquire+0x8>)
 8009422:	f000 b9e8 	b.w	80097f6 <__retarget_lock_acquire_recursive>
 8009426:	bf00      	nop
 8009428:	20000c35 	.word	0x20000c35

0800942c <__sfp_lock_release>:
 800942c:	4801      	ldr	r0, [pc, #4]	; (8009434 <__sfp_lock_release+0x8>)
 800942e:	f000 b9e3 	b.w	80097f8 <__retarget_lock_release_recursive>
 8009432:	bf00      	nop
 8009434:	20000c35 	.word	0x20000c35

08009438 <__sinit>:
 8009438:	b510      	push	{r4, lr}
 800943a:	4604      	mov	r4, r0
 800943c:	f7ff fff0 	bl	8009420 <__sfp_lock_acquire>
 8009440:	6a23      	ldr	r3, [r4, #32]
 8009442:	b11b      	cbz	r3, 800944c <__sinit+0x14>
 8009444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009448:	f7ff bff0 	b.w	800942c <__sfp_lock_release>
 800944c:	4b04      	ldr	r3, [pc, #16]	; (8009460 <__sinit+0x28>)
 800944e:	6223      	str	r3, [r4, #32]
 8009450:	4b04      	ldr	r3, [pc, #16]	; (8009464 <__sinit+0x2c>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1f5      	bne.n	8009444 <__sinit+0xc>
 8009458:	f7ff ffc4 	bl	80093e4 <global_stdio_init.part.0>
 800945c:	e7f2      	b.n	8009444 <__sinit+0xc>
 800945e:	bf00      	nop
 8009460:	080093a5 	.word	0x080093a5
 8009464:	20000c2c 	.word	0x20000c2c

08009468 <_fwalk_sglue>:
 8009468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800946c:	4607      	mov	r7, r0
 800946e:	4688      	mov	r8, r1
 8009470:	4614      	mov	r4, r2
 8009472:	2600      	movs	r6, #0
 8009474:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009478:	f1b9 0901 	subs.w	r9, r9, #1
 800947c:	d505      	bpl.n	800948a <_fwalk_sglue+0x22>
 800947e:	6824      	ldr	r4, [r4, #0]
 8009480:	2c00      	cmp	r4, #0
 8009482:	d1f7      	bne.n	8009474 <_fwalk_sglue+0xc>
 8009484:	4630      	mov	r0, r6
 8009486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800948a:	89ab      	ldrh	r3, [r5, #12]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d907      	bls.n	80094a0 <_fwalk_sglue+0x38>
 8009490:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009494:	3301      	adds	r3, #1
 8009496:	d003      	beq.n	80094a0 <_fwalk_sglue+0x38>
 8009498:	4629      	mov	r1, r5
 800949a:	4638      	mov	r0, r7
 800949c:	47c0      	blx	r8
 800949e:	4306      	orrs	r6, r0
 80094a0:	3568      	adds	r5, #104	; 0x68
 80094a2:	e7e9      	b.n	8009478 <_fwalk_sglue+0x10>

080094a4 <sniprintf>:
 80094a4:	b40c      	push	{r2, r3}
 80094a6:	b530      	push	{r4, r5, lr}
 80094a8:	4b17      	ldr	r3, [pc, #92]	; (8009508 <sniprintf+0x64>)
 80094aa:	1e0c      	subs	r4, r1, #0
 80094ac:	681d      	ldr	r5, [r3, #0]
 80094ae:	b09d      	sub	sp, #116	; 0x74
 80094b0:	da08      	bge.n	80094c4 <sniprintf+0x20>
 80094b2:	238b      	movs	r3, #139	; 0x8b
 80094b4:	602b      	str	r3, [r5, #0]
 80094b6:	f04f 30ff 	mov.w	r0, #4294967295
 80094ba:	b01d      	add	sp, #116	; 0x74
 80094bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094c0:	b002      	add	sp, #8
 80094c2:	4770      	bx	lr
 80094c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80094c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80094cc:	bf14      	ite	ne
 80094ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 80094d2:	4623      	moveq	r3, r4
 80094d4:	9304      	str	r3, [sp, #16]
 80094d6:	9307      	str	r3, [sp, #28]
 80094d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094dc:	9002      	str	r0, [sp, #8]
 80094de:	9006      	str	r0, [sp, #24]
 80094e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80094e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80094e6:	ab21      	add	r3, sp, #132	; 0x84
 80094e8:	a902      	add	r1, sp, #8
 80094ea:	4628      	mov	r0, r5
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	f002 f90b 	bl	800b708 <_svfiprintf_r>
 80094f2:	1c43      	adds	r3, r0, #1
 80094f4:	bfbc      	itt	lt
 80094f6:	238b      	movlt	r3, #139	; 0x8b
 80094f8:	602b      	strlt	r3, [r5, #0]
 80094fa:	2c00      	cmp	r4, #0
 80094fc:	d0dd      	beq.n	80094ba <sniprintf+0x16>
 80094fe:	9b02      	ldr	r3, [sp, #8]
 8009500:	2200      	movs	r2, #0
 8009502:	701a      	strb	r2, [r3, #0]
 8009504:	e7d9      	b.n	80094ba <sniprintf+0x16>
 8009506:	bf00      	nop
 8009508:	200001e0 	.word	0x200001e0

0800950c <siprintf>:
 800950c:	b40e      	push	{r1, r2, r3}
 800950e:	b500      	push	{lr}
 8009510:	b09c      	sub	sp, #112	; 0x70
 8009512:	ab1d      	add	r3, sp, #116	; 0x74
 8009514:	9002      	str	r0, [sp, #8]
 8009516:	9006      	str	r0, [sp, #24]
 8009518:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800951c:	4809      	ldr	r0, [pc, #36]	; (8009544 <siprintf+0x38>)
 800951e:	9107      	str	r1, [sp, #28]
 8009520:	9104      	str	r1, [sp, #16]
 8009522:	4909      	ldr	r1, [pc, #36]	; (8009548 <siprintf+0x3c>)
 8009524:	f853 2b04 	ldr.w	r2, [r3], #4
 8009528:	9105      	str	r1, [sp, #20]
 800952a:	6800      	ldr	r0, [r0, #0]
 800952c:	9301      	str	r3, [sp, #4]
 800952e:	a902      	add	r1, sp, #8
 8009530:	f002 f8ea 	bl	800b708 <_svfiprintf_r>
 8009534:	9b02      	ldr	r3, [sp, #8]
 8009536:	2200      	movs	r2, #0
 8009538:	701a      	strb	r2, [r3, #0]
 800953a:	b01c      	add	sp, #112	; 0x70
 800953c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009540:	b003      	add	sp, #12
 8009542:	4770      	bx	lr
 8009544:	200001e0 	.word	0x200001e0
 8009548:	ffff0208 	.word	0xffff0208

0800954c <__sread>:
 800954c:	b510      	push	{r4, lr}
 800954e:	460c      	mov	r4, r1
 8009550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009554:	f000 f8f0 	bl	8009738 <_read_r>
 8009558:	2800      	cmp	r0, #0
 800955a:	bfab      	itete	ge
 800955c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800955e:	89a3      	ldrhlt	r3, [r4, #12]
 8009560:	181b      	addge	r3, r3, r0
 8009562:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009566:	bfac      	ite	ge
 8009568:	6563      	strge	r3, [r4, #84]	; 0x54
 800956a:	81a3      	strhlt	r3, [r4, #12]
 800956c:	bd10      	pop	{r4, pc}

0800956e <__swrite>:
 800956e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009572:	461f      	mov	r7, r3
 8009574:	898b      	ldrh	r3, [r1, #12]
 8009576:	05db      	lsls	r3, r3, #23
 8009578:	4605      	mov	r5, r0
 800957a:	460c      	mov	r4, r1
 800957c:	4616      	mov	r6, r2
 800957e:	d505      	bpl.n	800958c <__swrite+0x1e>
 8009580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009584:	2302      	movs	r3, #2
 8009586:	2200      	movs	r2, #0
 8009588:	f000 f8c4 	bl	8009714 <_lseek_r>
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009596:	81a3      	strh	r3, [r4, #12]
 8009598:	4632      	mov	r2, r6
 800959a:	463b      	mov	r3, r7
 800959c:	4628      	mov	r0, r5
 800959e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095a2:	f000 b8eb 	b.w	800977c <_write_r>

080095a6 <__sseek>:
 80095a6:	b510      	push	{r4, lr}
 80095a8:	460c      	mov	r4, r1
 80095aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ae:	f000 f8b1 	bl	8009714 <_lseek_r>
 80095b2:	1c43      	adds	r3, r0, #1
 80095b4:	89a3      	ldrh	r3, [r4, #12]
 80095b6:	bf15      	itete	ne
 80095b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80095ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095c2:	81a3      	strheq	r3, [r4, #12]
 80095c4:	bf18      	it	ne
 80095c6:	81a3      	strhne	r3, [r4, #12]
 80095c8:	bd10      	pop	{r4, pc}

080095ca <__sclose>:
 80095ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ce:	f000 b891 	b.w	80096f4 <_close_r>

080095d2 <memset>:
 80095d2:	4402      	add	r2, r0
 80095d4:	4603      	mov	r3, r0
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d100      	bne.n	80095dc <memset+0xa>
 80095da:	4770      	bx	lr
 80095dc:	f803 1b01 	strb.w	r1, [r3], #1
 80095e0:	e7f9      	b.n	80095d6 <memset+0x4>

080095e2 <strncmp>:
 80095e2:	b510      	push	{r4, lr}
 80095e4:	b16a      	cbz	r2, 8009602 <strncmp+0x20>
 80095e6:	3901      	subs	r1, #1
 80095e8:	1884      	adds	r4, r0, r2
 80095ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d103      	bne.n	80095fe <strncmp+0x1c>
 80095f6:	42a0      	cmp	r0, r4
 80095f8:	d001      	beq.n	80095fe <strncmp+0x1c>
 80095fa:	2a00      	cmp	r2, #0
 80095fc:	d1f5      	bne.n	80095ea <strncmp+0x8>
 80095fe:	1ad0      	subs	r0, r2, r3
 8009600:	bd10      	pop	{r4, pc}
 8009602:	4610      	mov	r0, r2
 8009604:	e7fc      	b.n	8009600 <strncmp+0x1e>
	...

08009608 <strtok>:
 8009608:	4b16      	ldr	r3, [pc, #88]	; (8009664 <strtok+0x5c>)
 800960a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800960c:	681e      	ldr	r6, [r3, #0]
 800960e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8009610:	4605      	mov	r5, r0
 8009612:	b9fc      	cbnz	r4, 8009654 <strtok+0x4c>
 8009614:	2050      	movs	r0, #80	; 0x50
 8009616:	9101      	str	r1, [sp, #4]
 8009618:	f7fe f848 	bl	80076ac <malloc>
 800961c:	9901      	ldr	r1, [sp, #4]
 800961e:	6470      	str	r0, [r6, #68]	; 0x44
 8009620:	4602      	mov	r2, r0
 8009622:	b920      	cbnz	r0, 800962e <strtok+0x26>
 8009624:	4b10      	ldr	r3, [pc, #64]	; (8009668 <strtok+0x60>)
 8009626:	4811      	ldr	r0, [pc, #68]	; (800966c <strtok+0x64>)
 8009628:	215b      	movs	r1, #91	; 0x5b
 800962a:	f000 f90b 	bl	8009844 <__assert_func>
 800962e:	e9c0 4400 	strd	r4, r4, [r0]
 8009632:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009636:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800963a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800963e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009642:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009646:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800964a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800964e:	6184      	str	r4, [r0, #24]
 8009650:	7704      	strb	r4, [r0, #28]
 8009652:	6244      	str	r4, [r0, #36]	; 0x24
 8009654:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8009656:	2301      	movs	r3, #1
 8009658:	4628      	mov	r0, r5
 800965a:	b002      	add	sp, #8
 800965c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009660:	f000 b806 	b.w	8009670 <__strtok_r>
 8009664:	200001e0 	.word	0x200001e0
 8009668:	0800da22 	.word	0x0800da22
 800966c:	0800da39 	.word	0x0800da39

08009670 <__strtok_r>:
 8009670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009672:	b908      	cbnz	r0, 8009678 <__strtok_r+0x8>
 8009674:	6810      	ldr	r0, [r2, #0]
 8009676:	b188      	cbz	r0, 800969c <__strtok_r+0x2c>
 8009678:	4604      	mov	r4, r0
 800967a:	4620      	mov	r0, r4
 800967c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009680:	460f      	mov	r7, r1
 8009682:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009686:	b91e      	cbnz	r6, 8009690 <__strtok_r+0x20>
 8009688:	b965      	cbnz	r5, 80096a4 <__strtok_r+0x34>
 800968a:	6015      	str	r5, [r2, #0]
 800968c:	4628      	mov	r0, r5
 800968e:	e005      	b.n	800969c <__strtok_r+0x2c>
 8009690:	42b5      	cmp	r5, r6
 8009692:	d1f6      	bne.n	8009682 <__strtok_r+0x12>
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1f0      	bne.n	800967a <__strtok_r+0xa>
 8009698:	6014      	str	r4, [r2, #0]
 800969a:	7003      	strb	r3, [r0, #0]
 800969c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800969e:	461c      	mov	r4, r3
 80096a0:	e00c      	b.n	80096bc <__strtok_r+0x4c>
 80096a2:	b915      	cbnz	r5, 80096aa <__strtok_r+0x3a>
 80096a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096a8:	460e      	mov	r6, r1
 80096aa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80096ae:	42ab      	cmp	r3, r5
 80096b0:	d1f7      	bne.n	80096a2 <__strtok_r+0x32>
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d0f3      	beq.n	800969e <__strtok_r+0x2e>
 80096b6:	2300      	movs	r3, #0
 80096b8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80096bc:	6014      	str	r4, [r2, #0]
 80096be:	e7ed      	b.n	800969c <__strtok_r+0x2c>

080096c0 <strstr>:
 80096c0:	780a      	ldrb	r2, [r1, #0]
 80096c2:	b570      	push	{r4, r5, r6, lr}
 80096c4:	b96a      	cbnz	r2, 80096e2 <strstr+0x22>
 80096c6:	bd70      	pop	{r4, r5, r6, pc}
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d109      	bne.n	80096e0 <strstr+0x20>
 80096cc:	460c      	mov	r4, r1
 80096ce:	4605      	mov	r5, r0
 80096d0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d0f6      	beq.n	80096c6 <strstr+0x6>
 80096d8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80096dc:	429e      	cmp	r6, r3
 80096de:	d0f7      	beq.n	80096d0 <strstr+0x10>
 80096e0:	3001      	adds	r0, #1
 80096e2:	7803      	ldrb	r3, [r0, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1ef      	bne.n	80096c8 <strstr+0x8>
 80096e8:	4618      	mov	r0, r3
 80096ea:	e7ec      	b.n	80096c6 <strstr+0x6>

080096ec <_localeconv_r>:
 80096ec:	4800      	ldr	r0, [pc, #0]	; (80096f0 <_localeconv_r+0x4>)
 80096ee:	4770      	bx	lr
 80096f0:	20000118 	.word	0x20000118

080096f4 <_close_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	4d06      	ldr	r5, [pc, #24]	; (8009710 <_close_r+0x1c>)
 80096f8:	2300      	movs	r3, #0
 80096fa:	4604      	mov	r4, r0
 80096fc:	4608      	mov	r0, r1
 80096fe:	602b      	str	r3, [r5, #0]
 8009700:	f7f9 fe5d 	bl	80033be <_close>
 8009704:	1c43      	adds	r3, r0, #1
 8009706:	d102      	bne.n	800970e <_close_r+0x1a>
 8009708:	682b      	ldr	r3, [r5, #0]
 800970a:	b103      	cbz	r3, 800970e <_close_r+0x1a>
 800970c:	6023      	str	r3, [r4, #0]
 800970e:	bd38      	pop	{r3, r4, r5, pc}
 8009710:	20000c30 	.word	0x20000c30

08009714 <_lseek_r>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	4d07      	ldr	r5, [pc, #28]	; (8009734 <_lseek_r+0x20>)
 8009718:	4604      	mov	r4, r0
 800971a:	4608      	mov	r0, r1
 800971c:	4611      	mov	r1, r2
 800971e:	2200      	movs	r2, #0
 8009720:	602a      	str	r2, [r5, #0]
 8009722:	461a      	mov	r2, r3
 8009724:	f7f9 fe72 	bl	800340c <_lseek>
 8009728:	1c43      	adds	r3, r0, #1
 800972a:	d102      	bne.n	8009732 <_lseek_r+0x1e>
 800972c:	682b      	ldr	r3, [r5, #0]
 800972e:	b103      	cbz	r3, 8009732 <_lseek_r+0x1e>
 8009730:	6023      	str	r3, [r4, #0]
 8009732:	bd38      	pop	{r3, r4, r5, pc}
 8009734:	20000c30 	.word	0x20000c30

08009738 <_read_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	4d07      	ldr	r5, [pc, #28]	; (8009758 <_read_r+0x20>)
 800973c:	4604      	mov	r4, r0
 800973e:	4608      	mov	r0, r1
 8009740:	4611      	mov	r1, r2
 8009742:	2200      	movs	r2, #0
 8009744:	602a      	str	r2, [r5, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	f7f9 fe00 	bl	800334c <_read>
 800974c:	1c43      	adds	r3, r0, #1
 800974e:	d102      	bne.n	8009756 <_read_r+0x1e>
 8009750:	682b      	ldr	r3, [r5, #0]
 8009752:	b103      	cbz	r3, 8009756 <_read_r+0x1e>
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	bd38      	pop	{r3, r4, r5, pc}
 8009758:	20000c30 	.word	0x20000c30

0800975c <_sbrk_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	4d06      	ldr	r5, [pc, #24]	; (8009778 <_sbrk_r+0x1c>)
 8009760:	2300      	movs	r3, #0
 8009762:	4604      	mov	r4, r0
 8009764:	4608      	mov	r0, r1
 8009766:	602b      	str	r3, [r5, #0]
 8009768:	f7f9 fe5e 	bl	8003428 <_sbrk>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_sbrk_r+0x1a>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_sbrk_r+0x1a>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	20000c30 	.word	0x20000c30

0800977c <_write_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4d07      	ldr	r5, [pc, #28]	; (800979c <_write_r+0x20>)
 8009780:	4604      	mov	r4, r0
 8009782:	4608      	mov	r0, r1
 8009784:	4611      	mov	r1, r2
 8009786:	2200      	movs	r2, #0
 8009788:	602a      	str	r2, [r5, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	f7f9 fdfb 	bl	8003386 <_write>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d102      	bne.n	800979a <_write_r+0x1e>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	b103      	cbz	r3, 800979a <_write_r+0x1e>
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	bd38      	pop	{r3, r4, r5, pc}
 800979c:	20000c30 	.word	0x20000c30

080097a0 <__errno>:
 80097a0:	4b01      	ldr	r3, [pc, #4]	; (80097a8 <__errno+0x8>)
 80097a2:	6818      	ldr	r0, [r3, #0]
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	200001e0 	.word	0x200001e0

080097ac <__libc_init_array>:
 80097ac:	b570      	push	{r4, r5, r6, lr}
 80097ae:	4d0d      	ldr	r5, [pc, #52]	; (80097e4 <__libc_init_array+0x38>)
 80097b0:	4c0d      	ldr	r4, [pc, #52]	; (80097e8 <__libc_init_array+0x3c>)
 80097b2:	1b64      	subs	r4, r4, r5
 80097b4:	10a4      	asrs	r4, r4, #2
 80097b6:	2600      	movs	r6, #0
 80097b8:	42a6      	cmp	r6, r4
 80097ba:	d109      	bne.n	80097d0 <__libc_init_array+0x24>
 80097bc:	4d0b      	ldr	r5, [pc, #44]	; (80097ec <__libc_init_array+0x40>)
 80097be:	4c0c      	ldr	r4, [pc, #48]	; (80097f0 <__libc_init_array+0x44>)
 80097c0:	f002 fcf2 	bl	800c1a8 <_init>
 80097c4:	1b64      	subs	r4, r4, r5
 80097c6:	10a4      	asrs	r4, r4, #2
 80097c8:	2600      	movs	r6, #0
 80097ca:	42a6      	cmp	r6, r4
 80097cc:	d105      	bne.n	80097da <__libc_init_array+0x2e>
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
 80097d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80097d4:	4798      	blx	r3
 80097d6:	3601      	adds	r6, #1
 80097d8:	e7ee      	b.n	80097b8 <__libc_init_array+0xc>
 80097da:	f855 3b04 	ldr.w	r3, [r5], #4
 80097de:	4798      	blx	r3
 80097e0:	3601      	adds	r6, #1
 80097e2:	e7f2      	b.n	80097ca <__libc_init_array+0x1e>
 80097e4:	0800dd20 	.word	0x0800dd20
 80097e8:	0800dd20 	.word	0x0800dd20
 80097ec:	0800dd20 	.word	0x0800dd20
 80097f0:	0800dd24 	.word	0x0800dd24

080097f4 <__retarget_lock_init_recursive>:
 80097f4:	4770      	bx	lr

080097f6 <__retarget_lock_acquire_recursive>:
 80097f6:	4770      	bx	lr

080097f8 <__retarget_lock_release_recursive>:
 80097f8:	4770      	bx	lr

080097fa <strcpy>:
 80097fa:	4603      	mov	r3, r0
 80097fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009800:	f803 2b01 	strb.w	r2, [r3], #1
 8009804:	2a00      	cmp	r2, #0
 8009806:	d1f9      	bne.n	80097fc <strcpy+0x2>
 8009808:	4770      	bx	lr

0800980a <memcpy>:
 800980a:	440a      	add	r2, r1
 800980c:	4291      	cmp	r1, r2
 800980e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009812:	d100      	bne.n	8009816 <memcpy+0xc>
 8009814:	4770      	bx	lr
 8009816:	b510      	push	{r4, lr}
 8009818:	f811 4b01 	ldrb.w	r4, [r1], #1
 800981c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009820:	4291      	cmp	r1, r2
 8009822:	d1f9      	bne.n	8009818 <memcpy+0xe>
 8009824:	bd10      	pop	{r4, pc}
	...

08009828 <nan>:
 8009828:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009830 <nan+0x8>
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	00000000 	.word	0x00000000
 8009834:	7ff80000 	.word	0x7ff80000

08009838 <nanf>:
 8009838:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009840 <nanf+0x8>
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	7fc00000 	.word	0x7fc00000

08009844 <__assert_func>:
 8009844:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009846:	4614      	mov	r4, r2
 8009848:	461a      	mov	r2, r3
 800984a:	4b09      	ldr	r3, [pc, #36]	; (8009870 <__assert_func+0x2c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4605      	mov	r5, r0
 8009850:	68d8      	ldr	r0, [r3, #12]
 8009852:	b14c      	cbz	r4, 8009868 <__assert_func+0x24>
 8009854:	4b07      	ldr	r3, [pc, #28]	; (8009874 <__assert_func+0x30>)
 8009856:	9100      	str	r1, [sp, #0]
 8009858:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800985c:	4906      	ldr	r1, [pc, #24]	; (8009878 <__assert_func+0x34>)
 800985e:	462b      	mov	r3, r5
 8009860:	f002 f8fe 	bl	800ba60 <fiprintf>
 8009864:	f002 f928 	bl	800bab8 <abort>
 8009868:	4b04      	ldr	r3, [pc, #16]	; (800987c <__assert_func+0x38>)
 800986a:	461c      	mov	r4, r3
 800986c:	e7f3      	b.n	8009856 <__assert_func+0x12>
 800986e:	bf00      	nop
 8009870:	200001e0 	.word	0x200001e0
 8009874:	0800da9b 	.word	0x0800da9b
 8009878:	0800daa8 	.word	0x0800daa8
 800987c:	0800dad6 	.word	0x0800dad6

08009880 <quorem>:
 8009880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009884:	6903      	ldr	r3, [r0, #16]
 8009886:	690c      	ldr	r4, [r1, #16]
 8009888:	42a3      	cmp	r3, r4
 800988a:	4607      	mov	r7, r0
 800988c:	db7e      	blt.n	800998c <quorem+0x10c>
 800988e:	3c01      	subs	r4, #1
 8009890:	f101 0814 	add.w	r8, r1, #20
 8009894:	f100 0514 	add.w	r5, r0, #20
 8009898:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800989c:	9301      	str	r3, [sp, #4]
 800989e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098a6:	3301      	adds	r3, #1
 80098a8:	429a      	cmp	r2, r3
 80098aa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80098ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80098b6:	d331      	bcc.n	800991c <quorem+0x9c>
 80098b8:	f04f 0e00 	mov.w	lr, #0
 80098bc:	4640      	mov	r0, r8
 80098be:	46ac      	mov	ip, r5
 80098c0:	46f2      	mov	sl, lr
 80098c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80098c6:	b293      	uxth	r3, r2
 80098c8:	fb06 e303 	mla	r3, r6, r3, lr
 80098cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098d0:	0c1a      	lsrs	r2, r3, #16
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	ebaa 0303 	sub.w	r3, sl, r3
 80098d8:	f8dc a000 	ldr.w	sl, [ip]
 80098dc:	fa13 f38a 	uxtah	r3, r3, sl
 80098e0:	fb06 220e 	mla	r2, r6, lr, r2
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	9b00      	ldr	r3, [sp, #0]
 80098e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098ec:	b292      	uxth	r2, r2
 80098ee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80098f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098f6:	f8bd 3000 	ldrh.w	r3, [sp]
 80098fa:	4581      	cmp	r9, r0
 80098fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009900:	f84c 3b04 	str.w	r3, [ip], #4
 8009904:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009908:	d2db      	bcs.n	80098c2 <quorem+0x42>
 800990a:	f855 300b 	ldr.w	r3, [r5, fp]
 800990e:	b92b      	cbnz	r3, 800991c <quorem+0x9c>
 8009910:	9b01      	ldr	r3, [sp, #4]
 8009912:	3b04      	subs	r3, #4
 8009914:	429d      	cmp	r5, r3
 8009916:	461a      	mov	r2, r3
 8009918:	d32c      	bcc.n	8009974 <quorem+0xf4>
 800991a:	613c      	str	r4, [r7, #16]
 800991c:	4638      	mov	r0, r7
 800991e:	f001 fca5 	bl	800b26c <__mcmp>
 8009922:	2800      	cmp	r0, #0
 8009924:	db22      	blt.n	800996c <quorem+0xec>
 8009926:	3601      	adds	r6, #1
 8009928:	4629      	mov	r1, r5
 800992a:	2000      	movs	r0, #0
 800992c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009930:	f8d1 c000 	ldr.w	ip, [r1]
 8009934:	b293      	uxth	r3, r2
 8009936:	1ac3      	subs	r3, r0, r3
 8009938:	0c12      	lsrs	r2, r2, #16
 800993a:	fa13 f38c 	uxtah	r3, r3, ip
 800993e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009942:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009946:	b29b      	uxth	r3, r3
 8009948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800994c:	45c1      	cmp	r9, r8
 800994e:	f841 3b04 	str.w	r3, [r1], #4
 8009952:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009956:	d2e9      	bcs.n	800992c <quorem+0xac>
 8009958:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800995c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009960:	b922      	cbnz	r2, 800996c <quorem+0xec>
 8009962:	3b04      	subs	r3, #4
 8009964:	429d      	cmp	r5, r3
 8009966:	461a      	mov	r2, r3
 8009968:	d30a      	bcc.n	8009980 <quorem+0x100>
 800996a:	613c      	str	r4, [r7, #16]
 800996c:	4630      	mov	r0, r6
 800996e:	b003      	add	sp, #12
 8009970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009974:	6812      	ldr	r2, [r2, #0]
 8009976:	3b04      	subs	r3, #4
 8009978:	2a00      	cmp	r2, #0
 800997a:	d1ce      	bne.n	800991a <quorem+0x9a>
 800997c:	3c01      	subs	r4, #1
 800997e:	e7c9      	b.n	8009914 <quorem+0x94>
 8009980:	6812      	ldr	r2, [r2, #0]
 8009982:	3b04      	subs	r3, #4
 8009984:	2a00      	cmp	r2, #0
 8009986:	d1f0      	bne.n	800996a <quorem+0xea>
 8009988:	3c01      	subs	r4, #1
 800998a:	e7eb      	b.n	8009964 <quorem+0xe4>
 800998c:	2000      	movs	r0, #0
 800998e:	e7ee      	b.n	800996e <quorem+0xee>

08009990 <_dtoa_r>:
 8009990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009994:	ed2d 8b04 	vpush	{d8-d9}
 8009998:	69c5      	ldr	r5, [r0, #28]
 800999a:	b093      	sub	sp, #76	; 0x4c
 800999c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80099a0:	ec57 6b10 	vmov	r6, r7, d0
 80099a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80099a8:	9107      	str	r1, [sp, #28]
 80099aa:	4604      	mov	r4, r0
 80099ac:	920a      	str	r2, [sp, #40]	; 0x28
 80099ae:	930d      	str	r3, [sp, #52]	; 0x34
 80099b0:	b975      	cbnz	r5, 80099d0 <_dtoa_r+0x40>
 80099b2:	2010      	movs	r0, #16
 80099b4:	f7fd fe7a 	bl	80076ac <malloc>
 80099b8:	4602      	mov	r2, r0
 80099ba:	61e0      	str	r0, [r4, #28]
 80099bc:	b920      	cbnz	r0, 80099c8 <_dtoa_r+0x38>
 80099be:	4bae      	ldr	r3, [pc, #696]	; (8009c78 <_dtoa_r+0x2e8>)
 80099c0:	21ef      	movs	r1, #239	; 0xef
 80099c2:	48ae      	ldr	r0, [pc, #696]	; (8009c7c <_dtoa_r+0x2ec>)
 80099c4:	f7ff ff3e 	bl	8009844 <__assert_func>
 80099c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80099cc:	6005      	str	r5, [r0, #0]
 80099ce:	60c5      	str	r5, [r0, #12]
 80099d0:	69e3      	ldr	r3, [r4, #28]
 80099d2:	6819      	ldr	r1, [r3, #0]
 80099d4:	b151      	cbz	r1, 80099ec <_dtoa_r+0x5c>
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	604a      	str	r2, [r1, #4]
 80099da:	2301      	movs	r3, #1
 80099dc:	4093      	lsls	r3, r2
 80099de:	608b      	str	r3, [r1, #8]
 80099e0:	4620      	mov	r0, r4
 80099e2:	f001 f9bd 	bl	800ad60 <_Bfree>
 80099e6:	69e3      	ldr	r3, [r4, #28]
 80099e8:	2200      	movs	r2, #0
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	1e3b      	subs	r3, r7, #0
 80099ee:	bfbb      	ittet	lt
 80099f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80099f4:	9303      	strlt	r3, [sp, #12]
 80099f6:	2300      	movge	r3, #0
 80099f8:	2201      	movlt	r2, #1
 80099fa:	bfac      	ite	ge
 80099fc:	f8c8 3000 	strge.w	r3, [r8]
 8009a00:	f8c8 2000 	strlt.w	r2, [r8]
 8009a04:	4b9e      	ldr	r3, [pc, #632]	; (8009c80 <_dtoa_r+0x2f0>)
 8009a06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009a0a:	ea33 0308 	bics.w	r3, r3, r8
 8009a0e:	d11b      	bne.n	8009a48 <_dtoa_r+0xb8>
 8009a10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a12:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a16:	6013      	str	r3, [r2, #0]
 8009a18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009a1c:	4333      	orrs	r3, r6
 8009a1e:	f000 8593 	beq.w	800a548 <_dtoa_r+0xbb8>
 8009a22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a24:	b963      	cbnz	r3, 8009a40 <_dtoa_r+0xb0>
 8009a26:	4b97      	ldr	r3, [pc, #604]	; (8009c84 <_dtoa_r+0x2f4>)
 8009a28:	e027      	b.n	8009a7a <_dtoa_r+0xea>
 8009a2a:	4b97      	ldr	r3, [pc, #604]	; (8009c88 <_dtoa_r+0x2f8>)
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	3308      	adds	r3, #8
 8009a30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	9800      	ldr	r0, [sp, #0]
 8009a36:	b013      	add	sp, #76	; 0x4c
 8009a38:	ecbd 8b04 	vpop	{d8-d9}
 8009a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a40:	4b90      	ldr	r3, [pc, #576]	; (8009c84 <_dtoa_r+0x2f4>)
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	3303      	adds	r3, #3
 8009a46:	e7f3      	b.n	8009a30 <_dtoa_r+0xa0>
 8009a48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	ec51 0b17 	vmov	r0, r1, d7
 8009a52:	eeb0 8a47 	vmov.f32	s16, s14
 8009a56:	eef0 8a67 	vmov.f32	s17, s15
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	f7f7 f834 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a60:	4681      	mov	r9, r0
 8009a62:	b160      	cbz	r0, 8009a7e <_dtoa_r+0xee>
 8009a64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a66:	2301      	movs	r3, #1
 8009a68:	6013      	str	r3, [r2, #0]
 8009a6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 8568 	beq.w	800a542 <_dtoa_r+0xbb2>
 8009a72:	4b86      	ldr	r3, [pc, #536]	; (8009c8c <_dtoa_r+0x2fc>)
 8009a74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a76:	6013      	str	r3, [r2, #0]
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	e7da      	b.n	8009a34 <_dtoa_r+0xa4>
 8009a7e:	aa10      	add	r2, sp, #64	; 0x40
 8009a80:	a911      	add	r1, sp, #68	; 0x44
 8009a82:	4620      	mov	r0, r4
 8009a84:	eeb0 0a48 	vmov.f32	s0, s16
 8009a88:	eef0 0a68 	vmov.f32	s1, s17
 8009a8c:	f001 fd04 	bl	800b498 <__d2b>
 8009a90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009a94:	4682      	mov	sl, r0
 8009a96:	2d00      	cmp	r5, #0
 8009a98:	d07f      	beq.n	8009b9a <_dtoa_r+0x20a>
 8009a9a:	ee18 3a90 	vmov	r3, s17
 8009a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009aa2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009aa6:	ec51 0b18 	vmov	r0, r1, d8
 8009aaa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009aae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009ab2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	2200      	movs	r2, #0
 8009aba:	4b75      	ldr	r3, [pc, #468]	; (8009c90 <_dtoa_r+0x300>)
 8009abc:	f7f6 fbe4 	bl	8000288 <__aeabi_dsub>
 8009ac0:	a367      	add	r3, pc, #412	; (adr r3, 8009c60 <_dtoa_r+0x2d0>)
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	f7f6 fd97 	bl	80005f8 <__aeabi_dmul>
 8009aca:	a367      	add	r3, pc, #412	; (adr r3, 8009c68 <_dtoa_r+0x2d8>)
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	f7f6 fbdc 	bl	800028c <__adddf3>
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	460f      	mov	r7, r1
 8009ada:	f7f6 fd23 	bl	8000524 <__aeabi_i2d>
 8009ade:	a364      	add	r3, pc, #400	; (adr r3, 8009c70 <_dtoa_r+0x2e0>)
 8009ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae4:	f7f6 fd88 	bl	80005f8 <__aeabi_dmul>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	4630      	mov	r0, r6
 8009aee:	4639      	mov	r1, r7
 8009af0:	f7f6 fbcc 	bl	800028c <__adddf3>
 8009af4:	4606      	mov	r6, r0
 8009af6:	460f      	mov	r7, r1
 8009af8:	f7f7 f82e 	bl	8000b58 <__aeabi_d2iz>
 8009afc:	2200      	movs	r2, #0
 8009afe:	4683      	mov	fp, r0
 8009b00:	2300      	movs	r3, #0
 8009b02:	4630      	mov	r0, r6
 8009b04:	4639      	mov	r1, r7
 8009b06:	f7f6 ffe9 	bl	8000adc <__aeabi_dcmplt>
 8009b0a:	b148      	cbz	r0, 8009b20 <_dtoa_r+0x190>
 8009b0c:	4658      	mov	r0, fp
 8009b0e:	f7f6 fd09 	bl	8000524 <__aeabi_i2d>
 8009b12:	4632      	mov	r2, r6
 8009b14:	463b      	mov	r3, r7
 8009b16:	f7f6 ffd7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b1a:	b908      	cbnz	r0, 8009b20 <_dtoa_r+0x190>
 8009b1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b20:	f1bb 0f16 	cmp.w	fp, #22
 8009b24:	d857      	bhi.n	8009bd6 <_dtoa_r+0x246>
 8009b26:	4b5b      	ldr	r3, [pc, #364]	; (8009c94 <_dtoa_r+0x304>)
 8009b28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	ec51 0b18 	vmov	r0, r1, d8
 8009b34:	f7f6 ffd2 	bl	8000adc <__aeabi_dcmplt>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d04e      	beq.n	8009bda <_dtoa_r+0x24a>
 8009b3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b40:	2300      	movs	r3, #0
 8009b42:	930c      	str	r3, [sp, #48]	; 0x30
 8009b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b46:	1b5b      	subs	r3, r3, r5
 8009b48:	1e5a      	subs	r2, r3, #1
 8009b4a:	bf45      	ittet	mi
 8009b4c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009b50:	9305      	strmi	r3, [sp, #20]
 8009b52:	2300      	movpl	r3, #0
 8009b54:	2300      	movmi	r3, #0
 8009b56:	9206      	str	r2, [sp, #24]
 8009b58:	bf54      	ite	pl
 8009b5a:	9305      	strpl	r3, [sp, #20]
 8009b5c:	9306      	strmi	r3, [sp, #24]
 8009b5e:	f1bb 0f00 	cmp.w	fp, #0
 8009b62:	db3c      	blt.n	8009bde <_dtoa_r+0x24e>
 8009b64:	9b06      	ldr	r3, [sp, #24]
 8009b66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009b6a:	445b      	add	r3, fp
 8009b6c:	9306      	str	r3, [sp, #24]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	9308      	str	r3, [sp, #32]
 8009b72:	9b07      	ldr	r3, [sp, #28]
 8009b74:	2b09      	cmp	r3, #9
 8009b76:	d868      	bhi.n	8009c4a <_dtoa_r+0x2ba>
 8009b78:	2b05      	cmp	r3, #5
 8009b7a:	bfc4      	itt	gt
 8009b7c:	3b04      	subgt	r3, #4
 8009b7e:	9307      	strgt	r3, [sp, #28]
 8009b80:	9b07      	ldr	r3, [sp, #28]
 8009b82:	f1a3 0302 	sub.w	r3, r3, #2
 8009b86:	bfcc      	ite	gt
 8009b88:	2500      	movgt	r5, #0
 8009b8a:	2501      	movle	r5, #1
 8009b8c:	2b03      	cmp	r3, #3
 8009b8e:	f200 8085 	bhi.w	8009c9c <_dtoa_r+0x30c>
 8009b92:	e8df f003 	tbb	[pc, r3]
 8009b96:	3b2e      	.short	0x3b2e
 8009b98:	5839      	.short	0x5839
 8009b9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009b9e:	441d      	add	r5, r3
 8009ba0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009ba4:	2b20      	cmp	r3, #32
 8009ba6:	bfc1      	itttt	gt
 8009ba8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009bac:	fa08 f803 	lslgt.w	r8, r8, r3
 8009bb0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009bb4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009bb8:	bfd6      	itet	le
 8009bba:	f1c3 0320 	rsble	r3, r3, #32
 8009bbe:	ea48 0003 	orrgt.w	r0, r8, r3
 8009bc2:	fa06 f003 	lslle.w	r0, r6, r3
 8009bc6:	f7f6 fc9d 	bl	8000504 <__aeabi_ui2d>
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009bd0:	3d01      	subs	r5, #1
 8009bd2:	920e      	str	r2, [sp, #56]	; 0x38
 8009bd4:	e76f      	b.n	8009ab6 <_dtoa_r+0x126>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e7b3      	b.n	8009b42 <_dtoa_r+0x1b2>
 8009bda:	900c      	str	r0, [sp, #48]	; 0x30
 8009bdc:	e7b2      	b.n	8009b44 <_dtoa_r+0x1b4>
 8009bde:	9b05      	ldr	r3, [sp, #20]
 8009be0:	eba3 030b 	sub.w	r3, r3, fp
 8009be4:	9305      	str	r3, [sp, #20]
 8009be6:	f1cb 0300 	rsb	r3, fp, #0
 8009bea:	9308      	str	r3, [sp, #32]
 8009bec:	2300      	movs	r3, #0
 8009bee:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bf0:	e7bf      	b.n	8009b72 <_dtoa_r+0x1e2>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8009bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	dc52      	bgt.n	8009ca2 <_dtoa_r+0x312>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	9301      	str	r3, [sp, #4]
 8009c00:	9304      	str	r3, [sp, #16]
 8009c02:	461a      	mov	r2, r3
 8009c04:	920a      	str	r2, [sp, #40]	; 0x28
 8009c06:	e00b      	b.n	8009c20 <_dtoa_r+0x290>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e7f3      	b.n	8009bf4 <_dtoa_r+0x264>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c12:	445b      	add	r3, fp
 8009c14:	9301      	str	r3, [sp, #4]
 8009c16:	3301      	adds	r3, #1
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	9304      	str	r3, [sp, #16]
 8009c1c:	bfb8      	it	lt
 8009c1e:	2301      	movlt	r3, #1
 8009c20:	69e0      	ldr	r0, [r4, #28]
 8009c22:	2100      	movs	r1, #0
 8009c24:	2204      	movs	r2, #4
 8009c26:	f102 0614 	add.w	r6, r2, #20
 8009c2a:	429e      	cmp	r6, r3
 8009c2c:	d93d      	bls.n	8009caa <_dtoa_r+0x31a>
 8009c2e:	6041      	str	r1, [r0, #4]
 8009c30:	4620      	mov	r0, r4
 8009c32:	f001 f855 	bl	800ace0 <_Balloc>
 8009c36:	9000      	str	r0, [sp, #0]
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d139      	bne.n	8009cb0 <_dtoa_r+0x320>
 8009c3c:	4b16      	ldr	r3, [pc, #88]	; (8009c98 <_dtoa_r+0x308>)
 8009c3e:	4602      	mov	r2, r0
 8009c40:	f240 11af 	movw	r1, #431	; 0x1af
 8009c44:	e6bd      	b.n	80099c2 <_dtoa_r+0x32>
 8009c46:	2301      	movs	r3, #1
 8009c48:	e7e1      	b.n	8009c0e <_dtoa_r+0x27e>
 8009c4a:	2501      	movs	r5, #1
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	9307      	str	r3, [sp, #28]
 8009c50:	9509      	str	r5, [sp, #36]	; 0x24
 8009c52:	f04f 33ff 	mov.w	r3, #4294967295
 8009c56:	9301      	str	r3, [sp, #4]
 8009c58:	9304      	str	r3, [sp, #16]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	2312      	movs	r3, #18
 8009c5e:	e7d1      	b.n	8009c04 <_dtoa_r+0x274>
 8009c60:	636f4361 	.word	0x636f4361
 8009c64:	3fd287a7 	.word	0x3fd287a7
 8009c68:	8b60c8b3 	.word	0x8b60c8b3
 8009c6c:	3fc68a28 	.word	0x3fc68a28
 8009c70:	509f79fb 	.word	0x509f79fb
 8009c74:	3fd34413 	.word	0x3fd34413
 8009c78:	0800da22 	.word	0x0800da22
 8009c7c:	0800dae4 	.word	0x0800dae4
 8009c80:	7ff00000 	.word	0x7ff00000
 8009c84:	0800dae0 	.word	0x0800dae0
 8009c88:	0800dad7 	.word	0x0800dad7
 8009c8c:	0800d9fa 	.word	0x0800d9fa
 8009c90:	3ff80000 	.word	0x3ff80000
 8009c94:	0800dc30 	.word	0x0800dc30
 8009c98:	0800db3c 	.word	0x0800db3c
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca0:	e7d7      	b.n	8009c52 <_dtoa_r+0x2c2>
 8009ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ca4:	9301      	str	r3, [sp, #4]
 8009ca6:	9304      	str	r3, [sp, #16]
 8009ca8:	e7ba      	b.n	8009c20 <_dtoa_r+0x290>
 8009caa:	3101      	adds	r1, #1
 8009cac:	0052      	lsls	r2, r2, #1
 8009cae:	e7ba      	b.n	8009c26 <_dtoa_r+0x296>
 8009cb0:	69e3      	ldr	r3, [r4, #28]
 8009cb2:	9a00      	ldr	r2, [sp, #0]
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	9b04      	ldr	r3, [sp, #16]
 8009cb8:	2b0e      	cmp	r3, #14
 8009cba:	f200 80a8 	bhi.w	8009e0e <_dtoa_r+0x47e>
 8009cbe:	2d00      	cmp	r5, #0
 8009cc0:	f000 80a5 	beq.w	8009e0e <_dtoa_r+0x47e>
 8009cc4:	f1bb 0f00 	cmp.w	fp, #0
 8009cc8:	dd38      	ble.n	8009d3c <_dtoa_r+0x3ac>
 8009cca:	4bc0      	ldr	r3, [pc, #768]	; (8009fcc <_dtoa_r+0x63c>)
 8009ccc:	f00b 020f 	and.w	r2, fp, #15
 8009cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cd4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009cd8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009cdc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009ce0:	d019      	beq.n	8009d16 <_dtoa_r+0x386>
 8009ce2:	4bbb      	ldr	r3, [pc, #748]	; (8009fd0 <_dtoa_r+0x640>)
 8009ce4:	ec51 0b18 	vmov	r0, r1, d8
 8009ce8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cec:	f7f6 fdae 	bl	800084c <__aeabi_ddiv>
 8009cf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cf4:	f008 080f 	and.w	r8, r8, #15
 8009cf8:	2503      	movs	r5, #3
 8009cfa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009fd0 <_dtoa_r+0x640>
 8009cfe:	f1b8 0f00 	cmp.w	r8, #0
 8009d02:	d10a      	bne.n	8009d1a <_dtoa_r+0x38a>
 8009d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d08:	4632      	mov	r2, r6
 8009d0a:	463b      	mov	r3, r7
 8009d0c:	f7f6 fd9e 	bl	800084c <__aeabi_ddiv>
 8009d10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d14:	e02b      	b.n	8009d6e <_dtoa_r+0x3de>
 8009d16:	2502      	movs	r5, #2
 8009d18:	e7ef      	b.n	8009cfa <_dtoa_r+0x36a>
 8009d1a:	f018 0f01 	tst.w	r8, #1
 8009d1e:	d008      	beq.n	8009d32 <_dtoa_r+0x3a2>
 8009d20:	4630      	mov	r0, r6
 8009d22:	4639      	mov	r1, r7
 8009d24:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009d28:	f7f6 fc66 	bl	80005f8 <__aeabi_dmul>
 8009d2c:	3501      	adds	r5, #1
 8009d2e:	4606      	mov	r6, r0
 8009d30:	460f      	mov	r7, r1
 8009d32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009d36:	f109 0908 	add.w	r9, r9, #8
 8009d3a:	e7e0      	b.n	8009cfe <_dtoa_r+0x36e>
 8009d3c:	f000 809f 	beq.w	8009e7e <_dtoa_r+0x4ee>
 8009d40:	f1cb 0600 	rsb	r6, fp, #0
 8009d44:	4ba1      	ldr	r3, [pc, #644]	; (8009fcc <_dtoa_r+0x63c>)
 8009d46:	4fa2      	ldr	r7, [pc, #648]	; (8009fd0 <_dtoa_r+0x640>)
 8009d48:	f006 020f 	and.w	r2, r6, #15
 8009d4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d54:	ec51 0b18 	vmov	r0, r1, d8
 8009d58:	f7f6 fc4e 	bl	80005f8 <__aeabi_dmul>
 8009d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d60:	1136      	asrs	r6, r6, #4
 8009d62:	2300      	movs	r3, #0
 8009d64:	2502      	movs	r5, #2
 8009d66:	2e00      	cmp	r6, #0
 8009d68:	d17e      	bne.n	8009e68 <_dtoa_r+0x4d8>
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1d0      	bne.n	8009d10 <_dtoa_r+0x380>
 8009d6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d70:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 8084 	beq.w	8009e82 <_dtoa_r+0x4f2>
 8009d7a:	4b96      	ldr	r3, [pc, #600]	; (8009fd4 <_dtoa_r+0x644>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	4640      	mov	r0, r8
 8009d80:	4649      	mov	r1, r9
 8009d82:	f7f6 feab 	bl	8000adc <__aeabi_dcmplt>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	d07b      	beq.n	8009e82 <_dtoa_r+0x4f2>
 8009d8a:	9b04      	ldr	r3, [sp, #16]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d078      	beq.n	8009e82 <_dtoa_r+0x4f2>
 8009d90:	9b01      	ldr	r3, [sp, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	dd39      	ble.n	8009e0a <_dtoa_r+0x47a>
 8009d96:	4b90      	ldr	r3, [pc, #576]	; (8009fd8 <_dtoa_r+0x648>)
 8009d98:	2200      	movs	r2, #0
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	4649      	mov	r1, r9
 8009d9e:	f7f6 fc2b 	bl	80005f8 <__aeabi_dmul>
 8009da2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009da6:	9e01      	ldr	r6, [sp, #4]
 8009da8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009dac:	3501      	adds	r5, #1
 8009dae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009db2:	4628      	mov	r0, r5
 8009db4:	f7f6 fbb6 	bl	8000524 <__aeabi_i2d>
 8009db8:	4642      	mov	r2, r8
 8009dba:	464b      	mov	r3, r9
 8009dbc:	f7f6 fc1c 	bl	80005f8 <__aeabi_dmul>
 8009dc0:	4b86      	ldr	r3, [pc, #536]	; (8009fdc <_dtoa_r+0x64c>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f7f6 fa62 	bl	800028c <__adddf3>
 8009dc8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dd0:	9303      	str	r3, [sp, #12]
 8009dd2:	2e00      	cmp	r6, #0
 8009dd4:	d158      	bne.n	8009e88 <_dtoa_r+0x4f8>
 8009dd6:	4b82      	ldr	r3, [pc, #520]	; (8009fe0 <_dtoa_r+0x650>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	4640      	mov	r0, r8
 8009ddc:	4649      	mov	r1, r9
 8009dde:	f7f6 fa53 	bl	8000288 <__aeabi_dsub>
 8009de2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009de6:	4680      	mov	r8, r0
 8009de8:	4689      	mov	r9, r1
 8009dea:	f7f6 fe95 	bl	8000b18 <__aeabi_dcmpgt>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	f040 8296 	bne.w	800a320 <_dtoa_r+0x990>
 8009df4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009df8:	4640      	mov	r0, r8
 8009dfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dfe:	4649      	mov	r1, r9
 8009e00:	f7f6 fe6c 	bl	8000adc <__aeabi_dcmplt>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	f040 8289 	bne.w	800a31c <_dtoa_r+0x98c>
 8009e0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009e0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f2c0 814e 	blt.w	800a0b2 <_dtoa_r+0x722>
 8009e16:	f1bb 0f0e 	cmp.w	fp, #14
 8009e1a:	f300 814a 	bgt.w	800a0b2 <_dtoa_r+0x722>
 8009e1e:	4b6b      	ldr	r3, [pc, #428]	; (8009fcc <_dtoa_r+0x63c>)
 8009e20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f280 80dc 	bge.w	8009fe8 <_dtoa_r+0x658>
 8009e30:	9b04      	ldr	r3, [sp, #16]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f300 80d8 	bgt.w	8009fe8 <_dtoa_r+0x658>
 8009e38:	f040 826f 	bne.w	800a31a <_dtoa_r+0x98a>
 8009e3c:	4b68      	ldr	r3, [pc, #416]	; (8009fe0 <_dtoa_r+0x650>)
 8009e3e:	2200      	movs	r2, #0
 8009e40:	4640      	mov	r0, r8
 8009e42:	4649      	mov	r1, r9
 8009e44:	f7f6 fbd8 	bl	80005f8 <__aeabi_dmul>
 8009e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e4c:	f7f6 fe5a 	bl	8000b04 <__aeabi_dcmpge>
 8009e50:	9e04      	ldr	r6, [sp, #16]
 8009e52:	4637      	mov	r7, r6
 8009e54:	2800      	cmp	r0, #0
 8009e56:	f040 8245 	bne.w	800a2e4 <_dtoa_r+0x954>
 8009e5a:	9d00      	ldr	r5, [sp, #0]
 8009e5c:	2331      	movs	r3, #49	; 0x31
 8009e5e:	f805 3b01 	strb.w	r3, [r5], #1
 8009e62:	f10b 0b01 	add.w	fp, fp, #1
 8009e66:	e241      	b.n	800a2ec <_dtoa_r+0x95c>
 8009e68:	07f2      	lsls	r2, r6, #31
 8009e6a:	d505      	bpl.n	8009e78 <_dtoa_r+0x4e8>
 8009e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e70:	f7f6 fbc2 	bl	80005f8 <__aeabi_dmul>
 8009e74:	3501      	adds	r5, #1
 8009e76:	2301      	movs	r3, #1
 8009e78:	1076      	asrs	r6, r6, #1
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	e773      	b.n	8009d66 <_dtoa_r+0x3d6>
 8009e7e:	2502      	movs	r5, #2
 8009e80:	e775      	b.n	8009d6e <_dtoa_r+0x3de>
 8009e82:	9e04      	ldr	r6, [sp, #16]
 8009e84:	465f      	mov	r7, fp
 8009e86:	e792      	b.n	8009dae <_dtoa_r+0x41e>
 8009e88:	9900      	ldr	r1, [sp, #0]
 8009e8a:	4b50      	ldr	r3, [pc, #320]	; (8009fcc <_dtoa_r+0x63c>)
 8009e8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e90:	4431      	add	r1, r6
 8009e92:	9102      	str	r1, [sp, #8]
 8009e94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e96:	eeb0 9a47 	vmov.f32	s18, s14
 8009e9a:	eef0 9a67 	vmov.f32	s19, s15
 8009e9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ea2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ea6:	2900      	cmp	r1, #0
 8009ea8:	d044      	beq.n	8009f34 <_dtoa_r+0x5a4>
 8009eaa:	494e      	ldr	r1, [pc, #312]	; (8009fe4 <_dtoa_r+0x654>)
 8009eac:	2000      	movs	r0, #0
 8009eae:	f7f6 fccd 	bl	800084c <__aeabi_ddiv>
 8009eb2:	ec53 2b19 	vmov	r2, r3, d9
 8009eb6:	f7f6 f9e7 	bl	8000288 <__aeabi_dsub>
 8009eba:	9d00      	ldr	r5, [sp, #0]
 8009ebc:	ec41 0b19 	vmov	d9, r0, r1
 8009ec0:	4649      	mov	r1, r9
 8009ec2:	4640      	mov	r0, r8
 8009ec4:	f7f6 fe48 	bl	8000b58 <__aeabi_d2iz>
 8009ec8:	4606      	mov	r6, r0
 8009eca:	f7f6 fb2b 	bl	8000524 <__aeabi_i2d>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	4640      	mov	r0, r8
 8009ed4:	4649      	mov	r1, r9
 8009ed6:	f7f6 f9d7 	bl	8000288 <__aeabi_dsub>
 8009eda:	3630      	adds	r6, #48	; 0x30
 8009edc:	f805 6b01 	strb.w	r6, [r5], #1
 8009ee0:	ec53 2b19 	vmov	r2, r3, d9
 8009ee4:	4680      	mov	r8, r0
 8009ee6:	4689      	mov	r9, r1
 8009ee8:	f7f6 fdf8 	bl	8000adc <__aeabi_dcmplt>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d164      	bne.n	8009fba <_dtoa_r+0x62a>
 8009ef0:	4642      	mov	r2, r8
 8009ef2:	464b      	mov	r3, r9
 8009ef4:	4937      	ldr	r1, [pc, #220]	; (8009fd4 <_dtoa_r+0x644>)
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	f7f6 f9c6 	bl	8000288 <__aeabi_dsub>
 8009efc:	ec53 2b19 	vmov	r2, r3, d9
 8009f00:	f7f6 fdec 	bl	8000adc <__aeabi_dcmplt>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	f040 80b6 	bne.w	800a076 <_dtoa_r+0x6e6>
 8009f0a:	9b02      	ldr	r3, [sp, #8]
 8009f0c:	429d      	cmp	r5, r3
 8009f0e:	f43f af7c 	beq.w	8009e0a <_dtoa_r+0x47a>
 8009f12:	4b31      	ldr	r3, [pc, #196]	; (8009fd8 <_dtoa_r+0x648>)
 8009f14:	ec51 0b19 	vmov	r0, r1, d9
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f7f6 fb6d 	bl	80005f8 <__aeabi_dmul>
 8009f1e:	4b2e      	ldr	r3, [pc, #184]	; (8009fd8 <_dtoa_r+0x648>)
 8009f20:	ec41 0b19 	vmov	d9, r0, r1
 8009f24:	2200      	movs	r2, #0
 8009f26:	4640      	mov	r0, r8
 8009f28:	4649      	mov	r1, r9
 8009f2a:	f7f6 fb65 	bl	80005f8 <__aeabi_dmul>
 8009f2e:	4680      	mov	r8, r0
 8009f30:	4689      	mov	r9, r1
 8009f32:	e7c5      	b.n	8009ec0 <_dtoa_r+0x530>
 8009f34:	ec51 0b17 	vmov	r0, r1, d7
 8009f38:	f7f6 fb5e 	bl	80005f8 <__aeabi_dmul>
 8009f3c:	9b02      	ldr	r3, [sp, #8]
 8009f3e:	9d00      	ldr	r5, [sp, #0]
 8009f40:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f42:	ec41 0b19 	vmov	d9, r0, r1
 8009f46:	4649      	mov	r1, r9
 8009f48:	4640      	mov	r0, r8
 8009f4a:	f7f6 fe05 	bl	8000b58 <__aeabi_d2iz>
 8009f4e:	4606      	mov	r6, r0
 8009f50:	f7f6 fae8 	bl	8000524 <__aeabi_i2d>
 8009f54:	3630      	adds	r6, #48	; 0x30
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	4640      	mov	r0, r8
 8009f5c:	4649      	mov	r1, r9
 8009f5e:	f7f6 f993 	bl	8000288 <__aeabi_dsub>
 8009f62:	f805 6b01 	strb.w	r6, [r5], #1
 8009f66:	9b02      	ldr	r3, [sp, #8]
 8009f68:	429d      	cmp	r5, r3
 8009f6a:	4680      	mov	r8, r0
 8009f6c:	4689      	mov	r9, r1
 8009f6e:	f04f 0200 	mov.w	r2, #0
 8009f72:	d124      	bne.n	8009fbe <_dtoa_r+0x62e>
 8009f74:	4b1b      	ldr	r3, [pc, #108]	; (8009fe4 <_dtoa_r+0x654>)
 8009f76:	ec51 0b19 	vmov	r0, r1, d9
 8009f7a:	f7f6 f987 	bl	800028c <__adddf3>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	460b      	mov	r3, r1
 8009f82:	4640      	mov	r0, r8
 8009f84:	4649      	mov	r1, r9
 8009f86:	f7f6 fdc7 	bl	8000b18 <__aeabi_dcmpgt>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d173      	bne.n	800a076 <_dtoa_r+0x6e6>
 8009f8e:	ec53 2b19 	vmov	r2, r3, d9
 8009f92:	4914      	ldr	r1, [pc, #80]	; (8009fe4 <_dtoa_r+0x654>)
 8009f94:	2000      	movs	r0, #0
 8009f96:	f7f6 f977 	bl	8000288 <__aeabi_dsub>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	4649      	mov	r1, r9
 8009fa2:	f7f6 fd9b 	bl	8000adc <__aeabi_dcmplt>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	f43f af2f 	beq.w	8009e0a <_dtoa_r+0x47a>
 8009fac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009fae:	1e6b      	subs	r3, r5, #1
 8009fb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009fb6:	2b30      	cmp	r3, #48	; 0x30
 8009fb8:	d0f8      	beq.n	8009fac <_dtoa_r+0x61c>
 8009fba:	46bb      	mov	fp, r7
 8009fbc:	e04a      	b.n	800a054 <_dtoa_r+0x6c4>
 8009fbe:	4b06      	ldr	r3, [pc, #24]	; (8009fd8 <_dtoa_r+0x648>)
 8009fc0:	f7f6 fb1a 	bl	80005f8 <__aeabi_dmul>
 8009fc4:	4680      	mov	r8, r0
 8009fc6:	4689      	mov	r9, r1
 8009fc8:	e7bd      	b.n	8009f46 <_dtoa_r+0x5b6>
 8009fca:	bf00      	nop
 8009fcc:	0800dc30 	.word	0x0800dc30
 8009fd0:	0800dc08 	.word	0x0800dc08
 8009fd4:	3ff00000 	.word	0x3ff00000
 8009fd8:	40240000 	.word	0x40240000
 8009fdc:	401c0000 	.word	0x401c0000
 8009fe0:	40140000 	.word	0x40140000
 8009fe4:	3fe00000 	.word	0x3fe00000
 8009fe8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009fec:	9d00      	ldr	r5, [sp, #0]
 8009fee:	4642      	mov	r2, r8
 8009ff0:	464b      	mov	r3, r9
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	4639      	mov	r1, r7
 8009ff6:	f7f6 fc29 	bl	800084c <__aeabi_ddiv>
 8009ffa:	f7f6 fdad 	bl	8000b58 <__aeabi_d2iz>
 8009ffe:	9001      	str	r0, [sp, #4]
 800a000:	f7f6 fa90 	bl	8000524 <__aeabi_i2d>
 800a004:	4642      	mov	r2, r8
 800a006:	464b      	mov	r3, r9
 800a008:	f7f6 faf6 	bl	80005f8 <__aeabi_dmul>
 800a00c:	4602      	mov	r2, r0
 800a00e:	460b      	mov	r3, r1
 800a010:	4630      	mov	r0, r6
 800a012:	4639      	mov	r1, r7
 800a014:	f7f6 f938 	bl	8000288 <__aeabi_dsub>
 800a018:	9e01      	ldr	r6, [sp, #4]
 800a01a:	9f04      	ldr	r7, [sp, #16]
 800a01c:	3630      	adds	r6, #48	; 0x30
 800a01e:	f805 6b01 	strb.w	r6, [r5], #1
 800a022:	9e00      	ldr	r6, [sp, #0]
 800a024:	1bae      	subs	r6, r5, r6
 800a026:	42b7      	cmp	r7, r6
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	d134      	bne.n	800a098 <_dtoa_r+0x708>
 800a02e:	f7f6 f92d 	bl	800028c <__adddf3>
 800a032:	4642      	mov	r2, r8
 800a034:	464b      	mov	r3, r9
 800a036:	4606      	mov	r6, r0
 800a038:	460f      	mov	r7, r1
 800a03a:	f7f6 fd6d 	bl	8000b18 <__aeabi_dcmpgt>
 800a03e:	b9c8      	cbnz	r0, 800a074 <_dtoa_r+0x6e4>
 800a040:	4642      	mov	r2, r8
 800a042:	464b      	mov	r3, r9
 800a044:	4630      	mov	r0, r6
 800a046:	4639      	mov	r1, r7
 800a048:	f7f6 fd3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a04c:	b110      	cbz	r0, 800a054 <_dtoa_r+0x6c4>
 800a04e:	9b01      	ldr	r3, [sp, #4]
 800a050:	07db      	lsls	r3, r3, #31
 800a052:	d40f      	bmi.n	800a074 <_dtoa_r+0x6e4>
 800a054:	4651      	mov	r1, sl
 800a056:	4620      	mov	r0, r4
 800a058:	f000 fe82 	bl	800ad60 <_Bfree>
 800a05c:	2300      	movs	r3, #0
 800a05e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a060:	702b      	strb	r3, [r5, #0]
 800a062:	f10b 0301 	add.w	r3, fp, #1
 800a066:	6013      	str	r3, [r2, #0]
 800a068:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f43f ace2 	beq.w	8009a34 <_dtoa_r+0xa4>
 800a070:	601d      	str	r5, [r3, #0]
 800a072:	e4df      	b.n	8009a34 <_dtoa_r+0xa4>
 800a074:	465f      	mov	r7, fp
 800a076:	462b      	mov	r3, r5
 800a078:	461d      	mov	r5, r3
 800a07a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a07e:	2a39      	cmp	r2, #57	; 0x39
 800a080:	d106      	bne.n	800a090 <_dtoa_r+0x700>
 800a082:	9a00      	ldr	r2, [sp, #0]
 800a084:	429a      	cmp	r2, r3
 800a086:	d1f7      	bne.n	800a078 <_dtoa_r+0x6e8>
 800a088:	9900      	ldr	r1, [sp, #0]
 800a08a:	2230      	movs	r2, #48	; 0x30
 800a08c:	3701      	adds	r7, #1
 800a08e:	700a      	strb	r2, [r1, #0]
 800a090:	781a      	ldrb	r2, [r3, #0]
 800a092:	3201      	adds	r2, #1
 800a094:	701a      	strb	r2, [r3, #0]
 800a096:	e790      	b.n	8009fba <_dtoa_r+0x62a>
 800a098:	4ba3      	ldr	r3, [pc, #652]	; (800a328 <_dtoa_r+0x998>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	f7f6 faac 	bl	80005f8 <__aeabi_dmul>
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	4606      	mov	r6, r0
 800a0a6:	460f      	mov	r7, r1
 800a0a8:	f7f6 fd0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d09e      	beq.n	8009fee <_dtoa_r+0x65e>
 800a0b0:	e7d0      	b.n	800a054 <_dtoa_r+0x6c4>
 800a0b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0b4:	2a00      	cmp	r2, #0
 800a0b6:	f000 80ca 	beq.w	800a24e <_dtoa_r+0x8be>
 800a0ba:	9a07      	ldr	r2, [sp, #28]
 800a0bc:	2a01      	cmp	r2, #1
 800a0be:	f300 80ad 	bgt.w	800a21c <_dtoa_r+0x88c>
 800a0c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0c4:	2a00      	cmp	r2, #0
 800a0c6:	f000 80a5 	beq.w	800a214 <_dtoa_r+0x884>
 800a0ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a0ce:	9e08      	ldr	r6, [sp, #32]
 800a0d0:	9d05      	ldr	r5, [sp, #20]
 800a0d2:	9a05      	ldr	r2, [sp, #20]
 800a0d4:	441a      	add	r2, r3
 800a0d6:	9205      	str	r2, [sp, #20]
 800a0d8:	9a06      	ldr	r2, [sp, #24]
 800a0da:	2101      	movs	r1, #1
 800a0dc:	441a      	add	r2, r3
 800a0de:	4620      	mov	r0, r4
 800a0e0:	9206      	str	r2, [sp, #24]
 800a0e2:	f000 ff3d 	bl	800af60 <__i2b>
 800a0e6:	4607      	mov	r7, r0
 800a0e8:	b165      	cbz	r5, 800a104 <_dtoa_r+0x774>
 800a0ea:	9b06      	ldr	r3, [sp, #24]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	dd09      	ble.n	800a104 <_dtoa_r+0x774>
 800a0f0:	42ab      	cmp	r3, r5
 800a0f2:	9a05      	ldr	r2, [sp, #20]
 800a0f4:	bfa8      	it	ge
 800a0f6:	462b      	movge	r3, r5
 800a0f8:	1ad2      	subs	r2, r2, r3
 800a0fa:	9205      	str	r2, [sp, #20]
 800a0fc:	9a06      	ldr	r2, [sp, #24]
 800a0fe:	1aed      	subs	r5, r5, r3
 800a100:	1ad3      	subs	r3, r2, r3
 800a102:	9306      	str	r3, [sp, #24]
 800a104:	9b08      	ldr	r3, [sp, #32]
 800a106:	b1f3      	cbz	r3, 800a146 <_dtoa_r+0x7b6>
 800a108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f000 80a3 	beq.w	800a256 <_dtoa_r+0x8c6>
 800a110:	2e00      	cmp	r6, #0
 800a112:	dd10      	ble.n	800a136 <_dtoa_r+0x7a6>
 800a114:	4639      	mov	r1, r7
 800a116:	4632      	mov	r2, r6
 800a118:	4620      	mov	r0, r4
 800a11a:	f000 ffe1 	bl	800b0e0 <__pow5mult>
 800a11e:	4652      	mov	r2, sl
 800a120:	4601      	mov	r1, r0
 800a122:	4607      	mov	r7, r0
 800a124:	4620      	mov	r0, r4
 800a126:	f000 ff31 	bl	800af8c <__multiply>
 800a12a:	4651      	mov	r1, sl
 800a12c:	4680      	mov	r8, r0
 800a12e:	4620      	mov	r0, r4
 800a130:	f000 fe16 	bl	800ad60 <_Bfree>
 800a134:	46c2      	mov	sl, r8
 800a136:	9b08      	ldr	r3, [sp, #32]
 800a138:	1b9a      	subs	r2, r3, r6
 800a13a:	d004      	beq.n	800a146 <_dtoa_r+0x7b6>
 800a13c:	4651      	mov	r1, sl
 800a13e:	4620      	mov	r0, r4
 800a140:	f000 ffce 	bl	800b0e0 <__pow5mult>
 800a144:	4682      	mov	sl, r0
 800a146:	2101      	movs	r1, #1
 800a148:	4620      	mov	r0, r4
 800a14a:	f000 ff09 	bl	800af60 <__i2b>
 800a14e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a150:	2b00      	cmp	r3, #0
 800a152:	4606      	mov	r6, r0
 800a154:	f340 8081 	ble.w	800a25a <_dtoa_r+0x8ca>
 800a158:	461a      	mov	r2, r3
 800a15a:	4601      	mov	r1, r0
 800a15c:	4620      	mov	r0, r4
 800a15e:	f000 ffbf 	bl	800b0e0 <__pow5mult>
 800a162:	9b07      	ldr	r3, [sp, #28]
 800a164:	2b01      	cmp	r3, #1
 800a166:	4606      	mov	r6, r0
 800a168:	dd7a      	ble.n	800a260 <_dtoa_r+0x8d0>
 800a16a:	f04f 0800 	mov.w	r8, #0
 800a16e:	6933      	ldr	r3, [r6, #16]
 800a170:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a174:	6918      	ldr	r0, [r3, #16]
 800a176:	f000 fea5 	bl	800aec4 <__hi0bits>
 800a17a:	f1c0 0020 	rsb	r0, r0, #32
 800a17e:	9b06      	ldr	r3, [sp, #24]
 800a180:	4418      	add	r0, r3
 800a182:	f010 001f 	ands.w	r0, r0, #31
 800a186:	f000 8094 	beq.w	800a2b2 <_dtoa_r+0x922>
 800a18a:	f1c0 0320 	rsb	r3, r0, #32
 800a18e:	2b04      	cmp	r3, #4
 800a190:	f340 8085 	ble.w	800a29e <_dtoa_r+0x90e>
 800a194:	9b05      	ldr	r3, [sp, #20]
 800a196:	f1c0 001c 	rsb	r0, r0, #28
 800a19a:	4403      	add	r3, r0
 800a19c:	9305      	str	r3, [sp, #20]
 800a19e:	9b06      	ldr	r3, [sp, #24]
 800a1a0:	4403      	add	r3, r0
 800a1a2:	4405      	add	r5, r0
 800a1a4:	9306      	str	r3, [sp, #24]
 800a1a6:	9b05      	ldr	r3, [sp, #20]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	dd05      	ble.n	800a1b8 <_dtoa_r+0x828>
 800a1ac:	4651      	mov	r1, sl
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f000 ffef 	bl	800b194 <__lshift>
 800a1b6:	4682      	mov	sl, r0
 800a1b8:	9b06      	ldr	r3, [sp, #24]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	dd05      	ble.n	800a1ca <_dtoa_r+0x83a>
 800a1be:	4631      	mov	r1, r6
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f000 ffe6 	bl	800b194 <__lshift>
 800a1c8:	4606      	mov	r6, r0
 800a1ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d072      	beq.n	800a2b6 <_dtoa_r+0x926>
 800a1d0:	4631      	mov	r1, r6
 800a1d2:	4650      	mov	r0, sl
 800a1d4:	f001 f84a 	bl	800b26c <__mcmp>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	da6c      	bge.n	800a2b6 <_dtoa_r+0x926>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	4651      	mov	r1, sl
 800a1e0:	220a      	movs	r2, #10
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f000 fdde 	bl	800ada4 <__multadd>
 800a1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1ee:	4682      	mov	sl, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f000 81b0 	beq.w	800a556 <_dtoa_r+0xbc6>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	4639      	mov	r1, r7
 800a1fa:	220a      	movs	r2, #10
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f000 fdd1 	bl	800ada4 <__multadd>
 800a202:	9b01      	ldr	r3, [sp, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	4607      	mov	r7, r0
 800a208:	f300 8096 	bgt.w	800a338 <_dtoa_r+0x9a8>
 800a20c:	9b07      	ldr	r3, [sp, #28]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	dc59      	bgt.n	800a2c6 <_dtoa_r+0x936>
 800a212:	e091      	b.n	800a338 <_dtoa_r+0x9a8>
 800a214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a216:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a21a:	e758      	b.n	800a0ce <_dtoa_r+0x73e>
 800a21c:	9b04      	ldr	r3, [sp, #16]
 800a21e:	1e5e      	subs	r6, r3, #1
 800a220:	9b08      	ldr	r3, [sp, #32]
 800a222:	42b3      	cmp	r3, r6
 800a224:	bfbf      	itttt	lt
 800a226:	9b08      	ldrlt	r3, [sp, #32]
 800a228:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a22a:	9608      	strlt	r6, [sp, #32]
 800a22c:	1af3      	sublt	r3, r6, r3
 800a22e:	bfb4      	ite	lt
 800a230:	18d2      	addlt	r2, r2, r3
 800a232:	1b9e      	subge	r6, r3, r6
 800a234:	9b04      	ldr	r3, [sp, #16]
 800a236:	bfbc      	itt	lt
 800a238:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a23a:	2600      	movlt	r6, #0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	bfb7      	itett	lt
 800a240:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a244:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a248:	1a9d      	sublt	r5, r3, r2
 800a24a:	2300      	movlt	r3, #0
 800a24c:	e741      	b.n	800a0d2 <_dtoa_r+0x742>
 800a24e:	9e08      	ldr	r6, [sp, #32]
 800a250:	9d05      	ldr	r5, [sp, #20]
 800a252:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a254:	e748      	b.n	800a0e8 <_dtoa_r+0x758>
 800a256:	9a08      	ldr	r2, [sp, #32]
 800a258:	e770      	b.n	800a13c <_dtoa_r+0x7ac>
 800a25a:	9b07      	ldr	r3, [sp, #28]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	dc19      	bgt.n	800a294 <_dtoa_r+0x904>
 800a260:	9b02      	ldr	r3, [sp, #8]
 800a262:	b9bb      	cbnz	r3, 800a294 <_dtoa_r+0x904>
 800a264:	9b03      	ldr	r3, [sp, #12]
 800a266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a26a:	b99b      	cbnz	r3, 800a294 <_dtoa_r+0x904>
 800a26c:	9b03      	ldr	r3, [sp, #12]
 800a26e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a272:	0d1b      	lsrs	r3, r3, #20
 800a274:	051b      	lsls	r3, r3, #20
 800a276:	b183      	cbz	r3, 800a29a <_dtoa_r+0x90a>
 800a278:	9b05      	ldr	r3, [sp, #20]
 800a27a:	3301      	adds	r3, #1
 800a27c:	9305      	str	r3, [sp, #20]
 800a27e:	9b06      	ldr	r3, [sp, #24]
 800a280:	3301      	adds	r3, #1
 800a282:	9306      	str	r3, [sp, #24]
 800a284:	f04f 0801 	mov.w	r8, #1
 800a288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f47f af6f 	bne.w	800a16e <_dtoa_r+0x7de>
 800a290:	2001      	movs	r0, #1
 800a292:	e774      	b.n	800a17e <_dtoa_r+0x7ee>
 800a294:	f04f 0800 	mov.w	r8, #0
 800a298:	e7f6      	b.n	800a288 <_dtoa_r+0x8f8>
 800a29a:	4698      	mov	r8, r3
 800a29c:	e7f4      	b.n	800a288 <_dtoa_r+0x8f8>
 800a29e:	d082      	beq.n	800a1a6 <_dtoa_r+0x816>
 800a2a0:	9a05      	ldr	r2, [sp, #20]
 800a2a2:	331c      	adds	r3, #28
 800a2a4:	441a      	add	r2, r3
 800a2a6:	9205      	str	r2, [sp, #20]
 800a2a8:	9a06      	ldr	r2, [sp, #24]
 800a2aa:	441a      	add	r2, r3
 800a2ac:	441d      	add	r5, r3
 800a2ae:	9206      	str	r2, [sp, #24]
 800a2b0:	e779      	b.n	800a1a6 <_dtoa_r+0x816>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	e7f4      	b.n	800a2a0 <_dtoa_r+0x910>
 800a2b6:	9b04      	ldr	r3, [sp, #16]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	dc37      	bgt.n	800a32c <_dtoa_r+0x99c>
 800a2bc:	9b07      	ldr	r3, [sp, #28]
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	dd34      	ble.n	800a32c <_dtoa_r+0x99c>
 800a2c2:	9b04      	ldr	r3, [sp, #16]
 800a2c4:	9301      	str	r3, [sp, #4]
 800a2c6:	9b01      	ldr	r3, [sp, #4]
 800a2c8:	b963      	cbnz	r3, 800a2e4 <_dtoa_r+0x954>
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	2205      	movs	r2, #5
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f000 fd68 	bl	800ada4 <__multadd>
 800a2d4:	4601      	mov	r1, r0
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	4650      	mov	r0, sl
 800a2da:	f000 ffc7 	bl	800b26c <__mcmp>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	f73f adbb 	bgt.w	8009e5a <_dtoa_r+0x4ca>
 800a2e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2e6:	9d00      	ldr	r5, [sp, #0]
 800a2e8:	ea6f 0b03 	mvn.w	fp, r3
 800a2ec:	f04f 0800 	mov.w	r8, #0
 800a2f0:	4631      	mov	r1, r6
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f000 fd34 	bl	800ad60 <_Bfree>
 800a2f8:	2f00      	cmp	r7, #0
 800a2fa:	f43f aeab 	beq.w	800a054 <_dtoa_r+0x6c4>
 800a2fe:	f1b8 0f00 	cmp.w	r8, #0
 800a302:	d005      	beq.n	800a310 <_dtoa_r+0x980>
 800a304:	45b8      	cmp	r8, r7
 800a306:	d003      	beq.n	800a310 <_dtoa_r+0x980>
 800a308:	4641      	mov	r1, r8
 800a30a:	4620      	mov	r0, r4
 800a30c:	f000 fd28 	bl	800ad60 <_Bfree>
 800a310:	4639      	mov	r1, r7
 800a312:	4620      	mov	r0, r4
 800a314:	f000 fd24 	bl	800ad60 <_Bfree>
 800a318:	e69c      	b.n	800a054 <_dtoa_r+0x6c4>
 800a31a:	2600      	movs	r6, #0
 800a31c:	4637      	mov	r7, r6
 800a31e:	e7e1      	b.n	800a2e4 <_dtoa_r+0x954>
 800a320:	46bb      	mov	fp, r7
 800a322:	4637      	mov	r7, r6
 800a324:	e599      	b.n	8009e5a <_dtoa_r+0x4ca>
 800a326:	bf00      	nop
 800a328:	40240000 	.word	0x40240000
 800a32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f000 80c8 	beq.w	800a4c4 <_dtoa_r+0xb34>
 800a334:	9b04      	ldr	r3, [sp, #16]
 800a336:	9301      	str	r3, [sp, #4]
 800a338:	2d00      	cmp	r5, #0
 800a33a:	dd05      	ble.n	800a348 <_dtoa_r+0x9b8>
 800a33c:	4639      	mov	r1, r7
 800a33e:	462a      	mov	r2, r5
 800a340:	4620      	mov	r0, r4
 800a342:	f000 ff27 	bl	800b194 <__lshift>
 800a346:	4607      	mov	r7, r0
 800a348:	f1b8 0f00 	cmp.w	r8, #0
 800a34c:	d05b      	beq.n	800a406 <_dtoa_r+0xa76>
 800a34e:	6879      	ldr	r1, [r7, #4]
 800a350:	4620      	mov	r0, r4
 800a352:	f000 fcc5 	bl	800ace0 <_Balloc>
 800a356:	4605      	mov	r5, r0
 800a358:	b928      	cbnz	r0, 800a366 <_dtoa_r+0x9d6>
 800a35a:	4b83      	ldr	r3, [pc, #524]	; (800a568 <_dtoa_r+0xbd8>)
 800a35c:	4602      	mov	r2, r0
 800a35e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a362:	f7ff bb2e 	b.w	80099c2 <_dtoa_r+0x32>
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	3202      	adds	r2, #2
 800a36a:	0092      	lsls	r2, r2, #2
 800a36c:	f107 010c 	add.w	r1, r7, #12
 800a370:	300c      	adds	r0, #12
 800a372:	f7ff fa4a 	bl	800980a <memcpy>
 800a376:	2201      	movs	r2, #1
 800a378:	4629      	mov	r1, r5
 800a37a:	4620      	mov	r0, r4
 800a37c:	f000 ff0a 	bl	800b194 <__lshift>
 800a380:	9b00      	ldr	r3, [sp, #0]
 800a382:	3301      	adds	r3, #1
 800a384:	9304      	str	r3, [sp, #16]
 800a386:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a38a:	4413      	add	r3, r2
 800a38c:	9308      	str	r3, [sp, #32]
 800a38e:	9b02      	ldr	r3, [sp, #8]
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	46b8      	mov	r8, r7
 800a396:	9306      	str	r3, [sp, #24]
 800a398:	4607      	mov	r7, r0
 800a39a:	9b04      	ldr	r3, [sp, #16]
 800a39c:	4631      	mov	r1, r6
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	4650      	mov	r0, sl
 800a3a2:	9301      	str	r3, [sp, #4]
 800a3a4:	f7ff fa6c 	bl	8009880 <quorem>
 800a3a8:	4641      	mov	r1, r8
 800a3aa:	9002      	str	r0, [sp, #8]
 800a3ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a3b0:	4650      	mov	r0, sl
 800a3b2:	f000 ff5b 	bl	800b26c <__mcmp>
 800a3b6:	463a      	mov	r2, r7
 800a3b8:	9005      	str	r0, [sp, #20]
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f000 ff71 	bl	800b2a4 <__mdiff>
 800a3c2:	68c2      	ldr	r2, [r0, #12]
 800a3c4:	4605      	mov	r5, r0
 800a3c6:	bb02      	cbnz	r2, 800a40a <_dtoa_r+0xa7a>
 800a3c8:	4601      	mov	r1, r0
 800a3ca:	4650      	mov	r0, sl
 800a3cc:	f000 ff4e 	bl	800b26c <__mcmp>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	4629      	mov	r1, r5
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	9209      	str	r2, [sp, #36]	; 0x24
 800a3d8:	f000 fcc2 	bl	800ad60 <_Bfree>
 800a3dc:	9b07      	ldr	r3, [sp, #28]
 800a3de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3e0:	9d04      	ldr	r5, [sp, #16]
 800a3e2:	ea43 0102 	orr.w	r1, r3, r2
 800a3e6:	9b06      	ldr	r3, [sp, #24]
 800a3e8:	4319      	orrs	r1, r3
 800a3ea:	d110      	bne.n	800a40e <_dtoa_r+0xa7e>
 800a3ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a3f0:	d029      	beq.n	800a446 <_dtoa_r+0xab6>
 800a3f2:	9b05      	ldr	r3, [sp, #20]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dd02      	ble.n	800a3fe <_dtoa_r+0xa6e>
 800a3f8:	9b02      	ldr	r3, [sp, #8]
 800a3fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a3fe:	9b01      	ldr	r3, [sp, #4]
 800a400:	f883 9000 	strb.w	r9, [r3]
 800a404:	e774      	b.n	800a2f0 <_dtoa_r+0x960>
 800a406:	4638      	mov	r0, r7
 800a408:	e7ba      	b.n	800a380 <_dtoa_r+0x9f0>
 800a40a:	2201      	movs	r2, #1
 800a40c:	e7e1      	b.n	800a3d2 <_dtoa_r+0xa42>
 800a40e:	9b05      	ldr	r3, [sp, #20]
 800a410:	2b00      	cmp	r3, #0
 800a412:	db04      	blt.n	800a41e <_dtoa_r+0xa8e>
 800a414:	9907      	ldr	r1, [sp, #28]
 800a416:	430b      	orrs	r3, r1
 800a418:	9906      	ldr	r1, [sp, #24]
 800a41a:	430b      	orrs	r3, r1
 800a41c:	d120      	bne.n	800a460 <_dtoa_r+0xad0>
 800a41e:	2a00      	cmp	r2, #0
 800a420:	dded      	ble.n	800a3fe <_dtoa_r+0xa6e>
 800a422:	4651      	mov	r1, sl
 800a424:	2201      	movs	r2, #1
 800a426:	4620      	mov	r0, r4
 800a428:	f000 feb4 	bl	800b194 <__lshift>
 800a42c:	4631      	mov	r1, r6
 800a42e:	4682      	mov	sl, r0
 800a430:	f000 ff1c 	bl	800b26c <__mcmp>
 800a434:	2800      	cmp	r0, #0
 800a436:	dc03      	bgt.n	800a440 <_dtoa_r+0xab0>
 800a438:	d1e1      	bne.n	800a3fe <_dtoa_r+0xa6e>
 800a43a:	f019 0f01 	tst.w	r9, #1
 800a43e:	d0de      	beq.n	800a3fe <_dtoa_r+0xa6e>
 800a440:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a444:	d1d8      	bne.n	800a3f8 <_dtoa_r+0xa68>
 800a446:	9a01      	ldr	r2, [sp, #4]
 800a448:	2339      	movs	r3, #57	; 0x39
 800a44a:	7013      	strb	r3, [r2, #0]
 800a44c:	462b      	mov	r3, r5
 800a44e:	461d      	mov	r5, r3
 800a450:	3b01      	subs	r3, #1
 800a452:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a456:	2a39      	cmp	r2, #57	; 0x39
 800a458:	d06c      	beq.n	800a534 <_dtoa_r+0xba4>
 800a45a:	3201      	adds	r2, #1
 800a45c:	701a      	strb	r2, [r3, #0]
 800a45e:	e747      	b.n	800a2f0 <_dtoa_r+0x960>
 800a460:	2a00      	cmp	r2, #0
 800a462:	dd07      	ble.n	800a474 <_dtoa_r+0xae4>
 800a464:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a468:	d0ed      	beq.n	800a446 <_dtoa_r+0xab6>
 800a46a:	9a01      	ldr	r2, [sp, #4]
 800a46c:	f109 0301 	add.w	r3, r9, #1
 800a470:	7013      	strb	r3, [r2, #0]
 800a472:	e73d      	b.n	800a2f0 <_dtoa_r+0x960>
 800a474:	9b04      	ldr	r3, [sp, #16]
 800a476:	9a08      	ldr	r2, [sp, #32]
 800a478:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d043      	beq.n	800a508 <_dtoa_r+0xb78>
 800a480:	4651      	mov	r1, sl
 800a482:	2300      	movs	r3, #0
 800a484:	220a      	movs	r2, #10
 800a486:	4620      	mov	r0, r4
 800a488:	f000 fc8c 	bl	800ada4 <__multadd>
 800a48c:	45b8      	cmp	r8, r7
 800a48e:	4682      	mov	sl, r0
 800a490:	f04f 0300 	mov.w	r3, #0
 800a494:	f04f 020a 	mov.w	r2, #10
 800a498:	4641      	mov	r1, r8
 800a49a:	4620      	mov	r0, r4
 800a49c:	d107      	bne.n	800a4ae <_dtoa_r+0xb1e>
 800a49e:	f000 fc81 	bl	800ada4 <__multadd>
 800a4a2:	4680      	mov	r8, r0
 800a4a4:	4607      	mov	r7, r0
 800a4a6:	9b04      	ldr	r3, [sp, #16]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	9304      	str	r3, [sp, #16]
 800a4ac:	e775      	b.n	800a39a <_dtoa_r+0xa0a>
 800a4ae:	f000 fc79 	bl	800ada4 <__multadd>
 800a4b2:	4639      	mov	r1, r7
 800a4b4:	4680      	mov	r8, r0
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	220a      	movs	r2, #10
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f000 fc72 	bl	800ada4 <__multadd>
 800a4c0:	4607      	mov	r7, r0
 800a4c2:	e7f0      	b.n	800a4a6 <_dtoa_r+0xb16>
 800a4c4:	9b04      	ldr	r3, [sp, #16]
 800a4c6:	9301      	str	r3, [sp, #4]
 800a4c8:	9d00      	ldr	r5, [sp, #0]
 800a4ca:	4631      	mov	r1, r6
 800a4cc:	4650      	mov	r0, sl
 800a4ce:	f7ff f9d7 	bl	8009880 <quorem>
 800a4d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a4d6:	9b00      	ldr	r3, [sp, #0]
 800a4d8:	f805 9b01 	strb.w	r9, [r5], #1
 800a4dc:	1aea      	subs	r2, r5, r3
 800a4de:	9b01      	ldr	r3, [sp, #4]
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	dd07      	ble.n	800a4f4 <_dtoa_r+0xb64>
 800a4e4:	4651      	mov	r1, sl
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	220a      	movs	r2, #10
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f000 fc5a 	bl	800ada4 <__multadd>
 800a4f0:	4682      	mov	sl, r0
 800a4f2:	e7ea      	b.n	800a4ca <_dtoa_r+0xb3a>
 800a4f4:	9b01      	ldr	r3, [sp, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	bfc8      	it	gt
 800a4fa:	461d      	movgt	r5, r3
 800a4fc:	9b00      	ldr	r3, [sp, #0]
 800a4fe:	bfd8      	it	le
 800a500:	2501      	movle	r5, #1
 800a502:	441d      	add	r5, r3
 800a504:	f04f 0800 	mov.w	r8, #0
 800a508:	4651      	mov	r1, sl
 800a50a:	2201      	movs	r2, #1
 800a50c:	4620      	mov	r0, r4
 800a50e:	f000 fe41 	bl	800b194 <__lshift>
 800a512:	4631      	mov	r1, r6
 800a514:	4682      	mov	sl, r0
 800a516:	f000 fea9 	bl	800b26c <__mcmp>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	dc96      	bgt.n	800a44c <_dtoa_r+0xabc>
 800a51e:	d102      	bne.n	800a526 <_dtoa_r+0xb96>
 800a520:	f019 0f01 	tst.w	r9, #1
 800a524:	d192      	bne.n	800a44c <_dtoa_r+0xabc>
 800a526:	462b      	mov	r3, r5
 800a528:	461d      	mov	r5, r3
 800a52a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a52e:	2a30      	cmp	r2, #48	; 0x30
 800a530:	d0fa      	beq.n	800a528 <_dtoa_r+0xb98>
 800a532:	e6dd      	b.n	800a2f0 <_dtoa_r+0x960>
 800a534:	9a00      	ldr	r2, [sp, #0]
 800a536:	429a      	cmp	r2, r3
 800a538:	d189      	bne.n	800a44e <_dtoa_r+0xabe>
 800a53a:	f10b 0b01 	add.w	fp, fp, #1
 800a53e:	2331      	movs	r3, #49	; 0x31
 800a540:	e796      	b.n	800a470 <_dtoa_r+0xae0>
 800a542:	4b0a      	ldr	r3, [pc, #40]	; (800a56c <_dtoa_r+0xbdc>)
 800a544:	f7ff ba99 	b.w	8009a7a <_dtoa_r+0xea>
 800a548:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f47f aa6d 	bne.w	8009a2a <_dtoa_r+0x9a>
 800a550:	4b07      	ldr	r3, [pc, #28]	; (800a570 <_dtoa_r+0xbe0>)
 800a552:	f7ff ba92 	b.w	8009a7a <_dtoa_r+0xea>
 800a556:	9b01      	ldr	r3, [sp, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	dcb5      	bgt.n	800a4c8 <_dtoa_r+0xb38>
 800a55c:	9b07      	ldr	r3, [sp, #28]
 800a55e:	2b02      	cmp	r3, #2
 800a560:	f73f aeb1 	bgt.w	800a2c6 <_dtoa_r+0x936>
 800a564:	e7b0      	b.n	800a4c8 <_dtoa_r+0xb38>
 800a566:	bf00      	nop
 800a568:	0800db3c 	.word	0x0800db3c
 800a56c:	0800d9f9 	.word	0x0800d9f9
 800a570:	0800dad7 	.word	0x0800dad7

0800a574 <_free_r>:
 800a574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a576:	2900      	cmp	r1, #0
 800a578:	d044      	beq.n	800a604 <_free_r+0x90>
 800a57a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a57e:	9001      	str	r0, [sp, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	f1a1 0404 	sub.w	r4, r1, #4
 800a586:	bfb8      	it	lt
 800a588:	18e4      	addlt	r4, r4, r3
 800a58a:	f7fd f93f 	bl	800780c <__malloc_lock>
 800a58e:	4a1e      	ldr	r2, [pc, #120]	; (800a608 <_free_r+0x94>)
 800a590:	9801      	ldr	r0, [sp, #4]
 800a592:	6813      	ldr	r3, [r2, #0]
 800a594:	b933      	cbnz	r3, 800a5a4 <_free_r+0x30>
 800a596:	6063      	str	r3, [r4, #4]
 800a598:	6014      	str	r4, [r2, #0]
 800a59a:	b003      	add	sp, #12
 800a59c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5a0:	f7fd b93a 	b.w	8007818 <__malloc_unlock>
 800a5a4:	42a3      	cmp	r3, r4
 800a5a6:	d908      	bls.n	800a5ba <_free_r+0x46>
 800a5a8:	6825      	ldr	r5, [r4, #0]
 800a5aa:	1961      	adds	r1, r4, r5
 800a5ac:	428b      	cmp	r3, r1
 800a5ae:	bf01      	itttt	eq
 800a5b0:	6819      	ldreq	r1, [r3, #0]
 800a5b2:	685b      	ldreq	r3, [r3, #4]
 800a5b4:	1949      	addeq	r1, r1, r5
 800a5b6:	6021      	streq	r1, [r4, #0]
 800a5b8:	e7ed      	b.n	800a596 <_free_r+0x22>
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	b10b      	cbz	r3, 800a5c4 <_free_r+0x50>
 800a5c0:	42a3      	cmp	r3, r4
 800a5c2:	d9fa      	bls.n	800a5ba <_free_r+0x46>
 800a5c4:	6811      	ldr	r1, [r2, #0]
 800a5c6:	1855      	adds	r5, r2, r1
 800a5c8:	42a5      	cmp	r5, r4
 800a5ca:	d10b      	bne.n	800a5e4 <_free_r+0x70>
 800a5cc:	6824      	ldr	r4, [r4, #0]
 800a5ce:	4421      	add	r1, r4
 800a5d0:	1854      	adds	r4, r2, r1
 800a5d2:	42a3      	cmp	r3, r4
 800a5d4:	6011      	str	r1, [r2, #0]
 800a5d6:	d1e0      	bne.n	800a59a <_free_r+0x26>
 800a5d8:	681c      	ldr	r4, [r3, #0]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	6053      	str	r3, [r2, #4]
 800a5de:	440c      	add	r4, r1
 800a5e0:	6014      	str	r4, [r2, #0]
 800a5e2:	e7da      	b.n	800a59a <_free_r+0x26>
 800a5e4:	d902      	bls.n	800a5ec <_free_r+0x78>
 800a5e6:	230c      	movs	r3, #12
 800a5e8:	6003      	str	r3, [r0, #0]
 800a5ea:	e7d6      	b.n	800a59a <_free_r+0x26>
 800a5ec:	6825      	ldr	r5, [r4, #0]
 800a5ee:	1961      	adds	r1, r4, r5
 800a5f0:	428b      	cmp	r3, r1
 800a5f2:	bf04      	itt	eq
 800a5f4:	6819      	ldreq	r1, [r3, #0]
 800a5f6:	685b      	ldreq	r3, [r3, #4]
 800a5f8:	6063      	str	r3, [r4, #4]
 800a5fa:	bf04      	itt	eq
 800a5fc:	1949      	addeq	r1, r1, r5
 800a5fe:	6021      	streq	r1, [r4, #0]
 800a600:	6054      	str	r4, [r2, #4]
 800a602:	e7ca      	b.n	800a59a <_free_r+0x26>
 800a604:	b003      	add	sp, #12
 800a606:	bd30      	pop	{r4, r5, pc}
 800a608:	20000aec 	.word	0x20000aec

0800a60c <rshift>:
 800a60c:	6903      	ldr	r3, [r0, #16]
 800a60e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a612:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a616:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a61a:	f100 0414 	add.w	r4, r0, #20
 800a61e:	dd45      	ble.n	800a6ac <rshift+0xa0>
 800a620:	f011 011f 	ands.w	r1, r1, #31
 800a624:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a628:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a62c:	d10c      	bne.n	800a648 <rshift+0x3c>
 800a62e:	f100 0710 	add.w	r7, r0, #16
 800a632:	4629      	mov	r1, r5
 800a634:	42b1      	cmp	r1, r6
 800a636:	d334      	bcc.n	800a6a2 <rshift+0x96>
 800a638:	1a9b      	subs	r3, r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	1eea      	subs	r2, r5, #3
 800a63e:	4296      	cmp	r6, r2
 800a640:	bf38      	it	cc
 800a642:	2300      	movcc	r3, #0
 800a644:	4423      	add	r3, r4
 800a646:	e015      	b.n	800a674 <rshift+0x68>
 800a648:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a64c:	f1c1 0820 	rsb	r8, r1, #32
 800a650:	40cf      	lsrs	r7, r1
 800a652:	f105 0e04 	add.w	lr, r5, #4
 800a656:	46a1      	mov	r9, r4
 800a658:	4576      	cmp	r6, lr
 800a65a:	46f4      	mov	ip, lr
 800a65c:	d815      	bhi.n	800a68a <rshift+0x7e>
 800a65e:	1a9a      	subs	r2, r3, r2
 800a660:	0092      	lsls	r2, r2, #2
 800a662:	3a04      	subs	r2, #4
 800a664:	3501      	adds	r5, #1
 800a666:	42ae      	cmp	r6, r5
 800a668:	bf38      	it	cc
 800a66a:	2200      	movcc	r2, #0
 800a66c:	18a3      	adds	r3, r4, r2
 800a66e:	50a7      	str	r7, [r4, r2]
 800a670:	b107      	cbz	r7, 800a674 <rshift+0x68>
 800a672:	3304      	adds	r3, #4
 800a674:	1b1a      	subs	r2, r3, r4
 800a676:	42a3      	cmp	r3, r4
 800a678:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a67c:	bf08      	it	eq
 800a67e:	2300      	moveq	r3, #0
 800a680:	6102      	str	r2, [r0, #16]
 800a682:	bf08      	it	eq
 800a684:	6143      	streq	r3, [r0, #20]
 800a686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a68a:	f8dc c000 	ldr.w	ip, [ip]
 800a68e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a692:	ea4c 0707 	orr.w	r7, ip, r7
 800a696:	f849 7b04 	str.w	r7, [r9], #4
 800a69a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a69e:	40cf      	lsrs	r7, r1
 800a6a0:	e7da      	b.n	800a658 <rshift+0x4c>
 800a6a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a6a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a6aa:	e7c3      	b.n	800a634 <rshift+0x28>
 800a6ac:	4623      	mov	r3, r4
 800a6ae:	e7e1      	b.n	800a674 <rshift+0x68>

0800a6b0 <__hexdig_fun>:
 800a6b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a6b4:	2b09      	cmp	r3, #9
 800a6b6:	d802      	bhi.n	800a6be <__hexdig_fun+0xe>
 800a6b8:	3820      	subs	r0, #32
 800a6ba:	b2c0      	uxtb	r0, r0
 800a6bc:	4770      	bx	lr
 800a6be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a6c2:	2b05      	cmp	r3, #5
 800a6c4:	d801      	bhi.n	800a6ca <__hexdig_fun+0x1a>
 800a6c6:	3847      	subs	r0, #71	; 0x47
 800a6c8:	e7f7      	b.n	800a6ba <__hexdig_fun+0xa>
 800a6ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a6ce:	2b05      	cmp	r3, #5
 800a6d0:	d801      	bhi.n	800a6d6 <__hexdig_fun+0x26>
 800a6d2:	3827      	subs	r0, #39	; 0x27
 800a6d4:	e7f1      	b.n	800a6ba <__hexdig_fun+0xa>
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	4770      	bx	lr
	...

0800a6dc <__gethex>:
 800a6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e0:	4617      	mov	r7, r2
 800a6e2:	680a      	ldr	r2, [r1, #0]
 800a6e4:	b085      	sub	sp, #20
 800a6e6:	f102 0b02 	add.w	fp, r2, #2
 800a6ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a6ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a6f2:	4681      	mov	r9, r0
 800a6f4:	468a      	mov	sl, r1
 800a6f6:	9302      	str	r3, [sp, #8]
 800a6f8:	32fe      	adds	r2, #254	; 0xfe
 800a6fa:	eb02 030b 	add.w	r3, r2, fp
 800a6fe:	46d8      	mov	r8, fp
 800a700:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a704:	9301      	str	r3, [sp, #4]
 800a706:	2830      	cmp	r0, #48	; 0x30
 800a708:	d0f7      	beq.n	800a6fa <__gethex+0x1e>
 800a70a:	f7ff ffd1 	bl	800a6b0 <__hexdig_fun>
 800a70e:	4604      	mov	r4, r0
 800a710:	2800      	cmp	r0, #0
 800a712:	d138      	bne.n	800a786 <__gethex+0xaa>
 800a714:	49a7      	ldr	r1, [pc, #668]	; (800a9b4 <__gethex+0x2d8>)
 800a716:	2201      	movs	r2, #1
 800a718:	4640      	mov	r0, r8
 800a71a:	f7fe ff62 	bl	80095e2 <strncmp>
 800a71e:	4606      	mov	r6, r0
 800a720:	2800      	cmp	r0, #0
 800a722:	d169      	bne.n	800a7f8 <__gethex+0x11c>
 800a724:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a728:	465d      	mov	r5, fp
 800a72a:	f7ff ffc1 	bl	800a6b0 <__hexdig_fun>
 800a72e:	2800      	cmp	r0, #0
 800a730:	d064      	beq.n	800a7fc <__gethex+0x120>
 800a732:	465a      	mov	r2, fp
 800a734:	7810      	ldrb	r0, [r2, #0]
 800a736:	2830      	cmp	r0, #48	; 0x30
 800a738:	4690      	mov	r8, r2
 800a73a:	f102 0201 	add.w	r2, r2, #1
 800a73e:	d0f9      	beq.n	800a734 <__gethex+0x58>
 800a740:	f7ff ffb6 	bl	800a6b0 <__hexdig_fun>
 800a744:	2301      	movs	r3, #1
 800a746:	fab0 f480 	clz	r4, r0
 800a74a:	0964      	lsrs	r4, r4, #5
 800a74c:	465e      	mov	r6, fp
 800a74e:	9301      	str	r3, [sp, #4]
 800a750:	4642      	mov	r2, r8
 800a752:	4615      	mov	r5, r2
 800a754:	3201      	adds	r2, #1
 800a756:	7828      	ldrb	r0, [r5, #0]
 800a758:	f7ff ffaa 	bl	800a6b0 <__hexdig_fun>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	d1f8      	bne.n	800a752 <__gethex+0x76>
 800a760:	4994      	ldr	r1, [pc, #592]	; (800a9b4 <__gethex+0x2d8>)
 800a762:	2201      	movs	r2, #1
 800a764:	4628      	mov	r0, r5
 800a766:	f7fe ff3c 	bl	80095e2 <strncmp>
 800a76a:	b978      	cbnz	r0, 800a78c <__gethex+0xb0>
 800a76c:	b946      	cbnz	r6, 800a780 <__gethex+0xa4>
 800a76e:	1c6e      	adds	r6, r5, #1
 800a770:	4632      	mov	r2, r6
 800a772:	4615      	mov	r5, r2
 800a774:	3201      	adds	r2, #1
 800a776:	7828      	ldrb	r0, [r5, #0]
 800a778:	f7ff ff9a 	bl	800a6b0 <__hexdig_fun>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	d1f8      	bne.n	800a772 <__gethex+0x96>
 800a780:	1b73      	subs	r3, r6, r5
 800a782:	009e      	lsls	r6, r3, #2
 800a784:	e004      	b.n	800a790 <__gethex+0xb4>
 800a786:	2400      	movs	r4, #0
 800a788:	4626      	mov	r6, r4
 800a78a:	e7e1      	b.n	800a750 <__gethex+0x74>
 800a78c:	2e00      	cmp	r6, #0
 800a78e:	d1f7      	bne.n	800a780 <__gethex+0xa4>
 800a790:	782b      	ldrb	r3, [r5, #0]
 800a792:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a796:	2b50      	cmp	r3, #80	; 0x50
 800a798:	d13d      	bne.n	800a816 <__gethex+0x13a>
 800a79a:	786b      	ldrb	r3, [r5, #1]
 800a79c:	2b2b      	cmp	r3, #43	; 0x2b
 800a79e:	d02f      	beq.n	800a800 <__gethex+0x124>
 800a7a0:	2b2d      	cmp	r3, #45	; 0x2d
 800a7a2:	d031      	beq.n	800a808 <__gethex+0x12c>
 800a7a4:	1c69      	adds	r1, r5, #1
 800a7a6:	f04f 0b00 	mov.w	fp, #0
 800a7aa:	7808      	ldrb	r0, [r1, #0]
 800a7ac:	f7ff ff80 	bl	800a6b0 <__hexdig_fun>
 800a7b0:	1e42      	subs	r2, r0, #1
 800a7b2:	b2d2      	uxtb	r2, r2
 800a7b4:	2a18      	cmp	r2, #24
 800a7b6:	d82e      	bhi.n	800a816 <__gethex+0x13a>
 800a7b8:	f1a0 0210 	sub.w	r2, r0, #16
 800a7bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a7c0:	f7ff ff76 	bl	800a6b0 <__hexdig_fun>
 800a7c4:	f100 3cff 	add.w	ip, r0, #4294967295
 800a7c8:	fa5f fc8c 	uxtb.w	ip, ip
 800a7cc:	f1bc 0f18 	cmp.w	ip, #24
 800a7d0:	d91d      	bls.n	800a80e <__gethex+0x132>
 800a7d2:	f1bb 0f00 	cmp.w	fp, #0
 800a7d6:	d000      	beq.n	800a7da <__gethex+0xfe>
 800a7d8:	4252      	negs	r2, r2
 800a7da:	4416      	add	r6, r2
 800a7dc:	f8ca 1000 	str.w	r1, [sl]
 800a7e0:	b1dc      	cbz	r4, 800a81a <__gethex+0x13e>
 800a7e2:	9b01      	ldr	r3, [sp, #4]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	bf14      	ite	ne
 800a7e8:	f04f 0800 	movne.w	r8, #0
 800a7ec:	f04f 0806 	moveq.w	r8, #6
 800a7f0:	4640      	mov	r0, r8
 800a7f2:	b005      	add	sp, #20
 800a7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f8:	4645      	mov	r5, r8
 800a7fa:	4626      	mov	r6, r4
 800a7fc:	2401      	movs	r4, #1
 800a7fe:	e7c7      	b.n	800a790 <__gethex+0xb4>
 800a800:	f04f 0b00 	mov.w	fp, #0
 800a804:	1ca9      	adds	r1, r5, #2
 800a806:	e7d0      	b.n	800a7aa <__gethex+0xce>
 800a808:	f04f 0b01 	mov.w	fp, #1
 800a80c:	e7fa      	b.n	800a804 <__gethex+0x128>
 800a80e:	230a      	movs	r3, #10
 800a810:	fb03 0002 	mla	r0, r3, r2, r0
 800a814:	e7d0      	b.n	800a7b8 <__gethex+0xdc>
 800a816:	4629      	mov	r1, r5
 800a818:	e7e0      	b.n	800a7dc <__gethex+0x100>
 800a81a:	eba5 0308 	sub.w	r3, r5, r8
 800a81e:	3b01      	subs	r3, #1
 800a820:	4621      	mov	r1, r4
 800a822:	2b07      	cmp	r3, #7
 800a824:	dc0a      	bgt.n	800a83c <__gethex+0x160>
 800a826:	4648      	mov	r0, r9
 800a828:	f000 fa5a 	bl	800ace0 <_Balloc>
 800a82c:	4604      	mov	r4, r0
 800a82e:	b940      	cbnz	r0, 800a842 <__gethex+0x166>
 800a830:	4b61      	ldr	r3, [pc, #388]	; (800a9b8 <__gethex+0x2dc>)
 800a832:	4602      	mov	r2, r0
 800a834:	21e4      	movs	r1, #228	; 0xe4
 800a836:	4861      	ldr	r0, [pc, #388]	; (800a9bc <__gethex+0x2e0>)
 800a838:	f7ff f804 	bl	8009844 <__assert_func>
 800a83c:	3101      	adds	r1, #1
 800a83e:	105b      	asrs	r3, r3, #1
 800a840:	e7ef      	b.n	800a822 <__gethex+0x146>
 800a842:	f100 0a14 	add.w	sl, r0, #20
 800a846:	2300      	movs	r3, #0
 800a848:	495a      	ldr	r1, [pc, #360]	; (800a9b4 <__gethex+0x2d8>)
 800a84a:	f8cd a004 	str.w	sl, [sp, #4]
 800a84e:	469b      	mov	fp, r3
 800a850:	45a8      	cmp	r8, r5
 800a852:	d342      	bcc.n	800a8da <__gethex+0x1fe>
 800a854:	9801      	ldr	r0, [sp, #4]
 800a856:	f840 bb04 	str.w	fp, [r0], #4
 800a85a:	eba0 000a 	sub.w	r0, r0, sl
 800a85e:	1080      	asrs	r0, r0, #2
 800a860:	6120      	str	r0, [r4, #16]
 800a862:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a866:	4658      	mov	r0, fp
 800a868:	f000 fb2c 	bl	800aec4 <__hi0bits>
 800a86c:	683d      	ldr	r5, [r7, #0]
 800a86e:	eba8 0000 	sub.w	r0, r8, r0
 800a872:	42a8      	cmp	r0, r5
 800a874:	dd59      	ble.n	800a92a <__gethex+0x24e>
 800a876:	eba0 0805 	sub.w	r8, r0, r5
 800a87a:	4641      	mov	r1, r8
 800a87c:	4620      	mov	r0, r4
 800a87e:	f000 febb 	bl	800b5f8 <__any_on>
 800a882:	4683      	mov	fp, r0
 800a884:	b1b8      	cbz	r0, 800a8b6 <__gethex+0x1da>
 800a886:	f108 33ff 	add.w	r3, r8, #4294967295
 800a88a:	1159      	asrs	r1, r3, #5
 800a88c:	f003 021f 	and.w	r2, r3, #31
 800a890:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a894:	f04f 0b01 	mov.w	fp, #1
 800a898:	fa0b f202 	lsl.w	r2, fp, r2
 800a89c:	420a      	tst	r2, r1
 800a89e:	d00a      	beq.n	800a8b6 <__gethex+0x1da>
 800a8a0:	455b      	cmp	r3, fp
 800a8a2:	dd06      	ble.n	800a8b2 <__gethex+0x1d6>
 800a8a4:	f1a8 0102 	sub.w	r1, r8, #2
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f000 fea5 	bl	800b5f8 <__any_on>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	d138      	bne.n	800a924 <__gethex+0x248>
 800a8b2:	f04f 0b02 	mov.w	fp, #2
 800a8b6:	4641      	mov	r1, r8
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	f7ff fea7 	bl	800a60c <rshift>
 800a8be:	4446      	add	r6, r8
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	42b3      	cmp	r3, r6
 800a8c4:	da41      	bge.n	800a94a <__gethex+0x26e>
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	4648      	mov	r0, r9
 800a8ca:	f000 fa49 	bl	800ad60 <_Bfree>
 800a8ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	6013      	str	r3, [r2, #0]
 800a8d4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a8d8:	e78a      	b.n	800a7f0 <__gethex+0x114>
 800a8da:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a8de:	2a2e      	cmp	r2, #46	; 0x2e
 800a8e0:	d014      	beq.n	800a90c <__gethex+0x230>
 800a8e2:	2b20      	cmp	r3, #32
 800a8e4:	d106      	bne.n	800a8f4 <__gethex+0x218>
 800a8e6:	9b01      	ldr	r3, [sp, #4]
 800a8e8:	f843 bb04 	str.w	fp, [r3], #4
 800a8ec:	f04f 0b00 	mov.w	fp, #0
 800a8f0:	9301      	str	r3, [sp, #4]
 800a8f2:	465b      	mov	r3, fp
 800a8f4:	7828      	ldrb	r0, [r5, #0]
 800a8f6:	9303      	str	r3, [sp, #12]
 800a8f8:	f7ff feda 	bl	800a6b0 <__hexdig_fun>
 800a8fc:	9b03      	ldr	r3, [sp, #12]
 800a8fe:	f000 000f 	and.w	r0, r0, #15
 800a902:	4098      	lsls	r0, r3
 800a904:	ea4b 0b00 	orr.w	fp, fp, r0
 800a908:	3304      	adds	r3, #4
 800a90a:	e7a1      	b.n	800a850 <__gethex+0x174>
 800a90c:	45a8      	cmp	r8, r5
 800a90e:	d8e8      	bhi.n	800a8e2 <__gethex+0x206>
 800a910:	2201      	movs	r2, #1
 800a912:	4628      	mov	r0, r5
 800a914:	9303      	str	r3, [sp, #12]
 800a916:	f7fe fe64 	bl	80095e2 <strncmp>
 800a91a:	4926      	ldr	r1, [pc, #152]	; (800a9b4 <__gethex+0x2d8>)
 800a91c:	9b03      	ldr	r3, [sp, #12]
 800a91e:	2800      	cmp	r0, #0
 800a920:	d1df      	bne.n	800a8e2 <__gethex+0x206>
 800a922:	e795      	b.n	800a850 <__gethex+0x174>
 800a924:	f04f 0b03 	mov.w	fp, #3
 800a928:	e7c5      	b.n	800a8b6 <__gethex+0x1da>
 800a92a:	da0b      	bge.n	800a944 <__gethex+0x268>
 800a92c:	eba5 0800 	sub.w	r8, r5, r0
 800a930:	4621      	mov	r1, r4
 800a932:	4642      	mov	r2, r8
 800a934:	4648      	mov	r0, r9
 800a936:	f000 fc2d 	bl	800b194 <__lshift>
 800a93a:	eba6 0608 	sub.w	r6, r6, r8
 800a93e:	4604      	mov	r4, r0
 800a940:	f100 0a14 	add.w	sl, r0, #20
 800a944:	f04f 0b00 	mov.w	fp, #0
 800a948:	e7ba      	b.n	800a8c0 <__gethex+0x1e4>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	42b3      	cmp	r3, r6
 800a94e:	dd73      	ble.n	800aa38 <__gethex+0x35c>
 800a950:	1b9e      	subs	r6, r3, r6
 800a952:	42b5      	cmp	r5, r6
 800a954:	dc34      	bgt.n	800a9c0 <__gethex+0x2e4>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d023      	beq.n	800a9a4 <__gethex+0x2c8>
 800a95c:	2b03      	cmp	r3, #3
 800a95e:	d025      	beq.n	800a9ac <__gethex+0x2d0>
 800a960:	2b01      	cmp	r3, #1
 800a962:	d115      	bne.n	800a990 <__gethex+0x2b4>
 800a964:	42b5      	cmp	r5, r6
 800a966:	d113      	bne.n	800a990 <__gethex+0x2b4>
 800a968:	2d01      	cmp	r5, #1
 800a96a:	d10b      	bne.n	800a984 <__gethex+0x2a8>
 800a96c:	9a02      	ldr	r2, [sp, #8]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6013      	str	r3, [r2, #0]
 800a972:	2301      	movs	r3, #1
 800a974:	6123      	str	r3, [r4, #16]
 800a976:	f8ca 3000 	str.w	r3, [sl]
 800a97a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a97c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a980:	601c      	str	r4, [r3, #0]
 800a982:	e735      	b.n	800a7f0 <__gethex+0x114>
 800a984:	1e69      	subs	r1, r5, #1
 800a986:	4620      	mov	r0, r4
 800a988:	f000 fe36 	bl	800b5f8 <__any_on>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	d1ed      	bne.n	800a96c <__gethex+0x290>
 800a990:	4621      	mov	r1, r4
 800a992:	4648      	mov	r0, r9
 800a994:	f000 f9e4 	bl	800ad60 <_Bfree>
 800a998:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a99a:	2300      	movs	r3, #0
 800a99c:	6013      	str	r3, [r2, #0]
 800a99e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a9a2:	e725      	b.n	800a7f0 <__gethex+0x114>
 800a9a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d1f2      	bne.n	800a990 <__gethex+0x2b4>
 800a9aa:	e7df      	b.n	800a96c <__gethex+0x290>
 800a9ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1dc      	bne.n	800a96c <__gethex+0x290>
 800a9b2:	e7ed      	b.n	800a990 <__gethex+0x2b4>
 800a9b4:	0800d894 	.word	0x0800d894
 800a9b8:	0800db3c 	.word	0x0800db3c
 800a9bc:	0800db4d 	.word	0x0800db4d
 800a9c0:	f106 38ff 	add.w	r8, r6, #4294967295
 800a9c4:	f1bb 0f00 	cmp.w	fp, #0
 800a9c8:	d133      	bne.n	800aa32 <__gethex+0x356>
 800a9ca:	f1b8 0f00 	cmp.w	r8, #0
 800a9ce:	d004      	beq.n	800a9da <__gethex+0x2fe>
 800a9d0:	4641      	mov	r1, r8
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f000 fe10 	bl	800b5f8 <__any_on>
 800a9d8:	4683      	mov	fp, r0
 800a9da:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a9de:	2301      	movs	r3, #1
 800a9e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a9e4:	f008 081f 	and.w	r8, r8, #31
 800a9e8:	fa03 f308 	lsl.w	r3, r3, r8
 800a9ec:	4213      	tst	r3, r2
 800a9ee:	4631      	mov	r1, r6
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	bf18      	it	ne
 800a9f4:	f04b 0b02 	orrne.w	fp, fp, #2
 800a9f8:	1bad      	subs	r5, r5, r6
 800a9fa:	f7ff fe07 	bl	800a60c <rshift>
 800a9fe:	687e      	ldr	r6, [r7, #4]
 800aa00:	f04f 0802 	mov.w	r8, #2
 800aa04:	f1bb 0f00 	cmp.w	fp, #0
 800aa08:	d04a      	beq.n	800aaa0 <__gethex+0x3c4>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	d016      	beq.n	800aa3e <__gethex+0x362>
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	d018      	beq.n	800aa46 <__gethex+0x36a>
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d109      	bne.n	800aa2c <__gethex+0x350>
 800aa18:	f01b 0f02 	tst.w	fp, #2
 800aa1c:	d006      	beq.n	800aa2c <__gethex+0x350>
 800aa1e:	f8da 3000 	ldr.w	r3, [sl]
 800aa22:	ea4b 0b03 	orr.w	fp, fp, r3
 800aa26:	f01b 0f01 	tst.w	fp, #1
 800aa2a:	d10f      	bne.n	800aa4c <__gethex+0x370>
 800aa2c:	f048 0810 	orr.w	r8, r8, #16
 800aa30:	e036      	b.n	800aaa0 <__gethex+0x3c4>
 800aa32:	f04f 0b01 	mov.w	fp, #1
 800aa36:	e7d0      	b.n	800a9da <__gethex+0x2fe>
 800aa38:	f04f 0801 	mov.w	r8, #1
 800aa3c:	e7e2      	b.n	800aa04 <__gethex+0x328>
 800aa3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa40:	f1c3 0301 	rsb	r3, r3, #1
 800aa44:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d0ef      	beq.n	800aa2c <__gethex+0x350>
 800aa4c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aa50:	f104 0214 	add.w	r2, r4, #20
 800aa54:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800aa58:	9301      	str	r3, [sp, #4]
 800aa5a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800aa5e:	2300      	movs	r3, #0
 800aa60:	4694      	mov	ip, r2
 800aa62:	f852 1b04 	ldr.w	r1, [r2], #4
 800aa66:	f1b1 3fff 	cmp.w	r1, #4294967295
 800aa6a:	d01e      	beq.n	800aaaa <__gethex+0x3ce>
 800aa6c:	3101      	adds	r1, #1
 800aa6e:	f8cc 1000 	str.w	r1, [ip]
 800aa72:	f1b8 0f02 	cmp.w	r8, #2
 800aa76:	f104 0214 	add.w	r2, r4, #20
 800aa7a:	d13d      	bne.n	800aaf8 <__gethex+0x41c>
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	42ab      	cmp	r3, r5
 800aa82:	d10b      	bne.n	800aa9c <__gethex+0x3c0>
 800aa84:	1169      	asrs	r1, r5, #5
 800aa86:	2301      	movs	r3, #1
 800aa88:	f005 051f 	and.w	r5, r5, #31
 800aa8c:	fa03 f505 	lsl.w	r5, r3, r5
 800aa90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa94:	421d      	tst	r5, r3
 800aa96:	bf18      	it	ne
 800aa98:	f04f 0801 	movne.w	r8, #1
 800aa9c:	f048 0820 	orr.w	r8, r8, #32
 800aaa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaa2:	601c      	str	r4, [r3, #0]
 800aaa4:	9b02      	ldr	r3, [sp, #8]
 800aaa6:	601e      	str	r6, [r3, #0]
 800aaa8:	e6a2      	b.n	800a7f0 <__gethex+0x114>
 800aaaa:	4290      	cmp	r0, r2
 800aaac:	f842 3c04 	str.w	r3, [r2, #-4]
 800aab0:	d8d6      	bhi.n	800aa60 <__gethex+0x384>
 800aab2:	68a2      	ldr	r2, [r4, #8]
 800aab4:	4593      	cmp	fp, r2
 800aab6:	db17      	blt.n	800aae8 <__gethex+0x40c>
 800aab8:	6861      	ldr	r1, [r4, #4]
 800aaba:	4648      	mov	r0, r9
 800aabc:	3101      	adds	r1, #1
 800aabe:	f000 f90f 	bl	800ace0 <_Balloc>
 800aac2:	4682      	mov	sl, r0
 800aac4:	b918      	cbnz	r0, 800aace <__gethex+0x3f2>
 800aac6:	4b1b      	ldr	r3, [pc, #108]	; (800ab34 <__gethex+0x458>)
 800aac8:	4602      	mov	r2, r0
 800aaca:	2184      	movs	r1, #132	; 0x84
 800aacc:	e6b3      	b.n	800a836 <__gethex+0x15a>
 800aace:	6922      	ldr	r2, [r4, #16]
 800aad0:	3202      	adds	r2, #2
 800aad2:	f104 010c 	add.w	r1, r4, #12
 800aad6:	0092      	lsls	r2, r2, #2
 800aad8:	300c      	adds	r0, #12
 800aada:	f7fe fe96 	bl	800980a <memcpy>
 800aade:	4621      	mov	r1, r4
 800aae0:	4648      	mov	r0, r9
 800aae2:	f000 f93d 	bl	800ad60 <_Bfree>
 800aae6:	4654      	mov	r4, sl
 800aae8:	6922      	ldr	r2, [r4, #16]
 800aaea:	1c51      	adds	r1, r2, #1
 800aaec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800aaf0:	6121      	str	r1, [r4, #16]
 800aaf2:	2101      	movs	r1, #1
 800aaf4:	6151      	str	r1, [r2, #20]
 800aaf6:	e7bc      	b.n	800aa72 <__gethex+0x396>
 800aaf8:	6921      	ldr	r1, [r4, #16]
 800aafa:	4559      	cmp	r1, fp
 800aafc:	dd0b      	ble.n	800ab16 <__gethex+0x43a>
 800aafe:	2101      	movs	r1, #1
 800ab00:	4620      	mov	r0, r4
 800ab02:	f7ff fd83 	bl	800a60c <rshift>
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	3601      	adds	r6, #1
 800ab0a:	42b3      	cmp	r3, r6
 800ab0c:	f6ff aedb 	blt.w	800a8c6 <__gethex+0x1ea>
 800ab10:	f04f 0801 	mov.w	r8, #1
 800ab14:	e7c2      	b.n	800aa9c <__gethex+0x3c0>
 800ab16:	f015 051f 	ands.w	r5, r5, #31
 800ab1a:	d0f9      	beq.n	800ab10 <__gethex+0x434>
 800ab1c:	9b01      	ldr	r3, [sp, #4]
 800ab1e:	441a      	add	r2, r3
 800ab20:	f1c5 0520 	rsb	r5, r5, #32
 800ab24:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ab28:	f000 f9cc 	bl	800aec4 <__hi0bits>
 800ab2c:	42a8      	cmp	r0, r5
 800ab2e:	dbe6      	blt.n	800aafe <__gethex+0x422>
 800ab30:	e7ee      	b.n	800ab10 <__gethex+0x434>
 800ab32:	bf00      	nop
 800ab34:	0800db3c 	.word	0x0800db3c

0800ab38 <L_shift>:
 800ab38:	f1c2 0208 	rsb	r2, r2, #8
 800ab3c:	0092      	lsls	r2, r2, #2
 800ab3e:	b570      	push	{r4, r5, r6, lr}
 800ab40:	f1c2 0620 	rsb	r6, r2, #32
 800ab44:	6843      	ldr	r3, [r0, #4]
 800ab46:	6804      	ldr	r4, [r0, #0]
 800ab48:	fa03 f506 	lsl.w	r5, r3, r6
 800ab4c:	432c      	orrs	r4, r5
 800ab4e:	40d3      	lsrs	r3, r2
 800ab50:	6004      	str	r4, [r0, #0]
 800ab52:	f840 3f04 	str.w	r3, [r0, #4]!
 800ab56:	4288      	cmp	r0, r1
 800ab58:	d3f4      	bcc.n	800ab44 <L_shift+0xc>
 800ab5a:	bd70      	pop	{r4, r5, r6, pc}

0800ab5c <__match>:
 800ab5c:	b530      	push	{r4, r5, lr}
 800ab5e:	6803      	ldr	r3, [r0, #0]
 800ab60:	3301      	adds	r3, #1
 800ab62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab66:	b914      	cbnz	r4, 800ab6e <__match+0x12>
 800ab68:	6003      	str	r3, [r0, #0]
 800ab6a:	2001      	movs	r0, #1
 800ab6c:	bd30      	pop	{r4, r5, pc}
 800ab6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ab76:	2d19      	cmp	r5, #25
 800ab78:	bf98      	it	ls
 800ab7a:	3220      	addls	r2, #32
 800ab7c:	42a2      	cmp	r2, r4
 800ab7e:	d0f0      	beq.n	800ab62 <__match+0x6>
 800ab80:	2000      	movs	r0, #0
 800ab82:	e7f3      	b.n	800ab6c <__match+0x10>

0800ab84 <__hexnan>:
 800ab84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab88:	680b      	ldr	r3, [r1, #0]
 800ab8a:	6801      	ldr	r1, [r0, #0]
 800ab8c:	115e      	asrs	r6, r3, #5
 800ab8e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ab92:	f013 031f 	ands.w	r3, r3, #31
 800ab96:	b087      	sub	sp, #28
 800ab98:	bf18      	it	ne
 800ab9a:	3604      	addne	r6, #4
 800ab9c:	2500      	movs	r5, #0
 800ab9e:	1f37      	subs	r7, r6, #4
 800aba0:	4682      	mov	sl, r0
 800aba2:	4690      	mov	r8, r2
 800aba4:	9301      	str	r3, [sp, #4]
 800aba6:	f846 5c04 	str.w	r5, [r6, #-4]
 800abaa:	46b9      	mov	r9, r7
 800abac:	463c      	mov	r4, r7
 800abae:	9502      	str	r5, [sp, #8]
 800abb0:	46ab      	mov	fp, r5
 800abb2:	784a      	ldrb	r2, [r1, #1]
 800abb4:	1c4b      	adds	r3, r1, #1
 800abb6:	9303      	str	r3, [sp, #12]
 800abb8:	b342      	cbz	r2, 800ac0c <__hexnan+0x88>
 800abba:	4610      	mov	r0, r2
 800abbc:	9105      	str	r1, [sp, #20]
 800abbe:	9204      	str	r2, [sp, #16]
 800abc0:	f7ff fd76 	bl	800a6b0 <__hexdig_fun>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d14f      	bne.n	800ac68 <__hexnan+0xe4>
 800abc8:	9a04      	ldr	r2, [sp, #16]
 800abca:	9905      	ldr	r1, [sp, #20]
 800abcc:	2a20      	cmp	r2, #32
 800abce:	d818      	bhi.n	800ac02 <__hexnan+0x7e>
 800abd0:	9b02      	ldr	r3, [sp, #8]
 800abd2:	459b      	cmp	fp, r3
 800abd4:	dd13      	ble.n	800abfe <__hexnan+0x7a>
 800abd6:	454c      	cmp	r4, r9
 800abd8:	d206      	bcs.n	800abe8 <__hexnan+0x64>
 800abda:	2d07      	cmp	r5, #7
 800abdc:	dc04      	bgt.n	800abe8 <__hexnan+0x64>
 800abde:	462a      	mov	r2, r5
 800abe0:	4649      	mov	r1, r9
 800abe2:	4620      	mov	r0, r4
 800abe4:	f7ff ffa8 	bl	800ab38 <L_shift>
 800abe8:	4544      	cmp	r4, r8
 800abea:	d950      	bls.n	800ac8e <__hexnan+0x10a>
 800abec:	2300      	movs	r3, #0
 800abee:	f1a4 0904 	sub.w	r9, r4, #4
 800abf2:	f844 3c04 	str.w	r3, [r4, #-4]
 800abf6:	f8cd b008 	str.w	fp, [sp, #8]
 800abfa:	464c      	mov	r4, r9
 800abfc:	461d      	mov	r5, r3
 800abfe:	9903      	ldr	r1, [sp, #12]
 800ac00:	e7d7      	b.n	800abb2 <__hexnan+0x2e>
 800ac02:	2a29      	cmp	r2, #41	; 0x29
 800ac04:	d155      	bne.n	800acb2 <__hexnan+0x12e>
 800ac06:	3102      	adds	r1, #2
 800ac08:	f8ca 1000 	str.w	r1, [sl]
 800ac0c:	f1bb 0f00 	cmp.w	fp, #0
 800ac10:	d04f      	beq.n	800acb2 <__hexnan+0x12e>
 800ac12:	454c      	cmp	r4, r9
 800ac14:	d206      	bcs.n	800ac24 <__hexnan+0xa0>
 800ac16:	2d07      	cmp	r5, #7
 800ac18:	dc04      	bgt.n	800ac24 <__hexnan+0xa0>
 800ac1a:	462a      	mov	r2, r5
 800ac1c:	4649      	mov	r1, r9
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f7ff ff8a 	bl	800ab38 <L_shift>
 800ac24:	4544      	cmp	r4, r8
 800ac26:	d934      	bls.n	800ac92 <__hexnan+0x10e>
 800ac28:	f1a8 0204 	sub.w	r2, r8, #4
 800ac2c:	4623      	mov	r3, r4
 800ac2e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ac32:	f842 1f04 	str.w	r1, [r2, #4]!
 800ac36:	429f      	cmp	r7, r3
 800ac38:	d2f9      	bcs.n	800ac2e <__hexnan+0xaa>
 800ac3a:	1b3b      	subs	r3, r7, r4
 800ac3c:	f023 0303 	bic.w	r3, r3, #3
 800ac40:	3304      	adds	r3, #4
 800ac42:	3e03      	subs	r6, #3
 800ac44:	3401      	adds	r4, #1
 800ac46:	42a6      	cmp	r6, r4
 800ac48:	bf38      	it	cc
 800ac4a:	2304      	movcc	r3, #4
 800ac4c:	4443      	add	r3, r8
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f843 2b04 	str.w	r2, [r3], #4
 800ac54:	429f      	cmp	r7, r3
 800ac56:	d2fb      	bcs.n	800ac50 <__hexnan+0xcc>
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	b91b      	cbnz	r3, 800ac64 <__hexnan+0xe0>
 800ac5c:	4547      	cmp	r7, r8
 800ac5e:	d126      	bne.n	800acae <__hexnan+0x12a>
 800ac60:	2301      	movs	r3, #1
 800ac62:	603b      	str	r3, [r7, #0]
 800ac64:	2005      	movs	r0, #5
 800ac66:	e025      	b.n	800acb4 <__hexnan+0x130>
 800ac68:	3501      	adds	r5, #1
 800ac6a:	2d08      	cmp	r5, #8
 800ac6c:	f10b 0b01 	add.w	fp, fp, #1
 800ac70:	dd06      	ble.n	800ac80 <__hexnan+0xfc>
 800ac72:	4544      	cmp	r4, r8
 800ac74:	d9c3      	bls.n	800abfe <__hexnan+0x7a>
 800ac76:	2300      	movs	r3, #0
 800ac78:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac7c:	2501      	movs	r5, #1
 800ac7e:	3c04      	subs	r4, #4
 800ac80:	6822      	ldr	r2, [r4, #0]
 800ac82:	f000 000f 	and.w	r0, r0, #15
 800ac86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ac8a:	6020      	str	r0, [r4, #0]
 800ac8c:	e7b7      	b.n	800abfe <__hexnan+0x7a>
 800ac8e:	2508      	movs	r5, #8
 800ac90:	e7b5      	b.n	800abfe <__hexnan+0x7a>
 800ac92:	9b01      	ldr	r3, [sp, #4]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d0df      	beq.n	800ac58 <__hexnan+0xd4>
 800ac98:	f1c3 0320 	rsb	r3, r3, #32
 800ac9c:	f04f 32ff 	mov.w	r2, #4294967295
 800aca0:	40da      	lsrs	r2, r3
 800aca2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aca6:	4013      	ands	r3, r2
 800aca8:	f846 3c04 	str.w	r3, [r6, #-4]
 800acac:	e7d4      	b.n	800ac58 <__hexnan+0xd4>
 800acae:	3f04      	subs	r7, #4
 800acb0:	e7d2      	b.n	800ac58 <__hexnan+0xd4>
 800acb2:	2004      	movs	r0, #4
 800acb4:	b007      	add	sp, #28
 800acb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800acba <__ascii_mbtowc>:
 800acba:	b082      	sub	sp, #8
 800acbc:	b901      	cbnz	r1, 800acc0 <__ascii_mbtowc+0x6>
 800acbe:	a901      	add	r1, sp, #4
 800acc0:	b142      	cbz	r2, 800acd4 <__ascii_mbtowc+0x1a>
 800acc2:	b14b      	cbz	r3, 800acd8 <__ascii_mbtowc+0x1e>
 800acc4:	7813      	ldrb	r3, [r2, #0]
 800acc6:	600b      	str	r3, [r1, #0]
 800acc8:	7812      	ldrb	r2, [r2, #0]
 800acca:	1e10      	subs	r0, r2, #0
 800accc:	bf18      	it	ne
 800acce:	2001      	movne	r0, #1
 800acd0:	b002      	add	sp, #8
 800acd2:	4770      	bx	lr
 800acd4:	4610      	mov	r0, r2
 800acd6:	e7fb      	b.n	800acd0 <__ascii_mbtowc+0x16>
 800acd8:	f06f 0001 	mvn.w	r0, #1
 800acdc:	e7f8      	b.n	800acd0 <__ascii_mbtowc+0x16>
	...

0800ace0 <_Balloc>:
 800ace0:	b570      	push	{r4, r5, r6, lr}
 800ace2:	69c6      	ldr	r6, [r0, #28]
 800ace4:	4604      	mov	r4, r0
 800ace6:	460d      	mov	r5, r1
 800ace8:	b976      	cbnz	r6, 800ad08 <_Balloc+0x28>
 800acea:	2010      	movs	r0, #16
 800acec:	f7fc fcde 	bl	80076ac <malloc>
 800acf0:	4602      	mov	r2, r0
 800acf2:	61e0      	str	r0, [r4, #28]
 800acf4:	b920      	cbnz	r0, 800ad00 <_Balloc+0x20>
 800acf6:	4b18      	ldr	r3, [pc, #96]	; (800ad58 <_Balloc+0x78>)
 800acf8:	4818      	ldr	r0, [pc, #96]	; (800ad5c <_Balloc+0x7c>)
 800acfa:	216b      	movs	r1, #107	; 0x6b
 800acfc:	f7fe fda2 	bl	8009844 <__assert_func>
 800ad00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad04:	6006      	str	r6, [r0, #0]
 800ad06:	60c6      	str	r6, [r0, #12]
 800ad08:	69e6      	ldr	r6, [r4, #28]
 800ad0a:	68f3      	ldr	r3, [r6, #12]
 800ad0c:	b183      	cbz	r3, 800ad30 <_Balloc+0x50>
 800ad0e:	69e3      	ldr	r3, [r4, #28]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad16:	b9b8      	cbnz	r0, 800ad48 <_Balloc+0x68>
 800ad18:	2101      	movs	r1, #1
 800ad1a:	fa01 f605 	lsl.w	r6, r1, r5
 800ad1e:	1d72      	adds	r2, r6, #5
 800ad20:	0092      	lsls	r2, r2, #2
 800ad22:	4620      	mov	r0, r4
 800ad24:	f000 fecf 	bl	800bac6 <_calloc_r>
 800ad28:	b160      	cbz	r0, 800ad44 <_Balloc+0x64>
 800ad2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad2e:	e00e      	b.n	800ad4e <_Balloc+0x6e>
 800ad30:	2221      	movs	r2, #33	; 0x21
 800ad32:	2104      	movs	r1, #4
 800ad34:	4620      	mov	r0, r4
 800ad36:	f000 fec6 	bl	800bac6 <_calloc_r>
 800ad3a:	69e3      	ldr	r3, [r4, #28]
 800ad3c:	60f0      	str	r0, [r6, #12]
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1e4      	bne.n	800ad0e <_Balloc+0x2e>
 800ad44:	2000      	movs	r0, #0
 800ad46:	bd70      	pop	{r4, r5, r6, pc}
 800ad48:	6802      	ldr	r2, [r0, #0]
 800ad4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad4e:	2300      	movs	r3, #0
 800ad50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad54:	e7f7      	b.n	800ad46 <_Balloc+0x66>
 800ad56:	bf00      	nop
 800ad58:	0800da22 	.word	0x0800da22
 800ad5c:	0800dbad 	.word	0x0800dbad

0800ad60 <_Bfree>:
 800ad60:	b570      	push	{r4, r5, r6, lr}
 800ad62:	69c6      	ldr	r6, [r0, #28]
 800ad64:	4605      	mov	r5, r0
 800ad66:	460c      	mov	r4, r1
 800ad68:	b976      	cbnz	r6, 800ad88 <_Bfree+0x28>
 800ad6a:	2010      	movs	r0, #16
 800ad6c:	f7fc fc9e 	bl	80076ac <malloc>
 800ad70:	4602      	mov	r2, r0
 800ad72:	61e8      	str	r0, [r5, #28]
 800ad74:	b920      	cbnz	r0, 800ad80 <_Bfree+0x20>
 800ad76:	4b09      	ldr	r3, [pc, #36]	; (800ad9c <_Bfree+0x3c>)
 800ad78:	4809      	ldr	r0, [pc, #36]	; (800ada0 <_Bfree+0x40>)
 800ad7a:	218f      	movs	r1, #143	; 0x8f
 800ad7c:	f7fe fd62 	bl	8009844 <__assert_func>
 800ad80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad84:	6006      	str	r6, [r0, #0]
 800ad86:	60c6      	str	r6, [r0, #12]
 800ad88:	b13c      	cbz	r4, 800ad9a <_Bfree+0x3a>
 800ad8a:	69eb      	ldr	r3, [r5, #28]
 800ad8c:	6862      	ldr	r2, [r4, #4]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad94:	6021      	str	r1, [r4, #0]
 800ad96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad9a:	bd70      	pop	{r4, r5, r6, pc}
 800ad9c:	0800da22 	.word	0x0800da22
 800ada0:	0800dbad 	.word	0x0800dbad

0800ada4 <__multadd>:
 800ada4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada8:	690d      	ldr	r5, [r1, #16]
 800adaa:	4607      	mov	r7, r0
 800adac:	460c      	mov	r4, r1
 800adae:	461e      	mov	r6, r3
 800adb0:	f101 0c14 	add.w	ip, r1, #20
 800adb4:	2000      	movs	r0, #0
 800adb6:	f8dc 3000 	ldr.w	r3, [ip]
 800adba:	b299      	uxth	r1, r3
 800adbc:	fb02 6101 	mla	r1, r2, r1, r6
 800adc0:	0c1e      	lsrs	r6, r3, #16
 800adc2:	0c0b      	lsrs	r3, r1, #16
 800adc4:	fb02 3306 	mla	r3, r2, r6, r3
 800adc8:	b289      	uxth	r1, r1
 800adca:	3001      	adds	r0, #1
 800adcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800add0:	4285      	cmp	r5, r0
 800add2:	f84c 1b04 	str.w	r1, [ip], #4
 800add6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800adda:	dcec      	bgt.n	800adb6 <__multadd+0x12>
 800addc:	b30e      	cbz	r6, 800ae22 <__multadd+0x7e>
 800adde:	68a3      	ldr	r3, [r4, #8]
 800ade0:	42ab      	cmp	r3, r5
 800ade2:	dc19      	bgt.n	800ae18 <__multadd+0x74>
 800ade4:	6861      	ldr	r1, [r4, #4]
 800ade6:	4638      	mov	r0, r7
 800ade8:	3101      	adds	r1, #1
 800adea:	f7ff ff79 	bl	800ace0 <_Balloc>
 800adee:	4680      	mov	r8, r0
 800adf0:	b928      	cbnz	r0, 800adfe <__multadd+0x5a>
 800adf2:	4602      	mov	r2, r0
 800adf4:	4b0c      	ldr	r3, [pc, #48]	; (800ae28 <__multadd+0x84>)
 800adf6:	480d      	ldr	r0, [pc, #52]	; (800ae2c <__multadd+0x88>)
 800adf8:	21ba      	movs	r1, #186	; 0xba
 800adfa:	f7fe fd23 	bl	8009844 <__assert_func>
 800adfe:	6922      	ldr	r2, [r4, #16]
 800ae00:	3202      	adds	r2, #2
 800ae02:	f104 010c 	add.w	r1, r4, #12
 800ae06:	0092      	lsls	r2, r2, #2
 800ae08:	300c      	adds	r0, #12
 800ae0a:	f7fe fcfe 	bl	800980a <memcpy>
 800ae0e:	4621      	mov	r1, r4
 800ae10:	4638      	mov	r0, r7
 800ae12:	f7ff ffa5 	bl	800ad60 <_Bfree>
 800ae16:	4644      	mov	r4, r8
 800ae18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae1c:	3501      	adds	r5, #1
 800ae1e:	615e      	str	r6, [r3, #20]
 800ae20:	6125      	str	r5, [r4, #16]
 800ae22:	4620      	mov	r0, r4
 800ae24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae28:	0800db3c 	.word	0x0800db3c
 800ae2c:	0800dbad 	.word	0x0800dbad

0800ae30 <__s2b>:
 800ae30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae34:	460c      	mov	r4, r1
 800ae36:	4615      	mov	r5, r2
 800ae38:	461f      	mov	r7, r3
 800ae3a:	2209      	movs	r2, #9
 800ae3c:	3308      	adds	r3, #8
 800ae3e:	4606      	mov	r6, r0
 800ae40:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae44:	2100      	movs	r1, #0
 800ae46:	2201      	movs	r2, #1
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	db09      	blt.n	800ae60 <__s2b+0x30>
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	f7ff ff47 	bl	800ace0 <_Balloc>
 800ae52:	b940      	cbnz	r0, 800ae66 <__s2b+0x36>
 800ae54:	4602      	mov	r2, r0
 800ae56:	4b19      	ldr	r3, [pc, #100]	; (800aebc <__s2b+0x8c>)
 800ae58:	4819      	ldr	r0, [pc, #100]	; (800aec0 <__s2b+0x90>)
 800ae5a:	21d3      	movs	r1, #211	; 0xd3
 800ae5c:	f7fe fcf2 	bl	8009844 <__assert_func>
 800ae60:	0052      	lsls	r2, r2, #1
 800ae62:	3101      	adds	r1, #1
 800ae64:	e7f0      	b.n	800ae48 <__s2b+0x18>
 800ae66:	9b08      	ldr	r3, [sp, #32]
 800ae68:	6143      	str	r3, [r0, #20]
 800ae6a:	2d09      	cmp	r5, #9
 800ae6c:	f04f 0301 	mov.w	r3, #1
 800ae70:	6103      	str	r3, [r0, #16]
 800ae72:	dd16      	ble.n	800aea2 <__s2b+0x72>
 800ae74:	f104 0909 	add.w	r9, r4, #9
 800ae78:	46c8      	mov	r8, r9
 800ae7a:	442c      	add	r4, r5
 800ae7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ae80:	4601      	mov	r1, r0
 800ae82:	3b30      	subs	r3, #48	; 0x30
 800ae84:	220a      	movs	r2, #10
 800ae86:	4630      	mov	r0, r6
 800ae88:	f7ff ff8c 	bl	800ada4 <__multadd>
 800ae8c:	45a0      	cmp	r8, r4
 800ae8e:	d1f5      	bne.n	800ae7c <__s2b+0x4c>
 800ae90:	f1a5 0408 	sub.w	r4, r5, #8
 800ae94:	444c      	add	r4, r9
 800ae96:	1b2d      	subs	r5, r5, r4
 800ae98:	1963      	adds	r3, r4, r5
 800ae9a:	42bb      	cmp	r3, r7
 800ae9c:	db04      	blt.n	800aea8 <__s2b+0x78>
 800ae9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aea2:	340a      	adds	r4, #10
 800aea4:	2509      	movs	r5, #9
 800aea6:	e7f6      	b.n	800ae96 <__s2b+0x66>
 800aea8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aeac:	4601      	mov	r1, r0
 800aeae:	3b30      	subs	r3, #48	; 0x30
 800aeb0:	220a      	movs	r2, #10
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f7ff ff76 	bl	800ada4 <__multadd>
 800aeb8:	e7ee      	b.n	800ae98 <__s2b+0x68>
 800aeba:	bf00      	nop
 800aebc:	0800db3c 	.word	0x0800db3c
 800aec0:	0800dbad 	.word	0x0800dbad

0800aec4 <__hi0bits>:
 800aec4:	0c03      	lsrs	r3, r0, #16
 800aec6:	041b      	lsls	r3, r3, #16
 800aec8:	b9d3      	cbnz	r3, 800af00 <__hi0bits+0x3c>
 800aeca:	0400      	lsls	r0, r0, #16
 800aecc:	2310      	movs	r3, #16
 800aece:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aed2:	bf04      	itt	eq
 800aed4:	0200      	lsleq	r0, r0, #8
 800aed6:	3308      	addeq	r3, #8
 800aed8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aedc:	bf04      	itt	eq
 800aede:	0100      	lsleq	r0, r0, #4
 800aee0:	3304      	addeq	r3, #4
 800aee2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aee6:	bf04      	itt	eq
 800aee8:	0080      	lsleq	r0, r0, #2
 800aeea:	3302      	addeq	r3, #2
 800aeec:	2800      	cmp	r0, #0
 800aeee:	db05      	blt.n	800aefc <__hi0bits+0x38>
 800aef0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aef4:	f103 0301 	add.w	r3, r3, #1
 800aef8:	bf08      	it	eq
 800aefa:	2320      	moveq	r3, #32
 800aefc:	4618      	mov	r0, r3
 800aefe:	4770      	bx	lr
 800af00:	2300      	movs	r3, #0
 800af02:	e7e4      	b.n	800aece <__hi0bits+0xa>

0800af04 <__lo0bits>:
 800af04:	6803      	ldr	r3, [r0, #0]
 800af06:	f013 0207 	ands.w	r2, r3, #7
 800af0a:	d00c      	beq.n	800af26 <__lo0bits+0x22>
 800af0c:	07d9      	lsls	r1, r3, #31
 800af0e:	d422      	bmi.n	800af56 <__lo0bits+0x52>
 800af10:	079a      	lsls	r2, r3, #30
 800af12:	bf49      	itett	mi
 800af14:	085b      	lsrmi	r3, r3, #1
 800af16:	089b      	lsrpl	r3, r3, #2
 800af18:	6003      	strmi	r3, [r0, #0]
 800af1a:	2201      	movmi	r2, #1
 800af1c:	bf5c      	itt	pl
 800af1e:	6003      	strpl	r3, [r0, #0]
 800af20:	2202      	movpl	r2, #2
 800af22:	4610      	mov	r0, r2
 800af24:	4770      	bx	lr
 800af26:	b299      	uxth	r1, r3
 800af28:	b909      	cbnz	r1, 800af2e <__lo0bits+0x2a>
 800af2a:	0c1b      	lsrs	r3, r3, #16
 800af2c:	2210      	movs	r2, #16
 800af2e:	b2d9      	uxtb	r1, r3
 800af30:	b909      	cbnz	r1, 800af36 <__lo0bits+0x32>
 800af32:	3208      	adds	r2, #8
 800af34:	0a1b      	lsrs	r3, r3, #8
 800af36:	0719      	lsls	r1, r3, #28
 800af38:	bf04      	itt	eq
 800af3a:	091b      	lsreq	r3, r3, #4
 800af3c:	3204      	addeq	r2, #4
 800af3e:	0799      	lsls	r1, r3, #30
 800af40:	bf04      	itt	eq
 800af42:	089b      	lsreq	r3, r3, #2
 800af44:	3202      	addeq	r2, #2
 800af46:	07d9      	lsls	r1, r3, #31
 800af48:	d403      	bmi.n	800af52 <__lo0bits+0x4e>
 800af4a:	085b      	lsrs	r3, r3, #1
 800af4c:	f102 0201 	add.w	r2, r2, #1
 800af50:	d003      	beq.n	800af5a <__lo0bits+0x56>
 800af52:	6003      	str	r3, [r0, #0]
 800af54:	e7e5      	b.n	800af22 <__lo0bits+0x1e>
 800af56:	2200      	movs	r2, #0
 800af58:	e7e3      	b.n	800af22 <__lo0bits+0x1e>
 800af5a:	2220      	movs	r2, #32
 800af5c:	e7e1      	b.n	800af22 <__lo0bits+0x1e>
	...

0800af60 <__i2b>:
 800af60:	b510      	push	{r4, lr}
 800af62:	460c      	mov	r4, r1
 800af64:	2101      	movs	r1, #1
 800af66:	f7ff febb 	bl	800ace0 <_Balloc>
 800af6a:	4602      	mov	r2, r0
 800af6c:	b928      	cbnz	r0, 800af7a <__i2b+0x1a>
 800af6e:	4b05      	ldr	r3, [pc, #20]	; (800af84 <__i2b+0x24>)
 800af70:	4805      	ldr	r0, [pc, #20]	; (800af88 <__i2b+0x28>)
 800af72:	f240 1145 	movw	r1, #325	; 0x145
 800af76:	f7fe fc65 	bl	8009844 <__assert_func>
 800af7a:	2301      	movs	r3, #1
 800af7c:	6144      	str	r4, [r0, #20]
 800af7e:	6103      	str	r3, [r0, #16]
 800af80:	bd10      	pop	{r4, pc}
 800af82:	bf00      	nop
 800af84:	0800db3c 	.word	0x0800db3c
 800af88:	0800dbad 	.word	0x0800dbad

0800af8c <__multiply>:
 800af8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af90:	4691      	mov	r9, r2
 800af92:	690a      	ldr	r2, [r1, #16]
 800af94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af98:	429a      	cmp	r2, r3
 800af9a:	bfb8      	it	lt
 800af9c:	460b      	movlt	r3, r1
 800af9e:	460c      	mov	r4, r1
 800afa0:	bfbc      	itt	lt
 800afa2:	464c      	movlt	r4, r9
 800afa4:	4699      	movlt	r9, r3
 800afa6:	6927      	ldr	r7, [r4, #16]
 800afa8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800afac:	68a3      	ldr	r3, [r4, #8]
 800afae:	6861      	ldr	r1, [r4, #4]
 800afb0:	eb07 060a 	add.w	r6, r7, sl
 800afb4:	42b3      	cmp	r3, r6
 800afb6:	b085      	sub	sp, #20
 800afb8:	bfb8      	it	lt
 800afba:	3101      	addlt	r1, #1
 800afbc:	f7ff fe90 	bl	800ace0 <_Balloc>
 800afc0:	b930      	cbnz	r0, 800afd0 <__multiply+0x44>
 800afc2:	4602      	mov	r2, r0
 800afc4:	4b44      	ldr	r3, [pc, #272]	; (800b0d8 <__multiply+0x14c>)
 800afc6:	4845      	ldr	r0, [pc, #276]	; (800b0dc <__multiply+0x150>)
 800afc8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800afcc:	f7fe fc3a 	bl	8009844 <__assert_func>
 800afd0:	f100 0514 	add.w	r5, r0, #20
 800afd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800afd8:	462b      	mov	r3, r5
 800afda:	2200      	movs	r2, #0
 800afdc:	4543      	cmp	r3, r8
 800afde:	d321      	bcc.n	800b024 <__multiply+0x98>
 800afe0:	f104 0314 	add.w	r3, r4, #20
 800afe4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800afe8:	f109 0314 	add.w	r3, r9, #20
 800afec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aff0:	9202      	str	r2, [sp, #8]
 800aff2:	1b3a      	subs	r2, r7, r4
 800aff4:	3a15      	subs	r2, #21
 800aff6:	f022 0203 	bic.w	r2, r2, #3
 800affa:	3204      	adds	r2, #4
 800affc:	f104 0115 	add.w	r1, r4, #21
 800b000:	428f      	cmp	r7, r1
 800b002:	bf38      	it	cc
 800b004:	2204      	movcc	r2, #4
 800b006:	9201      	str	r2, [sp, #4]
 800b008:	9a02      	ldr	r2, [sp, #8]
 800b00a:	9303      	str	r3, [sp, #12]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d80c      	bhi.n	800b02a <__multiply+0x9e>
 800b010:	2e00      	cmp	r6, #0
 800b012:	dd03      	ble.n	800b01c <__multiply+0x90>
 800b014:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d05b      	beq.n	800b0d4 <__multiply+0x148>
 800b01c:	6106      	str	r6, [r0, #16]
 800b01e:	b005      	add	sp, #20
 800b020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b024:	f843 2b04 	str.w	r2, [r3], #4
 800b028:	e7d8      	b.n	800afdc <__multiply+0x50>
 800b02a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b02e:	f1ba 0f00 	cmp.w	sl, #0
 800b032:	d024      	beq.n	800b07e <__multiply+0xf2>
 800b034:	f104 0e14 	add.w	lr, r4, #20
 800b038:	46a9      	mov	r9, r5
 800b03a:	f04f 0c00 	mov.w	ip, #0
 800b03e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b042:	f8d9 1000 	ldr.w	r1, [r9]
 800b046:	fa1f fb82 	uxth.w	fp, r2
 800b04a:	b289      	uxth	r1, r1
 800b04c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b050:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b054:	f8d9 2000 	ldr.w	r2, [r9]
 800b058:	4461      	add	r1, ip
 800b05a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b05e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b062:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b066:	b289      	uxth	r1, r1
 800b068:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b06c:	4577      	cmp	r7, lr
 800b06e:	f849 1b04 	str.w	r1, [r9], #4
 800b072:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b076:	d8e2      	bhi.n	800b03e <__multiply+0xb2>
 800b078:	9a01      	ldr	r2, [sp, #4]
 800b07a:	f845 c002 	str.w	ip, [r5, r2]
 800b07e:	9a03      	ldr	r2, [sp, #12]
 800b080:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b084:	3304      	adds	r3, #4
 800b086:	f1b9 0f00 	cmp.w	r9, #0
 800b08a:	d021      	beq.n	800b0d0 <__multiply+0x144>
 800b08c:	6829      	ldr	r1, [r5, #0]
 800b08e:	f104 0c14 	add.w	ip, r4, #20
 800b092:	46ae      	mov	lr, r5
 800b094:	f04f 0a00 	mov.w	sl, #0
 800b098:	f8bc b000 	ldrh.w	fp, [ip]
 800b09c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b0a0:	fb09 220b 	mla	r2, r9, fp, r2
 800b0a4:	4452      	add	r2, sl
 800b0a6:	b289      	uxth	r1, r1
 800b0a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b0ac:	f84e 1b04 	str.w	r1, [lr], #4
 800b0b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b0b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b0b8:	f8be 1000 	ldrh.w	r1, [lr]
 800b0bc:	fb09 110a 	mla	r1, r9, sl, r1
 800b0c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b0c4:	4567      	cmp	r7, ip
 800b0c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b0ca:	d8e5      	bhi.n	800b098 <__multiply+0x10c>
 800b0cc:	9a01      	ldr	r2, [sp, #4]
 800b0ce:	50a9      	str	r1, [r5, r2]
 800b0d0:	3504      	adds	r5, #4
 800b0d2:	e799      	b.n	800b008 <__multiply+0x7c>
 800b0d4:	3e01      	subs	r6, #1
 800b0d6:	e79b      	b.n	800b010 <__multiply+0x84>
 800b0d8:	0800db3c 	.word	0x0800db3c
 800b0dc:	0800dbad 	.word	0x0800dbad

0800b0e0 <__pow5mult>:
 800b0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0e4:	4615      	mov	r5, r2
 800b0e6:	f012 0203 	ands.w	r2, r2, #3
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	460f      	mov	r7, r1
 800b0ee:	d007      	beq.n	800b100 <__pow5mult+0x20>
 800b0f0:	4c25      	ldr	r4, [pc, #148]	; (800b188 <__pow5mult+0xa8>)
 800b0f2:	3a01      	subs	r2, #1
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0fa:	f7ff fe53 	bl	800ada4 <__multadd>
 800b0fe:	4607      	mov	r7, r0
 800b100:	10ad      	asrs	r5, r5, #2
 800b102:	d03d      	beq.n	800b180 <__pow5mult+0xa0>
 800b104:	69f4      	ldr	r4, [r6, #28]
 800b106:	b97c      	cbnz	r4, 800b128 <__pow5mult+0x48>
 800b108:	2010      	movs	r0, #16
 800b10a:	f7fc facf 	bl	80076ac <malloc>
 800b10e:	4602      	mov	r2, r0
 800b110:	61f0      	str	r0, [r6, #28]
 800b112:	b928      	cbnz	r0, 800b120 <__pow5mult+0x40>
 800b114:	4b1d      	ldr	r3, [pc, #116]	; (800b18c <__pow5mult+0xac>)
 800b116:	481e      	ldr	r0, [pc, #120]	; (800b190 <__pow5mult+0xb0>)
 800b118:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b11c:	f7fe fb92 	bl	8009844 <__assert_func>
 800b120:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b124:	6004      	str	r4, [r0, #0]
 800b126:	60c4      	str	r4, [r0, #12]
 800b128:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b12c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b130:	b94c      	cbnz	r4, 800b146 <__pow5mult+0x66>
 800b132:	f240 2171 	movw	r1, #625	; 0x271
 800b136:	4630      	mov	r0, r6
 800b138:	f7ff ff12 	bl	800af60 <__i2b>
 800b13c:	2300      	movs	r3, #0
 800b13e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b142:	4604      	mov	r4, r0
 800b144:	6003      	str	r3, [r0, #0]
 800b146:	f04f 0900 	mov.w	r9, #0
 800b14a:	07eb      	lsls	r3, r5, #31
 800b14c:	d50a      	bpl.n	800b164 <__pow5mult+0x84>
 800b14e:	4639      	mov	r1, r7
 800b150:	4622      	mov	r2, r4
 800b152:	4630      	mov	r0, r6
 800b154:	f7ff ff1a 	bl	800af8c <__multiply>
 800b158:	4639      	mov	r1, r7
 800b15a:	4680      	mov	r8, r0
 800b15c:	4630      	mov	r0, r6
 800b15e:	f7ff fdff 	bl	800ad60 <_Bfree>
 800b162:	4647      	mov	r7, r8
 800b164:	106d      	asrs	r5, r5, #1
 800b166:	d00b      	beq.n	800b180 <__pow5mult+0xa0>
 800b168:	6820      	ldr	r0, [r4, #0]
 800b16a:	b938      	cbnz	r0, 800b17c <__pow5mult+0x9c>
 800b16c:	4622      	mov	r2, r4
 800b16e:	4621      	mov	r1, r4
 800b170:	4630      	mov	r0, r6
 800b172:	f7ff ff0b 	bl	800af8c <__multiply>
 800b176:	6020      	str	r0, [r4, #0]
 800b178:	f8c0 9000 	str.w	r9, [r0]
 800b17c:	4604      	mov	r4, r0
 800b17e:	e7e4      	b.n	800b14a <__pow5mult+0x6a>
 800b180:	4638      	mov	r0, r7
 800b182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b186:	bf00      	nop
 800b188:	0800dcf8 	.word	0x0800dcf8
 800b18c:	0800da22 	.word	0x0800da22
 800b190:	0800dbad 	.word	0x0800dbad

0800b194 <__lshift>:
 800b194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b198:	460c      	mov	r4, r1
 800b19a:	6849      	ldr	r1, [r1, #4]
 800b19c:	6923      	ldr	r3, [r4, #16]
 800b19e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b1a2:	68a3      	ldr	r3, [r4, #8]
 800b1a4:	4607      	mov	r7, r0
 800b1a6:	4691      	mov	r9, r2
 800b1a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b1ac:	f108 0601 	add.w	r6, r8, #1
 800b1b0:	42b3      	cmp	r3, r6
 800b1b2:	db0b      	blt.n	800b1cc <__lshift+0x38>
 800b1b4:	4638      	mov	r0, r7
 800b1b6:	f7ff fd93 	bl	800ace0 <_Balloc>
 800b1ba:	4605      	mov	r5, r0
 800b1bc:	b948      	cbnz	r0, 800b1d2 <__lshift+0x3e>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	4b28      	ldr	r3, [pc, #160]	; (800b264 <__lshift+0xd0>)
 800b1c2:	4829      	ldr	r0, [pc, #164]	; (800b268 <__lshift+0xd4>)
 800b1c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b1c8:	f7fe fb3c 	bl	8009844 <__assert_func>
 800b1cc:	3101      	adds	r1, #1
 800b1ce:	005b      	lsls	r3, r3, #1
 800b1d0:	e7ee      	b.n	800b1b0 <__lshift+0x1c>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f100 0114 	add.w	r1, r0, #20
 800b1d8:	f100 0210 	add.w	r2, r0, #16
 800b1dc:	4618      	mov	r0, r3
 800b1de:	4553      	cmp	r3, sl
 800b1e0:	db33      	blt.n	800b24a <__lshift+0xb6>
 800b1e2:	6920      	ldr	r0, [r4, #16]
 800b1e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b1e8:	f104 0314 	add.w	r3, r4, #20
 800b1ec:	f019 091f 	ands.w	r9, r9, #31
 800b1f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b1f8:	d02b      	beq.n	800b252 <__lshift+0xbe>
 800b1fa:	f1c9 0e20 	rsb	lr, r9, #32
 800b1fe:	468a      	mov	sl, r1
 800b200:	2200      	movs	r2, #0
 800b202:	6818      	ldr	r0, [r3, #0]
 800b204:	fa00 f009 	lsl.w	r0, r0, r9
 800b208:	4310      	orrs	r0, r2
 800b20a:	f84a 0b04 	str.w	r0, [sl], #4
 800b20e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b212:	459c      	cmp	ip, r3
 800b214:	fa22 f20e 	lsr.w	r2, r2, lr
 800b218:	d8f3      	bhi.n	800b202 <__lshift+0x6e>
 800b21a:	ebac 0304 	sub.w	r3, ip, r4
 800b21e:	3b15      	subs	r3, #21
 800b220:	f023 0303 	bic.w	r3, r3, #3
 800b224:	3304      	adds	r3, #4
 800b226:	f104 0015 	add.w	r0, r4, #21
 800b22a:	4584      	cmp	ip, r0
 800b22c:	bf38      	it	cc
 800b22e:	2304      	movcc	r3, #4
 800b230:	50ca      	str	r2, [r1, r3]
 800b232:	b10a      	cbz	r2, 800b238 <__lshift+0xa4>
 800b234:	f108 0602 	add.w	r6, r8, #2
 800b238:	3e01      	subs	r6, #1
 800b23a:	4638      	mov	r0, r7
 800b23c:	612e      	str	r6, [r5, #16]
 800b23e:	4621      	mov	r1, r4
 800b240:	f7ff fd8e 	bl	800ad60 <_Bfree>
 800b244:	4628      	mov	r0, r5
 800b246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b24a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b24e:	3301      	adds	r3, #1
 800b250:	e7c5      	b.n	800b1de <__lshift+0x4a>
 800b252:	3904      	subs	r1, #4
 800b254:	f853 2b04 	ldr.w	r2, [r3], #4
 800b258:	f841 2f04 	str.w	r2, [r1, #4]!
 800b25c:	459c      	cmp	ip, r3
 800b25e:	d8f9      	bhi.n	800b254 <__lshift+0xc0>
 800b260:	e7ea      	b.n	800b238 <__lshift+0xa4>
 800b262:	bf00      	nop
 800b264:	0800db3c 	.word	0x0800db3c
 800b268:	0800dbad 	.word	0x0800dbad

0800b26c <__mcmp>:
 800b26c:	b530      	push	{r4, r5, lr}
 800b26e:	6902      	ldr	r2, [r0, #16]
 800b270:	690c      	ldr	r4, [r1, #16]
 800b272:	1b12      	subs	r2, r2, r4
 800b274:	d10e      	bne.n	800b294 <__mcmp+0x28>
 800b276:	f100 0314 	add.w	r3, r0, #20
 800b27a:	3114      	adds	r1, #20
 800b27c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b280:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b284:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b288:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b28c:	42a5      	cmp	r5, r4
 800b28e:	d003      	beq.n	800b298 <__mcmp+0x2c>
 800b290:	d305      	bcc.n	800b29e <__mcmp+0x32>
 800b292:	2201      	movs	r2, #1
 800b294:	4610      	mov	r0, r2
 800b296:	bd30      	pop	{r4, r5, pc}
 800b298:	4283      	cmp	r3, r0
 800b29a:	d3f3      	bcc.n	800b284 <__mcmp+0x18>
 800b29c:	e7fa      	b.n	800b294 <__mcmp+0x28>
 800b29e:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a2:	e7f7      	b.n	800b294 <__mcmp+0x28>

0800b2a4 <__mdiff>:
 800b2a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	4611      	mov	r1, r2
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	4690      	mov	r8, r2
 800b2b2:	f7ff ffdb 	bl	800b26c <__mcmp>
 800b2b6:	1e05      	subs	r5, r0, #0
 800b2b8:	d110      	bne.n	800b2dc <__mdiff+0x38>
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	4630      	mov	r0, r6
 800b2be:	f7ff fd0f 	bl	800ace0 <_Balloc>
 800b2c2:	b930      	cbnz	r0, 800b2d2 <__mdiff+0x2e>
 800b2c4:	4b3a      	ldr	r3, [pc, #232]	; (800b3b0 <__mdiff+0x10c>)
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	f240 2137 	movw	r1, #567	; 0x237
 800b2cc:	4839      	ldr	r0, [pc, #228]	; (800b3b4 <__mdiff+0x110>)
 800b2ce:	f7fe fab9 	bl	8009844 <__assert_func>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b2d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2dc:	bfa4      	itt	ge
 800b2de:	4643      	movge	r3, r8
 800b2e0:	46a0      	movge	r8, r4
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b2e8:	bfa6      	itte	ge
 800b2ea:	461c      	movge	r4, r3
 800b2ec:	2500      	movge	r5, #0
 800b2ee:	2501      	movlt	r5, #1
 800b2f0:	f7ff fcf6 	bl	800ace0 <_Balloc>
 800b2f4:	b920      	cbnz	r0, 800b300 <__mdiff+0x5c>
 800b2f6:	4b2e      	ldr	r3, [pc, #184]	; (800b3b0 <__mdiff+0x10c>)
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	f240 2145 	movw	r1, #581	; 0x245
 800b2fe:	e7e5      	b.n	800b2cc <__mdiff+0x28>
 800b300:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b304:	6926      	ldr	r6, [r4, #16]
 800b306:	60c5      	str	r5, [r0, #12]
 800b308:	f104 0914 	add.w	r9, r4, #20
 800b30c:	f108 0514 	add.w	r5, r8, #20
 800b310:	f100 0e14 	add.w	lr, r0, #20
 800b314:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b318:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b31c:	f108 0210 	add.w	r2, r8, #16
 800b320:	46f2      	mov	sl, lr
 800b322:	2100      	movs	r1, #0
 800b324:	f859 3b04 	ldr.w	r3, [r9], #4
 800b328:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b32c:	fa11 f88b 	uxtah	r8, r1, fp
 800b330:	b299      	uxth	r1, r3
 800b332:	0c1b      	lsrs	r3, r3, #16
 800b334:	eba8 0801 	sub.w	r8, r8, r1
 800b338:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b33c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b340:	fa1f f888 	uxth.w	r8, r8
 800b344:	1419      	asrs	r1, r3, #16
 800b346:	454e      	cmp	r6, r9
 800b348:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b34c:	f84a 3b04 	str.w	r3, [sl], #4
 800b350:	d8e8      	bhi.n	800b324 <__mdiff+0x80>
 800b352:	1b33      	subs	r3, r6, r4
 800b354:	3b15      	subs	r3, #21
 800b356:	f023 0303 	bic.w	r3, r3, #3
 800b35a:	3304      	adds	r3, #4
 800b35c:	3415      	adds	r4, #21
 800b35e:	42a6      	cmp	r6, r4
 800b360:	bf38      	it	cc
 800b362:	2304      	movcc	r3, #4
 800b364:	441d      	add	r5, r3
 800b366:	4473      	add	r3, lr
 800b368:	469e      	mov	lr, r3
 800b36a:	462e      	mov	r6, r5
 800b36c:	4566      	cmp	r6, ip
 800b36e:	d30e      	bcc.n	800b38e <__mdiff+0xea>
 800b370:	f10c 0203 	add.w	r2, ip, #3
 800b374:	1b52      	subs	r2, r2, r5
 800b376:	f022 0203 	bic.w	r2, r2, #3
 800b37a:	3d03      	subs	r5, #3
 800b37c:	45ac      	cmp	ip, r5
 800b37e:	bf38      	it	cc
 800b380:	2200      	movcc	r2, #0
 800b382:	4413      	add	r3, r2
 800b384:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b388:	b17a      	cbz	r2, 800b3aa <__mdiff+0x106>
 800b38a:	6107      	str	r7, [r0, #16]
 800b38c:	e7a4      	b.n	800b2d8 <__mdiff+0x34>
 800b38e:	f856 8b04 	ldr.w	r8, [r6], #4
 800b392:	fa11 f288 	uxtah	r2, r1, r8
 800b396:	1414      	asrs	r4, r2, #16
 800b398:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b39c:	b292      	uxth	r2, r2
 800b39e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b3a2:	f84e 2b04 	str.w	r2, [lr], #4
 800b3a6:	1421      	asrs	r1, r4, #16
 800b3a8:	e7e0      	b.n	800b36c <__mdiff+0xc8>
 800b3aa:	3f01      	subs	r7, #1
 800b3ac:	e7ea      	b.n	800b384 <__mdiff+0xe0>
 800b3ae:	bf00      	nop
 800b3b0:	0800db3c 	.word	0x0800db3c
 800b3b4:	0800dbad 	.word	0x0800dbad

0800b3b8 <__ulp>:
 800b3b8:	b082      	sub	sp, #8
 800b3ba:	ed8d 0b00 	vstr	d0, [sp]
 800b3be:	9a01      	ldr	r2, [sp, #4]
 800b3c0:	4b0f      	ldr	r3, [pc, #60]	; (800b400 <__ulp+0x48>)
 800b3c2:	4013      	ands	r3, r2
 800b3c4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	dc08      	bgt.n	800b3de <__ulp+0x26>
 800b3cc:	425b      	negs	r3, r3
 800b3ce:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b3d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b3d6:	da04      	bge.n	800b3e2 <__ulp+0x2a>
 800b3d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b3dc:	4113      	asrs	r3, r2
 800b3de:	2200      	movs	r2, #0
 800b3e0:	e008      	b.n	800b3f4 <__ulp+0x3c>
 800b3e2:	f1a2 0314 	sub.w	r3, r2, #20
 800b3e6:	2b1e      	cmp	r3, #30
 800b3e8:	bfda      	itte	le
 800b3ea:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b3ee:	40da      	lsrle	r2, r3
 800b3f0:	2201      	movgt	r2, #1
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	ec41 0b10 	vmov	d0, r0, r1
 800b3fc:	b002      	add	sp, #8
 800b3fe:	4770      	bx	lr
 800b400:	7ff00000 	.word	0x7ff00000

0800b404 <__b2d>:
 800b404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b408:	6906      	ldr	r6, [r0, #16]
 800b40a:	f100 0814 	add.w	r8, r0, #20
 800b40e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b412:	1f37      	subs	r7, r6, #4
 800b414:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b418:	4610      	mov	r0, r2
 800b41a:	f7ff fd53 	bl	800aec4 <__hi0bits>
 800b41e:	f1c0 0320 	rsb	r3, r0, #32
 800b422:	280a      	cmp	r0, #10
 800b424:	600b      	str	r3, [r1, #0]
 800b426:	491b      	ldr	r1, [pc, #108]	; (800b494 <__b2d+0x90>)
 800b428:	dc15      	bgt.n	800b456 <__b2d+0x52>
 800b42a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b42e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b432:	45b8      	cmp	r8, r7
 800b434:	ea43 0501 	orr.w	r5, r3, r1
 800b438:	bf34      	ite	cc
 800b43a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b43e:	2300      	movcs	r3, #0
 800b440:	3015      	adds	r0, #21
 800b442:	fa02 f000 	lsl.w	r0, r2, r0
 800b446:	fa23 f30c 	lsr.w	r3, r3, ip
 800b44a:	4303      	orrs	r3, r0
 800b44c:	461c      	mov	r4, r3
 800b44e:	ec45 4b10 	vmov	d0, r4, r5
 800b452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b456:	45b8      	cmp	r8, r7
 800b458:	bf3a      	itte	cc
 800b45a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b45e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b462:	2300      	movcs	r3, #0
 800b464:	380b      	subs	r0, #11
 800b466:	d012      	beq.n	800b48e <__b2d+0x8a>
 800b468:	f1c0 0120 	rsb	r1, r0, #32
 800b46c:	fa23 f401 	lsr.w	r4, r3, r1
 800b470:	4082      	lsls	r2, r0
 800b472:	4322      	orrs	r2, r4
 800b474:	4547      	cmp	r7, r8
 800b476:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b47a:	bf8c      	ite	hi
 800b47c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b480:	2200      	movls	r2, #0
 800b482:	4083      	lsls	r3, r0
 800b484:	40ca      	lsrs	r2, r1
 800b486:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b48a:	4313      	orrs	r3, r2
 800b48c:	e7de      	b.n	800b44c <__b2d+0x48>
 800b48e:	ea42 0501 	orr.w	r5, r2, r1
 800b492:	e7db      	b.n	800b44c <__b2d+0x48>
 800b494:	3ff00000 	.word	0x3ff00000

0800b498 <__d2b>:
 800b498:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b49c:	460f      	mov	r7, r1
 800b49e:	2101      	movs	r1, #1
 800b4a0:	ec59 8b10 	vmov	r8, r9, d0
 800b4a4:	4616      	mov	r6, r2
 800b4a6:	f7ff fc1b 	bl	800ace0 <_Balloc>
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	b930      	cbnz	r0, 800b4bc <__d2b+0x24>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	4b24      	ldr	r3, [pc, #144]	; (800b544 <__d2b+0xac>)
 800b4b2:	4825      	ldr	r0, [pc, #148]	; (800b548 <__d2b+0xb0>)
 800b4b4:	f240 310f 	movw	r1, #783	; 0x30f
 800b4b8:	f7fe f9c4 	bl	8009844 <__assert_func>
 800b4bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b4c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4c4:	bb2d      	cbnz	r5, 800b512 <__d2b+0x7a>
 800b4c6:	9301      	str	r3, [sp, #4]
 800b4c8:	f1b8 0300 	subs.w	r3, r8, #0
 800b4cc:	d026      	beq.n	800b51c <__d2b+0x84>
 800b4ce:	4668      	mov	r0, sp
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	f7ff fd17 	bl	800af04 <__lo0bits>
 800b4d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b4da:	b1e8      	cbz	r0, 800b518 <__d2b+0x80>
 800b4dc:	f1c0 0320 	rsb	r3, r0, #32
 800b4e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b4e4:	430b      	orrs	r3, r1
 800b4e6:	40c2      	lsrs	r2, r0
 800b4e8:	6163      	str	r3, [r4, #20]
 800b4ea:	9201      	str	r2, [sp, #4]
 800b4ec:	9b01      	ldr	r3, [sp, #4]
 800b4ee:	61a3      	str	r3, [r4, #24]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	bf14      	ite	ne
 800b4f4:	2202      	movne	r2, #2
 800b4f6:	2201      	moveq	r2, #1
 800b4f8:	6122      	str	r2, [r4, #16]
 800b4fa:	b1bd      	cbz	r5, 800b52c <__d2b+0x94>
 800b4fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b500:	4405      	add	r5, r0
 800b502:	603d      	str	r5, [r7, #0]
 800b504:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b508:	6030      	str	r0, [r6, #0]
 800b50a:	4620      	mov	r0, r4
 800b50c:	b003      	add	sp, #12
 800b50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b516:	e7d6      	b.n	800b4c6 <__d2b+0x2e>
 800b518:	6161      	str	r1, [r4, #20]
 800b51a:	e7e7      	b.n	800b4ec <__d2b+0x54>
 800b51c:	a801      	add	r0, sp, #4
 800b51e:	f7ff fcf1 	bl	800af04 <__lo0bits>
 800b522:	9b01      	ldr	r3, [sp, #4]
 800b524:	6163      	str	r3, [r4, #20]
 800b526:	3020      	adds	r0, #32
 800b528:	2201      	movs	r2, #1
 800b52a:	e7e5      	b.n	800b4f8 <__d2b+0x60>
 800b52c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b530:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b534:	6038      	str	r0, [r7, #0]
 800b536:	6918      	ldr	r0, [r3, #16]
 800b538:	f7ff fcc4 	bl	800aec4 <__hi0bits>
 800b53c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b540:	e7e2      	b.n	800b508 <__d2b+0x70>
 800b542:	bf00      	nop
 800b544:	0800db3c 	.word	0x0800db3c
 800b548:	0800dbad 	.word	0x0800dbad

0800b54c <__ratio>:
 800b54c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b550:	4688      	mov	r8, r1
 800b552:	4669      	mov	r1, sp
 800b554:	4681      	mov	r9, r0
 800b556:	f7ff ff55 	bl	800b404 <__b2d>
 800b55a:	a901      	add	r1, sp, #4
 800b55c:	4640      	mov	r0, r8
 800b55e:	ec55 4b10 	vmov	r4, r5, d0
 800b562:	f7ff ff4f 	bl	800b404 <__b2d>
 800b566:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b56a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b56e:	eba3 0c02 	sub.w	ip, r3, r2
 800b572:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b576:	1a9b      	subs	r3, r3, r2
 800b578:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b57c:	ec51 0b10 	vmov	r0, r1, d0
 800b580:	2b00      	cmp	r3, #0
 800b582:	bfd6      	itet	le
 800b584:	460a      	movle	r2, r1
 800b586:	462a      	movgt	r2, r5
 800b588:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b58c:	468b      	mov	fp, r1
 800b58e:	462f      	mov	r7, r5
 800b590:	bfd4      	ite	le
 800b592:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b596:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b59a:	4620      	mov	r0, r4
 800b59c:	ee10 2a10 	vmov	r2, s0
 800b5a0:	465b      	mov	r3, fp
 800b5a2:	4639      	mov	r1, r7
 800b5a4:	f7f5 f952 	bl	800084c <__aeabi_ddiv>
 800b5a8:	ec41 0b10 	vmov	d0, r0, r1
 800b5ac:	b003      	add	sp, #12
 800b5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b5b2 <__copybits>:
 800b5b2:	3901      	subs	r1, #1
 800b5b4:	b570      	push	{r4, r5, r6, lr}
 800b5b6:	1149      	asrs	r1, r1, #5
 800b5b8:	6914      	ldr	r4, [r2, #16]
 800b5ba:	3101      	adds	r1, #1
 800b5bc:	f102 0314 	add.w	r3, r2, #20
 800b5c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b5c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b5c8:	1f05      	subs	r5, r0, #4
 800b5ca:	42a3      	cmp	r3, r4
 800b5cc:	d30c      	bcc.n	800b5e8 <__copybits+0x36>
 800b5ce:	1aa3      	subs	r3, r4, r2
 800b5d0:	3b11      	subs	r3, #17
 800b5d2:	f023 0303 	bic.w	r3, r3, #3
 800b5d6:	3211      	adds	r2, #17
 800b5d8:	42a2      	cmp	r2, r4
 800b5da:	bf88      	it	hi
 800b5dc:	2300      	movhi	r3, #0
 800b5de:	4418      	add	r0, r3
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	4288      	cmp	r0, r1
 800b5e4:	d305      	bcc.n	800b5f2 <__copybits+0x40>
 800b5e6:	bd70      	pop	{r4, r5, r6, pc}
 800b5e8:	f853 6b04 	ldr.w	r6, [r3], #4
 800b5ec:	f845 6f04 	str.w	r6, [r5, #4]!
 800b5f0:	e7eb      	b.n	800b5ca <__copybits+0x18>
 800b5f2:	f840 3b04 	str.w	r3, [r0], #4
 800b5f6:	e7f4      	b.n	800b5e2 <__copybits+0x30>

0800b5f8 <__any_on>:
 800b5f8:	f100 0214 	add.w	r2, r0, #20
 800b5fc:	6900      	ldr	r0, [r0, #16]
 800b5fe:	114b      	asrs	r3, r1, #5
 800b600:	4298      	cmp	r0, r3
 800b602:	b510      	push	{r4, lr}
 800b604:	db11      	blt.n	800b62a <__any_on+0x32>
 800b606:	dd0a      	ble.n	800b61e <__any_on+0x26>
 800b608:	f011 011f 	ands.w	r1, r1, #31
 800b60c:	d007      	beq.n	800b61e <__any_on+0x26>
 800b60e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b612:	fa24 f001 	lsr.w	r0, r4, r1
 800b616:	fa00 f101 	lsl.w	r1, r0, r1
 800b61a:	428c      	cmp	r4, r1
 800b61c:	d10b      	bne.n	800b636 <__any_on+0x3e>
 800b61e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b622:	4293      	cmp	r3, r2
 800b624:	d803      	bhi.n	800b62e <__any_on+0x36>
 800b626:	2000      	movs	r0, #0
 800b628:	bd10      	pop	{r4, pc}
 800b62a:	4603      	mov	r3, r0
 800b62c:	e7f7      	b.n	800b61e <__any_on+0x26>
 800b62e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b632:	2900      	cmp	r1, #0
 800b634:	d0f5      	beq.n	800b622 <__any_on+0x2a>
 800b636:	2001      	movs	r0, #1
 800b638:	e7f6      	b.n	800b628 <__any_on+0x30>

0800b63a <__ascii_wctomb>:
 800b63a:	b149      	cbz	r1, 800b650 <__ascii_wctomb+0x16>
 800b63c:	2aff      	cmp	r2, #255	; 0xff
 800b63e:	bf85      	ittet	hi
 800b640:	238a      	movhi	r3, #138	; 0x8a
 800b642:	6003      	strhi	r3, [r0, #0]
 800b644:	700a      	strbls	r2, [r1, #0]
 800b646:	f04f 30ff 	movhi.w	r0, #4294967295
 800b64a:	bf98      	it	ls
 800b64c:	2001      	movls	r0, #1
 800b64e:	4770      	bx	lr
 800b650:	4608      	mov	r0, r1
 800b652:	4770      	bx	lr

0800b654 <__ssputs_r>:
 800b654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b658:	688e      	ldr	r6, [r1, #8]
 800b65a:	461f      	mov	r7, r3
 800b65c:	42be      	cmp	r6, r7
 800b65e:	680b      	ldr	r3, [r1, #0]
 800b660:	4682      	mov	sl, r0
 800b662:	460c      	mov	r4, r1
 800b664:	4690      	mov	r8, r2
 800b666:	d82c      	bhi.n	800b6c2 <__ssputs_r+0x6e>
 800b668:	898a      	ldrh	r2, [r1, #12]
 800b66a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b66e:	d026      	beq.n	800b6be <__ssputs_r+0x6a>
 800b670:	6965      	ldr	r5, [r4, #20]
 800b672:	6909      	ldr	r1, [r1, #16]
 800b674:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b678:	eba3 0901 	sub.w	r9, r3, r1
 800b67c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b680:	1c7b      	adds	r3, r7, #1
 800b682:	444b      	add	r3, r9
 800b684:	106d      	asrs	r5, r5, #1
 800b686:	429d      	cmp	r5, r3
 800b688:	bf38      	it	cc
 800b68a:	461d      	movcc	r5, r3
 800b68c:	0553      	lsls	r3, r2, #21
 800b68e:	d527      	bpl.n	800b6e0 <__ssputs_r+0x8c>
 800b690:	4629      	mov	r1, r5
 800b692:	f7fc f83b 	bl	800770c <_malloc_r>
 800b696:	4606      	mov	r6, r0
 800b698:	b360      	cbz	r0, 800b6f4 <__ssputs_r+0xa0>
 800b69a:	6921      	ldr	r1, [r4, #16]
 800b69c:	464a      	mov	r2, r9
 800b69e:	f7fe f8b4 	bl	800980a <memcpy>
 800b6a2:	89a3      	ldrh	r3, [r4, #12]
 800b6a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6ac:	81a3      	strh	r3, [r4, #12]
 800b6ae:	6126      	str	r6, [r4, #16]
 800b6b0:	6165      	str	r5, [r4, #20]
 800b6b2:	444e      	add	r6, r9
 800b6b4:	eba5 0509 	sub.w	r5, r5, r9
 800b6b8:	6026      	str	r6, [r4, #0]
 800b6ba:	60a5      	str	r5, [r4, #8]
 800b6bc:	463e      	mov	r6, r7
 800b6be:	42be      	cmp	r6, r7
 800b6c0:	d900      	bls.n	800b6c4 <__ssputs_r+0x70>
 800b6c2:	463e      	mov	r6, r7
 800b6c4:	6820      	ldr	r0, [r4, #0]
 800b6c6:	4632      	mov	r2, r6
 800b6c8:	4641      	mov	r1, r8
 800b6ca:	f000 f9db 	bl	800ba84 <memmove>
 800b6ce:	68a3      	ldr	r3, [r4, #8]
 800b6d0:	1b9b      	subs	r3, r3, r6
 800b6d2:	60a3      	str	r3, [r4, #8]
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	4433      	add	r3, r6
 800b6d8:	6023      	str	r3, [r4, #0]
 800b6da:	2000      	movs	r0, #0
 800b6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6e0:	462a      	mov	r2, r5
 800b6e2:	f000 fa06 	bl	800baf2 <_realloc_r>
 800b6e6:	4606      	mov	r6, r0
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d1e0      	bne.n	800b6ae <__ssputs_r+0x5a>
 800b6ec:	6921      	ldr	r1, [r4, #16]
 800b6ee:	4650      	mov	r0, sl
 800b6f0:	f7fe ff40 	bl	800a574 <_free_r>
 800b6f4:	230c      	movs	r3, #12
 800b6f6:	f8ca 3000 	str.w	r3, [sl]
 800b6fa:	89a3      	ldrh	r3, [r4, #12]
 800b6fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b700:	81a3      	strh	r3, [r4, #12]
 800b702:	f04f 30ff 	mov.w	r0, #4294967295
 800b706:	e7e9      	b.n	800b6dc <__ssputs_r+0x88>

0800b708 <_svfiprintf_r>:
 800b708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70c:	4698      	mov	r8, r3
 800b70e:	898b      	ldrh	r3, [r1, #12]
 800b710:	061b      	lsls	r3, r3, #24
 800b712:	b09d      	sub	sp, #116	; 0x74
 800b714:	4607      	mov	r7, r0
 800b716:	460d      	mov	r5, r1
 800b718:	4614      	mov	r4, r2
 800b71a:	d50e      	bpl.n	800b73a <_svfiprintf_r+0x32>
 800b71c:	690b      	ldr	r3, [r1, #16]
 800b71e:	b963      	cbnz	r3, 800b73a <_svfiprintf_r+0x32>
 800b720:	2140      	movs	r1, #64	; 0x40
 800b722:	f7fb fff3 	bl	800770c <_malloc_r>
 800b726:	6028      	str	r0, [r5, #0]
 800b728:	6128      	str	r0, [r5, #16]
 800b72a:	b920      	cbnz	r0, 800b736 <_svfiprintf_r+0x2e>
 800b72c:	230c      	movs	r3, #12
 800b72e:	603b      	str	r3, [r7, #0]
 800b730:	f04f 30ff 	mov.w	r0, #4294967295
 800b734:	e0d0      	b.n	800b8d8 <_svfiprintf_r+0x1d0>
 800b736:	2340      	movs	r3, #64	; 0x40
 800b738:	616b      	str	r3, [r5, #20]
 800b73a:	2300      	movs	r3, #0
 800b73c:	9309      	str	r3, [sp, #36]	; 0x24
 800b73e:	2320      	movs	r3, #32
 800b740:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b744:	f8cd 800c 	str.w	r8, [sp, #12]
 800b748:	2330      	movs	r3, #48	; 0x30
 800b74a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b8f0 <_svfiprintf_r+0x1e8>
 800b74e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b752:	f04f 0901 	mov.w	r9, #1
 800b756:	4623      	mov	r3, r4
 800b758:	469a      	mov	sl, r3
 800b75a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b75e:	b10a      	cbz	r2, 800b764 <_svfiprintf_r+0x5c>
 800b760:	2a25      	cmp	r2, #37	; 0x25
 800b762:	d1f9      	bne.n	800b758 <_svfiprintf_r+0x50>
 800b764:	ebba 0b04 	subs.w	fp, sl, r4
 800b768:	d00b      	beq.n	800b782 <_svfiprintf_r+0x7a>
 800b76a:	465b      	mov	r3, fp
 800b76c:	4622      	mov	r2, r4
 800b76e:	4629      	mov	r1, r5
 800b770:	4638      	mov	r0, r7
 800b772:	f7ff ff6f 	bl	800b654 <__ssputs_r>
 800b776:	3001      	adds	r0, #1
 800b778:	f000 80a9 	beq.w	800b8ce <_svfiprintf_r+0x1c6>
 800b77c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b77e:	445a      	add	r2, fp
 800b780:	9209      	str	r2, [sp, #36]	; 0x24
 800b782:	f89a 3000 	ldrb.w	r3, [sl]
 800b786:	2b00      	cmp	r3, #0
 800b788:	f000 80a1 	beq.w	800b8ce <_svfiprintf_r+0x1c6>
 800b78c:	2300      	movs	r3, #0
 800b78e:	f04f 32ff 	mov.w	r2, #4294967295
 800b792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b796:	f10a 0a01 	add.w	sl, sl, #1
 800b79a:	9304      	str	r3, [sp, #16]
 800b79c:	9307      	str	r3, [sp, #28]
 800b79e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7a2:	931a      	str	r3, [sp, #104]	; 0x68
 800b7a4:	4654      	mov	r4, sl
 800b7a6:	2205      	movs	r2, #5
 800b7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ac:	4850      	ldr	r0, [pc, #320]	; (800b8f0 <_svfiprintf_r+0x1e8>)
 800b7ae:	f7f4 fd0f 	bl	80001d0 <memchr>
 800b7b2:	9a04      	ldr	r2, [sp, #16]
 800b7b4:	b9d8      	cbnz	r0, 800b7ee <_svfiprintf_r+0xe6>
 800b7b6:	06d0      	lsls	r0, r2, #27
 800b7b8:	bf44      	itt	mi
 800b7ba:	2320      	movmi	r3, #32
 800b7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7c0:	0711      	lsls	r1, r2, #28
 800b7c2:	bf44      	itt	mi
 800b7c4:	232b      	movmi	r3, #43	; 0x2b
 800b7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b7d0:	d015      	beq.n	800b7fe <_svfiprintf_r+0xf6>
 800b7d2:	9a07      	ldr	r2, [sp, #28]
 800b7d4:	4654      	mov	r4, sl
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	f04f 0c0a 	mov.w	ip, #10
 800b7dc:	4621      	mov	r1, r4
 800b7de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7e2:	3b30      	subs	r3, #48	; 0x30
 800b7e4:	2b09      	cmp	r3, #9
 800b7e6:	d94d      	bls.n	800b884 <_svfiprintf_r+0x17c>
 800b7e8:	b1b0      	cbz	r0, 800b818 <_svfiprintf_r+0x110>
 800b7ea:	9207      	str	r2, [sp, #28]
 800b7ec:	e014      	b.n	800b818 <_svfiprintf_r+0x110>
 800b7ee:	eba0 0308 	sub.w	r3, r0, r8
 800b7f2:	fa09 f303 	lsl.w	r3, r9, r3
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	9304      	str	r3, [sp, #16]
 800b7fa:	46a2      	mov	sl, r4
 800b7fc:	e7d2      	b.n	800b7a4 <_svfiprintf_r+0x9c>
 800b7fe:	9b03      	ldr	r3, [sp, #12]
 800b800:	1d19      	adds	r1, r3, #4
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	9103      	str	r1, [sp, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	bfbb      	ittet	lt
 800b80a:	425b      	neglt	r3, r3
 800b80c:	f042 0202 	orrlt.w	r2, r2, #2
 800b810:	9307      	strge	r3, [sp, #28]
 800b812:	9307      	strlt	r3, [sp, #28]
 800b814:	bfb8      	it	lt
 800b816:	9204      	strlt	r2, [sp, #16]
 800b818:	7823      	ldrb	r3, [r4, #0]
 800b81a:	2b2e      	cmp	r3, #46	; 0x2e
 800b81c:	d10c      	bne.n	800b838 <_svfiprintf_r+0x130>
 800b81e:	7863      	ldrb	r3, [r4, #1]
 800b820:	2b2a      	cmp	r3, #42	; 0x2a
 800b822:	d134      	bne.n	800b88e <_svfiprintf_r+0x186>
 800b824:	9b03      	ldr	r3, [sp, #12]
 800b826:	1d1a      	adds	r2, r3, #4
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	9203      	str	r2, [sp, #12]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	bfb8      	it	lt
 800b830:	f04f 33ff 	movlt.w	r3, #4294967295
 800b834:	3402      	adds	r4, #2
 800b836:	9305      	str	r3, [sp, #20]
 800b838:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b900 <_svfiprintf_r+0x1f8>
 800b83c:	7821      	ldrb	r1, [r4, #0]
 800b83e:	2203      	movs	r2, #3
 800b840:	4650      	mov	r0, sl
 800b842:	f7f4 fcc5 	bl	80001d0 <memchr>
 800b846:	b138      	cbz	r0, 800b858 <_svfiprintf_r+0x150>
 800b848:	9b04      	ldr	r3, [sp, #16]
 800b84a:	eba0 000a 	sub.w	r0, r0, sl
 800b84e:	2240      	movs	r2, #64	; 0x40
 800b850:	4082      	lsls	r2, r0
 800b852:	4313      	orrs	r3, r2
 800b854:	3401      	adds	r4, #1
 800b856:	9304      	str	r3, [sp, #16]
 800b858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b85c:	4825      	ldr	r0, [pc, #148]	; (800b8f4 <_svfiprintf_r+0x1ec>)
 800b85e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b862:	2206      	movs	r2, #6
 800b864:	f7f4 fcb4 	bl	80001d0 <memchr>
 800b868:	2800      	cmp	r0, #0
 800b86a:	d038      	beq.n	800b8de <_svfiprintf_r+0x1d6>
 800b86c:	4b22      	ldr	r3, [pc, #136]	; (800b8f8 <_svfiprintf_r+0x1f0>)
 800b86e:	bb1b      	cbnz	r3, 800b8b8 <_svfiprintf_r+0x1b0>
 800b870:	9b03      	ldr	r3, [sp, #12]
 800b872:	3307      	adds	r3, #7
 800b874:	f023 0307 	bic.w	r3, r3, #7
 800b878:	3308      	adds	r3, #8
 800b87a:	9303      	str	r3, [sp, #12]
 800b87c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b87e:	4433      	add	r3, r6
 800b880:	9309      	str	r3, [sp, #36]	; 0x24
 800b882:	e768      	b.n	800b756 <_svfiprintf_r+0x4e>
 800b884:	fb0c 3202 	mla	r2, ip, r2, r3
 800b888:	460c      	mov	r4, r1
 800b88a:	2001      	movs	r0, #1
 800b88c:	e7a6      	b.n	800b7dc <_svfiprintf_r+0xd4>
 800b88e:	2300      	movs	r3, #0
 800b890:	3401      	adds	r4, #1
 800b892:	9305      	str	r3, [sp, #20]
 800b894:	4619      	mov	r1, r3
 800b896:	f04f 0c0a 	mov.w	ip, #10
 800b89a:	4620      	mov	r0, r4
 800b89c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8a0:	3a30      	subs	r2, #48	; 0x30
 800b8a2:	2a09      	cmp	r2, #9
 800b8a4:	d903      	bls.n	800b8ae <_svfiprintf_r+0x1a6>
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d0c6      	beq.n	800b838 <_svfiprintf_r+0x130>
 800b8aa:	9105      	str	r1, [sp, #20]
 800b8ac:	e7c4      	b.n	800b838 <_svfiprintf_r+0x130>
 800b8ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8b2:	4604      	mov	r4, r0
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	e7f0      	b.n	800b89a <_svfiprintf_r+0x192>
 800b8b8:	ab03      	add	r3, sp, #12
 800b8ba:	9300      	str	r3, [sp, #0]
 800b8bc:	462a      	mov	r2, r5
 800b8be:	4b0f      	ldr	r3, [pc, #60]	; (800b8fc <_svfiprintf_r+0x1f4>)
 800b8c0:	a904      	add	r1, sp, #16
 800b8c2:	4638      	mov	r0, r7
 800b8c4:	f7fc ff56 	bl	8008774 <_printf_float>
 800b8c8:	1c42      	adds	r2, r0, #1
 800b8ca:	4606      	mov	r6, r0
 800b8cc:	d1d6      	bne.n	800b87c <_svfiprintf_r+0x174>
 800b8ce:	89ab      	ldrh	r3, [r5, #12]
 800b8d0:	065b      	lsls	r3, r3, #25
 800b8d2:	f53f af2d 	bmi.w	800b730 <_svfiprintf_r+0x28>
 800b8d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8d8:	b01d      	add	sp, #116	; 0x74
 800b8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8de:	ab03      	add	r3, sp, #12
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	462a      	mov	r2, r5
 800b8e4:	4b05      	ldr	r3, [pc, #20]	; (800b8fc <_svfiprintf_r+0x1f4>)
 800b8e6:	a904      	add	r1, sp, #16
 800b8e8:	4638      	mov	r0, r7
 800b8ea:	f7fd f9e7 	bl	8008cbc <_printf_i>
 800b8ee:	e7eb      	b.n	800b8c8 <_svfiprintf_r+0x1c0>
 800b8f0:	0800dd04 	.word	0x0800dd04
 800b8f4:	0800dd0e 	.word	0x0800dd0e
 800b8f8:	08008775 	.word	0x08008775
 800b8fc:	0800b655 	.word	0x0800b655
 800b900:	0800dd0a 	.word	0x0800dd0a

0800b904 <__sflush_r>:
 800b904:	898a      	ldrh	r2, [r1, #12]
 800b906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b90a:	4605      	mov	r5, r0
 800b90c:	0710      	lsls	r0, r2, #28
 800b90e:	460c      	mov	r4, r1
 800b910:	d458      	bmi.n	800b9c4 <__sflush_r+0xc0>
 800b912:	684b      	ldr	r3, [r1, #4]
 800b914:	2b00      	cmp	r3, #0
 800b916:	dc05      	bgt.n	800b924 <__sflush_r+0x20>
 800b918:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	dc02      	bgt.n	800b924 <__sflush_r+0x20>
 800b91e:	2000      	movs	r0, #0
 800b920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b926:	2e00      	cmp	r6, #0
 800b928:	d0f9      	beq.n	800b91e <__sflush_r+0x1a>
 800b92a:	2300      	movs	r3, #0
 800b92c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b930:	682f      	ldr	r7, [r5, #0]
 800b932:	6a21      	ldr	r1, [r4, #32]
 800b934:	602b      	str	r3, [r5, #0]
 800b936:	d032      	beq.n	800b99e <__sflush_r+0x9a>
 800b938:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b93a:	89a3      	ldrh	r3, [r4, #12]
 800b93c:	075a      	lsls	r2, r3, #29
 800b93e:	d505      	bpl.n	800b94c <__sflush_r+0x48>
 800b940:	6863      	ldr	r3, [r4, #4]
 800b942:	1ac0      	subs	r0, r0, r3
 800b944:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b946:	b10b      	cbz	r3, 800b94c <__sflush_r+0x48>
 800b948:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b94a:	1ac0      	subs	r0, r0, r3
 800b94c:	2300      	movs	r3, #0
 800b94e:	4602      	mov	r2, r0
 800b950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b952:	6a21      	ldr	r1, [r4, #32]
 800b954:	4628      	mov	r0, r5
 800b956:	47b0      	blx	r6
 800b958:	1c43      	adds	r3, r0, #1
 800b95a:	89a3      	ldrh	r3, [r4, #12]
 800b95c:	d106      	bne.n	800b96c <__sflush_r+0x68>
 800b95e:	6829      	ldr	r1, [r5, #0]
 800b960:	291d      	cmp	r1, #29
 800b962:	d82b      	bhi.n	800b9bc <__sflush_r+0xb8>
 800b964:	4a29      	ldr	r2, [pc, #164]	; (800ba0c <__sflush_r+0x108>)
 800b966:	410a      	asrs	r2, r1
 800b968:	07d6      	lsls	r6, r2, #31
 800b96a:	d427      	bmi.n	800b9bc <__sflush_r+0xb8>
 800b96c:	2200      	movs	r2, #0
 800b96e:	6062      	str	r2, [r4, #4]
 800b970:	04d9      	lsls	r1, r3, #19
 800b972:	6922      	ldr	r2, [r4, #16]
 800b974:	6022      	str	r2, [r4, #0]
 800b976:	d504      	bpl.n	800b982 <__sflush_r+0x7e>
 800b978:	1c42      	adds	r2, r0, #1
 800b97a:	d101      	bne.n	800b980 <__sflush_r+0x7c>
 800b97c:	682b      	ldr	r3, [r5, #0]
 800b97e:	b903      	cbnz	r3, 800b982 <__sflush_r+0x7e>
 800b980:	6560      	str	r0, [r4, #84]	; 0x54
 800b982:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b984:	602f      	str	r7, [r5, #0]
 800b986:	2900      	cmp	r1, #0
 800b988:	d0c9      	beq.n	800b91e <__sflush_r+0x1a>
 800b98a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b98e:	4299      	cmp	r1, r3
 800b990:	d002      	beq.n	800b998 <__sflush_r+0x94>
 800b992:	4628      	mov	r0, r5
 800b994:	f7fe fdee 	bl	800a574 <_free_r>
 800b998:	2000      	movs	r0, #0
 800b99a:	6360      	str	r0, [r4, #52]	; 0x34
 800b99c:	e7c0      	b.n	800b920 <__sflush_r+0x1c>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	47b0      	blx	r6
 800b9a4:	1c41      	adds	r1, r0, #1
 800b9a6:	d1c8      	bne.n	800b93a <__sflush_r+0x36>
 800b9a8:	682b      	ldr	r3, [r5, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d0c5      	beq.n	800b93a <__sflush_r+0x36>
 800b9ae:	2b1d      	cmp	r3, #29
 800b9b0:	d001      	beq.n	800b9b6 <__sflush_r+0xb2>
 800b9b2:	2b16      	cmp	r3, #22
 800b9b4:	d101      	bne.n	800b9ba <__sflush_r+0xb6>
 800b9b6:	602f      	str	r7, [r5, #0]
 800b9b8:	e7b1      	b.n	800b91e <__sflush_r+0x1a>
 800b9ba:	89a3      	ldrh	r3, [r4, #12]
 800b9bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9c0:	81a3      	strh	r3, [r4, #12]
 800b9c2:	e7ad      	b.n	800b920 <__sflush_r+0x1c>
 800b9c4:	690f      	ldr	r7, [r1, #16]
 800b9c6:	2f00      	cmp	r7, #0
 800b9c8:	d0a9      	beq.n	800b91e <__sflush_r+0x1a>
 800b9ca:	0793      	lsls	r3, r2, #30
 800b9cc:	680e      	ldr	r6, [r1, #0]
 800b9ce:	bf08      	it	eq
 800b9d0:	694b      	ldreq	r3, [r1, #20]
 800b9d2:	600f      	str	r7, [r1, #0]
 800b9d4:	bf18      	it	ne
 800b9d6:	2300      	movne	r3, #0
 800b9d8:	eba6 0807 	sub.w	r8, r6, r7
 800b9dc:	608b      	str	r3, [r1, #8]
 800b9de:	f1b8 0f00 	cmp.w	r8, #0
 800b9e2:	dd9c      	ble.n	800b91e <__sflush_r+0x1a>
 800b9e4:	6a21      	ldr	r1, [r4, #32]
 800b9e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b9e8:	4643      	mov	r3, r8
 800b9ea:	463a      	mov	r2, r7
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	47b0      	blx	r6
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	dc06      	bgt.n	800ba02 <__sflush_r+0xfe>
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9fa:	81a3      	strh	r3, [r4, #12]
 800b9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800ba00:	e78e      	b.n	800b920 <__sflush_r+0x1c>
 800ba02:	4407      	add	r7, r0
 800ba04:	eba8 0800 	sub.w	r8, r8, r0
 800ba08:	e7e9      	b.n	800b9de <__sflush_r+0xda>
 800ba0a:	bf00      	nop
 800ba0c:	dfbffffe 	.word	0xdfbffffe

0800ba10 <_fflush_r>:
 800ba10:	b538      	push	{r3, r4, r5, lr}
 800ba12:	690b      	ldr	r3, [r1, #16]
 800ba14:	4605      	mov	r5, r0
 800ba16:	460c      	mov	r4, r1
 800ba18:	b913      	cbnz	r3, 800ba20 <_fflush_r+0x10>
 800ba1a:	2500      	movs	r5, #0
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	b118      	cbz	r0, 800ba2a <_fflush_r+0x1a>
 800ba22:	6a03      	ldr	r3, [r0, #32]
 800ba24:	b90b      	cbnz	r3, 800ba2a <_fflush_r+0x1a>
 800ba26:	f7fd fd07 	bl	8009438 <__sinit>
 800ba2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d0f3      	beq.n	800ba1a <_fflush_r+0xa>
 800ba32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba34:	07d0      	lsls	r0, r2, #31
 800ba36:	d404      	bmi.n	800ba42 <_fflush_r+0x32>
 800ba38:	0599      	lsls	r1, r3, #22
 800ba3a:	d402      	bmi.n	800ba42 <_fflush_r+0x32>
 800ba3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba3e:	f7fd feda 	bl	80097f6 <__retarget_lock_acquire_recursive>
 800ba42:	4628      	mov	r0, r5
 800ba44:	4621      	mov	r1, r4
 800ba46:	f7ff ff5d 	bl	800b904 <__sflush_r>
 800ba4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba4c:	07da      	lsls	r2, r3, #31
 800ba4e:	4605      	mov	r5, r0
 800ba50:	d4e4      	bmi.n	800ba1c <_fflush_r+0xc>
 800ba52:	89a3      	ldrh	r3, [r4, #12]
 800ba54:	059b      	lsls	r3, r3, #22
 800ba56:	d4e1      	bmi.n	800ba1c <_fflush_r+0xc>
 800ba58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba5a:	f7fd fecd 	bl	80097f8 <__retarget_lock_release_recursive>
 800ba5e:	e7dd      	b.n	800ba1c <_fflush_r+0xc>

0800ba60 <fiprintf>:
 800ba60:	b40e      	push	{r1, r2, r3}
 800ba62:	b503      	push	{r0, r1, lr}
 800ba64:	4601      	mov	r1, r0
 800ba66:	ab03      	add	r3, sp, #12
 800ba68:	4805      	ldr	r0, [pc, #20]	; (800ba80 <fiprintf+0x20>)
 800ba6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba6e:	6800      	ldr	r0, [r0, #0]
 800ba70:	9301      	str	r3, [sp, #4]
 800ba72:	f000 f897 	bl	800bba4 <_vfiprintf_r>
 800ba76:	b002      	add	sp, #8
 800ba78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba7c:	b003      	add	sp, #12
 800ba7e:	4770      	bx	lr
 800ba80:	200001e0 	.word	0x200001e0

0800ba84 <memmove>:
 800ba84:	4288      	cmp	r0, r1
 800ba86:	b510      	push	{r4, lr}
 800ba88:	eb01 0402 	add.w	r4, r1, r2
 800ba8c:	d902      	bls.n	800ba94 <memmove+0x10>
 800ba8e:	4284      	cmp	r4, r0
 800ba90:	4623      	mov	r3, r4
 800ba92:	d807      	bhi.n	800baa4 <memmove+0x20>
 800ba94:	1e43      	subs	r3, r0, #1
 800ba96:	42a1      	cmp	r1, r4
 800ba98:	d008      	beq.n	800baac <memmove+0x28>
 800ba9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800baa2:	e7f8      	b.n	800ba96 <memmove+0x12>
 800baa4:	4402      	add	r2, r0
 800baa6:	4601      	mov	r1, r0
 800baa8:	428a      	cmp	r2, r1
 800baaa:	d100      	bne.n	800baae <memmove+0x2a>
 800baac:	bd10      	pop	{r4, pc}
 800baae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bab6:	e7f7      	b.n	800baa8 <memmove+0x24>

0800bab8 <abort>:
 800bab8:	b508      	push	{r3, lr}
 800baba:	2006      	movs	r0, #6
 800babc:	f000 fa4a 	bl	800bf54 <raise>
 800bac0:	2001      	movs	r0, #1
 800bac2:	f7f7 fc39 	bl	8003338 <_exit>

0800bac6 <_calloc_r>:
 800bac6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bac8:	fba1 2402 	umull	r2, r4, r1, r2
 800bacc:	b94c      	cbnz	r4, 800bae2 <_calloc_r+0x1c>
 800bace:	4611      	mov	r1, r2
 800bad0:	9201      	str	r2, [sp, #4]
 800bad2:	f7fb fe1b 	bl	800770c <_malloc_r>
 800bad6:	9a01      	ldr	r2, [sp, #4]
 800bad8:	4605      	mov	r5, r0
 800bada:	b930      	cbnz	r0, 800baea <_calloc_r+0x24>
 800badc:	4628      	mov	r0, r5
 800bade:	b003      	add	sp, #12
 800bae0:	bd30      	pop	{r4, r5, pc}
 800bae2:	220c      	movs	r2, #12
 800bae4:	6002      	str	r2, [r0, #0]
 800bae6:	2500      	movs	r5, #0
 800bae8:	e7f8      	b.n	800badc <_calloc_r+0x16>
 800baea:	4621      	mov	r1, r4
 800baec:	f7fd fd71 	bl	80095d2 <memset>
 800baf0:	e7f4      	b.n	800badc <_calloc_r+0x16>

0800baf2 <_realloc_r>:
 800baf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf6:	4680      	mov	r8, r0
 800baf8:	4614      	mov	r4, r2
 800bafa:	460e      	mov	r6, r1
 800bafc:	b921      	cbnz	r1, 800bb08 <_realloc_r+0x16>
 800bafe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb02:	4611      	mov	r1, r2
 800bb04:	f7fb be02 	b.w	800770c <_malloc_r>
 800bb08:	b92a      	cbnz	r2, 800bb16 <_realloc_r+0x24>
 800bb0a:	f7fe fd33 	bl	800a574 <_free_r>
 800bb0e:	4625      	mov	r5, r4
 800bb10:	4628      	mov	r0, r5
 800bb12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb16:	f000 fa39 	bl	800bf8c <_malloc_usable_size_r>
 800bb1a:	4284      	cmp	r4, r0
 800bb1c:	4607      	mov	r7, r0
 800bb1e:	d802      	bhi.n	800bb26 <_realloc_r+0x34>
 800bb20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb24:	d812      	bhi.n	800bb4c <_realloc_r+0x5a>
 800bb26:	4621      	mov	r1, r4
 800bb28:	4640      	mov	r0, r8
 800bb2a:	f7fb fdef 	bl	800770c <_malloc_r>
 800bb2e:	4605      	mov	r5, r0
 800bb30:	2800      	cmp	r0, #0
 800bb32:	d0ed      	beq.n	800bb10 <_realloc_r+0x1e>
 800bb34:	42bc      	cmp	r4, r7
 800bb36:	4622      	mov	r2, r4
 800bb38:	4631      	mov	r1, r6
 800bb3a:	bf28      	it	cs
 800bb3c:	463a      	movcs	r2, r7
 800bb3e:	f7fd fe64 	bl	800980a <memcpy>
 800bb42:	4631      	mov	r1, r6
 800bb44:	4640      	mov	r0, r8
 800bb46:	f7fe fd15 	bl	800a574 <_free_r>
 800bb4a:	e7e1      	b.n	800bb10 <_realloc_r+0x1e>
 800bb4c:	4635      	mov	r5, r6
 800bb4e:	e7df      	b.n	800bb10 <_realloc_r+0x1e>

0800bb50 <__sfputc_r>:
 800bb50:	6893      	ldr	r3, [r2, #8]
 800bb52:	3b01      	subs	r3, #1
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	b410      	push	{r4}
 800bb58:	6093      	str	r3, [r2, #8]
 800bb5a:	da08      	bge.n	800bb6e <__sfputc_r+0x1e>
 800bb5c:	6994      	ldr	r4, [r2, #24]
 800bb5e:	42a3      	cmp	r3, r4
 800bb60:	db01      	blt.n	800bb66 <__sfputc_r+0x16>
 800bb62:	290a      	cmp	r1, #10
 800bb64:	d103      	bne.n	800bb6e <__sfputc_r+0x1e>
 800bb66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb6a:	f000 b935 	b.w	800bdd8 <__swbuf_r>
 800bb6e:	6813      	ldr	r3, [r2, #0]
 800bb70:	1c58      	adds	r0, r3, #1
 800bb72:	6010      	str	r0, [r2, #0]
 800bb74:	7019      	strb	r1, [r3, #0]
 800bb76:	4608      	mov	r0, r1
 800bb78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb7c:	4770      	bx	lr

0800bb7e <__sfputs_r>:
 800bb7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb80:	4606      	mov	r6, r0
 800bb82:	460f      	mov	r7, r1
 800bb84:	4614      	mov	r4, r2
 800bb86:	18d5      	adds	r5, r2, r3
 800bb88:	42ac      	cmp	r4, r5
 800bb8a:	d101      	bne.n	800bb90 <__sfputs_r+0x12>
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	e007      	b.n	800bba0 <__sfputs_r+0x22>
 800bb90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb94:	463a      	mov	r2, r7
 800bb96:	4630      	mov	r0, r6
 800bb98:	f7ff ffda 	bl	800bb50 <__sfputc_r>
 800bb9c:	1c43      	adds	r3, r0, #1
 800bb9e:	d1f3      	bne.n	800bb88 <__sfputs_r+0xa>
 800bba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bba4 <_vfiprintf_r>:
 800bba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba8:	460d      	mov	r5, r1
 800bbaa:	b09d      	sub	sp, #116	; 0x74
 800bbac:	4614      	mov	r4, r2
 800bbae:	4698      	mov	r8, r3
 800bbb0:	4606      	mov	r6, r0
 800bbb2:	b118      	cbz	r0, 800bbbc <_vfiprintf_r+0x18>
 800bbb4:	6a03      	ldr	r3, [r0, #32]
 800bbb6:	b90b      	cbnz	r3, 800bbbc <_vfiprintf_r+0x18>
 800bbb8:	f7fd fc3e 	bl	8009438 <__sinit>
 800bbbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbbe:	07d9      	lsls	r1, r3, #31
 800bbc0:	d405      	bmi.n	800bbce <_vfiprintf_r+0x2a>
 800bbc2:	89ab      	ldrh	r3, [r5, #12]
 800bbc4:	059a      	lsls	r2, r3, #22
 800bbc6:	d402      	bmi.n	800bbce <_vfiprintf_r+0x2a>
 800bbc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbca:	f7fd fe14 	bl	80097f6 <__retarget_lock_acquire_recursive>
 800bbce:	89ab      	ldrh	r3, [r5, #12]
 800bbd0:	071b      	lsls	r3, r3, #28
 800bbd2:	d501      	bpl.n	800bbd8 <_vfiprintf_r+0x34>
 800bbd4:	692b      	ldr	r3, [r5, #16]
 800bbd6:	b99b      	cbnz	r3, 800bc00 <_vfiprintf_r+0x5c>
 800bbd8:	4629      	mov	r1, r5
 800bbda:	4630      	mov	r0, r6
 800bbdc:	f000 f93a 	bl	800be54 <__swsetup_r>
 800bbe0:	b170      	cbz	r0, 800bc00 <_vfiprintf_r+0x5c>
 800bbe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbe4:	07dc      	lsls	r4, r3, #31
 800bbe6:	d504      	bpl.n	800bbf2 <_vfiprintf_r+0x4e>
 800bbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbec:	b01d      	add	sp, #116	; 0x74
 800bbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf2:	89ab      	ldrh	r3, [r5, #12]
 800bbf4:	0598      	lsls	r0, r3, #22
 800bbf6:	d4f7      	bmi.n	800bbe8 <_vfiprintf_r+0x44>
 800bbf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbfa:	f7fd fdfd 	bl	80097f8 <__retarget_lock_release_recursive>
 800bbfe:	e7f3      	b.n	800bbe8 <_vfiprintf_r+0x44>
 800bc00:	2300      	movs	r3, #0
 800bc02:	9309      	str	r3, [sp, #36]	; 0x24
 800bc04:	2320      	movs	r3, #32
 800bc06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc0e:	2330      	movs	r3, #48	; 0x30
 800bc10:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bdc4 <_vfiprintf_r+0x220>
 800bc14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc18:	f04f 0901 	mov.w	r9, #1
 800bc1c:	4623      	mov	r3, r4
 800bc1e:	469a      	mov	sl, r3
 800bc20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc24:	b10a      	cbz	r2, 800bc2a <_vfiprintf_r+0x86>
 800bc26:	2a25      	cmp	r2, #37	; 0x25
 800bc28:	d1f9      	bne.n	800bc1e <_vfiprintf_r+0x7a>
 800bc2a:	ebba 0b04 	subs.w	fp, sl, r4
 800bc2e:	d00b      	beq.n	800bc48 <_vfiprintf_r+0xa4>
 800bc30:	465b      	mov	r3, fp
 800bc32:	4622      	mov	r2, r4
 800bc34:	4629      	mov	r1, r5
 800bc36:	4630      	mov	r0, r6
 800bc38:	f7ff ffa1 	bl	800bb7e <__sfputs_r>
 800bc3c:	3001      	adds	r0, #1
 800bc3e:	f000 80a9 	beq.w	800bd94 <_vfiprintf_r+0x1f0>
 800bc42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc44:	445a      	add	r2, fp
 800bc46:	9209      	str	r2, [sp, #36]	; 0x24
 800bc48:	f89a 3000 	ldrb.w	r3, [sl]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f000 80a1 	beq.w	800bd94 <_vfiprintf_r+0x1f0>
 800bc52:	2300      	movs	r3, #0
 800bc54:	f04f 32ff 	mov.w	r2, #4294967295
 800bc58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc5c:	f10a 0a01 	add.w	sl, sl, #1
 800bc60:	9304      	str	r3, [sp, #16]
 800bc62:	9307      	str	r3, [sp, #28]
 800bc64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc68:	931a      	str	r3, [sp, #104]	; 0x68
 800bc6a:	4654      	mov	r4, sl
 800bc6c:	2205      	movs	r2, #5
 800bc6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc72:	4854      	ldr	r0, [pc, #336]	; (800bdc4 <_vfiprintf_r+0x220>)
 800bc74:	f7f4 faac 	bl	80001d0 <memchr>
 800bc78:	9a04      	ldr	r2, [sp, #16]
 800bc7a:	b9d8      	cbnz	r0, 800bcb4 <_vfiprintf_r+0x110>
 800bc7c:	06d1      	lsls	r1, r2, #27
 800bc7e:	bf44      	itt	mi
 800bc80:	2320      	movmi	r3, #32
 800bc82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc86:	0713      	lsls	r3, r2, #28
 800bc88:	bf44      	itt	mi
 800bc8a:	232b      	movmi	r3, #43	; 0x2b
 800bc8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc90:	f89a 3000 	ldrb.w	r3, [sl]
 800bc94:	2b2a      	cmp	r3, #42	; 0x2a
 800bc96:	d015      	beq.n	800bcc4 <_vfiprintf_r+0x120>
 800bc98:	9a07      	ldr	r2, [sp, #28]
 800bc9a:	4654      	mov	r4, sl
 800bc9c:	2000      	movs	r0, #0
 800bc9e:	f04f 0c0a 	mov.w	ip, #10
 800bca2:	4621      	mov	r1, r4
 800bca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bca8:	3b30      	subs	r3, #48	; 0x30
 800bcaa:	2b09      	cmp	r3, #9
 800bcac:	d94d      	bls.n	800bd4a <_vfiprintf_r+0x1a6>
 800bcae:	b1b0      	cbz	r0, 800bcde <_vfiprintf_r+0x13a>
 800bcb0:	9207      	str	r2, [sp, #28]
 800bcb2:	e014      	b.n	800bcde <_vfiprintf_r+0x13a>
 800bcb4:	eba0 0308 	sub.w	r3, r0, r8
 800bcb8:	fa09 f303 	lsl.w	r3, r9, r3
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	9304      	str	r3, [sp, #16]
 800bcc0:	46a2      	mov	sl, r4
 800bcc2:	e7d2      	b.n	800bc6a <_vfiprintf_r+0xc6>
 800bcc4:	9b03      	ldr	r3, [sp, #12]
 800bcc6:	1d19      	adds	r1, r3, #4
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	9103      	str	r1, [sp, #12]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	bfbb      	ittet	lt
 800bcd0:	425b      	neglt	r3, r3
 800bcd2:	f042 0202 	orrlt.w	r2, r2, #2
 800bcd6:	9307      	strge	r3, [sp, #28]
 800bcd8:	9307      	strlt	r3, [sp, #28]
 800bcda:	bfb8      	it	lt
 800bcdc:	9204      	strlt	r2, [sp, #16]
 800bcde:	7823      	ldrb	r3, [r4, #0]
 800bce0:	2b2e      	cmp	r3, #46	; 0x2e
 800bce2:	d10c      	bne.n	800bcfe <_vfiprintf_r+0x15a>
 800bce4:	7863      	ldrb	r3, [r4, #1]
 800bce6:	2b2a      	cmp	r3, #42	; 0x2a
 800bce8:	d134      	bne.n	800bd54 <_vfiprintf_r+0x1b0>
 800bcea:	9b03      	ldr	r3, [sp, #12]
 800bcec:	1d1a      	adds	r2, r3, #4
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	9203      	str	r2, [sp, #12]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	bfb8      	it	lt
 800bcf6:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcfa:	3402      	adds	r4, #2
 800bcfc:	9305      	str	r3, [sp, #20]
 800bcfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bdd4 <_vfiprintf_r+0x230>
 800bd02:	7821      	ldrb	r1, [r4, #0]
 800bd04:	2203      	movs	r2, #3
 800bd06:	4650      	mov	r0, sl
 800bd08:	f7f4 fa62 	bl	80001d0 <memchr>
 800bd0c:	b138      	cbz	r0, 800bd1e <_vfiprintf_r+0x17a>
 800bd0e:	9b04      	ldr	r3, [sp, #16]
 800bd10:	eba0 000a 	sub.w	r0, r0, sl
 800bd14:	2240      	movs	r2, #64	; 0x40
 800bd16:	4082      	lsls	r2, r0
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	3401      	adds	r4, #1
 800bd1c:	9304      	str	r3, [sp, #16]
 800bd1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd22:	4829      	ldr	r0, [pc, #164]	; (800bdc8 <_vfiprintf_r+0x224>)
 800bd24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd28:	2206      	movs	r2, #6
 800bd2a:	f7f4 fa51 	bl	80001d0 <memchr>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d03f      	beq.n	800bdb2 <_vfiprintf_r+0x20e>
 800bd32:	4b26      	ldr	r3, [pc, #152]	; (800bdcc <_vfiprintf_r+0x228>)
 800bd34:	bb1b      	cbnz	r3, 800bd7e <_vfiprintf_r+0x1da>
 800bd36:	9b03      	ldr	r3, [sp, #12]
 800bd38:	3307      	adds	r3, #7
 800bd3a:	f023 0307 	bic.w	r3, r3, #7
 800bd3e:	3308      	adds	r3, #8
 800bd40:	9303      	str	r3, [sp, #12]
 800bd42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd44:	443b      	add	r3, r7
 800bd46:	9309      	str	r3, [sp, #36]	; 0x24
 800bd48:	e768      	b.n	800bc1c <_vfiprintf_r+0x78>
 800bd4a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd4e:	460c      	mov	r4, r1
 800bd50:	2001      	movs	r0, #1
 800bd52:	e7a6      	b.n	800bca2 <_vfiprintf_r+0xfe>
 800bd54:	2300      	movs	r3, #0
 800bd56:	3401      	adds	r4, #1
 800bd58:	9305      	str	r3, [sp, #20]
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	f04f 0c0a 	mov.w	ip, #10
 800bd60:	4620      	mov	r0, r4
 800bd62:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd66:	3a30      	subs	r2, #48	; 0x30
 800bd68:	2a09      	cmp	r2, #9
 800bd6a:	d903      	bls.n	800bd74 <_vfiprintf_r+0x1d0>
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d0c6      	beq.n	800bcfe <_vfiprintf_r+0x15a>
 800bd70:	9105      	str	r1, [sp, #20]
 800bd72:	e7c4      	b.n	800bcfe <_vfiprintf_r+0x15a>
 800bd74:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd78:	4604      	mov	r4, r0
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e7f0      	b.n	800bd60 <_vfiprintf_r+0x1bc>
 800bd7e:	ab03      	add	r3, sp, #12
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	462a      	mov	r2, r5
 800bd84:	4b12      	ldr	r3, [pc, #72]	; (800bdd0 <_vfiprintf_r+0x22c>)
 800bd86:	a904      	add	r1, sp, #16
 800bd88:	4630      	mov	r0, r6
 800bd8a:	f7fc fcf3 	bl	8008774 <_printf_float>
 800bd8e:	4607      	mov	r7, r0
 800bd90:	1c78      	adds	r0, r7, #1
 800bd92:	d1d6      	bne.n	800bd42 <_vfiprintf_r+0x19e>
 800bd94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd96:	07d9      	lsls	r1, r3, #31
 800bd98:	d405      	bmi.n	800bda6 <_vfiprintf_r+0x202>
 800bd9a:	89ab      	ldrh	r3, [r5, #12]
 800bd9c:	059a      	lsls	r2, r3, #22
 800bd9e:	d402      	bmi.n	800bda6 <_vfiprintf_r+0x202>
 800bda0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bda2:	f7fd fd29 	bl	80097f8 <__retarget_lock_release_recursive>
 800bda6:	89ab      	ldrh	r3, [r5, #12]
 800bda8:	065b      	lsls	r3, r3, #25
 800bdaa:	f53f af1d 	bmi.w	800bbe8 <_vfiprintf_r+0x44>
 800bdae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdb0:	e71c      	b.n	800bbec <_vfiprintf_r+0x48>
 800bdb2:	ab03      	add	r3, sp, #12
 800bdb4:	9300      	str	r3, [sp, #0]
 800bdb6:	462a      	mov	r2, r5
 800bdb8:	4b05      	ldr	r3, [pc, #20]	; (800bdd0 <_vfiprintf_r+0x22c>)
 800bdba:	a904      	add	r1, sp, #16
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	f7fc ff7d 	bl	8008cbc <_printf_i>
 800bdc2:	e7e4      	b.n	800bd8e <_vfiprintf_r+0x1ea>
 800bdc4:	0800dd04 	.word	0x0800dd04
 800bdc8:	0800dd0e 	.word	0x0800dd0e
 800bdcc:	08008775 	.word	0x08008775
 800bdd0:	0800bb7f 	.word	0x0800bb7f
 800bdd4:	0800dd0a 	.word	0x0800dd0a

0800bdd8 <__swbuf_r>:
 800bdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdda:	460e      	mov	r6, r1
 800bddc:	4614      	mov	r4, r2
 800bdde:	4605      	mov	r5, r0
 800bde0:	b118      	cbz	r0, 800bdea <__swbuf_r+0x12>
 800bde2:	6a03      	ldr	r3, [r0, #32]
 800bde4:	b90b      	cbnz	r3, 800bdea <__swbuf_r+0x12>
 800bde6:	f7fd fb27 	bl	8009438 <__sinit>
 800bdea:	69a3      	ldr	r3, [r4, #24]
 800bdec:	60a3      	str	r3, [r4, #8]
 800bdee:	89a3      	ldrh	r3, [r4, #12]
 800bdf0:	071a      	lsls	r2, r3, #28
 800bdf2:	d525      	bpl.n	800be40 <__swbuf_r+0x68>
 800bdf4:	6923      	ldr	r3, [r4, #16]
 800bdf6:	b31b      	cbz	r3, 800be40 <__swbuf_r+0x68>
 800bdf8:	6823      	ldr	r3, [r4, #0]
 800bdfa:	6922      	ldr	r2, [r4, #16]
 800bdfc:	1a98      	subs	r0, r3, r2
 800bdfe:	6963      	ldr	r3, [r4, #20]
 800be00:	b2f6      	uxtb	r6, r6
 800be02:	4283      	cmp	r3, r0
 800be04:	4637      	mov	r7, r6
 800be06:	dc04      	bgt.n	800be12 <__swbuf_r+0x3a>
 800be08:	4621      	mov	r1, r4
 800be0a:	4628      	mov	r0, r5
 800be0c:	f7ff fe00 	bl	800ba10 <_fflush_r>
 800be10:	b9e0      	cbnz	r0, 800be4c <__swbuf_r+0x74>
 800be12:	68a3      	ldr	r3, [r4, #8]
 800be14:	3b01      	subs	r3, #1
 800be16:	60a3      	str	r3, [r4, #8]
 800be18:	6823      	ldr	r3, [r4, #0]
 800be1a:	1c5a      	adds	r2, r3, #1
 800be1c:	6022      	str	r2, [r4, #0]
 800be1e:	701e      	strb	r6, [r3, #0]
 800be20:	6962      	ldr	r2, [r4, #20]
 800be22:	1c43      	adds	r3, r0, #1
 800be24:	429a      	cmp	r2, r3
 800be26:	d004      	beq.n	800be32 <__swbuf_r+0x5a>
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	07db      	lsls	r3, r3, #31
 800be2c:	d506      	bpl.n	800be3c <__swbuf_r+0x64>
 800be2e:	2e0a      	cmp	r6, #10
 800be30:	d104      	bne.n	800be3c <__swbuf_r+0x64>
 800be32:	4621      	mov	r1, r4
 800be34:	4628      	mov	r0, r5
 800be36:	f7ff fdeb 	bl	800ba10 <_fflush_r>
 800be3a:	b938      	cbnz	r0, 800be4c <__swbuf_r+0x74>
 800be3c:	4638      	mov	r0, r7
 800be3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be40:	4621      	mov	r1, r4
 800be42:	4628      	mov	r0, r5
 800be44:	f000 f806 	bl	800be54 <__swsetup_r>
 800be48:	2800      	cmp	r0, #0
 800be4a:	d0d5      	beq.n	800bdf8 <__swbuf_r+0x20>
 800be4c:	f04f 37ff 	mov.w	r7, #4294967295
 800be50:	e7f4      	b.n	800be3c <__swbuf_r+0x64>
	...

0800be54 <__swsetup_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	4b2a      	ldr	r3, [pc, #168]	; (800bf00 <__swsetup_r+0xac>)
 800be58:	4605      	mov	r5, r0
 800be5a:	6818      	ldr	r0, [r3, #0]
 800be5c:	460c      	mov	r4, r1
 800be5e:	b118      	cbz	r0, 800be68 <__swsetup_r+0x14>
 800be60:	6a03      	ldr	r3, [r0, #32]
 800be62:	b90b      	cbnz	r3, 800be68 <__swsetup_r+0x14>
 800be64:	f7fd fae8 	bl	8009438 <__sinit>
 800be68:	89a3      	ldrh	r3, [r4, #12]
 800be6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be6e:	0718      	lsls	r0, r3, #28
 800be70:	d422      	bmi.n	800beb8 <__swsetup_r+0x64>
 800be72:	06d9      	lsls	r1, r3, #27
 800be74:	d407      	bmi.n	800be86 <__swsetup_r+0x32>
 800be76:	2309      	movs	r3, #9
 800be78:	602b      	str	r3, [r5, #0]
 800be7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be7e:	81a3      	strh	r3, [r4, #12]
 800be80:	f04f 30ff 	mov.w	r0, #4294967295
 800be84:	e034      	b.n	800bef0 <__swsetup_r+0x9c>
 800be86:	0758      	lsls	r0, r3, #29
 800be88:	d512      	bpl.n	800beb0 <__swsetup_r+0x5c>
 800be8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be8c:	b141      	cbz	r1, 800bea0 <__swsetup_r+0x4c>
 800be8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be92:	4299      	cmp	r1, r3
 800be94:	d002      	beq.n	800be9c <__swsetup_r+0x48>
 800be96:	4628      	mov	r0, r5
 800be98:	f7fe fb6c 	bl	800a574 <_free_r>
 800be9c:	2300      	movs	r3, #0
 800be9e:	6363      	str	r3, [r4, #52]	; 0x34
 800bea0:	89a3      	ldrh	r3, [r4, #12]
 800bea2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bea6:	81a3      	strh	r3, [r4, #12]
 800bea8:	2300      	movs	r3, #0
 800beaa:	6063      	str	r3, [r4, #4]
 800beac:	6923      	ldr	r3, [r4, #16]
 800beae:	6023      	str	r3, [r4, #0]
 800beb0:	89a3      	ldrh	r3, [r4, #12]
 800beb2:	f043 0308 	orr.w	r3, r3, #8
 800beb6:	81a3      	strh	r3, [r4, #12]
 800beb8:	6923      	ldr	r3, [r4, #16]
 800beba:	b94b      	cbnz	r3, 800bed0 <__swsetup_r+0x7c>
 800bebc:	89a3      	ldrh	r3, [r4, #12]
 800bebe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bec6:	d003      	beq.n	800bed0 <__swsetup_r+0x7c>
 800bec8:	4621      	mov	r1, r4
 800beca:	4628      	mov	r0, r5
 800becc:	f000 f88c 	bl	800bfe8 <__smakebuf_r>
 800bed0:	89a0      	ldrh	r0, [r4, #12]
 800bed2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bed6:	f010 0301 	ands.w	r3, r0, #1
 800beda:	d00a      	beq.n	800bef2 <__swsetup_r+0x9e>
 800bedc:	2300      	movs	r3, #0
 800bede:	60a3      	str	r3, [r4, #8]
 800bee0:	6963      	ldr	r3, [r4, #20]
 800bee2:	425b      	negs	r3, r3
 800bee4:	61a3      	str	r3, [r4, #24]
 800bee6:	6923      	ldr	r3, [r4, #16]
 800bee8:	b943      	cbnz	r3, 800befc <__swsetup_r+0xa8>
 800beea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800beee:	d1c4      	bne.n	800be7a <__swsetup_r+0x26>
 800bef0:	bd38      	pop	{r3, r4, r5, pc}
 800bef2:	0781      	lsls	r1, r0, #30
 800bef4:	bf58      	it	pl
 800bef6:	6963      	ldrpl	r3, [r4, #20]
 800bef8:	60a3      	str	r3, [r4, #8]
 800befa:	e7f4      	b.n	800bee6 <__swsetup_r+0x92>
 800befc:	2000      	movs	r0, #0
 800befe:	e7f7      	b.n	800bef0 <__swsetup_r+0x9c>
 800bf00:	200001e0 	.word	0x200001e0

0800bf04 <_raise_r>:
 800bf04:	291f      	cmp	r1, #31
 800bf06:	b538      	push	{r3, r4, r5, lr}
 800bf08:	4604      	mov	r4, r0
 800bf0a:	460d      	mov	r5, r1
 800bf0c:	d904      	bls.n	800bf18 <_raise_r+0x14>
 800bf0e:	2316      	movs	r3, #22
 800bf10:	6003      	str	r3, [r0, #0]
 800bf12:	f04f 30ff 	mov.w	r0, #4294967295
 800bf16:	bd38      	pop	{r3, r4, r5, pc}
 800bf18:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bf1a:	b112      	cbz	r2, 800bf22 <_raise_r+0x1e>
 800bf1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf20:	b94b      	cbnz	r3, 800bf36 <_raise_r+0x32>
 800bf22:	4620      	mov	r0, r4
 800bf24:	f000 f830 	bl	800bf88 <_getpid_r>
 800bf28:	462a      	mov	r2, r5
 800bf2a:	4601      	mov	r1, r0
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf32:	f000 b817 	b.w	800bf64 <_kill_r>
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d00a      	beq.n	800bf50 <_raise_r+0x4c>
 800bf3a:	1c59      	adds	r1, r3, #1
 800bf3c:	d103      	bne.n	800bf46 <_raise_r+0x42>
 800bf3e:	2316      	movs	r3, #22
 800bf40:	6003      	str	r3, [r0, #0]
 800bf42:	2001      	movs	r0, #1
 800bf44:	e7e7      	b.n	800bf16 <_raise_r+0x12>
 800bf46:	2400      	movs	r4, #0
 800bf48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	4798      	blx	r3
 800bf50:	2000      	movs	r0, #0
 800bf52:	e7e0      	b.n	800bf16 <_raise_r+0x12>

0800bf54 <raise>:
 800bf54:	4b02      	ldr	r3, [pc, #8]	; (800bf60 <raise+0xc>)
 800bf56:	4601      	mov	r1, r0
 800bf58:	6818      	ldr	r0, [r3, #0]
 800bf5a:	f7ff bfd3 	b.w	800bf04 <_raise_r>
 800bf5e:	bf00      	nop
 800bf60:	200001e0 	.word	0x200001e0

0800bf64 <_kill_r>:
 800bf64:	b538      	push	{r3, r4, r5, lr}
 800bf66:	4d07      	ldr	r5, [pc, #28]	; (800bf84 <_kill_r+0x20>)
 800bf68:	2300      	movs	r3, #0
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	4608      	mov	r0, r1
 800bf6e:	4611      	mov	r1, r2
 800bf70:	602b      	str	r3, [r5, #0]
 800bf72:	f7f7 f9d1 	bl	8003318 <_kill>
 800bf76:	1c43      	adds	r3, r0, #1
 800bf78:	d102      	bne.n	800bf80 <_kill_r+0x1c>
 800bf7a:	682b      	ldr	r3, [r5, #0]
 800bf7c:	b103      	cbz	r3, 800bf80 <_kill_r+0x1c>
 800bf7e:	6023      	str	r3, [r4, #0]
 800bf80:	bd38      	pop	{r3, r4, r5, pc}
 800bf82:	bf00      	nop
 800bf84:	20000c30 	.word	0x20000c30

0800bf88 <_getpid_r>:
 800bf88:	f7f7 b9be 	b.w	8003308 <_getpid>

0800bf8c <_malloc_usable_size_r>:
 800bf8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf90:	1f18      	subs	r0, r3, #4
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	bfbc      	itt	lt
 800bf96:	580b      	ldrlt	r3, [r1, r0]
 800bf98:	18c0      	addlt	r0, r0, r3
 800bf9a:	4770      	bx	lr

0800bf9c <__swhatbuf_r>:
 800bf9c:	b570      	push	{r4, r5, r6, lr}
 800bf9e:	460c      	mov	r4, r1
 800bfa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfa4:	2900      	cmp	r1, #0
 800bfa6:	b096      	sub	sp, #88	; 0x58
 800bfa8:	4615      	mov	r5, r2
 800bfaa:	461e      	mov	r6, r3
 800bfac:	da0d      	bge.n	800bfca <__swhatbuf_r+0x2e>
 800bfae:	89a3      	ldrh	r3, [r4, #12]
 800bfb0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bfb4:	f04f 0100 	mov.w	r1, #0
 800bfb8:	bf0c      	ite	eq
 800bfba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bfbe:	2340      	movne	r3, #64	; 0x40
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	6031      	str	r1, [r6, #0]
 800bfc4:	602b      	str	r3, [r5, #0]
 800bfc6:	b016      	add	sp, #88	; 0x58
 800bfc8:	bd70      	pop	{r4, r5, r6, pc}
 800bfca:	466a      	mov	r2, sp
 800bfcc:	f000 f848 	bl	800c060 <_fstat_r>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	dbec      	blt.n	800bfae <__swhatbuf_r+0x12>
 800bfd4:	9901      	ldr	r1, [sp, #4]
 800bfd6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bfda:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bfde:	4259      	negs	r1, r3
 800bfe0:	4159      	adcs	r1, r3
 800bfe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfe6:	e7eb      	b.n	800bfc0 <__swhatbuf_r+0x24>

0800bfe8 <__smakebuf_r>:
 800bfe8:	898b      	ldrh	r3, [r1, #12]
 800bfea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bfec:	079d      	lsls	r5, r3, #30
 800bfee:	4606      	mov	r6, r0
 800bff0:	460c      	mov	r4, r1
 800bff2:	d507      	bpl.n	800c004 <__smakebuf_r+0x1c>
 800bff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bff8:	6023      	str	r3, [r4, #0]
 800bffa:	6123      	str	r3, [r4, #16]
 800bffc:	2301      	movs	r3, #1
 800bffe:	6163      	str	r3, [r4, #20]
 800c000:	b002      	add	sp, #8
 800c002:	bd70      	pop	{r4, r5, r6, pc}
 800c004:	ab01      	add	r3, sp, #4
 800c006:	466a      	mov	r2, sp
 800c008:	f7ff ffc8 	bl	800bf9c <__swhatbuf_r>
 800c00c:	9900      	ldr	r1, [sp, #0]
 800c00e:	4605      	mov	r5, r0
 800c010:	4630      	mov	r0, r6
 800c012:	f7fb fb7b 	bl	800770c <_malloc_r>
 800c016:	b948      	cbnz	r0, 800c02c <__smakebuf_r+0x44>
 800c018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c01c:	059a      	lsls	r2, r3, #22
 800c01e:	d4ef      	bmi.n	800c000 <__smakebuf_r+0x18>
 800c020:	f023 0303 	bic.w	r3, r3, #3
 800c024:	f043 0302 	orr.w	r3, r3, #2
 800c028:	81a3      	strh	r3, [r4, #12]
 800c02a:	e7e3      	b.n	800bff4 <__smakebuf_r+0xc>
 800c02c:	89a3      	ldrh	r3, [r4, #12]
 800c02e:	6020      	str	r0, [r4, #0]
 800c030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c034:	81a3      	strh	r3, [r4, #12]
 800c036:	9b00      	ldr	r3, [sp, #0]
 800c038:	6163      	str	r3, [r4, #20]
 800c03a:	9b01      	ldr	r3, [sp, #4]
 800c03c:	6120      	str	r0, [r4, #16]
 800c03e:	b15b      	cbz	r3, 800c058 <__smakebuf_r+0x70>
 800c040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c044:	4630      	mov	r0, r6
 800c046:	f000 f81d 	bl	800c084 <_isatty_r>
 800c04a:	b128      	cbz	r0, 800c058 <__smakebuf_r+0x70>
 800c04c:	89a3      	ldrh	r3, [r4, #12]
 800c04e:	f023 0303 	bic.w	r3, r3, #3
 800c052:	f043 0301 	orr.w	r3, r3, #1
 800c056:	81a3      	strh	r3, [r4, #12]
 800c058:	89a3      	ldrh	r3, [r4, #12]
 800c05a:	431d      	orrs	r5, r3
 800c05c:	81a5      	strh	r5, [r4, #12]
 800c05e:	e7cf      	b.n	800c000 <__smakebuf_r+0x18>

0800c060 <_fstat_r>:
 800c060:	b538      	push	{r3, r4, r5, lr}
 800c062:	4d07      	ldr	r5, [pc, #28]	; (800c080 <_fstat_r+0x20>)
 800c064:	2300      	movs	r3, #0
 800c066:	4604      	mov	r4, r0
 800c068:	4608      	mov	r0, r1
 800c06a:	4611      	mov	r1, r2
 800c06c:	602b      	str	r3, [r5, #0]
 800c06e:	f7f7 f9b2 	bl	80033d6 <_fstat>
 800c072:	1c43      	adds	r3, r0, #1
 800c074:	d102      	bne.n	800c07c <_fstat_r+0x1c>
 800c076:	682b      	ldr	r3, [r5, #0]
 800c078:	b103      	cbz	r3, 800c07c <_fstat_r+0x1c>
 800c07a:	6023      	str	r3, [r4, #0]
 800c07c:	bd38      	pop	{r3, r4, r5, pc}
 800c07e:	bf00      	nop
 800c080:	20000c30 	.word	0x20000c30

0800c084 <_isatty_r>:
 800c084:	b538      	push	{r3, r4, r5, lr}
 800c086:	4d06      	ldr	r5, [pc, #24]	; (800c0a0 <_isatty_r+0x1c>)
 800c088:	2300      	movs	r3, #0
 800c08a:	4604      	mov	r4, r0
 800c08c:	4608      	mov	r0, r1
 800c08e:	602b      	str	r3, [r5, #0]
 800c090:	f7f7 f9b1 	bl	80033f6 <_isatty>
 800c094:	1c43      	adds	r3, r0, #1
 800c096:	d102      	bne.n	800c09e <_isatty_r+0x1a>
 800c098:	682b      	ldr	r3, [r5, #0]
 800c09a:	b103      	cbz	r3, 800c09e <_isatty_r+0x1a>
 800c09c:	6023      	str	r3, [r4, #0]
 800c09e:	bd38      	pop	{r3, r4, r5, pc}
 800c0a0:	20000c30 	.word	0x20000c30
 800c0a4:	00000000 	.word	0x00000000

0800c0a8 <floor>:
 800c0a8:	ec51 0b10 	vmov	r0, r1, d0
 800c0ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800c0b8:	2e13      	cmp	r6, #19
 800c0ba:	ee10 5a10 	vmov	r5, s0
 800c0be:	ee10 8a10 	vmov	r8, s0
 800c0c2:	460c      	mov	r4, r1
 800c0c4:	dc31      	bgt.n	800c12a <floor+0x82>
 800c0c6:	2e00      	cmp	r6, #0
 800c0c8:	da14      	bge.n	800c0f4 <floor+0x4c>
 800c0ca:	a333      	add	r3, pc, #204	; (adr r3, 800c198 <floor+0xf0>)
 800c0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d0:	f7f4 f8dc 	bl	800028c <__adddf3>
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	f7f4 fd1e 	bl	8000b18 <__aeabi_dcmpgt>
 800c0dc:	b138      	cbz	r0, 800c0ee <floor+0x46>
 800c0de:	2c00      	cmp	r4, #0
 800c0e0:	da53      	bge.n	800c18a <floor+0xe2>
 800c0e2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c0e6:	4325      	orrs	r5, r4
 800c0e8:	d052      	beq.n	800c190 <floor+0xe8>
 800c0ea:	4c2d      	ldr	r4, [pc, #180]	; (800c1a0 <floor+0xf8>)
 800c0ec:	2500      	movs	r5, #0
 800c0ee:	4621      	mov	r1, r4
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	e024      	b.n	800c13e <floor+0x96>
 800c0f4:	4f2b      	ldr	r7, [pc, #172]	; (800c1a4 <floor+0xfc>)
 800c0f6:	4137      	asrs	r7, r6
 800c0f8:	ea01 0307 	and.w	r3, r1, r7
 800c0fc:	4303      	orrs	r3, r0
 800c0fe:	d01e      	beq.n	800c13e <floor+0x96>
 800c100:	a325      	add	r3, pc, #148	; (adr r3, 800c198 <floor+0xf0>)
 800c102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c106:	f7f4 f8c1 	bl	800028c <__adddf3>
 800c10a:	2200      	movs	r2, #0
 800c10c:	2300      	movs	r3, #0
 800c10e:	f7f4 fd03 	bl	8000b18 <__aeabi_dcmpgt>
 800c112:	2800      	cmp	r0, #0
 800c114:	d0eb      	beq.n	800c0ee <floor+0x46>
 800c116:	2c00      	cmp	r4, #0
 800c118:	bfbe      	ittt	lt
 800c11a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c11e:	4133      	asrlt	r3, r6
 800c120:	18e4      	addlt	r4, r4, r3
 800c122:	ea24 0407 	bic.w	r4, r4, r7
 800c126:	2500      	movs	r5, #0
 800c128:	e7e1      	b.n	800c0ee <floor+0x46>
 800c12a:	2e33      	cmp	r6, #51	; 0x33
 800c12c:	dd0b      	ble.n	800c146 <floor+0x9e>
 800c12e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c132:	d104      	bne.n	800c13e <floor+0x96>
 800c134:	ee10 2a10 	vmov	r2, s0
 800c138:	460b      	mov	r3, r1
 800c13a:	f7f4 f8a7 	bl	800028c <__adddf3>
 800c13e:	ec41 0b10 	vmov	d0, r0, r1
 800c142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c146:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800c14a:	f04f 37ff 	mov.w	r7, #4294967295
 800c14e:	40df      	lsrs	r7, r3
 800c150:	4238      	tst	r0, r7
 800c152:	d0f4      	beq.n	800c13e <floor+0x96>
 800c154:	a310      	add	r3, pc, #64	; (adr r3, 800c198 <floor+0xf0>)
 800c156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15a:	f7f4 f897 	bl	800028c <__adddf3>
 800c15e:	2200      	movs	r2, #0
 800c160:	2300      	movs	r3, #0
 800c162:	f7f4 fcd9 	bl	8000b18 <__aeabi_dcmpgt>
 800c166:	2800      	cmp	r0, #0
 800c168:	d0c1      	beq.n	800c0ee <floor+0x46>
 800c16a:	2c00      	cmp	r4, #0
 800c16c:	da0a      	bge.n	800c184 <floor+0xdc>
 800c16e:	2e14      	cmp	r6, #20
 800c170:	d101      	bne.n	800c176 <floor+0xce>
 800c172:	3401      	adds	r4, #1
 800c174:	e006      	b.n	800c184 <floor+0xdc>
 800c176:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c17a:	2301      	movs	r3, #1
 800c17c:	40b3      	lsls	r3, r6
 800c17e:	441d      	add	r5, r3
 800c180:	45a8      	cmp	r8, r5
 800c182:	d8f6      	bhi.n	800c172 <floor+0xca>
 800c184:	ea25 0507 	bic.w	r5, r5, r7
 800c188:	e7b1      	b.n	800c0ee <floor+0x46>
 800c18a:	2500      	movs	r5, #0
 800c18c:	462c      	mov	r4, r5
 800c18e:	e7ae      	b.n	800c0ee <floor+0x46>
 800c190:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c194:	e7ab      	b.n	800c0ee <floor+0x46>
 800c196:	bf00      	nop
 800c198:	8800759c 	.word	0x8800759c
 800c19c:	7e37e43c 	.word	0x7e37e43c
 800c1a0:	bff00000 	.word	0xbff00000
 800c1a4:	000fffff 	.word	0x000fffff

0800c1a8 <_init>:
 800c1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1aa:	bf00      	nop
 800c1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ae:	bc08      	pop	{r3}
 800c1b0:	469e      	mov	lr, r3
 800c1b2:	4770      	bx	lr

0800c1b4 <_fini>:
 800c1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b6:	bf00      	nop
 800c1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ba:	bc08      	pop	{r3}
 800c1bc:	469e      	mov	lr, r3
 800c1be:	4770      	bx	lr
